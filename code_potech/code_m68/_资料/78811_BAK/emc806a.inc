; 寄存器定义
_IAR	==	0
_TCC	==	1
_PC	==	2
_STATUS	==	3
_RSR	==	4
_PPSR	==	5
_FSR	==	10
_ISR	==	15
_RAM_ADDR	==	12
_RAM_DATA	==	13

_R0	==	0
_R1	==	1
_R2	==	2
_R3	==	3
_R4	==	4
_R5	==	5
_R6	==	6
_R7	==	7
_R8	==	8
_R9	==	9
_RA	==	10
_RB	==	11
_RC	==	12
_RD	==	13
_RE	==	14
_RF	==	15

_IOC5	==	5
_IOC6	==	6
_IOC7	==	7
_IOC8	==	8
_IOC9	==	9
_IOCA	==	10
_IOCB	==	11
_IOCC	==	12
_IOCD	==	13
_IOCE	==	14
_IOCF	==	15

R0	==	0
R1	==	1
R2	==	2
R3	==	3
R4	==	4
R5	==	5
R6	==	6
R7	==	7
R8	==	8
R9	==	9
RA	==	10
RB	==	11
RC	==	12
RD	==	13
RE	==	14
RF	==	15

; 位定义
C	==	0
DC	==	1
Z	==	2
P	==	3
T	==	4
PS0	==	0
PS1	==	1
PS2	==	2

; 常数定义
NULL	==	0


; 指令定义

; ---------------------------------------
; 寻址指令

REGBANK	MACRO	NUM		; C2
	IF	NUM == 0
		BC	_RSR,6
		BC	_RSR,7
	ELSEIF	NUM == 1
		BS	_RSR,6
		BC	_RSR,7
	ELSEIF	NUM == 2
		BC	_RSR,6
		BS	_RSR,7
	ELSEIF	NUM == 3
		BS	_RSR,6
		BS	_RSR,7
	ELSE
		MESSAGE "WARRING: DON'T HAVE SPECIFY BANK!"
	ENDIF
	ENDM

RAMBANK	MACRO	NUM
	IF	NUM == 0
		CRAM	_RB,0
		CRAM	_RB,2
	ELSEIF	NUM == 1
		SRAM	_RB,0
		CRAM	_RB,2
	ELSEIF	NUM == 2
		CRAM	_RB,0
		SRAM	_RB,2
	ELSEIF	NUM == 3
		SRAM	_RB,0
		SRAM	_RB,2
	ELSE
		MESSAGE "WARRING: DON'T HAVE SPECIFY BANK!"
	ENDIF
	ENDM

PAGE	MACRO	#ADDR		; C1
	IF	ADDR < 0X2000
		PAGE	(ADDR/0X400)
	ELSE
		MESSAGE "OUT OF PROGRAM MEMORY !"
	ENDIF
	ENDM

PAGEIO	MACRO	NUM
	IF	NUM == 0
		CRAM	_STATUS,7
	ELSEIF	NUM == 1
		SRAM	_STATUS,7
	ELSE
		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
	ENDIF
	ENDM

CALL	MACRO	#ADDR		; C1/C3
	IF	ADDR < 0X2000
		IF	($/0X400) == (ADDR/0X400)
			CALL	(ADDR%0X400)
		ELSE
			LCALL	ADDR
		ENDIF
	ELSE
		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
	ENDIF
	ENDM

LCALL	MACRO	ADDR		; C3
	IF	ADDR < 0X2000
		PAGE	#ADDR
		CALL	(ADDR%0X400)
		PAGE	#$
	ELSE
		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
	ENDIF
	ENDM

JMP	MACRO	#ADDR		; C1/C2
	IF	ADDR < 0X2000
		IF	($/0X400) == (ADDR/0X400)
			JMP	(ADDR%0X400)
		ELSE
			LJMP	ADDR
		ENDIF
	ELSE
		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
	ENDIF
	ENDM

LJMP	MACRO	ADDR		; C2
	IF	ADDR < 0X2000
		PAGE	#ADDR
		JMP	(ADDR%0X400)
	ELSE
		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
	ENDIF
	ENDM

JPZ	MACRO	ADDR		; C2
	JBC	_STATUS,Z
	JMP	ADDR
	ENDM

LJPZ	MACRO	ADDR		; C4
	JBS	_STATUS,Z
	JMP	$+3
	LJMP	ADDR
	ENDM

JPZ	MACRO	#ADDR		; C2/4
	IF	ADDR < 0X2000
		IF	($/0X400) == (ADDR/0X400)
			JPZ	ADDR
		ELSE
			LJPZ	ADDR
		ENDIF
	ELSE
		MESSAGE	"错误：程序地址超出范围！"
	ENDIF
	ENDM

JPNZ	MACRO	ADDR		; C2
	JBS	_STATUS,Z
	JMP	ADDR
	ENDM

LJPNZ	MACRO	ADDR		; C4
	JBC	_STATUS,Z
	JMP	$+3
	LJMP	ADDR
	ENDM

JPNZ	MACRO	#ADDR		; C2/4
	IF	ADDR < 0X2000
		IF	($/0X400) == (ADDR/0X400)
			JPNZ	ADDR
		ELSE
			LJPNZ	ADDR
		ENDIF
	ELSE
		MESSAGE	"错误：程序地址超出范围！"
	ENDIF
	ENDM

JPC	MACRO	ADDR		; C2
	JBC	_STATUS,C
	JMP	ADDR
	ENDM

LJPC	MACRO	ADDR		; C4
	JBS	_STATUS,C
	JMP	$+3
	LJMP	ADDR
	ENDM

JPC	MACRO	#ADDR		; C2/4
	IF	ADDR < 0X2000
		IF	($/0X400) == (ADDR/0X400)
			JPC	ADDR
		ELSE
			LJPC	ADDR
		ENDIF
	ELSE
		MESSAGE	"错误：程序地址超出范围！"
	ENDIF
	ENDM

JPNC	MACRO	ADDR		; C2
	JBS	_STATUS,C
	JMP	ADDR
	ENDM

LJPNC	MACRO	ADDR		; C4
	JBC	_STATUS,C
	JMP	$+3
	LJMP	ADDR
	ENDM

JPNC	MACRO	#ADDR		; C2/4
	IF	ADDR < 0X2000
		IF	($/0X400) == (ADDR/0X400)
			JPNC	ADDR
		ELSE
			LJPNC	ADDR
		ENDIF
	ELSE
		MESSAGE	"错误：程序地址超出范围！"
	ENDIF
	ENDM

JPB	MACRO	REG,BIT,ADDR	; C2
	JBC	REG,BIT
	JMP	ADDR
	ENDM

LJPB	MACRO	REG,BIT,ADDR	; C4
	JBS	REG,BIT
	JMP	$+3
	LJMP	ADDR
	ENDM

JPB	MACRO	REG,BIT,#ADDR	; C2/4
	IF	ADDR < 0X2000
		IF	($/0X400) == (ADDR/0X400)
			JPB	REG,BIT,ADDR
		ELSE
			LJPB	REG,BIT,ADDR
		ENDIF
	ELSE
		MESSAGE	"错误：程序地址超出范围！"
	ENDIF
	ENDM

JPNB	MACRO	REG,BIT,ADDR	; C2
	JBS	REG,BIT
	JMP	ADDR
	ENDM

LJPNB	MACRO	REG,BIT,ADDR
	JBC	REG,BIT
	JMP	$+3
	LJMP	ADDR
	ENDM

JPNB	MACRO	REG,BIT,#ADDR
	IF	ADDR < 0X2000
		IF	($/0X400) == (ADDR/0X400)
			JPNB	REG,BIT,ADDR
		ELSE
			LJPNB	REG,BIT,ADDR
		ENDIF
	ELSE
		MESSAGE	"错误：程序地址超出范围！"
	ENDIF
	ENDM

JPOB	MACRO	IO_REG,BIT,ADDR	; C4
	IOR	IO_REG
	GA	BIT
	JPNZ	ADDR
	ENDM

JPOB	MACRO	IO_REG,BIT,#ADDR
	IOR	IO_REG
	GA	BIT
	JPNZ	#ADDR
	ENDM

JPONB	MACRO	IO_REG,BIT,ADDR	; C4
	IOR	IO_REG
	GA	BIT
	JPZ	ADDR
	ENDM

JPONB	MACRO	IO_REG,BIT,#ADDR
	IOR	IO_REG
	GA	BIT
	JPZ	#ADDR
	ENDM

JPS	MACRO	REG1,REG2,ADDR	;	if REG1 < REG2, than jump to ADDR
	SUBA	REG1,REG2
	JPNC	ADDR
	ENDM

JPS	MACRO	REG1,REG2,#ADDR
	SUBA	REG1,REG2
	JPNC	#ADDR
	ENDM

JPNS	MACRO	REG1,REG2,ADDR
	SUBA	REG1,REG2
	JPC	ADDR
	ENDM

JPNS	MACRO	REG1,REG2,#ADDR
	SUBA	REG1,REG2
	JPC	#ADDR
	ENDM


; --------------------------------------
; 位操作指令

SA	MACRO	BIT		; C1
	IF	BIT == 0
		OR	A,@0X1
	ELSEIF	BIT == 1
		OR	A,@0X2
	ELSEIF	BIT == 2
		OR	A,@0X4
	ELSEIF	BIT == 3
		OR	A,@0X8
	ELSEIF	BIT == 4
		OR	A,@0X10
	ELSEIF	BIT == 5
		OR	A,@0X20
	ELSEIF	BIT == 6
		OR	A,@0X40
	ELSEIF	BIT == 7
		OR	A,@0X80
	ENDIF
	ENDM

CA	MACRO	BIT		; C1
	IF	BIT == 0
		AND	A,@0XFE
	ELSEIF	BIT == 1
		AND	A,@0XFD
	ELSEIF	BIT == 2
		AND	A,@0XFB
	ELSEIF	BIT == 3
		AND	A,@0XF7
	ELSEIF	BIT == 4
		AND	A,@0XEF
	ELSEIF	BIT == 5
		AND	A,@0XDF
	ELSEIF	BIT == 6
		AND	A,@0XBF
	ELSEIF	BIT == 7
		AND	A,@0X7F
	ENDIF
	ENDM

GA	MACRO	BIT		; C1
	IF	BIT == 0
		AND	A,@0X01
	ELSEIF	BIT == 1
		AND	A,@0X02
	ELSEIF	BIT == 2
		AND	A,@0X04
	ELSEIF	BIT == 3
		AND	A,@0X08
	ELSEIF	BIT == 4
		AND	A,@0X10
	ELSEIF	BIT == 5
		AND	A,@0X20
	ELSEIF	BIT == 6
		AND	A,@0X40
	ELSEIF	BIT == 7
		AND	A,@0X80
	ENDIF
	ENDM

SRAM	MACRO	REG,BIT		; C1
	;MOV	A,REG
	;SA	BIT
	;MOV	REG,A
	BS	REG,BIT
	ENDM

CRAM	MACRO	REG,BIT		; C1
	;MOV	A,REG
	;CA	BIT
	;MOV	REG,A
	BC	REG,BIT
	ENDM

GRAM	MACRO	REG,BIT		; C2
	MOV	A,REG
	GA	BIT
	ENDM

BINVRAM	MACRO	REG,BIT		; C5
	JPB	REG,BIT,$+3
	SRAM	REG,BIT
	JMP	$+2
	CRAM	REG,BIT
	ENDM

SIO	MACRO	IO_REG,BIT	; C3
	IOR	IO_REG
	SA	BIT
	IOW	IO_REG
	ENDM

CIO	MACRO	IO_REG,BIT	; C3
	IOR	IO_REG
	CA	BIT
	IOW	IO_REG
	ENDM

GIO	MACRO	IO_REG,BIT	; C2
	IOR	IO_REG
	GA	BIT
	ENDM

BINVIO	MACRO	IO_REG,BIT
	GIO	IO_REG,BIT
	JPNZ	$+5
	SIO	IO_REG,BIT
	JMP	$+4
	CIO	IO_REG,BIT
	ENDM

CLRC	MACRO
	BC	_STATUS,C
	ENDM

SETC	MACRO
	BS	_STATUS,C
	ENDM

CLRZ	MACRO
	BC	_STATUS,Z
	ENDM

SETZ	MACRO
	BS	_STATUS,Z
	ENDM

; --------------------------------------
; 数据移动指令

MOV	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	MOV	REG1,A
	ENDM

MOV	MACRO	REG1,REG2	; C2
	IF	REG1 != REG2
	MOV	A,REG2
	MOV	REG1,A
	ENDIF
	ENDM

IOR	MACRO	REG,IO_REG	; C2
	IOR	IO_REG
	MOV	REG,A
	ENDM

IOW	MACRO	IO_REG,@VALUE	; C2
	MOV	A,@VALUE
	IOW	IO_REG
	ENDM

IOW	MACRO	IO_REG,REG	; C2
	MOV	A,REG
	IOW	IO_REG
	ENDM
	

; --------------------------------------
; 算术运算指令

DECZ	MACRO	REG		; 自减，如果是0就不减
	MOV	A,REG
	JPZ	$+2
	DEC	REG
	ENDM

ADD	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	ADD	REG1,A
	ENDM

ADD	MACRO	REG1,REG2	; C2
	MOV	A,REG2
	ADD	REG1,A
	ENDM

ADDA	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	ADD	A,REG1
	ENDM

ADDA	MACRO	REG1,REG2	; C2
	MOV	A,REG2
	ADD	A,REG1
	ENDM

SUB	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	SUB	REG1,A
	ENDM

SUB	MACRO	REG1,REG2	; C2
	MOV	A,REG2
	SUB	REG1,A
	ENDM

SUBA	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	SUB	A,REG1
	ENDM

SUBA	MACRO	@VALUE,REG1	; C2
	MOV	A,REG1
	SUB	A,@VALUE
	ENDM

SUBA	MACRO	REG1,REG2	; C2
	MOV	A,REG2
	SUB	A,REG1
	ENDM

FADD	MACRO	A,REG		; C3
	IF	REG < 0x40
		BANK	0
		ADD	A,REG
	ELSEIF	REG < 0X60
		BANK	1
		ADD	A,REG - 0X20
	ELSEIF	REG < 0X80
		BANK	2
		ADD	A,REG - 0X40
	ELSEIF	REG < 0XA0
		BANK	3
		ADD	A,REG - 0X60
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FADD	MACRO	REG,A		;C3
	IF	REG < 0x40
		BANK	0
		ADD	REG,A
	ELSEIF	REG < 0X60
		BANK	1
		ADD	REG - 0X20,A
	ELSEIF	REG < 0X80
		BANK	2
		ADD	REG - 0X40,A
	ELSEIF	REG < 0XA0
		BANK	3
		ADD	REG - 0X60,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FADD	MACRO	REG1,@VALUE	; C4
	IF	REG1 < 0x40
		BANK	0
		MOV	A,@VALUE
		ADD	REG1,A
	ELSEIF	REG1 < 0X60
		BANK	1
		MOV	A,@VALUE
		ADD	REG1 - 0X20,A
	ELSEIF	REG1 < 0X80
		BANK	2
		MOV	A,@VALUE
		ADD	REG1 - 0X40,A
	ELSEIF	REG1 < 0XA0
		BANK	3
		MOV	A,@VALUE
		ADD	REG1 - 0X60,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FADD	MACRO	REG1,REG2	; C6
	IF	REG2 < 0x40
		BANK	0
		MOV	A, REG2
		FADD	REG1,A
	ELSEIF	REG2 < 0X60
		BANK	1
		MOV	A, REG2 - 0X20
		FADD 	REG1,A
	ELSEIF	REG2 < 0X80
		BANK	2
		MOV	A, REG2 - 0X40
		FADD	REG1,A
	ELSEIF	REG2 < 0XA0
		BANK	3
		MOV	A, REG2 - 0X60
		FADD	REG1,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FADDA	MACRO	REG1,@VALUE	; C4
	IF	REG1 < 0x40
		BANK	0
		MOV	A,@VALUE
		ADD	A,REG1
	ELSEIF	REG1 < 0X60
		BANK	1
		MOV	A,@VALUE
		ADD	A,REG1 - 0X20
	ELSEIF	REG1 < 0X80
		BANK	2
		MOV	A,@VALUE
		ADD	A,REG1 - 0X40
	ELSEIF	REG1 < 0XA0
		BANK	3
		MOV	A,@VALUE
		ADD	A,REG1 - 0X60
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FADDA	MACRO	REG1,REG2	; C6
	IF	REG2 < 0x40
		BANK	0
		MOV	A, REG2
		FADD	A,REG1
	ELSEIF	REG2 < 0X60
		BANK	1
		MOV	A, REG2 - 0X20
		FADD 	A,REG1
	ELSEIF	REG2 < 0X80
		BANK	2
		MOV	A, REG2 - 0X40
		FADD	A,REG1
	ELSEIF	REG2 < 0XA0
		BANK	3
		MOV	A, REG2 - 0X60
		FADD	A,REG1
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FSUB	MACRO	A,REG		; C3
	IF	REG < 0x40
		BANK	0
		SUB	A,REG
	ELSEIF	REG < 0X60
		BANK	1
		SUB	A,REG - 0X20
	ELSEIF	REG < 0X80
		BANK	2
		SUB	A,REG - 0X40
	ELSEIF	REG < 0XA0
		BANK	3
		SUB	A,REG - 0X60
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FSUB	MACRO	REG,A		;C3
	IF	REG < 0x40
		BANK	0
		SUB	REG,A
	ELSEIF	REG < 0X60
		BANK	1
		SUB	REG - 0X20,A
	ELSEIF	REG < 0X80
		BANK	2
		SUB	REG - 0X40,A
	ELSEIF	REG < 0XA0
		BANK	3
		SUB	REG - 0X60,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FSUB	MACRO	REG1,@VALUE	; C4
	IF	REG1 < 0x40
		BANK	0
		MOV	A,@VALUE
		SUB	REG1,A
	ELSEIF	REG1 < 0X60
		BANK	1
		MOV	A,@VALUE
		SUB	REG1 - 0X20,A
	ELSEIF	REG1 < 0X80
		BANK	2
		MOV	A,@VALUE
		SUB	REG1 - 0X40,A
	ELSEIF	REG1 < 0XA0
		BANK	3
		MOV	A,@VALUE
		SUB	REG1 - 0X60,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FSUB	MACRO	REG1,REG2	; C6
	IF	REG2 < 0x40
		BANK	0
		MOV	A, REG2
		FSUB	REG1,A
	ELSEIF	REG2 < 0X60
		BANK	1
		MOV	A, REG2 - 0X20
		FSUB 	REG1,A
	ELSEIF	REG2 < 0X80
		BANK	2
		MOV	A, REG2 - 0X40
		FSUB	REG1,A
	ELSEIF	REG2 < 0XA0
		BANK	3
		MOV	A, REG2 - 0X60
		FSUB	REG1,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FSUBA	MACRO	REG1,@VALUE	; C4
	IF	REG1 < 0x40
		BANK	0
		MOV	A,@VALUE
		SUB	A,REG1
	ELSEIF	REG1 < 0X60
		BANK	1
		MOV	A,@VALUE
		SUB	A,REG1 - 0X20
	ELSEIF	REG1 < 0X80
		BANK	2
		MOV	A,@VALUE
		SUB	A,REG1 - 0X40
	ELSEIF	REG1 < 0XA0
		BANK	3
		MOV	A,@VALUE
		SUB	A,REG1 - 0X60
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FSUBA	MACRO	REG1,REG2	; C6
	IF	REG2 < 0x40
		BANK	0
		MOV	A, REG2
		FSUB	A,REG1
	ELSEIF	REG2 < 0X60
		BANK	1
		MOV	A, REG2 - 0X20
		FSUB 	A,REG1
	ELSEIF	REG2 < 0X80
		BANK	2
		MOV	A, REG2 - 0X40
		FSUB	A,REG1
	ELSEIF	REG2 < 0XA0
		BANK	3
		MOV	A, REG2 - 0X60
		FSUB	A,REG1
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

; --------------------------------------
; 逻辑运算指令

AND	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	AND	REG1,A
	ENDM

AND	MACRO	REG1,REG2	; C2
	MOV	A,REG2
	AND	REG1,A
	ENDM

ANDA	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	AND	A,REG1
	ENDM

ANDA	MACRO	REG1,REG2	; C2
	MOV	A,REG2
	AND	A,REG1
	ENDM

OR	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	OR	REG1,A
	ENDM

OR	MACRO	REG1,REG2	; C2
	MOV	A,REG2
	OR	REG1,A
	ENDM

ORA	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	OR	A,REG1
	ENDM

ORA	MACRO	REG1,REG2	; C2
	MOV	A,REG2
	OR	A,REG1
	ENDM

XOR	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	XOR	REG1,A
	ENDM

XOR	MACRO	REG1,REG2	; C2
	MOV	A,REG2
	XOR	REG1,A
	ENDM

XORA	MACRO	REG1,@VALUE	; C2
	MOV	A,@VALUE
	XOR	A,REG1
	ENDM

XORA	MACRO	REG1,REG2	; C2
	MOV	A,REG2
	XOR	A,REG1
	ENDM

FAND	MACRO	A,REG		; C3
	IF	REG < 0x40
		BANK	0
		AND	A,REG
	ELSEIF	REG < 0X60
		BANK	1
		AND	A,REG - 0X20
	ELSEIF	REG < 0X80
		BANK	2
		AND	A,REG - 0X40
	ELSEIF	REG < 0XA0
		BANK	3
		AND	A,REG - 0X60
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FAND	MACRO	REG,A		;C3
	IF	REG < 0x40
		BANK	0
		AND	REG,A
	ELSEIF	REG < 0X60
		BANK	1
		AND	REG - 0X20,A
	ELSEIF	REG < 0X80
		BANK	2
		AND	REG - 0X40,A
	ELSEIF	REG < 0XA0
		BANK	3
		AND	REG - 0X60,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FAND	MACRO	REG1,@VALUE	; C4
	IF	REG1 < 0x40
		BANK	0
		MOV	A,@VALUE
		AND	REG1,A
	ELSEIF	REG1 < 0X60
		BANK	1
		MOV	A,@VALUE
		AND	REG1 - 0X20,A
	ELSEIF	REG1 < 0X80
		BANK	2
		MOV	A,@VALUE
		AND	REG1 - 0X40,A
	ELSEIF	REG1 < 0XA0
		BANK	3
		MOV	A,@VALUE
		AND	REG1 - 0X60,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FAND	MACRO	REG1,REG2	; C6
	IF	REG2 < 0x40
		BANK	0
		MOV	A, REG2
		FAND	REG1,A
	ELSEIF	REG2 < 0X60
		BANK	1
		MOV	A, REG2 - 0X20
		FAND 	REG1,A
	ELSEIF	REG2 < 0X80
		BANK	2
		MOV	A, REG2 - 0X40
		FAND	REG1,A
	ELSEIF	REG2 < 0XA0
		BANK	3
		MOV	A, REG2 - 0X60
		FAND	REG1,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FANDA	MACRO	REG1,@VALUE	; C4
	IF	REG1 < 0x40
		BANK	0
		MOV	A,@VALUE
		AND	A,REG1
	ELSEIF	REG1 < 0X60
		BANK	1
		MOV	A,@VALUE
		AND	A,REG1 - 0X20
	ELSEIF	REG1 < 0X80
		BANK	2
		MOV	A,@VALUE
		AND	A,REG1 - 0X40
	ELSEIF	REG1 < 0XA0
		BANK	3
		MOV	A,@VALUE
		AND	A,REG1 - 0X60
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FANDA	MACRO	REG1,REG2	; C6
	IF	REG2 < 0x40
		BANK	0
		MOV	A, REG2
		FAND	A,REG1
	ELSEIF	REG2 < 0X60
		BANK	1
		MOV	A, REG2 - 0X20
		FAND 	A,REG1
	ELSEIF	REG2 < 0X80
		BANK	2
		MOV	A, REG2 - 0X40
		FAND	A,REG1
	ELSEIF	REG2 < 0XA0
		BANK	3
		MOV	A, REG2 - 0X60
		FAND	A,REG1
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FOR	MACRO	A,REG		; C3
	IF	REG < 0x40
		BANK	0
		OR	A,REG
	ELSEIF	REG < 0X60
		BANK	1
		OR	A,REG - 0X20
	ELSEIF	REG < 0X80
		BANK	2
		OR	A,REG - 0X40
	ELSEIF	REG < 0XA0
		BANK	3
		OR	A,REG - 0X60
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FOR	MACRO	REG,A		;C3
	IF	REG < 0x40
		BANK	0
		OR	REG,A
	ELSEIF	REG < 0X60
		BANK	1
		OR	REG - 0X20,A
	ELSEIF	REG < 0X80
		BANK	2
		OR	REG - 0X40,A
	ELSEIF	REG < 0XA0
		BANK	3
		OR	REG - 0X60,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FOR	MACRO	REG1,@VALUE	; C4
	IF	REG1 < 0x40
		BANK	0
		MOV	A,@VALUE
		OR	REG1,A
	ELSEIF	REG1 < 0X60
		BANK	1
		MOV	A,@VALUE
		OR	REG1 - 0X20,A
	ELSEIF	REG1 < 0X80
		BANK	2
		MOV	A,@VALUE
		OR	REG1 - 0X40,A
	ELSEIF	REG1 < 0XA0
		BANK	3
		MOV	A,@VALUE
		OR	REG1 - 0X60,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FOR	MACRO	REG1,REG2	; C6
	IF	REG2 < 0x40
		BANK	0
		MOV	A, REG2
		FOR	REG1,A
	ELSEIF	REG2 < 0X60
		BANK	1
		MOV	A, REG2 - 0X20
		FOR 	REG1,A
	ELSEIF	REG2 < 0X80
		BANK	2
		MOV	A, REG2 - 0X40
		FOR	REG1,A
	ELSEIF	REG2 < 0XA0
		BANK	3
		MOV	A, REG2 - 0X60
		FOR	REG1,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FORA	MACRO	REG1,@VALUE	; C4
	IF	REG1 < 0x40
		BANK	0
		MOV	A,@VALUE
		OR	A,REG1
	ELSEIF	REG1 < 0X60
		BANK	1
		MOV	A,@VALUE
		OR	A,REG1 - 0X20
	ELSEIF	REG1 < 0X80
		BANK	2
		MOV	A,@VALUE
		OR	A,REG1 - 0X40
	ELSEIF	REG1 < 0XA0
		BANK	3
		MOV	A,@VALUE
		OR	A,REG1 - 0X60
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FORA	MACRO	REG1,REG2	; C6
	IF	REG2 < 0x40
		BANK	0
		MOV	A, REG2
		FOR	A,REG1
	ELSEIF	REG2 < 0X60
		BANK	1
		MOV	A, REG2 - 0X20
		FOR 	A,REG1
	ELSEIF	REG2 < 0X80
		BANK	2
		MOV	A, REG2 - 0X40
		FOR	A,REG1
	ELSEIF	REG2 < 0XA0
		BANK	3
		MOV	A, REG2 - 0X60
		FOR	A,REG1
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FXOR	MACRO	A,REG		; C3
	IF	REG < 0x40
		BANK	0
		XOR	A,REG
	ELSEIF	REG < 0X60
		BANK	1
		XOR	A,REG - 0X20
	ELSEIF	REG < 0X80
		BANK	2
		XOR	A,REG - 0X40
	ELSEIF	REG < 0XA0
		BANK	3
		XOR	A,REG - 0X60
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FXOR	MACRO	REG,A		;C3
	IF	REG < 0x40
		BANK	0
		XOR	REG,A
	ELSEIF	REG < 0X60
		BANK	1
		XOR	REG - 0X20,A
	ELSEIF	REG < 0X80
		BANK	2
		XOR	REG - 0X40,A
	ELSEIF	REG < 0XA0
		BANK	3
		XOR	REG - 0X60,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FXOR	MACRO	REG1,@VALUE	; C4
	IF	REG1 < 0x40
		BANK	0
		MOV	A,@VALUE
		XOR	REG1,A
	ELSEIF	REG1 < 0X60
		BANK	1
		MOV	A,@VALUE
		XOR	REG1 - 0X20,A
	ELSEIF	REG1 < 0X80
		BANK	2
		MOV	A,@VALUE
		XOR	REG1 - 0X40,A
	ELSEIF	REG1 < 0XA0
		BANK	3
		MOV	A,@VALUE
		XOR	REG1 - 0X60,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FXOR	MACRO	REG1,REG2	; C6
	IF	REG2 < 0x40
		BANK	0
		MOV	A, REG2
		FXOR	REG1,A
	ELSEIF	REG2 < 0X60
		BANK	1
		MOV	A, REG2 - 0X20
		FXOR 	REG1,A
	ELSEIF	REG2 < 0X80
		BANK	2
		MOV	A, REG2 - 0X40
		FXOR	REG1,A
	ELSEIF	REG2 < 0XA0
		BANK	3
		MOV	A, REG2 - 0X60
		FXOR	REG1,A
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FXORA	MACRO	REG1,@VALUE	; C4
	IF	REG1 < 0x40
		BANK	0
		MOV	A,@VALUE
		XOR	A,REG1
	ELSEIF	REG1 < 0X60
		BANK	1
		MOV	A,@VALUE
		XOR	A,REG1 - 0X20
	ELSEIF	REG1 < 0X80
		BANK	2
		MOV	A,@VALUE
		XOR	A,REG1 - 0X40
	ELSEIF	REG1 < 0XA0
		BANK	3
		MOV	A,@VALUE
		XOR	A,REG1 - 0X60
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

FXORA	MACRO	REG1,REG2	; C6
	IF	REG2 < 0x40
		BANK	0
		MOV	A, REG2
		FXOR	A,REG1
	ELSEIF	REG2 < 0X60
		BANK	1
		MOV	A, REG2 - 0X20
		FXOR 	A,REG1
	ELSEIF	REG2 < 0X80
		BANK	2
		MOV	A, REG2 - 0X40
		FXOR	A,REG1
	ELSEIF	REG2 < 0XA0
		BANK	3
		MOV	A, REG2 - 0X60
		FXOR	A,REG1
	ELSE
		MESSAGE "WARRING: OUT OF BANK !"
	ENDIF
	ENDM

