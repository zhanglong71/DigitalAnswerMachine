     1                      
     2                     ;-------------------------------------------------------------------------------
     3                     INCLUDE	"emc78811.inc"
     1            C        /*************************************************
     2            C        
     3            C        说明：
     4            C        1.  本文件用于emc78911芯片
     5            C        2.  本文件主要包含定义部分和指令部分
     6            C        3.  定义部分为一些主要寄存器的定义和主要常数定义
     7            C        4.  指令部分为宏汇编编写指令，扩展了基本指令，
     8            C            分为寻址指令、位操作指令、数据操作指令、算术运算和逻辑运算指令。
     9            C        *************************************************/
    10            C        
    11            C        
    12            C        
    13            C        ; 寄存器定义
    14            C        
    15       0000 C        _IAR	==	0
    16       0001 C        _TCC	==	1
    17       0002 C        _PC	==	2
    18       0003 C        _STATUS	==	3
    19       0004 C        _RSR	==	4
    20       0005 C        _PAGE	==	5
    21       0005 C        _PPSR	==	5
    22       0006 C        _P6	==	6
    23       0007 C        _P7	==	7
    24       0008 C        _P8	==	8
    25       0009 C        _P9	==	9
    26       000A C        _FSK	==	10
    27       000A C        _FSR	==	10
    28       000B C        _DTMF	==	11
    29       000C C        _ADDR	==	12
    30       000D C        _DATA	==	13
    31       000E C        _LCD	==	14
    32       000E C        _WDT	==	14
    33       000F C        _ISR	==	15
    34            C        
    35       0000 C        _R0	==	0
    36       0001 C        _R1	==	1
    37       0002 C        _R2	==	2
    38       0003 C        _R3	==	3
    39       0004 C        _R4	==	4
    40       0005 C        _R5	==	5
    41       0006 C        _R6	==	6
    42       0007 C        _R7	==	7
    43       0008 C        _R8	==	8
    44       0009 C        _R9	==	9
    45       000A C        _RA	==	10
    46       000B C        _RB	==	11
    47       000C C        _RC	==	12
    48       000D C        _RD	==	13
    49       000E C        _RE	==	14
    50       000F C        _RF	==	15
    51            C        
    52       0005 C        _IOC5	==	5
    53       0006 C        _IOC6	==	6
    54       0007 C        _IOC7	==	7
    55       0008 C        _IOC8	==	8
    56       0009 C        _IOC9	==	9
    57       000A C        _IOCA	==	10
    58       000B C        _IOCB	==	11
    59       000C C        _IOCC	==	12
    60       000D C        _IOCD	==	13
    61       000E C        _IOCE	==	14
    62       000F C        _IOCF	==	15
    63            C        
    64            C        
    65            C        ; 位定义
    66       0000 C        C	==	0
    67       0001 C        DC	==	1
    68       0002 C        Z	==	2
    69       0003 C        P	==	3
    70       0004 C        T	==	4
    71       0006 C        PG	==	6
    72            C        
    73            C        
    74            C        ; 常数定义
    75       0000 C        NULL	==	0
    76       0000 C        FALSE	==	0
    77       0001 C        TRUE	==	1
    78            C        
    79            C        
    80            C        
    81            C        /*************************************************
    82            C        扩展指令
    83            C        利用宏汇编编写的指令，后面注释有指令的运行周期
    84            C        *************************************************/
    85            C        
    86            C        RETL	MACRO	#REG
    87            C        	MOV	A,REG
    88            C        	RET
    89            C        	ENDM
    90            C        
    91            C        ORGN	MACRO
    92            C        	ORG	(($/0x100+1)*0x100)
    93            C        	ENDM
    94            C        
    95            C        TBL	MACRO	@NUM				; TBL的扩展
    96            C        	IF	(($+1)%0x100+NUM) < 0x100
    97            C        		TBL
    98            C        	ELSE
    99            C        		TBL
   100            C        		MESSAGE	"ERROR(TBL): TBL列表发生跨页!"
   101            C        	ENDIF
   102            C        	ENDM
   103            C        
   104            C        MTBL	MACRO					; MTBL
   105            C        	IFDEF	x_TBL
   106            C        
   107            C        		IF	(y_TBL==1)
   108            C        			TBL
   109            C        			x_TBL		VAR	$
   110            C        			y_TBL		VAR	0
   111            C        		ELSE
   112            C        			MESSAGE	"ERROR(ENDT): 找不到相匹配的ENDT"
   113            C        		ENDIF
   114            C        	ELSE
   115            C        		TBL
   116            C        		x_TBL		VAR	$
   117            C        		y_TBL		VAR	0
   118            C        	ENDIF
   119            C        	ENDM
   120            C        
   121            C        ENDT	MACRO
   122            C        	IFDEF	x_TBL
   123            C        		IF	(y_TBL==0)
   124            C        			IF	(x_TBL/0x100) != ($/0x100)
   125            C        				MESSAGE	"ERROR(ENDT): TBL列表发生跨页!"
   126            C        			ENDIF
   127            C        			
   128            C        		ELSE
   129            C        			MESSAGE	"ERROR(ENDT): 找不到相匹配的MTBL"
   130            C        		ENDIF
   131            C        		y_TBL	VAR	1
   132            C        	ELSE
   133            C        		MESSAGE	"ERROR(ENDT): 找不到相匹配的MTBL"
   134            C        	ENDIF
   135            C        	ENDM	
   136            C        
   137            C        ; 数据指令
   138            C        DB	MACRO	DATA1
   139            C        	RETL	@DATA1
   140            C        	ENDM
   141            C        
   142            C        DB	MACRO	DATA1,DATA2
   143            C        	RETL	@DATA1
   144            C        	RETL	@DATA2
   145            C        	ENDM
   146            C        
   147            C        DB	MACRO	DATA1,DATA2,DATA3
   148            C        	RETL	@DATA1
   149            C        	RETL	@DATA2
   150            C        	RETL	@DATA3
   151            C        	ENDM
   152            C        
   153            C        DB	MACRO	DATA1,DATA2,DATA3,DATA4
   154            C        	RETL	@DATA1
   155            C        	RETL	@DATA2
   156            C        	RETL	@DATA3
   157            C        	RETL	@DATA4
   158            C        	ENDM
   159            C        
   160            C        DB	MACRO	DATA1,DATA2,DATA3,DATA4,DATA5
   161            C        	RETL	@DATA1
   162            C        	RETL	@DATA2
   163            C        	RETL	@DATA3
   164            C        	RETL	@DATA4
   165            C        	RETL	@DATA5
   166            C        	ENDM
   167            C        
   168            C        DB	MACRO	DATA1,DATA2,DATA3,DATA4,DATA5,DATA6
   169            C        	RETL	@DATA1
   170            C        	RETL	@DATA2
   171            C        	RETL	@DATA3
   172            C        	RETL	@DATA4
   173            C        	RETL	@DATA5
   174            C        	RETL	@DATA6
   175            C        	ENDM
   176            C        
   177            C        ; 寻址指令
   178            C        
   179            C        PAGE	MACRO	#ADDR			; C1
   180            C        	IF	ADDR < 0x4000
   181            C        		PAGE	(ADDR/0x400)
   182            C        	ELSE
   183            C        		MESSAGE	"WARRING(PAGE): Out of program memory!"
   184            C        	ENDIF
   185            C        	ENDM
   186            C        
   187            C        BANK	MACRO	NUM			; C2
   188            C        	IF	NUM == 0
   189            C        		BC	_RSR,6
   190            C        		BC	_RSR,7
   191            C        	ELSEIF	NUM == 1
   192            C        		BS	_RSR,6
   193            C        		BC	_RSR,7
   194            C        	ELSEIF	NUM == 2
   195            C        		BC	_RSR,6
   196            C        		BS	_RSR,7
   197            C        	ELSEIF	NUM == 3
   198            C        		BS	_RSR,6
   199            C        		BS	_RSR,7
   200            C        	ELSE
   201            C        		MESSAGE	"WARRING(BANK): Don't have specify bank!"
   202            C        	ENDIF
   203            C        	ENDM
   204            C        
   205            C        
   206            C        BLOCK	MACRO	NUM			; C2
   207            C        	IFDEF	VALUE_IOCA
   208            C        		IF	NUM < 10
   209            C        			MOV	A,@((NUM<<1)+VALUE_IOCA)
   210            C        			IOW	_IOCA
   211            C        		ELSE
   212            C        			MESSAGE	"WARRING(BLOCK): Don't have specify bank!"
   213            C        		ENDIF
   214            C        	ELSE
   215            C        		MESSAGE	"WARRING(BLOCK): 'VALUE_IOCA' not define!"
   216            C        	ENDIF
   217            C        	ENDM
   218            C        
   219            C        IOPAGE	MACRO	NUM
   220            C        	IF	NUM == 0
   221            C        		BC	_STATUS,PG
   222            C        	ELSEIF	NUM == 1
   223            C        		BS	_STATUS,PG
   224            C        	ELSE
   225            C        		MESSAGE	"WARRING(BANK): Don't have specify IOPAGE!"
   226            C        	ENDIF
   227            C        	ENDM
   228            C        
   229            C        LCALL	MACRO	ADDR			; C3
   230            C        	IF	ADDR < 0x4000
   231            C        		PAGE	#ADDR
   232            C        		CALL	(ADDR%0x400)
   233            C        		PAGE	#($)
   234            C        	ELSE
   235            C        		MESSAGE	"WARRING(LCALL): Out of program memory!"
   236            C        	ENDIF
   237            C        	ENDM
   238            C        
   239            C        ;CALL	MACRO	#ADDR			; C1/C3
   240            C        ;	IF	ADDR < 0x4000
   241            C        ;		IF	($/0x400) == (ADDR/0x400)
   242            C        ;			CALL	(ADDR%0x400)
   243            C        ;		ELSE
   244            C        ;			PAGE	#ADDR
   245            C        ;			CALL	(ADDR%0x400)
   246            C        ;		ENDIF
   247            C        ;	ELSE
   248            C        ;		MESSAGE	"WARRING(CALL): Out of program memory!"
   249            C        ;	ENDIF
   250            C        ;	ENDM
   251            C        
   252            C        LJMP	MACRO	ADDR			; C2
   253            C        	IF	ADDR < 0x4000
   254            C        		PAGE	#ADDR
   255            C        		JMP	(ADDR%0x400)
   256            C        	ELSE
   257            C        		MESSAGE	"WARRING(LJMP): Out of program memory!"
   258            C        	ENDIF
   259            C        	ENDM
   260            C        
   261            C        ;JMP	MACRO	#ADDR			; C1/C2
   262            C        ;	IF	ADDR < 0x4000
   263            C        ;		IF	($/0x400) == (ADDR/0x400)
   264            C        ;			JMP	(ADDR%0x400)
   265            C        ;		ELSE
   266            C        ;			LJMP	ADDR
   267            C        ;		ENDIF
   268            C        ;	ELSE
   269            C        ;		MESSAGE "WARRING(JMP): Out of program memory!"
   270            C        ;	ENDIF
   271            C        ;	ENDM
   272            C        
   273            C        JPZ	MACRO	ADDR			; C2
   274            C        	IF	ADDR < 0x4000
   275            C        		JBC	_STATUS,Z
   276            C        		JMP	ADDR
   277            C        	ELSE
   278            C        		MESSAGE	"WARRING(JPZ): Out of program memory!"
   279            C        	ENDIF
   280            C        	ENDM
   281            C        
   282            C        LJPZ	MACRO	ADDR			; C4
   283            C        	IF	ADDR< 0x4000
   284            C        		JBS	_STATUS,Z
   285            C        		JMP	$+3
   286            C        		LJMP	ADDR
   287            C        	ELSE
   288            C        		MESSAGE	"WARRING(LJPZ): Out of program memory!"
   289            C        	ENDIF
   290            C        	ENDM
   291            C        
   292            C        JPZ	MACRO	#ADDR			; C2/C4
   293            C        	IF	ADDR < 0x4000
   294            C        		IF	($/0x400) == (ADDR/0x400)
   295            C        			JPZ	ADDR
   296            C        		ELSE
   297            C        			LJPZ	ADDR
   298            C        		ENDIF
   299            C        	ELSE
   300            C        		MESSAGE	"WARRING(JPZ): Out of program memory!"
   301            C        	ENDIF
   302            C        	ENDM
   303            C        
   304            C        JPNZ	MACRO	ADDR			; C2
   305            C        	IF	ADDR < 0x4000
   306            C        		JBS	_STATUS,Z
   307            C        		JMP	ADDR
   308            C        	ELSE
   309            C        		MESSAGE	"WARRING(JPNZ): Out of program memory!"
   310            C        	ENDIF
   311            C        	ENDM
   312            C        
   313            C        LJPNZ	MACRO	ADDR			; C4
   314            C        	IF	ADDR< 0x4000
   315            C        		JBC	_STATUS,Z
   316            C        		JMP	$+3
   317            C        		LJMP	ADDR
   318            C        	ELSE
   319            C        		MESSAGE	"WARRING(LJPNZ): Out of program memory!"
   320            C        	ENDIF
   321            C        	ENDM
   322            C        
   323            C        JPNZ	MACRO	#ADDR			; C2/C4
   324            C        	IF	ADDR < 0x4000
   325            C        		IF	($/0x400) == (ADDR/0x400)
   326            C        			JPNZ	ADDR
   327            C        		ELSE
   328            C        			LJPNZ	ADDR
   329            C        		ENDIF
   330            C        	ELSE
   331            C        		MESSAGE	"WARRING(JPNZ): Out of program memory!"
   332            C        	ENDIF
   333            C        	ENDM
   334            C        
   335            C        JPC	MACRO	ADDR			; C2
   336            C        	IF	ADDR < 0x4000
   337            C        		JBC	_STATUS,C
   338            C        		JMP	ADDR
   339            C        	ELSE
   340            C        		MESSAGE	"WARRING(JPC): Out of program memory!"
   341            C        	ENDIF
   342            C        	ENDM
   343            C        
   344            C        LJPC	MACRO	ADDR			; C4
   345            C        	IF	ADDR< 0x4000
   346            C        		JBS	_STATUS,C
   347            C        		JMP	$+3
   348            C        		LJMP	ADDR
   349            C        	ELSE
   350            C        		MESSAGE	"WARRING(LJPC): Out of program memory!"
   351            C        	ENDIF
   352            C        	ENDM
   353            C        
   354            C        JPC	MACRO	#ADDR			; C2/C4
   355            C        	IF	ADDR < 0x4000
   356            C        		IF	($/0x400) == (ADDR/0x400)
   357            C        			JPC	ADDR
   358            C        		ELSE
   359            C        			LJPC	ADDR
   360            C        		ENDIF
   361            C        	ELSE
   362            C        		MESSAGE	"WARRING(JPC): Out of program memory!"
   363            C        	ENDIF
   364            C        	ENDM
   365            C        
   366            C        JPNC	MACRO	ADDR			; C2
   367            C        	IF	ADDR < 0x4000
   368            C        		JBS	_STATUS,C
   369            C        		JMP	ADDR
   370            C        	ELSE
   371            C        		MESSAGE	"WARRING(JPNC): Out of program memory!"
   372            C        	ENDIF
   373            C        	ENDM
   374            C        
   375            C        LJPNC	MACRO	ADDR			; C4
   376            C        	IF	ADDR< 0x4000
   377            C        		JBC	_STATUS,C
   378            C        		JMP	$+3
   379            C        		LJMP	ADDR
   380            C        	ELSE
   381            C        		MESSAGE	"WARRING(LJPNC): Out of program memory!"
   382            C        	ENDIF
   383            C        	ENDM
   384            C        
   385            C        JPNC	MACRO	#ADDR			; C2/C4
   386            C        	IF	ADDR < 0x4000
   387            C        		IF	($/0x400) == (ADDR/0x400)
   388            C        			JPNC	ADDR
   389            C        		ELSE
   390            C        			LJPNC	ADDR
   391            C        		ENDIF
   392            C        	ELSE
   393            C        		MESSAGE	"WARRING(JPNC): Out of program memory!"
   394            C        	ENDIF
   395            C        	ENDM
   396            C        
   397            C        JPB	MACRO	REG,BIT,ADDR		; C2
   398            C        	IF	ADDR< 0x4000
   399            C        		JBC	REG,BIT
   400            C        		JMP	ADDR
   401            C        	ELSE
   402            C        		MESSAGE	"WARRING(JPB): Out of program memory!"
   403            C        	ENDIF
   404            C        	ENDM
   405            C        
   406            C        LJPB	MACRO	REG,BIT,ADDR		; C4
   407            C        	IF	ADDR< 0x4000
   408            C        		JBS	REG,BIT
   409            C        		JMP	$+3
   410            C        		LJMP	ADDR
   411            C        	ELSE
   412            C        		MESSAGE	"WARRING(LJPB): Out of program memory!"
   413            C        	ENDIF
   414            C        	ENDM
   415            C        
   416            C        JPB	MACRO	REG,BIT,#ADDR		; C2/C4
   417            C        	IF	ADDR < 0x4000
   418            C        		IF	($/0x400) == (ADDR/0x400)
   419            C        			JPB	REG,BIT,ADDR
   420            C        		ELSE
   421            C        			LJPB	REG,BIT,ADDR
   422            C        		ENDIF
   423            C        	ELSE
   424            C        		MESSAGE	"WARRING(JPB): Out of program memory!"
   425            C        	ENDIF
   426            C        	ENDM
   427            C        
   428            C        JPNB	MACRO	REG,BIT,ADDR		; C2
   429            C        	IF	ADDR< 0x4000
   430            C        		JBS	REG,BIT
   431            C        		JMP	ADDR
   432            C        	ELSE
   433            C        		MESSAGE	"WARRING(JPNB): Out of program memory!"
   434            C        	ENDIF
   435            C        	ENDM
   436            C        
   437            C        LJPNB	MACRO	REG,BIT,ADDR		; C4
   438            C        	IF	ADDR< 0x4000
   439            C        		JBC	REG,BIT
   440            C        		JMP	$+3
   441            C        		LJMP	ADDR
   442            C        	ELSE
   443            C        		MESSAGE	"WARRING(LJPNB): Out of program memory!"
   444            C        	ENDIF
   445            C        	ENDM
   446            C        
   447            C        JPNB	MACRO	REG,BIT,#ADDR		; C2/C4
   448            C        	IF	ADDR < 0x4000
   449            C        		IF	($/0x400) == (ADDR/0x400)
   450            C        			JPNB	REG,BIT,ADDR
   451            C        		ELSE
   452            C        			LJPNB	REG,BIT,ADDR
   453            C        		ENDIF
   454            C        	ELSE
   455            C        		MESSAGE	"WARRING(JPNB): Out of program memory!"
   456            C        	ENDIF
   457            C        	ENDM
   458            C        
   459            C        JPS	MACRO	REG1,REG2,ADDR		;	if REG1 < REG2, than jump to ADDR
   460            C        	SUBA	REG1,REG2
   461            C        	JPNC	ADDR
   462            C        	ENDM
   463            C        
   464            C        JPS	MACRO	REG1,REG2,#ADDR
   465            C        	SUBA	REG1,REG2
   466            C        	JPNC	#ADDR
   467            C        	ENDM
   468            C        
   469            C        JPNS	MACRO	REG1,REG2,ADDR
   470            C        	SUBA	REG1,REG2
   471            C        	JPC	ADDR
   472            C        	ENDM
   473            C        
   474            C        JPNS	MACRO	REG1,REG2,#ADDR
   475            C        	SUBA	REG1,REG2
   476            C        	JPC	#ADDR
   477            C        	ENDM
   478            C        
   479            C        
   480            C        
   481            C        ; ------------------------------------------------
   482            C        
   483            C        ; 位操作指令
   484            C        
   485            C        SETB	MACRO	BIT			; C1
   486            C        	IF	BIT < 8
   487            C        		OR	A,@(1<<BIT)
   488            C        	ELSE
   489            C        		MESSAGE	"WARRING(SETB): Out of bit!"
   490            C        	ENDIF
   491            C        	ENDM
   492            C        
   493            C        CLRB	MACRO	BIT			; C1
   494            C        	IF	BIT < 8
   495            C        		AND	A,@(~(1<<BIT))
   496            C        	ELSE
   497            C        		MESSAGE	"WARRING(CLRB): Out of bit!"
   498            C        	ENDIF
   499            C        	ENDM
   500            C        
   501            C        INVB	MACRO	BIT			; C1
   502            C        	IF	BIT < 8
   503            C        		XOR	A,@(1<<BIT)
   504            C        	ELSE
   505            C        		MESSAGE	"WARRING(INVB): Out of bit!"
   506            C        	ENDIF
   507            C        	ENDM
   508            C        
   509            C        GETB	MACRO	BIT			; C1
   510            C        	IF	BIT < 8
   511            C        		AND	A,@(1<<BIT)
   512            C        	ELSE
   513            C        		MESSAGE	"WARRING(INVB): Out of bit!"
   514            C        	ENDIF
   515            C        	ENDM
   516            C        
   517            C        SETB	MACRO	REG,BIT			; C1
   518            C        	IF	BIT < 8
   519            C        		BS	REG,BIT
   520            C        	ELSE
   521            C        		MESSAGE	"WARRING(SETB): Out of bit!"
   522            C        	ENDIF
   523            C        	ENDM
   524            C        
   525            C        CLRB	MACRO	REG,BIT			; C1
   526            C        	IF	BIT < 8
   527            C        		BC	REG,BIT
   528            C        	ELSE
   529            C        		MESSAGE	"WARRING(CLRB): Out of bit!"
   530            C        	ENDIF
   531            C        	ENDM
   532            C        
   533            C        INVB	MACRO	REG,BIT			; C2
   534            C        	IF	BIT < 8
   535            C        		XOR	REG,@(1<<BIT)
   536            C        	ELSE
   537            C        		MESSAGE	"WARRING(INVB): Out of bit!"
   538            C        	ENDIF
   539            C        	ENDM
   540            C        
   541            C        GETB	MACRO	REG,BIT			; C2
   542            C        	IF	BIT < 8
   543            C        		ANDA	REG,@(1<<BIT)
   544            C        	ELSE
   545            C        		MESSAGE	"WARRING(GETB): Out of bit!"
   546            C        	ENDIF
   547            C        	ENDM
   548            C        
   549            C        CLRC	MACRO				; C1
   550            C        	BC	_STATUS,C
   551            C        	ENDM
   552            C        
   553            C        SETC	MACRO				; C1
   554            C        	BS	_STATUS,C
   555            C        	ENDM
   556            C        
   557            C        CLRZ	MACRO				; C1
   558            C        	BC	_STATUS,Z
   559            C        	ENDM
   560            C        
   561            C        SETZ	MACRO				; C1
   562            C        	BS	_STATUS,Z
   563            C        	ENDM
   564            C        
   565            C        
   566            C        ; ------------------------------------------------
   567            C        
   568            C        ; 数据移动指令
   569            C        
   570            C        MOV	MACRO	REG,@VALUE		; C2
   571            C        	MOV	A,@VALUE
   572            C        	MOV	REG,A
   573            C        	ENDM
   574            C        
   575            C        MOV	MACRO	REG1,REG2		; C2
   576            C        
   577            C        	MOV	A,REG2
   578            C        
   579            C        	MOV	REG1,A
   580            C        	ENDM
   581            C        
   582            C        IOR	MACRO	REG,IO_REG		; C2
   583            C        	IOR	IO_REG
   584            C        	MOV	REG,A
   585            C        	ENDM
   586            C        
   587            C        IOW	MACRO	IO_REG,@VALUE		; C2
   588            C        	MOV	A,@VALUE
   589            C        	IOW	IO_REG
   590            C        	ENDM
   591            C        
   592            C        IOW	MACRO	IO_REG,REG		; C2
   593            C        	MOV	A,REG
   594            C        	IOW	IO_REG
   595            C        	ENDM
   596            C        
   597            C        
   598            C        ; ------------------------------------------------
   599            C        
   600            C        ; 算术运算指令
   601            C        
   602            C        ADD	MACRO	REG,@VALUE		; C2
   603            C        	MOV	A,@VALUE
   604            C        	ADD	REG,A
   605            C        	ENDM
   606            C        
   607            C        ADD	MACRO	REG1,REG2		; C2
   608            C        	MOV	A,REG2
   609            C        	ADD	REG1,A
   610            C        	ENDM
   611            C        
   612            C        ADDA	MACRO	REG,@VALUE		; C2
   613            C        	MOV	A,@VALUE
   614            C        	ADD	A,REG
   615            C        	ENDM
   616            C        
   617            C        ADDA	MACRO	REG1,REG2		; C2
   618            C        	MOV	A,REG2
   619            C        	ADD	A,REG1
   620            C        	ENDM
   621            C        
   622            C        SUB	MACRO	REG,@VALUE		; C2
   623            C        	MOV	A,@VALUE
   624            C        	SUB	REG,A
   625            C        	ENDM
   626            C        
   627            C        SUB	MACRO	REG1,REG2		; C2
   628            C        	MOV	A,REG2
   629            C        	SUB	REG1,A
   630            C        	ENDM
   631            C        
   632            C        SUBA	MACRO	REG,@VALUE		; C2
   633            C        	MOV	A,@VALUE
   634            C        	SUB	A,REG
   635            C        	ENDM
   636            C        
   637            C        SUBA	MACRO	@VALUE,REG		; C2
   638            C        	MOV	A,REG
   639            C        	SUB	A,@VALUE
   640            C        	ENDM
   641            C        
   642            C        SUBA	MACRO	REG1,REG2		; C2
   643            C        	MOV	A,REG2
   644            C        	SUB	A,REG1
   645            C        	ENDM
   646            C        
   647            C        DECZ	MACRO	REG			; C3
   648            C        	MOV	A,REG
   649            C        	JPZ	$+2
   650            C        	DEC	REG
   651            C        	ENDM
   652            C        
   653            C        INCZ	MACRO	REG			; C3
   654            C        	MOV	A,REG
   655            C        	JPZ	$+2
   656            C        	INC	REG
   657            C        	ENDM
   658            C        
   659            C        
   660            C        ; ------------------------------------------------
   661            C        
   662            C        ; 逻辑运算指令
   663            C        
   664            C        AND	MACRO	REG,@VALUE		; C2
   665            C        	MOV	A,@VALUE
   666            C        	AND	REG,A
   667            C        	ENDM
   668            C        
   669            C        AND	MACRO	REG1,REG2		; C2
   670            C        	MOV	A,REG2
   671            C        	AND	REG1,A
   672            C        	ENDM
   673            C        
   674            C        ANDA	MACRO	REG,@VALUE		; C2
   675            C        	MOV	A,@VALUE
   676            C        	AND	A,REG
   677            C        	ENDM
   678            C        
   679            C        ANDA	MACRO	REG1,REG2		; C2
   680            C        	MOV	A,REG2
   681            C        	AND	A,REG1
   682            C        	ENDM
   683            C        
   684            C        OR	MACRO	REG,@VALUE		; C2
   685            C        	MOV	A,@VALUE
   686            C        	OR	REG,A
   687            C        	ENDM
   688            C        
   689            C        OR	MACRO	REG1,REG2		; C2
   690            C        	MOV	A,REG2
   691            C        	OR	REG1,A
   692            C        	ENDM
   693            C        
   694            C        ORA	MACRO	REG,@VALUE		; C2
   695            C        	MOV	A,@VALUE
   696            C        	OR	A,REG
   697            C        	ENDM
   698            C        
   699            C        ORA	MACRO	REG1,REG2		; C2
   700            C        	MOV	A,REG2
   701            C        	OR	A,REG1
   702            C        	ENDM
   703            C        
   704            C        XOR	MACRO	REG,@VALUE		; C2
   705            C        	MOV	A,@VALUE
   706            C        	XOR	REG,A
   707            C        	ENDM
   708            C        
   709            C        XOR	MACRO	REG1,REG2		; C2
   710            C        	MOV	A,REG2
   711            C        	XOR	REG1,A
   712            C        	ENDM
   713            C        
   714            C        XORA	MACRO	REG,@VALUE		; C2
   715            C        	MOV	A,@VALUE
   716            C        	XOR	A,REG
   717            C        	ENDM
   718            C        
   719            C                XORA	MACRO	REG1,REG2		; C2
   720            C        	MOV	A,REG2
   721            C        	XOR	A,REG1
   722            C        	ENDM
   723            C        
   724            C        
     4                     INCLUDE	"emc_reg.inc"
     1            C        
     2            C        /************************寄存器定义*************************/
     3       0010 C        INTBUF_ACC	==	0X10	;ACC
     4       0011 C        CURSOR		==	0X11
     5       0012 C        SYS_FLAG	==	0X12	;status FLAG FOR SYSTEM
     6       0013 C        EVENT		==	0X13	;ACTION FLAG FOR SYSTEM
     7       0014 C        DAM_FLAG	==	0X14	;ACTION FLAG FOR DAM
     8            C        
     9       0015 C        TEMP0		==	0X15
    10       0016 C        TEMP1		==	0X16
    11       0017 C        TEMP2		==	0X17
    12       0018 C        TEMP3		==	0X18
    13       0019 C        TEMP4		==	0X19
    14       001A C        TEMP5		==	0X1A
    15       001B C        OLD_RAM		==	0X1B	;Save the R4 while call function(Note:最上层的函数才能用)
    16       001C C        OFFSET_S	==	0X1C	;offset		(source 	)
    17       001D C        OFFSET_D	==	0X1D	;offset		(destination	)
    18       001E C        COUNT		==	0X1E	;counter
    19       001F C        BASE_ADDR	==	0X1F	;bank/block	(bit7..4=source/bin3..0=destination)
    20            C        ;-------------------------------------------------------------------------------
    21            C        ;bank 0---for inrurrupt
    22       0020 C        INTBUF_PPSR	==	0X20	;R5(PROGRAM PAGE SELECT REGISTER)
    23       0021 C        INTBUF_STATUS	==	0X21	;R3(STATUS)
    24       0022 C        INTBUF_RSR	==	0X22	;R4(RAM SELECT REGISTER)
    25       0023 C        INTBUF_CIDADDR	==	0X23	;RC
    26       0024 C        INTBUF_CIDBLOCK	==	0X24	;CID-block
    27       0025 C        INT_OLD_RAM	==	0X25
    28            C        
    29       0026 C        BANK0_TEMP0	==	0X26
    30       0027 C        BANK0_TEMP1	==	0X27
    31            C        
    32       0029 C        B0_TMR		==	0X29
    33            C        
    34            C        
    35            C        
    36            C        ;--------
    37       0030 C        B0_TMR_TIMER		==	0X30
    38       0031 C        B0_TMR_TIMER_BAK	==	0X31
    39            C        
    40       0032 C        B0_SEC_REG	==	0X32	;RTC
    41       0033 C        B0_MIN_REG	==	0X33
    42       0034 C        B0_HOUR_REG	==	0X34
    43       0035 C        B0_DAY_REG	==	0X35
    44       0036 C        B0_MON_REG	==	0X36
    45       0037 C        B0_YEAR_REG	==	0X37
    46       0038 C        B0_WEEK_REG	==	0X38
    47            C        
    48       0039 C        B0_TMR_VOX	==	0X39
    49       003A C        B0_TMR_CTONE	==	0X3A
    50       003B C        B0_BUF		==	0X3B	;total time
    51       003C C        B0_TMR_BTONE	==	0X3C	;timer
    52       003D C        B0_BTONE_BUF1	==	0X3D	;last on time
    53       003E C        B0_BTONE_BUF2	==	0X3E	;last off time
    54       003F C        B0_BTONE_BUF3	==	0X3F	;status
    55            C        ;-------------------------------------------------------------------------------
    56            C        ;bank 1
    57       0020 C        B1_MSG		==	0X20	;CURRENT SYSTEM MESSAGE
    58       0021 C        B1_PRO_VAR	==	0X21	;FOR SYSTEM STATUS
    59       0022 C        B1_PRO_VAR1	==	0X22	;timer counter
    60       0023 C        B1_CONTRAST	==	0X23	;LCD contrast
    61       0024 C        B1_LANGUAGE	==	0X24	;LANGUAGE
    62       0025 C        B1_FLASH	==	0X25	;flash time
    63       0026 C        B1_RING_NUM	==	0X26	;LENGTH/ring to answer
    64       0027 C        B1_12PSWORD	==	0X27	;
    65       0028 C        B1_34PSWORD	==	0X28	;
    66       0029 C        B1_DTMF_VAL	==	0X29	;
    67            C        ;B1_CID_TYPE	==	0X2A	;the CID type 0=normal/1=Secret/2=Unknown-number or error/3=MessageWaitingActivate/4=MessageWaitingDeactivate
    68            C        
    69            C        ;---
    70       002E C        B1_CID_T	==	0X2E
    71       002F C        B1_CID_N	==	0X2F
    72       0030 C        B1_MSG_T	==	0X30
    73       0031 C        B1_MSG_N	==	0X31
    74       0032 C        B1_MSG_ID	==	0X32
    75            C        ;---
    76       0033 C        B1_SEC_REG	==	0X33	;work temp(date/time/psword)
    77       0034 C        B1_MIN_REG	==	0X34
    78       0035 C        B1_HOUR_REG	==	0X35
    79       0036 C        B1_DAY_REG	==	0X36	;either for ps
    80       0037 C        B1_MON_REG	==	0X37	;either for ps
    81       0038 C        B1_YEAR_REG	==	0X38
    82       0039 C        B1_WEEK_REG	==	0X39
    83            C        ;---for buckup
    84       003A C        BANK1_TEMP0	==	0X3A
    85       003B C        BANK1_TEMP1	==	0X3B
    86       003C C        BANK1_TEMP2	==	0X3C
    87       003D C        BANK1_TEMP3	==	0X3D
    88       003E C        BANK1_TEMP4	==	0X3E
    89       003F C        BANK1_TEMP5	==	0X3F
    90            C        ;-------------------------------------------------------------------------------
    91            C        ;bank 2
    92       0020 C        BANK2_TEMP0	==	0X20
    93       0021 C        BANK2_TEMP1	==	0X21
    94       0022 C        BANK2_TEMP2	==	0X22
    95       0023 C        B2_TMR		==	0X23
    96       0024 C        B2_RING_TMR2	==	0X24
    97            C        
    98       0025 C        B2_TMR_TIMER		==	0X25
    99       0026 C        B2_TMR_TIMER_BAK	==	0X26
   100            C        
   101       0027 C        B2_TMR_CPC	==	0X27
   102            C        
   103       0028 C        B2_POLE_TMR	==	0X28	;极性反转计时和标记
   104            C        ;--------
   105       0029 C        B2_KEY1_GET	==	0X29
   106       002A C        B2_KEY2_GET	==	0X2A
   107       002B C        B2_KEY3_GET	==	0X2B
   108       002C C        B2_KEY4_GET	==	0X2C
   109       002D C        B2_KEY1_BAK	==	0X2D
   110       002E C        B2_KEY2_BAK	==	0X2E
   111       002F C        B2_KEY3_BAK	==	0X2F
   112       0030 C        B2_KEY4_BAK	==	0X30
   113       0031 C        B2_KEY1_VAL	==	0X31
   114       0032 C        B2_KEY2_VAL	==	0X32
   115       0033 C        B2_KEY3_VAL	==	0X33
   116       0034 C        B2_KEY4_VAL	==	0X34
   117       0035 C        B2_TMR_KEYSCAN	==	0X35
   118       0036 C        B2_TMR_KEYAFFM	==	0X36
   119       0037 C        B2_KEYFLAG	==	0X37
   120            C        
   121       0038 C        B2_TMR_PLUSE_BAK==	0X38
   122       0039 C        B2_TMR_PLUSE	==	0X39
   123            C        
   124       003A C        B2_TMR_BEEP	==	0X3A
   125            C        
   126            C        
   127            C        
   128       003B C        B2_RING_FLAG	==	0X3B
   129       003C C        B2_RING_ID	==	0X3C
   130       003D C        B2_RING_TMR	==	0X3D
   131       003E C        B2_BUF		==	0X3E
   132       003F C        B2_BUF1		==	0X3F
   133            C        ;-------------------------------------------------------------------------------
   134            C        ; bank 3
   135       0020 C        B3_CidTimer	==	0X20
   136       0021 C        B3_CidCheckSum	==	0X21
   137       0022 C        B3_CidLength	==	0X22
   138            C        
   139            C        
   140            C        ;---
   141       0023 C        B3_1BIOSVER	==	0X23
   142       0024 C        B3_2BIOSVER	==	0X24
   143       0025 C        B3_3BIOSVER	==	0X25
   144       0026 C        B3_4BIOSVER	==	0X26
   145            C        ;-------------------------------------------------------------------------------
   146            C        ; bit
   147            C        
   148            C        
   149            C        
   150            C        
     5                     INCLUDE	"CONST.inc"
     1            C        
     2            C        ;自定义常数
     3            C        ;---KEY---
     4            C        ;Bit(7..4)/Bit(3..0) = row/col --- (B2_KEY1_VAL..B2_KEY4_VAL)/bit7..0
     5            C        ;----一共28个键
     6       0010 C        	CKEY_PLY	EQU	0X10	;Play/Pause
     7       0011 C        	CKEY_OGM	EQU	0X11	;OGM
     8       0012 C        	CKEY_MMO	EQU	0X12	;MEMO
     9       0013 C        	CKEY_STP	EQU	0X13	;Stop
    10       0014 C        	CKEY_PBK	EQU	0X14	;Phonebook
    11       0015 C        	CKEY_1M		EQU	0X15	;M1
    12       0016 C        	CKEY_2M		EQU	0X16	;M2
    13       0017 C        	CKEY_3M		EQU	0X17	;M3
    14            C        	
    15       0020 C        	CKEY_MNU	EQU	0X20	;Menu
    16       0021 C        	CKEY_UP		EQU	0X21	;Up
    17       0022 C        	CKEY_DWN	EQU	0X22	;Down
    18       0023 C        	CKEY_DEL	EQU	0X23	;Delete
    19       0024 C        	CKEY_MTE	EQU	0X24	;MUTE
    20       0025 C        	CKEY_FLS	EQU	0X25	;Flash
    21       0026 C        	CKEY_RP		EQU	0X26	;Pause/Redial
    22       0027 C        	CKEY_SPK	EQU	0X27	;SPK
    23            C        
    24       0030 C        	CKEY_3		EQU	0X30	;'3'
    25       0031 C        	CKEY_6		EQU	0X31	;'6'
    26       0032 C        	CKEY_9		EQU	0X32	;'9'
    27       0033 C        	CKEY_F		EQU	0X33	;'#'
    28       0034 C        	CKEY_2		EQU	0X34	;'2'
    29       0035 C        	CKEY_5		EQU	0X35	;'5'
    30       0036 C        	CKEY_8		EQU	0X36	;'8'
    31       0037 C        	CKEY_0		EQU	0X37	;'0'
    32            C        	
    33       0040 C        	CKEY_1		EQU	0X40	;'1'
    34       0041 C        	CKEY_4		EQU	0X41	;'4'
    35       0042 C        	CKEY_7		EQU	0X42	;'7'
    36       0043 C        	CKEY_E		EQU	0X43	;'*'
    37            C        ;---------------------------------------
    38       0080 C        	CMSG_MKEY	EQU	0X80
    39       0081 C        	CMSG_BKEY	EQU	0X81
    40       0082 C        	CMSG_CKEY	EQU	0X82
    41       0083 C        	CSEG_END	EQU	0X83
    42       0084 C        	CBEEP_END	EQU	0X84
    43       0085 C        	CVP_END		EQU	0X85	;All VP in VP-queue have been play
    44       0086 C        	CREC_FULL	EQU	0X86	
    45            C        	
    46       0087 C        	CMSG_VOX	EQU	0X87
    47       0088 C        	CMSG_BTONE	EQU	0X88	
    48       0089 C        	CMSG_CTONE	EQU	0X89	
    49       008A C        	CREV_DTMF	EQU	0X8A	
    50       008B C        	CMSG_CPC	EQU	0X8B	
    51       008F C        	CMSG_RTC	EQU	0X8F	;Time/Date display update
    52            C        	
    53       0090 C        	CMSG_INIT	EQU	0X90	;初始化
    54       0091 C        	CMSG_EXIT	EQU	0X91
    55       0092 C        	CHOOK_ON	EQU	0X92	;手柄挂机
    56       0093 C        	CHOOK_OFF	EQU	0X93	;手柄提机
    57       0094 C        	CPHONE_ON	EQU	0X94	;免提开
    58       0095 C        	CPHONE_OFF	EQU	0X95	;免提关
    59            C        	
    60       0096 C        	CKEY_NUM	EQU	0X96	;idle时有数字键按下
    61            C        
    62       0097 C        	CMSG_TMR2	EQU	0X97	;定时器
    63       0098 C        	CMSG_TMR	EQU	0X98	;定时器
    64       0099 C        	CMSG_BLINK	EQU	0X99	;时钟闪烁
    65       009A C        	CRING_ON	EQU	0X9A	;Ring on
    66       009B C        	CRING_OFF	EQU	0X9B	;Ring off
    67       009C C        	CRING_OK	EQU	0X9C	;时钟闪烁
    68       009D C        	CRING_FAIL	EQU	0X9D	;有未接来铃
    69            C        	
    70            C                                          
    71       00A1 C        	CMSG_DTMF	EQU	0XA1	;Received dtmf消息
    72       00A2 C        	CTMR_DTMF	EQU	0XA2	;
    73       00A3 C        	CMSG_FSK	EQU	0XA3
    74            C        	
    75       00A4 C        	CCID_EDIT	EQU	0XA4	;Edit CID
    76       00A5 C        	CDIAL_OUT	EQU	0XA5	;Dial the displayed tel-num 
    77            C        	
    78       00A6 C        	CLOOK_DIAL	EQU	0XA6	;Lookup dialled num
    79       00A7 C        	CUPDT_MENU	EQU	0XA7	;Exit Menu,DAM-on/off,OGM-sel
    80       00A8 C        	CPOWER_ON	EQU	0XA8	;Power on
    81            C        ;-------------------------------------------------------------------------------
    82       00C0 C        	CREC_OGM	EQU	0XC0
    83       00C1 C        	CPLY_OGM	EQU	0XC1
    84       00C2 C        	CREC_MMO	EQU	0XC2
    85       00C3 C        	CPLY_MSG	EQU	0XC3
    86       00C4 C        	CDEL_ALL	EQU	0XC4
    87       00C5 C        	CSTOR_NUM	EQU	0XC5
    88       00C6 C        	CLOOK_NUM	EQU	0XC6
    89       00C7 C        	CSEL_OGM	EQU	0XC7	;select OGM
    90       00C8 C        	CSEL_ONOFF	EQU	0XC8	;select on/off
    91       00C9 C        	CMSG_ANS	EQU	0XC9	;answer start
    92       00CA C        	CRMT_OK		EQU	0XCA
    93            C        	
    94       00CB C        	CMSG_MENU	EQU	0XCB
    95       00CC C        	CMSG_BOOK	EQU	0XCC
    96            C        	
    97       00CD C        	CRDY_CID	EQU	0XCD	;极性反转(准备收CID)
    98       00CE C        	CLOOK_CID	EQU	0XCE	;lookup CID
    99       00CF C        	CMSG_CID	EQU	0XCF	;new CID receive and cooked
   100            C        
   101            C        	
   102            C        ;-------------------------------------------------------------------------------
   103            C        ;---VP识别码(Note: this identify code is related to the table of VP_START)
   104       0000 C        ID_IDLE		EQU	0X0	;Rreserved
   105       0001 C        ID_DELAY	EQU	0X1	;delay
   106       0002 C        ID_BEEP		EQU	0X2	;BEEP
   107       0003 C        ID_DTMF		EQU	0X3	;DTMF
   108       0004 C        ID_VOP		EQU	0X4	;VOP
   109       0005 C        ID_PLYN		EQU	0X5	;play new message(MSG_ID is related to new messages)
   110       0006 C        ID_PLYA		EQU	0X6	;play all message(MSG_ID is related to total messages)
   111       0007 C        ID_PLYO		EQU	0X7	;play old message(...)
   112            C        ;-------------------------------------------------------------------------------
   113            C        ;显示
   114       0010 C        NUM_0	==	0X10
   115       0011 C        NUM_1	==	0X11
   116       0012 C        NUM_2	==	0X12
   117       0013 C        NUM_3	==	0X13
   118       0014 C        NUM_4	==	0X14
   119       0015 C        NUM_5	==	0X15
   120       0016 C        NUM_6	==	0X16
   121       0017 C        NUM_7	==	0X17
   122       0018 C        NUM_8	==	0X18
   123       0019 C        NUM_9	==	0X19
   124       0021 C        NUM_A	==	0X21
   125       0022 C        NUM_B	==	0X22
   126       0023 C        NUM_C	==	0X23
   127       0024 C        NUM_D	==	0X24
   128       0025 C        NUM_E	==	0X25
   129       0026 C        NUM_F	==	0X26
   130       0060 C        NUM_P		==	0X60
   131       0000 C        NUM_BLANK	==	0
   132       000A C        NUM_XIN	==	0X0A
   133       0003 C        NUM_JIN	==	0X03
   134       000D C        NUM_AMPERE	==	0X0D	;-
   135       003F C        NUM__	==	0X3F		;_
   136       00FF C        NUM_END	==	0XFF	; 结束标志符
   137            C        
   138       0010 C        CH_0	==	NUM_0
   139       0011 C        CH_1	==	NUM_1
   140       0012 C        CH_2	==	NUM_2
   141       0013 C        CH_3	==	NUM_3
   142       0014 C        CH_4	==	NUM_4
   143       0015 C        CH_5	==	NUM_5
   144       0016 C        CH_6	==	NUM_6
   145       0017 C        CH_7	==	NUM_7
   146       0018 C        CH_8	==	NUM_8
   147       0019 C        CH_9	==	NUM_9
   148            C        
   149       0021 C        CH_A	==	NUM_A
   150       0022 C        CH_B	==	NUM_B
   151       0023 C        CH_C	==	NUM_C
   152       0024 C        CH_D	==	NUM_D
   153       0025 C        CH_E	==	0X25
   154       0026 C        CH_F	==	0X26
   155       0027 C        CH_G	==	0X27
   156       0028 C        CH_H	==	0X28
   157       0029 C        CH_I	==	0X29
   158       002A C        CH_J	==	0X2A
   159       002B C        CH_K	==	0X2B
   160       002C C        CH_L	==	0X2C
   161       002D C        CH_M	==	0X2D
   162       002E C        CH_N	==	0X2E
   163       002F C        CH_O	==	0X2F
   164       0030 C        CH_P	==	0X30
   165       0031 C        CH_Q	==	0X31
   166       0032 C        CH_R	==	0X32
   167       0033 C        CH_S	==	0X33
   168       0034 C        CH_T	==	0X34
   169       0035 C        CH_U	==	0X35
   170       0036 C        CH_V	==	0X36
   171       0037 C        CH_W	==	0X37
   172       0038 C        CH_X	==	0X38
   173       0039 C        CH_Y	==	0X39
   174       003A C        CH_Z	==	0X3A
   175            C        
   176       0000 C        CH_BLANK	==	0X0
   177       0001 C        CH_EXC		==	0X01	; !
   178       0003 C        CH_JIN		==	0X03	; #
   179       0008 C        CH_LEFTB 	==	0X08	; (	left-bracket
   180       0009 C        CH_RIGHTB 	==	0X09	; )	right-bracket
   181       000A C        CH_XIN		==	0X0A	; *	
   182       000C C        CH_COMMA	==	0X0C	; ,
   183       000D C        CH_AMPERE	==	0X0D	; -
   184       000E C        CH_DOT	==		0X0E	; .
   185       000F C        CH_SCH1		==	0X0F	; /
   186            C        
   187       001A C        CH_COLON	==	0X1A	; :
   188       001F C        CH_INTE		==	0X1F	; ?
   189            C        
   190       003F C        CH__		==	0X3F	; _
   191       0061 C        CH_UP		==	0X61	;向上
   192       0062 C        CH_DOWN		==	0X62	;向下
   193            C        
   194       00FF C        CH_END	==	NUM_END	; 结束标志符
   195            C        
   196       0010 C        CNumDelta ==	0x10	;数值与机内码之差
   197       0020 C        CASCDelta ==	0x20	;机内码与ASCII码之差
   198            C        ;-------------------------------------------------------------------------------
   199       00C8 C        ID_BLANK	==	200
   200            C        ;-------------------------------------------------------------------------------
   201            C        
     6                     INCLUDE	"parameter.inc"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;---timer1
     3       00A0 C        	CTMR10S		==	160
     4       0080 C        	CTMR8S		==	128
     5       0050 C        	CTMR5S		==	80
     6       0040 C        	CTMR4S		==	64
     7       0030 C        	CTMR3S		==	48
     8       0020 C        	CTMR2S		==	32
     9       0010 C        	CTMR1S		==	16
    10       0008 C        	CTMR500MS	==	8
    11       0006 C        	CTMR375MS	==	6
    12       0005 C        	CTMR312MS	==	5
    13       0004 C        	CTMR250MS	==	4
    14       0002 C        	CTMR125MS	==	2
    15            C        ;---timer2
    16       0064 C        	CTMR100MS	==	100
    17       00C8 C        	CTMR200MS	==	200
    18            C        ;---Cut tail
    19       0019 C        	CTAIL10S	==	25
    20       0014 C        	CTAIL8S		==	20
    21            C        ;-------------------------------------------------------------------------------
    22       000A C        CKEYTMR_UNIT	==	10
    23            C        ;-------------------------------------------------------------------------------
    24       0000 C        	BANK0	==	0X0
    25       0040 C        	BANK1	==	0X40
    26       0080 C        	BANK2	==	0X80
    27       00C0 C        	BANK3	==	0XC0
    28            C        ;-------------------------------------------------------------------------------
    29       0000 C        OTP		==	0
    30       0000 C        VALUE_IOCA	==	0x0		;p8 as normal
    31            C        ;###############################################################################
    32            C        ;	BLOCK	0
    33            C        ;---显示缓冲空间.直接与LCD上的显示位置一一对应
    34            C        ;128---reserved
    35            C        ;128+1---icon 1
    36            C        ;128+2---icon 2
    37            C        ;128+(3..12)---date/time/num
    38            C        ;128+(13..29)---second line
    39            C        ;128+(30..44)---third line
    40            C        
    41            C        ;128+(45)	---reserved
    42            C        ;128+(46) = 174	---LCD_CBUF
    43            C        ;---------------------------------------
    44            C        ;---显示缓冲空间.送入LCD一一对应区前的缓冲处理空间
    45            C        ;180---reserved
    46            C        ;180+1---icon 1
    47            C        ;180+2---icon 2
    48            C        
    49            C        ;180+3---1st LCTRL
    50            C        ;180+4---1st HEAD
    51            C        ;180+5---1st TAIL
    52            C        ;180+(6..15)---1st ADDR
    53            C        
    54            C        ;180+16---2nd LCTRL
    55            C        ;180+17---2nd HEAD
    56            C        ;180+18---2nd TAIL
    57            C        ;180+(19..33)---2nd ADDR
    58            C        
    59            C        ;180+34---3rd LCTRL
    60            C        ;180+35---3rd HEAD
    61            C        ;180+36---3rd TAIL
    62            C        ;180+(37..51)---3rd ADDR
    63            C        ;###############################################################################
    64       0080 C        LCD_CTRL	==	128
    65            C        
    66       000A C        LENGTH1STL	==	10
    67       000F C        LENGTH2NDL	==	15
    68       000F C        LENGTH3RDL	==	15
    69            C        
    70       0001 C        OFFSETSTMP	==	1
    71       0003 C        OFFSETDATE	==	3
    72       0003 C        OFFSET1STL	==	OFFSETDATE
    73       000D C        OFFSET2NDL	==	OFFSET1STL+LENGTH1STL	;3+10
    74       001C C        OFFSET3RDL	==	OFFSET2NDL+LENGTH2NDL	;3+10+15
    75            C        
    76       0081 C        LCD_1STAMP	==	LCD_CTRL+OFFSETSTMP	;128+1	 - (0x81)
    77       0082 C        LCD_2STAMP	==	LCD_CTRL+OFFSETSTMP+1	;128+1+1 - (0x82)
    78       0083 C        LCD_1STLINE	==	LCD_CTRL+OFFSET1STL	;128+3	 - (0x83..0x8C)
    79       008D C        LCD_2NDLINE	==	LCD_CTRL+OFFSET2NDL	;128+13	 - (0x8D..0x9B)
    80       009C C        LCD_3RDLINE	==	LCD_CTRL+OFFSET3RDL	;128+28	 - (0x9C..0xAA)
    81            C        ;LCD3RDL_END	==	LCD_3RDLINE+15		;128+43	 - (0xAB..)
    82            C        ;---------------------------------------
    83       00B4 C        LCD_CBUF	==	180		;DISP buffer
    84       00B5 C        LCD_CBUF_1STMP	==	181
    85       00B6 C        LCD_CBUF_2STMP	==	182
    86            C        
    87       00B7 C        LCD_1CBUF_CTRL	==	LCD_CBUF_2STMP+1	;183
    88       00B8 C        LCD_1CBUF_HEAD	==	LCD_1CBUF_CTRL+1	;184
    89       00B9 C        LCD_1CBUF_TAIL	==	LCD_1CBUF_HEAD+1	;185
    90       00BA C        LCD_1CBUF_ADDR	==	LCD_1CBUF_TAIL+1	;186(186..195)10个byte - 0XBA..
    91            C        
    92       00C4 C        LCD_2CBUF_CTRL	==	LCD_1CBUF_ADDR+10	;196
    93       00C5 C        LCD_2CBUF_HEAD	==	LCD_2CBUF_CTRL+1	;197
    94       00C6 C        LCD_2CBUF_TAIL	==	LCD_2CBUF_HEAD+1	;198
    95       00C7 C        LCD_2CBUF_ADDR	==	LCD_2CBUF_TAIL+1	;199(199..213)15个byte - 0XC7..
    96            C        
    97       00D6 C        LCD_3CBUF_CTRL	==	LCD_2CBUF_ADDR+15	;214
    98       00D7 C        LCD_3CBUF_HEAD	==	LCD_3CBUF_CTRL+1	;215
    99       00D8 C        LCD_3CBUF_TAIL	==	LCD_3CBUF_HEAD+1	;216
   100       00D9 C        LCD_3CBUF_ADDR	==	LCD_3CBUF_TAIL+1	;217(217..231)15个byte - 0XD9..
   101            C        ;---------------------------------------
   102       0080 C        STYLE_NORMAL	==	(0x00+0x80)
   103       0081 C        STYLE_LEFT	==	(0x01+0x80)	; 靠左
   104       0082 C        STYLE_RIGHT	==	(0x02+0x80)	; 靠右
   105       0083 C        STYLE_CENTER	==	(0x03+0x80)	; 居中
   106            C        
   107       0020 C        STYLE_TOBCD	==	(1<<5)		; To BCD
   108            C        ;-------------------------------------------------------------------------------
   109       00EB C        PRO_STACK	==	235		;235(235..242)(0xEB..0xF2)
   110            C        
   111       00F3 C        MSG_QUEUE	==	243		;243(0xf3)
   112       00F4 C        MSG_QUEUE_START	==	MSG_QUEUE+1	;244(244..251)(0xf4..0xfb)
   113            C        ;###############################################################################
   114            C        ;	BLOCK	1
   115            C        ;0..5---Command
   116            C        ;6..7---Respond
   117            C        ;
   118            C        ;0x10---TONE_QUEUE_HEAD
   119            C        ;0x11---TONE_QUEUE_TAIL
   120            C        ;0x12---CTONE_QUEUE_START
   121            C        ;0x12..0x59---VP message queue
   122            C        ;
   123            C        ;0x60..0xA0
   124            C        ;DAM/TEL编辑区空间分配(book-func)
   125            C        ;PBOOK/CID/DIALED-CALL以固定长度,固定格式编辑保存
   126            C        ;
   127            C        ;0x60---TEL-flag	(1byte) - 
   128            C        ;0x61---time-flag	(1byte) - Because the time length is aways 4-bytes,the byte can use for Expend-TEL-flag
   129            C        ;0x62---num-flag	(1byte)
   130            C        ;0x63---name-flag	(1byte)
   131            C        ;0x64..0x67---time	(4bytes)
   132            C        ;0x68..0x87---num	(32bytes)
   133            C        ;0x88..0x96---name	(15bytes)
   134            C        ;
   135            C        ;
   136            C        ;---for M1/M2/M3 data(64Byte)
   137            C        ;M123_BUF_START	==	0xB0
   138            C        ;M123_BUF_END	==	M123_BUF_START+0X40 = 0xF0
   139            C        ;###############################################################################
   140       0000 C        COMMAND		==	0x0
   141       0006 C        RESPOND		==	0x6
   142            C        ;---for VP-queue
   143       0010 C        TONE_QUEUE_HEAD		==	0x10			;VP-queue head pointer
   144       0011 C        TONE_QUEUE_TAIL		==	TONE_QUEUE_HEAD+1	;VP-queue tail pointer
   145       0012 C        CTONE_QUEUE_START	==	TONE_QUEUE_HEAD+2	;VP-queue start address
   146            C        ;CTONE_QUEUE_START..CTONE_QUEUE_START+0x40	
   147            C        
   148            C        ;---The offset of tel-flag/time-flag/num-flag/name-flag/time-start/num-start/name-start
   149       0000 C        TEL_FGOFFSET	==	0
   150       0001 C        TIME_FGOFFSET	==	1
   151       0002 C        NUM_FGOFFSET	==	2
   152       0003 C        NAME_FGOFFSET	==	3
   153       0004 C        TIME_OFFSET	==	4
   154       0008 C        NUM_OFFSET	==	8
   155       0028 C        NAME_OFFSET	==	40
   156            C        ;---for tel/Cid/numeric-key
   157       0060 C        DATA_ZONE_START ==	0x60
   158       0060 C        TEL_FLAG	==	DATA_ZONE_START
   159       0061 C        TIME_FLAG	==	DATA_ZONE_START+1
   160       0062 C        NUM_FLAG	==	DATA_ZONE_START+2
   161       0063 C        NAME_FLAG	==	DATA_ZONE_START+3
   162       0064 C        TIME_START	==	DATA_ZONE_START+4		;(4..7)
   163       0068 C        NUM_START	==	DATA_ZONE_START+4+4		;(8..39)
   164       0088 C        NAME_START	==	DATA_ZONE_START+4+4+32		;(40..54)
   165       0097 C        PHOUR_START	==	DATA_ZONE_START+4+4+32+15	;(55)	;It's valid only for dial-num
   166       0098 C        PMIN_START	==	DATA_ZONE_START+4+4+32+16	;(56)	;It's valid only for dial-num
   167       0099 C        PSEC_START	==	DATA_ZONE_START+4+4+32+17	;(57)	;It's valid only for dial-num
   168       009A C        DATA_ZONE_END	==	DATA_ZONE_START+4+4+32+18	;(58)
   169            C        ;DATA_ZONE_START+0x40 = 0XA0
   170            C        
   171       000F C        NUM_1LEN	==	15	;
   172       0018 C        NUM_2LEN	==	24	;for pbook
   173       0020 C        NUM_3LEN	==	32	;for dial
   174       000F C        NAME_LEN	==	15
   175            C        ;---------------------------------------
   176            C        ;---for M1/M2/M3 data
   177       00B0 C        M123_BUF_START	==	0xB0
   178       00F0 C        M123_BUF_END	==	M123_BUF_START+0X40
   179            C        ;M123_BUF_START+0x40 = 0XF0
   180            C        ;###############################################################################
   181            C        ;	BLOCK	2
   182            C        ;receive CID
   183            C        ;Offset	0,1 - Qpoint for CID
   184            C        ;	2..7 -offset
   185            C        ;	0x16..0xBF	;Raw-CID
   186            C        ;	0xC0..0xFF	;Cook-CID
   187            C        ;the CID type:
   188            C        ;		0=normal
   189            C        ;		1=Secret;
   190            C        ;		2=Unknown-number or error;
   191            C        ;		3=MessageWaitingActivate;
   192            C        ;		4=MessageWaitingDeactivate;
   193            C        ;		5=international
   194            C        ;
   195            C        ;###############################################################################
   196            C        ;Raw Data
   197       0000 C        CID_ZONE_START 	==	0x00
   198       0002 C        TIMETYPE	==	CID_ZONE_START+2	;1
   199       0003 C        TIMELEN		==	CID_ZONE_START+3	;8
   200       0004 C        NUMTYPE		==	CID_ZONE_START+4	;2/3/4
   201       0005 C        NUMLEN		==	CID_ZONE_START+5	;
   202       0006 C        NAMETYPE	==	CID_ZONE_START+6	;7/8
   203       0007 C        NAMELEN		==	CID_ZONE_START+7	;
   204            C        
   205       0010 C        CID_TYPE	==	CID_ZONE_START+16
   206       0011 C        CID_LEN		==	CID_TYPE+1
   207            C        
   208            C        ;Cooked Data
   209       00C0 C        CIDTEL_ZONE_START 	==	0xC0
   210       00C0 C        CIDTEL_FLAG	 	==	0xC0
   211       00C1 C        CIDTIME_FLAG	==	CIDTEL_FLAG+1
   212       00C2 C        CIDNUM_FLAG	==	CIDTEL_FLAG+2
   213       00C3 C        CIDNAME_FLAG	==	CIDTEL_FLAG+3
   214       00C4 C        CIDTIME_START	==	CIDTEL_FLAG+4		;(4..7)
   215       00C8 C        CIDNUM_START	==	CIDTEL_FLAG+4+4		;(8..39)
   216       00E8 C        CIDNAME_START	==	CIDTEL_FLAG+4+4+32		;(40..54)
   217            C        
   218       00FF C        CID_ZONE_END	==	0XFF	;0xff
   219            C        ;###############################################################################
   220            C        ;	BLOCK	3
   221            C        ;for pbook index-table
   222            C        ;
   223            C        ;Read from flash when power on
   224            C        ;update it when add/del pbook
   225            C        ;Write it into flash after exit to idle when the index-table changed
   226            C        ;
   227            C        ;###############################################################################
   228       0000 C        IDXTAB_START 	==	0x00
   229       0078 C        IDXTAB_END 	==	IDXTAB_START+120
   230            C        
   231            C        ;-------------------------------------------------------------------------------
   232       0000 C        DEFAULT_MINUTE	==	00
   233       0000 C        DEFAULT_HOUR	==	00
   234       0001 C        DEFAULT_DAY	==	1
   235       0001 C        DEFAULT_MONTH	==	1
   236       000A C        DEFAULT_YEAR	==	10
   237       0000 C        DEFAULT_WEEK	==	0
   238            C        
   239       0000 C        DEFAULT_LANGUAGE	==	0
   240       0000 C        DEFAULT_FLASH		==	0
   241       0003 C        DEFAULT_CONTRAST	==	3
   242       0005 C        DEFAULT_RING	==	5	;Default = 5
   243       0002 C        DEFAULT_MSGLEN	==	2
   244            C        
   245       0003 C        DEFAULT_PS1	==	3
   246       0002 C        DEFAULT_PS2	==	2
   247       0001 C        DEFAULT_PS3	==	1
   248       0000 C        DEFAULT_PS4	==	0
   249            C        ;-------------------------------------------------------------------------------
   250       0092 C        CMODE9H 	==	0X92
   251       0040 C        CMODE9L 	==	0X40
   252       00F7 C        CTONE_GAIN	==	0XF7
   253            C        ;---------------------------------------For DAM
   254       0008 C        CDAM_MIC_GAIN	==	0X08	;0X5F10
   255       0007 C        CDAM_AD0_GAIN	==	0X07	;0X5F11	;from Mic(for local record)
   256       0001 C        CDAM_RAD0_GAIN	==	0X01	;0X5F11	;from Line(for remote)
   257       0008 C        CDAM_AD1_GAIN	==	0X08	;0X5F12
   258       000A C        CDAM_SPK_VOL	==	0X0A	;0X5F20
   259       0018 C        CDAM_LNE_VOL	==	0X18	;0X5F21
   260            C        ;---------------------------------------For SpeakerPhone
   261            C        ;CPHO_MIC_GAIN	==	0X0B	;0X5F10
   262            C        ;CPHO_AD0_GAIN	==	0X08	;0X5F11
   263            C        ;CPHO_AD1_GAIN	==	0X08	;0X5F12
   264            C        ;CPHO_SPK_VOL	==	0X1F	;0X5F20
   265            C        ;CPHO_LNE_VOL	==	0X13	;0X5F21
   266            C        ;---------------------------------------
   267            C        ;CPHO_TONEGAIN	== 	0X21	;0XC1XX	Set Gain of Tone
   268            C        ;CPHO_AECLEC	== 	0X00	;0XC4XX Set ERL
   269            C        ;CPHO_TRRATIO	== 	0X01	;0XC6XX SetT/R ratio
   270            C        ;CPHO_LINEGAIN	== 	0X05	;0XC8XX LINE_GAIN/SPK_GAIN
   271            C        ;CPHO_LOOPATTE	== 	0X05	;0XC9XX Set loop Attenuation
   272            C        ;-------------------------------------------------------------------------------
   273       0080 C        CTMR_CVOX	==	8*16
   274       0080 C        CTMR_CTONE	==	8*16
   275            C        ;CTMR_BTONE	==	8*16
   276            C        ;-------------------------------------------------------------------------------
   277       0007 C        CTEL_MNUM	==	7
   278       0019 C        CVOX_LEVEL	==	25	;for answer/remote VOX-detect(0xD700)
   279       0007 C        CSILENCE_LEVEL	==	7	;for answer/remote silence-level detect(0x7700)
   280       003F C        CDTMF_SENSTV	==	63	;for answer/remote DTMF sensitivity
   281            C        ;---------------------------------------
   282       0005 C        CDENOISE_LEVEL	==	5	;De-noise level
   283            C        ;-------------------------------------------------------------------------------
   284            C        
   285            C        ;-------------------------------------------------------------------------------
   286       0001 C        COGM1		==	1
   287       0002 C        COGM2		==	2
   288            C        ;-------------------------------------------------------------------------------
   289            C        ;CGROUP_VPCID	==	1	;CID for VP-msg
   290            C        ;---
   291       000A C        GROUP_M		==	10
   292       000A C        GROUP_M0	==	10
   293       000B C        GROUP_M1	==	11
   294       000C C        GROUP_M2	==	12
   295       000D C        GROUP_M3	==	13
   296            C        ;---
   297       000E C        CGROUP_MISSCID	==	14	;Miss-CID
   298       0063 C        CMAX_MISSCID	==	99	;最大未接来电Miss-CID条目数
   299            C        ;---
   300       000F C        CGROUP_ANSWCID	==	15	;Answered-CID
   301       0028 C        CMAX_ANSWCID	==	40	;最大已接来电Answered-CID条目数
   302            C        ;---
   303       0010 C        GROUP_DIAL	==	16	;Dial-CID
   304       0032 C        CMAX_DIALCID	==	50	;最大去电DIAL-CID条目数
   305            C        ;---
   306       0011 C        GROUP_BOOK	==	17	;Phone-book
   307       0078 C        CMAX_BOOK	==	120	;最大电话本Phone-book条目数
   308            C        ;---
   309       0012 C        CGROUP_DATT	==	18	;system attribute
   310            C        ;---
   311       0013 C        CGROUP_BOOKIDX	==	19	;the phonebook index-table
   312            C        ;-------------------------------------------------------------------------------
   313       0001 C        VOPID_OH	==	1
   314       0002 C        VOPID_ONE	==	2
   315       0003 C        VOPID_TWO	==	3
   316       0004 C        VOPID_THREE	==	4
   317       0005 C        VOPID_FOUR	==	5
   318       0006 C        VOPID_FIVE	==	6
   319       0007 C        VOPID_SIX	==	7
   320       0008 C        VOPID_SEVEN	==	8
   321       0009 C        VOPID_EIGHT	==	9
   322       000A C        VOPID_NINE	==	10
   323            C        
   324       001D C        VOPID_SUNDAY	==	29
   325       001E C        VOPID_MONDAY	==	30
   326       001F C        VOPID_TUESDAY	==	31
   327       0020 C        VOPID_WEDNESDAY	==	32
   328       0021 C        VOPID_THURDAY	==	33
   329       0022 C        VOPID_FRIDAY	==	34
   330       0023 C        VOPID_SATURDAY	==	35
   331       0024 C        VOPID_AM	==	36
   332       0025 C        VOPID_PM	==	37
   333       0026 C        VOPID_DAY	==	38
   334       0027 C        VOPID_HOUR	==	39
   335       0028 C        VOPID_MINUTE	==	40
   336       0029 C        VOPID_DEFOGM1	==	41
   337       002A C        VOPID_DEFOGM2	==	42
   338       002B C        VOPID_YOUHAVE	==	43
   339       002C C        VOPID_NO	==	44
   340       002D C        VOPID_NEW	==	45
   341       002E C        VOPID_MESSAGE	==	46
   342       002F C        VOPID_MESSAGES	==	47
   343       0030 C        VOPID_ENDOFMESSAGE	==	48
   344       0031 C        VOPID_SECURITYCODE	==	49
   345       0032 C        VOPID_TOLLSAVE	==	50
   346       0033 C        VOPID_TIME	==	51
   347       0034 C        VOPID_RINGS	==	52
   348       0035 C        VOPID_RECORD	==	53
   349       0036 C        VOPID_NOMESSAGE	==	54
   350       0037 C        VOPID_OLD	==	55
   351       0038 C        VOPID_DELETED	==	56
   352       0039 C        VOPID_ANSWER	==	57
   353       003A C        VOPID_ANSMACHINE	==	58
   354       003B C        VOPID_ANNOUNCEMENT	==	59
   355       003C C        VOPID_ALLMESSAGES	==	60
   356       003D C        VOPID_PLEASE	==	61
   357       003E C        VOPID_ON	==	62
   358       003F C        VOPID_OFF	==	63
   359       0040 C        VOPID_SET	==	64
   360       0041 C        VOPID_PRESS	==	65
   361       0042 C        VOPID_TOPLYMSG	==	66
   362       0043 C        VOPID_TOREPTYMSG	==	67
   363       0044 C        VOPID_TOSKPMSG	==	68
   364       0045 C        VOPID_TOPLYANNOUNCE	==	69
   365       0046 C        VOPID_TORECANNOUNCE	==	70
   366       0047 C        VOPID_TOSTOP	==	71
   367       0048 C        VOPID_TOERASEMSG	==	72
   368       0049 C        VOPID_TOSETANSONOFF	==	73
   369       004A C        VOPID_TOERASEALLMSG	==	74
   370       004B C        VOPID_TORECMEMO	==	75
   371       004C C        VOPID_TOGOBACKMENU	==	76
   372       004D C        VOPID_TOSETANNCE1OR2	==	77
   373       004E C        VOPID_STAR	==	78
   374       004F C        VOPID_HASH	==	79
   375       0050 C        VOPID_MEMFULL	==	80
   376       0051 C        VOPID_OUTGOING	==	81
   377            C        ;-------------------------------------------------------------------------------
     7                     INCLUDE	"MACRO.inc"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;-MACRO
     3            C        PHONE_STOPDIAL		MACRO
     4            C        		MOV	_RB,@0XFF
     5            C        		ENDM
     6            C        ;---------------------------------------
     7            C        PHONE_STARTDIAL		MACRO
     8            C        		MOV	_RB,A
     9            C        		ENDM
    10            C        ;-------------------------------------------------------------------------------
    11            C        DAM_MIC_ENABLE		MACRO
    12            C        		BS	_P9,4
    13            C        		ENDM
    14            C        ;---------------------------------------
    15            C        DAM_MIC_DISABLE		MACRO
    16            C        		BC	_P9,4
    17            C        		ENDM
    18            C        ;-------------------------------------------------------------------------------
    19            C        DAM_SPK_ENABLE		MACRO
    20            C        		BS	_P9,5
    21            C        		ENDM
    22            C        ;---------------------------------------
    23            C        DAM_SPK_DISABLE		MACRO
    24            C        		BC	_P9,5
    25            C        		ENDM
    26            C        ;-------------------------------------------------------------------------------
    27            C        DAM_NEWLED_H	MACRO
    28            C        		BS	_P9,0
    29            C        		ENDM
    30            C        ;---------------------------------------
    31            C        DAM_NEWLED_L		MACRO
    32            C        		BC	_P9,0
    33            C        		ENDM
    34            C        ;---------------------------------------
    35            C        DAM_NEWLED_COM		MACRO
    36            C        		MOV	A,_P9
    37            C        		XOR	A,@1
    38            C        		MOV	_P9,A
    39            C        		ENDM
    40            C        ;-------------------------------------------------------------------------------
    41            C        HFLED_H	MACRO
    42            C        		BS	_P9,7
    43            C        		ENDM
    44            C        ;---------------------------------------
    45            C        HFLED_L	MACRO
    46            C        		BC	_P9,7
    47            C        		ENDM
    48            C        ;-------------------------------------------------------------------------------
    49            C        RESET_DSP_H	MACRO
    50            C        		BS	_P8,1
    51            C        		ENDM
    52            C        ;---------------------------------------
    53            C        RESET_DSP_L	MACRO
    54            C        		BC	_P8,1
    55            C        		ENDM
    56            C        ;-------------------------------------------------------------------------------
    57            C        XMUTE_H	MACRO
    58            C        		BS	_P8,2
    59            C        		ENDM
    60            C        ;---------------------------------------
    61            C        XMUTE_L	MACRO
    62            C        		BC	_P8,2
    63            C        		ENDM
    64            C        ;-------------------------------------------------------------------------------
    65            C        MUTE_H	MACRO
    66            C        		BS	_P8,3
    67            C        		ENDM
    68            C        ;---------------------------------------
    69            C        MUTE_L	MACRO
    70            C        		BC	_P8,3
    71            C        		ENDM
    72            C        ;-------------------------------------------------------------------------------
    73            C        HF_HOOK_H	MACRO			;working
    74            C        		BS	_P8,4
    75            C        		ENDM
    76            C        ;---------------------------------------
    77            C        HF_HOOK_L	MACRO
    78            C        		BC	_P8,4
    79            C        		ENDM
    80            C        ;---------------------------------------
    81            C        HF_HOOK_COM	MACRO
    82            C        		MOV	A,_P8
    83            C        		XOR	A,@(1<<4)
    84            C        		MOV	_P8,A
    85            C        		ENDM
    86            C        ;-------------------------------------------------------------------------------
    87            C        DP_PULSE_L	MACRO			;Pulse/FLASH
    88            C        		BC	_P8,5
    89            C        		ENDM
    90            C        ;---------------------------------------
    91            C        DP_PULSE_H	MACRO
    92            C        		BS	_P8,5
    93            C        		ENDM
    94            C        ;-------------------------------------------------------------------------------
    95            C        REFURBISH_ICON	MACRO
    96            C        
    97            C        		BLOCK	0
    98            C        		MOV	_RC,@LCD_CTRL
    99            C        		BS	_RD,4
   100            C        
   101            C        		ENDM
   102            C        ;---------------------------------------
   103            C        REFURBISH_1STL	MACRO
   104            C        
   105            C        		BLOCK	0
   106            C        		MOV	_RC,@LCD_CTRL
   107            C        		BS	_RD,5
   108            C        
   109            C        		ENDM
   110            C        ;---------------------------------------
   111            C        REFURBISH_2NDL	MACRO
   112            C        
   113            C        		BLOCK	0
   114            C        		MOV	_RC,@LCD_CTRL
   115            C        		BS	_RD,6
   116            C        
   117            C        		ENDM
   118            C        ;---------------------------------------
   119            C        REFURBISH_1AND2L	MACRO
   120            C        
   121            C        		BLOCK	0
   122            C        		MOV	_RC,@LCD_CTRL
   123            C        		BS	_RD,5
   124            C        		BS	_RD,6
   125            C        
   126            C        		ENDM
   127            C        ;---------------------------------------
   128            C        REFURBISH_3RDL	MACRO
   129            C        
   130            C        		BLOCK	0
   131            C        		MOV	_RC,@LCD_CTRL
   132            C        		BS	_RD,7
   133            C        
   134            C        		ENDM
   135            C        ;---------------------------------------
   136            C        REFURBISH_2AND3L	MACRO
   137            C        
   138            C        		BLOCK	0
   139            C        		MOV	_RC,@LCD_CTRL
   140            C        		BS	_RD,6
   141            C        		BS	_RD,7
   142            C        
   143            C        		ENDM
   144            C        ;---------------------------------------
   145            C        REFURBISH_1AND2AND3L	MACRO
   146            C        
   147            C        		BLOCK	0
   148            C        		MOV	_RC,@LCD_CTRL
   149            C        		BS	_RD,5
   150            C        		BS	_RD,6
   151            C        		BS	_RD,7
   152            C        
   153            C        		ENDM
   154            C        ;-------------------------------------------------------------------------------
   155            C        RTC_DISP_ENABLE	MACRO
   156            C        		BS	SYS_FLAG,0
   157            C        		ENDM
   158            C        ;---------------------------------------
   159            C        RTC_DISP_DISABLE	MACRO
   160            C        		BC	SYS_FLAG,0
   161            C        		ENDM
   162            C        ;-------------------------------------------------------------------------------
   163            C        SET_NLEDBLK_FLAG	MACRO
   164            C        		BS	SYS_FLAG,2
   165            C        		ENDM
   166            C        ;---------------------------------------
   167            C        RESET_NLEDBLK_FLAG	MACRO
   168            C        		BC	SYS_FLAG,2
   169            C        		ENDM
   170            C        ;-------------------------------------------------------------------------------
   171            C        SET_NEWESTCID_FLAG	MACRO
   172            C        		BS	SYS_FLAG,4
   173            C        		ENDM
   174            C        ;---------------------------------------
   175            C        RESET_NEWESTCID_FLAG	MACRO
   176            C        		BC	SYS_FLAG,4
   177            C        		ENDM
   178            C        ;-------------------------------------------------------------------------------
   179            C        ;SET_DIRTY_FLAG	MACRO
   180            C        ;		BS	SYS_FLAG,5
   181            C        ;		ENDM
   182            C        ;---------------------------------------
   183            C        ;RESET_DIRTY_FLAG	MACRO
   184            C        ;		BC	SYS_FLAG,5
   185            C        ;		ENDM
   186            C        ;-------------------------------------------------------------------------------
   187            C        SET_NEWVP_FLAG		MACRO
   188            C        		BS	DAM_FLAG,7
   189            C        		ENDM
   190            C        ;---------------------------------------
   191            C        RESET_NEWVP_FLAG	MACRO
   192            C        		BC	DAM_FLAG,7
   193            C        		ENDM
   194            C        ;-------------------------------------------------------------------------------
   195            C        SET_VPEXIST_FLAG		MACRO
   196            C        		BS	DAM_FLAG,6
   197            C        		ENDM
   198            C        ;---------------------------------------
   199            C        RESET_VPEXIST_FLAG	MACRO
   200            C        		BC	DAM_FLAG,6
   201            C        		ENDM
   202            C        ;-------------------------------------------------------------------------------
   203            C        SET_FULL_FLAG		MACRO
   204            C        		BS	DAM_FLAG,5
   205            C        		ENDM
   206            C        ;---------------------------------------
   207            C        RESET_FULL_FLAG	MACRO
   208            C        		BC	DAM_FLAG,5
   209            C        		ENDM
   210            C        ;-------------------------------------------------------------------------------
   211            C        SET_NEWCID_FLAG		MACRO
   212            C        		BS	DAM_FLAG,4
   213            C        		ENDM
   214            C        ;---------------------------------------
   215            C        RESET_NEWCID_FLAG	MACRO
   216            C        		BC	DAM_FLAG,4
   217            C        		ENDM
   218            C        ;-------------------------------------------------------------------------------
   219            C        SEL_OGM1	MACRO
   220            C        		BC	DAM_FLAG,3
   221            C        		ENDM
   222            C        ;---------------------------------------
   223            C        SEL_OGM2	MACRO
   224            C        		BS	DAM_FLAG,3
   225            C        		ENDM
   226            C        ;---------------------------------------
   227            C        SELOGM_COM	MACRO
   228            C        		MOV	A,DAM_FLAG
   229            C        		XOR	A,@(1<<3)
   230            C        		MOV	DAM_FLAG,A
   231            C        		ENDM
   232            C        ;-------------------------------------------------------------------------------
   233            C        DAM_ON		MACRO
   234            C        		BC	DAM_FLAG,2
   235            C        		ENDM
   236            C        ;---------------------------------------
   237            C        DAM_OFF		MACRO
   238            C        		BS	DAM_FLAG,2
   239            C        		ENDM
   240            C        ;---------------------------------------
   241            C        DAM_COM		MACRO
   242            C        		MOV	A,DAM_FLAG
   243            C        		XOR	A,@(1<<2)
   244            C        		MOV	DAM_FLAG,A
   245            C        		ENDM
   246            C        ;-------------------------------------------------------------------------------
   247            C        
   248            C        
     8                     ;-------------------------------------------------------------------------------
     9                     ;p6 use for	(p6.0 - p6.7)LCD display(comm8..15)	(output)	
    10                     ;		(p6.1 - p6.7)key scan 			(output)
    11                     ;p7 use for	(p7.0 - p7.3)key scan 			(input)
    12                     ;		p7.4 Hook detect			(input) -  L=working
    13                     ;		p7.5 DC detect				(input)
    14                     ;		p7.6 DSP_Req				(input)
    15                     ;		p7.7 IICDAT				(input)
    16                     ;
    17                     ;p8 use for	p8.0 IICCLK	 			(output)
    18                     ;		p8.1 RESET				(output)
    19                     ;		p8.2 XMUTE				(output)
    20                     ;		p8.3 MUTE				(output)
    21                     ;		p8.4 HFO				(output) - H=working
    22                     ;		p8.5 DP					(output) - L=working(pluse/flash)
    23                     ;		p8.6 EEP-SCL				(output)
    24                     ;		p8.7 EEP-SDA				(I/O)
    25                     ;
    26                     ;p9 use for	p9.0 NEW-LED 				(output)
    27                     ;		p9.1 RING-DET 				(input)
    28                     ;		p9.2 RDET1				(input)
    29                     ;		p9.3 CPC-DET				(input)
    30                     ;		p9.4 MIC-CON-MCU			(output)
    31                     ;		p9.5 SPK-CON-MCU			(output)
    32                     ;		p9.6 key-scan-enble			(output)
    33                     ;		p9.7 HF-LED				(output)
    34                     ;-------------------------------------------------------------------------------
    35                     ;SYS_FLAG	bit0 = 1/0 - 跳秒
    36                     ;		bit1 = 1/O - Handset
    37                     ;		bit2 = 1/0 - NLED-BLINK/not 
    38                     ;		bit3 = 1/0 - HD  - ON/OFF
    39                     ;		bit4 = 1/0 - NEW-CID stor into flash/not - Condition to clean the bit:1.ring fail;2.HF/HS off hook;3.Exit the answer mode
    40                     ;		bit5 = 1/0 - reserved
    41                     ;		bit6 = 1/0 - reserved
    42                     ;		bit7 = 1/0 - reserved
    43                     ;	
    44                     ;DAM_FLAG	bit7 = 1/0 - new message flag
    45                     ;		bit6 = 1/0 - no message flag
    46                     ;		bit5 = 1/0 - Flash-full flag
    47                     ;		bit4 = 1/0 - new CID flag - the NEW-missed-CID in flash/not
    48                     ;		bit3 = 1/0 - OGM 2/1
    49                     ;		bit2 = 1/0 - DAM OFF/ON
    50                     ;		bit1 = 1/0 - DTMF VAL/not
    51                     ;		bit0 = 1/0 - reserved
    52                     ;
    53                     ;EVENT		bit7 = 1/0	;RECORD(0x1000)/not
    54                     ;		bit6 = 1/0 	;PLAY(0x2000/0xB000)/not
    55                     ;		bit5 = 1/0 	;BEEP(0x4800)/not
    56                     ;		bit4 = 1/0 	;LINE(0x5000)/not
    57                     ;		bit3 = 1/0 	;Spkphone(0xC000)/not
    58                     ;		bit2 = 1/0 	;reserved
    59                     ;		bit1 = 1/0	;call DAM_BIOS is need
    60                     ;		bit0 = 1/0 	;reserved
    61                     ;-------------------------------------------------------------------------------
    62                     ORG	0x0000
    63                     
    64                     
    65 00000 159B           	JMP	main
    66                     
    67                     ORG	0x0008
    68 00008               IntBegin:
    69 00008 0011          	DISI
    70                     ;!!!!!!!!!!!!!!!!!!!
    71 00009 0050          	MOV	INTBUF_ACC,A
    72 0000A 0704          	SWAPA	_RSR
    73                   M 	BANK	0        	;//save _RSR to 0x3F, _STATUS to 0x3E, INTBUF_PPSR to 0x3D, bank 3
       0000B 0984     1     BC  _RSR , 6 
       0000C 09C4     1     BC  _RSR , 7 
    74 0000D 0062          	MOV	INTBUF_RSR,A
    75 0000E 0703          	SWAPA	_STATUS
    76 0000F 0061          	MOV	INTBUF_STATUS,A
    77                     ;!!!!!!!!!!!!!!!!!!!
    78 00010 0705          	SWAPA	_PPSR
    79 00011 0060          	MOV	INTBUF_PPSR,A
    80                     	
    81                   M 	MOV	INTBUF_CIDADDR,_ADDR
       00012 040C     1     MOV A, _ADDR 
       00013 0063     1     MOV  INTBUF_CIDADDR ,A
    82 00014 001A          	IOR	_IOCA
    83 00015 1A1E          	AND	A,@(0x1e)
    84 00016 0064          	MOV	INTBUF_CIDBLOCK,A
    85                     ;---
    86 00017 041B          	MOV	A,OLD_RAM
    87 00018 0065          	MOV	INT_OLD_RAM,A
    88                     
    89                     	
    90 00019 1E80          	PAGE	0
    91                     	
    92                   M 	JPB	_ISR,1,Int_0
       0001A 0C4F     1     JBC  _ISR , 1 
       0001B 143D     1     JMP  INT_0 ,
    93                   M 	JPB	_ISR,2,Int_1
       0001C 0C8F     1     JBC  _ISR , 2 
       0001D 1440     1     JMP  INT_1 ,
    94                   M 	JPB	_ISR,3,Int_2
       0001E 0CCF     1     JBC  _ISR , 3 
       0001F 1443     1     JMP  INT_2 ,
    95                   M 	JPB	_ISR,7,Int_3
       00020 0DCF     1     JBC  _ISR , 7 
       00021 1446     1     JMP  INT_3 ,
    96                   M 	JPB	_ISR,6,IntFsk
       00022 0D8F     1     JBC  _ISR , 6 
       00023 157D     1     JMP  INTFSK ,
    97                   M 	JPB	_ISR,0,IntTcc
       00024 0C0F     1     JBC  _ISR , 0 
       00025 1449     1     JMP  INTTCC ,
    98                   M 	JPB	_ISR,5,IntCnt2			; 1ms
       00026 0D4F     1     JBC  _ISR , 5 
       00027 14FD     1     JMP  INTCNT2 ,
    99                   M 	JPB	_ISR,4,IntCnt1			; 用作时钟计时
       00028 0D0F     1     JBC  _ISR , 4 
       00029 144C     1     JMP  INTCNT1 ,
   100                     
   101 0002A               IntEnd:
   102                   M 	BANK	0
       0002A 0984     1     BC  _RSR , 6 
       0002B 09C4     1     BC  _RSR , 7 
   103                     ;---
   104 0002C 0425          	MOV	A,INT_OLD_RAM
   105 0002D 005B          	MOV	OLD_RAM,A
   106                     
   107 0002E 001A          	IOR	_IOCA
   108 0002F 1AE1          	AND	A,@(0xe1)
   109 00030 0224          	OR	A,INTBUF_CIDBLOCK
   110 00031 000A          	IOW	_IOCA
   111                   M 	MOV	_ADDR,INTBUF_CIDADDR
       00032 0423     1     MOV A, INTBUF_CIDADDR 
       00033 004C     1     MOV  _ADDR ,A
   112                     
   113                     	;MOV	_PPSR,INTBUF_PPSR
   114 00034 0720          	SWAPA	INTBUF_PPSR		;//Users have to note if now it is in bank 3 or not.
   115 00035 0045          	MOV	_PPSR,A			;//If not, users have to switch to bank 3.
   116                     ;!!!!!!!!!!!!!!!!!!!
   117 00036 0721          	SWAPA	INTBUF_STATUS
   118 00037 0043          	MOV	_STATUS,A
   119 00038 0722          	SWAPA	INTBUF_RSR
   120 00039 0044          	MOV	_RSR,A
   121 0003A 0750          	SWAP	INTBUF_ACC
   122 0003B 0710          	SWAPA	INTBUF_ACC 
   123                     ;!!!!!!!!!!!!!!!!!!!
   124 0003C 0013          	RETI
   125                     ;-------------------------------------------------------------------------------
   126 0003D               Int_0:
   127                   M 	MOV	_ISR,@(~(1<<1))
       0003D 18FD     1     MOV A,@((~( 1 << 1 )))
       0003E 004F     1     MOV  _ISR ,A
   128 0003F 142A          	JMP	IntEnd
   129                     ;-------------------------------------------------------------------------------
   130 00040               Int_1:
   131                   M 	MOV	_ISR,@(~(1<<2))
       00040 18FB     1     MOV A,@((~( 1 << 2 )))
       00041 004F     1     MOV  _ISR ,A
   132 00042 142A          	JMP	IntEnd
   133                     ;-------------------------------------------------------------------------------
   134 00043               Int_2:
   135                   M 	MOV	_ISR,@(~(1<<3))
       00043 18F7     1     MOV A,@((~( 1 << 3 )))
       00044 004F     1     MOV  _ISR ,A
   136 00045 142A          	JMP	IntEnd
   137                     ;-------------------------------------------------------------------------------
   138 00046               Int_3:
   139                   M 	MOV	_ISR,@(~(1<<7))
       00046 187F     1     MOV A,@((~( 1 << 7 )))
       00047 004F     1     MOV  _ISR ,A
   140 00048 142A          	JMP	IntEnd
   141                     ;-------------------------------------------------------------------------------
   142 00049               IntTcc:
   143                   M 	MOV	_ISR,@(~(1<<0))
       00049 18FE     1     MOV A,@((~( 1 << 0 )))
       0004A 004F     1     MOV  _ISR ,A
   144 0004B 142A          	JMP	IntEnd
   145                     ;-------------------------------------------------------------------------------
   146 0004C               IntCnt1:			; (1/16s)
   147                   M 	MOV	_ISR,@(~(1<<4))
       0004C 18EF     1     MOV A,@((~( 1 << 4 )))
       0004D 004F     1     MOV  _ISR ,A
   148                     ;---------------------------------------
   149                   M 	BANK	2
       0004E 0984     1     BC  _RSR , 6 
       0004F 0BC4     1     BS  _RSR , 7 
   150 00050               IntCnt1_RINGTMR:
   151 00050 0424          	MOV	A,B2_RING_TMR2
   152                   M 	JPZ	IntCnt1_RINGTMR_1
       00051 0C83     1     JBC  _STATUS , Z 
       00052 1454     1     JMP  INTCNT1_RINGTMR_1 ,
   153 00053 01E4          	DEC	B2_RING_TMR2	;increase every 1/16s	until 0
   154 00054               IntCnt1_RINGTMR_1:
   155                   M 	BANK	0
       00054 0984     1     BC  _RSR , 6 
       00055 09C4     1     BC  _RSR , 7 
   156                     ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   157 00056 0415          	MOV	A,TEMP0
   158 00057 0066          	MOV	BANK0_TEMP0,A
   159 00058 0416          	MOV	A,TEMP1
   160 00059 0067          	MOV	BANK0_TEMP1,A
   161                     ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   162                     
   163                     ;---------------------------------------
   164 0005A 0569          	INC	B0_TMR		;increase every 1/16s,Don`t set it anywhere
   165                     
   166 0005B               INT_CNT1_RTC:
   167                   M 	JPNB	SYS_FLAG,0,INT_CNT1_RTC_END	
       0005B 0E12     1     JBS  SYS_FLAG , 0 
       0005C 1465     1     JMP  INT_CNT1_RTC_END ,
   168                     
   169 0005D 0429          	MOV	A,B0_TMR
   170 0005E 1A07          	AND	A,@0X7
   171                   M 	JPNZ	INT_CNT1_CALENDAR_END	;OVER 15duty ?
       0005F 0E83     1     JBS  _STATUS , Z 
       00060 149A     1     JMP  INT_CNT1_CALENDAR_END ,
   172                     	
   173 00061 188F          	MOV	A,@CMSG_RTC
   174                   M 	LCALL	INT_STOR_MSG
                      2  M  PAGE #( INT_STOR_MSG ),
       00062 1E8D     2     PAGE ( INT_STOR_MSG / 1024 ),
       00063 12EF     1     CALL ( INT_STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00064 1E80     2     PAGE ( $ / 1024 ),
   175 00065               INT_CNT1_RTC_END:	
   176                     ;---------------------------------------
   177 00065               INT_CNT1_CALENDAR:	
   178 00065 0429          	MOV	A,B0_TMR
   179 00066 1A0F          	AND	A,@0Xf
   180                   M 	JPNZ	INT_CNT1_CALENDAR_END	;OVER 15duty ?
       00067 0E83     1     JBS  _STATUS , Z 
       00068 149A     1     JMP  INT_CNT1_CALENDAR_END ,
   181                     ;---
   182                   M 	DATETIME
       00069 0572     1     INC  B0_SEC_REG ,
                      2  M  SUBA  B0_SEC_REG ,@( 60 )
       0006A 183C     2     MOV A,@( 60 )
       0006B 0132     2     SUB A, B0_SEC_REG 
                      2  M  JPNZ  DATETIME_END 
       0006C 0E83     2     JBS  _STATUS , Z 
       0006D 149A     2     JMP  DATETIME_END ,
       0006E 00F2     1     CLR  B0_SEC_REG ,
       0006F 0573     1     INC  B0_MIN_REG ,
                      2  M  SUBA  B0_MIN_REG ,@( 60 )
       00070 183C     2     MOV A,@( 60 )
       00071 0133     2     SUB A, B0_MIN_REG 
                      2  M  JPNZ  DATETIME_END 
       00072 0E83     2     JBS  _STATUS , Z 
       00073 149A     2     JMP  DATETIME_END ,
       00074 00F3     1     CLR  B0_MIN_REG ,
       00075 0574     1     INC  B0_HOUR_REG ,
                      2  M  SUBA  B0_HOUR_REG ,@( 24 )
       00076 1818     2     MOV A,@( 24 )
       00077 0134     2     SUB A, B0_HOUR_REG 
                      2  M  JPNZ  DATETIME_END 
       00078 0E83     2     JBS  _STATUS , Z 
       00079 149A     2     JMP  DATETIME_END ,
       0007A 00F4     1     CLR  B0_HOUR_REG ,
       0007B 0575     1     INC  B0_DAY_REG ,
       0007C 0578     1     INC  B0_WEEK_REG ,
       0007D 1807     1     MOV A,@( 7 )
       0007E 0138     1     SUB A, B0_WEEK_REG 
                      2  M  JPNZ  DATETIME_03 
       0007F 0E83     2     JBS  _STATUS , Z 
       00080 1482     2     JMP  DATETIME_03 ,
       00081 00F8     1     CLR  B0_WEEK_REG ,
       00082          1    DATETIME_03:   
       00082 0437     1     MOV A, B0_YEAR_REG 
       00083 1A03     1     AND A,@( 3 )
                      2  M  JPZ  DATETIME_20 
       00084 0C83     2     JBC  _STATUS , Z 
       00085 1489     2     JMP  DATETIME_20 ,
       00086 0436     1     MOV A, B0_MON_REG 
       00087 117F     1     CALL  DAYINMONTHTABLE_0 ,
       00088 148B     1     JMP  DATETIME_21 ,
       00089          1    DATETIME_20:   
       00089 0436     1     MOV A, B0_MON_REG 
       0008A 118D     1     CALL  DAYINMONTHTABLE_1 ,
       0008B          1    DATETIME_21:   
       0008B 0055     1     MOV  TEMP0 ,A
       0008C 0435     1     MOV A, B0_DAY_REG 
       0008D 0115     1     SUB A, TEMP0 
                      2  M  JPC  DATETIME_END 
       0008E 0C03     2     JBC  _STATUS , C 
       0008F 149A     2     JMP  DATETIME_END ,
                      2  M  MOV  B0_DAY_REG ,@( 1 )
       00090 1801     2     MOV A,@( 1 )
       00091 0075     2     MOV  B0_DAY_REG ,A
       00092 0576     1     INC  B0_MON_REG ,
       00093 0436     1     MOV A, B0_MON_REG 
       00094 1D0D     1     SUB A,@( 13 )
                      2  M  JPNZ  DATETIME_END 
       00095 0E83     2     JBS  _STATUS , Z 
       00096 149A     2     JMP  DATETIME_END ,
                      2  M  MOV  B0_MON_REG ,@( 1 )
       00097 1801     2     MOV A,@( 1 )
       00098 0076     2     MOV  B0_MON_REG ,A
       00099 0577     1     INC  B0_YEAR_REG ,
       0009A          1    DATETIME_END:   
   183 0009A               INT_CNT1_CALENDAR_END:
   184                     ;---------------------------------------
   185 0009A               INT_CNT1_TMR:
   186 0009A 0431          	MOV	A,B0_TMR_TIMER_BAK
   187                   M 	JPZ	INT_CNT1_TMR_END
       0009B 0C83     1     JBC  _STATUS , Z 
       0009C 14A7     1     JMP  INT_CNT1_TMR_END ,
   188 0009D 01F0          	DEC	B0_TMR_TIMER
   189 0009E 0430          	MOV	A,B0_TMR_TIMER
   190                   M 	JPNZ	INT_CNT1_TMR_END
       0009F 0E83     1     JBS  _STATUS , Z 
       000A0 14A7     1     JMP  INT_CNT1_TMR_END ,
   191 000A1 0431          	MOV	A,B0_TMR_TIMER_BAK
   192 000A2 0070          	MOV	B0_TMR_TIMER,A
   193                     	
   194 000A3 1898          	MOV	A,@CMSG_TMR
   195                   M 	LCALL	INT_STOR_MSG
                      2  M  PAGE #( INT_STOR_MSG ),
       000A4 1E8D     2     PAGE ( INT_STOR_MSG / 1024 ),
       000A5 12EF     1     CALL ( INT_STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       000A6 1E80     2     PAGE ( $ / 1024 ),
   196 000A7               INT_CNT1_TMR_END:	
   197                     ;-------belows are for vox-detect-----------------------------------------------
   198 000A7               INT_CNT1_VOX:
   199 000A7 0439          	MOV	A,B0_TMR_VOX
   200                   M 	JPZ	INT_CNT1_VOX_END
       000A8 0C83     1     JBC  _STATUS , Z 
       000A9 14AB     1     JMP  INT_CNT1_VOX_END ,
   201                     
   202 000AA 01F9          	DEC	B0_TMR_VOX
   203                     
   204 000AB               INT_CNT1_VOX_END:
   205                     ;-------belows are for ctone-detect-----------------------------------------------
   206 000AB               INT_CNT1_CTONE:
   207 000AB 043A          	MOV	A,B0_TMR_CTONE
   208                   M 	JPZ	INT_CNT1_CTONE_END
       000AC 0C83     1     JBC  _STATUS , Z 
       000AD 14AF     1     JMP  INT_CNT1_CTONE_END ,
   209                     
   210 000AE 01FA          	DEC	B0_TMR_CTONE
   211                     
   212 000AF               INT_CNT1_CTONE_END:
   213                     ;-------belows are for btone-detect-----------------------------------------------
   214 000AF               INT_CNT1_BTONE:
   215 000AF 043C          	MOV	A,B0_TMR_BTONE
   216 000B0 1BFF          	XOR	A,@0XFF			;255
   217                   M 	JPZ	INT_CNT1_BTONE_END
       000B1 0C83     1     JBC  _STATUS , Z 
       000B2 14B4     1     JMP  INT_CNT1_BTONE_END ,
   218                     
   219 000B3 057C          	INC	B0_TMR_BTONE
   220                     
   221 000B4               INT_CNT1_BTONE_END:
   222                     ;-------belows are for btone-detect-----------------------------------------------
   223 000B4               INT_CNT1_NEWLED:
   224                   M 	JPB	SYS_FLAG,2,INT_CNT1_NEWLED_RECBLINK	;off
       000B4 0C92     1     JBC  SYS_FLAG , 2 
       000B5 14C3     1     JMP  INT_CNT1_NEWLED_RECBLINK ,
   225                     	
   226                   M 	JPB	DAM_FLAG,2,INT_CNT1_NEWLED_OFF	;off
       000B6 0C94     1     JBC  DAM_FLAG , 2 
       000B7 14BF     1     JMP  INT_CNT1_NEWLED_OFF ,
   227                   M 	JPNB	DAM_FLAG,7,INT_CNT1_NEWLED_ON	;NEW message
       000B8 0FD4     1     JBS  DAM_FLAG , 7 
       000B9 14C1     1     JMP  INT_CNT1_NEWLED_ON ,
   228                     ;---On && NewMessage	
   229 000BA 0429          	MOV	A,B0_TMR
   230 000BB 1A1F          	AND	A,@0X1F
   231 000BC 1D03          	SUB	A,@3
   232                   M 	JPC	INT_CNT1_NEWLED_ON
       000BD 0C03     1     JBC  _STATUS , C 
       000BE 14C1     1     JMP  INT_CNT1_NEWLED_ON ,
   233 000BF               INT_CNT1_NEWLED_OFF:	
   234                   M 	DAM_NEWLED_H		;LED off
       000BF 0A09     1     BS  _P9 , 0 
   235 000C0 14CA          	JMP	INT_CNT1_NEWLED_END
   236 000C1               INT_CNT1_NEWLED_ON:
   237                   M 	DAM_NEWLED_L		;LED on
       000C1 0809     1     BC  _P9 , 0 
   238 000C2 14CA          	JMP	INT_CNT1_NEWLED_END
   239 000C3               INT_CNT1_NEWLED_RECBLINK:	
   240 000C3 0429          	MOV	A,B0_TMR
   241 000C4 1A01          	AND	A,@0X1
   242                   M 	JPNZ	INT_CNT1_NEWLED_END
       000C5 0E83     1     JBS  _STATUS , Z 
       000C6 14CA     1     JMP  INT_CNT1_NEWLED_END ,
   243                     	
   244                   M 	DAM_NEWLED_COM
       000C7 0409     1     MOV A, _P9 
       000C8 1B01     1     XOR A,@( 1 )
       000C9 0049     1     MOV  _P9 ,A
   245 000CA               INT_CNT1_NEWLED_END:
   246                     ;-------belows are for key timer------------------------------------------------
   247 000CA               INT_CNT1_KEY:
   248                   M 	BANK	2
       000CA 0984     1     BC  _RSR , 6 
       000CB 0BC4     1     BS  _RSR , 7 
   249 000CC 0439          	MOV	A,B2_TMR_PLUSE
   250                   M 	JPZ	INT_CNT1_KEY_END	;0
       000CD 0C83     1     JBC  _STATUS , Z 
       000CE 14D0     1     JMP  INT_CNT1_KEY_END ,
   251                     
   252 000CF 01F9          	DEC	B2_TMR_PLUSE
   253                     
   254 000D0               INT_CNT1_KEY_END:
   255                     ;-------belows are for CID timer------------------------------------------------
   256 000D0               INT_CNT1_CIDTMR:
   257                   M 	BANK	3
       000D0 0B84     1     BS  _RSR , 6 
       000D1 0BC4     1     BS  _RSR , 7 
   258 000D2 0420          	MOV	A,B3_CidTimer
   259                   M 	JPZ	INT_CNT1_CIDTMR_END	;0
       000D3 0C83     1     JBC  _STATUS , Z 
       000D4 14D6     1     JMP  INT_CNT1_CIDTMR_END ,
   260                     
   261 000D5 01E0          	DEC	B3_CidTimer
   262                     
   263 000D6               INT_CNT1_CIDTMR_END:
   264                     ;-------belows are for for-ring-cnt-----------------------------------------------
   265 000D6               INT_CNT1_RINGCNT:
   266                   M 	BANK	1
       000D6 0B84     1     BS  _RSR , 6 
       000D7 09C4     1     BC  _RSR , 7 
   267 000D8 0426          	MOV	A,B1_RING_NUM
   268 000D9 1A0F          	AND	A,@0X0F
   269 000DA 0055          	MOV	TEMP0,A
   270                     	
   271                   M 	BANK	2
       000DB 0984     1     BC  _RSR , 6 
       000DC 0BC4     1     BS  _RSR , 7 
   272 000DD 043C          	MOV	A,B2_RING_ID
   273 000DE 1AF0          	AND	A,@0XF0
   274 000DF 007C          	MOV	B2_RING_ID,A
   275                     
   276                     
   277                   M 	JPB	_P8,4,INT_CNT1_RINGCNT_0	;at answer/speaker mode
       000E0 0D08     1     JBC  _P8 , 4 
       000E1 14F5     1     JMP  INT_CNT1_RINGCNT_0 ,
   278                   M 	JPNB	_P7,4,INT_CNT1_RINGCNT_0	;HS OFF-HOOK
       000E2 0F07     1     JBS  _P7 , 4 
       000E3 14F5     1     JMP  INT_CNT1_RINGCNT_0 ,
   279                     
   280                   M 	JPB	DAM_FLAG,2,INT_CNT1_RINGCNT_10	;Ans off
       000E4 0C94     1     JBC  DAM_FLAG , 2 
       000E5 14F2     1     JMP  INT_CNT1_RINGCNT_10 ,
   281                     ;---Ans on
   282 000E6 0415          	MOV	A,TEMP0
   283 000E7 1D01          	SUB	A,@0X01
   284                   M 	JPZ	INT_CNT1_TOLLSVAE
       000E8 0C83     1     JBC  _STATUS , Z 
       000E9 14ED     1     JMP  INT_CNT1_TOLLSVAE ,
   285                     
   286 000EA 0415          	MOV	A,TEMP0
   287 000EB 027C          	OR	B2_RING_ID,A
   288 000EC 14F6          	JMP	INT_CNT1_RINGCNT_END
   289 000ED               INT_CNT1_TOLLSVAE:
   290                     
   291 000ED 1802          	MOV	A,@2
   292 000EE 0FD4          	JBS	DAM_FLAG,7		;New message
   293 000EF 1804          	MOV	A,@4
   294 000F0 027C          	OR	B2_RING_ID,A
   295                     
   296 000F1 14F6          	JMP	INT_CNT1_RINGCNT_END
   297 000F2               INT_CNT1_RINGCNT_10:
   298 000F2 180F          	MOV	A,@0X0f
   299 000F3 027C          	OR	B2_RING_ID,A
   300 000F4 14F6          	JMP	INT_CNT1_RINGCNT_END
   301 000F5               INT_CNT1_RINGCNT_0:
   302 000F5 00FC          	CLR	B2_RING_ID
   303                     
   304 000F6               INT_CNT1_RINGCNT_END:
   305                     ;-------------------------------------------------------------------------------	
   306                   M 	BANK	0
       000F6 0984     1     BC  _RSR , 6 
       000F7 09C4     1     BC  _RSR , 7 
   307                     ;-------------------------------------------------------------------------------
   308                     ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   309 000F8 0426          	MOV	A,BANK0_TEMP0
   310 000F9 0055          	MOV	TEMP0,A
   311 000FA 0427          	MOV	A,BANK0_TEMP1
   312 000FB 0056          	MOV	TEMP1,A
   313                     ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   314 000FC 142A          	JMP	IntEnd
   315                     ;-------------------------------------------------------------------------------
   316 000FD               IntCnt2:			; (1ms)
   317                   M 	MOV	_ISR,@(~(1<<5))
       000FD 18DF     1     MOV A,@((~( 1 << 5 )))
       000FE 004F     1     MOV  _ISR ,A
   318                     
   319                   M 	IOPAGE	1
       000FF 0B83     1     BS  _STATUS , PG 
   320                   M 	IOW	_IOCC,@(0x100-32)			; count2(1.024ms)<==> 2^15/(0xff-31)=.2^10
       00100 18E0     1     MOV A,@(( 256 - 32 ))
       00101 000C     1     IOW  _IOCC ,
   321                   M 	IOPAGE	0
       00102 0983     1     BC  _STATUS , PG 
   322 00103               IntCnt2_MONTDC:		;监控DC电源
   323                     ;---DC-Power detect
   324                     	;BS	SYS_FLAG,2
   325                     	;JPB	_P7,5,IntCnt2_MONTDC_1
   326                     	;BC	SYS_FLAG,2
   327                     	;RESET_DSP_H
   328                     ;IntCnt2_MONTDC_1:
   329                     	
   330                   M 	BANK	2
       00103 0984     1     BC  _RSR , 6 
       00104 0BC4     1     BS  _RSR , 7 
   331                     ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   332 00105 0415          	MOV	A,TEMP0
   333 00106 0060          	MOV	BANK2_TEMP0,A
   334 00107 0416          	MOV	A,TEMP1
   335 00108 0061          	MOV	BANK2_TEMP1,A
   336 00109 0417          	MOV	A,TEMP2
   337 0010A 0062          	MOV	BANK2_TEMP2,A
   338                     ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	
   339 0010B 0563          	INC	B2_TMR		;increase every 1ms,Don`t set it anywhere
   340                     ;---------------------------------------
   341 0010C 0A13          	BS	EVENT,0
   342                     ;---------------------------------------
   343 0010D               INT_CNT2_TMR:		;Timer
   344 0010D 0426          	MOV	A,B2_TMR_TIMER_BAK
   345                   M 	JPZ	INT_CNT2_TMR_END
       0010E 0C83     1     JBC  _STATUS , Z 
       0010F 151A     1     JMP  INT_CNT2_TMR_END ,
   346 00110 01E5          	DEC	B2_TMR_TIMER
   347 00111 0425          	MOV	A,B2_TMR_TIMER
   348                   M 	JPNZ	INT_CNT2_TMR_END
       00112 0E83     1     JBS  _STATUS , Z 
       00113 151A     1     JMP  INT_CNT2_TMR_END ,
   349 00114 0426          	MOV	A,B2_TMR_TIMER_BAK
   350 00115 0065          	MOV	B2_TMR_TIMER,A
   351                     	
   352 00116 1897          	MOV	A,@CMSG_TMR2
   353                   M 	LCALL	INT_STOR_MSG
                      2  M  PAGE #( INT_STOR_MSG ),
       00117 1E8D     2     PAGE ( INT_STOR_MSG / 1024 ),
       00118 12EF     1     CALL ( INT_STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00119 1E80     2     PAGE ( $ / 1024 ),
   354 0011A               INT_CNT2_TMR_END:
   355                     ;---------------------------------------
   356                     ;The pole com before CID
   357                     ;B2_POLE_TMR	bit7 - last status
   358                     ;		bit6 - low to high
   359                     ;		bit5..0 timer
   360                     ;---------------------------------------
   361 0011A               INT_CNT2_POLE:
   362                   M 	JPB	_P9,2,INT_CNT2_POLE_H
       0011A 0C89     1     JBC  _P9 , 2 
       0011B 151E     1     JMP  INT_CNT2_POLE_H ,
   363 0011C               INT_CNT2_POLE_L:
   364 0011C 00E8          	CLR	B2_POLE_TMR
   365 0011D 1530          	JMP	INT_CNT2_POLE_END
   366 0011E               INT_CNT2_POLE_H:
   367                   M 	JPB	B2_POLE_TMR,7,INT_CNT2_POLE_TMRH	;H => H
       0011E 0DE8     1     JBC  B2_POLE_TMR , 7 
       0011F 1523     1     JMP  INT_CNT2_POLE_TMRH ,
   368                     ;L => H
   369                   M 	MOV	B2_POLE_TMR,@0XDF
       00120 18DF     1     MOV A,@( 223 )
       00121 0068     1     MOV  B2_POLE_TMR ,A
   370                     
   371 00122 1530          	JMP	INT_CNT2_POLE_END
   372 00123               INT_CNT2_POLE_TMRH:
   373                   M 	JPNB	B2_POLE_TMR,6,INT_CNT2_POLE_END
       00123 0FA8     1     JBS  B2_POLE_TMR , 6 
       00124 1530     1     JMP  INT_CNT2_POLE_END ,
   374                   M 	JPNB	_P9,2,INT_CNT2_POLE_L
       00125 0E89     1     JBS  _P9 , 2 
       00126 151C     1     JMP  INT_CNT2_POLE_L ,
   375                     	
   376 00127 01E8          	DEC	B2_POLE_TMR
   377                     	
   378 00128 0428          	MOV	A,B2_POLE_TMR
   379 00129 1A3F          	AND	A,@0X3F
   380                   M 	JPNZ	INT_CNT2_POLE_END
       0012A 0E83     1     JBS  _STATUS , Z 
       0012B 1530     1     JMP  INT_CNT2_POLE_END ,
   381                     	
   382 0012C 18CD          	MOV	A,@CRDY_CID	;!!!!!!!!
   383                   M 	LCALL	INT_STOR_MSG
                      2  M  PAGE #( INT_STOR_MSG ),
       0012D 1E8D     2     PAGE ( INT_STOR_MSG / 1024 ),
       0012E 12EF     1     CALL ( INT_STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0012F 1E80     2     PAGE ( $ / 1024 ),
   384                     
   385 00130               INT_CNT2_POLE_END:
   386                     ;---------------------------------------
   387 00130               INT_CNT2_CPC:			;CPC-det
   388                   M 	JPNB	_P8,4,INT_CNT2_CPC_1	;DAM/HF working ?
       00130 0F08     1     JBS  _P8 , 4 
       00131 1545     1     JMP  INT_CNT2_CPC_1 ,
   389                   M 	JPNB	_P7,4,INT_CNT2_CPC_1	;HS working ?
       00132 0F07     1     JBS  _P7 , 4 
       00133 1545     1     JMP  INT_CNT2_CPC_1 ,
   390                     	
   391 00134 01E7          	DEC	B2_TMR_CPC
   392                     	
   393 00135 0427          	MOV	A,B2_TMR_CPC
   394 00136 1D50          	SUB	A,@80
   395                   M 	JPNC	INT_CNT2_CPC_END
       00137 0E03     1     JBS  _STATUS , C 
       00138 1547     1     JMP  INT_CNT2_CPC_END ,
   396                     
   397                   M 	JPB	_P9,3,INT_CNT2_CPC_0	;CPC-DET H/L
       00139 0CC9     1     JBC  _P9 , 3 
       0013A 1542     1     JMP  INT_CNT2_CPC_0 ,
   398                     	
   399 0013B 0427          	MOV	A,B2_TMR_CPC
   400                   M 	JPNZ	INT_CNT2_CPC_END
       0013C 0E83     1     JBS  _STATUS , Z 
       0013D 1547     1     JMP  INT_CNT2_CPC_END ,
   401                     
   402 0013E 188B          	MOV	A,@CMSG_CPC
   403                   M 	LCALL	INT_STOR_MSG
                      2  M  PAGE #( INT_STOR_MSG ),
       0013F 1E8D     2     PAGE ( INT_STOR_MSG / 1024 ),
       00140 12EF     1     CALL ( INT_STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00141 1E80     2     PAGE ( $ / 1024 ),
   404                     
   405                     	;JMP	INT_CNT2_CPC_END
   406 00142               INT_CNT2_CPC_0:
   407                   M 	MOV	B2_TMR_CPC,@80
       00142 1850     1     MOV A,@( 80 )
       00143 0067     1     MOV  B2_TMR_CPC ,A
   408 00144 1547          	JMP	INT_CNT2_CPC_END
   409 00145               INT_CNT2_CPC_1:
   410                   M 	MOV	B2_TMR_CPC,@0XFF	
       00145 18FF     1     MOV A,@( 255 )
       00146 0067     1     MOV  B2_TMR_CPC ,A
   411 00147               INT_CNT2_CPC_END:	
   412                     ;---------------------------------------
   413 00147               IntCnt2_1:
   414 00147 0423          	MOV	A,B2_TMR
   415 00148 1A07          	AND	A,@0X07	
   416                   M 	JPNZ	IntCnt2_1_1
       00149 0E83     1     JBS  _STATUS , Z 
       0014A 1557     1     JMP  INTCNT2_1_1 ,
   417                     ;-------beep time
   418 0014B               INT_CNT2_BEEP:
   419 0014B 043A          	MOV	A,B2_TMR_BEEP
   420 0014C 1BFF          	XOR	A,@0XFF
   421                   M 	JPZ	INT_CNT2_BEEP_END
       0014D 0C83     1     JBC  _STATUS , Z 
       0014E 1557     1     JMP  INT_CNT2_BEEP_END ,
   422                     
   423 0014F 01FA          	DEC	B2_TMR_BEEP	;decrease/8ms
   424 00150 043A          	MOV	A,B2_TMR_BEEP
   425                   M 	JPNZ	INT_CNT2_BEEP_END
       00151 0E83     1     JBS  _STATUS , Z 
       00152 1557     1     JMP  INT_CNT2_BEEP_END ,
   426 00153 1884          	MOV	A,@CBEEP_END
   427                   M 	LCALL	INT_STOR_MSG
                      2  M  PAGE #( INT_STOR_MSG ),
       00154 1E8D     2     PAGE ( INT_STOR_MSG / 1024 ),
       00155 12EF     1     CALL ( INT_STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00156 1E80     2     PAGE ( $ / 1024 ),
   428 00157               INT_CNT2_BEEP_END:	
   429                     
   430                     ;-------
   431 00157               IntCnt2_1_1:
   432                     ;---------------------------------------
   433 00157               IntCnt2_2:
   434 00157 0436          	MOV	A,B2_TMR_KEYAFFM
   435                     	;XOR	A,@0XFF
   436                   M 	JPZ	IntCnt2_2_1	;-1为止
       00158 0C83     1     JBC  _STATUS , Z 
       00159 155B     1     JMP  INTCNT2_2_1 ,
   437                     	
   438 0015A 01F6          	DEC	B2_TMR_KEYAFFM
   439 0015B               IntCnt2_2_1:	
   440                     ;---------------------------------------
   441 0015B 0575          	INC	B2_TMR_KEYSCAN
   442                     
   443                   M 	LCALL	INTKEYSCAN_OUT
                      2  M  PAGE #( INTKEYSCAN_OUT ),
       0015C 1E81     2     PAGE ( INTKEYSCAN_OUT / 1024 ),
       0015D 1000     1     CALL ( INTKEYSCAN_OUT % 1024 ),
                      2  M  PAGE #( $ ),
       0015E 1E80     2     PAGE ( $ / 1024 ),
   444                     ;---
   445                   M 	LCALL	RING_CHK
                      2  M  PAGE #( RING_CHK ),
       0015F 1E8D     2     PAGE ( RING_CHK / 1024 ),
       00160 126E     1     CALL ( RING_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00161 1E80     2     PAGE ( $ / 1024 ),
   446 00162 1A07          	AND	A,@0X07
   447                   M 	MTBL	
       00163 0020     1     TBL 
             0163     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   448 00164 1573          	JMP	IntCnt2_2_1_0
   449 00165 1569          	JMP	IntCnt2_2_1_1
   450 00166 156B          	JMP	IntCnt2_2_1_2
   451 00167 156D          	JMP	IntCnt2_2_1_3
   452 00168 156F          	JMP	IntCnt2_2_1_4
   453                   M 	ENDT
             0001     1     Y_TBL  VAR  1 
   454 00169               IntCnt2_2_1_1:
   455 00169 189A          	MOV	A,@CRING_ON
   456 0016A 1570          	JMP	IntCnt2_2_1_MSG
   457 0016B               IntCnt2_2_1_2:
   458 0016B 189C          	MOV	A,@CRING_OK
   459 0016C 1570          	JMP	IntCnt2_2_1_MSG
   460 0016D               IntCnt2_2_1_3:
   461 0016D 189D          	MOV	A,@CRING_FAIL
   462 0016E 1570          	JMP	IntCnt2_2_1_MSG
   463 0016F               IntCnt2_2_1_4:
   464                     	;MOV	A,@CRING_OFF
   465 0016F 1573          	JMP	IntCnt2_2_1_0
   466 00170               IntCnt2_2_1_MSG:
   467                   M 	LCALL	INT_STOR_MSG	
                      2  M  PAGE #( INT_STOR_MSG ),
       00170 1E8D     2     PAGE ( INT_STOR_MSG / 1024 ),
       00171 12EF     1     CALL ( INT_STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00172 1E80     2     PAGE ( $ / 1024 ),
   468                     	;JMP	IntCnt2_2_1_0
   469 00173               IntCnt2_2_1_0:	
   470                     ;---
   471                   M 	LCALL	INTKEYSCAN_IN
                      2  M  PAGE #( INTKEYSCAN_IN ),
       00173 1E81     2     PAGE ( INTKEYSCAN_IN / 1024 ),
       00174 1017     1     CALL ( INTKEYSCAN_IN % 1024 ),
                      2  M  PAGE #( $ ),
       00175 1E80     2     PAGE ( $ / 1024 ),
   472                     ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   473 00176 0420          	MOV	A,BANK2_TEMP0
   474 00177 0055          	MOV	TEMP0,A
   475 00178 0421          	MOV	A,BANK2_TEMP1
   476 00179 0056          	MOV	TEMP1,A
   477 0017A 0422          	MOV	A,BANK2_TEMP2
   478 0017B 0057          	MOV	TEMP2,A
   479                     ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   480 0017C 142A          	JMP	IntEnd
   481                     ;-------------------------------------------------------------------------------
   482 0017D               IntFsk:
   483 0017D 098F          	BC	_ISR,6
   484 0017E 142A          	JMP	IntEnd
   485                     ;-------------------------------------------------------------------------------
   486                     
   487                     ;-------------------------------------------------------------------------------
   488                     ;	Get day with specific month
   489                     ;-------------------------------------------------------------------------------
   490 0017F               DAYINMONTHTABLE_0:
   491                   M 	MTBL
       0017F 0020     1     TBL 
             017F     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   492 00180 1C00          	RETL	@0X0		; 0
   493 00181 1C1F          	RETL	@31		; 1
   494 00182 1C1C          	RETL	@28		; 2
   495 00183 1C1F          	RETL	@31		; 3
   496 00184 1C1E          	RETL	@30		; 4
   497 00185 1C1F          	RETL	@31		; 5
   498 00186 1C1E          	RETL	@30		; 6
   499 00187 1C1F          	RETL	@31		; 7
   500 00188 1C1F          	RETL	@31		; 8
   501 00189 1C1E          	RETL	@30		; 9
   502 0018A 1C1F          	RETL	@31		; 10
   503 0018B 1C1E          	RETL	@30		; 11
   504 0018C 1C1F          	RETL	@31		; 12
   505                   M 	ENDT
             0001     1     Y_TBL  VAR  1 
   506 0018D               DAYINMONTHTABLE_1:
   507                   M 	MTBL
       0018D 0020     1     TBL 
             018D     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   508 0018E 1C00          	RETL	@0X0		; 0
   509 0018F 1C1F          	RETL	@31		; 1
   510 00190 1C1D          	RETL	@29		; 2
   511 00191 1C1F          	RETL	@31		; 3
   512 00192 1C1E          	RETL	@30		; 4
   513 00193 1C1F          	RETL	@31		; 5
   514 00194 1C1E          	RETL	@30		; 6
   515 00195 1C1F          	RETL	@31		; 7
   516 00196 1C1F          	RETL	@31		; 8
   517 00197 1C1E          	RETL	@30		; 9
   518 00198 1C1F          	RETL	@31		; 10
   519 00199 1C1E          	RETL	@30		; 11
   520 0019A 1C1F          	RETL	@31		; 12
   521                   M 	ENDT
             0001     1     Y_TBL  VAR  1 
   522                     ;----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- OK
   523                     ;PURPOSE:   TIMER-INTERRUPT-FUNCTION: UPDATE WEEK, DATA, TIME...
   524                     ;INPUT:     TMR1
   525                     ;OUTPUT:    
   526                     ;EFFECT:    TIMERTEMP
   527                     ;----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- 
   528                     DATETIME	MACRO
   529                     
   530                     	INC	B0_SEC_REG
   531                     	SUBA	B0_SEC_REG,@60
   532                     	JPNZ	DATETIME_END	;OVER 60S ?
   533                     ;---
   534                     	CLR	B0_SEC_REG
   535                     	INC	B0_MIN_REG
   536                     	SUBA	B0_MIN_REG,@60
   537                     	JPNZ	DATETIME_END	;OVER 60MIN ?
   538                     ;---
   539                     	CLR	B0_MIN_REG
   540                     	INC	B0_HOUR_REG
   541                     	SUBA	B0_HOUR_REG,@24	;OVER 24HOUR ?
   542                     	JPNZ	DATETIME_END
   543                     ;---
   544                     	CLR	B0_HOUR_REG
   545                     	INC	B0_DAY_REG
   546                     	INC	B0_WEEK_REG
   547                     	
   548                     	MOV	A,@7
   549                     	SUB	A,B0_WEEK_REG
   550                     	JPNZ	DATETIME_03	;OVER 7duty ?
   551                     
   552                     	CLR	B0_WEEK_REG
   553                     DATETIME_03:
   554                     	MOV	A,B0_YEAR_REG
   555                     	AND	A,@0X03
   556                     	JPZ	DATETIME_20	; Check if leap year or not?
   557                     	
   558                     	MOV	A,B0_MON_REG
   559                     	CALL	DAYINMONTHTABLE_0
   560                     
   561                     	JMP	DATETIME_21
   562                     DATETIME_20:
   563                     	MOV	A,B0_MON_REG
   564                     	CALL	DAYINMONTHTABLE_1
   565                     
   566                     DATETIME_21:
   567                     	MOV	TEMP0,A
   568                     
   569                     	MOV	A,B0_DAY_REG
   570                     	SUB     A,TEMP0
   571                     	JPC	DATETIME_END
   572                     ;---
   573                     	MOV     B0_DAY_REG,@1
   574                     	INC	B0_MON_REG
   575                     
   576                     	MOV	A,B0_MON_REG
   577                     	SUB	A,@13
   578                     	JPNZ	DATETIME_END
   579                     ;---
   580                     	MOV	B0_MON_REG,@1
   581                     	INC	B0_YEAR_REG	;the next year
   582                     
   583                     DATETIME_END:
   584                     	ENDM
   585                     
   586                     ;-------------------------------------------------------------------------------
   587                     ;page0
   588                     INCLUDE		"main.dt"
     1            C        
     2            C        ;-------------------------------------------------------------------------------
     3 0019B      C        MAIN:
     4            C      M 	PAGE	#(INITMCU)
       0019B 1E81     1     PAGE ( INITMCU / 1024 ),
     5 0019C 1282 C        	CALL	INITMCU
     6            C      M 	PAGE	#(KCLR_MSG)
       0019D 1E8D     1     PAGE ( KCLR_MSG / 1024 ),
     7 0019E 1300 C        	CALL	KCLR_MSG
     8            C        ;---Display INITIALIZATION	
     9            C      M 	PAGE	#(VGA)
       0019F 1E8C     1     PAGE ( VGA / 1024 ),
    10 001A0 1883 C        	MOV	A,@(STYLE_CENTER)
    11 001A1 1026 C        	CALL	VGACHAR
    12 001A2 1834 C        	MOV	A,@52		;INITIALIZATION
    13 001A3 114D C        	CALL	VGASTRING
    14 001A4 18FF C        	MOV	A,@(CH_END)
    15 001A5 1026 C        	CALL	VGACHAR
    16 001A6 10AB C        	CALL	VGADRAWCHAR	
    17            C      M 	PAGE	#(DISP_CHAR)
       001A7 1E8D     1     PAGE ( DISP_CHAR / 1024 ),
    18 001A8 11F6 C        	CALL	DISP_CHAR
    19            C        
    20            C        	;MOV	A,@CTMR500MS
    21            C        	;CALL	SET_TIMER
    22            C        ;---	
    23            C      M 	PAGE	#(STOR_MSG)
       001A9 1E8D     1     PAGE ( STOR_MSG / 1024 ),
    24 001AA 18A8 C        	MOV	A,@CPOWER_ON
    25 001AB 1308 C        	CALL	STOR_MSG	
    26 001AC      C        MAIN_LOOP:
    27            C      M 	PAGE	#(LCD_DISP)
       001AC 1E8D     1     PAGE ( LCD_DISP / 1024 ),
    28 001AD 1253 C        	CALL	LCD_DISP
    29            C        	
    30            C      M 	PAGE	#(INT_BIOS)
       001AE 1E83     1     PAGE ( INT_BIOS / 1024 ),
    31 001AF 10D2 C        	CALL	INT_BIOS
    32            C        	
    33            C      M 	PAGE	#(SYS_MONT)
       001B0 1E82     1     PAGE ( SYS_MONT / 1024 ),
    34 001B1 13C1 C        	CALL	SYS_MONT
    35            C        	
    36            C      M 	PAGE	#(KEYSCAN_AFFIRM)
       001B2 1E81     1     PAGE ( KEYSCAN_AFFIRM / 1024 ),
    37 001B3 10CA C        	CALL	KEYSCAN_AFFIRM
    38            C        	
    39            C      M 	LCALL 	GET_MSG
                      2  M  PAGE #( GET_MSG ),
       001B4 1E8D     2     PAGE ( GET_MSG / 1024 ),
       001B5 131B     1     CALL ( GET_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       001B6 1E80     2     PAGE ( $ / 1024 ),
    40            C      M 	JPZ	MAIN_LOOP
       001B7 0C83     1     JBC  _STATUS , Z 
       001B8 15AC     1     JMP  MAIN_LOOP ,
    41 001B9 0060 C        	MOV	B1_MSG,A
    42            C        
    43            C      M 	LCALL	SYS_MSG
                      2  M  PAGE #( SYS_MSG ),
       001BA 1E82     2     PAGE ( SYS_MSG / 1024 ),
       001BB 1273     1     CALL ( SYS_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       001BC 1E80     2     PAGE ( $ / 1024 ),
    44            C      M 	JPC	MAIN_LOOP
       001BD 0C03     1     JBC  _STATUS , C 
       001BE 15AC     1     JMP  MAIN_LOOP ,
    45            C        	
    46            C        ;-------------------------------------------------------------------------------
    47 001BF      C        GOTO_FUNC:				;DO FUNC
    48            C      M 	LCALL	GET_PRO
                      2  M  PAGE #( GET_PRO ),
       001BF 1E8D     2     PAGE ( GET_PRO / 1024 ),
       001C0 1345     1     CALL ( GET_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       001C1 1E80     2     PAGE ( $ / 1024 ),
    49            C      M 	MTBL
       001C2 0020     1     TBL 
             01C2     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    50 001C3 15D3 C        	JMP GOTO_IDLE			;0 idle
    51 001C4 15D5 C        	JMP GOTO_CID			;1 lookup CID/dial
    52 001C5 15D5 C        	JMP GOTO_DIAL			;2
    53 001C6 15E3 C        	JMP GOTO_MENU			;3 menu
    54 001C7 15E1 C        	JMP GOTO_BOOK			;4 phonebook
    55 001C8 15DF C        	JMP GOTO_PHONE			;5 phone
    56 001C9 15DD C        	JMP GOTO_STOR			;6 store M1/M2/M3
    57 001CA 15DB C        	JMP GOTO_PLAY			;7 play message
    58 001CB 15D9 C        	JMP GOTO_ANSWER			;8 Answer
    59 001CC 15D7 C        	JMP GOTO_REMOTE			;9 Remote
    60 001CD 15D5 C        	JMP GOTO_SET_LCODE		;A reserved
    61 001CE 15D5 C        	JMP GOTO_DATA_MODE		;B reserved
    62 001CF 15E5 C        	JMP GOTO_OGM			;C OGM
    63 001D0 15D5 C        	JMP GOTO_OGM_PLAYBACK		;D reserved
    64 001D1 15D5 C        	JMP GOTO_VOL_ADJ		;E reserved
    65 001D2 15D5 C        	JMP GOTO_EDIT			;F reserved
    66            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    67            C        
    68            C        ;-------------------------------------------------------------------------------
    69       0001 C        	CGOTO_CID		EQU	0X01
    70       0002 C        	CGOTO_DIAL		EQU	0X02
    71       0003 C        	CGOTO_MENU		EQU	0X03
    72       0004 C        	CGOTO_BOOK		EQU	0X04
    73       0005 C        	CGOTO_PHONE		EQU	0X05
    74       0006 C        	CGOTO_STOR		EQU	0X06
    75       0007 C        	CGOTO_PLAY		EQU	0X07
    76       0008 C        	CGOTO_ANSWER		EQU	0X08
    77       0009 C        	CGOTO_REMOTE		EQU	0X09
    78       000A C        	CGOTO_SET_LCODE		EQU	0X0A
    79       000B C        	CGOTO_DATA_MODE		EQU	0X0B
    80       000C C        	CGOTO_OGM		EQU	0X0C
    81       000D C        	CGOTO_OGM_PLAYBACK	EQU	0X0D
    82       000E C        	CGOTO_VOL_ADJ		EQU	0X0E
    83       000F C        	CGOTO_EDIT		EQU	0X0F
    84            C        	
    85            C        ;-------------------------------------------------------------------------------
    86 001D3      C        GOTO_IDLE:
    87            C      M 	LJMP 	PRO_IDLE
                      2  M  PAGE #( PRO_IDLE ),
       001D3 1E80     2     PAGE ( PRO_IDLE / 1024 ),
       001D4 15E7     1     JMP ( PRO_IDLE % 1024 ),
    88            C        ;---------------------------------------
    89 001D5      C        GOTO_DIAL:
    90 001D5      C        GOTO_SET_LCODE:
    91 001D5      C        GOTO_DATA_MODE:
    92            C        
    93 001D5      C        GOTO_OGM_PLAYBACK:
    94 001D5      C        GOTO_VOL_ADJ:
    95 001D5      C        GOTO_EDIT:
    96            C        ;---------------------------------------
    97 001D5      C        GOTO_CID:
    98            C      M 	LJMP	CID_FUNC
                      2  M  PAGE #( CID_FUNC ),
       001D5 1E86     2     PAGE ( CID_FUNC / 1024 ),
       001D6 1400     1     JMP ( CID_FUNC % 1024 ),
    99            C        ;---------------------------------------	
   100 001D7      C        GOTO_REMOTE:
   101            C      M 	LJMP	RMT_FUNC
                      2  M  PAGE #( RMT_FUNC ),
       001D7 1E85     2     PAGE ( RMT_FUNC / 1024 ),
       001D8 1400     1     JMP ( RMT_FUNC % 1024 ),
   102            C        ;---------------------------------------	
   103 001D9      C        GOTO_ANSWER:
   104            C      M 	LJMP	ANS_FUNC
                      2  M  PAGE #( ANS_FUNC ),
       001D9 1E84     2     PAGE ( ANS_FUNC / 1024 ),
       001DA 1400     1     JMP ( ANS_FUNC % 1024 ),
   105            C        ;---------------------------------------
   106 001DB      C        GOTO_PLAY:
   107            C      M 	LJMP 	PLAY_FUNC
                      2  M  PAGE #( PLAY_FUNC ),
       001DB 1E88     2     PAGE ( PLAY_FUNC / 1024 ),
       001DC 15D4     1     JMP ( PLAY_FUNC % 1024 ),
   108            C        ;---------------------------------------
   109 001DD      C        GOTO_STOR:	
   110            C      M 	LJMP 	STOR_FUNC
                      2  M  PAGE #( STOR_FUNC ),
       001DD 1E84     2     PAGE ( STOR_FUNC / 1024 ),
       001DE 1606     1     JMP ( STOR_FUNC % 1024 ),
   111            C        ;---------------------------------------
   112 001DF      C        GOTO_PHONE:
   113            C      M 	LJMP 	PHONE_FUNC	
                      2  M  PAGE #( PHONE_FUNC ),
       001DF 1E87     2     PAGE ( PHONE_FUNC / 1024 ),
       001E0 1400     1     JMP ( PHONE_FUNC % 1024 ),
   114            C        ;---------------------------------------
   115 001E1      C        GOTO_BOOK:
   116            C      M 	LJMP 	BOOK_FUNC
                      2  M  PAGE #( BOOK_FUNC ),
       001E1 1E8A     2     PAGE ( BOOK_FUNC / 1024 ),
       001E2 1700     1     JMP ( BOOK_FUNC % 1024 ),
   117            C        ;---------------------------------------
   118 001E3      C        GOTO_MENU:
   119            C      M 	LJMP 	MENU_FUNC
                      2  M  PAGE #( MENU_FUNC ),
       001E3 1E89     2     PAGE ( MENU_FUNC / 1024 ),
       001E4 1400     1     JMP ( MENU_FUNC % 1024 ),
   120            C        ;---------------------------------------
   121 001E5      C        GOTO_OGM:
   122            C      M 	LJMP 	OGM_FUNC
                      2  M  PAGE #( OGM_FUNC ),
       001E5 1E88     2     PAGE ( OGM_FUNC / 1024 ),
       001E6 1400     1     JMP ( OGM_FUNC % 1024 ),
   123            C        ;-------------------------------------------------------------------------------
   124            C        
   589                     INCLUDE		"f_idle.dt"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;	B1_PRO_VAR	bit7 = 1/0 - Make Key msg received
     3            C        ;-------------------------------------------------------------------------------	
     4 001E7      C        PRO_IDLE:	
     5            C        
     6 001E7 1897 C        	MOV 	A,@CMSG_TMR2
     7 001E8 0120 C        	SUB 	A,B1_MSG
     8            C      M 	JPZ 	PRO_IDLE_TMR2
       001E9 0C83     1     JBC  _STATUS , Z 
       001EA 1648     1     JMP  PRO_IDLE_TMR2 ,
     9            C        	
    10 001EB 1898 C        	MOV 	A,@CMSG_TMR
    11 001EC 0120 C        	SUB 	A,B1_MSG
    12            C      M 	JPZ 	PRO_IDLE_TMR
       001ED 0C83     1     JBC  _STATUS , Z 
       001EE 1628     1     JMP  PRO_IDLE_TMR ,
    13            C        	
    14 001EF 189A C        	MOV 	A,@CRING_ON
    15 001F0 0120 C        	SUB 	A,B1_MSG
    16            C      M 	JPZ 	PRO_IDLE_RING
       001F1 0C83     1     JBC  _STATUS , Z 
       001F2 167B     1     JMP  PRO_IDLE_RING ,
    17            C        	
    18 001F3 18CD C        	MOV 	A,@CRDY_CID
    19 001F4 0120 C        	SUB 	A,B1_MSG
    20            C      M 	JPZ 	PRO_IDLE_ROFF
       001F5 0C83     1     JBC  _STATUS , Z 
       001F6 167F     1     JMP  PRO_IDLE_ROFF ,
    21            C        	
    22 001F7 189D C        	MOV 	A,@CRING_FAIL
    23 001F8 0120 C        	SUB 	A,B1_MSG
    24            C      M 	JPZ 	PRO_IDLE_RINGFAIL
       001F9 0C83     1     JBC  _STATUS , Z 
       001FA 1689     1     JMP  PRO_IDLE_RINGFAIL ,
    25            C        
    26 001FB 1893 C        	MOV 	A,@CHOOK_OFF
    27 001FC 0120 C        	SUB 	A,B1_MSG
    28            C      M 	JPZ 	PRO_IDLE_HOOKOFF
       001FD 0C83     1     JBC  _STATUS , Z 
       001FE 17A6     1     JMP  PRO_IDLE_HOOKOFF ,
    29 001FF 1894 C        	MOV 	A,@CPHONE_ON
    30 00200 0120 C        	SUB 	A,B1_MSG
    31            C      M 	JPZ 	PRO_IDLE_PHONEON
       00201 0C83     1     JBC  _STATUS , Z 
       00202 179C     1     JMP  PRO_IDLE_PHONEON ,
    32            C        
    33 00203 1880 C        	MOV 	A,@CMSG_MKEY
    34 00204 0120 C        	SUB 	A,B1_MSG
    35            C      M 	JPZ 	PRO_IDLE_MKEY
       00205 0C83     1     JBC  _STATUS , Z 
       00206 168F     1     JMP  PRO_IDLE_MKEY ,
    36            C        
    37 00207 1881 C        	MOV 	A,@CMSG_BKEY
    38 00208 0120 C        	SUB 	A,B1_MSG
    39            C      M 	JPZ 	PRO_IDLE_BKEY
       00209 0C83     1     JBC  _STATUS , Z 
       0020A 16E2     1     JMP  PRO_IDLE_BKEY ,
    40            C        
    41 0020B 1882 C        	MOV 	A,@CMSG_CKEY
    42 0020C 0120 C        	SUB 	A,B1_MSG
    43            C      M 	JPZ 	PRO_IDLE_CKEY
       0020D 0C83     1     JBC  _STATUS , Z 
       0020E 1704     1     JMP  PRO_IDLE_CKEY ,
    44            C        	
    45 0020F 1885 C        	MOV 	A,@CVP_END
    46 00210 0120 C        	SUB 	A,B1_MSG
    47            C      M 	JPZ 	PRO_IDLE_VPEND
       00211 0C83     1     JBC  _STATUS , Z 
       00212 1675     1     JMP  PRO_IDLE_VPEND ,
    48            C        	
    49 00213 1890 C        	MOV 	A,@CMSG_INIT
    50 00214 0120 C        	SUB 	A,B1_MSG
    51            C      M 	JPZ 	PRO_IDLE_INIT
       00215 0C83     1     JBC  _STATUS , Z 
       00216 164D     1     JMP  PRO_IDLE_INIT ,
    52            C        
    53 00217 18CF C        	MOV 	A,@CMSG_CID
    54 00218 0120 C        	SUB 	A,B1_MSG
    55            C      M 	JPZ 	PRO_IDLE_NCID
       00219 0C83     1     JBC  _STATUS , Z 
       0021A 1772     1     JMP  PRO_IDLE_NCID ,
    56            C        		
    57 0021B 18A4 C        	MOV 	A,@CCID_EDIT
    58 0021C 0120 C        	SUB 	A,B1_MSG
    59            C      M 	JPZ 	PRO_IDLE_EDITCID
       0021D 0C83     1     JBC  _STATUS , Z 
       0021E 1777     1     JMP  PRO_IDLE_EDITCID ,
    60            C        		
    61 0021F 18A5 C        	MOV 	A,@CDIAL_OUT
    62 00220 0120 C        	SUB 	A,B1_MSG
    63            C      M 	JPZ 	PRO_IDLE_DIAL	;Dial out the data displayed at LCD
       00221 0C83     1     JBC  _STATUS , Z 
       00222 1797     1     JMP  PRO_IDLE_DIAL ,
    64            C        
    65 00223 18A8 C        	MOV 	A,@CPOWER_ON
    66 00224 0120 C        	SUB 	A,B1_MSG
    67            C      M 	JPZ 	PRO_IDLE_POWERON
       00225 0C83     1     JBC  _STATUS , Z 
       00226 1763     1     JMP  PRO_IDLE_POWERON ,
    68            C        		
    69 00227 15AC C        	JMP 	MAIN_LOOP
    70            C        ;---------------------------------------
    71 00228      C        PRO_IDLE_TMR:
    72            C        	;JMP 	MAIN_LOOP
    73 00228 0562 C        	INC	B1_PRO_VAR1
    74            C        	
    75 00229 1820 C        	MOV	A,@CTMR2S
    76            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       0022A 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       0022B 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       0022C 1E80     2     PAGE ( $ / 1024 ),
    77            C        
    78            C      M 	PAGE	#(VGA)
       0022D 1E8C     1     PAGE ( VGA / 1024 ),
    79 0022E 111E C        	CALL	VGABLANKNUM2
    80 0022F 1127 C        	CALL	VGABLANKCHAR
    81            C      M 	PAGE	#($)
       00230 1E80     1     PAGE ( $ / 1024 ),
    82            C        	
    83            C      M 	JPB	B1_PRO_VAR1,0,PRO_IDLE_TMR_3
       00231 0C22     1     JBC  B1_PRO_VAR1 , 0 
       00232 1637     1     JMP  PRO_IDLE_TMR_3 ,
    84            C      M 	JPB	DAM_FLAG,4,PRO_IDLE_TMRNEW	;New CID
       00233 0D14     1     JBC  DAM_FLAG , 4 
       00234 1638     1     JMP  PRO_IDLE_TMRNEW ,
    85            C      M 	JPB	DAM_FLAG,7,PRO_IDLE_TMRNEW	;New VP
       00235 0DD4     1     JBC  DAM_FLAG , 7 
       00236 1638     1     JMP  PRO_IDLE_TMRNEW ,
    86            C        
    87 00237      C        PRO_IDLE_TMR_3:
    88            C        ;---All VP/CID
    89 00237 1664 C        	JMP	PRO_IDLE_INIT_1
    90            C        ;---------------------------------------
    91 00238      C        PRO_IDLE_TMRNEW:
    92            C        ;---New VP/CID
    93            C        
    94            C        ;---2nd line
    95            C      M 	PAGE	#(DISP_NEWVPCID)
       00238 1E8C     1     PAGE ( DISP_NEWVPCID / 1024 ),
    96 00239 13A4 C        	CALL	DISP_NEWVPCID
    97            C        ;---3rd line
    98            C      M 	PAGE	#(VGA)
       0023A 1E8C     1     PAGE ( VGA / 1024 ),
    99 0023B 1883 C        	MOV	A,@(STYLE_CENTER)
   100 0023C 1026 C        	CALL	VGACHAR
   101 0023D 182A C        	MOV	A,@42		;NEW
   102 0023E 114D C        	CALL	VGASTRING
   103 0023F 182B C        	MOV	A,@43		;4-BLANK
   104 00240 114D C        	CALL	VGASTRING
   105 00241 182A C        	MOV	A,@42		;NEW
   106 00242 114D C        	CALL	VGASTRING
   107            C        
   108 00243 18FF C        	MOV	A,@(CH_END)
   109 00244 1026 C        	CALL	VGACHAR
   110 00245 10AB C        	CALL	VGADRAWCHAR
   111            C      M 	PAGE	#($)
       00246 1E80     1     PAGE ( $ / 1024 ),
   112            C        
   113 00247 15AC C        	JMP 	MAIN_LOOP
   114            C        ;---------------------------------------
   115 00248      C        PRO_IDLE_TMR2:			;LED BLINK(off) only
   116            C      M 	LCALL	CLR_2TIMER
                      2  M  PAGE #( CLR_2TIMER ),
       00248 1E8D     2     PAGE ( CLR_2TIMER / 1024 ),
       00249 1364     1     CALL ( CLR_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       0024A 1E80     2     PAGE ( $ / 1024 ),
   117            C        	
   118            C      M 	DAM_NEWLED_H		;LED off
       0024B 0A09     1     BS  _P9 , 0 
   119            C        	
   120 0024C 15AC C        	JMP 	MAIN_LOOP
   121            C        ;---------------------------------------
   122 0024D      C        PRO_IDLE_BKEY_DEL:
   123 0024D      C        PRO_IDLE_INIT:
   124            C      M 	RTC_DISP_ENABLE		;Enable RTC display
       0024D 0A12     1     BS  SYS_FLAG , 0 
   125            C        ;---initial DSP-RTC
   126            C      M 	BANK	0
       0024E 0984     1     BC  _RSR , 6 
       0024F 09C4     1     BC  _RSR , 7 
   127            C      M 	PAGE	#(SET_DSPRTC)
       00250 1E8A     1     PAGE ( SET_DSPRTC / 1024 ),
   128 00251 12A1 C        	CALL	SET_DSPRTC
   129            C        	;PAGE	#($)
   130            C      M 	BANK	1
       00252 0B84     1     BS  _RSR , 6 
       00253 09C4     1     BC  _RSR , 7 
   131            C        ;---	
   132 00254 1808 C        	MOV	A,@CTMR500MS
   133            C      M 	PAGE	#(SET_TIMER)
       00255 1E8D     1     PAGE ( SET_TIMER / 1024 ),
   134 00256 1359 C        	CALL	SET_TIMER
   135            C        ;---
   136            C      M 	PAGE	#(VPMSG_CHK)
       00257 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   137 00258 1182 C        	CALL	VPMSG_CHK
   138            C        	
   139 00259 180E C        	MOV	A,@CGROUP_MISSCID
   140            C      M 	PAGE	#(DSP)
       0025A 1E83     1     PAGE ( DSP / 1024 ),
   141 0025B 1241 C        	CALL	SET_GROUP
   142            C      M 	PAGE	#(GET_TELN)
       0025C 1E84     1     PAGE ( GET_TELN / 1024 ),
   143 0025D 11BB C        	CALL	GET_TELN	;Get the total/new TEL-message number
   144            C        ;---
   145            C      M 	PAGE	#(VGA)
       0025E 1E8C     1     PAGE ( VGA / 1024 ),
   146 0025F 18FD C        	MOV	A,@~(1<<1)		;SPK icon off
   147 00260 100C C        	CALL	CLRVGASTAMP1
   148 00261 1097 C        	CALL	VGADRAWSTAMP
   149 00262 111E C        	CALL	VGABLANKNUM2
   150 00263 1127 C        	CALL	VGABLANKCHAR
   151            C        ;---
   152            C        	;MOV	A,@((1<<5)|(1<<2))	;":","/"
   153            C        	;CALL	VGASTAMP1
   154            C        	;CALL	VGADRAWSTAMP
   155 00264      C        PRO_IDLE_INIT_1:
   156            C        
   157            C        ;---the 1st line
   158            C      M 	PAGE	#(VGA)
       00264 1E8C     1     PAGE ( VGA / 1024 ),
   159 00265 18C8 C        	MOV	A,@ID_BLANK
   160 00266 1374 C        	CALL	DISP_ID
   161            C        ;---the 2nd line
   162 00267 13AD C        	CALL	DISP_ALLVPCID
   163            C        ;---the 3rd line
   164 00268 1883 C        	MOV	A,@(STYLE_CENTER)
   165 00269 1026 C        	CALL	VGACHAR
   166 0026A 180B C        	MOV	A,@11		;MESSAGES
   167 0026B 114D C        	CALL	VGASTRING
   168 0026C 1800 C        	MOV	A,@(CH_BLANK)
   169 0026D 1026 C        	CALL	VGACHAR
   170 0026E 1802 C        	MOV	A,@2		;CALLS
   171 0026F 114D C        	CALL	VGASTRING
   172 00270 18FF C        	MOV	A,@(CH_END)
   173 00271 1026 C        	CALL	VGACHAR
   174 00272 10AB C        	CALL	VGADRAWCHAR
   175            C      M 	PAGE	#($)
       00273 1E80     1     PAGE ( $ / 1024 ),
   176            C        
   177 00274 15AC C        	JMP 	MAIN_LOOP
   178            C        ;---------------------------------------
   179 00275      C        PRO_IDLE_VPEND:
   180            C      M 	PAGE	#(INIT_DAM_FUNC)
       00275 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   181 00276 11C1 C        	CALL	INIT_DAM_FUNC
   182            C        ;-All codec-path open
   183            C      M 	LCALL	DAA_OFF
                      2  M  PAGE #( DAA_OFF ),
       00277 1E83     2     PAGE ( DAA_OFF / 1024 ),
       00278 11ED     1     CALL ( DAA_OFF % 1024 ),
                      2  M  PAGE #( $ ),
       00279 1E80     2     PAGE ( $ / 1024 ),
   184            C        	
   185 0027A 15AC C        	JMP 	MAIN_LOOP
   186            C        ;---------------------------------------
   187 0027B      C        PRO_IDLE_RING:
   188            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       0027B 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       0027C 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       0027D 1E80     2     PAGE ( $ / 1024 ),
   189 0027E 15AC C        	JMP 	MAIN_LOOP
   190            C        ;---------------------------------------
   191 0027F      C        PRO_IDLE_ROFF:
   192            C      M 	PAGE	#(INIT_DAM_FUNC)
       0027F 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   193 00280 11C1 C        	CALL	INIT_DAM_FUNC
   194            C        	
   195            C      M 	PAGE	#(MODE9_LON)
       00281 1E81     1     PAGE ( MODE9_LON / 1024 ),
   196 00282 1373 C        	CALL	MODE9_LON
   197            C      M 	PAGE	#(DAA_OFF)
       00283 1E83     1     PAGE ( DAA_OFF / 1024 ),
   198 00284 11ED C        	CALL	DAA_OFF
   199            C      M 	PAGE	#(LINE_START)
       00285 1E82     1     PAGE ( LINE_START / 1024 ),
   200 00286 1038 C        	CALL	LINE_START
   201            C      M 	PAGE	#($)
       00287 1E80     1     PAGE ( $ / 1024 ),
   202            C        	
   203 00288 15AC C        	JMP 	MAIN_LOOP
   204            C        ;---------------------------------------
   205 00289      C        PRO_IDLE_RINGFAIL:
   206            C      M 	PAGE	#(INIT_DAM_FUNC)
       00289 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   207 0028A 11C1 C        	CALL	INIT_DAM_FUNC
   208            C      M 	LCALL	MODE9_LOFF
                      2  M  PAGE #( MODE9_LOFF ),
       0028B 1E81     2     PAGE ( MODE9_LOFF / 1024 ),
       0028C 137E     1     CALL ( MODE9_LOFF % 1024 ),
                      2  M  PAGE #( $ ),
       0028D 1E80     2     PAGE ( $ / 1024 ),
   209            C        	
   210 0028E 15AC C        	JMP 	MAIN_LOOP
   211            C        ;---------------------------------------
   212 0028F      C        PRO_IDLE_MKEY:
   213 0028F 0BE1 C        	BS	B1_PRO_VAR,7	;Set Make-key flag
   214            C        	
   215 00290 1820 C        	MOV	A,@CTMR2S
   216            C      M 	LCALL	SET_PTIMER
                      2  M  PAGE #( SET_PTIMER ),
       00291 1E8D     2     PAGE ( SET_PTIMER / 1024 ),
       00292 1371     1     CALL ( SET_PTIMER % 1024 ),
                      2  M  PAGE #( $ ),
       00293 1E80     2     PAGE ( $ / 1024 ),
   217            C        	
   218 00294 1810 C        	MOV	A,@CKEY_PLY
   219            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00295 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00296 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00297 1E80     2     PAGE ( $ / 1024 ),
   220            C      M 	JPNC	PRO_IDLE_MKEY_PLY
       00298 0E03     1     JBS  _STATUS , C 
       00299 173C     1     JMP  PRO_IDLE_MKEY_PLY ,
   221            C        
   222 0029A 1813 C        	MOV	A,@CKEY_STP
   223            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0029B 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0029C 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0029D 1E80     2     PAGE ( $ / 1024 ),
   224            C      M 	JPNC	PRO_IDLE_MKEY_STP
       0029E 0E03     1     JBS  _STATUS , C 
       0029F 1746     1     JMP  PRO_IDLE_MKEY_STP ,
   225            C        ;---	
   226 002A0 1814 C        	MOV	A,@CKEY_PBK
   227            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002A1 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002A2 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002A3 1E80     2     PAGE ( $ / 1024 ),
   228            C      M 	JPNC	PRO_IDLE_MKEY_BOOK
       002A4 0E03     1     JBS  _STATUS , C 
       002A5 1747     1     JMP  PRO_IDLE_MKEY_BOOK ,
   229 002A6 1815 C        	MOV	A,@CKEY_1M
   230            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002A7 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002A8 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002A9 1E80     2     PAGE ( $ / 1024 ),
   231            C      M 	JPNC	PRO_IDLE_MKEY_1M
       002AA 0E03     1     JBS  _STATUS , C 
       002AB 1751     1     JMP  PRO_IDLE_MKEY_1M ,
   232 002AC 1816 C        	MOV	A,@CKEY_2M
   233            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002AD 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002AE 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002AF 1E80     2     PAGE ( $ / 1024 ),
   234            C      M 	JPNC	PRO_IDLE_MKEY_2M
       002B0 0E03     1     JBS  _STATUS , C 
       002B1 1754     1     JMP  PRO_IDLE_MKEY_2M ,
   235 002B2 1817 C        	MOV	A,@CKEY_3M
   236            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002B3 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002B4 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002B5 1E80     2     PAGE ( $ / 1024 ),
   237            C      M 	JPNC	PRO_IDLE_MKEY_3M
       002B6 0E03     1     JBS  _STATUS , C 
       002B7 1757     1     JMP  PRO_IDLE_MKEY_3M ,
   238            C        ;---		
   239 002B8 1820 C        	MOV	A,@CKEY_MNU
   240            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002B9 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002BA 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002BB 1E80     2     PAGE ( $ / 1024 ),
   241            C      M 	JPNC	PRO_IDLE_MKEY_MNU
       002BC 0E03     1     JBS  _STATUS , C 
       002BD 1768     1     JMP  PRO_IDLE_MKEY_MNU ,
   242 002BE 1821 C        	MOV	A,@CKEY_UP
   243            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002BF 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002C0 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002C1 1E80     2     PAGE ( $ / 1024 ),
   244            C      M 	JPNC	PRO_IDLE_MKEY_UP
       002C2 0E03     1     JBS  _STATUS , C 
       002C3 177C     1     JMP  PRO_IDLE_MKEY_UP ,
   245 002C4 1822 C        	MOV	A,@CKEY_DWN
   246            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002C5 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002C6 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002C7 1E80     2     PAGE ( $ / 1024 ),
   247            C      M 	JPNC	PRO_IDLE_MKEY_DWN
       002C8 0E03     1     JBS  _STATUS , C 
       002C9 177C     1     JMP  PRO_IDLE_MKEY_DWN ,
   248            C        	
   249            C        ;---		
   250 002CA 1824 C        	MOV	A,@CKEY_MTE
   251            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002CB 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002CC 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002CD 1E80     2     PAGE ( $ / 1024 ),
   252            C      M 	JPNC	PRO_IDLE_MKEY_MTE
       002CE 0E03     1     JBS  _STATUS , C 
       002CF 1786     1     JMP  PRO_IDLE_MKEY_MTE ,
   253            C        
   254 002D0 1826 C        	MOV	A,@CKEY_RP
   255            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002D1 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002D2 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002D3 1E80     2     PAGE ( $ / 1024 ),
   256            C      M 	JPNC	PRO_IDLE_MKEY_RP	;Pause/repeat - Dialled num
       002D4 0E03     1     JBS  _STATUS , C 
       002D5 1792     1     JMP  PRO_IDLE_MKEY_RP ,
   257 002D6 1827 C        	MOV	A,@CKEY_SPK
   258            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002D7 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002D8 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002D9 1E80     2     PAGE ( $ / 1024 ),
   259            C      M 	JPNC	PRO_IDLE_MKEY_SPK
       002DA 0E03     1     JBS  _STATUS , C 
       002DB 179C     1     JMP  PRO_IDLE_MKEY_SPK ,
   260            C        ;---		
   261            C      M 	LCALL	DIALKEY_CHK
                      2  M  PAGE #( DIALKEY_CHK ),
       002DC 1E82     2     PAGE ( DIALKEY_CHK / 1024 ),
       002DD 1203     1     CALL ( DIALKEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002DE 1E80     2     PAGE ( $ / 1024 ),
   262            C      M 	JPC	PRO_IDLE_MKEY_NUM	;Num 
       002DF 0C03     1     JBC  _STATUS , C 
       002E0 17AB     1     JMP  PRO_IDLE_MKEY_NUM ,
   263            C        
   264 002E1 15AC C        	JMP 	MAIN_LOOP
   265            C        ;---------------------------------------
   266 002E2      C        PRO_IDLE_BKEY:
   267            C      M 	JPNB	B1_PRO_VAR,7,MAIN_LOOP
       002E2 0FE1     1     JBS  B1_PRO_VAR , 7 
       002E3 15AC     1     JMP  MAIN_LOOP ,
   268 002E4 09E1 C        	BC	B1_PRO_VAR,7
   269            C        	
   270 002E5 1811 C        	MOV	A,@CKEY_OGM
   271            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002E6 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002E7 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002E8 1E80     2     PAGE ( $ / 1024 ),
   272            C      M 	JPNC	PRO_IDLE_BKEY_OGM	;Play OGM
       002E9 0E03     1     JBS  _STATUS , C 
       002EA 1723     1     JMP  PRO_IDLE_BKEY_OGM ,
   273            C        	
   274 002EB 1813 C        	MOV	A,@CKEY_STP
   275            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002EC 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002ED 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002EE 1E80     2     PAGE ( $ / 1024 ),
   276            C      M 	JPNC	PRO_IDLE_BKEY_STP	;Select OGM
       002EF 0E03     1     JBS  _STATUS , C 
       002F0 16F8     1     JMP  PRO_IDLE_BKEY_STP ,
   277            C        	
   278 002F1 1823 C        	MOV	A,@CKEY_DEL
   279            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       002F2 1E81     2     PAGE ( KEY_CHK / 1024 ),
       002F3 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       002F4 1E80     2     PAGE ( $ / 1024 ),
   280            C      M 	JPNC	PRO_IDLE_BKEY_DEL	;Select OGM
       002F5 0E03     1     JBS  _STATUS , C 
       002F6 164D     1     JMP  PRO_IDLE_BKEY_DEL ,
   281 002F7 15AC C        	JMP 	MAIN_LOOP
   282            C        ;---------------------------------------
   283 002F8      C        PRO_IDLE_BKEY_STP:	;OGM Select
   284            C      M 	JPB	DAM_FLAG,2,MAIN_LOOP	;If Answer Off,you can't select OGM
       002F8 0C94     1     JBC  DAM_FLAG , 2 
       002F9 15AC     1     JMP  MAIN_LOOP ,
   285            C        	
   286 002FA 18C7 C        	MOV	A,@CSEL_OGM
   287            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       002FB 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       002FC 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       002FD 1E80     2     PAGE ( $ / 1024 ),
   288            C        
   289 002FE 176C C        	JMP 	PRO_IDLE_MNU
   290            C        ;---------------------------------------
   291 002FF      C        PRO_IDLE_CKEY_STP:	;OGM Select
   292 002FF 18C8 C        	MOV	A,@CSEL_ONOFF
   293            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00300 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00301 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00302 1E80     2     PAGE ( $ / 1024 ),
   294            C        	
   295 00303 176C C        	JMP 	PRO_IDLE_MNU
   296            C        ;---------------------------------------
   297 00304      C        PRO_IDLE_CKEY:
   298            C      M 	LCALL	CLR_PTIMER
                      2  M  PAGE #( CLR_PTIMER ),
       00304 1E8D     2     PAGE ( CLR_PTIMER / 1024 ),
       00305 1370     1     CALL ( CLR_PTIMER % 1024 ),
                      2  M  PAGE #( $ ),
       00306 1E80     2     PAGE ( $ / 1024 ),
   299            C      M 	JPNB	B1_PRO_VAR,7,MAIN_LOOP
       00307 0FE1     1     JBS  B1_PRO_VAR , 7 
       00308 15AC     1     JMP  MAIN_LOOP ,
   300 00309 09E1 C        	BC	B1_PRO_VAR,7
   301            C        
   302 0030A 1811 C        	MOV	A,@CKEY_OGM
   303            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0030B 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0030C 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0030D 1E80     2     PAGE ( $ / 1024 ),
   304            C      M 	JPNC	PRO_IDLE_CKEY_OGM	;Record OGM
       0030E 0E03     1     JBS  _STATUS , C 
       0030F 1728     1     JMP  PRO_IDLE_CKEY_OGM ,
   305 00310 1812 C        	MOV	A,@CKEY_MMO
   306            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00311 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00312 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00313 1E80     2     PAGE ( $ / 1024 ),
   307            C      M 	JPNC	PRO_IDLE_CKEY_MMO	;Record MEMO
       00314 0E03     1     JBS  _STATUS , C 
       00315 1732     1     JMP  PRO_IDLE_CKEY_MMO ,
   308 00316 1813 C        	MOV	A,@CKEY_STP
   309            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00317 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00318 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00319 1E80     2     PAGE ( $ / 1024 ),
   310            C      M 	JPNC	PRO_IDLE_CKEY_STP	;Record OGM
       0031A 0E03     1     JBS  _STATUS , C 
       0031B 16FF     1     JMP  PRO_IDLE_CKEY_STP ,
   311 0031C 1823 C        	MOV	A,@CKEY_DEL
   312            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0031D 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0031E 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0031F 1E80     2     PAGE ( $ / 1024 ),
   313            C      M 	JPNC	PRO_IDLE_CKEY_DEL	;Delete all OLD message
       00320 0E03     1     JBS  _STATUS , C 
       00321 1737     1     JMP  PRO_IDLE_CKEY_DEL ,
   314            C        	
   315 00322 15AC C        	JMP 	MAIN_LOOP
   316            C        ;---------------------------------------
   317 00323      C        PRO_IDLE_BKEY_OGM:		;play OGM
   318 00323 18C1 C        	MOV	A,@CPLY_OGM
   319            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00324 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00325 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00326 1E80     2     PAGE ( $ / 1024 ),
   320            C        
   321 00327 172C C        	JMP 	PRO_IDLE_OGM
   322            C        ;---------------------------------------
   323 00328      C        PRO_IDLE_CKEY_OGM:		;Record OGM
   324 00328 18C0 C        	MOV	A,@CREC_OGM
   325            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00329 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       0032A 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0032B 1E80     2     PAGE ( $ / 1024 ),
   326            C        	
   327            C        	;JMP 	PRO_IDLE_OGM
   328 0032C      C        PRO_IDLE_OGM:
   329 0032C 180C C        	MOV	A,@CGOTO_OGM
   330            C      M 	LCALL	PUSH_PRO
                      2  M  PAGE #( PUSH_PRO ),
       0032D 1E8D     2     PAGE ( PUSH_PRO / 1024 ),
       0032E 1338     1     CALL ( PUSH_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       0032F 1E80     2     PAGE ( $ / 1024 ),
   331 00330 00E1 C        	CLR	B1_PRO_VAR
   332            C        
   333 00331 15AC C        	JMP 	MAIN_LOOP
   334            C        ;---------------------------------------
   335 00332      C        PRO_IDLE_CKEY_MMO:
   336 00332 18C2 C        	MOV	A,@CREC_MMO
   337            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00333 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00334 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00335 1E80     2     PAGE ( $ / 1024 ),
   338            C        
   339 00336 172C C        	JMP 	PRO_IDLE_OGM
   340            C        ;---------------------------------------
   341 00337      C        PRO_IDLE_CKEY_DEL:
   342            C        	
   343 00337 18C4 C        	MOV	A,@CDEL_ALL
   344            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00338 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00339 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0033A 1E80     2     PAGE ( $ / 1024 ),
   345            C        	
   346 0033B 172C C        	JMP 	PRO_IDLE_OGM	
   347            C        ;---------------------------------------
   348 0033C      C        PRO_IDLE_MKEY_PLY:
   349 0033C 18C3 C        	MOV	A,@CPLY_MSG
   350            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       0033D 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       0033E 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0033F 1E80     2     PAGE ( $ / 1024 ),
   351            C        	
   352 00340 1807 C        	MOV	A,@CGOTO_PLAY
   353            C      M 	LCALL	PUSH_PRO
                      2  M  PAGE #( PUSH_PRO ),
       00341 1E8D     2     PAGE ( PUSH_PRO / 1024 ),
       00342 1338     1     CALL ( PUSH_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       00343 1E80     2     PAGE ( $ / 1024 ),
   354 00344 00E1 C        	CLR	B1_PRO_VAR
   355            C        
   356 00345 15AC C        	JMP 	MAIN_LOOP
   357            C        ;-------------------------------------------------
   358 00346      C        PRO_IDLE_MKEY_STP:
   359            C        	
   360 00346 15AC C        	JMP 	MAIN_LOOP
   361            C        ;-------------------------------------------------
   362 00347      C        PRO_IDLE_MKEY_BOOK:
   363            C        	
   364 00347 18CC C        	MOV	A,@CMSG_BOOK
   365            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00348 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00349 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0034A 1E80     2     PAGE ( $ / 1024 ),
   366 0034B      C        PRO_IDLE_GOTOBOOK:
   367            C        		
   368 0034B 1804 C        	MOV	A,@CGOTO_BOOK
   369            C      M 	LCALL	PUSH_PRO
                      2  M  PAGE #( PUSH_PRO ),
       0034C 1E8D     2     PAGE ( PUSH_PRO / 1024 ),
       0034D 1338     1     CALL ( PUSH_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       0034E 1E80     2     PAGE ( $ / 1024 ),
   370 0034F 00E1 C        	CLR	B1_PRO_VAR
   371            C        
   372 00350 15AC C        	JMP 	MAIN_LOOP
   373            C        ;-------------------------------------------------
   374 00351      C        PRO_IDLE_MKEY_1M:
   375            C      M 	MOV	B1_MSG_N,@1
       00351 1801     1     MOV A,@( 1 )
       00352 0071     1     MOV  B1_MSG_N ,A
   376 00353 1759 C        	JMP 	PRO_IDLE_MKEY_M_LOOKUP
   377 00354      C        PRO_IDLE_MKEY_2M:
   378            C      M 	MOV	B1_MSG_N,@2
       00354 1802     1     MOV A,@( 2 )
       00355 0071     1     MOV  B1_MSG_N ,A
   379 00356 1759 C        	JMP 	PRO_IDLE_MKEY_M_LOOKUP
   380 00357      C        PRO_IDLE_MKEY_3M:
   381            C      M 	MOV	B1_MSG_N,@3
       00357 1803     1     MOV A,@( 3 )
       00358 0071     1     MOV  B1_MSG_N ,A
   382            C        	;JMP 	PRO_IDLE_MKEY_M_LOOKUP
   383 00359      C        PRO_IDLE_MKEY_M_LOOKUP:
   384 00359 18C6 C        	MOV	A,@CLOOK_NUM
   385            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       0035A 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       0035B 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0035C 1E80     2     PAGE ( $ / 1024 ),
   386            C        
   387 0035D 1806 C        	MOV	A,@CGOTO_STOR
   388            C      M 	LCALL	PUSH_PRO
                      2  M  PAGE #( PUSH_PRO ),
       0035E 1E8D     2     PAGE ( PUSH_PRO / 1024 ),
       0035F 1338     1     CALL ( PUSH_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       00360 1E80     2     PAGE ( $ / 1024 ),
   389 00361 00E1 C        	CLR	B1_PRO_VAR
   390            C        	
   391 00362 15AC C        	JMP 	MAIN_LOOP
   392            C        ;---------------------------------------
   393 00363      C        PRO_IDLE_POWERON:
   394 00363 0420 C        	MOV	A,B1_MSG
   395            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00364 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00365 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00366 1E80     2     PAGE ( $ / 1024 ),
   396 00367 176C C        	JMP	PRO_IDLE_MNU
   397 00368      C        PRO_IDLE_MKEY_MNU:
   398 00368 18CB C        	MOV	A,@CMSG_MENU
   399            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00369 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       0036A 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0036B 1E80     2     PAGE ( $ / 1024 ),
   400 0036C      C        PRO_IDLE_MNU:	
   401 0036C 1803 C        	MOV	A,@CGOTO_MENU
   402            C      M 	LCALL	PUSH_PRO
                      2  M  PAGE #( PUSH_PRO ),
       0036D 1E8D     2     PAGE ( PUSH_PRO / 1024 ),
       0036E 1338     1     CALL ( PUSH_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       0036F 1E80     2     PAGE ( $ / 1024 ),
   403 00370 00E1 C        	CLR	B1_PRO_VAR
   404            C        
   405 00371 15AC C        	JMP 	MAIN_LOOP
   406            C        ;---------------------------------------	
   407 00372      C        PRO_IDLE_NCID:			;New-CID exist and cooked
   408 00372 0420 C        	MOV	A,B1_MSG
   409            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00373 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00374 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00375 1E80     2     PAGE ( $ / 1024 ),
   410 00376 1780 C        	JMP	PRO_IDLE_GOTOCID
   411            C        ;---------------------------------------
   412 00377      C        PRO_IDLE_EDITCID:
   413 00377 0420 C        	MOV	A,B1_MSG
   414            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00378 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00379 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0037A 1E80     2     PAGE ( $ / 1024 ),
   415 0037B 174B C        	JMP	PRO_IDLE_GOTOBOOK
   416            C        ;---------------------------------------
   417 0037C      C        PRO_IDLE_MKEY_UP:
   418 0037C      C        PRO_IDLE_MKEY_DWN:
   419            C        	
   420 0037C 18CE C        	MOV	A,@CLOOK_CID
   421            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       0037D 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       0037E 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0037F 1E80     2     PAGE ( $ / 1024 ),
   422 00380      C        PRO_IDLE_GOTOCID:	
   423 00380 1801 C        	MOV	A,@CGOTO_CID
   424            C      M 	LCALL	PUSH_PRO
                      2  M  PAGE #( PUSH_PRO ),
       00381 1E8D     2     PAGE ( PUSH_PRO / 1024 ),
       00382 1338     1     CALL ( PUSH_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       00383 1E80     2     PAGE ( $ / 1024 ),
   425 00384 00E1 C        	CLR	B1_PRO_VAR
   426            C        
   427 00385 15AC C        	JMP 	MAIN_LOOP
   428            C        
   429            C        ;---------------------------------------
   430 00386      C        PRO_IDLE_MKEY_MTE:
   431 00386 18C5 C        	MOV	A,@CSTOR_NUM
   432            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00387 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00388 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00389 1E80     2     PAGE ( $ / 1024 ),
   433 0038A      C        PRO_IDLE_LOOKNUM:
   434 0038A 1806 C        	MOV	A,@CGOTO_STOR
   435            C      M 	LCALL	PUSH_PRO
                      2  M  PAGE #( PUSH_PRO ),
       0038B 1E8D     2     PAGE ( PUSH_PRO / 1024 ),
       0038C 1338     1     CALL ( PUSH_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       0038D 1E80     2     PAGE ( $ / 1024 ),
   436 0038E 00E1 C        	CLR	B1_PRO_VAR
   437            C        
   438 0038F 15AC C        	JMP 	MAIN_LOOP
   439            C        ;---------------------------------------
   440 00390      C        PRO_IDLE_MKEY_FLS:
   441 00390 0000 C        	NOP
   442 00391 15AC C        	JMP 	MAIN_LOOP
   443            C        ;---------------------------------------
   444 00392      C        PRO_IDLE_MKEY_RP:
   445 00392 18A6 C        	MOV	A,@CLOOK_DIAL			;Lookup dialled num
   446            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00393 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00394 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00395 1E80     2     PAGE ( $ / 1024 ),
   447            C        	
   448 00396 1780 C        	JMP 	PRO_IDLE_GOTOCID
   449            C        ;---------------------------------------
   450 00397      C        PRO_IDLE_DIAL:
   451 00397 0420 C        	MOV	A,B1_MSG
   452            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00398 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00399 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0039A 1E80     2     PAGE ( $ / 1024 ),
   453 0039B 17A0 C        	JMP	PRO_IDLE_PHONE
   454            C        ;-------------------
   455 0039C      C        PRO_IDLE_MKEY_SPK:
   456 0039C      C        PRO_IDLE_PHONEON:
   457 0039C 1894 C        	MOV	A,@CPHONE_ON
   458            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       0039D 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       0039E 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0039F 1E80     2     PAGE ( $ / 1024 ),
   459 003A0      C        PRO_IDLE_PHONE:	
   460 003A0 1805 C        	MOV	A,@CGOTO_PHONE
   461            C      M 	LCALL	PUSH_PRO
                      2  M  PAGE #( PUSH_PRO ),
       003A1 1E8D     2     PAGE ( PUSH_PRO / 1024 ),
       003A2 1338     1     CALL ( PUSH_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       003A3 1E80     2     PAGE ( $ / 1024 ),
   462 003A4 00E1 C        	CLR	B1_PRO_VAR
   463            C        
   464 003A5 15AC C        	JMP 	MAIN_LOOP
   465            C        ;---------------------------------------
   466 003A6      C        PRO_IDLE_HOOKOFF:
   467 003A6 1893 C        	MOV	A,@CHOOK_OFF
   468            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       003A7 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       003A8 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       003A9 1E80     2     PAGE ( $ / 1024 ),
   469 003AA 17A0 C        	JMP 	PRO_IDLE_PHONE
   470            C        ;---------------------------------------
   471 003AB      C        PRO_IDLE_MKEY_NUM:
   472 003AB 0071 C        	MOV	B1_MSG_N,A	;the key value
   473            C        	
   474 003AC 1896 C        	MOV	A,@CKEY_NUM
   475            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       003AD 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       003AE 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       003AF 1E80     2     PAGE ( $ / 1024 ),
   476            C        	
   477 003B0 17A0 C        	JMP 	PRO_IDLE_PHONE
   478            C        ;-------------------------------------------------------------------------------
   479            C        
   590                     ;-------------------------------------------------------------------------------
   591                     ;page1
   592                     INCLUDE		"key_det.dt"
     1            C        
     2            C        ORG	(1<<10)
     3            C        ;-------------------------------------------------------------------------------
     4            C        ;	B2_TMR_KEYSCAN(2..0) = 0/1/2/3/4/5/6/7 => Output : p6.0/12/3/4/5/6/7
     5            C        ;-------------------------------------------------------------------------------
     6 00400      C        INTKEYSCAN_OUT:
     7            C      M 	AND	_RE,@(0xFB)			; blank LCD
       00400 18FB     1     MOV A,@( 251 )
       00401 02CE     1     AND  _RE ,A
     8 00402 001E C        	IOR	_IOCE
     9 00403 1ADF C        	AND	A,@(0XDF)	;p6 as normal I/O port
    10 00404 000E C        	IOW	_IOCE
    11            C        	
    12 00405 0B89 C        	BS	_P9,6		;enable key scan
    13            C        
    14 00406 0803 C        	BC	_STATUS,C
    15            C      M 	MOV	TEMP0,@(0xff)
       00407 18FF     1     MOV A,@( 255 )
       00408 0055     1     MOV  TEMP0 ,A
    16            C      M 	ANDA	B2_TMR_KEYSCAN,@(0x07)
       00409 1807     1     MOV A,@( 7 )
       0040A 02B5     1     AND A, B2_TMR_KEYSCAN 
    17 0040B 0020 C        	TBL
    18 0040C 0655 C        	RRC	TEMP0
    19 0040D 0655 C        	RRC	TEMP0
    20 0040E 0655 C        	RRC	TEMP0
    21 0040F 0655 C        	RRC	TEMP0
    22 00410 0655 C        	RRC	TEMP0
    23 00411 0655 C        	RRC	TEMP0
    24 00412 0655 C        	RRC	TEMP0
    25 00413 0615 C        	RRCA	TEMP0
    26            C        	
    27 00414 0006 C        	IOW	_IOC6
    28 00415 0046 C        	MOV	_R6,A
    29            C        
    30 00416 0012 C        	RET
    31            C        ;---------------------------------------
    32 00417      C        INTKEYSCAN_IN:
    33            C      M 	MOV	TEMP0,@(BANK2+B2_KEY1_GET-1)
       00417 18A8     1     MOV A,@((( BANK2 + B2_KEY1_GET )- 1 ))
       00418 0055     1     MOV  TEMP0 ,A
    34 00419 0635 C        	RRCA	B2_TMR_KEYSCAN
    35 0041A 1A03 C        	AND	A,@(0x03)
    36 0041B 0020 C        	TBL
    37 0041C 0555 C        	INC	TEMP0
    38 0041D 0555 C        	INC	TEMP0
    39 0041E 0555 C        	INC	TEMP0
    40 0041F 0555 C        	INC	TEMP0
    41            C      M 	MOV	_RSR,TEMP0
       00420 0415     1     MOV A, TEMP0 
       00421 0044     1     MOV  _RSR ,A
    42            C        
    43            C      M 	JPB	B2_TMR_KEYSCAN,0,INTKEYSCANIN_L_NIBBLE
       00422 0C35     1     JBC  B2_TMR_KEYSCAN , 0 
       00423 1429     1     JMP  INTKEYSCANIN_L_NIBBLE ,
    44 00424      C        INTKEYSCANIN_H_NIBBLE:		;read the p7 low-nibble and stor it in R0 high-nibble
    45            C      M 	AND	_R0,@(0x0f)
       00424 180F     1     MOV A,@( 15 )
       00425 02C0     1     AND  _R0 ,A
    46 00426 0707 C        	SWAPA	_R7
    47 00427 1AF0 C        	AND	A,@(0xf0)
    48 00428 142D C        	JMP	INTKEYSCANIN_1
    49 00429      C        INTKEYSCANIN_L_NIBBLE:		;read the p7 low-nibble and stor it in R0 low-nibble
    50            C      M 	AND	_R0,@(0xf0)
       00429 18F0     1     MOV A,@( 240 )
       0042A 02C0     1     AND  _R0 ,A
    51            C      M 	ANDA	_R7,@(0x0f)
       0042B 180F     1     MOV A,@( 15 )
       0042C 0287     1     AND A, _R7 
    52 0042D      C        INTKEYSCANIN_1:
    53 0042D 0240 C        	OR	_R0,A
    54            C      M 	IOW	_IOC6,@(0xff)	;input port
       0042E 18FF     1     MOV A,@( 255 )
       0042F 0006     1     IOW  _IOC6 ,
    55            C        	
    56 00430 0989 C        	BC	_P9,6
    57            C        	
    58 00431 001E C        	IOR	_IOCE
    59 00432 1920 C        	OR	A,@(0x20)	;p6 as common output
    60 00433 000E C        	IOW	_IOCE
    61            C      M 	OR	_RE,@(0x06)			; open LCD
       00434 1806     1     MOV A,@( 6 )
       00435 024E     1     OR  _RE ,A
    62            C        ;---	
    63 00436 0012 C        	RET
    64            C        ;-------------------------------------------------------------------------------
    65            C        ;	input : ACC = Key value
    66            C        ;		temp1 = counter
    67            C        ;	output:	ACC = 字符码
    68            C        ;		temp1 = counter
    69            C        ;-------------------------------------------------------------------------------
    70 00437      C        GET_KEYCAHR:
    71 00437 0055 C        	MOV	TEMP0,A
    72 00438      C        GET_KEYCAHR_1:
    73 00438 0415 C        	MOV	A,TEMP0
    74 00439 1A1F C        	AND	A,@0X1F
    75            C      M 	MTBL
       0043A 0020     1     TBL 
             043A     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    76 0043B 14B1 C        	JMP	GET_KEYCAHR_RET	;0x00 SPACE
    77 0043C 14B1 C        	JMP	GET_KEYCAHR_RET	;0x01 !
    78 0043D 14B1 C        	JMP	GET_KEYCAHR_RET	;0x02 "
    79 0043E 14AE C        	JMP	KEYJIN_TAB	;0x03 #
    80 0043F 14B1 C        	JMP	GET_KEYCAHR_RET	;0x04 $
    81 00440 14B1 C        	JMP	GET_KEYCAHR_RET	;0x05 %
    82 00441 14B1 C        	JMP	GET_KEYCAHR_RET	;0x06 &
    83 00442 14B1 C        	JMP	GET_KEYCAHR_RET	;0x07 '
    84 00443 14B1 C        	JMP	GET_KEYCAHR_RET	;0x08 (
    85 00444 14B1 C        	JMP	GET_KEYCAHR_RET	;0x09 )
    86 00445 14A8 C        	JMP	KEYXIN_TAB	;0x0A *
    87 00446 14B1 C        	JMP	GET_KEYCAHR_RET	;0x0B +
    88 00447 14B1 C        	JMP	GET_KEYCAHR_RET	;0x0C ,
    89 00448 14B1 C        	JMP	GET_KEYCAHR_RET	;0x0D -
    90 00449 14B1 C        	JMP	GET_KEYCAHR_RET	;0x0E .
    91 0044A 14B1 C        	JMP	GET_KEYCAHR_RET	;0x0F /
    92 0044B 14A9 C        	JMP	KEY0_TAB	;0x10 0
    93 0044C 1455 C        	JMP	KEY1_TAB	;0x11 1
    94 0044D 1468 C        	JMP	KEY2_TAB	;0x12 2
    95 0044E 146F C        	JMP	KEY3_TAB	;0x13 3
    96 0044F 1476 C        	JMP	KEY4_TAB	;0x14 4
    97 00450 147D C        	JMP	KEY5_TAB	;0x15 5
    98 00451 1484 C        	JMP	KEY6_TAB	;0x16 6
    99 00452 148B C        	JMP	KEY7_TAB	;0x17 7
   100 00453 1496 C        	JMP	KEY8_TAB	;0x18 8
   101 00454 149D C        	JMP	KEY9_TAB	;0x19 9
   102            C        
   103            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   104 00455      C        KEY1_TAB:
   105            C        
   106 00455 0416 C        	MOV	A,TEMP1
   107 00456 1A0F C        	AND	A,@0X0F
   108            C      M 	MTBL
       00457 0020     1     TBL 
             0457     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   109 00458 1C11 C        	RETL	@CH_1		;1	;0
   110 00459 1C0F C        	RETL	@CH_SCH1	;/	;1
   111 0045A 1C0E C        	RETL	@CH_DOT		;.	;2
   112 0045B 1C0C C        	RETL	@CH_COMMA	;,	;3
   113 0045C 1C0D C        	RETL	@CH_AMPERE	;-	;4
   114 0045D 1C3F C        	RETL	@CH__		;_	;5
   115 0045E 1C08 C        	RETL	@CH_LEFTB	;(	;6
   116 0045F 1C09 C        	RETL	@CH_RIGHTB	;)	;7
   117 00460 1C1A C        	RETL	@CH_COLON	;:	;8
   118 00461 14AF C        	JMP	GET_KEYCAHR_2		;9
   119 00462 14AF C        	JMP	GET_KEYCAHR_2		;A
   120 00463 14AF C        	JMP	GET_KEYCAHR_2		;B
   121 00464 14AF C        	JMP	GET_KEYCAHR_2		;C
   122 00465 14AF C        	JMP	GET_KEYCAHR_2		;D
   123 00466 14AF C        	JMP	GET_KEYCAHR_2		;E
   124 00467 14AF C        	JMP	GET_KEYCAHR_2		;F
   125            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   126            C        ;---
   127 00468      C        KEY2_TAB:
   128 00468 0416 C        	MOV	A,TEMP1
   129 00469 1A03 C        	AND	A,@0X03
   130            C      M 	MTBL
       0046A 0020     1     TBL 
             046A     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   131 0046B 1C21 C        	RETL	@CH_A
   132 0046C 1C22 C        	RETL	@CH_B
   133 0046D 1C23 C        	RETL	@CH_C
   134 0046E 1C12 C        	RETL	@CH_2
   135            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   136            C        	;JMP	GET_KEYCAHR_2
   137            C        ;---
   138 0046F      C        KEY3_TAB:
   139 0046F 0416 C        	MOV	A,TEMP1
   140 00470 1A03 C        	AND	A,@0X03
   141            C      M 	MTBL
       00471 0020     1     TBL 
             0471     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   142 00472 1C24 C        	RETL	@CH_D
   143 00473 1C25 C        	RETL	@CH_E
   144 00474 1C26 C        	RETL	@CH_F
   145 00475 1C13 C        	RETL	@CH_3
   146            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   147            C        	;JMP	GET_KEYCAHR_2
   148            C        ;---
   149 00476      C        KEY4_TAB:
   150 00476 0416 C        	MOV	A,TEMP1
   151 00477 1A03 C        	AND	A,@0X03
   152            C      M 	MTBL
       00478 0020     1     TBL 
             0478     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   153 00479 1C27 C        	RETL	@CH_G
   154 0047A 1C28 C        	RETL	@CH_H
   155 0047B 1C29 C        	RETL	@CH_I
   156 0047C 1C14 C        	RETL	@CH_4
   157            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   158            C        	;JMP	GET_KEYCAHR_2
   159            C        ;---
   160 0047D      C        KEY5_TAB:
   161 0047D 0416 C        	MOV	A,TEMP1
   162 0047E 1A03 C        	AND	A,@0X03
   163            C      M 	MTBL
       0047F 0020     1     TBL 
             047F     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   164 00480 1C2A C        	RETL	@CH_J
   165 00481 1C2B C        	RETL	@CH_K
   166 00482 1C2C C        	RETL	@CH_L
   167 00483 1C15 C        	RETL	@CH_5
   168            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   169            C        	;JMP	GET_KEYCAHR_2
   170            C        ;---
   171 00484      C        KEY6_TAB:
   172 00484 0416 C        	MOV	A,TEMP1
   173 00485 1A03 C        	AND	A,@0X03
   174            C      M 	MTBL
       00486 0020     1     TBL 
             0486     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   175 00487 1C2D C        	RETL	@CH_M
   176 00488 1C2E C        	RETL	@CH_N
   177 00489 1C2F C        	RETL	@CH_O
   178 0048A 1C16 C        	RETL	@CH_6
   179            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   180            C        	;JMP	GET_KEYCAHR_2
   181            C        ;---
   182 0048B      C        KEY7_TAB:
   183 0048B 0416 C        	MOV	A,TEMP1
   184 0048C 1A07 C        	AND	A,@0X07
   185            C      M 	MTBL
       0048D 0020     1     TBL 
             048D     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   186 0048E 1C30 C        	RETL	@CH_P
   187 0048F 1C31 C        	RETL	@CH_Q
   188 00490 1C32 C        	RETL	@CH_R
   189 00491 1C33 C        	RETL	@CH_S
   190 00492 1C17 C        	RETL	@CH_7
   191 00493 14AF C        	JMP	GET_KEYCAHR_2
   192 00494 14AF C        	JMP	GET_KEYCAHR_2
   193 00495 14AF C        	JMP	GET_KEYCAHR_2
   194            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   195            C        ;---
   196 00496      C        KEY8_TAB:
   197 00496 0416 C        	MOV	A,TEMP1
   198 00497 1A03 C        	AND	A,@0X03
   199            C      M 	MTBL
       00498 0020     1     TBL 
             0498     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   200 00499 1C34 C        	RETL	@CH_T
   201 0049A 1C35 C        	RETL	@CH_U
   202 0049B 1C36 C        	RETL	@CH_V
   203 0049C 1C18 C        	RETL	@CH_8
   204            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   205            C        	;JMP	GET_KEYCAHR_2
   206            C        ;---
   207 0049D      C        KEY9_TAB:
   208 0049D 0416 C        	MOV	A,TEMP1
   209 0049E 1A07 C        	AND	A,@0X07
   210            C      M 	MTBL
       0049F 0020     1     TBL 
             049F     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   211 004A0 1C37 C        	RETL	@CH_W
   212 004A1 1C38 C        	RETL	@CH_X
   213 004A2 1C39 C        	RETL	@CH_Y
   214 004A3 1C3A C        	RETL	@CH_Z
   215 004A4 1C19 C        	RETL	@CH_9
   216 004A5 14AF C        	JMP	GET_KEYCAHR_2
   217 004A6 14AF C        	JMP	GET_KEYCAHR_2
   218 004A7 14AF C        	JMP	GET_KEYCAHR_2
   219            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   220            C        ;---
   221 004A8      C        KEYXIN_TAB:
   222 004A8 1C0A C        	RETL	@CH_XIN
   223            C        	;JMP	GET_KEYCAHR_2
   224            C        ;---
   225 004A9      C        KEY0_TAB:
   226 004A9 0416 C        	MOV	A,TEMP1
   227 004AA 1A01 C        	AND	A,@0X01
   228            C      M 	MTBL
       004AB 0020     1     TBL 
             04AB     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   229 004AC 1C10 C        	RETL	@CH_0
   230 004AD 1C00 C        	RETL	@CH_BLANK
   231            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   232            C        	;JMP	GET_KEYCAHR_2
   233            C        ;---
   234 004AE      C        KEYJIN_TAB:
   235 004AE 1C03 C        	RETL	@CH_JIN
   236            C        	;JMP	GET_KEYCAHR_2
   237 004AF      C        GET_KEYCAHR_2:
   238            C        
   239 004AF 00D6 C        	CLR	TEMP1
   240 004B0 1438 C        	JMP	GET_KEYCAHR_1
   241 004B1      C        GET_KEYCAHR_RET:
   242 004B1 1CFF C        	RETL	@CH_END
   243            C        ;-------------------------------------------------------------------------------
   244            C        ;	KEY_CHK
   245            C        ;	check key bitmap with specific row/col
   246            C        ;	input : ACCH(7..4)=row,ACCH(3..0)=col
   247            C        ;	output: _STATUS.C
   248            C        ;-------------------------------------------------------------------------------
   249 004B2      C        KEY_CHK:
   250 004B2 0011 C        	DISI
   251            C        	
   252 004B3 0055 C        	MOV	TEMP0,A
   253            C        	
   254 004B4 0404 C        	MOV 	A,_R4
   255 004B5 005B C        	MOV 	OLD_RAM,A	;PUSH _R4
   256            C        ;---
   257            C        ;---Get row	
   258 004B6 0715 C        	SWAPA	TEMP0
   259 004B7 1A0F C        	AND	A,@0X0F
   260 004B8 1FB0 C        	ADD	A,@(BANK2+B2_KEY1_VAL-1)
   261 004B9 0044 C        	MOV	_RSR,A
   262            C        
   263            C      M 	MOV	TEMP1,_R0	;The value with specific row
       004BA 0400     1     MOV A, _R0 
       004BB 0056     1     MOV  TEMP1 ,A
   264            C        	
   265 004BC 0415 C        	MOV	A,TEMP0
   266 004BD 1A07 C        	AND	A,@(0x07)
   267            C      M 	MTBL
       004BE 0020     1     TBL 
             04BE     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   268 004BF 06D6 C        	RLC	TEMP1
   269 004C0 06D6 C        	RLC	TEMP1
   270 004C1 06D6 C        	RLC	TEMP1
   271 004C2 06D6 C        	RLC	TEMP1
   272 004C3 06D6 C        	RLC	TEMP1
   273 004C4 06D6 C        	RLC	TEMP1
   274 004C5 06D6 C        	RLC	TEMP1
   275 004C6 06D6 C        	RLC	TEMP1
   276            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   277            C        ;---	
   278 004C7 041B C        	MOV 	A,OLD_RAM
   279 004C8 0044 C        	MOV 	_R4,A		;POP _R4
   280            C        	
   281 004C9 0013 C        	RETI
   282            C        ;-------------------------------------------------------------------------------
   283            C        ;	B2_KEYFLAG(bit4) - 有按键动作被扫描到
   284            C        ;	B2_KEYFLAG(bit5) - 有按键动作被扫描到并已通过防抖确认
   285            C        ;Note : 此处代码可大规模精减
   286            C        ;-------------------------------------------------------------------------------
   287            C        
   288 004CA      C        KEYSCAN_AFFIRM:
   289            C      M 	BANK	2
       004CA 0984     1     BC  _RSR , 6 
       004CB 0BC4     1     BS  _RSR , 7 
   290            C        ;---查是否有多键按下,是就退出
   291 004CC 00D6 C        	CLR	TEMP1
   292 004CD 0429 C        	MOV	A,B2_KEY1_GET
   293 004CE 113A C        	CALL	KEYSCAN_MUTIL_CHK
   294 004CF 1D02 C        	SUB	A,@2
   295            C      M 	JPNC	INTKEYSCAN_AFFIRM_END	;有两个或以上的键按下
       004D0 0E03     1     JBS  _STATUS , C 
       004D1 1539     1     JMP  INTKEYSCAN_AFFIRM_END ,
   296            C        
   297 004D2 042A C        	MOV	A,B2_KEY2_GET
   298 004D3 113A C        	CALL	KEYSCAN_MUTIL_CHK
   299 004D4 1D02 C        	SUB	A,@2
   300            C      M 	JPNC	INTKEYSCAN_AFFIRM_END	;有两个或以上的键按下
       004D5 0E03     1     JBS  _STATUS , C 
       004D6 1539     1     JMP  INTKEYSCAN_AFFIRM_END ,
   301            C        	
   302 004D7 042B C        	MOV	A,B2_KEY3_GET
   303 004D8 113A C        	CALL	KEYSCAN_MUTIL_CHK
   304 004D9 1D02 C        	SUB	A,@2
   305            C      M 	JPNC	INTKEYSCAN_AFFIRM_END	;有两个或以上的键按下
       004DA 0E03     1     JBS  _STATUS , C 
       004DB 1539     1     JMP  INTKEYSCAN_AFFIRM_END ,
   306            C        	
   307 004DC 042C C        	MOV	A,B2_KEY4_GET
   308 004DD 19F0 C        	OR	A,@0XF0		;!!!
   309 004DE 113A C        	CALL	KEYSCAN_MUTIL_CHK
   310 004DF 1D02 C        	SUB	A,@2
   311            C      M 	JPNC	INTKEYSCAN_AFFIRM_END	;有两个或以上的键按下
       004E0 0E03     1     JBS  _STATUS , C 
       004E1 1539     1     JMP  INTKEYSCAN_AFFIRM_END ,
   312            C        
   313            C      M 	JPNB	B2_KEYFLAG,5,KEYSCAN_AFFIRM_0
       004E2 0F77     1     JBS  B2_KEYFLAG , 5 
       004E3 14F0     1     JMP  KEYSCAN_AFFIRM_0 ,
   314            C        ;---有键按下且通过防抖确认
   315 004E4 0438 C        	MOV	A,B2_TMR_PLUSE_BAK
   316            C      M 	JPZ	KEYSCAN_AFFIRM_0
       004E5 0C83     1     JBC  _STATUS , Z 
       004E6 14F0     1     JMP  KEYSCAN_AFFIRM_0 ,
   317            C        	
   318 004E7 0439 C        	MOV	A,B2_TMR_PLUSE
   319            C      M 	JPNZ	KEYSCAN_AFFIRM_0
       004E8 0E83     1     JBS  _STATUS , Z 
       004E9 14F0     1     JMP  KEYSCAN_AFFIRM_0 ,
   320            C        	
   321 004EA 0438 C        	MOV	A,B2_TMR_PLUSE_BAK
   322 004EB 0079 C        	MOV	B2_TMR_PLUSE,A
   323            C        	
   324 004EC 1882 C        	MOV	A,@CMSG_CKEY
   325            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       004ED 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       004EE 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       004EF 1E81     2     PAGE ( $ / 1024 ),
   326 004F0      C        KEYSCAN_AFFIRM_0:
   327            C        ;---查是否有按键动作
   328            C      M 	XORA	B2_KEY1_GET,B2_KEY1_BAK
       004F0 042D     1     MOV A, B2_KEY1_BAK 
       004F1 0329     1     XOR A, B2_KEY1_GET 
   329            C        	;AND	A,@(0XFF)
   330            C      M 	JPNZ	KEYSCAN_AFFIRM_1
       004F2 0E83     1     JBS  _STATUS , Z 
       004F3 1503     1     JMP  KEYSCAN_AFFIRM_1 ,
   331            C      M 	XORA	B2_KEY2_GET,B2_KEY2_BAK
       004F4 042E     1     MOV A, B2_KEY2_BAK 
       004F5 032A     1     XOR A, B2_KEY2_GET 
   332            C        	;AND	A,@(0XFF)
   333            C      M 	JPNZ	KEYSCAN_AFFIRM_1
       004F6 0E83     1     JBS  _STATUS , Z 
       004F7 1503     1     JMP  KEYSCAN_AFFIRM_1 ,
   334            C      M 	XORA	B2_KEY3_GET,B2_KEY3_BAK
       004F8 042F     1     MOV A, B2_KEY3_BAK 
       004F9 032B     1     XOR A, B2_KEY3_GET 
   335            C        	;AND	A,@(0XFF)
   336            C      M 	JPNZ	KEYSCAN_AFFIRM_1
       004FA 0E83     1     JBS  _STATUS , Z 
       004FB 1503     1     JMP  KEYSCAN_AFFIRM_1 ,
   337            C      M 	XORA	B2_KEY4_GET,B2_KEY4_BAK
       004FC 0430     1     MOV A, B2_KEY4_BAK 
       004FD 032C     1     XOR A, B2_KEY4_GET 
   338 004FE 1A0F C        	AND	A,@(0X0F)
   339            C      M 	JPNZ	KEYSCAN_AFFIRM_1
       004FF 0E83     1     JBS  _STATUS , Z 
       00500 1503     1     JMP  KEYSCAN_AFFIRM_1 ,
   340            C        ;---查无按键动作
   341 00501 0937 C        	BC	B2_KEYFLAG,4
   342 00502 1539 C        	JMP	INTKEYSCAN_AFFIRM_END	;old-key-val = new-key-val
   343            C        ;---------------------------------------
   344 00503      C        KEYSCAN_AFFIRM_1:			;old-key-val != new-key-val
   345            C      M 	JPB	B2_KEYFLAG,4,KEYSCAN_AFFIRM_1_DELAY
       00503 0D37     1     JBC  B2_KEYFLAG , 4 
       00504 1509     1     JMP  KEYSCAN_AFFIRM_1_DELAY ,
   346            C        ;---查到有键从无到有按下/松开,设状态并开始计时
   347            C        
   348 00505 0B37 C        	BS	B2_KEYFLAG,4
   349            C      M 	MOV	B2_TMR_KEYAFFM,@CKEYTMR_UNIT	;防抖时间
       00506 180A     1     MOV A,@( CKEYTMR_UNIT )
       00507 0076     1     MOV  B2_TMR_KEYAFFM ,A
   350 00508 1539 C        	JMP	INTKEYSCAN_AFFIRM_END
   351            C        ;---------------------------------------
   352 00509      C        KEYSCAN_AFFIRM_1_DELAY:		;有按键被扫描到
   353 00509 00D6 C        	CLR	TEMP1
   354 0050A 0429 C        	MOV	A,B2_KEY1_GET
   355 0050B 113A C        	CALL	KEYSCAN_MUTIL_CHK
   356 0050C 042A C        	MOV	A,B2_KEY2_GET
   357 0050D 113A C        	CALL	KEYSCAN_MUTIL_CHK
   358 0050E 042B C        	MOV	A,B2_KEY3_GET
   359 0050F 113A C        	CALL	KEYSCAN_MUTIL_CHK
   360 00510 042C C        	MOV	A,B2_KEY4_GET
   361 00511 113A C        	CALL	KEYSCAN_MUTIL_CHK
   362            C      M 	JPZ	KEYSCAN_AFFIRM_1_BKEY	;按下的键值为零,也就是松开
       00512 0C83     1     JBC  _STATUS , Z 
       00513 1529     1     JMP  KEYSCAN_AFFIRM_1_BKEY ,
   363            C        
   364            C        ;---再次查到有键持续按下,查按下的时间
   365 00514 0436 C        	MOV	A,B2_TMR_KEYAFFM
   366            C        	;SUB	A,@0
   367            C      M 	JPNZ	INTKEYSCAN_AFFIRM_END
       00515 0E83     1     JBS  _STATUS , Z 
       00516 1539     1     JMP  INTKEYSCAN_AFFIRM_END ,
   368            C        ;---有按键被扫描到并已通过防抖确认
   369 00517 0429 C        	MOV	A,B2_KEY1_GET
   370 00518 006D C        	MOV	B2_KEY1_BAK,A
   371 00519 0071 C        	MOV	B2_KEY1_VAL,A
   372            C        
   373 0051A 042A C        	MOV	A,B2_KEY2_GET
   374 0051B 006E C        	MOV	B2_KEY2_BAK,A
   375 0051C 0072 C        	MOV	B2_KEY2_VAL,A
   376            C        	
   377 0051D 042B C        	MOV	A,B2_KEY3_GET
   378 0051E 006F C        	MOV	B2_KEY3_BAK,A
   379 0051F 0073 C        	MOV	B2_KEY3_VAL,A
   380            C        	
   381 00520 042C C        	MOV	A,B2_KEY4_GET
   382 00521 0070 C        	MOV	B2_KEY4_BAK,A
   383 00522 0074 C        	MOV	B2_KEY4_VAL,A
   384            C        
   385 00523 1880 C        	MOV	A,@CMSG_MKEY
   386            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00524 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00525 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00526 1E81     2     PAGE ( $ / 1024 ),
   387            C        	
   388 00527 0B77 C        	BS	B2_KEYFLAG,5
   389 00528 1539 C        	JMP	INTKEYSCAN_AFFIRM_END
   390 00529      C        KEYSCAN_AFFIRM_1_BKEY:		;break key
   391            C        ;---有按键松开被扫描到(无防抖)
   392            C      M 	MOV	B2_KEY1_BAK,B2_KEY1_GET
       00529 0429     1     MOV A, B2_KEY1_GET 
       0052A 006D     1     MOV  B2_KEY1_BAK ,A
   393            C      M 	MOV	B2_KEY2_BAK,B2_KEY2_GET
       0052B 042A     1     MOV A, B2_KEY2_GET 
       0052C 006E     1     MOV  B2_KEY2_BAK ,A
   394            C      M 	MOV	B2_KEY3_BAK,B2_KEY3_GET
       0052D 042B     1     MOV A, B2_KEY3_GET 
       0052E 006F     1     MOV  B2_KEY3_BAK ,A
   395            C      M 	MOV	B2_KEY4_BAK,B2_KEY4_GET
       0052F 042C     1     MOV A, B2_KEY4_GET 
       00530 0070     1     MOV  B2_KEY4_BAK ,A
   396            C        
   397            C      M 	LCALL	CLR_PTIMER
                      2  M  PAGE #( CLR_PTIMER ),
       00531 1E8D     2     PAGE ( CLR_PTIMER / 1024 ),
       00532 1370     1     CALL ( CLR_PTIMER % 1024 ),
                      2  M  PAGE #( $ ),
       00533 1E81     2     PAGE ( $ / 1024 ),
   398            C        	
   399 00534 1881 C        	MOV	A,@CMSG_BKEY
   400            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00535 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00536 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00537 1E81     2     PAGE ( $ / 1024 ),
   401            C        
   402            C        	
   403 00538 0977 C        	BC	B2_KEYFLAG,5
   404            C        		
   405 00539      C        INTKEYSCAN_AFFIRM_END:
   406            C        
   407 00539 0012 C        	RET
   408            C        ;-------------------------------------------------------------------------------
   409            C        ;	按键数计数:加入TEMP1中 --- Note:not from '0'
   410            C        ;	
   411            C        ;-------------------------------------------------------------------------------
   412 0053A      C        KEYSCAN_MUTIL_CHK:
   413 0053A 0055 C        	MOV	TEMP0,A
   414 0053B 1BFF C        	XOR	A,@0XFF
   415            C      M 	JPZ	KEYSCAN_MUTIL_CHK_END
       0053C 0C83     1     JBC  _STATUS , Z 
       0053D 1548     1     JMP  KEYSCAN_MUTIL_CHK_END ,
   416            C        	
   417 0053E 00D7 C        	CLR	TEMP2
   418            C        
   419            C      M 	CLRC
       0053F 0803     1     BC  _STATUS , C 
   420 00540      C        KEYSCAN_MUTIL_CHK_LOOP:
   421 00540 06D5 C        	RLC	TEMP0
   422 00541 0E03 C        	JBS	_STATUS,C
   423 00542 0556 C        	INC	TEMP1		;零计数
   424            C        	
   425 00543 0557 C        	INC	TEMP2		;循环计数,8次退出
   426 00544 0417 C        	MOV	A,TEMP2
   427 00545 1D08 C        	SUB	A,@8
   428            C      M 	JPNZ	KEYSCAN_MUTIL_CHK_LOOP
       00546 0E83     1     JBS  _STATUS , Z 
       00547 1540     1     JMP  KEYSCAN_MUTIL_CHK_LOOP ,
   429 00548      C        KEYSCAN_MUTIL_CHK_END:	
   430 00548 0416 C        	MOV	A,TEMP1
   431            C        
   432 00549 0012 C        	RET
   433            C        ;-------------------------------------------------------------------------------
   434            C        ;	KEY pressed or not
   435            C        ;	
   436            C        ;-------------------------------------------------------------------------------
   437 0054A      C        KEYPRESS_CHK:
   438 0054A 0404 C        	MOV	A,_R4
   439 0054B 005B C        	MOV	OLD_RAM,A		;PUSH _R4
   440            C        
   441            C      M 	BANK	2
       0054C 0984     1     BC  _RSR , 6 
       0054D 0BC4     1     BS  _RSR , 7 
   442            C        	
   443 0054E 0429 C        	MOV	A,B2_KEY1_GET
   444 0054F 1BFF C        	XOR	A,@0XFF
   445            C      M 	JPNZ	KEYPRESS_CHK_1
       00550 0E83     1     JBS  _STATUS , Z 
       00551 1562     1     JMP  KEYPRESS_CHK_1 ,
   446 00552 042A C        	MOV	A,B2_KEY2_GET
   447 00553 1BFF C        	XOR	A,@0XFF
   448            C      M 	JPNZ	KEYPRESS_CHK_1
       00554 0E83     1     JBS  _STATUS , Z 
       00555 1562     1     JMP  KEYPRESS_CHK_1 ,
   449 00556 042B C        	MOV	A,B2_KEY3_GET
   450 00557 1BFF C        	XOR	A,@0XFF
   451            C      M 	JPNZ	KEYPRESS_CHK_1
       00558 0E83     1     JBS  _STATUS , Z 
       00559 1562     1     JMP  KEYPRESS_CHK_1 ,
   452 0055A 042C C        	MOV	A,B2_KEY4_GET
   453 0055B 1BFF C        	XOR	A,@0XFF
   454            C      M 	JPNZ	KEYPRESS_CHK_1
       0055C 0E83     1     JBS  _STATUS , Z 
       0055D 1562     1     JMP  KEYPRESS_CHK_1 ,
   455            C        	
   456            C      M 	CLRC
       0055E 0803     1     BC  _STATUS , C 
   457 0055F      C        KEYPRESS_CHKEND:
   458 0055F 041B C        	MOV	A,OLD_RAM
   459 00560 0044 C        	MOV	_R4,A
   460            C        
   461 00561 0012 C        	RET
   462 00562      C        KEYPRESS_CHK_1:
   463            C      M 	SETC
       00562 0A03     1     BS  _STATUS , C 
   464 00563 155F C        	JMP	KEYPRESS_CHKEND
   465            C        ;-------------------------------------------------------------------------------
   593                     INCLUDE		"CidRaw.dt"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;	ReceiveCidData
     3            C        ;	Input :
     4            C        ;	Output: 
     5            C        ;       Output:	C = 0 - no CID
     6            C        ;		C = 1 -  Cid data ready
     7            C        ;			ACCH = 1 - FSK
     8            C        ;			ACCH = 2 - DTMF
     9            C        ;-------------------------------------------------------------------------------
    10 00564      C        CidRawData:
    11            C        ;---clean buffer	
    12            C        	; clear CidBuffer=0
    13            C        ;---initial some data
    14            C      M 	BANK	3
       00564 0B84     1     BS  _RSR , 6 
       00565 0BC4     1     BS  _RSR , 7 
    15            C        
    16            C      M 	MOV	B3_CidTimer,@CTMR4S	; time out= 4000ms
       00566 1840     1     MOV A,@( CTMR4S )
       00567 0060     1     MOV  B3_CIDTIMER ,A
    17 00568      C        CidRawData_01:
    18 00568 0420 C        	MOV	A,B3_CidTimer
    19            C      M 	JPZ	CidRawData_Stop
       00569 0C83     1     JBC  _STATUS , Z 
       0056A 1609     1     JMP  CIDRAWDATA_STOP ,
    20            C        	
    21            C      M 	BANK	2
       0056B 0984     1     BC  _RSR , 6 
       0056C 0BC4     1     BS  _RSR , 7 
    22            C      M 	JPB	B2_RING_FLAG,5,CidRawData_Stop	;Ring Off
       0056D 0D7B     1     JBC  B2_RING_FLAG , 5 
       0056E 1609     1     JMP  CIDRAWDATA_STOP ,
    23            C      M 	JPB	B2_RING_FLAG,6,CidRawData_Stop	;Ring High
       0056F 0DBB     1     JBC  B2_RING_FLAG , 6 
       00570 1609     1     JMP  CIDRAWDATA_STOP ,
    24            C      M 	JPB	B2_RING_FLAG,7,CidRawData_Stop	;Ring Low
       00571 0DFB     1     JBC  B2_RING_FLAG , 7 
       00572 1609     1     JMP  CIDRAWDATA_STOP ,
    25            C        	
    26            C      M 	LCALL	GET_RESPOND
                      2  M  PAGE #( GET_RESPOND ),
       00573 1E83     2     PAGE ( GET_RESPOND / 1024 ),
       00574 13E1     1     CALL ( GET_RESPOND % 1024 ),
                      2  M  PAGE #( $ ),
       00575 1E81     2     PAGE ( $ / 1024 ),
    27            C      M 	JPB	TEMP1,6,CidRawData_Cs	; Check if detect Channel seizer ?
       00576 0D96     1     JBC  TEMP1 , 6 
       00577 158C     1     JMP  CIDRAWDATA_CS ,
    28            C      M 	JPB	TEMP1,5,CidRawData_Ms	; Check if detect Mark signal ?
       00578 0D56     1     JBC  TEMP1 , 5 
       00579 1591     1     JMP  CIDRAWDATA_MS ,
    29            C      M 	JPB	TEMP1,4,CidRawData_Fsk
       0057A 0D16     1     JBC  TEMP1 , 4 
       0057B 159D     1     JMP  CIDRAWDATA_FSK ,
    30            C        	
    31            C      M 	LCALL	DTMF_CHK
                      2  M  PAGE #( DTMF_CHK ),
       0057C 1E82     2     PAGE ( DTMF_CHK / 1024 ),
       0057D 1303     1     CALL ( DTMF_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0057E 1E81     2     PAGE ( $ / 1024 ),
    32            C      M 	JPC	CidRawData_DTMF
       0057F 0C03     1     JBC  _STATUS , C 
       00580 160D     1     JMP  CIDRAWDATA_DTMF ,
    33            C      M 	BANK	3
       00581 0B84     1     BS  _RSR , 6 
       00582 0BC4     1     BS  _RSR , 7 
    34            C        		
    35            C      M 	PAGE	#(IIC)
       00583 1E83     1     PAGE ( IIC / 1024 ),
    36 00584 00D5 C        	CLR	TEMP0			;0X5000
    37            C      M 	MOV	TEMP1,@0X50
       00585 1850     1     MOV A,@( 80 )
       00586 0056     1     MOV  TEMP1 ,A
    38 00587 13CA C        	CALL	STOR_COMMAND
    39 00588 1344 C        	CALL	SEND2B_COMMAND
    40 00589 13AE C        	CALL	RECE2B_RESPOND
    41            C      M 	PAGE	#($)
       0058A 1E81     1     PAGE ( $ / 1024 ),
    42 0058B 1568 C        	JMP	CidRawData_01
    43 0058C      C        CidRawData_Cs:
    44            C      M 	MOV	TEMP0,@0X02		;0X5002
       0058C 1802     1     MOV A,@( 2 )
       0058D 0055     1     MOV  TEMP0 ,A
    45            C      M 	MOV	TEMP1,@0X50
       0058E 1850     1     MOV A,@( 80 )
       0058F 0056     1     MOV  TEMP1 ,A
    46            C        
    47 00590 1595 C        	JMP	CidRawData_Com
    48 00591      C        CidRawData_Ms:
    49            C      M 	MOV	TEMP0,@0X03		;0X5003
       00591 1803     1     MOV A,@( 3 )
       00592 0055     1     MOV  TEMP0 ,A
    50            C      M 	MOV	TEMP1,@0X50
       00593 1850     1     MOV A,@( 80 )
       00594 0056     1     MOV  TEMP1 ,A
    51            C        
    52 00595      C        CidRawData_Com:
    53            C        
    54            C      M 	PAGE	#(IIC)
       00595 1E83     1     PAGE ( IIC / 1024 ),
    55 00596 13CA C        	CALL	STOR_COMMAND
    56 00597 1344 C        	CALL	SEND2B_COMMAND
    57 00598 13AE C        	CALL	RECE2B_RESPOND
    58 00599 13E1 C        	CALL	GET_RESPOND
    59            C      M 	PAGE	#($)	
       0059A 1E81     1     PAGE ( $ / 1024 ),
    60            C      M 	JPNB	TEMP1,4,CidRawData_01	; FSK data ready ?
       0059B 0F16     1     JBS  TEMP1 , 4 
       0059C 1568     1     JMP  CIDRAWDATA_01 ,
    61            C        
    62 0059D      C        CidRawData_Fsk:
    63 0059D 00E1 C        	CLR	B3_CidCheckSum
    64 0059E 127A C        	CALL	CLRCidData
    65            C        	
    66            C      M 	MOV	TEMP0,@0X04		;0X5004
       0059F 1804     1     MOV A,@( 4 )
       005A0 0055     1     MOV  TEMP0 ,A
    67            C      M 	MOV	TEMP1,@0X50
       005A1 1850     1     MOV A,@( 80 )
       005A2 0056     1     MOV  TEMP1 ,A
    68            C      M 	PAGE	#(IIC)
       005A3 1E83     1     PAGE ( IIC / 1024 ),
    69 005A4 13CA C        	CALL	STOR_COMMAND
    70 005A5 1344 C        	CALL	SEND2B_COMMAND
    71 005A6 13AE C        	CALL	RECE2B_RESPOND
    72 005A7 13E1 C        	CALL	GET_RESPOND
    73            C      M 	PAGE	#($)
       005A8 1E81     1     PAGE ( $ / 1024 ),
    74            C        ;---First-byte(TYPE)
    75 005A9 0415 C        	MOV	A,TEMP0
    76 005AA 1D04 C        	SUB	A,@0X04
    77            C      M 	JPZ	VaildType	;header=04 single message data format
       005AB 0C83     1     JBC  _STATUS , Z 
       005AC 15BA     1     JMP  VAILDTYPE ,
    78            C        	
    79 005AD 0415 C        	MOV	A,TEMP0
    80 005AE 1D06 C        	SUB	A,@0X06
    81            C      M 	JPZ	VaildType	;header=06
       005AF 0C83     1     JBC  _STATUS , Z 
       005B0 15BA     1     JMP  VAILDTYPE ,
    82            C        	
    83 005B1 0415 C        	MOV	A,TEMP0
    84 005B2 1D80 C        	SUB	A,@0X80
    85            C      M 	JPZ	VaildType	;header=80 multi-message data format
       005B3 0C83     1     JBC  _STATUS , Z 
       005B4 15BA     1     JMP  VAILDTYPE ,
    86            C        	
    87 005B5 0415 C        	MOV	A,TEMP0
    88 005B6 1D82 C        	SUB	A,@0X82
    89            C      M 	JPZ	VaildType  	;header=82
       005B7 0C83     1     JBC  _STATUS , Z 
       005B8 15BA     1     JMP  VAILDTYPE ,
    90            C        
    91 005B9 1568 C                JMP	CidRawData_01
    92 005BA      C        VaildType:
    93 005BA 0415 C        	MOV	A,TEMP0
    94 005BB 1252 C        	CALL	SaveCidData
    95            C        
    96            C      M 	MOV	B3_CidTimer,@CTMR2S	; time out= 2s
       005BC 1820     1     MOV A,@( CTMR2S )
       005BD 0060     1     MOV  B3_CIDTIMER ,A
    97 005BE      C        CidRawData_03:		;Second-byte(length)
    98 005BE 0420 C        	MOV	A,B3_CidTimer
    99            C      M 	JPZ	CidRawData_Stop
       005BF 0C83     1     JBC  _STATUS , Z 
       005C0 1609     1     JMP  CIDRAWDATA_STOP ,
   100            C        
   101            C      M 	LCALL	GET_RESPOND
                      2  M  PAGE #( GET_RESPOND ),
       005C1 1E83     2     PAGE ( GET_RESPOND / 1024 ),
       005C2 13E1     1     CALL ( GET_RESPOND % 1024 ),
                      2  M  PAGE #( $ ),
       005C3 1E81     2     PAGE ( $ / 1024 ),
   102            C      M 	JPB	TEMP1,4,CidRawData_031	;resp.12
       005C4 0D16     1     JBC  TEMP1 , 4 
       005C5 15CF     1     JMP  CIDRAWDATA_031 ,
   103            C        	
   104 005C6 00D5 C        	CLR	TEMP0			;0X5000
   105            C      M 	MOV	TEMP1,@0X50
       005C7 1850     1     MOV A,@( 80 )
       005C8 0056     1     MOV  TEMP1 ,A
   106            C      M 	PAGE	#(IIC)
       005C9 1E83     1     PAGE ( IIC / 1024 ),
   107 005CA 13CA C        	CALL	STOR_COMMAND
   108 005CB 1344 C        	CALL	SEND2B_COMMAND
   109 005CC 13AE C        	CALL	RECE2B_RESPOND
   110            C        	;CALL	GET_RESPOND
   111            C      M 	PAGE	#($)	
       005CD 1E81     1     PAGE ( $ / 1024 ),
   112 005CE 15BE C        	JMP	CidRawData_03
   113            C        
   114 005CF      C        CidRawData_031:		;Get and stor lenght
   115            C      M 	MOV	TEMP0,@0X04		;0X5004
       005CF 1804     1     MOV A,@( 4 )
       005D0 0055     1     MOV  TEMP0 ,A
   116            C      M 	MOV	TEMP1,@0X50
       005D1 1850     1     MOV A,@( 80 )
       005D2 0056     1     MOV  TEMP1 ,A
   117            C      M 	PAGE	#(IIC)
       005D3 1E83     1     PAGE ( IIC / 1024 ),
   118 005D4 13CA C        	CALL	STOR_COMMAND
   119 005D5 1344 C        	CALL	SEND2B_COMMAND
   120 005D6 13AE C        	CALL	RECE2B_RESPOND
   121 005D7 13E1 C        	CALL	GET_RESPOND
   122            C      M 	PAGE	#($)
       005D8 1E81     1     PAGE ( $ / 1024 ),
   123            C        	
   124 005D9 0515 C        	INCA	TEMP0
   125 005DA 0062 C        	MOV	B3_CidLength,A
   126            C        	
   127 005DB 0415 C        	MOV	A,TEMP0
   128 005DC 1252 C        	CALL	SaveCidData
   129            C        	
   130 005DD 0422 C        	MOV	A,B3_CidLength
   131 005DE 1D40 C        	SUB	A,@0X40
   132            C      M 	JPNC	CidRawData_Error
       005DF 0E03     1     JBS  _STATUS , C 
       005E0 1609     1     JMP  CIDRAWDATA_ERROR ,
   133 005E1      C        CidRawData_Loop:
   134            C      M 	MOV	B3_CidTimer,@CTMR2S		; time out 2sec
       005E1 1820     1     MOV A,@( CTMR2S )
       005E2 0060     1     MOV  B3_CIDTIMER ,A
   135 005E3      C        CidRawData_04:
   136 005E3 0420 C        	MOV	A,B3_CidTimer
   137            C      M 	JPZ	CidRawData_Stop
       005E4 0C83     1     JBC  _STATUS , Z 
       005E5 1609     1     JMP  CIDRAWDATA_STOP ,
   138            C        
   139            C      M 	LCALL	GET_RESPOND
                      2  M  PAGE #( GET_RESPOND ),
       005E6 1E83     2     PAGE ( GET_RESPOND / 1024 ),
       005E7 13E1     1     CALL ( GET_RESPOND % 1024 ),
                      2  M  PAGE #( $ ),
       005E8 1E81     2     PAGE ( $ / 1024 ),
   140            C      M 	JPB	TEMP1,4,CidRawData_041	;resp.12
       005E9 0D16     1     JBC  TEMP1 , 4 
       005EA 15F6     1     JMP  CIDRAWDATA_041 ,
   141            C        	
   142            C      M 	MOV	TEMP0,@0X00		;0X5000
       005EB 1800     1     MOV A,@( 0 )
       005EC 0055     1     MOV  TEMP0 ,A
   143            C      M 	MOV	TEMP1,@0X50
       005ED 1850     1     MOV A,@( 80 )
       005EE 0056     1     MOV  TEMP1 ,A
   144            C      M 	PAGE	#(IIC)
       005EF 1E83     1     PAGE ( IIC / 1024 ),
   145 005F0 13CA C        	CALL	STOR_COMMAND
   146 005F1 1344 C        	CALL	SEND2B_COMMAND
   147 005F2 13AE C        	CALL	RECE2B_RESPOND
   148            C      M 	PAGE	#($)
       005F3 1E81     1     PAGE ( $ / 1024 ),
   149 005F4 0000 C        	NOP
   150 005F5 15E3 C        	JMP	CidRawData_04	;resp.12
   151            C        
   152 005F6      C        CidRawData_041:	
   153            C      M 	MOV	TEMP0,@0X04		;0X5004
       005F6 1804     1     MOV A,@( 4 )
       005F7 0055     1     MOV  TEMP0 ,A
   154            C      M 	MOV	TEMP1,@0X50
       005F8 1850     1     MOV A,@( 80 )
       005F9 0056     1     MOV  TEMP1 ,A
   155            C      M 	PAGE	#(IIC)
       005FA 1E83     1     PAGE ( IIC / 1024 ),
   156 005FB 13CA C        	CALL	STOR_COMMAND
   157 005FC 1344 C        	CALL	SEND2B_COMMAND
   158 005FD 13AE C        	CALL	RECE2B_RESPOND
   159 005FE 13E1 C        	CALL	GET_RESPOND
   160            C      M 	PAGE	#($)
       005FF 1E81     1     PAGE ( $ / 1024 ),
   161 00600 0415 C        	MOV	A,TEMP0
   162 00601 1252 C        	CALL	SaveCidData
   163            C        	
   164 00602 01E2 C        	DEC	B3_CidLength
   165 00603 0422 C        	MOV	A,B3_CidLength
   166            C      M 	JPNZ	CidRawData_Loop
       00604 0E83     1     JBS  _STATUS , Z 
       00605 15E1     1     JMP  CIDRAWDATA_LOOP ,
   167            C        
   168 00606 0421 C        	MOV	A,B3_CidCheckSum
   169            C      M 	JPZ	CidRawData_FSKOK
       00607 0C83     1     JBC  _STATUS , Z 
       00608 160B     1     JMP  CIDRAWDATA_FSKOK ,
   170 00609      C        CidRawData_Error:
   171 00609      C        CidRawData_Stop:
   172            C        ;	CLR	TEMP0		; Stop line monitor mode
   173            C        ;	MOV	TEMP1,@0X50
   174            C        ;	PAGE	#(IIC)
   175            C        ;	CALL	STOR_COMMAND
   176            C        ;	CALL	SEND2B_COMMAND
   177            C        ;	CALL	RECE2B_RESPOND
   178            C        ;	CALL	GET_RESPOND
   179            C        ;	PAGE	#($)	
   180            C        	
   181            C      M 	CLRC			;Cid data not ready
       00609 0803     1     BC  _STATUS , C 
   182            C        	
   183 0060A 1C00 C        	RETL	@0		;Error
   184            C        
   185 0060B      C        CidRawData_FSKOK:	
   186            C        ;	MOV	TEMP0,@0X01	; Stop line monitor mode
   187            C        ;	MOV	TEMP1,@0X50
   188            C        ;	PAGE	#(IIC)
   189            C        ;	CALL	STOR_COMMAND
   190            C        ;	CALL	SEND2B_COMMAND
   191            C        ;	CALL	RECE2B_RESPOND
   192            C        ;	CALL	GET_RESPOND
   193            C        ;	PAGE	#($)	
   194            C        		
   195            C      M 	SETC			;Cid data ready
       0060B 0A03     1     BS  _STATUS , C 
   196 0060C 1C01 C        	RETL	@1
   197            C        ;---------------------------------------
   198 0060D      C        CidRawData_DTMF:
   199 0060D 1821 C        	MOV	A,@NUM_A
   200 0060E 0129 C        	SUB	A,B1_DTMF_VAL
   201            C      M 	JPNC	CidRawData_DTMFERR	;Less than 0x0A
       0060F 0E03     1     JBS  _STATUS , C 
       00610 164F     1     JMP  CIDRAWDATA_DTMFERR ,
   202            C        	
   203 00611 0429 C        	MOV	A,B1_DTMF_VAL
   204 00612 1D24 C        	SUB	A,@NUM_D
   205            C      M 	JPNC	CidRawData_DTMFERR	;More than 0x0D
       00613 0E03     1     JBS  _STATUS , C 
       00614 164F     1     JMP  CIDRAWDATA_DTMFERR ,
   206            C        ;CidRawData_DTMF_A:
   207            C        ;CidRawData_DTMF_B:
   208            C        ;CidRawData_DTMF_C:
   209            C        ;CidRawData_DTMF_D:
   210 00615      C        CidRawData_DTMFSTART:
   211            C      M 	BANK	3
       00615 0B84     1     BS  _RSR , 6 
       00616 0BC4     1     BS  _RSR , 7 
   212 00617 00E1 C        	CLR	B3_CidCheckSum
   213            C      M 	MOV	B3_CidTimer,@CTMR2S	; time out 2sec
       00618 1820     1     MOV A,@( CTMR2S )
       00619 0060     1     MOV  B3_CIDTIMER ,A
   214 0061A 127A C        	CALL	CLRCidData
   215            C      M 	BANK	1
       0061B 0B84     1     BS  _RSR , 6 
       0061C 09C4     1     BC  _RSR , 7 
   216 0061D 0429 C        	MOV	A,B1_DTMF_VAL
   217 0061E 1252 C        	CALL	SaveCidData
   218 0061F      C        CidRawData_DTMF_LOOP:
   219            C      M 	BANK	3
       0061F 0B84     1     BS  _RSR , 6 
       00620 0BC4     1     BS  _RSR , 7 
   220 00621 0420 C        	MOV	A,B3_CidTimer
   221            C      M 	JPZ	CidRawData_DTMFTMROUT
       00622 0C83     1     JBC  _STATUS , Z 
       00623 164B     1     JMP  CIDRAWDATA_DTMFTMROUT ,
   222            C        	
   223 00624 00D5 C        	CLR	TEMP0			;line monitor mode
   224            C      M 	MOV	TEMP1,@0X50
       00625 1850     1     MOV A,@( 80 )
       00626 0056     1     MOV  TEMP1 ,A
   225            C      M 	PAGE	#(IIC)
       00627 1E83     1     PAGE ( IIC / 1024 ),
   226 00628 13CA C        	CALL	STOR_COMMAND
   227 00629 1344 C        	CALL	SEND2B_COMMAND
   228 0062A 13AE C        	CALL	RECE2B_RESPOND
   229 0062B 13E1 C        	CALL	GET_RESPOND
   230            C      M 	PAGE	#($)	
       0062C 1E81     1     PAGE ( $ / 1024 ),
   231            C      M 	LCALL	DTMF_CHK
                      2  M  PAGE #( DTMF_CHK ),
       0062D 1E82     2     PAGE ( DTMF_CHK / 1024 ),
       0062E 1303     1     CALL ( DTMF_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0062F 1E81     2     PAGE ( $ / 1024 ),
   232            C      M 	JPNC	CidRawData_DTMF_LOOP
       00630 0E03     1     JBS  _STATUS , C 
       00631 161F     1     JMP  CIDRAWDATA_DTMF_LOOP ,
   233            C        	
   234 00632 0429 C        	MOV	A,B1_DTMF_VAL
   235 00633 1252 C        	CALL	SaveCidData
   236            C        	
   237            C      M 	BANK	1
       00634 0B84     1     BS  _RSR , 6 
       00635 09C4     1     BC  _RSR , 7 
   238 00636 0429 C        	MOV	A,B1_DTMF_VAL	;C End
   239 00637 1D23 C        	SUB	A,@NUM_C
   240            C      M 	JPZ	CidRawData_DTMFOK
       00638 0C83     1     JBC  _STATUS , Z 
       00639 164D     1     JMP  CIDRAWDATA_DTMFOK ,
   241 0063A 0429 C        	MOV	A,B1_DTMF_VAL	;# End
   242 0063B 1D03 C        	SUB	A,@NUM_JIN
   243            C      M 	JPZ	CidRawData_DTMFOK
       0063C 0C83     1     JBC  _STATUS , Z 
       0063D 164D     1     JMP  CIDRAWDATA_DTMFOK ,
   244            C        	
   245 0063E 0429 C        	MOV	A,B1_DTMF_VAL	;A restart
   246 0063F 1D21 C        	SUB	A,@NUM_A
   247            C      M 	JPZ	CidRawData_DTMFSTART
       00640 0C83     1     JBC  _STATUS , Z 
       00641 1615     1     JMP  CIDRAWDATA_DTMFSTART ,
   248 00642 0429 C        	MOV	A,B1_DTMF_VAL	;B restart
   249 00643 1D22 C        	SUB	A,@NUM_B
   250            C      M 	JPZ	CidRawData_DTMFSTART
       00644 0C83     1     JBC  _STATUS , Z 
       00645 1615     1     JMP  CIDRAWDATA_DTMFSTART ,
   251 00646 0429 C        	MOV	A,B1_DTMF_VAL	;D restart
   252 00647 1D24 C        	SUB	A,@NUM_D
   253            C      M 	JPZ	CidRawData_DTMFSTART
       00648 0C83     1     JBC  _STATUS , Z 
       00649 1615     1     JMP  CIDRAWDATA_DTMFSTART ,
   254            C        	
   255 0064A 161F C        	JMP	CidRawData_DTMF_LOOP
   256 0064B      C        CidRawData_DTMFTMROUT:
   257 0064B 1823 C        	MOV	A,@NUM_C	;End with "C"
   258 0064C 1252 C        	CALL	SaveCidData
   259            C        	;JMP	CidRawData_DTMFOK
   260            C        ;-------------------
   261 0064D      C        CidRawData_DTMFOK:
   262            C        	
   263            C        ;	MOV	TEMP0,@0X01	; Stop line monitor mode
   264            C        ;	MOV	TEMP1,@0X50
   265            C        ;	PAGE	#(IIC)
   266            C        ;	CALL	STOR_COMMAND
   267            C        ;	CALL	SEND2B_COMMAND
   268            C        ;	CALL	RECE2B_RESPOND
   269            C        ;	CALL	GET_RESPOND
   270            C        ;	PAGE	#($)	
   271            C        	
   272            C      M 	SETC			;Cid data ready
       0064D 0A03     1     BS  _STATUS , C 
   273 0064E 1C02 C        	RETL	@2
   274            C        
   275            C        ;-------------------	
   276 0064F      C        CidRawData_DTMFERR:	
   277            C      M 	BANK	3
       0064F 0B84     1     BS  _RSR , 6 
       00650 0BC4     1     BS  _RSR , 7 
   278 00651 1568 C        	JMP	CidRawData_01
   279            C        ;-------------------------------------------------------------------------------
   280 00652      C        SaveCidData:
   281 00652 0055 C        	MOV	TEMP0,A
   282            C      M 	BLOCK	2
       00653 1804     1     MOV A,@((( 2 << 1 )+ VALUE_IOCA ))
       00654 000A     1     IOW  _IOCA ,
   283            C      M 	BANK	3
       00655 0B84     1     BS  _RSR , 6 
       00656 0BC4     1     BS  _RSR , 7 
   284 00657 1800 C        	MOV	A,@CID_ZONE_START
   285 00658 004C C        	MOV	_RC,A
   286 00659 040D C        	MOV	A,_RD		;Offset address
   287 0065A 1F10 C        	ADD	A,@CID_TYPE	;Start address
   288 0065B 004C C        	MOV	_RC,A
   289 0065C 0415 C        	MOV	A,TEMP0
   290 0065D 004D C        	MOV	_RD,A
   291            C        
   292 0065E 03E1 C        	ADD	B3_CidCheckSum,A	;Chksum
   293            C        	
   294 0065F 1800 C        	MOV	A,@CID_ZONE_START
   295 00660 004C C        	MOV	_RC,A
   296 00661 054D C        	INC	_RD
   297            C        	
   298 00662 0012 C        	RET
   299            C        ;-------------------------------------------------------------------------------
   300 00663      C        GetCidData:		;Don't use TEMP0
   301            C      M 	BLOCK	2
       00663 1804     1     MOV A,@((( 2 << 1 )+ VALUE_IOCA ))
       00664 000A     1     IOW  _IOCA ,
   302            C        	
   303 00665 1801 C        	MOV	A,@(CID_ZONE_START+1)
   304 00666 004C C        	MOV	_RC,A
   305 00667 040D C        	MOV	A,_RD
   306 00668 0056 C        	MOV	TEMP1,A		;Offset address
   307            C        	
   308 00669 1800 C        	MOV	A,@CID_ZONE_START
   309 0066A 004C C        	MOV	_RC,A
   310 0066B 040D C        	MOV	A,_RD
   311 0066C 0116 C        	SUB	A,TEMP1
   312            C      M 	JPZ	GetCidData_NoData
       0066D 0C83     1     JBC  _STATUS , Z 
       0066E 1678     1     JMP  GETCIDDATA_NODATA ,
   313            C        ;---		
   314 0066F 1801 C        	MOV	A,@(CID_ZONE_START+1)
   315 00670 004C C        	MOV	_RC,A
   316 00671 054D C        	INC	_RD
   317            C        
   318 00672 0416 C        	MOV	A,TEMP1		;Offset address
   319 00673 1F10 C        	ADD	A,@CID_TYPE	;Start address
   320 00674 004C C        	MOV	_RC,A
   321 00675 040D C        	MOV	A,_RD
   322            C        
   323            C      M 	SETC
       00676 0A03     1     BS  _STATUS , C 
   324            C        	
   325 00677 0012 C        	RET
   326 00678      C        GetCidData_NoData:
   327            C      M 	CLRC
       00678 0803     1     BC  _STATUS , C 
   328 00679 0012 C        	RET
   329            C        
   330 0067A      C        CLRCidData:
   331            C      M 	BLOCK	2
       0067A 1804     1     MOV A,@((( 2 << 1 )+ VALUE_IOCA ))
       0067B 000A     1     IOW  _IOCA ,
   332 0067C 1800 C        	MOV	A,@CID_ZONE_START
   333 0067D 004C C        	MOV	_RC,A
   334 0067E 00CD C        	CLR	_RD
   335            C        
   336 0067F 054C C        	INC	_RC
   337 00680 00CD C        	CLR	_RD
   338            C        	
   339 00681 0012 C        	RET
   340            C        ;-------------------------------------------------------------------------------
   594                     INCLUDE		"initial.dt"
     1            C        
     2 00682      C        INITMCU:
     3            C      M 	MOV	_FSR,@(0x70)
       00682 1870     1     MOV A,@( 112 )
       00683 004A     1     MOV  _FSR ,A
     4 00684 0011 C        	DISI
     5 00685 0004 C        	WDTC
     6 00686 00C3 C        	CLR	_STATUS
     7 00687 00C4 C        	CLR	_RSR
     8            C        	
     9 00688 12D7 C        	CALL	INITREG
    10 00689 12C5 C        	CALL	INITCIDRAM
    11 0068A 12EC C        	CALL	INITPORT
    12            C        	
    13            C      M 	LCALL	DELAY_100MS	;Reset DSP
                      2  M  PAGE #( DELAY_100MS ),
       0068B 1E83     2     PAGE ( DELAY_100MS / 1024 ),
       0068C 12EC     1     CALL ( DELAY_100MS % 1024 ),
                      2  M  PAGE #( $ ),
       0068D 1E81     2     PAGE ( $ / 1024 ),
    14            C        	
    15 0068E 1301 C        	CALL	INITINTERMIT
    16 0068F 1310 C        	CALL	InitData
    17 00690 133A C        	CALL	InitLcd
    18            C        	
    19 00691 0A12 C        	BS	SYS_FLAG,0
    20            C        	
    21            C      M 	MOV	_RF,@(0x00)
       00692 1800     1     MOV A,@( 0 )
       00693 004F     1     MOV  _RF ,A
    22            C        ;---initial MCU over then initial DSP
    23            C      M 	RESET_DSP_H
       00694 0A48     1     BS  _P8 , 1 
    24            C      M 	LCALL	DELAY_100MS
                      2  M  PAGE #( DELAY_100MS ),
       00695 1E83     2     PAGE ( DELAY_100MS / 1024 ),
       00696 12EC     1     CALL ( DELAY_100MS % 1024 ),
                      2  M  PAGE #( $ ),
       00697 1E81     2     PAGE ( $ / 1024 ),
    25            C        	
    26 00698 0010 C        	ENI
    27            C        ;---Get DSP-BIOS-Version
    28            C      M 	BANK	3
       00699 0B84     1     BS  _RSR , 6 
       0069A 0BC4     1     BS  _RSR , 7 
    29            C      M 	PAGE	#(GET_BIOS1VER)
       0069B 1E81     1     PAGE ( GET_BIOS1VER / 1024 ),
    30 0069C 1383 C        	CALL	GET_BIOS1VER
    31            C      M 	MOV	B3_1BIOSVER,TEMP1
       0069D 0416     1     MOV A, TEMP1 
       0069E 0063     1     MOV  B3_1BIOSVER ,A
    32            C      M 	MOV	B3_2BIOSVER,TEMP0
       0069F 0415     1     MOV A, TEMP0 
       006A0 0064     1     MOV  B3_2BIOSVER ,A
    33            C      M 	PAGE	#(GET_BIOS2VER)
       006A1 1E81     1     PAGE ( GET_BIOS2VER / 1024 ),
    34 006A2 1388 C        	CALL	GET_BIOS2VER
    35            C      M 	MOV	B3_3BIOSVER,TEMP1
       006A3 0416     1     MOV A, TEMP1 
       006A4 0065     1     MOV  B3_3BIOSVER ,A
    36            C      M 	MOV	B3_4BIOSVER,TEMP0
       006A5 0415     1     MOV A, TEMP0 
       006A6 0066     1     MOV  B3_4BIOSVER ,A
    37            C        
    38            C        ;---initial DSP-Flash
    39            C      M 	PAGE	#(INITFLASH)
       006A7 1E81     1     PAGE ( INITFLASH / 1024 ),
    40 006A8 1351 C        	CALL	INITFLASH
    41            C      M 	PAGE	#(SET_DECLTEL)
       006A9 1E82     1     PAGE ( SET_DECLTEL / 1024 ),
    42 006AA 115A C        	CALL	SET_DECLTEL
    43            C        
    44            C        ;---init DSP - parameter
    45            C      M 	PAGE	#(GET_FLASHDATA)
       006AB 1E81     1     PAGE ( GET_FLASHDATA / 1024 ),
    46 006AC 13C6 C        	CALL	GET_FLASHDATA
    47            C        ;---
    48            C        ;???????????????????????????????????????
    49            C        /*
    50            C        	MOV	A,@CGROUP_MISSCID
    51            C        	PAGE	#(SET_GROUP)
    52            C        	CALL	SET_GROUP
    53            C        	
    54            C        	MOV	A,@4
    55            C        	PAGE	#(GET_TEL0IDX)
    56            C        	CALL	GET_TEL0IDX
    57            C        	nop
    58            C        	nop
    59            C        	;MOV	A,@0XFF
    60            C        	;PAGE	#(GET_0XE9TELID)
    61            C        	;CALL	GET_0XE9TELID
    62            C        	;NOP
    63            C        	;PAGE	#(VPMSG_CHK)
    64            C        	;CALL	VPMSG_CHK
    65            C        	;MOV	A,@4
    66            C        	;PAGE	#(GET_ONLYID)
    67            C        	;CALL	GET_ONLYID
    68            C        	;NOP
    69            C        	;NOP
    70            C        */
    71            C        ;???????????????????????????????????????
    72            C        ;---Read idx-table
    73            C      M 	PAGE	#(IDXTAB_READ)
       006AD 1E8E     1     PAGE ( IDXTAB_READ / 1024 ),
    74 006AE 1304 C        	CALL	IDXTAB_READ
    75            C        ;---
    76            C      M 	PAGE	#(SET_INITTEL0IDX)
       006AF 1E83     1     PAGE ( SET_INITTEL0IDX / 1024 ),
    77 006B0 1267 C        	CALL	SET_INITTEL0IDX
    78            C      M 	PAGE	#(VPMSG_REALDEL)
       006B1 1E83     1     PAGE ( VPMSG_REALDEL / 1024 ),
    79 006B2 1227 C        	CALL	VPMSG_REALDEL
    80            C      M 	PAGE	#(TEL_GC_CHK)
       006B3 1E82     1     PAGE ( TEL_GC_CHK / 1024 ),
    81 006B4 10FC C        	CALL	TEL_GC_CHK
    82            C        ;---
    83            C      M 	PAGE	#(INITVOXLEVEL)
       006B5 1E81     1     PAGE ( INITVOXLEVEL / 1024 ),
    84 006B6 13A0 C        	CALL	INITVOXLEVEL	
    85 006B7 138D C        	CALL	SET_DSPRAM
    86 006B8 1392 C        	CALL	INIT_DENOISELEVEL
    87 006B9 13A5 C        	CALL	INITCODECPOWERON	;Power On
    88 006BA 13AF C        	CALL	INIT_ENABLEDAC		;Enable DAC
    89 006BB 13BC C        	CALL	SET_VOXLEVEL
    90            C        ;---
    91            C      M 	PAGE	#(SET_DAM_MICGAIN)
       006BC 1E83     1     PAGE ( SET_DAM_MICGAIN / 1024 ),
    92 006BD 11F2 C        	CALL	SET_DAM_MICGAIN
    93 006BE 1200 C        	CALL	SET_DAM_AD0GAIN
    94 006BF 120A C        	CALL	SET_DAM_AD1GAIN
    95 006C0 1212 C        	CALL	SET_DAM_SPKVOL
    96 006C1 121A C        	CALL	SET_DAM_LNEVOL
    97            C      M 	PAGE	#($)
       006C2 1E81     1     PAGE ( $ / 1024 ),
    98            C        	
    99 006C3 133A C        	CALL	InitLcd
   100            C        
   101 006C4 0013 C        	RETI
   102            C        ;-------------------------------------------------------------------------------
   103 006C5      C        INITCIDRAM:			;clear all CID-RAM(10 blocks,255byte/block)
   104 006C5 00DE C        	CLR	COUNT
   105 006C6      C        INITCIDRAM_LOOP:
   106 006C6 069E C        	RLCA	COUNT
   107 006C7 1A1E C        	AND	A,@(0x1e)
   108 006C8 1F00 C        	ADD	A,@(VALUE_IOCA)
   109 006C9 000A C        	IOW	_IOCA
   110 006CA 00CC C        	CLR	_RC
   111 006CB      C        INITCIDRAM_LOOP1:
   112 006CB 00CD C        	CLR	_RD
   113 006CC 01CC C        	DEC	_RC
   114            C      M 	JPNZ	INITCIDRAM_LOOP1
       006CD 0E83     1     JBS  _STATUS , Z 
       006CE 16CB     1     JMP  INITCIDRAM_LOOP1 ,
   115 006CF 055E C        	INC	COUNT
   116            C      M 	SUBA	COUNT,@(10)
       006D0 180A     1     MOV A,@( 10 )
       006D1 011E     1     SUB A, COUNT 
   117            C      M 	JPNZ	INITCIDRAM_LOOP
       006D2 0E83     1     JBS  _STATUS , Z 
       006D3 16C6     1     JMP  INITCIDRAM_LOOP ,
   118            C      M 	BLOCK	0
       006D4 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       006D5 000A     1     IOW  _IOCA ,
   119 006D6 0012 C        	RET
   120            C        ;-------------------------------------------------------------------------------
   121 006D7      C        INITREG:			;clear all data-RAM(4 banks,32byte/bank)
   122            C      M 	MOV	_RSR,@(0x10)
       006D7 1810     1     MOV A,@( 16 )
       006D8 0044     1     MOV  _RSR ,A
   123 006D9      C        INITREG_LOOP:			;0x10...0x1f
   124 006D9 00C0 C        	CLR	_R0
   125 006DA 0544 C        	INC	_RSR
   126            C      M 	SUBA	_RSR,@(0x20)
       006DB 1820     1     MOV A,@( 32 )
       006DC 0104     1     SUB A, _RSR 
   127            C      M 	JPNZ	INITREG_LOOP
       006DD 0E83     1     JBS  _STATUS , Z 
       006DE 16D9     1     JMP  INITREG_LOOP ,
   128 006DF      C        INITREG_LOOP1:
   129 006DF 00C0 C        	CLR	_R0
   130 006E0 0544 C        	INC	_RSR
   131            C      M 	ANDA	_RSR,@(0X1F)
       006E1 181F     1     MOV A,@( 31 )
       006E2 0284     1     AND A, _RSR 
   132            C      M 	JPNZ	INITREG_LOOP1	;
       006E3 0E83     1     JBS  _STATUS , Z 
       006E4 16DF     1     JMP  INITREG_LOOP1 ,
   133 006E5 0404 C        	MOV	A,_RSR
   134            C      M 	JPZ	INITREG_RET
       006E6 0C83     1     JBC  _STATUS , Z 
       006E7 16EB     1     JMP  INITREG_RET ,
   135            C      M 	ADD	_RSR,@(0X20)
       006E8 1820     1     MOV A,@( 32 )
       006E9 03C4     1     ADD  _RSR ,A
   136 006EA 16DF C        	JMP	INITREG_LOOP1
   137 006EB      C        INITREG_RET:
   138 006EB 0012 C        	RET
   139            C        ;-------------------------------------------------------------------------------
   140 006EC      C        INITPORT:
   141            C      M 	IOW	_IOCA,@0		; p8 for normal IO port, block 0
       006EC 1800     1     MOV A,@( 0 )
       006ED 000A     1     IOW  _IOCA ,
   142            C      M 	IOW	_IOCE,@(0x3c)		; p9 for normal IO prot, P6 for common output port, Lcd contrast
       006EE 183C     1     MOV A,@( 60 )
       006EF 000E     1     IOW  _IOCE ,
   143            C      M 	IOW	_IOC6,@(0xff)		; p6 for input
       006F0 18FF     1     MOV A,@( 255 )
       006F1 0006     1     IOW  _IOC6 ,
   144            C      M 	IOW	_IOC7,@(0xff)		; p7.7=SDA,All another for input
       006F2 18FF     1     MOV A,@( 255 )
       006F3 0007     1     IOW  _IOC7 ,
   145            C      M 	IOW	_IOC8,@(0x80)
       006F4 1880     1     MOV A,@( 128 )
       006F5 0008     1     IOW  _IOC8 ,
   146            C      M 	IOW	_IOC9,@(0x0E)
       006F6 180E     1     MOV A,@( 14 )
       006F7 0009     1     IOW  _IOC9 ,
   147            C        
   148            C      M 	MOV	_P7,@(0xff)
       006F8 18FF     1     MOV A,@( 255 )
       006F9 0047     1     MOV  _P7 ,A
   149            C      M 	MOV	_P8,@(0x2D)
       006FA 182D     1     MOV A,@( 45 )
       006FB 0048     1     MOV  _P8 ,A
   150            C      M 	MOV	_P9,@(0x83)
       006FC 1883     1     MOV A,@( 131 )
       006FD 0049     1     MOV  _P9 ,A
   151            C      M 	IOW	_IOCD,@(0x00)
       006FE 1800     1     MOV A,@( 0 )
       006FF 000D     1     IOW  _IOCD ,
   152            C        
   153 00700 0012 C        	RET
   154            C        
   155 00701      C        InitIntermit:
   156            C      M 	IOPAGE	1
       00701 0B83     1     BS  _STATUS , PG 
   157            C      M 	IOW	_IOCB,@(0x00)
       00702 1800     1     MOV A,@( 0 )
       00703 000B     1     IOW  _IOCB ,
   158            C      M 	IOW	_IOCC,@(0xdf)
       00704 18DF     1     MOV A,@( 223 )
       00705 000C     1     IOW  _IOCC ,
   159            C      M 	IOW	_IOCE,@(0x0C)
       00706 180C     1     MOV A,@( 12 )
       00707 000E     1     IOW  _IOCE ,
   160            C      M 	IOPAGE	0
       00708 0983     1     BC  _STATUS , PG 
   161 00709 1825 C        	MOV	A,@(0x25)
   162 0070A 0002 C        	CONTW
   163            C      M 	MOV	_TCC,@(0x00)
       0070B 1800     1     MOV A,@( 0 )
       0070C 0041     1     MOV  _TCC ,A
   164            C      M 	IOW	_IOCF,@(0x71)
       0070D 1871     1     MOV A,@( 113 )
       0070E 000F     1     IOW  _IOCF ,
   165 0070F 0012 C        	RET
   166            C        
   167 00710      C        InitData:
   168            C        
   169            C      M 	BANK	0
       00710 0984     1     BC  _RSR , 6 
       00711 09C4     1     BC  _RSR , 7 
   170            C        
   171 00712 00F2 C        	CLR	B0_SEC_REG
   172            C      M 	MOV	B0_MIN_REG,@(DEFAULT_MINUTE)
       00713 1800     1     MOV A,@( DEFAULT_MINUTE )
       00714 0073     1     MOV  B0_MIN_REG ,A
   173            C      M 	MOV	B0_HOUR_REG,@(DEFAULT_HOUR)
       00715 1800     1     MOV A,@( DEFAULT_HOUR )
       00716 0074     1     MOV  B0_HOUR_REG ,A
   174            C      M 	MOV	B0_DAY_REG,@(DEFAULT_DAY)
       00717 1801     1     MOV A,@( DEFAULT_DAY )
       00718 0075     1     MOV  B0_DAY_REG ,A
   175            C      M 	MOV	B0_MON_REG,@(DEFAULT_MONTH)
       00719 1801     1     MOV A,@( DEFAULT_MONTH )
       0071A 0076     1     MOV  B0_MON_REG ,A
   176            C      M 	MOV	B0_YEAR_REG,@(DEFAULT_YEAR)
       0071B 180A     1     MOV A,@( DEFAULT_YEAR )
       0071C 0077     1     MOV  B0_YEAR_REG ,A
   177            C      M 	MOV	B0_WEEK_REG,@DEFAULT_WEEK
       0071D 1800     1     MOV A,@( DEFAULT_WEEK )
       0071E 0078     1     MOV  B0_WEEK_REG ,A
   178            C        
   179            C      M 	BANK	1
       0071F 0B84     1     BS  _RSR , 6 
       00720 09C4     1     BC  _RSR , 7 
   180            C      M 	MOV	B1_CONTRAST,@DEFAULT_CONTRAST
       00721 1803     1     MOV A,@( DEFAULT_CONTRAST )
       00722 0063     1     MOV  B1_CONTRAST ,A
   181            C      M 	MOV	B1_RING_NUM,@((DEFAULT_MSGLEN<<4)+DEFAULT_RING)
       00723 1825     1     MOV A,@((( DEFAULT_MSGLEN << 4 )+ DEFAULT_RING ))
       00724 0066     1     MOV  B1_RING_NUM ,A
   182            C        
   183            C      M 	MOV	B1_12PSWORD,@((DEFAULT_PS1<<4)+DEFAULT_PS2)
       00725 1832     1     MOV A,@((( DEFAULT_PS1 << 4 )+ DEFAULT_PS2 ))
       00726 0067     1     MOV  B1_12PSWORD ,A
   184            C      M 	MOV	B1_34PSWORD,@((DEFAULT_PS3<<4)+DEFAULT_PS4)
       00727 1810     1     MOV A,@((( DEFAULT_PS3 << 4 )+ DEFAULT_PS4 ))
       00728 0068     1     MOV  B1_34PSWORD ,A
   185            C        
   186            C        	;BANK	1
   187 00729 0426 C        	MOV	A,B1_RING_NUM
   188 0072A 1A0F C        	AND	A,@0X0F
   189            C      M 	BANK	2
       0072B 0984     1     BC  _RSR , 6 
       0072C 0BC4     1     BS  _RSR , 7 
   190 0072D 007C C        	MOV	B2_RING_ID,A
   191            C      M 	MOV	B2_POLE_TMR,@0X80
       0072E 1880     1     MOV A,@( 128 )
       0072F 0068     1     MOV  B2_POLE_TMR ,A
   192            C        
   193 00730 18FF C        	MOV	A,@0XFF
   194 00731 0069 C        	MOV	B2_KEY1_GET,A
   195 00732 006A C        	MOV	B2_KEY2_GET,A
   196 00733 006B C        	MOV	B2_KEY3_GET,A
   197 00734 006C C        	MOV	B2_KEY4_GET,A
   198 00735 006D C        	MOV	B2_KEY1_BAK,A
   199 00736 006E C        	MOV	B2_KEY2_BAK,A
   200 00737 006F C        	MOV	B2_KEY3_BAK,A
   201 00738 0070 C        	MOV	B2_KEY4_BAK,A
   202            C        
   203            C        	;BLOCK	4
   204            C        	;CLR	_RC
   205            C        	;MOV	_RD,@(0x41)
   206 00739 0012 C        	RET
   207            C        
   208            C        ;-------------------------------------------------------------------------------
   209            C        
   210 0073A      C        InitLcd:
   211            C      M 	MOV	_RE,@(0x00)
       0073A 1800     1     MOV A,@( 0 )
       0073B 004E     1     MOV  _RE ,A
   212            C      M 	MOV	_RE,@(0x02)
       0073C 1802     1     MOV A,@( 2 )
       0073D 004E     1     MOV  _RE ,A
   213            C      M 	MOV	_RE,@(0x06)
       0073E 1806     1     MOV A,@( 6 )
       0073F 004E     1     MOV  _RE ,A
   214            C        
   215            C      M 	BANK	1
       00740 0B84     1     BS  _RSR , 6 
       00741 09C4     1     BC  _RSR , 7 
   216            C        
   217 00742 0423 C        	MOV	A,B1_CONTRAST
   218            C      M 	LCALL	SETLCDCONTRAST
                      2  M  PAGE #( SETLCDCONTRAST ),
       00743 1E82     2     PAGE ( SETLCDCONTRAST / 1024 ),
       00744 104A     1     CALL ( SETLCDCONTRAST % 1024 ),
                      2  M  PAGE #( $ ),
       00745 1E81     2     PAGE ( $ / 1024 ),
   219            C        ;-------
   220 00746      C        INITLCD_BLANK:
   221 00746 00DE C        	CLR	COUNT
   222 00747      C        INITLCD_BLANK_LOOP:
   223            C      M 	IOW	_IOCB,COUNT
       00747 041E     1     MOV A, COUNT 
       00748 000B     1     IOW  _IOCB ,
   224            C      M 	IOW	_IOCC,@(0X00)
       00749 1800     1     MOV A,@( 0 )
       0074A 000C     1     IOW  _IOCC ,
   225 0074B 055E C        	INC	COUNT
   226            C      M 	SUBA	COUNT,@(128)
       0074C 1880     1     MOV A,@( 128 )
       0074D 011E     1     SUB A, COUNT 
   227            C      M 	JPNZ	INITLCD_BLANK_LOOP
       0074E 0E83     1     JBS  _STATUS , Z 
       0074F 1747     1     JMP  INITLCD_BLANK_LOOP ,
   228            C        ;---
   229 00750 0012 C        	RET
   230            C        ;-------------------------------------------------------------------------------
   231 00751      C        INITFLASH:		;Command => Respond 118ms
   232            C      M 	BLOCK	1
       00751 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00752 000A     1     IOW  _IOCA ,
   233            C      M 	BANK	2
       00753 0984     1     BC  _RSR , 6 
       00754 0BC4     1     BS  _RSR , 7 
   234            C        ;---Initial flash
   235 00755 0EE9 C        	JBS	B2_KEY1_GET,3		;stop
   236 00756 0CEA C        	JBC	B2_KEY2_GET,3		;del
   237 00757 1759 C        	JMP	INITFLASH_NORMAL
   238 00758 1765 C        	jmp	FORMATFLASH
   239 00759      C        INITFLASH_NORMAL:
   240            C      M 	MOV	TEMP0,@CMODE9L|2
       00759 1842     1     MOV A,@(( CMODE9L | 2 ))
       0075A 0055     1     MOV  TEMP0 ,A
   241            C      M 	MOV	TEMP1,@CMODE9H
       0075B 1892     1     MOV A,@( CMODE9H )
       0075C 0056     1     MOV  TEMP1 ,A
   242            C      M 	PAGE	#(IIC)
       0075D 1E83     1     PAGE ( IIC / 1024 ),
   243 0075E 13CA C        	CALL	STOR_COMMAND
   244 0075F 1344 C        	CALL	SEND2B_COMMAND
   245 00760 13AE C        	CALL	RECE2B_RESPOND
   246 00761 13E1 C        	CALL	GET_RESPOND
   247            C      M 	PAGE	#($)
       00762 1E81     1     PAGE ( $ / 1024 ),
   248            C      M 	JPB	TEMP1,0,INITFLASH_OK
       00763 0C16     1     JBC  TEMP1 , 0 
       00764 1772     1     JMP  INITFLASH_OK ,
   249 00765      C        FORMATFLASH:
   250            C      M 	MOV	TEMP0,@CMODE9L|1
       00765 1841     1     MOV A,@(( CMODE9L | 1 ))
       00766 0055     1     MOV  TEMP0 ,A
   251            C      M 	MOV	TEMP1,@CMODE9H
       00767 1892     1     MOV A,@( CMODE9H )
       00768 0056     1     MOV  TEMP1 ,A
   252            C      M 	PAGE	#(IIC)
       00769 1E83     1     PAGE ( IIC / 1024 ),
   253 0076A 13CA C        	CALL	STOR_COMMAND
   254 0076B 1344 C        	CALL	SEND2B_COMMAND
   255 0076C 13AE C        	CALL	RECE2B_RESPOND
   256 0076D 13E1 C        	CALL	GET_RESPOND
   257            C      M 	PAGE	#($)
       0076E 1E81     1     PAGE ( $ / 1024 ),
   258            C      M 	JPB	TEMP1,0,INITFLASH_OK
       0076F 0C16     1     JBC  TEMP1 , 0 
       00770 1772     1     JMP  INITFLASH_OK ,
   259 00771      C        INITDSP_FLASH_BAD:	
   260 00771 1765 C        	JMP	FORMATFLASH
   261 00772      C        INITFLASH_OK:
   262            C        
   263 00772 0012 C        	RET
   264            C        ;-------------------------------------------------------------------------------
   265 00773      C        MODE9_LON:		;0x9048/0x9248
   266            C      M 	MOV	TEMP0,@CMODE9L|(1<<3)
       00773 1848     1     MOV A,@(( CMODE9L |( 1 << 3 )))
       00774 0055     1     MOV  TEMP0 ,A
   267            C      M 	MOV	TEMP1,@CMODE9H
       00775 1892     1     MOV A,@( CMODE9H )
       00776 0056     1     MOV  TEMP1 ,A
   268 00777      C        DSPINIT_DOIIC:
   269            C      M 	PAGE	#(IIC)
       00777 1E83     1     PAGE ( IIC / 1024 ),
   270 00778 13CA C        	CALL	STOR_COMMAND
   271 00779 1344 C        	CALL	SEND2B_COMMAND
   272 0077A 13AE C        	CALL	RECE2B_RESPOND
   273 0077B 13E1 C        	CALL	GET_RESPOND
   274            C      M 	PAGE	#($)
       0077C 1E81     1     PAGE ( $ / 1024 ),
   275            C        	
   276 0077D 0012 C        	RET
   277 0077E      C        MODE9_LOFF:		;0x9040
   278            C      M 	MOV	TEMP0,@CMODE9L
       0077E 1840     1     MOV A,@( CMODE9L )
       0077F 0055     1     MOV  TEMP0 ,A
   279            C      M 	MOV	TEMP1,@CMODE9H
       00780 1892     1     MOV A,@( CMODE9H )
       00781 0056     1     MOV  TEMP1 ,A
   280            C        	
   281 00782 1777 C        	JMP	DSPINIT_DOIIC
   282            C        ;-------------------------------------------------------------------------------
   283 00783      C        GET_BIOS1VER:
   284            C        ;---Get BIOS Version 1'th Word
   285            C      M 	MOV	TEMP0,@0XA0
       00783 18A0     1     MOV A,@( 160 )
       00784 0055     1     MOV  TEMP0 ,A
   286            C      M 	MOV	TEMP1,@0X5E
       00785 185E     1     MOV A,@( 94 )
       00786 0056     1     MOV  TEMP1 ,A
   287            C        	
   288 00787 1777 C        	JMP	DSPINIT_DOIIC
   289            C        ;-------------------------------------------------------------------------------
   290 00788      C        GET_BIOS2VER:
   291            C        ;---Get BIOS Version 1'th Word
   292            C      M 	MOV	TEMP0,@0XA1
       00788 18A1     1     MOV A,@( 161 )
       00789 0055     1     MOV  TEMP0 ,A
   293            C      M 	MOV	TEMP1,@0X5E
       0078A 185E     1     MOV A,@( 94 )
       0078B 0056     1     MOV  TEMP1 ,A
   294            C        	
   295 0078C 1777 C        	JMP	DSPINIT_DOIIC
   296            C        ;-------------------------------------------------------------------------------
   297 0078D      C        SET_DSPRAM:
   298            C        ;---Set DSP internal data RAM for De-noise
   299            C      M 	MOV	TEMP0,@0XA2
       0078D 18A2     1     MOV A,@( 162 )
       0078E 0055     1     MOV  TEMP0 ,A
   300            C      M 	MOV	TEMP1,@0X5E
       0078F 185E     1     MOV A,@( 94 )
       00790 0056     1     MOV  TEMP1 ,A
   301            C        	
   302 00791 1777 C        	JMP	DSPINIT_DOIIC
   303            C        ;-------------------------------------------------------------------------------
   304 00792      C        INIT_DENOISELEVEL:
   305            C        ;---Set De-noise level
   306            C      M 	MOV	TEMP2,@CDENOISE_LEVEL
       00792 1805     1     MOV A,@( CDENOISE_LEVEL )
       00793 0057     1     MOV  TEMP2 ,A
   307 00794 00D8 C        	CLR	TEMP3
   308            C        
   309            C      M 	MOV	TEMP0,@0X47
       00795 1847     1     MOV A,@( 71 )
       00796 0055     1     MOV  TEMP0 ,A
   310            C      M 	MOV	TEMP1,@0X5F
       00797 185F     1     MOV A,@( 95 )
       00798 0056     1     MOV  TEMP1 ,A
   311            C        	
   312 00799      C        DSPINIT_DOIIC4B:	
   313            C      M 	PAGE	#(IIC)
       00799 1E83     1     PAGE ( IIC / 1024 ),
   314 0079A 13CA C        	CALL	STOR_COMMAND
   315 0079B 1362 C        	CALL	SEND4B_COMMAND
   316 0079C 13AE C        	CALL	RECE2B_RESPOND
   317 0079D 13E1 C        	CALL	GET_RESPOND
   318            C      M 	PAGE	#($)
       0079E 1E81     1     PAGE ( $ / 1024 ),
   319            C        	
   320 0079F 0012 C        	RET
   321            C        ;-------------------------------------------------------------------------------
   322 007A0      C        INITVOXLEVEL:
   323            C        ;---VOX level
   324            C      M 	MOV	TEMP0,@CVOX_LEVEL
       007A0 1819     1     MOV A,@( CVOX_LEVEL )
       007A1 0055     1     MOV  TEMP0 ,A
   325            C      M 	MOV	TEMP1,@0XD7
       007A2 18D7     1     MOV A,@( 215 )
       007A3 0056     1     MOV  TEMP1 ,A
   326            C        	
   327 007A4 1777 C        	JMP	DSPINIT_DOIIC
   328            C        ;-------------------------------------------------------------------------------
   329 007A5      C        INITCODECPOWERON:
   330            C        ;---AD0,AD1,DA(SPK-drive,LINE-drive) power on
   331            C      M 	MOV	TEMP0,@0X1C
       007A5 181C     1     MOV A,@( 28 )
       007A6 0055     1     MOV  TEMP0 ,A
   332            C      M 	MOV	TEMP1,@0X5E
       007A7 185E     1     MOV A,@( 94 )
       007A8 0056     1     MOV  TEMP1 ,A
   333            C      M 	PAGE	#(IIC)
       007A9 1E83     1     PAGE ( IIC / 1024 ),
   334 007AA 13CA C        	CALL	STOR_COMMAND
   335 007AB 1344 C        	CALL	SEND2B_COMMAND
   336 007AC 13AE C        	CALL	RECE2B_RESPOND
   337            C      M 	PAGE	#($)
       007AD 1E81     1     PAGE ( $ / 1024 ),
   338            C        	
   339 007AE 0012 C        	RET
   340 007AF      C        INIT_ENABLEDAC:
   341            C        ;---Enable DAC-1/DAC-0
   342 007AF 1828 C        	MOV	A,@(5<<3)
   343 007B0 0ED2 C        	JBS	SYS_FLAG,3	;Check Compression Rate
   344 007B1 1808 C        	MOV	A,@(1<<3)
   345 007B2 1906 C        	OR	A,@0X06
   346 007B3 0055 C        	MOV	TEMP0,A	
   347            C        	
   348            C      M 	MOV	TEMP1,@0XD1
       007B4 18D1     1     MOV A,@( 209 )
       007B5 0056     1     MOV  TEMP1 ,A
   349            C      M 	PAGE	#(IIC)
       007B6 1E83     1     PAGE ( IIC / 1024 ),
   350 007B7 13CA C        	CALL	STOR_COMMAND
   351 007B8 1344 C        	CALL	SEND2B_COMMAND
   352 007B9 13AE C        	CALL	RECE2B_RESPOND
   353            C      M 	PAGE	#($)
       007BA 1E81     1     PAGE ( $ / 1024 ),
   354            C        	
   355 007BB 0012 C        	RET
   356 007BC      C        SET_VOXLEVEL:
   357            C        ;---VOX-level
   358            C      M 	MOV	TEMP0,@CVOX_LEVEL
       007BC 1819     1     MOV A,@( CVOX_LEVEL )
       007BD 0055     1     MOV  TEMP0 ,A
   359            C      M 	MOV	TEMP1,@0XD7
       007BE 18D7     1     MOV A,@( 215 )
       007BF 0056     1     MOV  TEMP1 ,A
   360            C      M 	PAGE	#(IIC)
       007C0 1E83     1     PAGE ( IIC / 1024 ),
   361 007C1 13CA C        	CALL	STOR_COMMAND
   362 007C2 1344 C        	CALL	SEND2B_COMMAND
   363 007C3 13AE C        	CALL	RECE2B_RESPOND
   364            C      M 	PAGE	#($)
       007C4 1E81     1     PAGE ( $ / 1024 ),
   365            C        	
   366 007C5 0012 C        	RET
   367            C        
   368            C        ;---------------------------------------
   369 007C6      C        GET_FLASHDATA:
   370 007C6 1812 C        	MOV	A,@CGROUP_DATT
   371            C      M 	PAGE	#(SET_GROUP)
       007C7 1E83     1     PAGE ( SET_GROUP / 1024 ),
   372 007C8 1241 C        	CALL	SET_GROUP
   373            C      M 	LCALL	GET_TELT
                      2  M  PAGE #( GET_TELT ),
       007C9 1E83     2     PAGE ( GET_TELT / 1024 ),
       007CA 1246     1     CALL ( GET_TELT % 1024 ),
                      2  M  PAGE #( $ ),
       007CB 1E81     2     PAGE ( $ / 1024 ),
   374 007CC 0415 C        	MOV	A,TEMP0
   375            C      M 	JPZ	GET_FLASHDATA_END
       007CD 0C83     1     JBC  _STATUS , Z 
       007CE 17FC     1     JMP  GET_FLASHDATA_END ,
   376 007CF 0072 C        	MOV	B1_MSG_ID,A
   377            C        ;---Read data	
   378            C      M 	MOV	OFFSET_D,@DATA_ZONE_START
       007D0 1860     1     MOV A,@( DATA_ZONE_START )
       007D1 005D     1     MOV  OFFSET_D ,A
   379 007D2      C        GET_FLASHDATA_LOOP:
   380 007D2 0432 C        	MOV	A,B1_MSG_ID
   381            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       007D3 1E83     2     PAGE ( DAT_READ / 1024 ),
       007D4 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       007D5 1E81     2     PAGE ( $ / 1024 ),
   382            C        	
   383            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       007D6 041D     1     MOV A, OFFSET_D 
       007D7 004C     1     MOV  _RC ,A
   384            C      M 	MOV	_RD,TEMP0	;the data
       007D8 0415     1     MOV A, TEMP0 
       007D9 004D     1     MOV  _RD ,A
   385            C        	
   386 007DA 055D C        	INC	OFFSET_D	;next address
   387            C        	
   388 007DB 0416 C        	MOV	A,TEMP1		;Error code
   389            C      M 	JPZ	GET_FLASHDATA_LOOP
       007DC 0C83     1     JBC  _STATUS , Z 
       007DD 17D2     1     JMP  GET_FLASHDATA_LOOP ,
   390            C      M 	LCALL	DAT_READ_STOP
                      2  M  PAGE #( DAT_READ_STOP ),
       007DE 1E83     2     PAGE ( DAT_READ_STOP / 1024 ),
       007DF 125B     1     CALL ( DAT_READ_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       007E0 1E81     2     PAGE ( $ / 1024 ),
   391            C        ;---Load the parameter
   392            C      M 	BANK	1
       007E1 0B84     1     BS  _RSR , 6 
       007E2 09C4     1     BC  _RSR , 7 
   393            C        ;-
   394            C      M 	MOV	_RC,@DATA_ZONE_START
       007E3 1860     1     MOV A,@( DATA_ZONE_START )
       007E4 004C     1     MOV  _RC ,A
   395 007E5 040D C        	MOV	A,_RD
   396 007E6 0064 C        	MOV	B1_LANGUAGE,A	;Byte1
   397            C        ;-	
   398 007E7 054C C        	INC	_RC
   399 007E8 040D C        	MOV	A,_RD
   400 007E9 0065 C        	MOV	B1_FLASH,A	;Byte2
   401            C        ;-	
   402 007EA 054C C        	INC	_RC
   403 007EB 040D C        	MOV	A,_RD
   404 007EC 0063 C        	MOV	B1_CONTRAST,A	;Byte3
   405            C        ;-	
   406 007ED 054C C        	INC	_RC
   407 007EE 040D C        	MOV	A,_RD
   408 007EF 0066 C        	MOV	B1_RING_NUM,A	;Byte4
   409            C        ;-	
   410 007F0 054C C        	INC	_RC
   411 007F1 040D C        	MOV	A,_RD
   412 007F2 0067 C        	MOV	B1_12PSWORD,A	;Byte5
   413 007F3 054C C        	INC	_RC
   414 007F4 040D C        	MOV	A,_RD
   415 007F5 0068 C        	MOV	B1_34PSWORD,A	;Byte6
   416            C        ;-
   417 007F6 054C C        	INC	_RC
   418 007F7 040D C        	MOV	A,_RD
   419 007F8 0052 C        	MOV	SYS_FLAG,A	;Byte7(HD)
   420            C        ;-
   421 007F9 054C C        	INC	_RC
   422 007FA 040D C        	MOV	A,_RD
   423 007FB 0054 C        	MOV	DAM_FLAG,A	;Byte8(ON/OFF - OGM1/2)
   424 007FC      C        GET_FLASHDATA_END:
   425 007FC 0012 C        	RET
   426            C        ;-------------------------------------------------------------------------------
   427            C        
   428            C        
   595                     ;-------------------------------------------------------------------------------
   596                     ;page2
   597                     INCLUDE		"drive.dt"
     1            C        ORG	(2<<10)
     2            C        ;-------------------------------------------------------------------------------
     3            C        ;	Function : DGT_HEX
     4            C        ;
     5            C        ;	Transform a BCD value to binary value
     6            C        ;	Input  : ACCH = the BCD value
     7            C        ;	Output : ACCH = the binary value
     8            C        ;	Variable : TEMP1,TEMP2
     9            C        ;-------------------------------------------------------------------------------
    10 00800      C        DGT_HEX:
    11 00800 0056 C        	MOV	TEMP1,A	
    12            C        
    13 00801 1A0F C        	AND	A,@0X0F
    14 00802 0057 C        	MOV	TEMP2,A		;LOW(3..0)
    15            C        
    16 00803 0716 C        	SWAPA	TEMP1
    17 00804 1A0F C        	AND	A,@0X0F
    18 00805 0056 C        	MOV	TEMP1,A		;HIGH(3..0)
    19 00806      C        DGT_HEX_LOOP:
    20 00806 0416 C        	MOV	A,TEMP1
    21            C      M 	JPZ	DGT_HEX_END
       00807 0C83     1     JBC  _STATUS , Z 
       00808 140D     1     JMP  DGT_HEX_END ,
    22            C        	
    23 00809 180A C        	MOV	A,@10
    24 0080A 03D7 C        	ADD	TEMP2,A
    25            C        
    26 0080B 01D6 C        	DEC	TEMP1
    27 0080C 1406 C        	JMP	DGT_HEX_LOOP
    28 0080D      C        DGT_HEX_END:
    29 0080D 0417 C        	MOV	A,TEMP2
    30            C        
    31 0080E 0012 C                RET
    32            C        ;-------------------------------------------------------------------------------
    33            C        ;       Function : HEX_DGT
    34            C        ;	Transform a binary value to a BCD value
    35            C        ;
    36            C        ;	Input  : ACCH = the binary value
    37            C        ;	Output : ACCH = the BCD value
    38            C        ;	Variable : TEMP1,TEMP2
    39            C        ;-------------------------------------------------------------------------------
    40 0080F      C        HEX_DGT:
    41 0080F 0056 C        	MOV	TEMP1,A
    42 00810 00D7 C        	CLR	TEMP2
    43 00811      C        HEX_DGT_LOOP:
    44 00811 180A C        	MOV	A,@10
    45 00812 0116 C        	SUB	A,TEMP1
    46            C      M 	JPNC	HEX_DGT_END
       00813 0E03     1     JBS  _STATUS , C 
       00814 1418     1     JMP  HEX_DGT_END ,
    47 00815 0056 C        	MOV	TEMP1,A
    48            C        
    49 00816 0557 C        	INC	TEMP2
    50 00817 1411 C        	JMP	HEX_DGT_LOOP
    51 00818      C        HEX_DGT_END:
    52 00818 0717 C        	SWAPA	TEMP2
    53 00819 1AF0 C        	AND	A,@0X0F0
    54 0081A 0396 C        	ADD	A,TEMP1
    55            C        
    56 0081B 0012 C        	RET
    57            C        ;-------------------------------------------------------------------------------
    58            C        ;	Function : VALUE_INC	(ACCH+1==>ACCH)
    59            C        ;	input : 	ACC
    60            C        ;	output: 	ACC
    61            C        ;	minvalue:	TEMP1
    62            C        ;	maxvalue:	TEMP2
    63            C        ;-------------------------------------------------------------------------------
    64 0081C      C        VALUE_INC:
    65 0081C 0055 C        	MOV	TEMP0,A
    66 0081D 0555 C        	INC	TEMP0
    67            C        	
    68 0081E 0415 C        	MOV	A,TEMP0
    69 0081F      C        VALUE_INC1:
    70 0081F 0117 C        	SUB	A,TEMP2
    71            C      M 	JPNC	VALUE_INC3	;比最大的还大
       00820 0E03     1     JBS  _STATUS , C 
       00821 1428     1     JMP  VALUE_INC3 ,
    72            C        	
    73 00822 0416 C        	MOV	A,TEMP1
    74 00823 0115 C        	SUB	A,TEMP0
    75            C      M 	JPNC	VALUE_INC3	;比最小的还小
       00824 0E03     1     JBS  _STATUS , C 
       00825 1428     1     JMP  VALUE_INC3 ,
    76            C        
    77 00826 0415 C        	MOV	A,TEMP0
    78            C           
    79 00827 0012 C                RET
    80 00828      C        VALUE_INC3:
    81 00828 0416 C        	MOV	A,TEMP1
    82 00829 0012 C        	RET
    83            C        ;-------------------------------------------------------------------
    84            C        ;	Function : VALUE_DEC(ACCH-1==>ACCH)
    85            C        ;	
    86            C        ;	input : 	ACC
    87            C        ;	output: 	ACC
    88            C        ;	minvalue:	TEMP1
    89            C        ;	maxvalue:	TEMP2
    90            C        ;-------------------------------------------------------------------        
    91 0082A      C        VALUE_DEC:
    92 0082A 0055 C        	MOV	TEMP0,A
    93 0082B 01D5 C        	DEC	TEMP0
    94            C        
    95 0082C 0415 C        	MOV	A,TEMP0
    96 0082D      C        VALUE_DEC1:
    97 0082D 0117 C        	SUB	A,TEMP2
    98            C      M 	JPNC	VALUE_DEC3	;比最大的还大
       0082E 0E03     1     JBS  _STATUS , C 
       0082F 1436     1     JMP  VALUE_DEC3 ,
    99            C        	
   100 00830 0416 C        	MOV	A,TEMP1
   101 00831 0115 C        	SUB	A,TEMP0
   102            C      M 	JPNC	VALUE_DEC3	;比最小的还小
       00832 0E03     1     JBS  _STATUS , C 
       00833 1436     1     JMP  VALUE_DEC3 ,
   103            C        	
   104 00834 0415 C        	MOV	A,TEMP0
   105            C        	
   106 00835 0012 C                RET
   107 00836      C        VALUE_DEC3:
   108 00836 0417 C        	MOV	A,TEMP2
   109            C        
   110 00837 0012 C        	RET
   111            C        ;-------------------------------------------------------------------------------
   112            C        ;	LINE_START
   113            C        ;	input : no
   114            C        ;	output: no
   115            C        ;
   116            C        ;	Nothing to do with BANK
   117            C        ;-------------------------------------------------------------------------------
   118 00838      C        LINE_START:
   119 00838 00D3 C        	CLR	EVENT
   120 00839 0B13 C        	BS	EVENT,4
   121            C        	
   122 0083A 00D5 C        	CLR	TEMP0
   123            C      M 	MOV	TEMP1,@0X50
       0083B 1850     1     MOV A,@( 80 )
       0083C 0056     1     MOV  TEMP1 ,A
   124            C      M 	LCALL	STOR_COMMAND
                      2  M  PAGE #( STOR_COMMAND ),
       0083D 1E83     2     PAGE ( STOR_COMMAND / 1024 ),
       0083E 13CA     1     CALL ( STOR_COMMAND % 1024 ),
                      2  M  PAGE #( $ ),
       0083F 1E82     2     PAGE ( $ / 1024 ),
   125            C        
   126 00840 0012 C        	RET
   127            C        ;-------------------------------------------------------------------------------
   128            C        ;	REC_START
   129            C        ;	input : no
   130            C        ;	output: no
   131            C        ;
   132            C        ;	Nothing to do with BANK
   133            C        ;-------------------------------------------------------------------------------
   134 00841      C        RECORD_START:
   135 00841 00D3 C        	CLR	EVENT
   136 00842 0BD3 C        	BS	EVENT,7
   137            C        	
   138 00843 00D5 C        	CLR	TEMP0
   139            C      M 	MOV	TEMP1,@0X10
       00844 1810     1     MOV A,@( 16 )
       00845 0056     1     MOV  TEMP1 ,A
   140            C      M 	LCALL	STOR_COMMAND
                      2  M  PAGE #( STOR_COMMAND ),
       00846 1E83     2     PAGE ( STOR_COMMAND / 1024 ),
       00847 13CA     1     CALL ( STOR_COMMAND % 1024 ),
                      2  M  PAGE #( $ ),
       00848 1E82     2     PAGE ( $ / 1024 ),
   141            C        
   142 00849 0012 C        	RET
   143            C        ;-------------------------------------------------------------------------------
   144            C        ;	PHONE_START
   145            C        ;	input : no
   146            C        ;	output: no
   147            C        ;
   148            C        ;	Nothing to do with BANK
   149            C        ;-------------------------------------------------------------------------------
   150            C        ;PHONE_START:
   151            C        ;	CLR	EVENT
   152            C        ;	BS	EVENT,3
   153            C        		
   154            C        ;	CLR	TEMP0
   155            C        ;	MOV	TEMP1,@0XC0
   156            C        ;	LCALL	STOR_COMMAND
   157            C        
   158            C        ;	RET
   159            C        ;-------------------------------------------------------------------------------
   160            C        ;	SETLCDCONTRAST	设定LCD对比度
   161            C        ;-------------------------------------------------------------------------------
   162 0084A      C        SETLCDCONTRAST:
   163            C        IF	OTP == 1
   164            C        	;ADD	A,@(256-1)
   165            C        ELSE
   166 0084A 1FFF C        	ADD	A,@(256-1)
   167            C        ENDIF
   168 0084B 0055 C        	MOV	TEMP0,A
   169 0084C 06D5 C        	RLC	TEMP0
   170 0084D 06D5 C        	RLC	TEMP0
   171            C      M 	AND	TEMP0,@(0x1c)
       0084E 181C     1     MOV A,@( 28 )
       0084F 02D5     1     AND  TEMP0 ,A
   172 00850 0011 C        	DISI
   173 00851 001E C        	IOR	_IOCE
   174 00852 1AE3 C        	AND	A,@(0xe3)
   175 00853 0215 C        	OR	A,TEMP0
   176 00854 000E C        	IOW	_IOCE
   177            C        	
   178 00855 0013 C        	RETI
   179            C        
   180            C        ;-------------------------------------------------------------------------------
   181            C        ;       Function : MOVE_DATA
   182            C        ;	move current CID-block data from offset_s to offset_d
   183            C        ;	count
   184            C        ;	Input  : OFFSET_S/OFFSET_D/COUNT
   185            C        ;	Output : no
   186            C        ;
   187            C        ;
   188            C        ;适合OFFSET_S > OFFSET_D,和OFFSET_S+COUNT <= OFFSET_D
   189            C        ;-------------------------------------------------------------------------------
   190 00856      C        MOVE_DATA:		;当前CID-RAM之间数据转移,OFFSET_S-->OFFSET_D,COUNT是多少字节
   191 00856 041D C        	MOV	A,OFFSET_D
   192 00857 011C C        	SUB	A,OFFSET_S
   193            C      M 	JPNC	MOVE_1DATA
       00858 0E03     1     JBS  _STATUS , C 
       00859 1469     1     JMP  MOVE_1DATA ,
   194 0085A      C        MOVE_DATA_LOOP:			;offset_s > offset_d
   195 0085A 041C C        	MOV	A,OFFSET_S
   196 0085B 004C C        	MOV	_RC,A
   197 0085C 040D C        	MOV	A,_RD
   198 0085D 0055 C        	MOV	TEMP0,A
   199 0085E 041D C        	MOV	A,OFFSET_D
   200 0085F 004C C        	MOV	_RC,A
   201 00860 0415 C        	MOV	A,TEMP0
   202 00861 004D C        	MOV	_RD,A
   203            C        	
   204 00862 055C C        	INC	OFFSET_S
   205 00863 055D C        	INC	OFFSET_D
   206 00864 01DE C        	DEC	COUNT
   207            C        	
   208 00865 041E C        	MOV	A,COUNT
   209            C      M 	JPNZ	MOVE_DATA_LOOP
       00866 0E83     1     JBS  _STATUS , Z 
       00867 145A     1     JMP  MOVE_DATA_LOOP ,
   210            C        	
   211 00868 0012 C        	RET
   212            C        ;-------
   213 00869      C        MOVE_1DATA:		;offset_s < offset_d
   214 00869 1801 C        	MOV	A,@1
   215 0086A 011E C        	SUB	A,COUNT
   216            C        	
   217 0086B 03DC C        	ADD	OFFSET_S,A
   218 0086C 03DD C        	ADD	OFFSET_D,A
   219 0086D      C        MOVE_1DATA_LOOP:
   220 0086D 041C C        	MOV	A,OFFSET_S
   221 0086E 004C C        	MOV	_RC,A
   222 0086F 040D C        	MOV	A,_RD
   223 00870 0055 C        	MOV	TEMP0,A
   224 00871 041D C        	MOV	A,OFFSET_D
   225 00872 004C C        	MOV	_RC,A
   226 00873 0415 C        	MOV	A,TEMP0
   227 00874 004D C        	MOV	_RD,A
   228            C        	
   229 00875 01DC C        	DEC	OFFSET_S
   230 00876 01DD C        	DEC	OFFSET_D
   231 00877 01DE C        	DEC	COUNT
   232            C        
   233 00878 041E C        	MOV	A,COUNT
   234            C      M 	JPNZ	MOVE_1DATA_LOOP
       00879 0E83     1     JBS  _STATUS , Z 
       0087A 146D     1     JMP  MOVE_1DATA_LOOP ,
   235            C        
   236 0087B 0012 C        	RET
   237            C        ;-------------------------------------------------------------------------------
   238            C        ;	STOR_DATA
   239            C        ;	将当前RC为起始地址,长度为count的区域填充数据
   240            C        ;	input : ACC	= 填充值
   241            C        ;		_RC	= 地址
   242            C        ;		count	= 长度
   243            C        ;-------------------------------------------------------------------------------
   244 0087C      C        STOR_DATA:
   245 0087C 0055 C        	MOV	TEMP0,A
   246 0087D      C        STOR_DATA_LOOP:
   247 0087D 0415 C        	MOV	A,TEMP0
   248 0087E 004D C        	MOV	_RD,A
   249 0087F 054C C        	INC	_RC
   250            C        	
   251 00880 01DE C        	DEC	COUNT
   252 00881 041E C        	MOV	A,COUNT
   253            C      M 	JPNZ	STOR_DATA_LOOP
       00882 0E83     1     JBS  _STATUS , Z 
       00883 147D     1     JMP  STOR_DATA_LOOP ,
   254            C        
   255 00884 0012 C        	RET
   256            C        ;-------------------------------------------------------------------------------
   257            C        ;	COPY_DATA
   258            C        ;	将(BASE_ADDR-7..4,OFFSET_S)为起始地址,长度为count的数据
   259            C        ;	复制到(BASE_ADDR-3..0,OFFSET_D)为起始地址的区域
   260            C        ;-------------------------------------------------------------------------------
   261 00885      C        COPY_DATA:
   262            C        ;---	
   263 00885 041E C        	MOV	A,COUNT
   264            C      M 	JPZ	COPY_DATA_END
       00886 0C83     1     JBC  _STATUS , Z 
       00887 149F     1     JMP  COPY_DATA_END ,
   265 00888      C        COPY_DATA_LOOP:
   266            C        ;---source block
   267 00888 071F C        	SWAPA	BASE_ADDR
   268 00889 1A0F C        	AND	A,@0X0F
   269 0088A 10A0 C        	CALL	SET_CIDBANK
   270            C        ;---source offset
   271 0088B 041C C        	MOV	A,OFFSET_S
   272 0088C 004C C        	MOV	_RC,A
   273            C        ;---get data
   274 0088D 040D C        	MOV	A,_RD
   275 0088E 0055 C        	MOV	TEMP0,A
   276            C        ;---destation block	
   277 0088F 041F C        	MOV	A,BASE_ADDR
   278 00890 1A0F C        	AND	A,@0X0F
   279 00891 10A0 C        	CALL	SET_CIDBANK
   280            C        ;---destation offset
   281 00892 041D C        	MOV	A,OFFSET_D
   282 00893 004C C        	MOV	_RC,A
   283            C        ;---stor data
   284 00894 0415 C        	MOV	A,TEMP0
   285 00895 004D C        	MOV	_RD,A
   286            C        	
   287 00896 055C C        	INC	OFFSET_S
   288 00897 055D C        	INC	OFFSET_D
   289 00898 01DE C        	DEC	COUNT
   290 00899 041E C        	MOV	A,COUNT
   291            C      M 	JPNZ	COPY_DATA_LOOP
       0089A 0E83     1     JBS  _STATUS , Z 
       0089B 1488     1     JMP  COPY_DATA_LOOP ,
   292            C        
   293 0089C 071F C        	SWAPA	BASE_ADDR
   294 0089D 1A0F C        	AND	A,@0X0F
   295 0089E 10A0 C        	CALL	SET_CIDBANK		;Comeback source block
   296            C        ;---	
   297 0089F      C        COPY_DATA_END:
   298            C        	
   299 0089F 0012 C        	RET
   300            C        ;-------------------------------------------------------------------------------
   301 008A0      C        SET_CIDBANK:
   302 008A0 0058 C        	MOV	TEMP3,A
   303 008A1 1D0A C        	SUB	A,@10
   304            C      M 	JPC	SET_CIDBANK_EXEC
       008A2 0C03     1     JBC  _STATUS , C 
       008A3 14A5     1     JMP  SET_CIDBANK_EXEC ,
   305            C        	
   306 008A4 0012 C        	RET
   307 008A5      C        SET_CIDBANK_EXEC:
   308 008A5 0803 C        	BC	_STATUS,C
   309            C        	
   310 008A6 06D8 C        	RLC	TEMP3
   311            C        
   312 008A7 001A C        	IOR	_IOCA
   313 008A8 1AE1 C        	AND	A,@0XE1
   314 008A9 0398 C        	ADD	A,TEMP3
   315 008AA 1F00 C        	ADD	A,@(VALUE_IOCA)
   316 008AB 000A C        	IOW	_IOCA
   317            C        
   318 008AC 0012 C        	RET
   319            C        ;-------------------------------------------------------------------------------
   320 008AD      C        UPDATE_DATETIME:		;Note: this subroutine can't use B1_MON_REG/B1_DAY_REG/B1_HOUR_REG/B1_MIN_REG,because RTC-DISP update aways work
   321            C      M 	BANK	0
       008AD 0984     1     BC  _RSR , 6 
       008AE 09C4     1     BC  _RSR , 7 
   322            C        ;-the first line
   323            C        ;	PAGE	#(VGA)
   324            C        ;	MOV	A,@(STYLE_LEFT+STYLE_TOBCD)	;!!!
   325            C        ;	CALL	VGANUM1
   326            C        ;
   327            C        ;	MOV	A,B0_HOUR_REG
   328            C        ;	CALL	VGANUM1
   329            C        ;	MOV	A,B0_MIN_REG
   330            C        ;	CALL	VGANUM1
   331            C        ;	MOV	A,B0_DAY_REG
   332            C        ;	CALL	VGANUM1
   333            C        ;	MOV	A,B0_MON_REG
   334            C        ;	CALL	VGANUM1
   335            C        ;
   336            C        ;	MOV	A,@(CH_END)
   337            C        ;	CALL	VGANUM1
   338            C        ;	CALL	VGADRAWNUM1
   339            C        ;	PAGE	#($)
   340            C        
   341            C        
   342            C      M 	BLOCK	0
       008AF 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       008B0 000A     1     IOW  _IOCA ,
   343            C        ;-Hour
   344            C      M 	MOV	_RC,@(LCD_1STLINE)
       008B1 1883     1     MOV A,@( LCD_1STLINE )
       008B2 004C     1     MOV  _RC ,A
   345 008B3 00CD C        	CLR	_RD
   346 008B4 0434 C        	MOV	A,B0_HOUR_REG
   347            C      M 	LCALL	HEX_DGT
                      2  M  PAGE #( HEX_DGT ),
       008B5 1E82     2     PAGE ( HEX_DGT / 1024 ),
       008B6 100F     1     CALL ( HEX_DGT % 1024 ),
                      2  M  PAGE #( $ ),
       008B7 1E82     2     PAGE ( $ / 1024 ),
   348 008B8 0055 C        	MOV	TEMP0,A
   349 008B9 0715 C        	SWAPA	TEMP0
   350 008BA 1A0F C        	AND	A,@0X0F
   351            C      M 	JPZ	UPDATE_DATETIME_1	;如果为0就不显示
       008BB 0C83     1     JBC  _STATUS , Z 
       008BC 14BF     1     JMP  UPDATE_DATETIME_1 ,
   352 008BD 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   353 008BE 004D C        	MOV	_RD,A
   354 008BF      C        UPDATE_DATETIME_1:
   355 008BF 054C C        	INC	_RC
   356            C        	
   357 008C0 0415 C        	MOV	A,TEMP0
   358 008C1 1A0F C        	AND	A,@0X0F
   359 008C2 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   360 008C3 004D C        	MOV	_RD,A
   361 008C4 054C C        	INC	_RC
   362            C        ;-Minute
   363            C      M 	PAGE	#(HEX_DGT)	;!!!!
       008C5 1E82     1     PAGE ( HEX_DGT / 1024 ),
   364 008C6 0433 C        	MOV	A,B0_MIN_REG
   365 008C7 100F C        	CALL	HEX_DGT
   366 008C8 0055 C        	MOV	TEMP0,A
   367            C        
   368 008C9 0715 C        	SWAPA	TEMP0
   369 008CA 1A0F C        	AND	A,@0X0F
   370 008CB 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   371 008CC 004D C        	MOV	_RD,A
   372 008CD 054C C        	INC	_RC
   373            C        	
   374 008CE 0415 C        	MOV	A,TEMP0
   375 008CF 1A0F C        	AND	A,@0X0F
   376 008D0 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   377 008D1 004D C        	MOV	_RD,A
   378 008D2 054C C        	INC	_RC
   379            C        ;-Day
   380 008D3 0435 C        	MOV	A,B0_DAY_REG
   381 008D4 100F C        	CALL	HEX_DGT
   382 008D5 0055 C        	MOV	TEMP0,A
   383            C        	
   384 008D6 0715 C        	SWAPA	TEMP0
   385 008D7 1A0F C        	AND	A,@0X0F
   386 008D8 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   387 008D9 004D C        	MOV	_RD,A
   388 008DA 054C C        	INC	_RC
   389            C        	
   390 008DB 0415 C        	MOV	A,TEMP0
   391 008DC 1A0F C        	AND	A,@0X0F
   392 008DD 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   393 008DE 004D C        	MOV	_RD,A
   394 008DF 054C C        	INC	_RC
   395            C        ;-Month
   396 008E0 054C C        	INC	_RC
   397 008E1 00CD C        	CLR	_RD	;!!!先清空低位
   398 008E2 01CC C        	DEC	_RC
   399            C        
   400 008E3 0436 C        	MOV	A,B0_MON_REG
   401 008E4 100F C        	CALL	HEX_DGT
   402            C      M 	PAGE	#($)	;!!!!
       008E5 1E82     1     PAGE ( $ / 1024 ),
   403 008E6 0055 C        	MOV	TEMP0,A
   404            C        
   405 008E7 0715 C        	SWAPA	TEMP0
   406 008E8 1A0F C        	AND	A,@0X0F
   407            C      M 	JPZ	UPDATE_DATETIME_2	;如果为0就不显示而且在当前位置显示低位数
       008E9 0C83     1     JBC  _STATUS , Z 
       008EA 14EE     1     JMP  UPDATE_DATETIME_2 ,
   408 008EB 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   409 008EC 004D C        	MOV	_RD,A
   410 008ED 054C C        	INC	_RC
   411 008EE      C        UPDATE_DATETIME_2:
   412            C        
   413 008EE 0415 C        	MOV	A,TEMP0
   414 008EF 1A0F C        	AND	A,@0X0F
   415 008F0 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   416 008F1 004D C        	MOV	_RD,A
   417            C        
   418 008F2 0012 C        	RET
   419            C        ;-------------------------------------------------------------------------------
   420            C        ;	input : TEMP0 - the value
   421            C        ;		TEMP1:	length
   422            C        ;		_RC:	start address
   423            C        ;	output:
   424            C        ;-------------------------------------------------------------------------------
   425 008F3      C        STORCIDRAM:
   426 008F3 0416 C        	MOV	A,TEMP1
   427            C      M 	JPZ	STORCIDRAM_RET
       008F4 0C83     1     JBC  _STATUS , Z 
       008F5 14FB     1     JMP  STORCIDRAM_RET ,
   428            C      M 	MOV	_RD,TEMP0
       008F6 0415     1     MOV A, TEMP0 
       008F7 004D     1     MOV  _RD ,A
   429 008F8 054C C        	INC	_RC
   430 008F9 01D6 C        	DEC	TEMP1
   431 008FA 14F3 C        	JMP	STORCIDRAM
   432 008FB      C        STORCIDRAM_RET:
   433 008FB 0012 C        	RET
   434            C        
   435            C        ;-------------------------------------------------------------------------------
   436            C        ;	TEL_GC_CHK
   437            C        ;	input : no
   438            C        ;	output: no
   439            C        ;-------------------------------------------------------------------------------
   440 008FC      C        TEL_GC_CHK:
   441            C        
   442            C      M 	MOV	TEMP0,@0X04
       008FC 1804     1     MOV A,@( 4 )
       008FD 0055     1     MOV  TEMP0 ,A
   443            C      M 	MOV	TEMP1,@0XE4
       008FE 18E4     1     MOV A,@( 228 )
       008FF 0056     1     MOV  TEMP1 ,A
   444            C        	
   445            C      M 	PAGE	#(IIC)
       00900 1E83     1     PAGE ( IIC / 1024 ),
   446 00901 13CA C        	CALL	STOR_COMMAND
   447 00902 1344 C        	CALL	SEND2B_COMMAND
   448 00903 13AE C        	CALL	RECE2B_RESPOND
   449 00904 13E1 C        	CALL	GET_RESPOND
   450            C      M 	PAGE	#($)
       00905 1E82     1     PAGE ( $ / 1024 ),
   451            C        	
   452 00906 0415 C        	MOV	A,TEMP0
   453 00907 1D20 C        	SUB	A,@32
   454            C      M 	JPC	TEL_GC_CHK_END	;No need GC 
       00908 0C03     1     JBC  _STATUS , C 
       00909 153E     1     JMP  TEL_GC_CHK_END ,
   455            C        ;---DO TEL-GC	
   456            C      M 	MOV	TEMP4,@1
       0090A 1801     1     MOV A,@( 1 )
       0090B 0059     1     MOV  TEMP4 ,A
   457 0090C      C        TEL_GC_CHK_DOING:	
   458            C      M 	MOV	TEMP0,@0X05
       0090C 1805     1     MOV A,@( 5 )
       0090D 0055     1     MOV  TEMP0 ,A
   459            C      M 	MOV	TEMP1,@0XE4
       0090E 18E4     1     MOV A,@( 228 )
       0090F 0056     1     MOV  TEMP1 ,A
   460            C        	
   461            C      M 	PAGE	#(IIC)
       00910 1E83     1     PAGE ( IIC / 1024 ),
   462 00911 13CA C        	CALL	STOR_COMMAND
   463 00912 1344 C        	CALL	SEND2B_COMMAND
   464 00913 13AE C        	CALL	RECE2B_RESPOND
   465 00914 13E1 C        	CALL	GET_RESPOND
   466            C      M 	PAGE	#($)
       00915 1E82     1     PAGE ( $ / 1024 ),
   467            C        	
   468 00916 0415 C        	MOV	A,TEMP0
   469            C      M 	JPZ	TEL_GC_CHK_NEXTSTEP
       00917 0C83     1     JBC  _STATUS , Z 
       00918 153D     1     JMP  TEL_GC_CHK_NEXTSTEP ,
   470            C        	
   471            C      M 	MOV	TEMP0,@0X07
       00919 1807     1     MOV A,@( 7 )
       0091A 0055     1     MOV  TEMP0 ,A
   472            C      M 	MOV	TEMP1,@0XE4
       0091B 18E4     1     MOV A,@( 228 )
       0091C 0056     1     MOV  TEMP1 ,A
   473            C        	
   474            C      M 	PAGE	#(IIC)
       0091D 1E83     1     PAGE ( IIC / 1024 ),
   475 0091E 13CA C        	CALL	STOR_COMMAND
   476 0091F 1344 C        	CALL	SEND2B_COMMAND
   477 00920 13AE C        	CALL	RECE2B_RESPOND
   478 00921 13E1 C        	CALL	GET_RESPOND
   479            C      M 	PAGE	#($)
       00922 1E82     1     PAGE ( $ / 1024 ),
   480            C        	
   481            C        	
   482 00923 0415 C        	MOV	A,TEMP0
   483            C      M 	JPZ	TEL_GC_CHK_DOING
       00924 0C83     1     JBC  _STATUS , Z 
       00925 150C     1     JMP  TEL_GC_CHK_DOING ,
   484            C        
   485 00926      C        TEL_GC_CHK_DOING_1:	
   486            C      M 	MOV	TEMP0,@0X05
       00926 1805     1     MOV A,@( 5 )
       00927 0055     1     MOV  TEMP0 ,A
   487            C      M 	MOV	TEMP1,@0X30
       00928 1830     1     MOV A,@( 48 )
       00929 0056     1     MOV  TEMP1 ,A
   488            C        	
   489            C      M 	PAGE	#(IIC)
       0092A 1E83     1     PAGE ( IIC / 1024 ),
   490 0092B 13CA C        	CALL	STOR_COMMAND
   491 0092C 1344 C        	CALL	SEND2B_COMMAND
   492 0092D 13AE C        	CALL	RECE2B_RESPOND
   493 0092E 13E1 C        	CALL	GET_RESPOND
   494            C      M 	PAGE	#($)
       0092F 1E82     1     PAGE ( $ / 1024 ),
   495            C        	
   496 00930 0415 C        	MOV	A,TEMP0
   497            C      M 	JPZ	TEL_GC_CHK_DOING
       00931 0C83     1     JBC  _STATUS , Z 
       00932 150C     1     JMP  TEL_GC_CHK_DOING ,
   498            C        	
   499            C        
   500            C      M 	MOV	TEMP0,@0X07
       00933 1807     1     MOV A,@( 7 )
       00934 0055     1     MOV  TEMP0 ,A
   501            C      M 	MOV	TEMP1,@0X30
       00935 1830     1     MOV A,@( 48 )
       00936 0056     1     MOV  TEMP1 ,A
   502            C        	
   503            C      M 	PAGE	#(IIC)
       00937 1E83     1     PAGE ( IIC / 1024 ),
   504 00938 13CA C        	CALL	STOR_COMMAND
   505 00939 1344 C        	CALL	SEND2B_COMMAND
   506 0093A 13AE C        	CALL	RECE2B_RESPOND
   507            C      M 	PAGE	#($)
       0093B 1E82     1     PAGE ( $ / 1024 ),
   508            C        	
   509 0093C 1526 C        	JMP	TEL_GC_CHK_DOING_1	
   510            C        
   511            C        ;---DO TEL-GC end then VP-GC
   512 0093D      C        TEL_GC_CHK_NEXTSTEP:
   513 0093D 1540 C        	JMP	DAM_GC_CHK
   514 0093E      C        TEL_GC_CHK_END:
   515 0093E 0012 C        	RET	
   516            C        ;-------------------------------------------------------------------------------
   517            C        ;	GC_CHK
   518            C        ;	input : no
   519            C        ;	output: no
   520            C        ;-------------------------------------------------------------------------------
   521 0093F      C        GC_CHK:
   522 0093F 00D9 C        	CLR	TEMP4		;declear flag
   523            C        	
   524 00940      C        DAM_GC_CHK:
   525            C      M 	MOV	TEMP0,@0X05
       00940 1805     1     MOV A,@( 5 )
       00941 0055     1     MOV  TEMP0 ,A
   526            C      M 	MOV	TEMP1,@0X30
       00942 1830     1     MOV A,@( 48 )
       00943 0056     1     MOV  TEMP1 ,A
   527            C        	
   528            C      M 	PAGE	#(IIC)
       00944 1E83     1     PAGE ( IIC / 1024 ),
   529 00945 13CA C        	CALL	STOR_COMMAND
   530 00946 1344 C        	CALL	SEND2B_COMMAND
   531 00947 13AE C        	CALL	RECE2B_RESPOND
   532 00948 13E1 C        	CALL	GET_RESPOND
   533            C      M 	PAGE	#($)
       00949 1E82     1     PAGE ( $ / 1024 ),
   534            C        	
   535 0094A 0415 C        	MOV	A,TEMP0
   536            C      M 	JPZ	GC_CHK_END
       0094B 0C83     1     JBC  _STATUS , Z 
       0094C 1557     1     JMP  GC_CHK_END ,
   537            C        
   538            C      M 	MOV	TEMP0,@0X07
       0094D 1807     1     MOV A,@( 7 )
       0094E 0055     1     MOV  TEMP0 ,A
   539            C      M 	MOV	TEMP1,@0X30
       0094F 1830     1     MOV A,@( 48 )
       00950 0056     1     MOV  TEMP1 ,A
   540            C        	
   541            C      M 	PAGE	#(IIC)
       00951 1E83     1     PAGE ( IIC / 1024 ),
   542 00952 13CA C        	CALL	STOR_COMMAND
   543 00953 1344 C        	CALL	SEND2B_COMMAND
   544 00954 13AE C        	CALL	RECE2B_RESPOND
   545            C      M 	PAGE	#($)
       00955 1E82     1     PAGE ( $ / 1024 ),
   546            C        	
   547 00956 1540 C        	JMP	DAM_GC_CHK
   548            C        	
   549 00957      C        GC_CHK_END:
   550 00957 0419 C        	MOV	A,TEMP4		;check declear flag
   551            C      M 	JPZ	SET_DECLTEL_END	
       00958 0C83     1     JBC  _STATUS , Z 
       00959 1567     1     JMP  SET_DECLTEL_END ,
   552 0095A      C        SET_DECLTEL:	
   553            C      M 	MOV	TEMP0,@0XA0
       0095A 18A0     1     MOV A,@( 160 )
       0095B 0055     1     MOV  TEMP0 ,A
   554            C      M 	MOV	TEMP1,@0X5F
       0095C 185F     1     MOV A,@( 95 )
       0095D 0056     1     MOV  TEMP1 ,A
   555            C      M 	MOV	TEMP2,@CTEL_MNUM
       0095E 1807     1     MOV A,@( CTEL_MNUM )
       0095F 0057     1     MOV  TEMP2 ,A
   556            C      M 	MOV	TEMP3,@0
       00960 1800     1     MOV A,@( 0 )
       00961 0058     1     MOV  TEMP3 ,A
   557            C        	
   558            C      M 	PAGE	#(IIC)
       00962 1E83     1     PAGE ( IIC / 1024 ),
   559 00963 13CA C        	CALL	STOR_COMMAND
   560 00964 1362 C        	CALL	SEND4B_COMMAND
   561 00965 13AE C        	CALL	RECE2B_RESPOND
   562            C      M 	PAGE	#($)
       00966 1E82     1     PAGE ( $ / 1024 ),
   563            C        	
   564 00967      C        SET_DECLTEL_END:
   565            C        		
   566 00967 0012 C        	RET
   567            C        ;-------------------------------------------------------------------------------
   568 00968      C        OGM_SELECT:
   569 00968 1569 C        	JMP	OGM_STATUS
   570            C        ;-------------------------------------------------------------------------------
   571            C        ;	OGM_STATUS
   572            C        ;	input : acc = the OGM_ID
   573            C        ;	output: acc = the MSG_ID with current mbox type-2
   574            C        ;-------------------------------------------------------------------------------
   575 00969      C        OGM_STATUS:
   576            C        ;---set OGM_ID = mbox-id
   577 00969 0055 C        	MOV	TEMP0,A
   578            C      M 	MOV	TEMP1,@0XD0
       0096A 18D0     1     MOV A,@( 208 )
       0096B 0056     1     MOV  TEMP1 ,A
   579            C        
   580            C      M 	PAGE	#(IIC)
       0096C 1E83     1     PAGE ( IIC / 1024 ),
   581 0096D 13CA C        	CALL	STOR_COMMAND
   582 0096E 1344 C        	CALL	SEND2B_COMMAND
   583 0096F 13AE C        	CALL	RECE2B_RESPOND
   584            C        	;PAGE	#($)	
   585            C        ;---OGM	type
   586            C      M 	MOV	TEMP0,@0x02
       00970 1802     1     MOV A,@( 2 )
       00971 0055     1     MOV  TEMP0 ,A
   587            C      M 	MOV	TEMP1,@0XD2
       00972 18D2     1     MOV A,@( 210 )
       00973 0056     1     MOV  TEMP1 ,A
   588            C        	;PAGE	#(IIC)
   589 00974 13CA C        	CALL	STOR_COMMAND
   590 00975 1344 C        	CALL	SEND2B_COMMAND
   591 00976 13AE C        	CALL	RECE2B_RESPOND
   592            C        	;PAGE	#($)
   593            C        ;---Get the number of total message with current mbox current type
   594            C      M 	MOV	TEMP0,@0x00
       00977 1800     1     MOV A,@( 0 )
       00978 0055     1     MOV  TEMP0 ,A
   595            C      M 	MOV	TEMP1,@0X30
       00979 1830     1     MOV A,@( 48 )
       0097A 0056     1     MOV  TEMP1 ,A
   596            C        	;PAGE	#(IIC)
   597 0097B 13CA C        	CALL	STOR_COMMAND
   598 0097C 1344 C        	CALL	SEND2B_COMMAND	
   599 0097D 13AE C        	CALL	RECE2B_RESPOND
   600 0097E 13E1 C        	CALL	GET_RESPOND
   601            C      M 	PAGE	#($)
       0097F 1E82     1     PAGE ( $ / 1024 ),
   602            C        		
   603 00980 0415 C        	MOV	A,TEMP0
   604            C        
   605 00981 0012 C        	RET
   606            C        ;-------------------------------------------------------------------------------
   607            C        ;	VPMSG_CHK
   608            C        ;	input : 
   609            C        ;	output: B1_MSG_N/B1_MSG_T/DAM_FLAG(7,6,5)
   610            C        ;
   611            C        ;-------------------------------------------------------------------------------
   612 00982      C        VPMSG_CHK:
   613            C        ;---set mbox-id=1
   614            C      M 	MOV	TEMP0,@0x01
       00982 1801     1     MOV A,@( 1 )
       00983 0055     1     MOV  TEMP0 ,A
   615            C      M 	MOV	TEMP1,@0XD0
       00984 18D0     1     MOV A,@( 208 )
       00985 0056     1     MOV  TEMP1 ,A
   616            C      M 	PAGE	#(IIC)
       00986 1E83     1     PAGE ( IIC / 1024 ),
   617 00987 13CA C        	CALL	STOR_COMMAND
   618 00988 1344 C        	CALL	SEND2B_COMMAND
   619            C        	;PAGE	#($)
   620            C        ;---ICM	type
   621 00989 00D5 C        	CLR	TEMP0
   622            C      M 	MOV	TEMP1,@0XD2
       0098A 18D2     1     MOV A,@( 210 )
       0098B 0056     1     MOV  TEMP1 ,A
   623            C        	;PAGE	#(IIC)
   624 0098C 13CA C        	CALL	STOR_COMMAND
   625 0098D 1344 C        	CALL	SEND2B_COMMAND
   626            C        	;PAGE	#($)
   627            C        ;---Get the number of total message with  mbox-1 current type
   628            C      M 	MOV	TEMP0,@0x00
       0098E 1800     1     MOV A,@( 0 )
       0098F 0055     1     MOV  TEMP0 ,A
   629            C      M 	MOV	TEMP1,@0X30
       00990 1830     1     MOV A,@( 48 )
       00991 0056     1     MOV  TEMP1 ,A
   630            C        	;PAGE	#(IIC)
   631 00992 13CA C        	CALL	STOR_COMMAND
   632 00993 1344 C        	CALL	SEND2B_COMMAND	
   633 00994 13AE C        	CALL	RECE2B_RESPOND
   634 00995 13E1 C        	CALL	GET_RESPOND
   635            C        	;PAGE	#($)
   636            C      M 	BANK	1
       00996 0B84     1     BS  _RSR , 6 
       00997 09C4     1     BC  _RSR , 7 
   637            C      M 	MOV	B1_MSG_T,TEMP0
       00998 0415     1     MOV A, TEMP0 
       00999 0070     1     MOV  B1_MSG_T ,A
   638            C        ;---Get the number of new message with mbox-1 current type
   639            C      M 	MOV	TEMP0,@0x01
       0099A 1801     1     MOV A,@( 1 )
       0099B 0055     1     MOV  TEMP0 ,A
   640            C      M 	MOV	TEMP1,@0X30
       0099C 1830     1     MOV A,@( 48 )
       0099D 0056     1     MOV  TEMP1 ,A
   641            C        	;PAGE	#(IIC)
   642 0099E 13CA C        	CALL	STOR_COMMAND
   643 0099F 1344 C        	CALL	SEND2B_COMMAND	
   644 009A0 13AE C        	CALL	RECE2B_RESPOND
   645 009A1 13E1 C        	CALL	GET_RESPOND
   646            C        	;PAGE	#($)
   647            C      M 	MOV	B1_MSG_N,TEMP0
       009A2 0415     1     MOV A, TEMP0 
       009A3 0071     1     MOV  B1_MSG_N ,A
   648            C        ;---Get the available time in Flash
   649            C      M 	MOV	TEMP0,@0x03
       009A4 1803     1     MOV A,@( 3 )
       009A5 0055     1     MOV  TEMP0 ,A
   650            C      M 	MOV	TEMP1,@0X30
       009A6 1830     1     MOV A,@( 48 )
       009A7 0056     1     MOV  TEMP1 ,A
   651            C        	;PAGE	#(IIC)
   652 009A8 13CA C        	CALL	STOR_COMMAND
   653 009A9 1344 C        	CALL	SEND2B_COMMAND	
   654 009AA 13AE C        	CALL	RECE2B_RESPOND
   655 009AB 13E1 C        	CALL	GET_RESPOND
   656            C      M 	PAGE	#($)
       009AC 1E82     1     PAGE ( $ / 1024 ),
   657            C        ;---------------------------------------
   658 009AD      C        VPMSG_CHK_0:
   659 009AD 0416 C        	MOV	A,TEMP1
   660            C      M 	JPNZ	VPMSG_CHK_0_1
       009AE 0E83     1     JBS  _STATUS , Z 
       009AF 15B6     1     JMP  VPMSG_CHK_0_1 ,
   661 009B0 0415 C        	MOV	A,TEMP0
   662 009B1 1D03 C        	SUB	A,@3
   663            C      M 	JPNC	VPMSG_CHK_0_1
       009B2 0E03     1     JBS  _STATUS , C 
       009B3 15B6     1     JMP  VPMSG_CHK_0_1 ,
   664            C        
   665            C      M 	SET_FULL_FLAG
       009B4 0B54     1     BS  DAM_FLAG , 5 
   666            C        	
   667 009B5 15B7 C        	JMP	VPMSG_CHK_0_2
   668 009B6      C        VPMSG_CHK_0_1:
   669            C        	
   670            C      M 	RESET_FULL_FLAG
       009B6 0954     1     BC  DAM_FLAG , 5 
   671 009B7      C        VPMSG_CHK_0_2:		
   672            C        ;---------------------------------------
   673 009B7      C        VPMSG_CHK_1:
   674 009B7 0431 C        	MOV	A,B1_MSG_N
   675            C      M 	JPZ	VPMSG_CHK_1_1
       009B8 0C83     1     JBC  _STATUS , Z 
       009B9 15BC     1     JMP  VPMSG_CHK_1_1 ,
   676            C        	
   677            C      M 	SET_NEWVP_FLAG
       009BA 0BD4     1     BS  DAM_FLAG , 7 
   678 009BB 15BD C        	JMP	VPMSG_CHK_1_2
   679 009BC      C        VPMSG_CHK_1_1:
   680            C      M 	RESET_NEWVP_FLAG
       009BC 09D4     1     BC  DAM_FLAG , 7 
   681 009BD      C        VPMSG_CHK_1_2:	
   682            C        ;---------------------------------------
   683 009BD      C        VPMSG_CHK_2:
   684 009BD 0430 C        	MOV	A,B1_MSG_T
   685            C      M 	JPZ	VPMSG_CHK_2_1
       009BE 0C83     1     JBC  _STATUS , Z 
       009BF 15C6     1     JMP  VPMSG_CHK_2_1 ,
   686            C      M 	SET_VPEXIST_FLAG
       009C0 0B94     1     BS  DAM_FLAG , 6 
   687            C        	
   688 009C1 1D3B C        	SUB	A,@59
   689            C      M 	JPC	VPMSG_CHK_2_2
       009C2 0C03     1     JBC  _STATUS , C 
       009C3 15C7     1     JMP  VPMSG_CHK_2_2 ,
   690            C      M 	SET_FULL_FLAG
       009C4 0B54     1     BS  DAM_FLAG , 5 
   691 009C5 15C7 C        	JMP	VPMSG_CHK_2_2
   692 009C6      C        VPMSG_CHK_2_1:
   693            C      M 	RESET_VPEXIST_FLAG
       009C6 0994     1     BC  DAM_FLAG , 6 
   694 009C7      C        VPMSG_CHK_2_2:	
   695            C        ;---------------------------------------
   696 009C7 0012 C        	RET
   697            C        
   698            C        ;-------------------------------------------------------------------------------
   699            C        ;	ANNOUNCE_NUM
   700            C        ;	input : acc = the NUM
   701            C        ;	output: 
   702            C        ;-------------------------------------------------------------------------------
   703 009C8      C        ANNOUNCE_NUM:
   704            C        	
   705 009C8 0056 C        	MOV	TEMP1,A
   706 009C9 1D14 C        	SUB	A,@20
   707            C      M 	JPC	ANNOUNCE_NUM_LESS21
       009CA 0C03     1     JBC  _STATUS , C 
       009CB 15E6     1     JMP  ANNOUNCE_NUM_LESS21 ,
   708            C        	
   709 009CC 0416 C        	MOV	A,TEMP1
   710 009CD 100F C        	CALL	HEX_DGT
   711 009CE 0056 C        	MOV	TEMP1,A
   712 009CF 0057 C        	MOV	TEMP2,A
   713            C        	
   714 009D0 1A0F C        	AND	A,@0X0F
   715            C      M 	JPZ	ANNOUNCE_NUM_2
       009D1 0C83     1     JBC  _STATUS , Z 
       009D2 15E0     1     JMP  ANNOUNCE_NUM_2 ,
   716            C        	
   717 009D3      C        ANNOUNCE_NUM_1:	
   718 009D3 0716 C        	SWAPA	TEMP1		;十位
   719 009D4 1A0F C        	AND	A,@0X0F
   720 009D5 1F17 C        	ADD	A,@23
   721            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       009D6 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       009D7 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       009D8 1E82     2     PAGE ( $ / 1024 ),
   722            C        	
   723 009D9 0417 C        	MOV	A,TEMP2		;个位
   724 009DA 1A0F C        	AND	A,@0X0F
   725 009DB 1F01 C        	ADD	A,@1
   726            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       009DC 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       009DD 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       009DE 1E82     2     PAGE ( $ / 1024 ),
   727            C        	
   728 009DF 0012 C        	RET
   729 009E0      C        ANNOUNCE_NUM_2:			;个位为0
   730 009E0 0716 C        	SWAPA	TEMP1
   731 009E1 1F12 C        	ADD	A,@18
   732            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       009E2 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       009E3 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       009E4 1E82     2     PAGE ( $ / 1024 ),
   733            C        
   734 009E5 0012 C        	RET	
   735 009E6      C        ANNOUNCE_NUM_LESS21:		;0..20
   736 009E6 0516 C        	INCA	TEMP1
   737            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       009E7 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       009E8 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       009E9 1E82     2     PAGE ( $ / 1024 ),
   738            C        
   739 009EA 0012 C        	RET
   740            C        
   741            C        ;-------------------------------------------------------------------------------
   742            C        ;	Function : PSWORD_CHK
   743            C        ;	Password check
   744            C        ;	Input  : ACCH = VALUE(DTMF_VAL)
   745            C        ;	Output : _STATUS.C = 1/0 - password in ok/Not
   746            C        ;
   747            C        ;-------------------------------------------------------------------------------
   748 009EB      C        PSWORD_CHK:
   749 009EB 0055 C        	MOV	TEMP0,A
   750 009EC 1D10 C        	SUB	A,@NUM_0
   751            C        /*
   752            C        	JPC	PSWORD_CHK_0
   753            C        	MOV	TEMP0,A
   754            C        	SUB	A,@NUM_A
   755            C        	JPC	
   756            C        PSWORD_CHK_0:
   757            C        	
   758            C        PSWORD_CHK_1:
   759            C        */
   760            C        ;---
   761 009ED 0734 C        	SWAPA	B1_MIN_REG
   762 009EE 1AF0 C        	AND	A,@0XF0
   763 009EF 0074 C        	MOV	B1_MIN_REG,A	;B1_MIN_REG(3..0) => B1_MIN_REG(7..4)
   764            C        	
   765 009F0 0733 C        	SWAPA	B1_SEC_REG
   766 009F1 1A0F C        	AND	A,@0X0F
   767 009F2 0274 C        	OR	B1_MIN_REG,A	;B1_SEC_REG(7..4) => B1_MIN_REG(3..0)
   768            C        	
   769 009F3 0715 C        	SWAPA	TEMP0
   770 009F4 1AF0 C        	AND	A,@0XF0
   771 009F5 0073 C        	MOV	B1_SEC_REG,A	;TEMP0 => B1_SEC_REG(3..0)	
   772            C        				;PSWORD_TMP keep the new input digit string
   773            C        ;-------------------------------------------------------------------------------
   774 009F6 0427 C        	MOV	A,B1_12PSWORD
   775 009F7 0334 C        	XOR	A,B1_MIN_REG
   776            C      M 	JPNZ	PSWORD_NOT_IN
       009F8 0E83     1     JBS  _STATUS , Z 
       009F9 1601     1     JMP  PSWORD_NOT_IN ,
   777            C        
   778 009FA 0428 C        	MOV	A,B1_34PSWORD
   779 009FB 0333 C        	XOR	A,B1_SEC_REG
   780 009FC 1AF0 C        	AND	A,@0XF0
   781            C      M 	JPNZ	PSWORD_NOT_IN
       009FD 0E83     1     JBS  _STATUS , Z 
       009FE 1601     1     JMP  PSWORD_NOT_IN ,
   782            C        
   783 009FF      C        PSWORD_IN_OK:
   784            C      M 	SETC
       009FF 0A03     1     BS  _STATUS , C 
   785 00A00 0012 C                RET
   786            C        
   787 00A01      C        PSWORD_NOT_IN:		;the intput not digital or wrong remote access code
   788            C      M 	CLRC
       00A01 0803     1     BC  _STATUS , C 
   789 00A02 0012 C                RET
   790            C        ;-------------------------------------------------------------------------------
   791            C        ;	DIALKEY_CHK
   792            C        ;	input	:no
   793            C        ;	output	:C = 1/0 - num-key/not
   794            C        ;		 ACC = the VALUE
   795            C        ;-------------------------------------------------------------------------------
   796 00A03      C        DIALKEY_CHK:		;Key table
   797 00A03 1840 C        	MOV	A,@CKEY_1
   798            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A04 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A05 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A06 1E82     2     PAGE ( $ / 1024 ),
   799            C      M 	JPNC	DIALKEY_CHK_1	;1
       00A07 0E03     1     JBS  _STATUS , C 
       00A08 164D     1     JMP  DIALKEY_CHK_1 ,
   800 00A09 1834 C        	MOV	A,@CKEY_2
   801            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A0A 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A0B 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A0C 1E82     2     PAGE ( $ / 1024 ),
   802            C      M 	JPNC	DIALKEY_CHK_2	;2
       00A0D 0E03     1     JBS  _STATUS , C 
       00A0E 1650     1     JMP  DIALKEY_CHK_2 ,
   803 00A0F 1830 C        	MOV	A,@CKEY_3
   804            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A10 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A11 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A12 1E82     2     PAGE ( $ / 1024 ),
   805            C      M 	JPNC	DIALKEY_CHK_3	;3
       00A13 0E03     1     JBS  _STATUS , C 
       00A14 1653     1     JMP  DIALKEY_CHK_3 ,
   806 00A15 1841 C        	MOV	A,@CKEY_4
   807            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A16 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A17 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A18 1E82     2     PAGE ( $ / 1024 ),
   808            C      M 	JPNC	DIALKEY_CHK_4	;4
       00A19 0E03     1     JBS  _STATUS , C 
       00A1A 1656     1     JMP  DIALKEY_CHK_4 ,
   809 00A1B 1835 C        	MOV	A,@CKEY_5
   810            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A1C 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A1D 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A1E 1E82     2     PAGE ( $ / 1024 ),
   811            C      M 	JPNC	DIALKEY_CHK_5	;5
       00A1F 0E03     1     JBS  _STATUS , C 
       00A20 1659     1     JMP  DIALKEY_CHK_5 ,
   812 00A21 1831 C        	MOV	A,@CKEY_6
   813            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A22 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A23 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A24 1E82     2     PAGE ( $ / 1024 ),
   814            C      M 	JPNC	DIALKEY_CHK_6	;6
       00A25 0E03     1     JBS  _STATUS , C 
       00A26 165C     1     JMP  DIALKEY_CHK_6 ,
   815 00A27 1842 C        	MOV	A,@CKEY_7
   816            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A28 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A29 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A2A 1E82     2     PAGE ( $ / 1024 ),
   817            C      M 	JPNC	DIALKEY_CHK_7	;7
       00A2B 0E03     1     JBS  _STATUS , C 
       00A2C 165F     1     JMP  DIALKEY_CHK_7 ,
   818 00A2D 1836 C        	MOV	A,@CKEY_8
   819            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A2E 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A2F 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A30 1E82     2     PAGE ( $ / 1024 ),
   820            C      M 	JPNC	DIALKEY_CHK_8	;8
       00A31 0E03     1     JBS  _STATUS , C 
       00A32 1662     1     JMP  DIALKEY_CHK_8 ,
   821 00A33 1832 C        	MOV	A,@CKEY_9
   822            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A34 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A35 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A36 1E82     2     PAGE ( $ / 1024 ),
   823            C      M 	JPNC	DIALKEY_CHK_9	;9
       00A37 0E03     1     JBS  _STATUS , C 
       00A38 1665     1     JMP  DIALKEY_CHK_9 ,
   824 00A39 1843 C        	MOV	A,@CKEY_E
   825            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A3A 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A3B 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A3C 1E82     2     PAGE ( $ / 1024 ),
   826            C      M 	JPNC	DIALKEY_CHK_E	;*
       00A3D 0E03     1     JBS  _STATUS , C 
       00A3E 1668     1     JMP  DIALKEY_CHK_E ,
   827 00A3F 1837 C        	MOV	A,@CKEY_0
   828            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A40 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A41 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A42 1E82     2     PAGE ( $ / 1024 ),
   829            C      M 	JPNC	DIALKEY_CHK_0	;0
       00A43 0E03     1     JBS  _STATUS , C 
       00A44 166B     1     JMP  DIALKEY_CHK_0 ,
   830 00A45 1833 C        	MOV	A,@CKEY_F
   831            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       00A46 1E81     2     PAGE ( KEY_CHK / 1024 ),
       00A47 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00A48 1E82     2     PAGE ( $ / 1024 ),
   832            C      M 	JPNC	DIALKEY_CHK_F	;#
       00A49 0E03     1     JBS  _STATUS , C 
       00A4A 166E     1     JMP  DIALKEY_CHK_F ,
   833            C        
   834            C      M 	CLRC
       00A4B 0803     1     BC  _STATUS , C 
   835            C        
   836 00A4C 0012 C        	RET
   837            C        ;---------------------------------------
   838 00A4D      C        DIALKEY_CHK_1:
   839            C      M 	MOV	TEMP0,@NUM_1
       00A4D 1811     1     MOV A,@( NUM_1 )
       00A4E 0055     1     MOV  TEMP0 ,A
   840 00A4F 1670 C        	JMP	DIALKEY_CHK_NUM
   841 00A50      C        DIALKEY_CHK_2:
   842            C      M 	MOV	TEMP0,@NUM_2
       00A50 1812     1     MOV A,@( NUM_2 )
       00A51 0055     1     MOV  TEMP0 ,A
   843 00A52 1670 C        	JMP	DIALKEY_CHK_NUM
   844 00A53      C        DIALKEY_CHK_3:
   845            C      M 	MOV	TEMP0,@NUM_3
       00A53 1813     1     MOV A,@( NUM_3 )
       00A54 0055     1     MOV  TEMP0 ,A
   846 00A55 1670 C        	JMP	DIALKEY_CHK_NUM
   847 00A56      C        DIALKEY_CHK_4:
   848            C      M 	MOV	TEMP0,@NUM_4
       00A56 1814     1     MOV A,@( NUM_4 )
       00A57 0055     1     MOV  TEMP0 ,A
   849 00A58 1670 C        	JMP	DIALKEY_CHK_NUM
   850 00A59      C        DIALKEY_CHK_5:
   851            C      M 	MOV	TEMP0,@NUM_5
       00A59 1815     1     MOV A,@( NUM_5 )
       00A5A 0055     1     MOV  TEMP0 ,A
   852 00A5B 1670 C        	JMP	DIALKEY_CHK_NUM
   853 00A5C      C        DIALKEY_CHK_6:
   854            C      M 	MOV	TEMP0,@NUM_6
       00A5C 1816     1     MOV A,@( NUM_6 )
       00A5D 0055     1     MOV  TEMP0 ,A
   855 00A5E 1670 C        	JMP	DIALKEY_CHK_NUM
   856 00A5F      C        DIALKEY_CHK_7:
   857            C      M 	MOV	TEMP0,@NUM_7
       00A5F 1817     1     MOV A,@( NUM_7 )
       00A60 0055     1     MOV  TEMP0 ,A
   858 00A61 1670 C        	JMP	DIALKEY_CHK_NUM
   859 00A62      C        DIALKEY_CHK_8:
   860            C      M 	MOV	TEMP0,@NUM_8
       00A62 1818     1     MOV A,@( NUM_8 )
       00A63 0055     1     MOV  TEMP0 ,A
   861 00A64 1670 C        	JMP	DIALKEY_CHK_NUM
   862 00A65      C        DIALKEY_CHK_9:
   863            C      M 	MOV	TEMP0,@NUM_9
       00A65 1819     1     MOV A,@( NUM_9 )
       00A66 0055     1     MOV  TEMP0 ,A
   864 00A67 1670 C        	JMP	DIALKEY_CHK_NUM
   865 00A68      C        DIALKEY_CHK_E:
   866            C      M 	MOV	TEMP0,@NUM_XIN
       00A68 180A     1     MOV A,@( NUM_XIN )
       00A69 0055     1     MOV  TEMP0 ,A
   867 00A6A 1670 C        	JMP	DIALKEY_CHK_NUM
   868 00A6B      C        DIALKEY_CHK_0:
   869            C      M 	MOV	TEMP0,@NUM_0
       00A6B 1810     1     MOV A,@( NUM_0 )
       00A6C 0055     1     MOV  TEMP0 ,A
   870 00A6D 1670 C        	JMP	DIALKEY_CHK_NUM
   871 00A6E      C        DIALKEY_CHK_F:
   872            C      M 	MOV	TEMP0,@NUM_JIN
       00A6E 1803     1     MOV A,@( NUM_JIN )
       00A6F 0055     1     MOV  TEMP0 ,A
   873            C        	;JMP	DIALKEY_CHK_NUM
   874            C        ;-----------------------------
   875 00A70      C        DIALKEY_CHK_NUM:
   876 00A70 0415 C        	MOV	A,TEMP0
   877            C        	
   878            C      M 	SETC
       00A71 0A03     1     BS  _STATUS , C 
   879            C        	
   880 00A72 0012 C        	RET
   881            C        
   882            C        ;-------------------------------------------------------------------------------
   883            C        
   884            C        
   598                     INCLUDE		"sys_pro.dt"
     1            C        ;-------------------------------------------------------------------------------
     2 00A73      C        SYS_MSG:
     3            C        
     4 00A73 1883 C        	MOV 	A,@CSEG_END
     5 00A74 0120 C        	SUB 	A,B1_MSG
     6            C      M 	JPZ 	SYS_SEG_END
       00A75 0C83     1     JBC  _STATUS , Z 
       00A76 16E2     1     JMP  SYS_SEG_END ,
     7 00A77 1884 C        	MOV 	A,@CBEEP_END
     8 00A78 0120 C        	SUB 	A,B1_MSG
     9            C      M 	JPZ 	SYS_BEEP_END
       00A79 0C83     1     JBC  _STATUS , Z 
       00A7A 16E2     1     JMP  SYS_BEEP_END ,
    10            C        	
    11 00A7B 188F C        	MOV 	A,@CMSG_RTC
    12 00A7C 0120 C        	SUB 	A,B1_MSG
    13            C      M 	JPZ 	SYS_MSG_RTC
       00A7D 0C83     1     JBC  _STATUS , Z 
       00A7E 16CE     1     JMP  SYS_MSG_RTC ,
    14            C        	
    15 00A7F 189C C        	MOV 	A,@CRING_OK
    16 00A80 0120 C        	SUB 	A,B1_MSG
    17            C      M 	JPZ 	SYS_MSG_ANS
       00A81 0C83     1     JBC  _STATUS , Z 
       00A82 1699     1     JMP  SYS_MSG_ANS ,
    18            C        
    19 00A83 18CA C        	MOV 	A,@CRMT_OK
    20 00A84 0120 C        	SUB 	A,B1_MSG
    21            C      M 	JPZ 	SYS_MSG_RMT
       00A85 0C83     1     JBC  _STATUS , Z 
       00A86 168F     1     JMP  SYS_MSG_RMT ,
    22            C        
    23 00A87 18A7 C        	MOV 	A,@CUPDT_MENU
    24 00A88 0120 C        	SUB 	A,B1_MSG
    25            C      M 	JPZ 	SYS_MSG_UPDATEPARA
       00A89 0C83     1     JBC  _STATUS , Z 
       00A8A 16A3     1     JMP  SYS_MSG_UPDATEPARA ,
    26            C        
    27 00A8B      C        SYS_MSG_NO:
    28            C      M 	CLRC
       00A8B 0803     1     BC  _STATUS , C 
    29 00A8C 0012 C        	RET
    30 00A8D      C        SYS_MSG_YES:
    31            C      M 	SETC
       00A8D 0A03     1     BS  _STATUS , C 
    32            C        
    33 00A8E 0012 C        	RET
    34            C        ;---------------------------------------
    35 00A8F      C        SYS_MSG_RMT:
    36 00A8F 1890 C        	MOV	A,@CMSG_INIT
    37            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00A90 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00A91 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00A92 1E82     2     PAGE ( $ / 1024 ),
    38            C        
    39 00A93 1809 C        	MOV	A,@CGOTO_REMOTE
    40            C      M 	LCALL	PUSH_PRO
                      2  M  PAGE #( PUSH_PRO ),
       00A94 1E8D     2     PAGE ( PUSH_PRO / 1024 ),
       00A95 1338     1     CALL ( PUSH_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       00A96 1E82     2     PAGE ( $ / 1024 ),
    41 00A97 00E1 C        	CLR	B1_PRO_VAR
    42            C        
    43 00A98 168D C        	JMP	SYS_MSG_YES
    44            C        ;---------------------------------------
    45 00A99      C        SYS_MSG_ANS:			;Start answer
    46 00A99 1890 C        	MOV	A,@CMSG_INIT
    47            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00A9A 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00A9B 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00A9C 1E82     2     PAGE ( $ / 1024 ),
    48            C        
    49 00A9D 1808 C        	MOV	A,@CGOTO_ANSWER
    50            C      M 	LCALL	PUSH_PRO
                      2  M  PAGE #( PUSH_PRO ),
       00A9E 1E8D     2     PAGE ( PUSH_PRO / 1024 ),
       00A9F 1338     1     CALL ( PUSH_PRO % 1024 ),
                      2  M  PAGE #( $ ),
       00AA0 1E82     2     PAGE ( $ / 1024 ),
    51 00AA1 00E1 C        	CLR	B1_PRO_VAR
    52            C        
    53 00AA2 168D C        	JMP	SYS_MSG_YES
    54            C        ;---------------------------------------
    55 00AA3      C        SYS_MSG_UPDATEPARA:	;Update parameter after Exit menu/Damonoff/OGMsel
    56            C        ;---Save the confirm data
    57            C      M 	PAGE	#(INIT_DAM_FUNC)
       00AA3 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
    58 00AA4 11C1 C        	CALL	INIT_DAM_FUNC
    59 00AA5 1812 C        	MOV	A,@CGROUP_DATT
    60            C      M 	PAGE	#(SET_GROUP)
       00AA6 1E83     1     PAGE ( SET_GROUP / 1024 ),
    61 00AA7 1241 C        	CALL	SET_GROUP
    62            C      M 	PAGE	#(DAT_WRITE)
       00AA8 1E83     1     PAGE ( DAT_WRITE / 1024 ),
    63            C        ;---Language
    64 00AA9 0424 C        	MOV	A,B1_LANGUAGE	
    65 00AAA 124F C        	CALL	DAT_WRITE	;Byte1
    66            C        ;---Flash
    67 00AAB 0425 C        	MOV	A,B1_FLASH	
    68 00AAC 124F C        	CALL	DAT_WRITE	;Byte2
    69            C        ;---Contrasrt
    70 00AAD 0423 C        	MOV	A,B1_CONTRAST	
    71 00AAE 124F C        	CALL	DAT_WRITE	;Byte3
    72            C        ;---Length+ringcnt
    73 00AAF 0426 C        	MOV	A,B1_RING_NUM	
    74 00AB0 124F C        	CALL	DAT_WRITE	;Byte4
    75            C        ;---Ps1234
    76 00AB1 0427 C        	MOV	A,B1_12PSWORD	
    77 00AB2 124F C        	CALL	DAT_WRITE	;Byte5
    78 00AB3 0428 C        	MOV	A,B1_34PSWORD	
    79 00AB4 124F C        	CALL	DAT_WRITE	;Byte6
    80            C        ;---HD(SYS_FLAG,4)
    81 00AB5 0412 C        	MOV	A,SYS_FLAG
    82 00AB6 1A08 C        	AND	A,@0X08
    83 00AB7 124F C        	CALL	DAT_WRITE	;Byte7
    84            C        ;---ON/OFF - OGM1/2(DAM_FLAG,3,2)
    85 00AB8 0414 C        	MOV	A,DAM_FLAG
    86 00AB9 1A0C C        	AND	A,@0X0C
    87 00ABA 124F C        	CALL	DAT_WRITE	;Byte8
    88            C        ;---	
    89 00ABB 1253 C        	CALL	DAT_WRITE_STOP
    90            C        ;MENU_FUNC_DELOLD:
    91 00ABC      C        SYS_MSG_DELOLDPARA:
    92            C      M 	LCALL	GET_TELT
                      2  M  PAGE #( GET_TELT ),
       00ABC 1E83     2     PAGE ( GET_TELT / 1024 ),
       00ABD 1246     1     CALL ( GET_TELT % 1024 ),
                      2  M  PAGE #( $ ),
       00ABE 1E82     2     PAGE ( $ / 1024 ),
    93 00ABF 0415 C        	MOV	A,TEMP0
    94 00AC0 1D01 C        	SUB	A,@1
    95            C      M 	JPC	SYS_MSG_DELOLDPARA_END
       00AC1 0C03     1     JBC  _STATUS , C 
       00AC2 16C8     1     JMP  SYS_MSG_DELOLDPARA_END ,
    96            C        	
    97 00AC3 1801 C        	MOV	A,@1
    98            C      M 	LCALL	DEL_TEL
                      2  M  PAGE #( DEL_TEL ),
       00AC4 1E83     2     PAGE ( DEL_TEL / 1024 ),
       00AC5 124B     1     CALL ( DEL_TEL % 1024 ),
                      2  M  PAGE #( $ ),
       00AC6 1E82     2     PAGE ( $ / 1024 ),
    99 00AC7 16BC C        	JMP	SYS_MSG_DELOLDPARA
   100 00AC8      C        SYS_MSG_DELOLDPARA_END:
   101            C      M 	LCALL	TEL_GC_CHK
                      2  M  PAGE #( TEL_GC_CHK ),
       00AC8 1E82     2     PAGE ( TEL_GC_CHK / 1024 ),
       00AC9 10FC     1     CALL ( TEL_GC_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00ACA 1E82     2     PAGE ( $ / 1024 ),
   102            C        
   103 00ACB 1890 C        	MOV	A,@CMSG_INIT
   104 00ACC 0060 C        	MOV	B1_MSG,A
   105            C        	;JMP	SYS_MSG_YES	;???
   106 00ACD 168B C        	JMP	SYS_MSG_NO	;!!!
   107            C        ;---------------------------------------
   108            C        ;SYS_MSG_DCH:
   109            C        	;JMP	SYS_MSG_YES
   110            C        ;---------------------------------------
   111            C        ;SYS_MSG_DCL:
   112            C        	;JMP	SYS_MSG_YES
   113            C        ;---------------------------------------
   114 00ACE      C        SYS_MSG_RTC:
   115            C        ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   116            C      M 	LCALL	UPDATE_DATETIME
                      2  M  PAGE #( UPDATE_DATETIME ),
       00ACE 1E82     2     PAGE ( UPDATE_DATETIME / 1024 ),
       00ACF 10AD     1     CALL ( UPDATE_DATETIME % 1024 ),
                      2  M  PAGE #( $ ),
       00AD0 1E82     2     PAGE ( $ / 1024 ),
   117            C        	
   118            C      M 	MOV	_RC,@(LCD_CTRL+OFFSETSTMP)
       00AD1 1881     1     MOV A,@(( LCD_CTRL + OFFSETSTMP ))
       00AD2 004C     1     MOV  _RC ,A
   119 00AD3 0B4D C        	BS	_RD,5
   120 00AD4 040D C        	MOV	A,_RD
   121 00AD5 1B04 C        	XOR	A,@(1<<2)
   122 00AD6 004D C        	MOV	_RD,A	
   123            C        
   124            C      M 	MOV	_RC,@LCD_CTRL
       00AD7 1880     1     MOV A,@( LCD_CTRL )
       00AD8 004C     1     MOV  _RC ,A
   125 00AD9 0B0D C        	BS	_RD,4
   126 00ADA 0B4D C        	BS	_RD,5
   127            C        ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   128 00ADB 168D C        	JMP	SYS_MSG_YES
   129            C        ;-------------------------------------------------------------------------------
   130 00ADC      C        SYS_SEG_END0:
   131            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       00ADC 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       00ADD 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       00ADE 1E82     2     PAGE ( $ / 1024 ),
   132 00ADF 1885 C        	MOV	A,@CVP_END
   133 00AE0 0060 C        	MOV	B1_MSG,A		;通知系统播放完毕
   134 00AE1 168B C        	JMP	SYS_MSG_NO
   135            C        
   136 00AE2      C        SYS_SEG_END:
   137 00AE2      C        SYS_BEEP_END:
   138            C      M 	LCALL	GET_VP
                      2  M  PAGE #( GET_VP ),
       00AE2 1E83     2     PAGE ( GET_VP / 1024 ),
       00AE3 10A9     1     CALL ( GET_VP % 1024 ),
                      2  M  PAGE #( $ ),
       00AE4 1E82     2     PAGE ( $ / 1024 ),
   139            C      M 	JPC	SYS_SEG_END0
       00AE5 0C03     1     JBC  _STATUS , C 
       00AE6 16DC     1     JMP  SYS_SEG_END0 ,
   140            C      M 	LJMP	VP_START	;!!!must SETC before return(for stack)
                      2  M  PAGE #( VP_START ),
       00AE7 1E83     2     PAGE ( VP_START / 1024 ),
       00AE8 1400     1     JMP ( VP_START % 1024 ),
   141            C        	;JMP	SYS_MSG_YES
   142            C        ;-------------------------------------------------------------------------------
   143            C        ;       Function : VOX_CHK
   144            C        ;
   145            C        ;       The general routine used in remote line operation. It checks VOX
   146            C        ;       Input  : TEMP0,TEMP1 (Record/LINE Mode RESPOND)
   147            C        ;       Output : C = 1/0  -  VOX found over 8.0 sec/no
   148            C        ;
   149            C        ;	!!!Can't change TEMP0,TEMP1
   150            C        ;-------------------------------------------------------------------------------
   151 00AE9      C        VOX_CHK:
   152            C      M 	BANK	0
       00AE9 0984     1     BC  _RSR , 6 
       00AEA 09C4     1     BC  _RSR , 7 
   153            C      M 	JPNB	TEMP0,6,VOX_CHK_OFF
       00AEB 0F95     1     JBS  TEMP0 , 6 
       00AEC 16F2     1     JMP  VOX_CHK_OFF ,
   154 00AED      C        VOX_CHK_ON:                     ;VOX on
   155 00AED 0439 C        	MOV	A,B0_TMR_VOX
   156            C      M 	JPNZ	VOX_CHK_END
       00AEE 0E83     1     JBS  _STATUS , Z 
       00AEF 16F4     1     JMP  VOX_CHK_END ,
   157            C        
   158            C      M 	SETC			;VOX found over 8.0 sec, return ACCH=1
       00AF0 0A03     1     BS  _STATUS , C 
   159 00AF1 0012 C                RET
   160            C        ;-------------------
   161 00AF2      C        VOX_CHK_OFF:			;VOX off
   162            C      M 	MOV	B0_TMR_VOX,@CTMR_CVOX       ; restore 8.0 sec in TMR_VOX
       00AF2 1880     1     MOV A,@( CTMR_CVOX )
       00AF3 0079     1     MOV  B0_TMR_VOX ,A
   163 00AF4      C        VOX_CHK_END:
   164            C      M 	CLRC
       00AF4 0803     1     BC  _STATUS , C 
   165 00AF5 0012 C        	RET
   166            C        ;-------------------------------------------------------------------------------
   167            C        ;       Function : CTONE_CHK
   168            C        ;
   169            C        ;       The general routine used in remote line operation. It checks CONT TONE
   170            C        ;       Input  : CONF (Record Mode, Line Mode)
   171            C        ;       Output : C = 1/0  -  continuous tone period found/no
   172            C        ;
   173            C        ;	!!!Can't change TEMP0,TEMP1
   174            C        ;-------------------------------------------------------------------------------
   175 00AF6      C        CTONE_CHK:
   176            C      M 	BANK	0
       00AF6 0984     1     BC  _RSR , 6 
       00AF7 09C4     1     BC  _RSR , 7 
   177            C        	
   178            C      M 	JPNB	TEMP0,4,CTONE_CHK_FAIL         	; check if continuous tone happens ?
       00AF8 0F15     1     JBS  TEMP0 , 4 
       00AF9 16FF     1     JMP  CTONE_CHK_FAIL ,
   179 00AFA      C        CTONE_CHK_ON:
   180 00AFA 043A C        	MOV	A,B0_TMR_CTONE
   181            C      M 	JPNZ	CTONE_CHK_END
       00AFB 0E83     1     JBS  _STATUS , Z 
       00AFC 1701     1     JMP  CTONE_CHK_END ,
   182            C        
   183            C      M 	SETC            			; continuous tone period found, return ACCH=1
       00AFD 0A03     1     BS  _STATUS , C 
   184 00AFE 0012 C                RET
   185            C        
   186 00AFF      C        CTONE_CHK_FAIL:     
   187            C      M         MOV	B0_TMR_CTONE,@CTMR_CTONE	; continuous tone off
       00AFF 1880     1     MOV A,@( CTMR_CTONE )
       00B00 007A     1     MOV  B0_TMR_CTONE ,A
   188 00B01      C        CTONE_CHK_END:
   189            C      M 	CLRC            			; continuous tone period found, return ACCH=1
       00B01 0803     1     BC  _STATUS , C 
   190 00B02 0012 C                RET
   191            C        
   192            C        ;----------------------------------------------------------------------------
   193            C        ;       Function : DTMF_CHK
   194            C        ;
   195            C        ;       The general routine used in remote line operation. It checks DTMF
   196            C        ;       Input  : CONF (Record Mode, Play Mode, Line Mode or Voice Prompt Mode)
   197            C        ;       Output : C = 1/0  - 
   198            C        ;		 B1_DTMF_VAL  =  DTMF value
   199            C        ;       Parameters:
   200            C        ;               DAM_FLAG,1 - store the detected DTMF flag
   201            C        ;	!!!Can't change TEMP0,TEMP1
   202            C        ;----------------------------------------------------------------------------
   203 00B03      C        DTMF_CHK:
   204            C      M 	BANK	1
       00B03 0B84     1     BS  _RSR , 6 
       00B04 09C4     1     BC  _RSR , 7 
   205            C      M 	JPNB	TEMP1,0,DTMF_CHK_1
       00B05 0E16     1     JBS  TEMP1 , 0 
       00B06 170E     1     JMP  DTMF_CHK_1 ,
   206 00B07 0415 C        	MOV	A,TEMP0			;check the DTMF value ?
   207 00B08 1A0F C                AND	A,@0X0F
   208            C      M 	JPZ	DTMF_CHK_CASTONE
       00B09 0C83     1     JBC  _STATUS , Z 
       00B0A 171F     1     JMP  DTMF_CHK_CASTONE ,
   209 00B0B 1B0F C                XOR	A,@0X0F
   210            C      M         JPZ	DTMF_CHK_D
       00B0C 0C83     1     JBC  _STATUS , Z 
       00B0D 1718     1     JMP  DTMF_CHK_D ,
   211 00B0E      C        DTMF_CHK_1:	
   212 00B0E 0415 C        	MOV	A,TEMP0			;check the DTMF value ?
   213 00B0F 1A0F C                AND	A,@0X0F
   214            C      M         JPZ	DTMF_CHK_3
       00B10 0C83     1     JBC  _STATUS , Z 
       00B11 171A     1     JMP  DTMF_CHK_3 ,
   215 00B12      C        DTMF_CHK_2:
   216            C      M 	LCALL	DTMF_TABLE		;Transform to machine-code
                      2  M  PAGE #( DTMF_TABLE ),
       00B12 1E8E     2     PAGE ( DTMF_TABLE / 1024 ),
       00B13 11C8     1     CALL ( DTMF_TABLE % 1024 ),
                      2  M  PAGE #( $ ),
       00B14 1E82     2     PAGE ( $ / 1024 ),
   217 00B15 0069 C        	MOV	B1_DTMF_VAL,A		;save the DTMF value in DTMF_VAL
   218            C               
   219 00B16 0A54 C        	BS	DAM_FLAG,1
   220 00B17 171F C                JMP	DTMF_CHK_END
   221 00B18      C        DTMF_CHK_D:
   222 00B18 1824 C        	MOV	A,@NUM_D
   223 00B19 1712 C        	JMP	DTMF_CHK_2
   224 00B1A      C        DTMF_CHK_3:
   225            C      M         JPNB	DAM_FLAG,1,DTMF_CHK_END	;no-to-no
       00B1A 0E54     1     JBS  DAM_FLAG , 1 
       00B1B 171F     1     JMP  DTMF_CHK_END ,
   226 00B1C 0854 C        	BC	DAM_FLAG,1
   227            C        
   228            C      M 	SETC				; DTMF detected, return C=1
       00B1D 0A03     1     BS  _STATUS , C 
   229 00B1E 0012 C                RET
   230 00B1F      C        DTMF_CHK_END:
   231 00B1F      C        DTMF_CHK_CASTONE:
   232            C      M 	CLRC
       00B1F 0803     1     BC  _STATUS , C 
   233 00B20 0012 C        	RET
   234            C        ;-------------------------------------------------------------------------------
   235            C        ;       Function : BTONE_CHK
   236            C        ;
   237            C        ;       The general routine used in remote line operation. It checks BUSY TONE
   238            C        ;       Input  : CONF (Record Mode, Play Mode, Line Mode or Voice Prompt Mode)
   239            C        ;       Output : ACCH = 1  -  Busy tone
   240            C        ;                ACCH = 0  -  NO Busy tone
   241            C        ;
   242            C        ;       Parameters:
   243            C        ;               3. B0_TMR_BTONE     - for busy tone detection
   244            C        ;               4. B0_BUF    - store the total time of busy tone
   245            C        ;               5. B0_BTONE_BUF1     - store the last on time of busy tone
   246            C        ;               6. B0_BTONE_BUF2     - store the last off time of busy tone
   247            C        ;               7. B0_BTONE_BUF3     - store some flags for busy tone detection
   248            C        ;                  (see B0_BTONE_BUF3.DOC)
   249            C        ;	!!!Can't change TEMP0,TEMP1
   250            C        ;	B0_BTONE_BUF3	bit7-first busy tone off
   251            C        ;			bit6-first busy tone on
   252            C        ;			bit5-LastOff
   253            C        ;			bit4-LastOn
   254            C        ;			bit(3..0)-the counter on/off
   255            C        ;-------------------------------------------------------------------------------
   256 00B21      C        BTONE_CHK:
   257            C      M 	BANK	0
       00B21 0984     1     BC  _RSR , 6 
       00B22 09C4     1     BC  _RSR , 7 
   258            C        
   259            C      M         JPNB	TEMP0,5,BTONE_CHK_OFF
       00B23 0F55     1     JBS  TEMP0 , 5 
       00B24 1782     1     JMP  BTONE_CHK_OFF ,
   260 00B25      C        BTONE_CHK_ON:                    			; busy tone on
   261            C      M 	JPNB	B0_BTONE_BUF3,5,BTONE_CHK_ON_ONTON      ; check if transition from busy tone off ?
       00B25 0F7F     1     JBS  B0_BTONE_BUF3 , 5 
       00B26 1776     1     JMP  BTONE_CHK_ON_ONTON ,
   262            C        
   263 00B27 043C C        	MOV	A,B0_TMR_BTONE
   264 00B28 1D03 C        	SUB	A,@3
   265            C      M 	JPC	BTONE_CHK_ON_FAIL			;busy tone off time < 3/16s, fails
       00B29 0C03     1     JBC  _STATUS , C 
       00B2A 176E     1     JMP  BTONE_CHK_ON_FAIL ,
   266            C        
   267 00B2B 043F C        	MOV	A,B0_BTONE_BUF3
   268 00B2C 1ACF C                AND	A,@0XCF
   269 00B2D 1910 C                OR	A,@0X10					; set 'in busy tone on' bit to 1
   270 00B2E 007F C        	MOV	B0_BTONE_BUF3,A
   271            C        
   272            C      M 	JPB	B0_BTONE_BUF3,7,BTONE_CHK_ON1_1		; check if the first busy tone off to on has happened ?
       00B2F 0DFF     1     JBC  B0_BTONE_BUF3 , 7 
       00B30 1733     1     JMP  BTONE_CHK_ON1_1 ,
   273            C        
   274 00B31 0BFF C                BS	B0_BTONE_BUF3,7				; from busy tone off to on first time
   275            C                
   276 00B32 1746 C                JMP	BTONE_CHK_ON1_2
   277 00B33      C        BTONE_CHK_ON1_1:
   278 00B33 043C C        	MOV	A,B0_TMR_BTONE              		; B0_TMR_BTONE=the current busy tone off time
   279 00B34 013E C        	SUB	A,B0_BTONE_BUF2              		; B0_BTONE_BUF2=the last busy tone off time
   280            C      M 	JPC	BTONE_CHK_ON1_1_1
       00B35 0C03     1     JBC  _STATUS , C 
       00B36 1739     1     JMP  BTONE_CHK_ON1_1_1 ,
   281            C        
   282 00B37 043E C        	MOV	A,B0_BTONE_BUF2
   283 00B38 013C C        	SUB	A,B0_TMR_BTONE
   284 00B39      C        BTONE_CHK_ON1_1_1:					; the difference between B0_TMR_BTONE and B0_BTONE_BUF2
   285            C        							; must be <= 67.5 ms
   286 00B39 1D01 C        	SUB	A,@0X1
   287            C      M 	JPNC	BTONE_CHK_ON_FAIL
       00B3A 0E03     1     JBS  _STATUS , C 
       00B3B 176E     1     JMP  BTONE_CHK_ON_FAIL ,
   288            C        
   289 00B3C 043C C        	MOV	A,B0_TMR_BTONE
   290 00B3D 03BD C        	ADD	A,B0_BTONE_BUF1
   291 00B3E 1D06 C        	SUB	A,@6				;make sure TONEon + TONEoff > 6/16s(375ms)
   292            C      M 	JPC	BTONE_CHK_ON_FAIL
       00B3F 0C03     1     JBC  _STATUS , C 
       00B40 176E     1     JMP  BTONE_CHK_ON_FAIL ,
   293            C        	
   294 00B41 043C C        	MOV	A,B0_TMR_BTONE
   295 00B42 03BD C        	ADD	A,B0_BTONE_BUF1	
   296 00B43 1D16 C        	SUB	A,@22				;make sure TONEon + TONEoff < 22/16s(1375ms)
   297            C      M 	JPNC	BTONE_CHK_ON_FAIL
       00B44 0E03     1     JBS  _STATUS , C 
       00B45 176E     1     JMP  BTONE_CHK_ON_FAIL ,
   298            C        
   299 00B46      C        BTONE_CHK_ON1_2:
   300 00B46 043D C        	MOV	A,B0_BTONE_BUF1			; B0_BUF store the total busy tone time
   301 00B47 03FB C        	ADD	B0_BUF,A			; add the last busy tone on time to B0_BUF
   302            C        	
   303 00B48 057F C        	INC	B0_BTONE_BUF3 			; increase the 'tone on/off count' by 1
   304            C        
   305 00B49 043F C                MOV	A,B0_BTONE_BUF3
   306 00B4A 1A0F C                AND	A,@0X0F
   307 00B4B 1D05 C                SUB	A,@5     			; if the 'tone on/off count' >= 5, busy tone
   308            C      M         JPC	BTONE_CHK_ON1_5			; period found
       00B4C 0C03     1     JBC  _STATUS , C 
       00B4D 176A     1     JMP  BTONE_CHK_ON1_5 ,
   309            C                
   310 00B4E      C        BTONE_CHK_ON1_3: 
   311            C      M 	JPNB	EVENT,7,BTONE_CHK_ON1_4		;record mode or not?
       00B4E 0FD3     1     JBS  EVENT , 7 
       00B4F 1768     1     JMP  BTONE_CHK_ON1_4 ,
   312            C        						;busy tone period found
   313 00B50 043C C        	MOV	A,B0_TMR_BTONE
   314 00B51 03BB C        	ADD	A,B0_BUF
   315 00B52 007B C        	MOV	B0_BUF,A
   316            C        	
   317 00B53 1AF8 C        	AND	A,@0XF8			;Clean the low bit,make sure it can't affect the high bit in bellow RRC instruction
   318 00B54 0057 C        	MOV	TEMP2,A
   319            C        	
   320            C      M 	CLRC
       00B55 0803     1     BC  _STATUS , C 
   321 00B56 0657 C        	RRC	TEMP2
   322 00B57 0657 C        	RRC	TEMP2
   323 00B58 0617 C        	RRCA	TEMP2			;1/8
   324 00B59 0055 C        	MOV	TEMP0,A			;Save the 1/8 B0_BUF(the bit7,6,5 = 000xxxxx)
   325 00B5A 1AFC C        	AND	A,@0XFC
   326 00B5B 0057 C        	MOV	TEMP2,A
   327            C        	
   328 00B5C 0657 C        	RRC	TEMP2			;1/16
   329 00B5D 0617 C        	RRCA	TEMP2			;1/32 ;Clean the high bit,make sure it can't affect the high bit in bellow OR instruction
   330            C        	
   331 00B5E 0395 C        	ADD	A,TEMP0
   332 00B5F 0057 C        	MOV	TEMP2,A			;tail cut base 400ms ==> (1/8 + 1/32)/16ms
   333            C        	
   334            C      M 	PAGE	#(GET_COMMAND)
       00B60 1E83     1     PAGE ( GET_COMMAND / 1024 ),
   335 00B61 13EC C        	CALL	GET_COMMAND
   336 00B62 0415 C        	MOV	A,TEMP0
   337 00B63 1AC0 C        	AND	A,@0XC0
   338 00B64 0217 C        	OR	A,TEMP2
   339 00B65 0055 C        	MOV	TEMP0,A
   340 00B66 13CA C        	CALL	STOR_COMMAND
   341            C      M 	PAGE	#($)
       00B67 1E82     1     PAGE ( $ / 1024 ),
   342 00B68      C        BTONE_CHK_ON1_4:        
   343            C      M         SETC                 		; busy tone period found, return ACCH=0
       00B68 0A03     1     BS  _STATUS , C 
   344 00B69 0012 C                RET
   345            C        
   346 00B6A      C        BTONE_CHK_ON1_5:
   347 00B6A 043C C        	MOV	A,B0_TMR_BTONE
   348 00B6B 007E C                MOV	B0_BTONE_BUF2,A		; save the current busy tone off time in B0_BTONE_BUF2
   349            C        
   350 00B6C 00FC C                CLR	B0_TMR_BTONE
   351            C                
   352 00B6D 17B2 C                JMP	BTONE_CHK_END
   353 00B6E      C        BTONE_CHK_ON_FAIL:                    	; busy tone fails
   354 00B6E 043C C        	MOV	A,B0_TMR_BTONE
   355 00B6F 007E C        	MOV	B0_BTONE_BUF2,A
   356 00B70 007B C        	MOV	B0_BUF,A
   357            C        	
   358 00B71 00FC C        	CLR	B0_TMR_BTONE
   359 00B72 00FD C                CLR     B0_BTONE_BUF1
   360            C        
   361            C      M 	MOV	B0_BTONE_BUF3,@0X90   	; set first busy tone off to on happened; set 'in busy tone on' bit to 1
       00B73 1890     1     MOV A,@( 144 )
       00B74 007F     1     MOV  B0_BTONE_BUF3 ,A
   362            C        
   363 00B75 17B2 C        	JMP	BTONE_CHK_END
   364 00B76      C        BTONE_CHK_ON_ONTON:
   365            C        	
   366 00B76 043F C        	MOV	A,B0_BTONE_BUF3
   367 00B77 1ACF C        	AND	A,@0XCF
   368 00B78 1910 C        	OR	A,@0X10
   369 00B79 007F C        	MOV	B0_BTONE_BUF3,A
   370            C        
   371 00B7A 043C C        	MOV	A,B0_TMR_BTONE
   372 00B7B 1D76 C        	SUB	A,@118 			; FOR FIRST BUSY TONE > 118/16 SEC CHECK
   373            C      M 	JPC	BTONE_CHK_END
       00B7C 0C03     1     JBC  _STATUS , C 
       00B7D 17B2     1     JMP  BTONE_CHK_END ,
   374            C        
   375 00B7E 043C C        	MOV	A,B0_TMR_BTONE
   376 00B7F 007B C        	MOV	B0_BUF,A
   377 00B80 00FC C        	CLR	B0_TMR_BTONE
   378 00B81 174E C        	JMP	BTONE_CHK_ON1_3		; JUMP TO TAIL CUT
   379            C        
   380 00B82      C        BTONE_CHK_OFF:                   	; busy tone off
   381            C      M 	JPNB	B0_BTONE_BUF3,4,BTONE_CHK_OFF_OFFTOFF	; check if transition from busy tone on ?
       00B82 0F3F     1     JBS  B0_BTONE_BUF3 , 4 
       00B83 17AD     1     JMP  BTONE_CHK_OFF_OFFTOFF ,
   382            C        
   383 00B84 043C C        	MOV	A,B0_TMR_BTONE
   384 00B85 1D04 C        	SUB	A,@4			;busy tone on time < 4/16 s, fails
   385            C      M 	JPC	BTONE_CHK_OFF_FAIL
       00B86 0C03     1     JBC  _STATUS , C 
       00B87 17A5     1     JMP  BTONE_CHK_OFF_FAIL ,
   386 00B88 043C C        	MOV	A,B0_TMR_BTONE
   387 00B89 1D0B C        	SUB	A,@11			;busy tone on time < 11/16 s, fails
   388            C      M 	JPNC	BTONE_CHK_OFF_FAIL
       00B8A 0E03     1     JBS  _STATUS , C 
       00B8B 17A5     1     JMP  BTONE_CHK_OFF_FAIL ,
   389            C        
   390 00B8C 043F C        	MOV	A,B0_BTONE_BUF3
   391 00B8D 1ACF C        	AND	A,@0XCF
   392 00B8E 1920 C        	OR	A,@0X20 		; set 'in busy tone off' bit to 1
   393 00B8F 007F C        	MOV	B0_BTONE_BUF3,A
   394            C        
   395            C      M 	JPB	 B0_BTONE_BUF3,6,BTONE_CHK_OFF1_1	; check if the first busy tone on to off has happened ?
       00B90 0DBF     1     JBC  B0_BTONE_BUF3 , 6 
       00B91 1796     1     JMP  BTONE_CHK_OFF1_1 ,
   396            C        					; from busy tone on to off first time
   397            C        
   398 00B92 0BBF C                BS	B0_BTONE_BUF3,6
   399            C                
   400 00B93 043C C                MOV	A,B0_TMR_BTONE
   401 00B94 007D C        	MOV	B0_BTONE_BUF1,A
   402            C                
   403 00B95 17A3 C        	JMP	BTONE_CHK_OFF1_2
   404 00B96      C        BTONE_CHK_OFF1_1:
   405 00B96 043C C        	MOV	A,B0_TMR_BTONE              		; B0_TMR_BTONE=the current busy tone on time
   406 00B97 013D C        	SUB	A,B0_BTONE_BUF1              	   	; B0_BTONE_BUF2=the last busy tone on time
   407            C      M 	JPC	BTONE_CHK_OFF1_1_1
       00B98 0C03     1     JBC  _STATUS , C 
       00B99 179C     1     JMP  BTONE_CHK_OFF1_1_1 ,
   408            C        
   409 00B9A 043D C        	MOV	A,B0_BTONE_BUF1
   410 00B9B 013C C        	SUB	A,B0_TMR_BTONE
   411 00B9C      C        BTONE_CHK_OFF1_1_1:					; the difference between B0_TMR_BTONE and B0_BTONE_BUF1
   412            C        							; must be <= 67.5 ms
   413 00B9C 1D01 C        	SUB	A,@0X1
   414            C      M 	JPNC	BTONE_CHK_OFF_FAIL
       00B9D 0E03     1     JBS  _STATUS , C 
       00B9E 17A5     1     JMP  BTONE_CHK_OFF_FAIL ,
   415            C        
   416 00B9F 043E C        	MOV	A,B0_BTONE_BUF2 			; B0_BUF store the total busy tone time
   417 00BA0 03FB C        	ADD	B0_BUF,A				; add the last busy tone off time to B0_BUF
   418            C        
   419 00BA1 043C C                MOV	A,B0_TMR_BTONE
   420 00BA2 007D C                MOV	B0_BTONE_BUF1,A 		; save the current busy tone on time in B0_BTONE_BUF1
   421            C                
   422 00BA3      C        BTONE_CHK_OFF1_2:              
   423 00BA3 00FC C                CLR	B0_TMR_BTONE			; reset B0_TMR_BTONE for restart
   424 00BA4 17B2 C                JMP	BTONE_CHK_END
   425 00BA5      C        BTONE_CHK_OFF_FAIL:                   		; busy tone fails
   426 00BA5 043C C        	MOV	A,B0_TMR_BTONE
   427 00BA6 007D C        	MOV	B0_BTONE_BUF1,A
   428            C        
   429 00BA7 00FC C        	CLR	B0_TMR_BTONE
   430 00BA8 00FB C        	CLR	B0_BUF
   431 00BA9 00FE C        	CLR	B0_BTONE_BUF2
   432            C        
   433 00BAA 1860 C        	MOV	A,@0X60              		; set first busy tone on to off happened
   434 00BAB 007F C                MOV	B0_BTONE_BUF3,A              	; set 'in busy tone off' bit to 1
   435 00BAC 17B2 C                JMP	BTONE_CHK_END
   436 00BAD      C        BTONE_CHK_OFF_OFFTOFF:
   437            C      M 	JPB	B0_BTONE_BUF3,6,BTONE_CHK_END
       00BAD 0DBF     1     JBC  B0_BTONE_BUF3 , 6 
       00BAE 17B2     1     JMP  BTONE_CHK_END ,
   438            C      M 	JPB	B0_BTONE_BUF3,7,BTONE_CHK_END
       00BAF 0DFF     1     JBC  B0_BTONE_BUF3 , 7 
       00BB0 17B2     1     JMP  BTONE_CHK_END ,
   439            C        
   440 00BB1 00FC C                CLR	B0_TMR_BTONE
   441 00BB2      C        BTONE_CHK_END:
   442            C      M 	CLRC
       00BB2 0803     1     BC  _STATUS , C 
   443            C        
   444 00BB3 0012 C        	RET
   445            C        ;-------------------------------------------------------------------------------
   446 00BB4      C        BCVOX_INIT:
   447            C        	
   448 00BB4 0404 C        	MOV	A,_R4
   449 00BB5 005B C        	MOV	OLD_RAM,A		;PUSH _R4
   450            C        	
   451            C      M 	BANK	0
       00BB6 0984     1     BC  _RSR , 6 
       00BB7 09C4     1     BC  _RSR , 7 
   452 00BB8 00FC C        	CLR	B0_TMR_BTONE
   453 00BB9 00FD C        	CLR	B0_BTONE_BUF1
   454 00BBA 00FE C        	CLR	B0_BTONE_BUF2
   455            C        	
   456 00BBB 1880 C        	MOV	A,@CTMR_CVOX
   457 00BBC 007A C        	MOV	B0_TMR_CTONE,A
   458 00BBD 0079 C        	MOV	B0_TMR_VOX,A
   459            C        	
   460 00BBE 041B C        	MOV	A,OLD_RAM		;POP _R4
   461 00BBF 0044 C        	MOV	_R4,A
   462            C        
   463 00BC0 0012 C        	RET
   464            C        ;-------------------------------------------------------------------------------
   465            C        
   599                     INCLUDE		"sys_monitor.dt"
     1            C        ;-------------------------------------------------------------------------------
     2 00BC1      C        SYS_MONT:		;系统监控
     3            C        ;---------------------------------------	
     4 00BC1      C        SYS_MONT_1:		;监控手柄
     5            C        ;---HOOK ON/OFF detect
     6            C      M 	JPB	_P7,4,SYS_MONT_1_1
       00BC1 0D07     1     JBC  _P7 , 4 
       00BC2 17D4     1     JMP  SYS_MONT_1_1 ,
     7            C        
     8            C      M 	JPNB	SYS_FLAG,1,SYS_MONT_1_2	;L ==> L	
       00BC3 0E52     1     JBS  SYS_FLAG , 1 
       00BC4 17E4     1     JMP  SYS_MONT_1_2 ,
     9            C        ;---H ==> L
    10 00BC5 0852 C        	BC	SYS_FLAG,1
    11            C        	
    12 00BC6 1801 C        	MOV	A,@1		;HS icon on
    13            C      M 	LCALL	VGASTAMP1
                      2  M  PAGE #( VGASTAMP1 ),
       00BC7 1E8C     2     PAGE ( VGASTAMP1 / 1024 ),
       00BC8 1000     1     CALL ( VGASTAMP1 % 1024 ),
                      2  M  PAGE #( $ ),
       00BC9 1E82     2     PAGE ( $ / 1024 ),
    14            C        
    15            C      M 	REFURBISH_ICON
                      2  M  BLOCK  0 
       00BCA 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       00BCB 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       00BCC 1880     2     MOV A,@( LCD_CTRL )
       00BCD 004C     2     MOV  _RC ,A
       00BCE 0B0D     1     BS  _RD , 4 
    16            C        	
    17 00BCF 1893 C        	MOV	A,@CHOOK_OFF
    18            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00BD0 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00BD1 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00BD2 1E82     2     PAGE ( $ / 1024 ),
    19 00BD3 17E4 C        	JMP	SYS_MONT_1_2
    20 00BD4      C        SYS_MONT_1_1:
    21            C        
    22            C      M 	JPB	SYS_FLAG,1,SYS_MONT_1_2	;H ==> H
       00BD4 0C52     1     JBC  SYS_FLAG , 1 
       00BD5 17E4     1     JMP  SYS_MONT_1_2 ,
    23            C        ;---L ==> H	
    24 00BD6 0A52 C        	BS	SYS_FLAG,1
    25            C        
    26 00BD7 18FE C        	MOV	A,@~1		;HS icon off
    27            C      M 	LCALL	CLRVGASTAMP1
                      2  M  PAGE #( CLRVGASTAMP1 ),
       00BD8 1E8C     2     PAGE ( CLRVGASTAMP1 / 1024 ),
       00BD9 100C     1     CALL ( CLRVGASTAMP1 % 1024 ),
                      2  M  PAGE #( $ ),
       00BDA 1E82     2     PAGE ( $ / 1024 ),
    28            C        
    29            C      M 	REFURBISH_ICON
                      2  M  BLOCK  0 
       00BDB 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       00BDC 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       00BDD 1880     2     MOV A,@( LCD_CTRL )
       00BDE 004C     2     MOV  _RC ,A
       00BDF 0B0D     1     BS  _RD , 4 
    30            C        	
    31 00BE0 1892 C        	MOV	A,@CHOOK_ON
    32            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00BE1 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00BE2 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00BE3 1E82     2     PAGE ( $ / 1024 ),
    33            C        	;JMP	SYS_MONT_1_2
    34 00BE4      C        SYS_MONT_1_2:
    35            C        ;---------------------------------------
    36 00BE4      C        SYS_MONT_2:
    37            C        ;---------------------------------------	
    38 00BE4      C        SYS_MONT_3:	
    39            C        	
    40 00BE4      C        SYS_MONT_NED:
    41            C        	
    42 00BE4 0012 C        	RET
    43            C        
    44            C        ;-------------------------------------------------------------------------------
    45            C        
    46            C        
    47            C        
   600                     ;-------------------------------------------------------------------------------
   601                     ;page3
   602                     INCLUDE		"dam_func.dt"
     1            C        ORG	(3<<10)		;the 3rd page
     2 00C00      C        VPQUE:
     3 00C00      C        DSP:
     4            C        ;-------------------------------------------------------------------------------
     5            C        ;  - 事件识别标志定义如下: 0 - reserved(Don`t use this status)
     6            C        ;	input : TEMP0 = 
     7            C        ;	  	  		  1 - delay	- (参数TEMP1对应时间长度8ms/unit,)
     8            C        ;	  	  		  2 - play TONE	- (参数TEMP1对应时间长度1/16s/unit,TEMP2对应频率8/unit,TEMP3reserved) - 单音频
     9            C        ;	  	  		  3 - play DTMF	- (参数TEMP1对应时间长度8ms/unit,TEMP2对应频率,TEMP3reserved) 	 - 双音频	  		  
    10            C        ;	  			  4 - play VOP	- (参数TEMP1对应VOP index,TEMP2,TEMP3 reserved)
    11            C        ;	  			  5 - play-new message	- (参数TEMP1对应message )
    12            C        ;	  			  6 - play-all message	- (参数TEMP1对应message )
    13            C        ;	  			  7 - play-old message	- reserved	  
    14            C        ;	output: SETC
    15            C        ;-------------------------------------------------------------------------------
    16 00C00      C        VP_START:
    17            C        ;---
    18            C      M 	BANK	1
       00C00 0B84     1     BS  _RSR , 6 
       00C01 09C4     1     BC  _RSR , 7 
    19            C        
    20            C      M 	MOV	BANK1_TEMP0,TEMP0
       00C02 0415     1     MOV A, TEMP0 
       00C03 007A     1     MOV  BANK1_TEMP0 ,A
    21            C      M 	MOV	BANK1_TEMP1,TEMP1
       00C04 0416     1     MOV A, TEMP1 
       00C05 007B     1     MOV  BANK1_TEMP1 ,A
    22            C      M 	MOV	BANK1_TEMP2,TEMP2
       00C06 0417     1     MOV A, TEMP2 
       00C07 007C     1     MOV  BANK1_TEMP2 ,A
    23            C      M 	MOV	BANK1_TEMP3,TEMP3
       00C08 0418     1     MOV A, TEMP3 
       00C09 007D     1     MOV  BANK1_TEMP3 ,A
    24            C      M 	MOV	BANK1_TEMP4,TEMP4
       00C0A 0419     1     MOV A, TEMP4 
       00C0B 007E     1     MOV  BANK1_TEMP4 ,A
    25            C      M 	MOV	BANK1_TEMP5,TEMP5
       00C0C 041A     1     MOV A, TEMP5 
       00C0D 007F     1     MOV  BANK1_TEMP5 ,A
    26            C        	
    27            C      M 	LCALL	DAM_STOP
                      2  M  PAGE #( DAM_STOP ),
       00C0E 1E83     2     PAGE ( DAM_STOP / 1024 ),
       00C0F 1155     1     CALL ( DAM_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       00C10 1E83     2     PAGE ( $ / 1024 ),
    28            C        ;---
    29            C        	;BANK	1
    30            C        	
    31            C      M 	MOV	TEMP0,BANK1_TEMP0
       00C11 043A     1     MOV A, BANK1_TEMP0 
       00C12 0055     1     MOV  TEMP0 ,A
    32            C      M 	MOV	TEMP1,BANK1_TEMP1
       00C13 043B     1     MOV A, BANK1_TEMP1 
       00C14 0056     1     MOV  TEMP1 ,A
    33            C      M 	MOV	TEMP2,BANK1_TEMP2
       00C15 043C     1     MOV A, BANK1_TEMP2 
       00C16 0057     1     MOV  TEMP2 ,A
    34            C      M 	MOV	TEMP3,BANK1_TEMP3
       00C17 043D     1     MOV A, BANK1_TEMP3 
       00C18 0058     1     MOV  TEMP3 ,A
    35            C      M 	MOV	TEMP4,BANK1_TEMP4
       00C19 043E     1     MOV A, BANK1_TEMP4 
       00C1A 0059     1     MOV  TEMP4 ,A
    36            C      M 	MOV	TEMP5,BANK1_TEMP5
       00C1B 043F     1     MOV A, BANK1_TEMP5 
       00C1C 005A     1     MOV  TEMP5 ,A
    37            C        ;---	
    38 00C1D 0415 C        	MOV	A,TEMP0
    39 00C1E 1A07 C        	AND	A,@0X7
    40            C      M 	MTBL
       00C1F 0020     1     TBL 
             0C1F     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    41 00C20 1462 C        	JMP	VP_START_END	;0 - reserved
    42 00C21 1428 C        	JMP	VP_START_DELAY	;1 - Delay
    43 00C22 142D C        	JMP	VP_START_STSF	;2 - Generate Tone(STSF)
    44 00C23 1445 C        	JMP	VP_START_DTMF	;3 - Generate Tone(DTMF)
    45 00C24 1447 C        	JMP	VP_START_VOP	;4 - Play VOP
    46 00C25 1450 C        	JMP	VP_START_PLYN	;5 - Play new message
    47 00C26 1459 C        	JMP	VP_START_PLYA	;6 - Play all message
    48 00C27 1462 C        	JMP	VP_START_PLYO	;7 - Play old message(reserved)
    49            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    50            C        ;-----------------------------------------------------------
    51 00C28      C        VP_START_DELAY:			;
    52            C      M 	BANK	2
       00C28 0984     1     BC  _RSR , 6 
       00C29 0BC4     1     BS  _RSR , 7 
    53            C      M 	MOV	B2_TMR_BEEP,TEMP1	;
       00C2A 0416     1     MOV A, TEMP1 
       00C2B 007A     1     MOV  B2_TMR_BEEP ,A
    54            C        	
    55 00C2C 1443 C        	JMP	VP_START_STSF_DONE
    56            C        ;-----------------------------------------------------------
    57 00C2D      C        VP_START_STSF:
    58            C      M 	BANK	2
       00C2D 0984     1     BC  _RSR , 6 
       00C2E 0BC4     1     BS  _RSR , 7 
    59 00C2F 0417 C        	MOV	A,TEMP2
    60            C        	;SUB	A,@10
    61            C      M 	JPZ	VP_START_DELAY		;Less than 10
       00C30 0C83     1     JBC  _STATUS , Z 
       00C31 1428     1     JMP  VP_START_DELAY ,
    62            C        	
    63            C      M 	MOV	B2_TMR_BEEP,TEMP1	;
       00C32 0416     1     MOV A, TEMP1 
       00C33 007A     1     MOV  B2_TMR_BEEP ,A
    64            C        ;---
    65            C      M 	MOV	TEMP0,@CTONE_GAIN
       00C34 18F7     1     MOV A,@( CTONE_GAIN )
       00C35 0055     1     MOV  TEMP0 ,A
    66            C      M 	MOV	TEMP1,@0X48
       00C36 1848     1     MOV A,@( 72 )
       00C37 0056     1     MOV  TEMP1 ,A
    67            C        ;---tone-1 frequency
    68 00C38 06D7 C        	RLC	TEMP2
    69 00C39 06D7 C        	RLC	TEMP2
    70 00C3A 0697 C        	RLCA	TEMP2
    71 00C3B 0058 C        	MOV	TEMP3,A
    72 00C3C 00D7 C        	CLR	TEMP2
    73            C        ;---tone-2 frequency
    74 00C3D 00D9 C        	CLR	TEMP4
    75 00C3E 00DA C        	CLR	TEMP5
    76            C      M 	PAGE	#(IIC)
       00C3F 1E83     1     PAGE ( IIC / 1024 ),
    77 00C40 13CA C        	CALL	STOR_COMMAND
    78 00C41 1384 C        	CALL	SEND6B_COMMAND
    79            C      M 	PAGE	#($)
       00C42 1E83     1     PAGE ( $ / 1024 ),
    80            C        ;!!!!!!!!!!!!!!!
    81 00C43      C        VP_START_STSF_DONE:	
    82 00C43 0B53 C        	BS	EVENT,5		;BEEP
    83 00C44 1462 C        	JMP	VP_START_END
    84            C        ;-----------------------------------------------------------
    85 00C45      C        VP_START_DTMF:			;dial
    86 00C45 0AD3 C        	BS	EVENT,3
    87 00C46 0012 C        	RET	
    88            C        ;-----------------------------------------------------------
    89 00C47      C        VP_START_VOP:
    90            C      M 	MOV	TEMP0,TEMP1
       00C47 0416     1     MOV A, TEMP1 
       00C48 0055     1     MOV  TEMP0 ,A
    91            C      M 	MOV	TEMP1,@0XB0
       00C49 18B0     1     MOV A,@( 176 )
       00C4A 0056     1     MOV  TEMP1 ,A
    92            C      M 	LCALL	STOR_COMMAND
                      2  M  PAGE #( STOR_COMMAND ),
       00C4B 1E83     2     PAGE ( STOR_COMMAND / 1024 ),
       00C4C 13CA     1     CALL ( STOR_COMMAND % 1024 ),
                      2  M  PAGE #( $ ),
       00C4D 1E83     2     PAGE ( $ / 1024 ),
    93            C        
    94 00C4E 0B93 C        	BS	EVENT,6
    95 00C4F 1462 C        	JMP	VP_START_END
    96            C        ;-----------------------------------------------------------
    97 00C50      C        VP_START_PLYN:
    98            C      M 	MOV	TEMP0,TEMP1
       00C50 0416     1     MOV A, TEMP1 
       00C51 0055     1     MOV  TEMP0 ,A
    99            C      M 	MOV	TEMP1,@0X24
       00C52 1824     1     MOV A,@( 36 )
       00C53 0056     1     MOV  TEMP1 ,A
   100            C      M 	LCALL	STOR_COMMAND
                      2  M  PAGE #( STOR_COMMAND ),
       00C54 1E83     2     PAGE ( STOR_COMMAND / 1024 ),
       00C55 13CA     1     CALL ( STOR_COMMAND % 1024 ),
                      2  M  PAGE #( $ ),
       00C56 1E83     2     PAGE ( $ / 1024 ),
   101 00C57 0B93 C        	BS	EVENT,6
   102 00C58 1462 C        	JMP	VP_START_END
   103            C        ;-----------------------------------------------------------
   104 00C59      C        VP_START_PLYA:
   105            C      M 	MOV	TEMP0,TEMP1
       00C59 0416     1     MOV A, TEMP1 
       00C5A 0055     1     MOV  TEMP0 ,A
   106            C      M 	MOV	TEMP1,@0X20
       00C5B 1820     1     MOV A,@( 32 )
       00C5C 0056     1     MOV  TEMP1 ,A
   107            C      M 	LCALL	STOR_COMMAND
                      2  M  PAGE #( STOR_COMMAND ),
       00C5D 1E83     2     PAGE ( STOR_COMMAND / 1024 ),
       00C5E 13CA     1     CALL ( STOR_COMMAND % 1024 ),
                      2  M  PAGE #( $ ),
       00C5F 1E83     2     PAGE ( $ / 1024 ),
   108 00C60 0B93 C        	BS	EVENT,6
   109 00C61 1462 C        	JMP	VP_START_END
   110            C        ;-----------------------------------------------------------
   111 00C62      C        VP_START_PLYO:			;reserved
   112 00C62      C        VP_START_END:
   113            C      M 	SETC	;!!!set C 
       00C62 0A03     1     BS  _STATUS , C 
   114            C        	
   115 00C63 0012 C        	RET
   116            C        ;-------------------------------------------------------------------------------
   117            C        ;	VOP_STOR_VP
   118            C        ;	input : ACC - the VOP index
   119            C        ;	
   120            C        ;-------------------------------------------------------------------------------
   121 00C64      C        VOP_STOR_VP:
   122 00C64 0056 C        	MOV	TEMP1,A
   123            C      M 	MOV	TEMP0,@ID_VOP		;Announce one
       00C65 1804     1     MOV A,@( ID_VOP )
       00C66 0055     1     MOV  TEMP0 ,A
   124            C        
   125            C        	;JMP	STOR_VP
   126            C        ;-------------------------------------------------------------------------------
   127            C        ;	STOR TONE DATA TO THE TAIL OF TONE-QUEUE
   128            C        ;	INPUT : TEMP0 - VP identify
   129            C        ;		TEMP1 - 
   130            C        ;		TEMP2
   131            C        ;		TEMP3
   132            C        ;
   133            C        ;	OUTPUT: NO
   134            C        ;	No temp RAM changed
   135            C        ;-------------------------------------------------------------------------------
   136 00C67      C        STOR_VP:
   137            C        ;---
   138            C      M 	BLOCK	1
       00C67 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00C68 000A     1     IOW  _IOCA ,
   139            C        	;BANK	1
   140            C        	
   141            C      M 	MOV	_RC,@TONE_QUEUE_TAIL
       00C69 1811     1     MOV A,@( TONE_QUEUE_TAIL )
       00C6A 004C     1     MOV  _RC ,A
   142            C      M 	MOV	TEMP4,_RD
       00C6B 040D     1     MOV A, _RD 
       00C6C 0059     1     MOV  TEMP4 ,A
   143 00C6D 06D9 C        	RLC	TEMP4
   144 00C6E 06D9 C        	RLC	TEMP4
   145 00C6F 0419 C        	MOV	A,TEMP4
   146 00C70 1AFC C        	AND	A,@0XFC		;!!!process 4 bytes
   147 00C71 1F12 C        	ADD 	A,@CTONE_QUEUE_START
   148            C        
   149 00C72 004C C        	MOV 	_RC,A
   150            C        
   151 00C73 0415 C        	MOV 	A,TEMP0
   152 00C74 004D C        	MOV 	_RD,A
   153 00C75 054C C        	INC	_RC
   154            C        	
   155 00C76 0416 C        	MOV 	A,TEMP1
   156 00C77 004D C        	MOV 	_RD,A
   157 00C78 054C C        	INC	_RC
   158            C        
   159 00C79 0417 C        	MOV 	A,TEMP2
   160 00C7A 004D C        	MOV 	_RD,A
   161 00C7B 054C C        	INC	_RC
   162            C        
   163 00C7C 0418 C        	MOV 	A,TEMP3
   164 00C7D 004D C        	MOV 	_RD,A
   165 00C7E 054C C        	INC	_RC
   166            C        ;---整理tone_queue	
   167            C      M 	MOV 	_RC,@TONE_QUEUE_TAIL
       00C7F 1811     1     MOV A,@( TONE_QUEUE_TAIL )
       00C80 004C     1     MOV  _RC ,A
   168 00C81 050D C        	INCA 	_RD
   169 00C82 1A0F C        	AND 	A,@0XF
   170 00C83 004D C        	MOV 	_RD,A
   171            C        ;---
   172 00C84 0012 C        	RET
   173            C        ;-------------------------------------------------------------------------------
   174            C        ;	BEEP/LBEEP/BBEEP
   175            C        ;-------------------------------------------------------------------------------	
   176 00C85      C        BEEP:	
   177            C      M 	MOV	TEMP0,@ID_BEEP		;id
       00C85 1802     1     MOV A,@( ID_BEEP )
       00C86 0055     1     MOV  TEMP0 ,A
   178            C      M 	MOV	TEMP1,@0X10		;len
       00C87 1810     1     MOV A,@( 16 )
       00C88 0056     1     MOV  TEMP1 ,A
   179            C      M 	MOV	TEMP2,@(0X20>>3)	;frequency
       00C89 1804     1     MOV A,@(( 32 >> 3 ))
       00C8A 0057     1     MOV  TEMP2 ,A
   180            C        
   181 00C8B 1467 C        	JMP	STOR_VP
   182            C        	
   183 00C8C      C        LBEEP:
   184            C      M 	MOV	TEMP0,@ID_BEEP
       00C8C 1802     1     MOV A,@( ID_BEEP )
       00C8D 0055     1     MOV  TEMP0 ,A
   185            C      M 	MOV	TEMP1,@0X40
       00C8E 1840     1     MOV A,@( 64 )
       00C8F 0056     1     MOV  TEMP1 ,A
   186            C      M 	MOV	TEMP2,@(0X20>>3)
       00C90 1804     1     MOV A,@(( 32 >> 3 ))
       00C91 0057     1     MOV  TEMP2 ,A
   187            C        
   188 00C92 1467 C        	JMP	STOR_VP
   189            C        	
   190 00C93      C        BBEEP:	
   191            C      M 	MOV	TEMP0,@ID_BEEP
       00C93 1802     1     MOV A,@( ID_BEEP )
       00C94 0055     1     MOV  TEMP0 ,A
   192            C      M 	MOV	TEMP1,@0X10
       00C95 1810     1     MOV A,@( 16 )
       00C96 0056     1     MOV  TEMP1 ,A
   193            C      M 	MOV	TEMP2,@(0X20>>3)
       00C97 1804     1     MOV A,@(( 32 >> 3 ))
       00C98 0057     1     MOV  TEMP2 ,A
   194 00C99 1067 C        	CALL	STOR_VP
   195            C        	
   196            C      M 	MOV	TEMP0,@ID_BEEP
       00C9A 1802     1     MOV A,@( ID_BEEP )
       00C9B 0055     1     MOV  TEMP0 ,A
   197            C      M 	MOV	TEMP1,@0X05
       00C9C 1805     1     MOV A,@( 5 )
       00C9D 0056     1     MOV  TEMP1 ,A
   198            C      M 	MOV	TEMP2,@0
       00C9E 1800     1     MOV A,@( 0 )
       00C9F 0057     1     MOV  TEMP2 ,A
   199 00CA0 1067 C        	CALL	STOR_VP
   200            C        	
   201            C      M 	MOV	TEMP0,@ID_BEEP
       00CA1 1802     1     MOV A,@( ID_BEEP )
       00CA2 0055     1     MOV  TEMP0 ,A
   202            C      M 	MOV	TEMP1,@0X10
       00CA3 1810     1     MOV A,@( 16 )
       00CA4 0056     1     MOV  TEMP1 ,A
   203            C      M 	MOV	TEMP2,@(0X20>>3)
       00CA5 1804     1     MOV A,@(( 32 >> 3 ))
       00CA6 0057     1     MOV  TEMP2 ,A
   204 00CA7 1067 C        	CALL	STOR_VP
   205            C        	
   206 00CA8 0012 C        	RET
   207            C        ;-------------------------------------------------------------------------------
   208            C        ;	GET TONE DATA FROM HEAD OF TONE-QUEUE
   209            C        ;	INPUT : NO
   210            C        ;	OUTPUT: C=0/1 ==> TONE/no
   211            C        ;		TEMP0,TEMP1,TEMP2,TEMP3,TONE_QUEUE_HEAD相当于指向4byte长度类型的指针
   212            C        ;-------------------------------------------------------------------------------
   213 00CA9      C        GET_VP:
   214            C        
   215            C      M 	BLOCK	1
       00CA9 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00CAA 000A     1     IOW  _IOCA ,
   216            C        	;BANK	1
   217            C        ;---
   218            C      M 	MOV	_RC,@TONE_QUEUE_HEAD
       00CAB 1810     1     MOV A,@( TONE_QUEUE_HEAD )
       00CAC 004C     1     MOV  _RC ,A
   219            C      M 	MOV	TEMP0,_RD
       00CAD 040D     1     MOV A, _RD 
       00CAE 0055     1     MOV  TEMP0 ,A
   220            C      M 	MOV	_RC,@TONE_QUEUE_TAIL
       00CAF 1811     1     MOV A,@( TONE_QUEUE_TAIL )
       00CB0 004C     1     MOV  _RC ,A
   221 00CB1 040D C        	MOV	A,_RD
   222 00CB2 0115 C        	SUB 	A,TEMP0
   223            C      M 	JPZ	GET_VP_EMPTY
       00CB3 0C83     1     JBC  _STATUS , Z 
       00CB4 14D0     1     JMP  GET_VP_EMPTY ,
   224            C        ;---整理tone_queue
   225            C      M 	MOV 	_RC,@TONE_QUEUE_HEAD
       00CB5 1810     1     MOV A,@( TONE_QUEUE_HEAD )
       00CB6 004C     1     MOV  _RC ,A
   226 00CB7 040D C        	MOV 	A,_RD
   227 00CB8 0055 C        	MOV 	TEMP0,A
   228 00CB9 1F01 C        	ADD 	A,@0X01
   229 00CBA 1A0F C        	AND 	A,@0XF
   230 00CBB 004D C        	MOV 	_RD,A
   231            C        
   232 00CBC 06D5 C        	RLC	TEMP0		;GET DATA IN SPECIFIC ADDRESS
   233 00CBD 06D5 C        	RLC	TEMP0
   234 00CBE 0415 C        	MOV	A,TEMP0
   235 00CBF 1AFC C        	AND	A,@0XFC		;!!!process 4 bytes
   236 00CC0 1F12 C        	ADD 	A,@CTONE_QUEUE_START
   237 00CC1 004C C        	MOV 	_RC,A
   238 00CC2 040D C        	MOV 	A,_RD
   239 00CC3 0055 C        	MOV 	TEMP0,A		;SAVE THE DATA
   240 00CC4 054C C        	INC	_RC
   241            C        	
   242 00CC5 040D C        	MOV 	A,_RD
   243 00CC6 0056 C        	MOV 	TEMP1,A		;SAVE THE DATA
   244 00CC7 054C C        	INC	_RC
   245            C        	
   246 00CC8 040D C        	MOV 	A,_RD
   247 00CC9 0057 C        	MOV 	TEMP2,A		;SAVE THE DATA
   248 00CCA 054C C        	INC	_RC
   249            C        	
   250 00CCB 040D C        	MOV 	A,_RD
   251 00CCC 0058 C        	MOV 	TEMP3,A		;SAVE THE DATA
   252 00CCD 054C C        	INC	_RC
   253            C        	
   254            C      M 	CLRC
       00CCE 0803     1     BC  _STATUS , C 
   255 00CCF      C        GET_VP_END:
   256            C        ;---
   257 00CCF 0012 C        	RET
   258 00CD0      C        GET_VP_EMPTY:
   259            C      M 	SETC
       00CD0 0A03     1     BS  _STATUS , C 
   260 00CD1 14CF C        	JMP	GET_VP_END
   261            C        ;-------------------------------------------------------------------------------
   262            C        ;	DAM_BIOS的软中断程序:record/play/beep/line/VoicePrompt/Spkphone
   263            C        ;-------------------------------------------------------------------------------
   264 00CD2      C        INT_BIOS:
   265            C      M 	BLOCK	1
       00CD2 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00CD3 000A     1     IOW  _IOCA ,
   266            C        	
   267            C        	;JPNB	EVENT,0,INT_BIOS_END	;No need call DAM_BIOS ?
   268            C        	
   269            C      M 	JPB	EVENT,7,INT_BIOS_REC	;RECORD
       00CD4 0DD3     1     JBC  EVENT , 7 
       00CD5 150A     1     JMP  INT_BIOS_REC ,
   270            C      M 	JPB	EVENT,6,INT_BIOS_PLAY	;PLAY
       00CD6 0D93     1     JBC  EVENT , 6 
       00CD7 1516     1     JMP  INT_BIOS_PLAY ,
   271            C      M 	JPB	EVENT,5,INT_BIOS_END	;BEEP不作处理
       00CD8 0D53     1     JBC  EVENT , 5 
       00CD9 1554     1     JMP  INT_BIOS_END ,
   272            C      M 	JPB	EVENT,4,INT_BIOS_LINE	;LINE
       00CDA 0D13     1     JBC  EVENT , 4 
       00CDB 14E2     1     JMP  INT_BIOS_LINE ,
   273            C      M 	JPB	EVENT,3,INT_BIOS_END	;Spkphone
       00CDC 0CD3     1     JBC  EVENT , 3 
       00CDD 1554     1     JMP  INT_BIOS_END ,
   274            C        
   275 00CDE 10A9 C        	CALL	GET_VP
   276            C      M 	JPNC	VP_START
       00CDF 0E03     1     JBS  _STATUS , C 
       00CE0 1400     1     JMP  VP_START ,
   277            C        
   278 00CE1 0012 C        	RET
   279            C        ;---------------------------------------
   280 00CE2      C        INT_BIOS_LINE:				;line mode
   281            C      M 	PAGE	#(IIC)
       00CE2 1E83     1     PAGE ( IIC / 1024 ),
   282 00CE3 1344 C        	CALL	SEND2B_COMMAND
   283 00CE4 13AE C        	CALL	RECE2B_RESPOND
   284 00CE5 13E1 C        	CALL	GET_RESPOND
   285            C      M 	PAGE	#($)	
       00CE6 1E83     1     PAGE ( $ / 1024 ),
   286            C        	
   287            C      M 	JPB	_P8,4,INT_BIOS_RESP	;at answer/speaker mode
       00CE7 0D08     1     JBC  _P8 , 4 
       00CE8 1522     1     JMP  INT_BIOS_RESP ,
   288            C      M 	JPNB	_P7,4,INT_BIOS_END	;HS OFF-HOOK
       00CE9 0F07     1     JBS  _P7 , 4 
       00CEA 1554     1     JMP  INT_BIOS_END ,
   289            C        ;---idle	
   290 00CEB 0416 C        	MOV	A,TEMP1		;Check CS/MS/DS
   291 00CEC 1AF0 C        	AND	A,@0XF0
   292            C      M 	JPNZ	INT_BIOS_LINE_CHKCID
       00CED 0E83     1     JBS  _STATUS , Z 
       00CEE 14F3     1     JMP  INT_BIOS_LINE_CHKCID ,
   293            C        	
   294 00CEF 0415 C        	MOV	A,TEMP0		;Check dtmf
   295 00CF0 1A0F C        	AND	A,@0X0F
   296            C      M 	JPZ	INT_BIOS_END
       00CF1 0C83     1     JBC  _STATUS , Z 
       00CF2 1554     1     JMP  INT_BIOS_END ,
   297            C        ;---DTMF detected
   298 00CF3      C        INT_BIOS_LINE_CHKCID:
   299            C      M 	LCALL	CidRawData
                      2  M  PAGE #( CIDRAWDATA ),
       00CF3 1E81     2     PAGE ( CIDRAWDATA / 1024 ),
       00CF4 1164     1     CALL ( CIDRAWDATA % 1024 ),
                      2  M  PAGE #( $ ),
       00CF5 1E83     2     PAGE ( $ / 1024 ),
   300            C      M 	JPNC	INT_BIOS_END
       00CF6 0E03     1     JBS  _STATUS , C 
       00CF7 1554     1     JMP  INT_BIOS_END ,
   301 00CF8 1A03 C        	AND	A,@0X03
   302            C      M 	MTBL
       00CF9 0020     1     TBL 
             0CF9     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   303 00CFA 1554 C        	JMP	INT_BIOS_END		;No Cid
   304 00CFB 14FE C        	JMP	INT_BIOS_FSKCID		;Fsk
   305 00CFC 1502 C        	JMP	INT_BIOS_DTMFCID	;Dtmf
   306 00CFD 1554 C        	JMP	INT_BIOS_END		;reserved
   307            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   308 00CFE      C        INT_BIOS_FSKCID:
   309            C      M 	LCALL	FSK_DECODE
                      2  M  PAGE #( FSK_DECODE ),
       00CFE 1E8F     2     PAGE ( FSK_DECODE / 1024 ),
       00CFF 11F5     1     CALL ( FSK_DECODE % 1024 ),
                      2  M  PAGE #( $ ),
       00D00 1E83     2     PAGE ( $ / 1024 ),
   310 00D01 1505 C        	JMP	INT_BIOS_STORCID
   311 00D02      C        INT_BIOS_DTMFCID:
   312            C      M 	LCALL	DTMF_DECODE
                      2  M  PAGE #( DTMF_DECODE ),
       00D02 1E8F     2     PAGE ( DTMF_DECODE / 1024 ),
       00D03 1182     1     CALL ( DTMF_DECODE % 1024 ),
                      2  M  PAGE #( $ ),
       00D04 1E83     2     PAGE ( $ / 1024 ),
   313            C        	;JMP	INT_BIOS_STORCID
   314 00D05      C        INT_BIOS_STORCID:
   315            C        	;BANK	1
   316            C        	;MOV	B1_CID_TYPE,A		
   317            C        	
   318 00D05 18CF C        	MOV	A,@CMSG_CID		;Tell the system that the Cooked-CID need display and stor into flash
   319            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00D06 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00D07 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00D08 1E83     2     PAGE ( $ / 1024 ),
   320 00D09 15C1 C        	JMP	INIT_DAM_FUNC
   321            C        ;---------------------------------------
   322 00D0A      C        INT_BIOS_REC:				;record mode
   323            C      M 	PAGE	#(IIC)
       00D0A 1E83     1     PAGE ( IIC / 1024 ),
   324 00D0B 1344 C        	CALL	SEND2B_COMMAND
   325 00D0C 13AE C        	CALL	RECE2B_RESPOND
   326 00D0D 13E1 C        	CALL	GET_RESPOND
   327            C      M 	PAGE	#($)
       00D0E 1E83     1     PAGE ( $ / 1024 ),
   328            C      M 	JPNB	TEMP0,7,INT_BIOS_RESP	;RESPOND,7
       00D0F 0FD5     1     JBS  TEMP0 , 7 
       00D10 1522     1     JMP  INT_BIOS_RESP ,
   329            C        	
   330 00D11 1886 C        	MOV	A,@CREC_FULL		;Generate memfull消息
   331            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00D12 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00D13 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00D14 1E83     2     PAGE ( $ / 1024 ),
   332 00D15 1522 C        	JMP	INT_BIOS_RESP
   333            C        ;---------------------------------------
   334 00D16      C        INT_BIOS_PLAY:				;play(voice prompt) mode
   335            C      M 	PAGE	#(IIC)
       00D16 1E83     1     PAGE ( IIC / 1024 ),
   336 00D17 1344 C        	CALL	SEND2B_COMMAND
   337 00D18 13AE C        	CALL	RECE2B_RESPOND
   338 00D19 13E1 C        	CALL	GET_RESPOND
   339            C      M 	PAGE	#($)
       00D1A 1E83     1     PAGE ( $ / 1024 ),
   340            C      M 	JPNB	TEMP0,6,INT_BIOS_RESP	;RESPOND,6
       00D1B 0F95     1     JBS  TEMP0 , 6 
       00D1C 1522     1     JMP  INT_BIOS_RESP ,
   341            C        
   342 00D1D 1883 C        	MOV	A,@CSEG_END
   343            C      M 	LCALL	STOR_MSG		;产生结束消息
                      2  M  PAGE #( STOR_MSG ),
       00D1E 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00D1F 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00D20 1E83     2     PAGE ( $ / 1024 ),
   344 00D21 1522 C        	JMP	INT_BIOS_RESP
   345            C        
   346            C        ;---------------------------------------
   347            C        ;*********
   348 00D22      C        INT_BIOS_RESP:
   349            C      M 	JPNB	_P8,4,INT_BIOS_END	;Not at answer/speaker mode
       00D22 0F08     1     JBS  _P8 , 4 
       00D23 1554     1     JMP  INT_BIOS_END ,
   350            C      M 	JPNB	_P7,4,INT_BIOS_END	;HS OFF-HOOK
       00D24 0F07     1     JBS  _P7 , 4 
       00D25 1554     1     JMP  INT_BIOS_END ,
   351            C      M 	JPB	EVENT,6,INT_BIOS_RESP_BTONEDTMF	;play mode,no check VOX/CTONE
       00D26 0D93     1     JBC  EVENT , 6 
       00D27 153E     1     JMP  INT_BIOS_RESP_BTONEDTMF ,
   352            C        ;*********
   353            C        ;---------
   354 00D28      C        INT_BIOS_RESP_VOX:			;for record/line mode 
   355            C      M 	PAGE	#(GET_RESPOND)
       00D28 1E83     1     PAGE ( GET_RESPOND / 1024 ),
   356 00D29 13E1 C        	CALL	GET_RESPOND
   357            C      M 	LCALL	VOX_CHK
                      2  M  PAGE #( VOX_CHK ),
       00D2A 1E82     2     PAGE ( VOX_CHK / 1024 ),
       00D2B 12E9     1     CALL ( VOX_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00D2C 1E83     2     PAGE ( $ / 1024 ),
   358            C      M 	JPNC	INT_BIOS_RESP_VOX_END
       00D2D 0E03     1     JBS  _STATUS , C 
       00D2E 1533     1     JMP  INT_BIOS_RESP_VOX_END ,
   359 00D2F 1887 C        	MOV	A,@CMSG_VOX
   360            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00D30 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00D31 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00D32 1E83     2     PAGE ( $ / 1024 ),
   361 00D33      C        INT_BIOS_RESP_VOX_END:	
   362            C        ;---------
   363            C        ;---------
   364 00D33      C        INT_BIOS_RESP_CTONE:			;for record/line mode 
   365            C      M 	PAGE	#(GET_RESPOND)
       00D33 1E83     1     PAGE ( GET_RESPOND / 1024 ),
   366 00D34 13E1 C        	CALL	GET_RESPOND
   367            C      M 	LCALL	CTONE_CHK
                      2  M  PAGE #( CTONE_CHK ),
       00D35 1E82     2     PAGE ( CTONE_CHK / 1024 ),
       00D36 12F6     1     CALL ( CTONE_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00D37 1E83     2     PAGE ( $ / 1024 ),
   368            C      M 	JPNC	INT_BIOS_RESP_CTONE_END
       00D38 0E03     1     JBS  _STATUS , C 
       00D39 153E     1     JMP  INT_BIOS_RESP_CTONE_END ,
   369 00D3A 1889 C        	MOV	A,@CMSG_CTONE
   370            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00D3B 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00D3C 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00D3D 1E83     2     PAGE ( $ / 1024 ),
   371 00D3E      C        INT_BIOS_RESP_CTONE_END:
   372            C        ;---------
   373            C        ;---------
   374 00D3E      C        INT_BIOS_RESP_BTONEDTMF:
   375            C        	
   376            C        ;---------
   377            C        ;---------
   378 00D3E      C        INT_BIOS_RESP_BTONE:			;for record/play/line/voice_prompt mode 
   379            C      M 	PAGE	#(GET_RESPOND)
       00D3E 1E83     1     PAGE ( GET_RESPOND / 1024 ),
   380 00D3F 13E1 C        	CALL	GET_RESPOND
   381            C      M 	LCALL	BTONE_CHK
                      2  M  PAGE #( BTONE_CHK ),
       00D40 1E82     2     PAGE ( BTONE_CHK / 1024 ),
       00D41 1321     1     CALL ( BTONE_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00D42 1E83     2     PAGE ( $ / 1024 ),
   382            C      M 	JPNC	INT_BIOS_RESP_BTONE_END
       00D43 0E03     1     JBS  _STATUS , C 
       00D44 1549     1     JMP  INT_BIOS_RESP_BTONE_END ,
   383 00D45 1888 C        	MOV	A,@CMSG_BTONE
   384            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00D46 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00D47 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00D48 1E83     2     PAGE ( $ / 1024 ),
   385            C        
   386 00D49      C        INT_BIOS_RESP_BTONE_END:
   387            C        ;---------
   388            C        ;---------
   389 00D49      C        INT_BIOS_RESP_DTMF:			;for record/play/line/voice_prompt mode
   390            C      M 	PAGE	#(GET_RESPOND)
       00D49 1E83     1     PAGE ( GET_RESPOND / 1024 ),
   391 00D4A 13E1 C        	CALL	GET_RESPOND
   392            C      M 	LCALL	DTMF_CHK
                      2  M  PAGE #( DTMF_CHK ),
       00D4B 1E82     2     PAGE ( DTMF_CHK / 1024 ),
       00D4C 1303     1     CALL ( DTMF_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       00D4D 1E83     2     PAGE ( $ / 1024 ),
   393            C      M 	JPNC	INT_BIOS_RESP_DTMF_END
       00D4E 0E03     1     JBS  _STATUS , C 
       00D4F 1554     1     JMP  INT_BIOS_RESP_DTMF_END ,
   394 00D50 188A C        	MOV	A,@CREV_DTMF
   395            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       00D51 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       00D52 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       00D53 1E83     2     PAGE ( $ / 1024 ),
   396 00D54      C        INT_BIOS_RESP_DTMF_END:
   397            C        ;---------
   398            C        
   399 00D54      C        INT_BIOS_END:
   400            C        	
   401 00D54 0012 C        	RET
   402            C        ;---------------------------------------
   403            C        
   404            C        ;-------------------------------------------------------------------------------
   405            C        ;	input : TEMP0,TEMP1,TEMP2,TEMP3
   406            C        ;-------------------------------------------------------------------------------
   407 00D55      C        DAM_STOP:
   408            C        
   409 00D55 0404 C        	MOV	A,_R4
   410 00D56 005B C        	MOV	OLD_RAM,A		;PUSH _R4
   411            C      M 	BANK	2
       00D57 0984     1     BC  _RSR , 6 
       00D58 0BC4     1     BS  _RSR , 7 
   412 00D59 00FA C        	CLR	B2_TMR_BEEP
   413 00D5A 041B C        	MOV	A,OLD_RAM		;POP _R4
   414 00D5B 0044 C        	MOV	_R4,A
   415            C        
   416 00D5C 00D3 C        	CLR	EVENT
   417            C        
   418            C      M 	BLOCK	1	
       00D5D 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00D5E 000A     1     IOW  _IOCA ,
   419            C      M 	MOV	_RC,@COMMAND
       00D5F 1800     1     MOV A,@( COMMAND )
       00D60 004C     1     MOV  _RC ,A
   420            C      M 	MOV	TEMP0,_RD
       00D61 040D     1     MOV A, _RD 
       00D62 0055     1     MOV  TEMP0 ,A
   421            C        
   422 00D63 054C C        	INC	_RC
   423            C        
   424 00D64 040D C        	MOV	A,_RD
   425 00D65 1AF0 C        	AND	A,@0XF0
   426 00D66 1D10 C        	SUB	A,@0X10		;0x1000
   427            C      M 	JPZ	DAM_STOP_RECORD
       00D67 0C83     1     JBC  _STATUS , Z 
       00D68 1582     1     JMP  DAM_STOP_RECORD ,
   428            C        	
   429 00D69 040D C        	MOV	A,_RD
   430 00D6A 1AF0 C        	AND	A,@0XF0
   431 00D6B 1D20 C        	SUB	A,@0X20		;0x2000
   432            C      M 	JPZ	DAM_STOP_PLAY
       00D6C 0C83     1     JBC  _STATUS , Z 
       00D6D 1590     1     JMP  DAM_STOP_PLAY ,
   433            C        	
   434 00D6E 040D C        	MOV	A,_RD
   435 00D6F 1AF0 C        	AND	A,@0XF0
   436 00D70 1D40 C        	SUB	A,@0X40		;0x4000
   437            C      M 	JPZ	DAM_STOP_TONE
       00D71 0C83     1     JBC  _STATUS , Z 
       00D72 159B     1     JMP  DAM_STOP_TONE ,
   438            C        	
   439 00D73 040D C        	MOV	A,_RD
   440 00D74 1AF0 C        	AND	A,@0XF0
   441 00D75 1D50 C        	SUB	A,@0X50		;0x5000
   442            C      M 	JPZ	DAM_STOP_LINE
       00D76 0C83     1     JBC  _STATUS , Z 
       00D77 15A4     1     JMP  DAM_STOP_LINE ,
   443            C        	
   444 00D78 040D C        	MOV	A,_RD
   445            C        	;AND	A,@0XF0
   446 00D79 1DB0 C        	SUB	A,@0XB0		;0xB000
   447            C      M 	JPZ	DAM_STOP_VOICE
       00D7A 0C83     1     JBC  _STATUS , Z 
       00D7B 1590     1     JMP  DAM_STOP_VOICE ,
   448            C        	
   449 00D7C 040D C        	MOV	A,_RD
   450 00D7D 1AF0 C        	AND	A,@0XF0
   451 00D7E 1DC0 C        	SUB	A,@0XC0		;0xC000
   452            C      M 	JPZ	DAM_STOP_PHONE
       00D7F 0C83     1     JBC  _STATUS , Z 
       00D80 15AE     1     JMP  DAM_STOP_PHONE ,
   453            C        	
   454 00D81 15B6 C        	JMP	DAM_STOP_IDLE
   455 00D82      C        DAM_STOP_RECORD:
   456            C        	
   457            C      M 	PAGE	#(IIC)
       00D82 1E83     1     PAGE ( IIC / 1024 ),
   458 00D83 13EC C        	CALL	GET_COMMAND
   459            C      M 	OR	TEMP0,@(1<<6)
       00D84 1840     1     MOV A,@(( 1 << 6 ))
       00D85 0255     1     OR  TEMP0 ,A
   460            C      M 	MOV	TEMP1,@0X10
       00D86 1810     1     MOV A,@( 16 )
       00D87 0056     1     MOV  TEMP1 ,A
   461 00D88 13CA C        	CALL	STOR_COMMAND
   462 00D89 1344 C        	CALL	SEND2B_COMMAND
   463 00D8A 13AE C        	CALL	RECE2B_RESPOND
   464 00D8B 13E1 C        	CALL	GET_RESPOND
   465            C      M 	PAGE	#($)
       00D8C 1E83     1     PAGE ( $ / 1024 ),
   466            C        	
   467            C      M 	JPNB	TEMP0,7,DAM_STOP_RECORD	;Try again
       00D8D 0FD5     1     JBS  TEMP0 , 7 
       00D8E 1582     1     JMP  DAM_STOP_RECORD ,
   468            C        	
   469 00D8F 15B6 C        	JMP	DAM_STOP_IDLE
   470 00D90      C        DAM_STOP_PLAY:
   471 00D90      C        DAM_STOP_VOICE:
   472            C      M 	PAGE	#(IIC)
       00D90 1E83     1     PAGE ( IIC / 1024 ),
   473 00D91 13EC C        	CALL	GET_COMMAND
   474 00D92 0A56 C        	BS	TEMP1,1
   475 00D93 13CA C        	CALL	STOR_COMMAND
   476 00D94 1344 C        	CALL	SEND2B_COMMAND
   477 00D95 13AE C        	CALL	RECE2B_RESPOND
   478 00D96 13E1 C        	CALL	GET_RESPOND
   479            C      M 	PAGE	#($)
       00D97 1E83     1     PAGE ( $ / 1024 ),
   480            C      M 	JPNB	TEMP0,6,DAM_STOP_PLAY	;Try again
       00D98 0F95     1     JBS  TEMP0 , 6 
       00D99 1590     1     JMP  DAM_STOP_PLAY ,
   481 00D9A 15B6 C        	JMP	DAM_STOP_IDLE
   482 00D9B      C        DAM_STOP_TONE:	;---0X4400
   483 00D9B 00D5 C        	CLR	TEMP0
   484            C      M 	MOV	TEMP1,@0X44
       00D9C 1844     1     MOV A,@( 68 )
       00D9D 0056     1     MOV  TEMP1 ,A
   485            C        
   486            C      M 	PAGE	#(IIC)
       00D9E 1E83     1     PAGE ( IIC / 1024 ),
   487 00D9F 13CA C        	CALL	STOR_COMMAND
   488 00DA0 1344 C        	CALL	SEND2B_COMMAND	
   489 00DA1 13AE C        	CALL	RECE2B_RESPOND
   490            C      M 	PAGE	#($)
       00DA2 1E83     1     PAGE ( $ / 1024 ),
   491            C        	
   492 00DA3 15B6 C        	JMP	DAM_STOP_IDLE
   493 00DA4      C        DAM_STOP_LINE:
   494            C      M 	MOV	TEMP0,@0x01
       00DA4 1801     1     MOV A,@( 1 )
       00DA5 0055     1     MOV  TEMP0 ,A
   495            C      M 	MOV	TEMP1,@0X50
       00DA6 1850     1     MOV A,@( 80 )
       00DA7 0056     1     MOV  TEMP1 ,A
   496            C        	
   497            C      M 	PAGE	#(IIC)
       00DA8 1E83     1     PAGE ( IIC / 1024 ),
   498 00DA9 13CA C        	CALL	STOR_COMMAND
   499 00DAA 1344 C        	CALL	SEND2B_COMMAND
   500 00DAB 13AE C        	CALL	RECE2B_RESPOND
   501            C      M 	PAGE	#($)
       00DAC 1E83     1     PAGE ( $ / 1024 ),
   502            C        	
   503 00DAD 15B6 C        	JMP	DAM_STOP_IDLE
   504            C        
   505 00DAE      C        DAM_STOP_PHONE:
   506            C      M 	MOV	TEMP0,@0X80
       00DAE 1880     1     MOV A,@( 128 )
       00DAF 0055     1     MOV  TEMP0 ,A
   507            C      M 	MOV	TEMP1,@0XC0
       00DB0 18C0     1     MOV A,@( 192 )
       00DB1 0056     1     MOV  TEMP1 ,A
   508            C        	
   509            C      M 	PAGE	#(IIC)
       00DB2 1E83     1     PAGE ( IIC / 1024 ),
   510 00DB3 13CA C        	CALL	STOR_COMMAND
   511 00DB4 1344 C        	CALL	SEND2B_COMMAND
   512            C      M 	PAGE	#($)
       00DB5 1E83     1     PAGE ( $ / 1024 ),
   513            C        	
   514            C        	;JMP	DAM_STOP_IDLE
   515 00DB6      C        DAM_STOP_IDLE:
   516            C      M 	BANK	1
       00DB6 0B84     1     BS  _RSR , 6 
       00DB7 09C4     1     BC  _RSR , 7 
   517            C        	
   518            C      M 	MOV	_RC,@(COMMAND)
       00DB8 1800     1     MOV A,@( COMMAND )
       00DB9 004C     1     MOV  _RC ,A
   519 00DBA 00CD C        	CLR	_RD
   520 00DBB 054C C        	INC	_RC
   521 00DBC 00CD C        	CLR	_RD
   522            C      M 	LCALL	SEND2B_COMMAND
                      2  M  PAGE #( SEND2B_COMMAND ),
       00DBD 1E83     2     PAGE ( SEND2B_COMMAND / 1024 ),
       00DBE 1344     1     CALL ( SEND2B_COMMAND % 1024 ),
                      2  M  PAGE #( $ ),
       00DBF 1E83     2     PAGE ( $ / 1024 ),
   523            C        
   524 00DC0 0012 C        	RET
   525            C        
   526            C        ;-------------------------------------------------------------------------------
   527 00DC1      C        INIT_DAM_FUNC:
   528            C      M 	BLOCK	1
       00DC1 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00DC2 000A     1     IOW  _IOCA ,
   529            C        	
   530            C      M 	MOV	_RC,@TONE_QUEUE_TAIL
       00DC3 1811     1     MOV A,@( TONE_QUEUE_TAIL )
       00DC4 004C     1     MOV  _RC ,A
   531 00DC5 00CD C        	CLR	_RD
   532            C      M 	MOV	_RC,@TONE_QUEUE_HEAD
       00DC6 1810     1     MOV A,@( TONE_QUEUE_HEAD )
       00DC7 004C     1     MOV  _RC ,A
   533 00DC8 00CD C        	CLR	_RD
   534            C        
   535 00DC9 1555 C        	JMP	DAM_STOP	;用JMP少用stack
   536            C        ;-------------------------------------------------------------------------------
   537            C        ;	DAA_SPK
   538            C        ;	input :
   539            C        ;	output:
   540            C        ;
   541            C        ;	COMMAND = 0x5E0C
   542            C        ;-------------------------------------------------------------------------------
   543 00DCA      C        DAA_SPK:
   544            C        ;-DA0ToSpk
   545            C      M 	MOV	TEMP0,@0X0C
       00DCA 180C     1     MOV A,@( 12 )
       00DCB 0055     1     MOV  TEMP0 ,A
   546            C      M 	MOV	TEMP1,@0X5E
       00DCC 185E     1     MOV A,@( 94 )
       00DCD 0056     1     MOV  TEMP1 ,A
   547 00DCE      C        DO_IIC:	
   548            C      M 	PAGE	#(IIC)
       00DCE 1E83     1     PAGE ( IIC / 1024 ),
   549 00DCF 13CA C        	CALL	STOR_COMMAND
   550 00DD0 1344 C        	CALL	SEND2B_COMMAND
   551 00DD1 13AE C        	CALL	RECE2B_RESPOND
   552 00DD2 13E1 C        	CALL	GET_RESPOND
   553            C      M 	PAGE	#($)
       00DD3 1E83     1     PAGE ( $ / 1024 ),
   554            C        	
   555 00DD4 0012 C        	RET
   556            C        ;-------------------------------------------------------------------------------
   557            C        ;	DAA_MIC
   558            C        ;	input :
   559            C        ;	output:
   560            C        ;
   561            C        ;	COMMAND = 0x5E00
   562            C        ;-------------------------------------------------------------------------------
   563 00DD5      C        DAA_MIC:
   564            C        ;-MIC-DA0
   565 00DD5 00D5 C        	CLR	TEMP0
   566            C      M 	MOV	TEMP1,@0X5E
       00DD6 185E     1     MOV A,@( 94 )
       00DD7 0056     1     MOV  TEMP1 ,A
   567 00DD8 15CE C        	JMP	DO_IIC
   568            C        ;-------------------------------------------------------------------------------
   569            C        ;	DAA_ANS_REC
   570            C        ;	input :
   571            C        ;	output:
   572            C        ;
   573            C        ;	COMMAND = 0x5E05
   574            C        ;-------------------------------------------------------------------------------
   575 00DD9      C        DAA_ANS_REC:
   576            C        ;-LINE-AD0;DA0-SPK
   577            C      M 	MOV	TEMP0,@0X05
       00DD9 1805     1     MOV A,@( 5 )
       00DDA 0055     1     MOV  TEMP0 ,A
   578            C      M 	MOV	TEMP1,@0X5E
       00DDB 185E     1     MOV A,@( 94 )
       00DDC 0056     1     MOV  TEMP1 ,A
   579 00DDD 15CE C        	JMP	DO_IIC
   580            C        	
   581            C        ;-------------------------------------------------------------------------------
   582            C        ;	DAA_ANS_SPK
   583            C        ;	input :
   584            C        ;	output:
   585            C        ;
   586            C        ;	COMMAND = 0x5E07
   587            C        ;-------------------------------------------------------------------------------
   588 00DDE      C        DAA_ANS_SPK:
   589            C        ;-LINE-AD0;DA0-SPK;DA1-LOUT
   590            C      M 	MOV	TEMP0,@0X07
       00DDE 1807     1     MOV A,@( 7 )
       00DDF 0055     1     MOV  TEMP0 ,A
   591            C      M 	MOV	TEMP1,@0X5E
       00DE0 185E     1     MOV A,@( 94 )
       00DE1 0056     1     MOV  TEMP1 ,A
   592 00DE2 15CE C        	JMP	DO_IIC
   593            C        	
   594            C        ;-------------------------------------------------------------------------------
   595            C        ;	DAA_LIN_REC
   596            C        ;	input :
   597            C        ;	output:
   598            C        ;
   599            C        ;	COMMAND = 0x5E04
   600            C        ;-------------------------------------------------------------------------------
   601 00DE3      C        DAA_LIN_REC:
   602            C        ;-LINE-AD0
   603            C      M 	MOV	TEMP0,@0X04
       00DE3 1804     1     MOV A,@( 4 )
       00DE4 0055     1     MOV  TEMP0 ,A
   604            C      M 	MOV	TEMP1,@0X5E
       00DE5 185E     1     MOV A,@( 94 )
       00DE6 0056     1     MOV  TEMP1 ,A
   605 00DE7 15CE C        	JMP	DO_IIC
   606            C        	
   607            C        ;-------------------------------------------------------------------------------
   608            C        ;	DAA_LIN_SPK
   609            C        ;	input :
   610            C        ;	output:
   611            C        ;
   612            C        ;	COMMAND = 0x5E06
   613            C        ;-------------------------------------------------------------------------------
   614 00DE8      C        DAA_LIN_SPK:
   615            C        ;-LINE-AD0;DA1-LOUT
   616            C      M 	MOV	TEMP0,@0X06
       00DE8 1806     1     MOV A,@( 6 )
       00DE9 0055     1     MOV  TEMP0 ,A
   617            C      M 	MOV	TEMP1,@0X5E
       00DEA 185E     1     MOV A,@( 94 )
       00DEB 0056     1     MOV  TEMP1 ,A
   618 00DEC 15CE C        	JMP	DO_IIC
   619            C        	
   620            C        ;-------------------------------------------------------------------------------
   621            C        ;	DAA_OFF
   622            C        ;	input :
   623            C        ;	output:
   624            C        ;
   625            C        ;	COMMAND = 0x5E08
   626            C        ;-------------------------------------------------------------------------------
   627 00DED      C        DAA_OFF:
   628            C        ;-AUX-AD0
   629            C      M 	MOV	TEMP0,@0X08
       00DED 1808     1     MOV A,@( 8 )
       00DEE 0055     1     MOV  TEMP0 ,A
   630            C      M 	MOV	TEMP1,@0X5E
       00DEF 185E     1     MOV A,@( 94 )
       00DF0 0056     1     MOV  TEMP1 ,A
   631 00DF1 15CE C        	JMP	DO_IIC
   632            C        ;-------------------------------------------------------------------------------
   633            C        ;	DAA_PHONE
   634            C        ;	input : no
   635            C        ;	output: no
   636            C        ;
   637            C        ;	COMMAND = 0x5E11
   638            C        ;-------------------------------------------------------------------------------
   639            C        ;DAA_PHONE:
   640            C        		
   641            C        ;	MOV	TEMP0,@0X11
   642            C        ;	MOV	TEMP1,@0X5E
   643            C        ;	JMP	DO_IIC
   644            C        
   645            C        ;	RET
   646            C        ;-------------------------------------------------------------------------------
   647            C        ;	SET_DAM_MICGAIN
   648            C        ;	input : no
   649            C        ;	output: no
   650            C        ;
   651            C        ;	COMMAND = 0x5F10
   652            C        ;-------------------------------------------------------------------------------
   653 00DF2      C        SET_DAM_MICGAIN:
   654 00DF2 1808 C        	MOV	A,@CDAM_MIC_GAIN
   655            C        	;JMP	SET_MIC_GAIN
   656            C        	
   657 00DF3      C        SET_MIC_GAIN:
   658 00DF3 0057 C        	MOV	TEMP2,A
   659 00DF4 00D8 C        	CLR	TEMP3
   660            C        
   661            C      M 	MOV	TEMP0,@0X10
       00DF5 1810     1     MOV A,@( 16 )
       00DF6 0055     1     MOV  TEMP0 ,A
   662            C      M 	MOV	TEMP1,@0X5F
       00DF7 185F     1     MOV A,@( 95 )
       00DF8 0056     1     MOV  TEMP1 ,A
   663            C        	
   664            C        	;JMP	DO_IIC4B
   665 00DF9      C        DO_IIC4B:	
   666            C      M 	PAGE	#(IIC)
       00DF9 1E83     1     PAGE ( IIC / 1024 ),
   667 00DFA 13CA C        	CALL	STOR_COMMAND
   668 00DFB 1362 C        	CALL	SEND4B_COMMAND
   669 00DFC 13AE C        	CALL	RECE2B_RESPOND
   670 00DFD 13E1 C        	CALL	GET_RESPOND
   671            C      M 	PAGE	#($)
       00DFE 1E83     1     PAGE ( $ / 1024 ),
   672            C        	
   673 00DFF 0012 C        	RET
   674            C        ;-------------------------------------------------------------------------------
   675            C        ;	SET_DAM_AD0GAIN
   676            C        ;	input : ACC
   677            C        ;	output: no
   678            C        ;
   679            C        ;	COMMAND = 0x5F11
   680            C        ;-------------------------------------------------------------------------------
   681 00E00      C        SET_DAM_AD0GAIN:
   682 00E00 1807 C        	MOV	A,@CDAM_AD0_GAIN
   683 00E01 1603 C        	JMP	SET_AD0_GAIN
   684            C        ;-------------------------------------------------------------------------------
   685            C        ;	SET_DAM_RAD0GAIN
   686            C        ;	input : ACC
   687            C        ;	output: no
   688            C        ;
   689            C        ;	COMMAND = 0x5F11
   690            C        ;-------------------------------------------------------------------------------
   691 00E02      C        SET_DAM_RAD0GAIN:
   692 00E02 1801 C        	MOV	A,@CDAM_RAD0_GAIN
   693            C        	;JMP	SET_AD0_GAIN
   694 00E03      C        SET_AD0_GAIN:
   695 00E03 0057 C        	MOV	TEMP2,A
   696 00E04 00D8 C        	CLR	TEMP3
   697            C        		
   698            C      M 	MOV	TEMP0,@0X11
       00E05 1811     1     MOV A,@( 17 )
       00E06 0055     1     MOV  TEMP0 ,A
   699            C      M 	MOV	TEMP1,@0X5F
       00E07 185F     1     MOV A,@( 95 )
       00E08 0056     1     MOV  TEMP1 ,A
   700            C        	
   701 00E09 15F9 C        	JMP	DO_IIC4B
   702            C        ;-------------------------------------------------------------------------------
   703            C        ;	SET_DAM_AD1GAIN
   704            C        ;	input : ACC
   705            C        ;	output: no
   706            C        ;
   707            C        ;	COMMAND = 0x5F12
   708            C        ;-------------------------------------------------------------------------------
   709 00E0A      C        SET_DAM_AD1GAIN:
   710 00E0A 1808 C        	MOV	A,@CDAM_AD1_GAIN
   711            C        	;JMP	SET_AD1_GAIN
   712 00E0B      C        SET_AD1_GAIN:
   713 00E0B 0057 C        	MOV	TEMP2,A
   714 00E0C 00D8 C        	CLR	TEMP3
   715            C        		
   716            C      M 	MOV	TEMP0,@0X12
       00E0D 1812     1     MOV A,@( 18 )
       00E0E 0055     1     MOV  TEMP0 ,A
   717            C      M 	MOV	TEMP1,@0X5F
       00E0F 185F     1     MOV A,@( 95 )
       00E10 0056     1     MOV  TEMP1 ,A
   718            C        	
   719 00E11 15F9 C        	JMP	DO_IIC4B
   720            C        ;-------------------------------------------------------------------------------
   721            C        ;	SET_DAM_SPKVOL
   722            C        ;	input : ACC
   723            C        ;	output: no
   724            C        ;
   725            C        ;	COMMAND = 0x5F20
   726            C        ;-------------------------------------------------------------------------------
   727 00E12      C        SET_DAM_SPKVOL:
   728 00E12 180A C        	MOV	A,@CDAM_SPK_VOL
   729            C        	;JMP	SET_SPKVOL
   730 00E13      C        SET_SPKVOL:
   731 00E13 0057 C        	MOV	TEMP2,A
   732 00E14 00D8 C        	CLR	TEMP3
   733            C        		
   734            C      M 	MOV	TEMP0,@0X20
       00E15 1820     1     MOV A,@( 32 )
       00E16 0055     1     MOV  TEMP0 ,A
   735            C      M 	MOV	TEMP1,@0X5F
       00E17 185F     1     MOV A,@( 95 )
       00E18 0056     1     MOV  TEMP1 ,A
   736            C        
   737 00E19 15F9 C        	JMP	DO_IIC4B
   738            C        ;-------------------------------------------------------------------------------
   739            C        ;	SET_DAM_LNEVOL
   740            C        ;	input : ACC
   741            C        ;	output: no
   742            C        ;
   743            C        ;	COMMAND = 0x5F21
   744            C        ;-------------------------------------------------------------------------------
   745 00E1A      C        SET_DAM_LNEVOL:
   746 00E1A 1818 C        	MOV	A,@CDAM_LNE_VOL
   747            C        	;JMP	SET_LNEVOL
   748 00E1B      C        SET_LNEVOL:
   749 00E1B 0057 C        	MOV	TEMP2,A
   750 00E1C 00D8 C        	CLR	TEMP3
   751            C        			
   752            C      M 	MOV	TEMP0,@0X21
       00E1D 1821     1     MOV A,@( 33 )
       00E1E 0055     1     MOV  TEMP0 ,A
   753            C      M 	MOV	TEMP1,@0X5F
       00E1F 185F     1     MOV A,@( 95 )
       00E20 0056     1     MOV  TEMP1 ,A
   754            C        
   755 00E21 15F9 C        	JMP	DO_IIC4B
   756            C        ;-------------------------------------------------------------------------------
   757            C        ;	Set DTMF sensitivity
   758            C        ;	Delete the message with specific MSG_ID
   759            C        ;	input : acc = the MSG_ID
   760            C        ;	output: acc = the MSG_ID with current mbox current type
   761            C        ;
   762            C        ;	COMMAND = 0x6000
   763            C        ;-------------------------------------------------------------------------------
   764            C        /*
   765            C        SET_DTMFSNSTV:
   766            C        ;---set MSG_ID = ACC
   767            C        	MOV	TEMP0,@CDTMF_SENSTV
   768            C        	MOV	TEMP1,@0X58
   769            C        	JMP	DO_IIC
   770            C        */	
   771            C        ;-------------------------------------------------------------------------------
   772            C        ;	VPMSG_DEL
   773            C        ;	Delete the message with specific MSG_ID
   774            C        ;	input : acc = the MSG_ID
   775            C        ;	output: acc = the MSG_ID with current mbox current type
   776            C        ;
   777            C        ;	COMMAND = 0x6000
   778            C        ;-------------------------------------------------------------------------------
   779 00E22      C        VPMSG_DEL:
   780            C        ;---set MSG_ID = ACC
   781            C        
   782 00E22 1A7F C        	AND	A,@0X7F
   783 00E23 0055 C        	MOV	TEMP0,A
   784            C      M 	MOV	TEMP1,@0X60
       00E24 1860     1     MOV A,@( 96 )
       00E25 0056     1     MOV  TEMP1 ,A
   785 00E26 15CE C        	JMP	DO_IIC
   786            C        	
   787            C        ;-------------------------------------------------------------------------------
   788            C        ;	VPMSG_REALDEL
   789            C        ;	Delete message with del-mark
   790            C        ;	input : no
   791            C        ;	output: no
   792            C        ;
   793            C        ;	COMMAND = 0x6100
   794            C        ;-------------------------------------------------------------------------------
   795 00E27      C        VPMSG_REALDEL:
   796            C        
   797 00E27 00D5 C        	CLR	TEMP0
   798            C      M 	MOV	TEMP1,@0X61
       00E28 1861     1     MOV A,@( 97 )
       00E29 0056     1     MOV  TEMP1 ,A
   799 00E2A 15CE C        	JMP	DO_IIC
   800            C        ;-------------------------------------------------------------------------------
   801            C        ;	VPMSG_DELOLD
   802            C        ;	Delete all old message
   803            C        ;	input : no
   804            C        ;	output: no
   805            C        ;
   806            C        ;	COMMAND = 0x6080
   807            C        ;-------------------------------------------------------------------------------
   808 00E2B      C        VPMSG_DELOLD:
   809            C      M 	MOV	TEMP0,@0X80
       00E2B 1880     1     MOV A,@( 128 )
       00E2C 0055     1     MOV  TEMP0 ,A
   810            C      M 	MOV	TEMP1,@0X60
       00E2D 1860     1     MOV A,@( 96 )
       00E2E 0056     1     MOV  TEMP1 ,A
   811 00E2F 15CE C        	JMP	DO_IIC
   812            C        ;-------------------------------------------------------------------------------
   813            C        ;	VPMSG_DELMARK
   814            C        ;	input : acc = the MSG_ID
   815            C        ;	output: acc = the MSG_ID with current mbox current type
   816            C        ;
   817            C        ;	COMMAND = 0x2080
   818            C        ;-------------------------------------------------------------------------------
   819            C        ;VPMSG_DELMARK:
   820            C        	
   821 00E30 1980 C        	OR	A,@0X80
   822 00E31 0055 C        	MOV	TEMP0,A
   823            C      M 	MOV	TEMP1,@0X20
       00E32 1820     1     MOV A,@( 32 )
       00E33 0056     1     MOV  TEMP1 ,A
   824            C        
   825 00E34 15CE C        	JMP	DO_IIC
   826            C        ;---------
   827 00E35      C        SET_DELMARK:
   828            C        	
   829 00E35 1980 C        	OR	A,@0X80
   830 00E36 0055 C        	MOV	TEMP0,A
   831            C        	
   832 00E37 1804 C        	MOV	A,@0X4
   833 00E38 0FD4 C        	JBS	DAM_FLAG,7	;New-messages
   834 00E39 0080 C        	CLRA
   835 00E3A 1920 C        	OR	A,@0X20
   836 00E3B 0056 C        	MOV	TEMP1,A
   837            C        
   838 00E3C 15CE C        	JMP	DO_IIC
   839            C        ;-------------------------------------------------------------------------------
   840            C        ;	GET_VPLEN
   841            C        ;	input : acc = the MSG_ID
   842            C        ;	output: acc = length
   843            C        ;Get message recording-length(second)
   844            C        ;	COMMAND = 0xA400
   845            C        ;-------------------------------------------------------------------------------
   846 00E3D      C        GET_VPLEN:
   847            C        
   848 00E3D 0055 C        	MOV	TEMP0,A
   849            C      M 	MOV	TEMP1,@0XA4
       00E3E 18A4     1     MOV A,@( 164 )
       00E3F 0056     1     MOV  TEMP1 ,A
   850 00E40 15CE C        	JMP	DO_IIC
   851            C        ;-------------------------------------------------------------------------------
   852            C        ;	SET_GROUP
   853            C        ;
   854            C        ;	input : acc = the group
   855            C        ;	output: 
   856            C        ;
   857            C        ;	COMMAND = 0xE600
   858            C        ;-------------------------------------------------------------------------------
   859 00E41      C        SET_GROUP:
   860            C        
   861 00E41 1A1F C        	AND	A,@0X1F
   862 00E42 0055 C        	MOV	TEMP0,A
   863            C      M 	MOV	TEMP1,@0XE6
       00E43 18E6     1     MOV A,@( 230 )
       00E44 0056     1     MOV  TEMP1 ,A
   864 00E45 15CE C        	JMP	DO_IIC
   865            C        ;-------------------------------------------------------------------------------
   866            C        ;	GET_TELT
   867            C        ;	Get  total tel-message numbers in current group
   868            C        ;
   869            C        ;	input : 
   870            C        ;	output: 
   871            C        ;
   872            C        ;	COMMAND = 0xE401
   873            C        ;-------------------------------------------------------------------------------
   874 00E46      C        GET_TELT:
   875            C        
   876            C      M 	MOV	TEMP0,@0x01
       00E46 1801     1     MOV A,@( 1 )
       00E47 0055     1     MOV  TEMP0 ,A
   877            C      M 	MOV	TEMP1,@0XE4
       00E48 18E4     1     MOV A,@( 228 )
       00E49 0056     1     MOV  TEMP1 ,A
   878            C        	
   879 00E4A 15CE C        	JMP	DO_IIC
   880            C        ;-------------------------------------------------------------------------------
   881            C        ;	DEL_TEL
   882            C        ;	Delete the TEL-message with specify id
   883            C        ;
   884            C        ;	input : 1..220
   885            C        ;	output: 
   886            C        ;
   887            C        ;	COMMAND = 0xE5XX
   888            C        ;-------------------------------------------------------------------------------
   889 00E4B      C        DEL_TEL:
   890 00E4B 0055 C        	MOV	TEMP0,A
   891            C      M 	MOV	TEMP1,@0XE5
       00E4C 18E5     1     MOV A,@( 229 )
       00E4D 0056     1     MOV  TEMP1 ,A
   892 00E4E 15CE C        	JMP	DO_IIC
   893            C        ;-------------------------------------------------------------------------------
   894            C        ;	DAT_WRITE
   895            C        ;
   896            C        ;	input : acc = the Data will be write
   897            C        ;	output: 
   898            C        ;
   899            C        ;	COMMAND = 0xE000
   900            C        ;-------------------------------------------------------------------------------
   901 00E4F      C        DAT_WRITE:
   902            C        	
   903 00E4F 0055 C        	MOV	TEMP0,A
   904            C      M 	MOV	TEMP1,@0XE0
       00E50 18E0     1     MOV A,@( 224 )
       00E51 0056     1     MOV  TEMP1 ,A
   905 00E52 15CE C        	JMP	DO_IIC
   906            C        ;-------------------------------------------------------------------------------
   907            C        ;	DAT_WRITE_STOP
   908            C        ;
   909            C        ;	input : acc = the Data will be write
   910            C        ;	output: 
   911            C        ;
   912            C        ;	COMMAND = 0xE100
   913            C        ;-------------------------------------------------------------------------------
   914 00E53      C        DAT_WRITE_STOP:
   915 00E53 00D5 C        	CLR	TEMP0
   916            C      M 	MOV	TEMP1,@0XE1
       00E54 18E1     1     MOV A,@( 225 )
       00E55 0056     1     MOV  TEMP1 ,A
   917            C        	
   918 00E56 15CE C        	JMP	DO_IIC
   919            C        ;-------------------------------------------------------------------------------
   920            C        ;	DAT_READ
   921            C        ;
   922            C        ;	input : acc = the MSG_ID
   923            C        ;	output: 
   924            C        ;
   925            C        ;	COMMAND = 0xE200
   926            C        ;-------------------------------------------------------------------------------
   927 00E57      C        DAT_READ:
   928            C        
   929 00E57 0055 C        	MOV	TEMP0,A
   930            C      M 	MOV	TEMP1,@0XE2
       00E58 18E2     1     MOV A,@( 226 )
       00E59 0056     1     MOV  TEMP1 ,A
   931            C        	
   932 00E5A 15CE C        	JMP	DO_IIC
   933            C        ;-------------------------------------------------------------------------------
   934            C        ;	DAT_READ_STOP
   935            C        ;
   936            C        ;	input : acc = the MSG_ID
   937            C        ;	output: 
   938            C        ;
   939            C        ;	COMMAND = 0xE300
   940            C        ;-------------------------------------------------------------------------------
   941 00E5B      C        DAT_READ_STOP:
   942            C        
   943 00E5B 00D5 C        	CLR	TEMP0
   944            C      M 	MOV	TEMP1,@0XE3
       00E5C 18E3     1     MOV A,@( 227 )
       00E5D 0056     1     MOV  TEMP1 ,A
   945            C        	
   946 00E5E 15CE C        	JMP	DO_IIC
   947            C        
   948            C        ;-------------------------------------------------------------------------------
   949            C        ;	GET_TELID
   950            C        ;
   951            C        ;	input : acc = the index-0
   952            C        ;	output: 
   953            C        ;
   954            C        ;	Get TEL-message number by specific index-0
   955            C        ;	COMMAND = 0xE900
   956            C        ;
   957            C        ;-------------------------------------------------------------------------------
   958 00E5F      C        GET_TELID:
   959 00E5F      C        GET_0XE9TELID:
   960            C        
   961 00E5F 0055 C        	MOV	TEMP0,A
   962            C      M 	MOV	TEMP1,@0XE9
       00E60 18E9     1     MOV A,@( 233 )
       00E61 0056     1     MOV  TEMP1 ,A
   963            C        
   964 00E62 15CE C        	JMP	DO_IIC
   965            C        
   966            C        ;-------------------------------------------------------------------------------
   967            C        ;	GET_ONLYID
   968            C        ;
   969            C        ;	input : acc = the Message Number
   970            C        ;	output: 
   971            C        ;	Get only Id to this message number
   972            C        ;	COMMAND = 0xA600
   973            C        ;-------------------------------------------------------------------------------
   974 00E63      C        GET_ONLYID:
   975            C        
   976 00E63 0055 C        	MOV	TEMP0,A
   977            C      M 	MOV	TEMP1,@0XA6
       00E64 18A6     1     MOV A,@( 166 )
       00E65 0056     1     MOV  TEMP1 ,A
   978            C        	
   979 00E66 15CE C        	JMP	DO_IIC
   980            C        ;-------------------------------------------------------------------------------
   981            C        ;	SET_TEL0IDXB
   982            C        ;
   983            C        ;	input : acc = the index-0
   984            C        ;	output: 
   985            C        ;	Set index-0 before writing TEL data
   986            C        ;	COMMAND = 0xE700
   987            C        ;-------------------------------------------------------------------------------
   988 00E67      C        SET_INITTEL0IDX:		;Set default index-0 = 0xff before write data
   989 00E67 18FF C        	MOV	A,@0Xff
   990            C        ;SET_TEL0IDXB:
   991            C        
   992 00E68 0055 C        	MOV	TEMP0,A
   993            C      M 	MOV	TEMP1,@0XE7
       00E69 18E7     1     MOV A,@( 231 )
       00E6A 0056     1     MOV  TEMP1 ,A
   994            C        	
   995 00E6B 15CE C        	JMP	DO_IIC
   996            C        ;-------------------------------------------------------------------------------
   997            C        ;	SET_TEL0IDX
   998            C        ;
   999            C        ;	input : acc = the index-0
  1000            C        ;		TEMP0 = TEL-number
  1001            C        ;	output: 
  1002            C        ;	Set index-0 data of a specific TEL-message
  1003            C        ;	COMMAND = 0xEE00
  1004            C        ;	!!!change from "1" to "0" only!!
  1005            C        ;-------------------------------------------------------------------------------
  1006 00E6C      C        SET_TEL0IDXF:
  1007            C        	
  1008 00E6C 0057 C        	MOV	TEMP2,A
  1009            C        	
  1010 00E6D 18EE C        	MOV	A,@0XEE
  1011 00E6E 0056 C        	MOV	TEMP1,A
  1012 00E6F 0058 C        	MOV	TEMP3,A
  1013            C        	
  1014 00E70 15F9 C        	JMP	DO_IIC4B
  1015            C        ;-------------------------------------------------------------------------------
  1016            C        ;	GET_TEL0IDX
  1017            C        ;
  1018            C        ;	input : acc = the message number
  1019            C        ;	output: index-0
  1020            C        ;	Get index-0 data by specific TEL-message number
  1021            C        ;	COMMAND = 0xEA00
  1022            C        ;-------------------------------------------------------------------------------
  1023 00E71      C        GET_TEL0IDX:
  1024            C        
  1025 00E71 0055 C        	MOV	TEMP0,A
  1026            C      M 	MOV	TEMP1,@0XEA
       00E72 18EA     1     MOV A,@( 234 )
       00E73 0056     1     MOV  TEMP1 ,A
  1027            C        	
  1028 00E74 15CE C        	JMP	DO_IIC
  1029            C        ;-------------------------------------------------------------------------------
  1030            C        ;	GET_VP0IDX
  1031            C        ;
  1032            C        ;	input : acc = the message number
  1033            C        ;	output: 
  1034            C        ;	Set index-0 data of a before record
  1035            C        ;	COMMAND = 0xA900
  1036            C        ;
  1037            C        ;-------------------------------------------------------------------------------
  1038            C        /*
  1039            C        GET_VP0IDX:
  1040            C        
  1041            C        	MOV	TEMP0,A
  1042            C        	MOV	TEMP1,@0XA9
  1043            C        	
  1044            C        	JMP	DO_IIC
  1045            C        */
  1046            C        ;-------------------------------------------------------------------------------
  1047            C        ;	SET_VP1IDX
  1048            C        ;
  1049            C        ;	input : acc = the index-1
  1050            C        ;	output: 
  1051            C        ;	Set index-1 data of a before record
  1052            C        ;	COMMAND = 0x8E00
  1053            C        ;use to identify it is Memo or message(ICM)
  1054            C        ;	Memo - 0
  1055            C        ;	Message - 0xff
  1056            C        ;-------------------------------------------------------------------------------
  1057 00E75      C        SET_VP1IDX:
  1058            C        
  1059 00E75 0055 C        	MOV	TEMP0,A
  1060            C      M 	MOV	TEMP1,@0X8E
       00E76 188E     1     MOV A,@( 142 )
       00E77 0056     1     MOV  TEMP1 ,A
  1061            C        	
  1062 00E78 15CE C        	JMP	DO_IIC
  1063            C        ;-------------------------------------------------------------------------------
  1064            C        ;	GET_VP1IDX
  1065            C        ;
  1066            C        ;	input : acc = the message number
  1067            C        ;	output: index-1 data
  1068            C        ;	Set before record
  1069            C        ;	COMMAND = 0xAA00
  1070            C        ;use to identify it is Memo or message(ICM)
  1071            C        ;-------------------------------------------------------------------------------
  1072 00E79      C        GET_VP1IDX:
  1073            C        
  1074 00E79 0055 C        	MOV	TEMP0,A
  1075            C      M 	MOV	TEMP1,@0XAA
       00E7A 18AA     1     MOV A,@( 170 )
       00E7B 0056     1     MOV  TEMP1 ,A
  1076            C        	
  1077 00E7C 15CE C        	JMP	DO_IIC
  1078            C        ;-------------------------------------------------------------------------------
  1079            C        ;	REC_GIVEUP
  1080            C        ;	input : no
  1081            C        ;	output: no
  1082            C        ;
  1083            C        ;-------------------------------------------------------------------------------
  1084 00E7D      C        REC_GIVEUP:
  1085 00E7D 00D3 C        	CLR	EVENT
  1086            C        
  1087 00E7E 00D5 C        	CLR	TEMP0
  1088            C      M 	MOV	TEMP1,@0X18
       00E7F 1818     1     MOV A,@( 24 )
       00E80 0056     1     MOV  TEMP1 ,A
  1089            C        	
  1090 00E81 15CE C        	JMP	DO_IIC
  1091            C        ;-------------------------------------------------------------------------------
  1092            C        ;	REC_CUTTAIL
  1093            C        ;	input : ACC
  1094            C        ;	output: no
  1095            C        ;
  1096            C        ;-------------------------------------------------------------------------------
  1097 00E82      C        REC_CUTTAIL:
  1098 00E82 0055 C        	MOV	TEMP0,A
  1099            C      M 	OR	TEMP0,@0x40
       00E83 1840     1     MOV A,@( 64 )
       00E84 0255     1     OR  TEMP0 ,A
  1100            C      M 	MOV	TEMP1,@0X10
       00E85 1810     1     MOV A,@( 16 )
       00E86 0056     1     MOV  TEMP1 ,A
  1101            C        	
  1102 00E87 00D3 C        	CLR	EVENT
  1103            C        
  1104 00E88 15CE C        	JMP	DO_IIC
  1105            C        ;-------------------------------------------------------------------------------
  1106            C        ;	GET_MSGWEEKNEW/GET_MSGHOURNEW/GET_MSGMINNEW
  1107            C        ;-------------------------------------------------------------------------------
  1108 00E89      C        GET_MSGWEEKNEW:
  1109            C        
  1110            C      M 	MOV	TEMP1,@0XA3
       00E89 18A3     1     MOV A,@( 163 )
       00E8A 0056     1     MOV  TEMP1 ,A
  1111 00E8B      C        GET_NEWTAG:
  1112 00E8B 0432 C        	MOV	A,B1_MSG_ID
  1113 00E8C 1980 C        	OR	A,@0X80
  1114 00E8D 0055 C        	MOV	TEMP0,A	
  1115            C        	
  1116 00E8E 15CE C        	JMP	DO_IIC
  1117 00E8F      C        GET_MSGHOURNEW:
  1118            C      M 	MOV	TEMP1,@0XA2
       00E8F 18A2     1     MOV A,@( 162 )
       00E90 0056     1     MOV  TEMP1 ,A
  1119 00E91 168B C        	JMP	GET_NEWTAG
  1120 00E92      C        GET_MSGMINNEW:
  1121            C      M 	MOV	TEMP1,@0XA1
       00E92 18A1     1     MOV A,@( 161 )
       00E93 0056     1     MOV  TEMP1 ,A
  1122 00E94 168B C        	JMP	GET_NEWTAG
  1123            C        ;---
  1124 00E95      C        GET_MSGMONNEW:
  1125            C      M 	MOV	TEMP1,@0XAD
       00E95 18AD     1     MOV A,@( 173 )
       00E96 0056     1     MOV  TEMP1 ,A
  1126 00E97 168B C        	JMP	GET_NEWTAG
  1127 00E98      C        GET_MSGDAYNEW:
  1128            C      M 	MOV	TEMP1,@0XAE
       00E98 18AE     1     MOV A,@( 174 )
       00E99 0056     1     MOV  TEMP1 ,A
  1129 00E9A 168B C        	JMP	GET_NEWTAG
  1130            C        ;-------------------------------------------------------------------------------
  1131            C        ;	GET_MSGWEEK/GET_MSGHOUR/GET_MSGMIN
  1132            C        ;-------------------------------------------------------------------------------
  1133 00E9B      C        GET_MSGWEEK:
  1134            C      M 	MOV	TEMP1,@0XA3
       00E9B 18A3     1     MOV A,@( 163 )
       00E9C 0056     1     MOV  TEMP1 ,A
  1135 00E9D      C        GET_MSGTAG:
  1136            C      M 	MOV	TEMP0,B1_MSG_ID
       00E9D 0432     1     MOV A, B1_MSG_ID 
       00E9E 0055     1     MOV  TEMP0 ,A
  1137 00E9F 15CE C        	JMP	DO_IIC
  1138 00EA0      C        GET_MSGHOUR:
  1139            C      M 	MOV	TEMP1,@0XA2
       00EA0 18A2     1     MOV A,@( 162 )
       00EA1 0056     1     MOV  TEMP1 ,A
  1140 00EA2 169D C        	JMP	GET_MSGTAG
  1141 00EA3      C        GET_MSGMIN:
  1142            C      M 	MOV	TEMP1,@0XA1
       00EA3 18A1     1     MOV A,@( 161 )
       00EA4 0056     1     MOV  TEMP1 ,A
  1143 00EA5 169D C        	JMP	GET_MSGTAG
  1144            C        
  1145            C        ;---
  1146 00EA6      C        GET_MSGMON:
  1147            C      M 	MOV	TEMP1,@0XAD
       00EA6 18AD     1     MOV A,@( 173 )
       00EA7 0056     1     MOV  TEMP1 ,A
  1148 00EA8 169D C        	JMP	GET_MSGTAG
  1149 00EA9      C        GET_MSGDAY:
  1150            C      M 	MOV	TEMP1,@0XAE
       00EA9 18AE     1     MOV A,@( 174 )
       00EAA 0056     1     MOV  TEMP1 ,A
  1151 00EAB 169D C        	JMP	GET_MSGTAG
  1152            C        ;-------------------------------------------------------------------------------
  1153            C        ;	SET_MSGWEEK/SET_MSGHOUR/SET_MSGMIN
  1154            C        ;-------------------------------------------------------------------------------
  1155 00EAC      C        SET_TIME:
  1156 00EAC      C        SET_WEEK:
  1157 00EAC 0055 C        	MOV	TEMP0,A
  1158            C      M 	MOV	TEMP1,@0X73
       00EAD 1873     1     MOV A,@( 115 )
       00EAE 0056     1     MOV  TEMP1 ,A
  1159 00EAF 15CE C        	JMP	DO_IIC
  1160 00EB0      C        SET_HOUR:
  1161 00EB0 0055 C        	MOV	TEMP0,A
  1162            C      M 	MOV	TEMP1,@0X72
       00EB1 1872     1     MOV A,@( 114 )
       00EB2 0056     1     MOV  TEMP1 ,A
  1163 00EB3 15CE C        	JMP	DO_IIC
  1164 00EB4      C        SET_MIN:
  1165 00EB4 0055 C        	MOV	TEMP0,A
  1166            C      M 	MOV	TEMP1,@0X71
       00EB5 1871     1     MOV A,@( 113 )
       00EB6 0056     1     MOV  TEMP1 ,A
  1167 00EB7 15CE C        	JMP	DO_IIC
  1168 00EB8      C        SET_SEC:
  1169 00EB8 0055 C        	MOV	TEMP0,A
  1170            C      M 	MOV	TEMP1,@0X70
       00EB9 1870     1     MOV A,@( 112 )
       00EBA 0056     1     MOV  TEMP1 ,A
  1171 00EBB 15CE C        	JMP	DO_IIC
  1172            C        ;---
  1173 00EBC      C        SET_YEAR:
  1174 00EBC 0055 C        	MOV	TEMP0,A
  1175            C      M 	MOV	TEMP1,@0X76
       00EBD 1876     1     MOV A,@( 118 )
       00EBE 0056     1     MOV  TEMP1 ,A
  1176 00EBF 15CE C        	JMP	DO_IIC
  1177 00EC0      C        SET_MON:
  1178 00EC0 0055 C        	MOV	TEMP0,A
  1179            C      M 	MOV	TEMP1,@0X75
       00EC1 1875     1     MOV A,@( 117 )
       00EC2 0056     1     MOV  TEMP1 ,A
  1180 00EC3 15CE C        	JMP	DO_IIC
  1181 00EC4      C        SET_DAY:
  1182 00EC4 0055 C        	MOV	TEMP0,A
  1183            C      M 	MOV	TEMP1,@0X74
       00EC5 1874     1     MOV A,@( 116 )
       00EC6 0056     1     MOV  TEMP1 ,A
  1184 00EC7 15CE C        	JMP	DO_IIC
  1185            C        ;-------------------------------------------------------------------------------
  1186            C        ;	MSG_WEEK/MSG_HOUR/MSG_MIN
  1187            C        ;-------------------------------------------------------------------------------
  1188 00EC8      C        VP_TOWEEK:
  1189 00EC8 0056 C        	MOV	TEMP1,A
  1190 00EC9 1F1D C        	ADD	A,@VOPID_SUNDAY
  1191            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       00ECA 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       00ECB 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       00ECC 1E83     2     PAGE ( $ / 1024 ),
  1192            C        	
  1193 00ECD 0012 C        	RET
  1194 00ECE      C        VP_TOHOUR:
  1195            C      M 	LCALL	ANNOUNCE_NUM
                      2  M  PAGE #( ANNOUNCE_NUM ),
       00ECE 1E82     2     PAGE ( ANNOUNCE_NUM / 1024 ),
       00ECF 11C8     1     CALL ( ANNOUNCE_NUM % 1024 ),
                      2  M  PAGE #( $ ),
       00ED0 1E83     2     PAGE ( $ / 1024 ),
  1196            C        	
  1197 00ED1 0012 C        	RET
  1198 00ED2      C        VP_TOMIN:
  1199            C      M 	LCALL	ANNOUNCE_NUM
                      2  M  PAGE #( ANNOUNCE_NUM ),
       00ED2 1E82     2     PAGE ( ANNOUNCE_NUM / 1024 ),
       00ED3 11C8     1     CALL ( ANNOUNCE_NUM % 1024 ),
                      2  M  PAGE #( $ ),
       00ED4 1E83     2     PAGE ( $ / 1024 ),
  1200            C        	
  1201 00ED5 0012 C        	RET
  1202            C        
  1203            C        ;-------------------------------------------------------------------------------
  1204            C        
  1205            C        
  1206            C        
   603                     INCLUDE		"iic.dt"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;	IIC	Communication
     3            C        ;Note: 	CLK = high after IIC-stop
     4            C        ;	CLK = low after IIC-start/send-data/received-data/ack/noack
     5            C        ;
     6            C        ;	temp0 - data
     7            C        ;	temp1 - counter(8bit)
     8            C        ;	temp2 - counter(times of delay)
     9            C        ;	temp3 - address buckup
    10            C        ;-------------------------------------------------------------------------------
    11       0008 C        PORT_IICSCL	==	_P8
    12       0007 C        PORT_IICSDA	==	_P7
    13       0007 C        PORT_DSPREQ	==	_P7
    14            C        
    15       0000 C        IO_IICSCL	==	0
    16       0007 C        IO_IICSDA	==	7
    17       0006 C        IO_DSPREQ	==	6
    18            C        ;-------------------------------------------------------------------------------
    19            C        ;	每条单周期指令0.6us
    20            C        ;	延时7*0.6us=4.2us，再加上调用时0.6us，共4.8us。
    21            C        ;	Nothing to do with bank or ram
    22            C        ;-------------------------------------------------------------------------------
    23 00ED6      C        IIC:
    24 00ED6      C        IICDELAY:
    25 00ED6 0000 C        	NOP
    26 00ED7 0000 C        	NOP
    27 00ED8 0000 C        	NOP
    28 00ED9 0000 C        	NOP
    29 00EDA 0000 C        	NOP
    30 00EDB 0000 C        	NOP
    31 00EDC 0012 C        	RET
    32            C        ;-------------------------------------------------------------------------------	
    33 00EDD      C        DELAY:		;1ms
    34            C      M 	MOV	TEMP1,@128
       00EDD 1880     1     MOV A,@( 128 )
       00EDE 0056     1     MOV  TEMP1 ,A
    35            C        
    36 00EDF      C        DELAY_LOOP:
    37 00EDF 12D6 C        	CALL	IICDELAY	
    38 00EE0 05D6 C        	DJZ	TEMP1
    39 00EE1 16DF C        	JMP	DELAY_LOOP
    40            C        	
    41 00EE2 0012 C        	RET
    42            C        ;-------------------------------------------------------------------------------
    43 00EE3      C        DELAY_5MS:
    44            C      M 	MOV	TEMP2,@10
       00EE3 180A     1     MOV A,@( 10 )
       00EE4 0057     1     MOV  TEMP2 ,A
    45 00EE5      C        DELAY_5MS_LOOP:
    46 00EE5 12DD C        	CALL	DELAY	
    47 00EE6 05D7 C        	DJZ	TEMP2
    48 00EE7 16E5 C        	JMP	DELAY_5MS_LOOP
    49            C        	
    50 00EE8 0012 C        	RET
    51            C        ;-------------------------------------------------------------------------------	
    52 00EE9      C        DELAY_10MS:
    53            C      M 	MOV	TEMP2,@10
       00EE9 180A     1     MOV A,@( 10 )
       00EEA 0057     1     MOV  TEMP2 ,A
    54 00EEB 16E5 C        	JMP	DELAY_5MS_LOOP
    55            C        ;-------------------------------------------------------------------------------	
    56 00EEC      C        DELAY_100MS:
    57            C      M 	MOV	TEMP2,@200
       00EEC 18C8     1     MOV A,@( 200 )
       00EED 0057     1     MOV  TEMP2 ,A
    58 00EEE 16E5 C        	JMP	DELAY_5MS_LOOP
    59            C        ;-------------------------------------------------------------------------------
    60            C        ;	将SCL线拉高，拉高之前必须检查SCL线是否为低，为低时则需要等待其变高。
    61            C        ;	Nothing to do with bank or ram or stack
    62            C        ;-------------------------------------------------------------------------------
    63 00EEF      C        IICSCL_H:
    64            C        ;---Set clk as input port
    65 00EEF 0018 C        	IOR	PORT_IICSCL
    66 00EF0 1901 C        	OR	A,@(1<<IO_IICSCL)
    67 00EF1 0008 C        	IOW	PORT_IICSCL
    68            C        ;---Check scl H/L
    69 00EF2 0E08 C        	JBS	PORT_IICSCL,IO_IICSCL
    70 00EF3 16F2 C        	JMP	$-1				; 等待SCL线变高
    71            C        
    72 00EF4 0A08 C        	BS	PORT_IICSCL,IO_IICSCL		; 拉高SCL线
    73            C        
    74 00EF5 0018 C        	IOR	PORT_IICSCL
    75 00EF6 1AFE C        	AND	A,@((1<<IO_IICSCL)^0xff)	; 将SCL改为输出状态
    76 00EF7 0008 C        	IOW	PORT_IICSCL
    77            C        
    78 00EF8 0012 C        	RET
    79            C        
    80            C        ;------------------------------------------------------------------------------
    81 00EF9      C        IICSTART:	;(stack+1)
    82 00EF9 12D6 C        	CALL	IICDELAY
    83 00EFA 12D6 C        	CALL	IICDELAY
    84 00EFB 09C7 C        	BC	PORT_IICSDA,IO_IICSDA		; 拉低SDA线，产生一个start条件
    85 00EFC 12D6 C        	CALL	IICDELAY			; 延时5us
    86 00EFD 0808 C        	BC	PORT_IICSCL,IO_IICSCL		; SCL变低
    87 00EFE 12D6 C        	CALL	IICDELAY
    88 00EFF 0012 C        	RET
    89            C        ;-------------------------------------------------------------------------------
    90 00F00      C        IICSTOP:	;(stack+1)
    91 00F00 0017 C        	IOR	PORT_IICSDA
    92 00F01 1A7F C        	AND	A,@((1<<IO_IICSDA)^0xff)	; 将SDA改为输出状态
    93 00F02 0007 C        	IOW	PORT_IICSDA
    94            C        	
    95 00F03 09C7 C        	BC	PORT_IICSDA,IO_IICSDA		; SDA输出低
    96 00F04 12D6 C        	CALL	IICDELAY
    97 00F05 12EF C        	CALL	IICSCL_H
    98 00F06 12D6 C        	CALL	IICDELAY
    99 00F07 0BC7 C        	BS	PORT_IICSDA,IO_IICSDA		; SDA输出高
   100            C        
   101 00F08 0012 C        	RET
   102            C        ;-------------------------------------------------------------------------------
   103 00F09      C        IICSENDACK:	;(stack+1)
   104 00F09 09C7 C        	BC	PORT_IICSDA,IO_IICSDA		;ACK = 0
   105 00F0A 170C C        	JMP	IICACK
   106            C        
   107 00F0B      C        IICSENDNOACK:	;(stack+1)
   108 00F0B 0BC7 C        	BS	PORT_IICSDA,IO_IICSDA		;ACK = 1
   109 00F0C      C        IICACK:
   110 00F0C 0017 C        	IOR	PORT_IICSDA
   111 00F0D 1A7F C        	AND	A,@((1<<IO_IICSDA)^0xff)	;将SDA线改为输出
   112 00F0E 0007 C        	IOW	PORT_IICSDA
   113            C        	
   114 00F0F 12D6 C        	CALL	IICDELAY
   115 00F10 12EF C        	CALL	IICSCL_H
   116 00F11 12D6 C        	CALL	IICDELAY
   117            C        
   118 00F12 0808 C        	BC	PORT_IICSCL,IO_IICSCL		;SCL = low
   119            C        	
   120 00F13 0012 C        	RET
   121            C        	
   122            C        ;-------------------------------------------------------------------------------
   123 00F14      C        IICGETACK:	;(stack+1)
   124 00F14 0017 C        	IOR	PORT_IICSDA
   125 00F15 1980 C        	OR	A,@(1<<IO_IICSDA)			; 将SDA线改为输入状态
   126 00F16 0007 C        	IOW	PORT_IICSDA
   127            C        
   128 00F17 12D6 C        	CALL	IICDELAY
   129 00F18 12D6 C        	CALL	IICDELAY			; 延时5us
   130 00F19 12EF C        	CALL	IICSCL_H			; 拉高SCL线
   131 00F1A 12D6 C        	CALL	IICDELAY			; 延时5us
   132            C        
   133            C      M 	ANDA	PORT_IICSDA,@(1<<IO_IICSDA)	; 得到ACK状态,(z)
       00F1B 1880     1     MOV A,@(( 1 << IO_IICSDA ))
       00F1C 0287     1     AND A, PORT_IICSDA 
   134            C        
   135 00F1D 0808 C        	BC	PORT_IICSCL,IO_IICSCL		; 拉低SCL线
   136            C        	
   137 00F1E 0012 C        	RET
   138            C        ;-------------------------------------------------------------------------------
   139 00F1F      C        IICSENDBYTE:	;(stack+1)
   140 00F1F 0055 C        	MOV	TEMP0,A
   141            C      M 	MOV	TEMP1,@(8)			; 一次发送8位
       00F20 1808     1     MOV A,@( 8 )
       00F21 0056     1     MOV  TEMP1 ,A
   142            C        	
   143 00F22 0017 C        	IOR	PORT_IICSDA
   144 00F23 1A7F C        	AND	A,@((1<<IO_IICSDA)^0XFF)	; 将SDA线改为输出
   145 00F24 0007 C        	IOW	PORT_IICSDA
   146 00F25      C        IICSENDBYTE_LOOP:
   147 00F25 12D6 C        	CALL	IICDELAY
   148            C        	
   149            C      M 	JPB	TEMP0,7,$+3			; 数据从最高位开始发送
       00F26 0DD5     1     JBC  TEMP0 , 7 
       00F27 172A     1     JMP ( $ + 3 ),
   150 00F28 09C7 C        	BC	PORT_IICSDA,IO_IICSDA		; 改变SDA线的状态
   151 00F29 172B C        	JMP	$+2
   152 00F2A 0BC7 C        	BS	PORT_IICSDA,IO_IICSDA		; 改变SDA线的状态
   153            C        
   154 00F2B 06D5 C        	RLC	TEMP0
   155            C        	
   156 00F2C 12EF C        	CALL	IICSCL_H
   157 00F2D 12D6 C        	CALL	IICDELAY			; 延时5us
   158            C        ;---SCL = LOW	
   159 00F2E 0808 C        	BC	PORT_IICSCL,IO_IICSCL		; 拉低SCL线
   160            C        
   161 00F2F 05D6 C        	DJZ	TEMP1
   162 00F30 1725 C        	JMP	IICSENDBYTE_LOOP
   163 00F31 0012 C        	RET
   164            C        
   165            C        ;-------------------------------------------------------------------------------
   166 00F32      C        IICRECEBYTE:	;(stack+1)
   167 00F32 0017 C        	IOR	PORT_IICSDA
   168 00F33 1980 C        	OR	A,@(1<<IO_IICSDA)		;SDA as a input-port
   169 00F34 0007 C        	IOW	PORT_IICSDA
   170            C        
   171            C      M 	MOV	TEMP1,@(8)
       00F35 1808     1     MOV A,@( 8 )
       00F36 0056     1     MOV  TEMP1 ,A
   172 00F37 00D5 C        	CLR	TEMP0
   173 00F38      C        IICRECEBYTE_LOOP:
   174 00F38 12D6 C        	CALL	IICDELAY			; Delay during SCL = low
   175 00F39 12EF C        	CALL	IICSCL_H			; wait then Set SCL = high
   176 00F3A 12D6 C        	CALL	IICDELAY
   177            C        	
   178 00F3B 0803 C        	BC	_STATUS,C
   179 00F3C 0DC7 C        	JBC	PORT_IICSDA,IO_IICSDA		; 读SDA的状态
   180 00F3D 0A03 C        	BS	_STATUS,C
   181            C        
   182 00F3E 06D5 C        	RLC	TEMP0				; stor data
   183 00F3F 0808 C        	BC	PORT_IICSCL,IO_IICSCL		; SCL = low
   184 00F40 05D6 C        	DJZ	TEMP1
   185 00F41 1738 C        	JMP	IICRECEBYTE_LOOP
   186 00F42 0415 C        	MOV	A,TEMP0
   187            C        
   188 00F43 0012 C        	RET
   189            C        ;-------------------------------------------------------------------------------
   190            C        ;	Send data in current block currnet address(_RC)
   191            C        ;-------------------------------------------------------------------------------
   192 00F44      C        SEND2B_COMMAND:			;(stack+2)
   193 00F44 0D47 C        	JBC	_P7,5	;DC ?
   194 00F45 0012 C        	RET
   195            C        	
   196 00F46 12F9 C        	CALL	IICSTART
   197            C        ;-
   198 00F47 1840 C        	MOV	A,@0X40		;write address(0x20)
   199 00F48 131F C        	CALL	IICSENDBYTE
   200 00F49 1314 C        	CALL	IICGETACK
   201            C      M 	JPNZ	SEND2B_COMMAND_AGAIN
       00F4A 0E83     1     JBS  _STATUS , Z 
       00F4B 175E     1     JMP  SEND2B_COMMAND_AGAIN ,
   202            C        ;-	
   203            C      M 	BLOCK	1
       00F4C 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00F4D 000A     1     IOW  _IOCA ,
   204            C      M 	MOV	_RC,@COMMAND
       00F4E 1800     1     MOV A,@( COMMAND )
       00F4F 004C     1     MOV  _RC ,A
   205            C        
   206 00F50 040D C        	MOV	A,_RD
   207 00F51 131F C        	CALL	IICSENDBYTE	;the first Byte
   208 00F52 1314 C        	CALL	IICGETACK
   209            C      M 	JPNZ	SEND2B_COMMAND_AGAIN
       00F53 0E83     1     JBS  _STATUS , Z 
       00F54 175E     1     JMP  SEND2B_COMMAND_AGAIN ,
   210 00F55 054C C        	INC	_RC	
   211            C        ;-	
   212 00F56 040D C        	MOV	A,_RD
   213 00F57 131F C        	CALL	IICSENDBYTE	;the second Byte
   214 00F58 1314 C        	CALL	IICGETACK
   215            C      M 	JPNZ	SEND2B_COMMAND_AGAIN
       00F59 0E83     1     JBS  _STATUS , Z 
       00F5A 175E     1     JMP  SEND2B_COMMAND_AGAIN ,
   216 00F5B 054C C        	INC	_RC
   217            C        ;-
   218 00F5C 1300 C        	CALL	IICSTOP
   219            C        
   220 00F5D 0012 C        	RET
   221 00F5E      C        SEND2B_COMMAND_AGAIN:
   222 00F5E 1300 C        	CALL	IICSTOP
   223 00F5F 12D6 C        	CALL	IICDELAY
   224 00F60 12D6 C        	CALL	IICDELAY
   225            C        
   226 00F61 1744 C        	JMP	SEND2B_COMMAND
   227            C        ;-------------------------------------------------------------------------------
   228 00F62      C        SEND4B_COMMAND:		;(stack+2)
   229 00F62 0D47 C        	JBC	_P7,5	;DC ?
   230 00F63 0012 C        	RET
   231 00F64 12F9 C        	CALL	IICSTART
   232            C        ;-
   233 00F65 1840 C        	MOV	A,@0X40		;write address(0x20)
   234 00F66 131F C        	CALL	IICSENDBYTE
   235 00F67 1314 C        	CALL	IICGETACK
   236            C      M 	JPNZ	SEND4B_COMMAND_AGAIN
       00F68 0E83     1     JBS  _STATUS , Z 
       00F69 1780     1     JMP  SEND4B_COMMAND_AGAIN ,
   237            C        	
   238            C      M 	BLOCK	1
       00F6A 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00F6B 000A     1     IOW  _IOCA ,
   239            C      M 	MOV	_RC,@COMMAND
       00F6C 1800     1     MOV A,@( COMMAND )
       00F6D 004C     1     MOV  _RC ,A
   240            C        ;-	
   241 00F6E 040D C        	MOV	A,_RD
   242 00F6F 131F C        	CALL	IICSENDBYTE	;the first Byte
   243 00F70 1314 C        	CALL	IICGETACK
   244            C        	;JPNZ	SEND4B_COMMAND_AGAIN
   245 00F71 054C C        	INC	_RC	
   246            C        ;-	
   247 00F72 040D C        	MOV	A,_RD
   248 00F73 131F C        	CALL	IICSENDBYTE	;the second Byte
   249 00F74 1314 C        	CALL	IICGETACK
   250            C        	;JPNZ	SEND4B_COMMAND_AGAIN
   251 00F75 054C C        	INC	_RC	
   252            C        ;-	
   253 00F76 040D C        	MOV	A,_RD
   254 00F77 131F C        	CALL	IICSENDBYTE	;the third Byte
   255 00F78 1314 C        	CALL	IICGETACK
   256            C        	;JPNZ	SEND4B_COMMAND_AGAIN
   257 00F79 054C C        	INC	_RC	
   258            C        ;-	
   259 00F7A 040D C        	MOV	A,_RD
   260 00F7B 131F C        	CALL	IICSENDBYTE	;the forth Byte
   261 00F7C 1314 C        	CALL	IICGETACK
   262            C        	;JPNZ	SEND4B_COMMAND_AGAIN
   263 00F7D 054C C        	INC	_RC	
   264            C        ;-	
   265 00F7E 1300 C        	CALL	IICSTOP
   266            C        
   267 00F7F 0012 C        	RET
   268            C        
   269 00F80      C        SEND4B_COMMAND_AGAIN:
   270 00F80 1300 C        	CALL	IICSTOP
   271 00F81 12D6 C        	CALL	IICDELAY
   272 00F82 12D6 C        	CALL	IICDELAY
   273            C        
   274 00F83 1762 C        	JMP	SEND4B_COMMAND
   275            C        ;-------------------------------------------------------------------------------
   276 00F84      C        SEND6B_COMMAND:		;(stack+2)
   277 00F84 0D47 C        	JBC	_P7,5	;DC ?
   278 00F85 0012 C        	RET
   279            C        	
   280 00F86 12F9 C        	CALL	IICSTART
   281            C        ;-
   282 00F87 1840 C        	MOV	A,@0X40		;write address(0x20)
   283 00F88 131F C        	CALL	IICSENDBYTE
   284 00F89 1314 C        	CALL	IICGETACK
   285            C      M 	JPNZ	SEND6B_COMMAND_AGAIN
       00F8A 0E83     1     JBS  _STATUS , Z 
       00F8B 17AA     1     JMP  SEND6B_COMMAND_AGAIN ,
   286            C        	
   287            C      M 	BLOCK	1
       00F8C 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00F8D 000A     1     IOW  _IOCA ,
   288            C      M 	MOV	_RC,@COMMAND
       00F8E 1800     1     MOV A,@( COMMAND )
       00F8F 004C     1     MOV  _RC ,A
   289            C        ;-	
   290 00F90 040D C        	MOV	A,_RD
   291 00F91 131F C        	CALL	IICSENDBYTE	;the first Byte
   292 00F92 1314 C        	CALL	IICGETACK
   293            C        	;JPNZ	SEND6B_COMMAND_AGAIN
   294 00F93 054C C        	INC	_RC		
   295            C        ;-	
   296 00F94 040D C        	MOV	A,_RD
   297 00F95 131F C        	CALL	IICSENDBYTE	;the second Byte
   298 00F96 1314 C        	CALL	IICGETACK
   299            C        	;JPNZ	SEND6B_COMMAND_AGAIN
   300 00F97 054C C        	INC	_RC	
   301            C        ;-	
   302 00F98 040D C        	MOV	A,_RD
   303 00F99 131F C        	CALL	IICSENDBYTE	;the third Byte
   304 00F9A 1314 C        	CALL	IICGETACK
   305            C        	;JPNZ	SEND6B_COMMAND_AGAIN
   306 00F9B 054C C        	INC	_RC	
   307            C        ;-	
   308 00F9C 040D C        	MOV	A,_RD
   309 00F9D 131F C        	CALL	IICSENDBYTE	;the forth Byte
   310 00F9E 1314 C        	CALL	IICGETACK
   311            C        	;JPNZ	SEND6B_COMMAND_AGAIN
   312 00F9F 054C C        	INC	_RC	
   313            C        ;-	
   314 00FA0 040D C        	MOV	A,_RD
   315 00FA1 131F C        	CALL	IICSENDBYTE	;the fifth Byte
   316 00FA2 1314 C        	CALL	IICGETACK
   317            C        	;JPNZ	SEND6B_COMMAND_AGAIN
   318 00FA3 054C C        	INC	_RC	
   319            C        ;-	
   320 00FA4 040D C        	MOV	A,_RD
   321 00FA5 131F C        	CALL	IICSENDBYTE	;the sixth Byte
   322 00FA6 1314 C        	CALL	IICGETACK
   323            C        	;JPNZ	SEND6B_COMMAND_AGAIN
   324 00FA7 054C C        	INC	_RC	
   325            C        ;-	
   326 00FA8 1300 C        	CALL	IICSTOP
   327            C        
   328 00FA9 0012 C        	RET
   329            C        
   330 00FAA      C        SEND6B_COMMAND_AGAIN:
   331 00FAA 1300 C        	CALL	IICSTOP
   332 00FAB 12D6 C        	CALL	IICDELAY
   333 00FAC 12D6 C        	CALL	IICDELAY
   334            C        
   335 00FAD 1784 C        	JMP	SEND6B_COMMAND
   336            C        ;-------------------------------------------------------------------------------
   337            C        ;	Get respone and stor
   338            C        ;-------------------------------------------------------------------------------
   339 00FAE      C        RECE2B_RESPOND:		;(stack+2)
   340 00FAE 0D47 C        	JBC	_P7,5	;DC ?
   341 00FAF 0012 C        	RET
   342            C        
   343 00FB0 0F87 C        	JBS	PORT_DSPREQ,IO_DSPREQ
   344 00FB1 17B0 C        	JMP	$-1		;Protocal require(busy=high,then receiving respone allowed)
   345 00FB2      C        RECE2B_RESPONE_LOOP:
   346            C        		
   347 00FB2 12F9 C        	CALL	IICSTART
   348            C        ;-
   349 00FB3 1841 C        	MOV	A,@0X41		;write address(0x20)
   350 00FB4 131F C        	CALL	IICSENDBYTE
   351 00FB5 1314 C        	CALL	IICGETACK
   352            C      M 	JPNZ	RECE2B_RESPONE_AGAIN
       00FB6 0E83     1     JBS  _STATUS , Z 
       00FB7 17C6     1     JMP  RECE2B_RESPONE_AGAIN ,
   353            C        		
   354            C      M 	BLOCK	1
       00FB8 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00FB9 000A     1     IOW  _IOCA ,
   355            C      M 	MOV	_RC,@RESPOND
       00FBA 1806     1     MOV A,@( RESPOND )
       00FBB 004C     1     MOV  _RC ,A
   356            C        ;-	
   357 00FBC 1332 C        	CALL	IICRECEBYTE	;the first Byte
   358 00FBD 004D C        	MOV	_RD,A
   359 00FBE 1309 C        	CALL	IICSENDACK
   360 00FBF 054C C        	INC	_RC	
   361            C        ;-	
   362 00FC0 1332 C        	CALL	IICRECEBYTE	;the second Byte
   363 00FC1 004D C        	MOV	_RD,A
   364 00FC2 130B C        	CALL	IICSENDNOACK
   365 00FC3 054C C        	INC	_RC	
   366            C        ;-	
   367 00FC4 1300 C        	CALL	IICSTOP
   368            C        
   369 00FC5 0012 C        	RET
   370 00FC6      C        RECE2B_RESPONE_AGAIN:
   371 00FC6 1300 C        	CALL	IICSTOP
   372 00FC7 12D6 C        	CALL	IICDELAY
   373 00FC8 12D6 C        	CALL	IICDELAY
   374            C        
   375 00FC9 17B2 C        	JMP	RECE2B_RESPONE_LOOP
   376            C        ;-------------------------------------------------------------------------------
   377            C        ;	STOR COMMAND
   378            C        ;	INPUT : TEMP0,TEMP1,TEMP2,TEMP3,,TEMP4,TEMP5
   379            C        ;	OUTPUT: NO
   380            C        ;-------------------------------------------------------------------------------
   381 00FCA      C        STOR_COMMAND:
   382            C        ;---
   383            C      M 	BLOCK	1
       00FCA 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00FCB 000A     1     IOW  _IOCA ,
   384            C      M 	MOV	_RC,@COMMAND
       00FCC 1800     1     MOV A,@( COMMAND )
       00FCD 004C     1     MOV  _RC ,A
   385            C        
   386            C      M 	MOV 	_RD,TEMP0
       00FCE 0415     1     MOV A, TEMP0 
       00FCF 004D     1     MOV  _RD ,A
   387 00FD0 054C C        	INC	_RC
   388            C      M 	MOV 	_RD,TEMP1
       00FD1 0416     1     MOV A, TEMP1 
       00FD2 004D     1     MOV  _RD ,A
   389 00FD3 054C C        	INC	_RC
   390            C      M 	MOV 	_RD,TEMP2
       00FD4 0417     1     MOV A, TEMP2 
       00FD5 004D     1     MOV  _RD ,A
   391 00FD6 054C C        	INC	_RC
   392            C      M 	MOV 	_RD,TEMP3
       00FD7 0418     1     MOV A, TEMP3 
       00FD8 004D     1     MOV  _RD ,A
   393 00FD9 054C C        	INC	_RC
   394            C      M 	MOV 	_RD,TEMP4
       00FDA 0419     1     MOV A, TEMP4 
       00FDB 004D     1     MOV  _RD ,A
   395 00FDC 054C C        	INC	_RC
   396            C      M 	MOV 	_RD,TEMP5
       00FDD 041A     1     MOV A, TEMP5 
       00FDE 004D     1     MOV  _RD ,A
   397 00FDF 054C C        	INC	_RC
   398            C        
   399 00FE0 0012 C        	RET
   400            C        ;-------------------------------------------------------------------------------
   401            C        ;	Get respond
   402            C        ;	INPUT : 
   403            C        ;	OUTPUT: TEMP0,TEMP1
   404            C        ;-------------------------------------------------------------------------------
   405 00FE1      C        GET_RESPOND:
   406            C        ;---
   407            C      M 	BLOCK	1
       00FE1 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00FE2 000A     1     IOW  _IOCA ,
   408            C      M 	MOV	_RC,@RESPOND
       00FE3 1806     1     MOV A,@( RESPOND )
       00FE4 004C     1     MOV  _RC ,A
   409            C        
   410            C      M 	MOV 	TEMP0,_RD
       00FE5 040D     1     MOV A, _RD 
       00FE6 0055     1     MOV  TEMP0 ,A
   411 00FE7 054C C        	INC	_RC
   412            C      M 	MOV 	TEMP1,_RD
       00FE8 040D     1     MOV A, _RD 
       00FE9 0056     1     MOV  TEMP1 ,A
   413 00FEA 054C C        	INC	_RC
   414            C        	
   415 00FEB 0012 C        	RET
   416            C        ;-------------------------------------------------------------------------------
   417            C        ;	Get old command
   418            C        ;	INPUT : 
   419            C        ;	OUTPUT: TEMP0,TEMP1
   420            C        ;-------------------------------------------------------------------------------
   421 00FEC      C        GET_COMMAND:
   422            C        ;---
   423            C      M 	BLOCK	1
       00FEC 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       00FED 000A     1     IOW  _IOCA ,
   424            C      M 	MOV	_RC,@COMMAND
       00FEE 1800     1     MOV A,@( COMMAND )
       00FEF 004C     1     MOV  _RC ,A
   425            C        
   426            C      M 	MOV 	TEMP0,_RD
       00FF0 040D     1     MOV A, _RD 
       00FF1 0055     1     MOV  TEMP0 ,A
   427 00FF2 054C C        	INC	_RC
   428            C      M 	MOV 	TEMP1,_RD
       00FF3 040D     1     MOV A, _RD 
       00FF4 0056     1     MOV  TEMP1 ,A
   429            C        /*
   430            C        	INC	_RC
   431            C        	MOV 	TEMP2,_RD
   432            C        	INC	_RC
   433            C        	MOV 	TEMP3,_RD
   434            C        	INC	_RC
   435            C        	MOV 	TEMP4,_RD
   436            C        	INC	_RC
   437            C        	MOV 	TEMP5,_RD
   438            C        	INC	_RC
   439            C        */
   440            C        	
   441 00FF5 0012 C        	RET	
   442            C        ;-------------------------------------------------------------------------------
   443            C        
   604                     ;-------------------------------------------------------------------------------
   605                     ;page4
   606                     INCLUDE		"f_answer.dt"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;	answer
     3            C        ;-------------------------------------------------------------------------------
     4            C        ORG	(4<<10)
     5            C        ;-------------------------------------------------------------------------------
     6 01000      C        ANS_FUNC:
     7            C      M 	BANK	1
       01000 0B84     1     BS  _RSR , 6 
       01001 09C4     1     BC  _RSR , 7 
     8            C        	
     9 01002 1880 C        	MOV 	A,@CMSG_MKEY
    10 01003 0120 C        	SUB 	A,B1_MSG
    11            C      M 	JPZ 	ANS_FUNC_MKEY
       01004 0C83     1     JBC  _STATUS , Z 
       01005 1413     1     JMP  ANS_FUNC_MKEY ,
    12            C        	
    13 01006 1893 C        	MOV 	A,@CHOOK_OFF
    14 01007 0120 C        	SUB 	A,B1_MSG
    15            C      M 	JPZ 	ANS_FUNC_HOOKOFF
       01008 0C83     1     JBC  _STATUS , Z 
       01009 142A     1     JMP  ANS_FUNC_HOOKOFF ,
    16            C        
    17 0100A 0421 C        	MOV	A,B1_PRO_VAR
    18 0100B 1A03 C        	AND	A,@0X03
    19            C      M 	MTBL
       0100C 0020     1     TBL 
             100C     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    20 0100D 1431 C        	JMP	ANS_FUNC_0	;0
    21 0100E 1486 C        	JMP	ANS_FUNC_VOP	;1.play-OGM before record
    22 0100F 14E6 C        	JMP	ANS_FUNC_REC	;2.REC-icm/LINE
    23 01010 15A8 C        	JMP	ANS_FUNC_EXIT	;3.Exit
    24            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    25            C        ;return
    26 01011      C        ANS_FUNC_END:	
    27            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       01011 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       01012 15AC     1     JMP ( MAIN_LOOP % 1024 ),
    28            C        ;---------------------------------------
    29            C        ;	B1_PRO_VAR	bit(0..1) program status
    30            C        ;			bit(2..3) EXIT status(0-VOX/BTONE/CTONE,1-CPC,HS_HF-work)
    31            C        ;			bit4 - 1/0-LineMode/RecordMode
    32            C        ;			bit5 reserved
    33            C        ;			bit6 reserved
    34            C        ;			bit7 reserved
    35            C        ;---------------------------------------
    36 01013      C        ANS_FUNC_MKEY:
    37 01013 1813 C        	MOV	A,@CKEY_STP
    38            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01014 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01015 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01016 1E84     2     PAGE ( $ / 1024 ),
    39            C      M 	JPNC	ANS_FUNC_MKEY_STP
       01017 0E03     1     JBS  _STATUS , C 
       01018 1420     1     JMP  ANS_FUNC_MKEY_STP ,
    40            C        	
    41 01019 1827 C        	MOV	A,@CKEY_SPK
    42            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0101A 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0101B 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0101C 1E84     2     PAGE ( $ / 1024 ),
    43            C      M 	JPNC	ANS_FUNC_MKEY_SPK
       0101D 0E03     1     JBS  _STATUS , C 
       0101E 1423     1     JMP  ANS_FUNC_MKEY_SPK ,
    44            C        
    45 0101F 1411 C        	JMP	ANS_FUNC_END
    46            C        ;---------------------------------------
    47 01020      C        ANS_FUNC_MKEY_STP:
    48 01020 188B C        	MOV	A,@CMSG_CPC
    49 01021 0060 C        	MOV	B1_MSG,A
    50            C        	
    51 01022 1400 C        	JMP	ANS_FUNC
    52            C        ;---------------------------------------
    53 01023      C        ANS_FUNC_MKEY_SPK:
    54 01023 188B C        	MOV	A,@CMSG_CPC
    55 01024 0060 C        	MOV	B1_MSG,A
    56            C        	
    57 01025 1894 C        	MOV	A,@CPHONE_ON
    58            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       01026 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       01027 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       01028 1E84     2     PAGE ( $ / 1024 ),
    59            C        	
    60 01029 1400 C        	JMP	ANS_FUNC
    61            C        ;---------------------------------------
    62 0102A      C        ANS_FUNC_HOOKOFF:
    63 0102A 188B C        	MOV	A,@CMSG_CPC
    64 0102B 0060 C        	MOV	B1_MSG,A
    65            C        	
    66 0102C 1893 C        	MOV	A,@CHOOK_OFF
    67            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       0102D 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       0102E 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0102F 1E84     2     PAGE ( $ / 1024 ),
    68            C        	
    69 01030 1400 C        	JMP	ANS_FUNC
    70            C        ;-------------------------------------------------------------------------------
    71 01031      C        ANS_FUNC_0:			;idle
    72            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       01031 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       01032 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       01033 1E84     2     PAGE ( $ / 1024 ),
    73            C      M 	HF_HOOK_H
       01034 0B08     1     BS  _P8 , 4 
    74            C        
    75 01035 1890 C        	MOV	A,@CMSG_INIT
    76 01036 0120 C        	SUB	A,B1_MSG
    77            C      M 	JPZ	ANS_FUNC_0_OGMPLY
       01037 0C83     1     JBC  _STATUS , Z 
       01038 143A     1     JMP  ANS_FUNC_0_OGMPLY ,
    78            C        
    79 01039 1411 C        	JMP	ANS_FUNC_END
    80            C        ;---------------------------------------
    81 0103A      C        ANS_FUNC_0_OGMPLY:
    82            C        ;-
    83            C      M 	PAGE	#(VGA)
       0103A 1E8C     1     PAGE ( VGA / 1024 ),
    84 0103B 18F0 C        	MOV	A,@~((1<<3)|(1<<2)|(1<<1)|(1<<0))	;"CALL","NEW","RET","MSG"
    85 0103C 1010 C        	CALL	CLRVGASTAMP2
    86 0103D 1802 C        	MOV	A,@(1<<1)
    87 0103E 1000 C        	CALL	VGASTAMP1	;SPK icon on
    88 0103F 1097 C        	CALL	VGADRAWSTAMP
    89            C        	
    90 01040 111E C        	CALL	VGABLANKNUM2
    91 01041 1127 C        	CALL	VGABLANKCHAR
    92 01042 1883 C        	MOV	A,@(STYLE_CENTER)
    93 01043 1026 C        	CALL	VGACHAR
    94 01044 1801 C        	MOV	A,@1		;ANSWER
    95 01045 114D C        	CALL	VGASTRING
    96 01046 18FF C        	MOV	A,@(CH_END)
    97 01047 1026 C        	CALL	VGACHAR
    98 01048 10AB C        	CALL	VGADRAWCHAR
    99            C        	;PAGE	#($)
   100            C        ;-LinToAD0;DA0ToSpk
   101            C      M 	PAGE	#(DAA_ANS_SPK)
       01049 1E83     1     PAGE ( DAA_ANS_SPK / 1024 ),
   102 0104A 11DE C        	CALL	DAA_ANS_SPK
   103            C      M 	PAGE	#(BCVOX_INIT)
       0104B 1E82     1     PAGE ( BCVOX_INIT / 1024 ),
   104 0104C 13B4 C        	CALL	BCVOX_INIT
   105            C        	;PAGE	#(SET_DAM_RAD0GAIN)	
   106            C        	;CALL	SET_DAM_RAD0GAIN
   107            C      M 	PAGE	#(MODE9_LON)
       0104D 1E81     1     PAGE ( MODE9_LON / 1024 ),
   108 0104E 1373 C        	CALL	MODE9_LON
   109            C      M 	PAGE	#($)
       0104F 1E84     1     PAGE ( $ / 1024 ),
   110            C        	
   111            C      M 	XMUTE_H
       01050 0A88     1     BS  _P8 , 2 
   112            C      M 	MUTE_L
       01051 08C8     1     BC  _P8 , 3 
   113            C      M 	DAM_MIC_DISABLE
       01052 0909     1     BC  _P9 , 4 
   114            C        
   115            C      M 	DAM_SPK_ENABLE
       01053 0B49     1     BS  _P9 , 5 
   116            C        
   117            C        ;-VP Start
   118            C      M 	JPB	DAM_FLAG,2,ANS_FUNC_0_OGMPLY_1	;Answer off
       01054 0C94     1     JBC  DAM_FLAG , 2 
       01055 146A     1     JMP  ANS_FUNC_0_OGMPLY_1 ,
   119            C      M 	JPB	DAM_FLAG,3,ANS_FUNC_0_OGMPLY_1	;OGM2 Selected
       01056 0CD4     1     JBC  DAM_FLAG , 3 
       01057 146A     1     JMP  ANS_FUNC_0_OGMPLY_1 ,
   120            C      M 	JPB	DAM_FLAG,5,ANS_FUNC_0_OGMPLY_1	;Memfull
       01058 0D54     1     JBC  DAM_FLAG , 5 
       01059 146A     1     JMP  ANS_FUNC_0_OGMPLY_1 ,
   121            C      M 	MOV	B1_PRO_VAR,@0X01
       0105A 1801     1     MOV A,@( 1 )
       0105B 0061     1     MOV  B1_PRO_VAR ,A
   122 0105C 1801 C        	MOV	A,@COGM1
   123            C        
   124            C      M 	LCALL	OGM_STATUS
                      2  M  PAGE #( OGM_STATUS ),
       0105D 1E82     2     PAGE ( OGM_STATUS / 1024 ),
       0105E 1169     1     CALL ( OGM_STATUS % 1024 ),
                      2  M  PAGE #( $ ),
       0105F 1E84     2     PAGE ( $ / 1024 ),
   125            C      M 	JPZ	ANS_FUNC_0_OGMPLY_DEFAULTOGM1
       01060 0C83     1     JBC  _STATUS , Z 
       01061 147A     1     JMP  ANS_FUNC_0_OGMPLY_DEFAULTOGM1 ,
   126            C        	
   127 01062 0056 C        	MOV	TEMP1,A
   128            C      M 	MOV	TEMP0,@ID_PLYA
       01063 1806     1     MOV A,@( ID_PLYA )
       01064 0055     1     MOV  TEMP0 ,A
   129            C      M 	PAGE	#(DSP)
       01065 1E83     1     PAGE ( DSP / 1024 ),
   130 01066 1067 C        	CALL	STOR_VP	
   131 01067 108C C        	CALL	LBEEP
   132            C      M 	PAGE	#($)	
       01068 1E84     1     PAGE ( $ / 1024 ),
   133            C        
   134 01069 1411 C        	JMP	ANS_FUNC_END
   135            C        
   136 0106A      C        ANS_FUNC_0_OGMPLY_1:
   137            C      M 	MOV	B1_PRO_VAR,@0X11
       0106A 1811     1     MOV A,@( 17 )
       0106B 0061     1     MOV  B1_PRO_VAR ,A
   138 0106C 1802 C        	MOV	A,@COGM2
   139            C      M 	LCALL	OGM_STATUS
                      2  M  PAGE #( OGM_STATUS ),
       0106D 1E82     2     PAGE ( OGM_STATUS / 1024 ),
       0106E 1169     1     CALL ( OGM_STATUS % 1024 ),
                      2  M  PAGE #( $ ),
       0106F 1E84     2     PAGE ( $ / 1024 ),
   140            C      M 	JPZ	ANS_FUNC_0_OGMPLY_DEFAULTOGM2
       01070 0C83     1     JBC  _STATUS , Z 
       01071 1480     1     JMP  ANS_FUNC_0_OGMPLY_DEFAULTOGM2 ,
   141            C        	
   142 01072 0056 C        	MOV	TEMP1,A
   143            C      M 	MOV	TEMP0,@ID_PLYA
       01073 1806     1     MOV A,@( ID_PLYA )
       01074 0055     1     MOV  TEMP0 ,A
   144            C        	
   145            C      M 	PAGE	#(DSP)
       01075 1E83     1     PAGE ( DSP / 1024 ),
   146 01076 1067 C        	CALL	STOR_VP	
   147 01077 1093 C        	CALL	BBEEP
   148            C      M 	PAGE	#($)	
       01078 1E84     1     PAGE ( $ / 1024 ),
   149            C        
   150 01079 1411 C        	JMP	ANS_FUNC_END
   151 0107A      C        ANS_FUNC_0_OGMPLY_DEFAULTOGM1:
   152            C        	
   153 0107A 1829 C        	MOV	A,@VOPID_DEFOGM1
   154            C      M 	PAGE	#(DSP)
       0107B 1E83     1     PAGE ( DSP / 1024 ),
   155 0107C 1064 C        	CALL	VOP_STOR_VP	
   156 0107D 108C C        	CALL	LBEEP
   157            C      M 	PAGE	#($)
       0107E 1E84     1     PAGE ( $ / 1024 ),
   158            C        	
   159 0107F 1411 C        	JMP	ANS_FUNC_END
   160 01080      C        ANS_FUNC_0_OGMPLY_DEFAULTOGM2:
   161            C        	
   162 01080 182A C        	MOV	A,@VOPID_DEFOGM2
   163            C        	
   164            C      M 	PAGE	#(DSP)
       01081 1E83     1     PAGE ( DSP / 1024 ),
   165 01082 1064 C        	CALL	VOP_STOR_VP	
   166 01083 1093 C        	CALL	BBEEP
   167            C      M 	PAGE	#($)
       01084 1E84     1     PAGE ( $ / 1024 ),
   168            C        
   169 01085 1411 C        	JMP	ANS_FUNC_END
   170            C        ;-------------------------------------------------------------------------------
   171 01086      C        ANS_FUNC_VOP:
   172 01086 188A C        	MOV	A,@CREV_DTMF
   173 01087 0120 C        	SUB	A,B1_MSG		;DTMF
   174            C      M 	JPZ	ANS_FUNC_VOP_DTMF
       01088 0C83     1     JBC  _STATUS , Z 
       01089 1497     1     JMP  ANS_FUNC_VOP_DTMF ,
   175            C        ;ANS_FUNC_VOP_1:
   176 0108A 1888 C        	MOV	A,@CMSG_BTONE
   177 0108B 0120 C        	SUB	A,B1_MSG		;BTONE 10s
   178            C      M 	JPZ	ANS_FUNC_VOP_BTONE
       0108C 0C83     1     JBC  _STATUS , Z 
       0108D 14B3     1     JMP  ANS_FUNC_VOP_BTONE ,
   179            C        ;ANS_FUNC_VOP_5:
   180 0108E 188B C        	MOV	A,@CMSG_CPC
   181 0108F 0120 C        	SUB	A,B1_MSG		;接线后摘机(相当于CPC)
   182            C      M 	JPZ	ANS_FUNC_VOP_CPC
       01090 0C83     1     JBC  _STATUS , Z 
       01091 14B3     1     JMP  ANS_FUNC_VOP_CPC ,
   183            C        ;ANS_FUNC_VOP_7:
   184 01092 1885 C        	MOV	A,@CVP_END
   185 01093 0120 C        	SUB	A,B1_MSG
   186            C      M 	JPZ	ANS_FUNC_VOP_VPEND
       01094 0C83     1     JBC  _STATUS , Z 
       01095 14B7     1     JMP  ANS_FUNC_VOP_VPEND ,
   187            C        	
   188 01096 1411 C        	JMP	ANS_FUNC_END
   189            C        ;---------------------------------------
   190 01097      C        ANS_FUNC_VOP_DTMF:
   191            C      M 	LCALL	BCVOX_INIT	;有键按下BCVOX要清零
                      2  M  PAGE #( BCVOX_INIT ),
       01097 1E82     2     PAGE ( BCVOX_INIT / 1024 ),
       01098 13B4     1     CALL ( BCVOX_INIT % 1024 ),
                      2  M  PAGE #( $ ),
       01099 1E84     2     PAGE ( $ / 1024 ),
   192            C        	
   193 0109A 0429 C        	MOV	A,B1_DTMF_VAL
   194            C      M 	LCALL	PSWORD_CHK
                      2  M  PAGE #( PSWORD_CHK ),
       0109B 1E82     2     PAGE ( PSWORD_CHK / 1024 ),
       0109C 11EB     1     CALL ( PSWORD_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0109D 1E84     2     PAGE ( $ / 1024 ),
   195            C      M 	JPC	ANS_FUNC_VOP_DTMFPASS
       0109E 0C03     1     JBC  _STATUS , C 
       0109F 1511     1     JMP  ANS_FUNC_VOP_DTMFPASS ,
   196            C        
   197 010A0 0429 C        	MOV	A,B1_DTMF_VAL
   198 010A1 1D0A C        	SUB	A,@NUM_XIN
   199            C      M 	JPNZ	ANS_FUNC_END
       010A2 0E83     1     JBS  _STATUS , Z 
       010A3 1411     1     JMP  ANS_FUNC_END ,
   200            C        ;---"*"	detected,stop playing OGM
   201            C      M 	PAGE	#(INIT_DAM_FUNC)
       010A4 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   202 010A5 11C1 C        	CALL	INIT_DAM_FUNC
   203            C      M 	LCALL	LBEEP
                      2  M  PAGE #( LBEEP ),
       010A6 1E83     2     PAGE ( LBEEP / 1024 ),
       010A7 108C     1     CALL ( LBEEP % 1024 ),
                      2  M  PAGE #( $ ),
       010A8 1E84     2     PAGE ( $ / 1024 ),
   204            C        	
   205 010A9 0721 C        	SWAPA	B1_PRO_VAR
   206 010AA 1A0F C        	AND	A,@0X0F
   207            C      M 	JPZ	ANS_FUNC_END
       010AB 0C83     1     JBC  _STATUS , Z 
       010AC 1411     1     JMP  ANS_FUNC_END ,
   208            C        		
   209            C      M 	PAGE	#(INIT_DAM_FUNC)
       010AD 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   210 010AE 11C1 C        	CALL	INIT_DAM_FUNC
   211            C      M 	LCALL	BBEEP
                      2  M  PAGE #( BBEEP ),
       010AF 1E83     2     PAGE ( BBEEP / 1024 ),
       010B0 1093     1     CALL ( BBEEP % 1024 ),
                      2  M  PAGE #( $ ),
       010B1 1E84     2     PAGE ( $ / 1024 ),
   212            C        	
   213 010B2 1411 C        	JMP	ANS_FUNC_END
   214            C        ;---------------------------------------
   215 010B3      C        ANS_FUNC_VOP_BTONE:
   216 010B3      C        ANS_FUNC_VOP_CPC:
   217            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       010B3 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       010B4 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       010B5 1E84     2     PAGE ( $ / 1024 ),
   218            C        
   219 010B6 15AD C        	JMP	ANS_FUNC_EXIT_VPEND
   220            C        ;---------------------------------------
   221 010B7      C        ANS_FUNC_VOP_VPEND:
   222            C        
   223            C      M 	PAGE	#(INIT_DAM_FUNC)
       010B7 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   224 010B8 11C1 C        	CALL	INIT_DAM_FUNC
   225            C      M 	PAGE	#(DAA_ANS_REC)
       010B9 1E83     1     PAGE ( DAA_ANS_REC / 1024 ),
   226 010BA 11D9 C        	CALL	DAA_ANS_REC
   227            C      M 	PAGE	#(BCVOX_INIT)
       010BB 1E82     1     PAGE ( BCVOX_INIT / 1024 ),
   228 010BC 13B4 C        	CALL	BCVOX_INIT	;Start Record/Line mode
   229            C      M 	PAGE	#(VPMSG_CHK)
       010BD 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   230 010BE 1182 C        	CALL	VPMSG_CHK
   231 010BF 1182 C        	CALL	VPMSG_CHK	;!!!!!!一个未知故障,必须CALL两次;否则查到的是OGM_STATUS中的VP信息
   232            C        	;PAGE	#($)
   233            C        
   234 010C0 00E2 C        	CLR	B1_PRO_VAR1
   235 010C1 1810 C        	MOV	A,@CTMR1S
   236            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       010C2 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       010C3 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       010C4 1E84     2     PAGE ( $ / 1024 ),
   237            C        
   238            C      M 	JPB	B1_PRO_VAR,4,ANS_FUNC_VOP_VPEND_1	;LineMode
       010C5 0D21     1     JBC  B1_PRO_VAR , 4 
       010C6 14E0     1     JMP  ANS_FUNC_VOP_VPEND_1 ,
   239            C        ;-
   240            C      M 	PAGE	#(VGA)
       010C7 1E8C     1     PAGE ( VGA / 1024 ),
   241 010C8 111E C        	CALL	VGABLANKNUM2
   242 010C9 1127 C        	CALL	VGABLANKCHAR
   243            C        ;-	
   244 010CA 1883 C        	MOV	A,@(STYLE_CENTER)
   245 010CB 1026 C        	CALL	VGACHAR
   246 010CC 182C C        	MOV	A,@44		;ICM
   247 010CD 114D C        	CALL	VGASTRING
   248 010CE 1800 C        	MOV	A,@(CH_BLANK)
   249 010CF 1026 C        	CALL	VGACHAR
   250 010D0 1810 C        	MOV	A,@16		;RECORDING
   251 010D1 114D C        	CALL	VGASTRING
   252            C        	
   253 010D2 18FF C        	MOV	A,@(CH_END)
   254 010D3 1026 C        	CALL	VGACHAR
   255 010D4 10AB C        	CALL	VGADRAWCHAR
   256            C      M 	PAGE	#($)
       010D5 1E84     1     PAGE ( $ / 1024 ),
   257            C        ;-Record Start	
   258 010D6 18FF C        	MOV	A,@0XFF
   259            C      M 	PAGE	#(SET_VP1IDX)
       010D7 1E83     1     PAGE ( SET_VP1IDX / 1024 ),
   260 010D8 1275 C        	CALL	SET_VP1IDX	;Identify as Message
   261            C        	
   262 010D9 1802 C        	MOV	A,@0X02
   263 010DA 0061 C        	MOV	B1_PRO_VAR,A
   264            C        	
   265            C      M 	SET_NLEDBLK_FLAG
       010DB 0A92     1     BS  SYS_FLAG , 2 
   266            C        	
   267            C      M 	LCALL	RECORD_START
                      2  M  PAGE #( RECORD_START ),
       010DC 1E82     2     PAGE ( RECORD_START / 1024 ),
       010DD 1041     1     CALL ( RECORD_START % 1024 ),
                      2  M  PAGE #( $ ),
       010DE 1E84     2     PAGE ( $ / 1024 ),
   268 010DF 1411 C        	JMP	ANS_FUNC_END
   269            C        ;-----------------------------
   270 010E0      C        ANS_FUNC_VOP_VPEND_1:
   271            C        ;-Line Start
   272 010E0 1812 C        	MOV	A,@0X12
   273 010E1 0061 C        	MOV	B1_PRO_VAR,A
   274            C        
   275            C      M 	LCALL	LINE_START
                      2  M  PAGE #( LINE_START ),
       010E2 1E82     2     PAGE ( LINE_START / 1024 ),
       010E3 1038     1     CALL ( LINE_START % 1024 ),
                      2  M  PAGE #( $ ),
       010E4 1E84     2     PAGE ( $ / 1024 ),
   276            C        	
   277 010E5 1411 C        	JMP	ANS_FUNC_END
   278            C        ;-------------------------------------------------------------------------------
   279 010E6      C        ANS_FUNC_REC:				;record or line Mode
   280            C        
   281 010E6 188A C        	MOV	A,@CREV_DTMF
   282 010E7 0120 C        	SUB	A,B1_MSG		;DTMF
   283            C      M 	JPZ	ANS_FUNC_REC_DTMF
       010E8 0C83     1     JBC  _STATUS , Z 
       010E9 1503     1     JMP  ANS_FUNC_REC_DTMF ,
   284            C        ;ANS_FUNC_REC_1:
   285 010EA 1898 C        	MOV	A,@CMSG_TMR
   286 010EB 0120 C        	SUB	A,B1_MSG		;time 1s
   287            C      M 	JPZ	ANS_FUNC_REC_TMR
       010EC 0C83     1     JBC  _STATUS , Z 
       010ED 151A     1     JMP  ANS_FUNC_REC_TMR ,
   288            C        ;ANS_FUNC_REC_2:
   289 010EE 1887 C        	MOV	A,@CMSG_VOX
   290 010EF 0120 C        	SUB	A,B1_MSG		;VOX_ON 8s
   291            C      M 	JPZ	ANS_FUNC_REC_VOX
       010F0 0C83     1     JBC  _STATUS , Z 
       010F1 1550     1     JMP  ANS_FUNC_REC_VOX ,
   292            C        ;ANS_FUNC_REC_3:
   293 010F2 1889 C        	MOV	A,@CMSG_CTONE
   294 010F3 0120 C        	SUB	A,B1_MSG		;CTONE 8s
   295            C      M 	JPZ	ANS_FUNC_REC_CTONE
       010F4 0C83     1     JBC  _STATUS , Z 
       010F5 1550     1     JMP  ANS_FUNC_REC_CTONE ,
   296            C        ;ANS_FUNC_REC_4:
   297 010F6 1888 C        	MOV	A,@CMSG_BTONE
   298 010F7 0120 C        	SUB	A,B1_MSG		;BTONE
   299            C      M 	JPZ	ANS_FUNC_REC_BTONE
       010F8 0C83     1     JBC  _STATUS , Z 
       010F9 1557     1     JMP  ANS_FUNC_REC_BTONE ,
   300            C        ;ANS_FUNC_REC_5:
   301 010FA 1886 C        	MOV	A,@CREC_FULL
   302 010FB 0120 C        	SUB	A,B1_MSG		;REC_FULL
   303            C      M 	JPZ	ANS_FUNC_REC_FULL
       010FC 0C83     1     JBC  _STATUS , Z 
       010FD 1573     1     JMP  ANS_FUNC_REC_FULL ,
   304            C        ;ANS_FUNC_REC_6:	
   305 010FE 188B C        	MOV	A,@CMSG_CPC
   306 010FF 0120 C        	SUB	A,B1_MSG		;接线后摘机(相当于CPC)
   307            C      M 	JPZ	ANS_FUNC_REC_CPC
       01100 0C83     1     JBC  _STATUS , Z 
       01101 157D     1     JMP  ANS_FUNC_REC_CPC ,
   308            C        ;ANS_FUNC_REC_7:
   309            C        
   310 01102 1411 C        	JMP	ANS_FUNC_END
   311            C        ;---------------------------------------
   312 01103      C        ANS_FUNC_REC_DTMF:
   313            C      M 	PAGE	#(BCVOX_INIT)
       01103 1E82     1     PAGE ( BCVOX_INIT / 1024 ),
   314 01104 13B4 C        	CALL	BCVOX_INIT	;有键按下BCVOX要清零
   315            C        
   316 01105 0429 C        	MOV	A,B1_DTMF_VAL
   317            C      M 	LCALL	PSWORD_CHK
                      2  M  PAGE #( PSWORD_CHK ),
       01106 1E82     2     PAGE ( PSWORD_CHK / 1024 ),
       01107 11EB     1     CALL ( PSWORD_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01108 1E84     2     PAGE ( $ / 1024 ),
   318            C      M 	JPNC	ANS_FUNC_END
       01109 0E03     1     JBS  _STATUS , C 
       0110A 1411     1     JMP  ANS_FUNC_END ,
   319            C        ;---Psword ok
   320 0110B      C        ANS_FUNC_REC_DTMFPASS:
   321            C      M 	JPB	B1_PRO_VAR,4,ANS_FUNC_VOP_DTMFPASS	;Line Mode
       0110B 0D21     1     JBC  B1_PRO_VAR , 4 
       0110C 1511     1     JMP  ANS_FUNC_VOP_DTMFPASS ,
   322            C        	
   323            C      M 	PAGE	#(REC_GIVEUP)
       0110D 1E83     1     PAGE ( REC_GIVEUP / 1024 ),
   324 0110E 127D C        	CALL	REC_GIVEUP	;Give up the ICM
   325            C      M 	PAGE	#(GC_CHK)
       0110F 1E82     1     PAGE ( GC_CHK / 1024 ),
   326 01110 113F C        	CALL	GC_CHK
   327            C        	
   328 01111      C        ANS_FUNC_VOP_DTMFPASS:	
   329            C      M 	PAGE	#(INIT_DAM_FUNC)
       01111 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   330 01112 11C1 C        	CALL	INIT_DAM_FUNC
   331            C        
   332 01113 18CA C        	MOV 	A,@CRMT_OK
   333            C      M 	PAGE	#(STOR_MSG)
       01114 1E8D     1     PAGE ( STOR_MSG / 1024 ),
   334 01115 1308 C        	CALL	STOR_MSG
   335            C      M 	PAGE	#($)
       01116 1E84     1     PAGE ( $ / 1024 ),
   336            C        	
   337            C      M 	RESET_NEWESTCID_FLAG	;the newest CID...Can't work
       01117 0912     1     BC  SYS_FLAG , 4 
   338            C      M 	RESET_NLEDBLK_FLAG	;LED don't blink
       01118 0892     1     BC  SYS_FLAG , 2 
   339            C        
   340 01119 1411 C        	JMP	ANS_FUNC_END
   341            C        ;---------------------------------------
   342 0111A      C        ANS_FUNC_REC_TMR:
   343 0111A 0562 C        	INC	B1_PRO_VAR1
   344            C        	
   345            C      M 	JPNB	B1_PRO_VAR,4,ANS_FUNC_REC_TMR_1	;Record mode ?
       0111B 0F21     1     JBS  B1_PRO_VAR , 4 
       0111C 1522     1     JMP  ANS_FUNC_REC_TMR_1 ,
   346            C        ;---Line mode(check 10s timer out)
   347 0111D 0422 C        	MOV	A,B1_PRO_VAR1
   348 0111E 1D0A C        	SUB	A,@10
   349            C      M 	JPNC	ANS_FUNC_EXIT_VPEND	;10s time out
       0111F 0E03     1     JBS  _STATUS , C 
       01120 15AD     1     JMP  ANS_FUNC_EXIT_VPEND ,
   350            C        
   351 01121 1411 C        	JMP	ANS_FUNC_END
   352            C        ;---------------------------------------
   353 01122      C        ANS_FUNC_REC_TMR_1:			;Record mode
   354            C        ;---Record mode(check Record timer out:60s/120s)
   355 01122 0726 C        	SWAPA	B1_RING_NUM
   356 01123 1A03 C        	AND	A,@0X03
   357            C      M 	LCALL	MSGLEN_TAB
                      2  M  PAGE #( MSGLEN_TAB ),
       01124 1E88     2     PAGE ( MSGLEN_TAB / 1024 ),
       01125 100F     1     CALL ( MSGLEN_TAB % 1024 ),
                      2  M  PAGE #( $ ),
       01126 1E84     2     PAGE ( $ / 1024 ),
   358 01127 0055 C        	MOV	TEMP0,A
   359            C        
   360 01128 0422 C        	MOV	A,B1_PRO_VAR1
   361 01129 0115 C        	SUB	A,TEMP0
   362            C      M 	JPNC	ANS_FUNC_REC_TMROUT	;录满60*Xs退出
       0112A 0E03     1     JBS  _STATUS , C 
       0112B 152D     1     JMP  ANS_FUNC_REC_TMROUT ,
   363            C        
   364 0112C 1411 C        	JMP	ANS_FUNC_END
   365            C        ;---------------------------------------
   366 0112D      C        ANS_FUNC_REC_TMROUT:
   367            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       0112D 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       0112E 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       0112F 1E84     2     PAGE ( $ / 1024 ),
   368            C        ;---Record mode end check CID exist or not
   369 01130      C        ANS_FUNC_REC_OK:
   370            C        ;---VP Record ok,Check New-CID	
   371            C      M 	JPNB	SYS_FLAG,4,ANS_FUNC_REC_OK_1
       01130 0F12     1     JBS  SYS_FLAG , 4 
       01131 154A     1     JMP  ANS_FUNC_REC_OK_1 ,
   372            C        ;---Newest CID exist 
   373 01132 180E C        	MOV	A,@CGROUP_MISSCID
   374            C      M 	PAGE	#(SET_GROUP)
       01133 1E83     1     PAGE ( SET_GROUP / 1024 ),
   375 01134 1241 C        	CALL	SET_GROUP
   376            C        ;-
   377            C      M 	PAGE	#(GET_TELT)
       01135 1E83     1     PAGE ( GET_TELT / 1024 ),
   378 01136 1246 C        	CALL	GET_TELT
   379 01137 0415 C        	MOV	A,TEMP0
   380 01138 006E C        	MOV	B1_CID_T,A
   381            C        
   382            C      M 	PAGE	#(GET_TEL0IDX)
       01139 1E83     1     PAGE ( GET_TEL0IDX / 1024 ),
   383 0113A 1271 C        	CALL	GET_TEL0IDX
   384 0113B 0415 C        	MOV	A,TEMP0
   385 0113C 1A80 C        	AND	A,@0X80
   386 0113D 0078 C        	MOV	B1_YEAR_REG,A	;!!!Reserved new-flag
   387            C        ;-
   388            C      M 	PAGE	#(VPMSG_CHK)
       0113E 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   389 0113F 1182 C        	CALL	VPMSG_CHK
   390 01140 0430 C        	MOV	A,B1_MSG_T
   391            C      M 	PAGE	#(GET_ONLYID)
       01141 1E83     1     PAGE ( GET_ONLYID / 1024 ),
   392 01142 1263 C        	CALL	GET_ONLYID
   393            C        	
   394 01143 0415 C        	MOV	A,TEMP0
   395 01144 0278 C        	OR	B1_YEAR_REG,A
   396            C        
   397 01145 042E C        	MOV	A,B1_CID_T	;TEL-message
   398 01146 0055 C        	MOV	TEMP0,A
   399 01147 0438 C        	MOV	A,B1_YEAR_REG	;index-0
   400            C      M 	PAGE	#(SET_TEL0IDXF)
       01148 1E83     1     PAGE ( SET_TEL0IDXF / 1024 ),
   401 01149 126C C        	CALL	SET_TEL0IDXF
   402            C        	;PAGE	#($)	
   403 0114A      C        ANS_FUNC_REC_OK_1:
   404            C        ;---Now generate beep
   405            C      M 	PAGE	#(DSP)
       0114A 1E83     1     PAGE ( DSP / 1024 ),
   406 0114B 108C C        	CALL	LBEEP			;VOX/Ctone/Btone Over LBEEP
   407            C      M 	PAGE	#($)
       0114C 1E84     1     PAGE ( $ / 1024 ),
   408            C        		
   409 0114D 1803 C        	MOV	A,@0X03
   410 0114E 0061 C        	MOV	B1_PRO_VAR,A		;退出答录
   411            C        	
   412 0114F 1411 C        	JMP	ANS_FUNC_END
   413            C        ;---------------------------------------
   414 01150      C        ANS_FUNC_REC_VOX:
   415 01150      C        ANS_FUNC_REC_CTONE:
   416            C        
   417            C      M 	JPB	B1_PRO_VAR,4,ANS_FUNC_STOPLINE	;Line mode ?	
       01150 0D21     1     JBC  B1_PRO_VAR , 4 
       01151 156D     1     JMP  ANS_FUNC_STOPLINE ,
   418            C        ;---Stop record	and cut tail
   419 01152 1814 C        	MOV	A,@CTAIL8S	;8s(Same as binatone demo)
   420            C      M 	PAGE	#(REC_CUTTAIL)
       01153 1E83     1     PAGE ( REC_CUTTAIL / 1024 ),
   421 01154 1282 C        	CALL	REC_CUTTAIL
   422            C      M 	PAGE	#($)
       01155 1E84     1     PAGE ( $ / 1024 ),
   423            C        	
   424 01156 155B C        	JMP	ANS_FUNC_REC_CUTTAIL_OK
   425            C        ;-------------------
   426 01157      C        ANS_FUNC_REC_BTONE:
   427            C        	
   428            C      M 	JPB	B1_PRO_VAR,4,ANS_FUNC_STOPLINE	;Line mode ?	
       01157 0D21     1     JBC  B1_PRO_VAR , 4 
       01158 156D     1     JMP  ANS_FUNC_STOPLINE ,
   429            C        ;---Stop record	and cut tail
   430            C      M 	PAGE	#(INIT_DAM_FUNC)
       01159 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   431 0115A 11C1 C        	CALL	INIT_DAM_FUNC
   432            C        	;PAGE	#($)
   433 0115B      C        ANS_FUNC_REC_CUTTAIL_OK:	
   434            C      M 	PAGE	#(GC_CHK)
       0115B 1E82     1     PAGE ( GC_CHK / 1024 ),
   435 0115C 113F C        	CALL	GC_CHK
   436            C      M 	PAGE	#(VPMSG_CHK)
       0115D 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   437 0115E 1182 C        	CALL	VPMSG_CHK
   438            C        	
   439 0115F 0430 C        	MOV	A,B1_MSG_T
   440            C      M 	PAGE	#(GET_VPLEN)
       01160 1E83     1     PAGE ( GET_VPLEN / 1024 ),
   441 01161 123D C        	CALL	GET_VPLEN
   442            C      M 	PAGE	#($)
       01162 1E84     1     PAGE ( $ / 1024 ),
   443 01163 0415 C        	MOV	A,TEMP0
   444 01164 1FFD C        	ADD	A,@(256-3)
   445            C      M 	JPC	ANS_FUNC_REC_OK
       01165 0C03     1     JBC  _STATUS , C 
       01166 1530     1     JMP  ANS_FUNC_REC_OK ,
   446            C        ;--Less than 3s,Giveup it
   447 01167 0430 C        	MOV	A,B1_MSG_T
   448            C      M 	PAGE	#(VPMSG_DEL)
       01168 1E83     1     PAGE ( VPMSG_DEL / 1024 ),
   449 01169 1222 C        	CALL	VPMSG_DEL
   450            C      M 	PAGE	#(GC_CHK)
       0116A 1E82     1     PAGE ( GC_CHK / 1024 ),
   451 0116B 113F C        	CALL	GC_CHK
   452            C        	
   453 0116C 154A C        	JMP	ANS_FUNC_REC_OK_1
   454            C        ;-------------------
   455 0116D      C        ANS_FUNC_STOPLINE:	;It have confirm that in LineMode
   456            C      M 	PAGE	#(INIT_DAM_FUNC)
       0116D 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   457 0116E 11C1 C        	CALL	INIT_DAM_FUNC
   458            C      M 	PAGE	#(GC_CHK)
       0116F 1E82     1     PAGE ( GC_CHK / 1024 ),
   459 01170 113F C        	CALL	GC_CHK
   460            C      M 	PAGE	#($)
       01171 1E84     1     PAGE ( $ / 1024 ),
   461            C        
   462            C        ;---Line mode exit
   463 01172 15AD C        	JMP	ANS_FUNC_EXIT_VPEND
   464            C        ;---------------------------------------
   465 01173      C        ANS_FUNC_REC_FULL:
   466            C        	
   467            C      M 	PAGE	#(INIT_DAM_FUNC)
       01173 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   468 01174 11C1 C        	CALL	INIT_DAM_FUNC
   469            C        
   470            C      M 	PAGE	#(DSP)
       01175 1E83     1     PAGE ( DSP / 1024 ),
   471 01176 1093 C        	CALL	BBEEP			;警告语音BB
   472 01177 1850 C        	MOV	A,@VOPID_MEMFULL
   473 01178 1064 C        	CALL	VOP_STOR_VP
   474            C      M 	PAGE	#($)
       01179 1E84     1     PAGE ( $ / 1024 ),
   475            C        		
   476 0117A 1803 C        	MOV	A,@0X03
   477 0117B 0061 C        	MOV	B1_PRO_VAR,A		;退出答录
   478            C        	
   479 0117C 1411 C        	JMP	ANS_FUNC_END
   480            C        ;---------------------------------------
   481 0117D      C        ANS_FUNC_REC_CPC:
   482            C      M 	JPB	B1_PRO_VAR,4,ANS_FUNC_EXIT_VPEND	;Line mode ?	
       0117D 0D21     1     JBC  B1_PRO_VAR , 4 
       0117E 15AD     1     JMP  ANS_FUNC_EXIT_VPEND ,
   483            C        ;---Record mode	
   484 0117F 0422 C        	MOV	A,B1_PRO_VAR1		;The record time
   485 01180 1D02 C        	SUB	A,@2
   486            C      M 	JPC	ANS_FUNC_CPC_RECGIVEUP
       01181 0C03     1     JBC  _STATUS , C 
       01182 15A2     1     JMP  ANS_FUNC_CPC_RECGIVEUP ,
   487            C        ;---Record time length more than 2s
   488            C      M 	PAGE	#(INIT_DAM_FUNC)	
       01183 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   489 01184 11C1 C        	CALL	INIT_DAM_FUNC
   490            C      M 	PAGE	#($)
       01185 1E84     1     PAGE ( $ / 1024 ),
   491            C        ;---VP Record ok	
   492            C      M 	JPNB	SYS_FLAG,4,ANS_FUNC_EXIT_VPEND
       01186 0F12     1     JBS  SYS_FLAG , 4 
       01187 15AD     1     JMP  ANS_FUNC_EXIT_VPEND ,
   493            C        ;---Newest CID exist 
   494 01188 180E C        	MOV	A,@CGROUP_MISSCID
   495            C      M 	PAGE	#(SET_GROUP)
       01189 1E83     1     PAGE ( SET_GROUP / 1024 ),
   496 0118A 1241 C        	CALL	SET_GROUP
   497            C        ;-
   498            C      M 	PAGE	#(GET_TELT)
       0118B 1E83     1     PAGE ( GET_TELT / 1024 ),
   499 0118C 1246 C        	CALL	GET_TELT
   500 0118D 0415 C        	MOV	A,TEMP0
   501 0118E 006E C        	MOV	B1_CID_T,A
   502            C        
   503            C      M 	PAGE	#(GET_TEL0IDX)
       0118F 1E83     1     PAGE ( GET_TEL0IDX / 1024 ),
   504 01190 1271 C        	CALL	GET_TEL0IDX
   505 01191 0415 C        	MOV	A,TEMP0
   506 01192 1A80 C        	AND	A,@0X80
   507 01193 0078 C        	MOV	B1_YEAR_REG,A	;!!!Reserved new-flag
   508            C        ;-
   509            C      M 	PAGE	#(VPMSG_CHK)
       01194 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   510 01195 1182 C        	CALL	VPMSG_CHK
   511 01196 0430 C        	MOV	A,B1_MSG_T
   512            C      M 	PAGE	#(GET_ONLYID)
       01197 1E83     1     PAGE ( GET_ONLYID / 1024 ),
   513 01198 1263 C        	CALL	GET_ONLYID
   514            C        
   515 01199 0415 C        	MOV	A,TEMP0
   516 0119A 0278 C        	OR	B1_YEAR_REG,A
   517            C        
   518 0119B 042E C        	MOV	A,B1_CID_T	;TEL-message
   519 0119C 0055 C        	MOV	TEMP0,A
   520 0119D 0438 C        	MOV	A,B1_YEAR_REG	;index-0
   521            C      M 	PAGE	#(SET_TEL0IDXF)
       0119E 1E83     1     PAGE ( SET_TEL0IDXF / 1024 ),
   522 0119F 126C C        	CALL	SET_TEL0IDXF
   523            C        	;PAGE	#($)	
   524            C        if	0
   525            C        	PAGE	#(DSP)
   526            C        	CALL	BBEEP			;CPC Over BBEEP
   527            C        	PAGE	#($)
   528            C        		
   529            C        	MOV	A,@0X03
   530            C        	MOV	B1_PRO_VAR,A		;退出答录	
   531            C        	JMP	ANS_FUNC_END
   532            C        else
   533            C      M 	LJMP	ANS_FUNC_EXIT_VPEND
                      2  M  PAGE #( ANS_FUNC_EXIT_VPEND ),
       011A0 1E84     2     PAGE ( ANS_FUNC_EXIT_VPEND / 1024 ),
       011A1 15AD     1     JMP ( ANS_FUNC_EXIT_VPEND % 1024 ),
   534            C        endif
   535            C        ;---------------------------------------
   536 011A2      C        ANS_FUNC_CPC_RECGIVEUP:
   537            C      M 	PAGE	#(REC_GIVEUP)	
       011A2 1E83     1     PAGE ( REC_GIVEUP / 1024 ),
   538 011A3 127D C        	CALL	REC_GIVEUP
   539            C      M 	PAGE	#(GC_CHK)	
       011A4 1E82     1     PAGE ( GC_CHK / 1024 ),
   540 011A5 113F C        	CALL	GC_CHK
   541            C      M 	PAGE	#($)
       011A6 1E84     1     PAGE ( $ / 1024 ),
   542 011A7 15AD C        	JMP	ANS_FUNC_EXIT_VPEND
   543            C        ;-------------------------------------------------------------------------------
   544 011A8      C        ANS_FUNC_EXIT:
   545 011A8 1885 C        	MOV	A,@CVP_END
   546 011A9 0120 C        	SUB	A,B1_MSG
   547            C      M 	JPZ	ANS_FUNC_EXIT_VPEND
       011AA 0C83     1     JBC  _STATUS , Z 
       011AB 15AD     1     JMP  ANS_FUNC_EXIT_VPEND ,
   548            C        	
   549 011AC 1411 C        	JMP	ANS_FUNC_END
   550            C        ;---------------------------------------
   551 011AD      C        ANS_FUNC_EXIT_VPEND:
   552            C      M 	PAGE	#(INIT_DAM_FUNC)
       011AD 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   553 011AE 11C1 C        	CALL	INIT_DAM_FUNC
   554            C        	
   555 011AF 1890 C        	MOV	A,@CMSG_INIT
   556            C      M 	PAGE	#(STOR_MSG)
       011B0 1E8D     1     PAGE ( STOR_MSG / 1024 ),
   557 011B1 1308 C        	CALL	STOR_MSG
   558            C        
   559            C      M 	PAGE	#(CLR_PRO_STACK)
       011B2 1E8D     1     PAGE ( CLR_PRO_STACK / 1024 ),
   560 011B3 1352 C        	CALL	CLR_PRO_STACK
   561            C      M 	PAGE	#($)
       011B4 1E84     1     PAGE ( $ / 1024 ),
   562            C        	
   563 011B5 00E1 C        	CLR	B1_PRO_VAR
   564            C      M 	HF_HOOK_L
       011B6 0908     1     BC  _P8 , 4 
   565            C      M 	DAM_SPK_DISABLE
       011B7 0949     1     BC  _P9 , 5 
   566            C      M 	RESET_NEWESTCID_FLAG	;the newest CID...Can't work
       011B8 0912     1     BC  SYS_FLAG , 4 
   567            C      M 	RESET_NLEDBLK_FLAG	;LED don't blink
       011B9 0892     1     BC  SYS_FLAG , 2 
   568            C        
   569 011BA 1411 C        	JMP	ANS_FUNC_END
   570            C        ;###############################################################################
   571            C        ;	GET_TELN
   572            C        ;
   573            C        ;	input : No
   574            C        ;	output: B1_CID_T = the number of total TEL-message
   575            C        ;		B1_CID_N = the number of new TEL-message
   576            C        ;
   577            C        ;	the current TEL_Group
   578            C        ;
   579            C        ;###############################################################################
   580 011BB      C        GET_TELN:
   581            C      M 	LCALL	GET_TELT
                      2  M  PAGE #( GET_TELT ),
       011BB 1E83     2     PAGE ( GET_TELT / 1024 ),
       011BC 1246     1     CALL ( GET_TELT % 1024 ),
                      2  M  PAGE #( $ ),
       011BD 1E84     2     PAGE ( $ / 1024 ),
   582 011BE 0415 C        	MOV	A,TEMP0
   583 011BF 006E C        	MOV	B1_CID_T,A
   584 011C0 006F C        	MOV	B1_CID_N,A
   585 011C1 0078 C        	MOV	B1_YEAR_REG,A
   586            C        	
   587 011C2 0578 C        	INC	B1_YEAR_REG
   588 011C3      C        GET_TELN_LOOP:	
   589 011C3 01F8 C        	DEC	B1_YEAR_REG
   590 011C4 0438 C        	MOV	A,B1_YEAR_REG
   591            C      M 	JPZ	GET_TELN_END
       011C5 0C83     1     JBC  _STATUS , Z 
       011C6 15CE     1     JMP  GET_TELN_END ,
   592            C      M 	LCALL	GET_TEL0IDX
                      2  M  PAGE #( GET_TEL0IDX ),
       011C7 1E83     2     PAGE ( GET_TEL0IDX / 1024 ),
       011C8 1271     1     CALL ( GET_TEL0IDX % 1024 ),
                      2  M  PAGE #( $ ),
       011C9 1E84     2     PAGE ( $ / 1024 ),
   593            C      M 	JPB	TEMP0,7,GET_TELN_LOOP
       011CA 0DD5     1     JBC  TEMP0 , 7 
       011CB 15C3     1     JMP  GET_TELN_LOOP ,
   594            C        ;---No new-flag
   595 011CC 01EF C        	DEC	B1_CID_N
   596 011CD 15C3 C        	JMP	GET_TELN_LOOP
   597 011CE      C        GET_TELN_END:	
   598            C        
   599            C      M 	RESET_NEWCID_FLAG
       011CE 0914     1     BC  DAM_FLAG , 4 
   600 011CF 042F C        	MOV	A,B1_CID_N
   601 011D0 0E83 C        	JBS	_STATUS,Z
   602            C      M 	SET_NEWCID_FLAG	
       011D1 0B14     1     BS  DAM_FLAG , 4 
   603            C        	
   604 011D2 0012 C        	RET
   605            C        ;###############################################################################
   606            C        ;	GET_0XEATELID
   607            C        ;
   608            C        ;	input : acc = the index-0
   609            C        ;	output: acc = the TEL-message number
   610            C        ;
   611            C        ;	Get TEL-message number by specific index-0
   612            C        ;	COMMAND = 0xE900(made up of 0xE900)
   613            C        ;
   614            C        ;###############################################################################
   615            C        if	0
   616            C        GET_0XEATELID:
   617            C        
   618            C        	MOV	B1_YEAR_REG,A	;the index-0
   619            C        
   620            C        	LCALL	GET_TELT
   621            C        	INCA	TEMP0
   622            C        	MOV	B1_CID_N,A
   623            C        
   624            C        GET_TELID_LOOP:
   625            C        	DEC	B1_CID_N
   626            C        	MOV	A,B1_CID_N
   627            C        	JPZ	GET_TELID_END
   628            C        	LCALL	GET_TEL0IDX
   629            C        	
   630            C        	MOV	A,TEMP1
   631            C        	JPNZ	GET_TELID_LOOP	;Byte index-0 not found
   632            C        	
   633            C        	MOV	A,TEMP0
   634            C        	XOR	A,B1_YEAR_REG
   635            C        	AND	A,@0X7F
   636            C        	JPNZ	GET_TELID_LOOP	;match ?
   637            C        
   638            C        GET_TELID_END:	
   639            C        	MOV	A,B1_CID_N
   640            C        	MOV	TEMP0,A
   641            C        	
   642            C        	RET
   643            C        endif
   644            C        ;###############################################################################
   645            C        ;	TEL_UNLINK
   646            C        ;
   647            C        ;	input : acc = no
   648            C        ;		B1_MSG_T = total number of V-message
   649            C        ;	output: acc = the TEL-message number
   650            C        ;
   651            C        ;
   652            C        ;###############################################################################
   653 011D3      C        TEL_UNLINK:
   654            C      M 	LCALL	GET_TELT
                      2  M  PAGE #( GET_TELT ),
       011D3 1E83     2     PAGE ( GET_TELT / 1024 ),
       011D4 1246     1     CALL ( GET_TELT % 1024 ),
                      2  M  PAGE #( $ ),
       011D5 1E84     2     PAGE ( $ / 1024 ),
   655 011D6 0515 C        	INCA	TEMP0
   656 011D7 006F C        	MOV	B1_CID_N,A
   657 011D8      C        TEL_UNLINK_1LOOP:
   658 011D8 01EF C        	DEC	B1_CID_N
   659 011D9 042F C        	MOV	A,B1_CID_N
   660            C      M 	JPZ	TEL_UNLINK_END
       011DA 0C83     1     JBC  _STATUS , Z 
       011DB 1603     1     JMP  TEL_UNLINK_END ,
   661            C      M 	LCALL	GET_TEL0IDX
                      2  M  PAGE #( GET_TEL0IDX ),
       011DC 1E83     2     PAGE ( GET_TEL0IDX / 1024 ),
       011DD 1271     1     CALL ( GET_TEL0IDX % 1024 ),
                      2  M  PAGE #( $ ),
       011DE 1E84     2     PAGE ( $ / 1024 ),
   662            C        
   663 011DF 0416 C        	MOV	A,TEMP1
   664            C      M 	JPNZ	TEL_UNLINK_1LOOP	;Byte index-0 not found,check next one
       011E0 0E83     1     JBS  _STATUS , Z 
       011E1 15D8     1     JMP  TEL_UNLINK_1LOOP ,
   665 011E2 0415 C        	MOV	A,TEMP0
   666 011E3 1A7F C        	AND	A,@0X7F
   667            C      M 	JPZ	TEL_UNLINK_1LOOP	;not match,check next one
       011E4 0C83     1     JBC  _STATUS , Z 
       011E5 15D8     1     JMP  TEL_UNLINK_1LOOP ,
   668 011E6 0073 C        	MOV	B1_SEC_REG,A		;Save the index-0
   669 011E7 1B7F C        	XOR	A,@0X7F
   670            C      M 	JPZ	TEL_UNLINK_1LOOP	;not match,check next one
       011E8 0C83     1     JBC  _STATUS , Z 
       011E9 15D8     1     JMP  TEL_UNLINK_1LOOP ,
   671            C        
   672 011EA 0430 C        	MOV	A,B1_MSG_T
   673 011EB 0078 C        	MOV	B1_YEAR_REG,A
   674            C        	
   675 011EC      C        TEL_UNLINK_2LOOP:
   676 011EC 0438 C        	MOV	A,B1_YEAR_REG
   677            C      M 	LCALL	GET_ONLYID
                      2  M  PAGE #( GET_ONLYID ),
       011ED 1E83     2     PAGE ( GET_ONLYID / 1024 ),
       011EE 1263     1     CALL ( GET_ONLYID % 1024 ),
                      2  M  PAGE #( $ ),
       011EF 1E84     2     PAGE ( $ / 1024 ),
   678 011F0 0415 C        	MOV	A,TEMP0
   679 011F1 0333 C        	XOR	A,B1_SEC_REG
   680 011F2 1A7F C        	AND	A,@0X7F
   681            C      M 	JPZ	TEL_UNLINK_1LOOP	;find out the match VP
       011F3 0C83     1     JBC  _STATUS , Z 
       011F4 15D8     1     JMP  TEL_UNLINK_1LOOP ,
   682            C        	
   683 011F5 01F8 C        	DEC	B1_YEAR_REG
   684 011F6 0438 C        	MOV	A,B1_YEAR_REG
   685            C      M 	JPNZ	TEL_UNLINK_2LOOP
       011F7 0E83     1     JBS  _STATUS , Z 
       011F8 15EC     1     JMP  TEL_UNLINK_2LOOP ,
   686            C        ;---found out VP which only-id same as the index-0
   687 011F9 0433 C        	MOV	A,B1_SEC_REG
   688 011FA 1A80 C        	AND	A,@0X80
   689 011FB 0057 C        	MOV	TEMP2,A
   690            C        
   691 011FC 042F C        	MOV	A,B1_CID_N
   692 011FD 0055 C        	MOV	TEMP0,A
   693 011FE 0417 C        	MOV	A,TEMP2
   694            C      M 	LCALL	SET_TEL0IDXF
                      2  M  PAGE #( SET_TEL0IDXF ),
       011FF 1E83     2     PAGE ( SET_TEL0IDXF / 1024 ),
       01200 126C     1     CALL ( SET_TEL0IDXF % 1024 ),
                      2  M  PAGE #( $ ),
       01201 1E84     2     PAGE ( $ / 1024 ),
   695            C        	
   696 01202 15D8 C        	JMP	TEL_UNLINK_1LOOP	
   697 01203      C        TEL_UNLINK_END:	
   698 01203 042F C        	MOV	A,B1_CID_N
   699 01204 0055 C        	MOV	TEMP0,A
   700            C        	
   701 01205 0012 C        	RET
   702            C        ;-------------------------------------------------------------------------------	
   607                     INCLUDE		"f_stor.dt"
     1            C        ;-------------------------------------------------------------------------------
     2 01206      C        STOR_FUNC:
     3 01206 0421 C        	MOV	A,B1_PRO_VAR
     4 01207 1A03 C        	AND	A,@0X03
     5            C      M 	MTBL
       01208 0020     1     TBL 
             1208     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
     6 01209 160F C        	JMP	STOR_FUNC_0	;0 - idle
     7 0120A 1682 C        	JMP	STOR_FUNC_1	;1 - Store
     8 0120B 1739 C        	JMP	STOR_FUNC_2	;2 - lookup
     9 0120C 160D C        	JMP	STOR_FUNC_END	;3 - 
    10            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    11 0120D      C        STOR_FUNC_END:
    12            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       0120D 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       0120E 15AC     1     JMP ( MAIN_LOOP % 1024 ),
    13            C        ;-------------------------------------------------------------------------------
    14 0120F      C        STOR_FUNC_0:
    15 0120F 18C5 C        	MOV	A,@CSTOR_NUM
    16 01210 0120 C        	SUB	A,B1_MSG
    17            C      M 	JPZ	STOR_FUNC_0_STORNUM_INIT
       01211 0C83     1     JBC  _STATUS , Z 
       01212 1618     1     JMP  STOR_FUNC_0_STORNUM_INIT ,
    18            C        	
    19 01213 18C6 C        	MOV	A,@CLOOK_NUM
    20 01214 0120 C        	SUB	A,B1_MSG
    21            C      M 	JPZ	STOR_FUNC_0_LOOKNUM_INIT
       01215 0C83     1     JBC  _STATUS , Z 
       01216 1636     1     JMP  STOR_FUNC_0_LOOKNUM_INIT ,
    22            C        	
    23 01217 160D C        	JMP	STOR_FUNC_END
    24            C        ;---------------------------------------
    25 01218      C        STOR_FUNC_0_STORNUM_INIT:
    26            C      M 	PAGE	#(VGA)
       01218 1E8C     1     PAGE ( VGA / 1024 ),
    27 01219 111E C        	CALL	VGABLANKNUM2
    28 0121A 1127 C        	CALL	VGABLANKCHAR
    29            C        	
    30 0121B 1883 C        	MOV	A,@(STYLE_CENTER)
    31 0121C 1026 C        	CALL	VGACHAR
    32 0121D 1828 C        	MOV	A,@40		;STORE
    33 0121E 114D C        	CALL	VGASTRING
    34 0121F 1800 C        	MOV	A,@(CH_BLANK) 	;
    35 01220 1026 C        	CALL	VGACHAR
    36 01221 1829 C        	MOV	A,@41		;NUMBER
    37 01222 114D C        	CALL	VGASTRING
    38            C        ;-
    39 01223 18FF C        	MOV	A,@(CH_END)
    40 01224 1026 C        	CALL	VGACHAR
    41 01225 10AB C        	CALL	VGADRAWCHAR
    42            C      M 	PAGE	#($)
       01226 1E84     1     PAGE ( $ / 1024 ),
    43            C        ;---Clean the edit zone	
    44            C      M 	BLOCK	1
       01227 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01228 000A     1     IOW  _IOCA ,
    45            C      M 	MOV	_RC,@DATA_ZONE_START	;起点
       01229 1860     1     MOV A,@( DATA_ZONE_START )
       0122A 004C     1     MOV  _RC ,A
    46            C      M 	MOV	COUNT,@(DATA_ZONE_END-DATA_ZONE_START)	;长度
       0122B 183A     1     MOV A,@(( DATA_ZONE_END - DATA_ZONE_START ))
       0122C 005E     1     MOV  COUNT ,A
    47 0122D 1800 C        	MOV	A,@0			;填充值
    48            C      M 	LCALL	STOR_DATA
                      2  M  PAGE #( STOR_DATA ),
       0122E 1E82     2     PAGE ( STOR_DATA / 1024 ),
       0122F 107C     1     CALL ( STOR_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       01230 1E84     2     PAGE ( $ / 1024 ),
    49            C        
    50            C        	;CLR	CURSOR
    51 01231 00E2 C        	CLR	B1_PRO_VAR1
    52 01232 00EE C        	CLR	B1_CID_T	;初始长度为0
    53            C        	
    54            C      M 	MOV	B1_PRO_VAR,@1
       01233 1801     1     MOV A,@( 1 )
       01234 0061     1     MOV  B1_PRO_VAR ,A
    55            C        	
    56 01235 160D C        	JMP	STOR_FUNC_END
    57            C        ;---------------------------------------
    58 01236      C        STOR_FUNC_0_LOOKNUM_INIT:
    59            C      M 	BLOCK	1
       01236 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01237 000A     1     IOW  _IOCA ,
    60            C        ;---num-length		
    61            C      M 	MOV	_RC,@NUM_FLAG
       01238 1862     1     MOV A,@( NUM_FLAG )
       01239 004C     1     MOV  _RC ,A
    62 0123A 00CD C        	CLR	_RD
    63            C        ;---name-length	
    64            C      M 	MOV	_RC,@NAME_FLAG
       0123B 1863     1     MOV A,@( NAME_FLAG )
       0123C 004C     1     MOV  _RC ,A
    65 0123D 00CD C        	CLR	_RD
    66            C        ;---set Group
    67 0123E 180A C        	MOV	A,@GROUP_M
    68 0123F 03B1 C        	ADD	A,B1_MSG_N
    69            C      M 	LCALL	SET_GROUP
                      2  M  PAGE #( SET_GROUP ),
       01240 1E83     2     PAGE ( SET_GROUP / 1024 ),
       01241 1241     1     CALL ( SET_GROUP % 1024 ),
                      2  M  PAGE #( $ ),
       01242 1E84     2     PAGE ( $ / 1024 ),
    70            C      M 	LCALL	GET_TELT
                      2  M  PAGE #( GET_TELT ),
       01243 1E83     2     PAGE ( GET_TELT / 1024 ),
       01244 1246     1     CALL ( GET_TELT % 1024 ),
                      2  M  PAGE #( $ ),
       01245 1E84     2     PAGE ( $ / 1024 ),
    71            C        	
    72 01246 0415 C        	MOV	A,TEMP0
    73 01247 006E C        	MOV	B1_CID_T,A	;Total tel record
    74            C      M 	JPZ	STOR_FUNC_0_READNUM_END
       01248 0C83     1     JBC  _STATUS , Z 
       01249 165B     1     JMP  STOR_FUNC_0_READNUM_END ,
    75            C        ;---读出数据	
    76            C      M 	MOV	OFFSET_D,@DATA_ZONE_START
       0124A 1860     1     MOV A,@( DATA_ZONE_START )
       0124B 005D     1     MOV  OFFSET_D ,A
    77 0124C      C        STOR_FUNC_0_READNUM_LOOP:
    78 0124C 042E C        	MOV	A,B1_CID_T
    79            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       0124D 1E83     2     PAGE ( DAT_READ / 1024 ),
       0124E 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       0124F 1E84     2     PAGE ( $ / 1024 ),
    80            C        	
    81            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       01250 041D     1     MOV A, OFFSET_D 
       01251 004C     1     MOV  _RC ,A
    82            C      M 	MOV	_RD,TEMP0	;the data
       01252 0415     1     MOV A, TEMP0 
       01253 004D     1     MOV  _RD ,A
    83            C        	
    84 01254 055D C        	INC	OFFSET_D	;next address
    85            C        	
    86 01255 0416 C        	MOV	A,TEMP1		;Error code
    87            C      M 	JPZ	STOR_FUNC_0_READNUM_LOOP
       01256 0C83     1     JBC  _STATUS , Z 
       01257 164C     1     JMP  STOR_FUNC_0_READNUM_LOOP ,
    88            C        
    89            C      M 	LCALL	DAT_READ_STOP
                      2  M  PAGE #( DAT_READ_STOP ),
       01258 1E83     2     PAGE ( DAT_READ_STOP / 1024 ),
       01259 125B     1     CALL ( DAT_READ_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       0125A 1E84     2     PAGE ( $ / 1024 ),
    90 0125B      C        STOR_FUNC_0_READNUM_END:
    91            C      M 	MOV	_RC,@NUM_FLAG
       0125B 1862     1     MOV A,@( NUM_FLAG )
       0125C 004C     1     MOV  _RC ,A
    92 0125D 040D C        	MOV	A,_RD
    93 0125E 1A3F C        	AND	A,@0X3F
    94 0125F 006E C        	MOV	B1_CID_T,A
    95            C        ;---LCD	blank	
    96            C      M 	PAGE	#(VGA)
       01260 1E8C     1     PAGE ( VGA / 1024 ),
    97 01261 111E C        	CALL	VGABLANKNUM2
    98 01262 1127 C        	CALL	VGABLANKCHAR
    99            C      M 	PAGE	#($)
       01263 1E84     1     PAGE ( $ / 1024 ),
   100            C        	
   101            C      M 	MOV	BASE_ADDR,@0X10	
       01264 1810     1     MOV A,@( 16 )
       01265 005F     1     MOV  BASE_ADDR ,A
   102            C      M 	MOV	OFFSET_S,@NUM_START	;source address
       01266 1868     1     MOV A,@( NUM_START )
       01267 005C     1     MOV  OFFSET_S ,A
   103            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination address
       01268 188D     1     MOV A,@( LCD_2NDLINE )
       01269 005D     1     MOV  OFFSET_D ,A
   104            C      M 	MOV	COUNT,B1_CID_T		;length
       0126A 042E     1     MOV A, B1_CID_T 
       0126B 005E     1     MOV  COUNT ,A
   105            C      M 	LCALL	COPY_DATA	
                      2  M  PAGE #( COPY_DATA ),
       0126C 1E82     2     PAGE ( COPY_DATA / 1024 ),
       0126D 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       0126E 1E84     2     PAGE ( $ / 1024 ),
   106            C        	
   107            C      M 	PAGE	#(VGA)
       0126F 1E8C     1     PAGE ( VGA / 1024 ),
   108 01270 1882 C        	MOV	A,@(STYLE_RIGHT)
   109 01271 1026 C        	CALL	VGACHAR	
   110 01272 182D C        	MOV	A,@(CH_M)
   111 01273 1026 C        	CALL	VGACHAR
   112 01274 0431 C        	MOV	A,B1_MSG_N
   113 01275 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   114 01276 1026 C        	CALL	VGACHAR
   115 01277 18FF C        	MOV	A,@(CH_END)
   116 01278 1026 C        	CALL	VGACHAR
   117 01279 10AB C        	CALL	VGADRAWCHAR
   118            C      M 	PAGE	#($)
       0127A 1E84     1     PAGE ( $ / 1024 ),
   119            C        ;-------------------
   120 0127B 18A0 C        	MOV	A,@CTMR10S
   121            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       0127C 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       0127D 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       0127E 1E84     2     PAGE ( $ / 1024 ),
   122            C        	
   123            C        	;LCALL	CLR_PRO_STACK
   124 0127F 1802 C        	MOV	A,@2
   125 01280 0061 C        	MOV	B1_PRO_VAR,A
   126            C        
   127 01281 160D C        	JMP	STOR_FUNC_END
   128            C        ;-------------------------------------------------------------------------------
   129 01282      C        STOR_FUNC_1:
   130            C        
   131 01282 1880 C        	MOV 	A,@CMSG_MKEY
   132 01283 0120 C        	SUB 	A,B1_MSG
   133            C      M 	JPZ 	STOR_FUNC_1_MKEY
       01284 0C83     1     JBC  _STATUS , Z 
       01285 168B     1     JMP  STOR_FUNC_1_MKEY ,
   134            C        	
   135 01286 1898 C        	MOV 	A,@CMSG_TMR
   136 01287 0120 C        	SUB 	A,B1_MSG
   137            C      M 	JPZ 	STOR_FUNC_1_TMR
       01288 0C83     1     JBC  _STATUS , Z 
       01289 1738     1     JMP  STOR_FUNC_1_TMR ,
   138            C        
   139 0128A 160D C        	JMP	STOR_FUNC_END
   140            C        ;---------------------------------------
   141 0128B      C        STOR_FUNC_1_MKEY:
   142 0128B 00E2 C        	CLR	B1_PRO_VAR1
   143            C        	
   144 0128C 1823 C        	MOV	A,@CKEY_DEL
   145            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0128D 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0128E 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0128F 1E84     2     PAGE ( $ / 1024 ),
   146            C      M 	JPNC	STOR_FUNC_1_MKEY_DEL
       01290 0E03     1     JBS  _STATUS , C 
       01291 16E2     1     JMP  STOR_FUNC_1_MKEY_DEL ,
   147 01292 1826 C        	MOV	A,@CKEY_RP
   148            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01293 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01294 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01295 1E84     2     PAGE ( $ / 1024 ),
   149            C      M 	JPNC	STOR_FUNC_1_MKEY_RP
       01296 0E03     1     JBS  _STATUS , C 
       01297 16C5     1     JMP  STOR_FUNC_1_MKEY_RP ,
   150 01298 1813 C        	MOV	A,@CKEY_STP
   151            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01299 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0129A 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0129B 1E84     2     PAGE ( $ / 1024 ),
   152            C      M 	JPNC	STOR_FUNC_1_MKEY_STP
       0129C 0E03     1     JBS  _STATUS , C 
       0129D 16BC     1     JMP  STOR_FUNC_1_MKEY_STP ,
   153 0129E 1827 C        	MOV	A,@CKEY_SPK
   154            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0129F 1E81     2     PAGE ( KEY_CHK / 1024 ),
       012A0 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       012A1 1E84     2     PAGE ( $ / 1024 ),
   155            C      M 	JPNC	STOR_FUNC_1_MKEY_SPK
       012A2 0E03     1     JBS  _STATUS , C 
       012A3 177D     1     JMP  STOR_FUNC_1_MKEY_SPK ,
   156            C        
   157 012A4 1815 C        	MOV	A,@CKEY_1M
   158            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       012A5 1E81     2     PAGE ( KEY_CHK / 1024 ),
       012A6 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       012A7 1E84     2     PAGE ( $ / 1024 ),
   159            C      M 	JPNC	STOR_FUNC_1_MKEY_M1
       012A8 0E03     1     JBS  _STATUS , C 
       012A9 16E7     1     JMP  STOR_FUNC_1_MKEY_M1 ,
   160 012AA 1816 C        	MOV	A,@CKEY_2M
   161            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       012AB 1E81     2     PAGE ( KEY_CHK / 1024 ),
       012AC 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       012AD 1E84     2     PAGE ( $ / 1024 ),
   162            C      M 	JPNC	STOR_FUNC_1_MKEY_M2
       012AE 0E03     1     JBS  _STATUS , C 
       012AF 16EA     1     JMP  STOR_FUNC_1_MKEY_M2 ,
   163 012B0 1817 C        	MOV	A,@CKEY_3M
   164            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       012B1 1E81     2     PAGE ( KEY_CHK / 1024 ),
       012B2 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       012B3 1E84     2     PAGE ( $ / 1024 ),
   165            C      M 	JPNC	STOR_FUNC_1_MKEY_M3
       012B4 0E03     1     JBS  _STATUS , C 
       012B5 16ED     1     JMP  STOR_FUNC_1_MKEY_M3 ,
   166            C        
   167            C      M 	LCALL	DIALKEY_CHK
                      2  M  PAGE #( DIALKEY_CHK ),
       012B6 1E82     2     PAGE ( DIALKEY_CHK / 1024 ),
       012B7 1203     1     CALL ( DIALKEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       012B8 1E84     2     PAGE ( $ / 1024 ),
   168            C      M 	JPC	STOR_FUNC_1_MKEY_NUM	;Num 
       012B9 0C03     1     JBC  _STATUS , C 
       012BA 16C6     1     JMP  STOR_FUNC_1_MKEY_NUM ,
   169            C        
   170 012BB 160D C        	JMP	STOR_FUNC_END
   171            C        ;-----------------------------------------------------------
   172 012BC      C        STOR_FUNC_1_MKEY_STP:
   173            C      M 	LCALL	CLR_PRO_STACK
                      2  M  PAGE #( CLR_PRO_STACK ),
       012BC 1E8D     2     PAGE ( CLR_PRO_STACK / 1024 ),
       012BD 1352     1     CALL ( CLR_PRO_STACK % 1024 ),
                      2  M  PAGE #( $ ),
       012BE 1E84     2     PAGE ( $ / 1024 ),
   174 012BF 00E1 C        	CLR	B1_PRO_VAR
   175            C        	
   176 012C0 1890 C        	MOV	A,@CMSG_INIT
   177            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       012C1 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       012C2 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       012C3 1E84     2     PAGE ( $ / 1024 ),
   178            C        
   179 012C4 160D C        	JMP	STOR_FUNC_END
   180            C        ;-----------------------------------------------------------
   181 012C5      C        STOR_FUNC_1_MKEY_RP:
   182 012C5 1860 C        	MOV	A,@NUM_P
   183            C        	;JMP	STOR_FUNC_1_MKEY_NUM
   184            C        ;-----------------------------
   185 012C6      C        STOR_FUNC_1_MKEY_NUM:
   186 012C6 0071 C        	MOV	B1_MSG_N,A
   187            C        ;-length adjust	
   188 012C7 042E C        	MOV	A,B1_CID_T
   189 012C8 1D18 C        	SUB	A,@24
   190            C      M 	JPZ	STOR_FUNC_END	
       012C9 0C83     1     JBC  _STATUS , Z 
       012CA 160D     1     JMP  STOR_FUNC_END ,
   191            C        ;-Save data
   192            C      M 	BLOCK	1
       012CB 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       012CC 000A     1     IOW  _IOCA ,
   193 012CD 1868 C        	MOV	A,@NUM_START	;起点
   194            C        	;ADD	A,CURSOR	;偏移
   195 012CE 03AE C        	ADD	A,B1_CID_T	;偏移
   196 012CF 004C C        	MOV	_RC,A
   197            C      M 	MOV	_RD,B1_MSG_N
       012D0 0431     1     MOV A, B1_MSG_N 
       012D1 004D     1     MOV  _RD ,A
   198            C        
   199            C        	;INC	CURSOR
   200 012D2 056E C        	INC	B1_CID_T
   201            C        ;-----------------------------
   202 012D3      C        STOR_FUNC_NUM_DISP:
   203            C      M 	PAGE	#(VGA)
       012D3 1E8C     1     PAGE ( VGA / 1024 ),
   204 012D4 111E C        	CALL	VGABLANKNUM2
   205 012D5 1127 C        	CALL	VGABLANKCHAR
   206            C        	;PAGE	#($)
   207            C        	
   208            C      M 	MOV	BASE_ADDR,@0X10	
       012D6 1810     1     MOV A,@( 16 )
       012D7 005F     1     MOV  BASE_ADDR ,A
   209            C      M 	MOV	OFFSET_S,@NUM_START	;source address
       012D8 1868     1     MOV A,@( NUM_START )
       012D9 005C     1     MOV  OFFSET_S ,A
   210            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination address
       012DA 188D     1     MOV A,@( LCD_2NDLINE )
       012DB 005D     1     MOV  OFFSET_D ,A
   211            C      M 	MOV	COUNT,B1_CID_T		;length
       012DC 042E     1     MOV A, B1_CID_T 
       012DD 005E     1     MOV  COUNT ,A
   212            C      M 	LCALL	COPY_DATA	
                      2  M  PAGE #( COPY_DATA ),
       012DE 1E82     2     PAGE ( COPY_DATA / 1024 ),
       012DF 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       012E0 1E84     2     PAGE ( $ / 1024 ),
   213            C        	
   214 012E1 160D C        	JMP	STOR_FUNC_END
   215            C        ;---------------------------------------
   216 012E2      C        STOR_FUNC_1_MKEY_DEL:
   217            C        ;-length adjust	
   218 012E2 042E C        	MOV	A,B1_CID_T
   219            C      M 	JPZ	STOR_FUNC_END	
       012E3 0C83     1     JBC  _STATUS , Z 
       012E4 160D     1     JMP  STOR_FUNC_END ,
   220            C        
   221            C        	;DEC	CURSOR
   222 012E5 01EE C        	DEC	B1_CID_T
   223            C        	
   224 012E6 16D3 C        	JMP	STOR_FUNC_NUM_DISP
   225            C        ;---------------------------------------
   226 012E7      C        STOR_FUNC_1_MKEY_M1:
   227            C      M 	MOV	B1_MSG_N,@1
       012E7 1801     1     MOV A,@( 1 )
       012E8 0071     1     MOV  B1_MSG_N ,A
   228 012E9 16EF C        	JMP	STOR_FUNC_1_MKEY_M_STORE
   229 012EA      C        STOR_FUNC_1_MKEY_M2:
   230            C      M 	MOV	B1_MSG_N,@2
       012EA 1802     1     MOV A,@( 2 )
       012EB 0071     1     MOV  B1_MSG_N ,A
   231 012EC 16EF C        	JMP	STOR_FUNC_1_MKEY_M_STORE
   232 012ED      C        STOR_FUNC_1_MKEY_M3:
   233            C      M 	MOV	B1_MSG_N,@3
       012ED 1803     1     MOV A,@( 3 )
       012EE 0071     1     MOV  B1_MSG_N ,A
   234            C        	;JMP	STOR_FUNC_1_MKEY_M_STORE
   235            C        
   236 012EF      C        STOR_FUNC_1_MKEY_M_STORE:
   237            C      M 	LCALL	CLR_TIMER	
                      2  M  PAGE #( CLR_TIMER ),
       012EF 1E8D     2     PAGE ( CLR_TIMER / 1024 ),
       012F0 1358     1     CALL ( CLR_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       012F1 1E84     2     PAGE ( $ / 1024 ),
   238            C        ;---num-length	
   239            C      M 	BLOCK	1
       012F2 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       012F3 000A     1     IOW  _IOCA ,
   240            C      M 	MOV	_RC,@NUM_FLAG
       012F4 1862     1     MOV A,@( NUM_FLAG )
       012F5 004C     1     MOV  _RC ,A
   241 012F6 042E C        	MOV	A,B1_CID_T
   242            C        	;OR	A,@0X80
   243 012F7 004D C        	MOV	_RD,A
   244            C        ;---name-length	
   245            C      M 	MOV	_RC,@NAME_FLAG
       012F8 1863     1     MOV A,@( NAME_FLAG )
       012F9 004C     1     MOV  _RC ,A
   246 012FA 00CD C        	CLR	_RD
   247            C        ;---set Group
   248 012FB 180A C        	MOV	A,@GROUP_M
   249 012FC 03B1 C        	ADD	A,B1_MSG_N
   250            C      M 	LCALL	SET_GROUP
                      2  M  PAGE #( SET_GROUP ),
       012FD 1E83     2     PAGE ( SET_GROUP / 1024 ),
       012FE 1241     1     CALL ( SET_GROUP % 1024 ),
                      2  M  PAGE #( $ ),
       012FF 1E84     2     PAGE ( $ / 1024 ),
   251            C        	
   252            C      M 	MOV	OFFSET_S,@DATA_ZONE_START		;start address
       01300 1860     1     MOV A,@( DATA_ZONE_START )
       01301 005C     1     MOV  OFFSET_S ,A
   253            C      M 	MOV	COUNT,@(DATA_ZONE_END-DATA_ZONE_START)	;length(55bytes)
       01302 183A     1     MOV A,@(( DATA_ZONE_END - DATA_ZONE_START ))
       01303 005E     1     MOV  COUNT ,A
   254 01304      C        STOR_FUNC_1_STORE_INTOFLASH:
   255            C      M 	BLOCK	1
       01304 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01305 000A     1     IOW  _IOCA ,
   256            C        	
   257            C      M 	MOV	_RC,OFFSET_S
       01306 041C     1     MOV A, OFFSET_S 
       01307 004C     1     MOV  _RC ,A
   258 01308 040D C        	MOV	A,_RD
   259            C      M 	LCALL	DAT_WRITE
                      2  M  PAGE #( DAT_WRITE ),
       01309 1E83     2     PAGE ( DAT_WRITE / 1024 ),
       0130A 124F     1     CALL ( DAT_WRITE % 1024 ),
                      2  M  PAGE #( $ ),
       0130B 1E84     2     PAGE ( $ / 1024 ),
   260            C        	
   261 0130C 055C C        	INC	OFFSET_S
   262            C        	
   263 0130D 01DE C        	DEC	COUNT
   264 0130E 041E C        	MOV	A,COUNT
   265            C      M 	JPNZ	STOR_FUNC_1_STORE_INTOFLASH
       0130F 0E83     1     JBS  _STATUS , Z 
       01310 1704     1     JMP  STOR_FUNC_1_STORE_INTOFLASH ,
   266            C        	
   267 01311      C        STOR_FUNC_1_STORE_INTOFLASH_END:
   268            C      M 	LCALL	DAT_WRITE_STOP
                      2  M  PAGE #( DAT_WRITE_STOP ),
       01311 1E83     2     PAGE ( DAT_WRITE_STOP / 1024 ),
       01312 1253     1     CALL ( DAT_WRITE_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       01313 1E84     2     PAGE ( $ / 1024 ),
   269 01314      C        STOR_FUNC_1_STORE_DELOLD:		;Delete the old one
   270            C      M 	LCALL	GET_TELT
                      2  M  PAGE #( GET_TELT ),
       01314 1E83     2     PAGE ( GET_TELT / 1024 ),
       01315 1246     1     CALL ( GET_TELT % 1024 ),
                      2  M  PAGE #( $ ),
       01316 1E84     2     PAGE ( $ / 1024 ),
   271 01317 0415 C        	MOV	A,TEMP0
   272 01318 1D01 C        	SUB	A,@1
   273            C      M 	JPC	STOR_FUNC_1_STORE_DELOLD_END
       01319 0C03     1     JBC  _STATUS , C 
       0131A 1723     1     JMP  STOR_FUNC_1_STORE_DELOLD_END ,
   274 0131B 1801 C        	MOV	A,@1
   275            C      M 	LCALL	DEL_TEL
                      2  M  PAGE #( DEL_TEL ),
       0131C 1E83     2     PAGE ( DEL_TEL / 1024 ),
       0131D 124B     1     CALL ( DEL_TEL % 1024 ),
                      2  M  PAGE #( $ ),
       0131E 1E84     2     PAGE ( $ / 1024 ),
   276            C      M 	LCALL	TEL_GC_CHK
                      2  M  PAGE #( TEL_GC_CHK ),
       0131F 1E82     2     PAGE ( TEL_GC_CHK / 1024 ),
       01320 10FC     1     CALL ( TEL_GC_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01321 1E84     2     PAGE ( $ / 1024 ),
   277 01322 1714 C        	JMP	STOR_FUNC_1_STORE_DELOLD
   278            C        
   279 01323      C        STOR_FUNC_1_STORE_DELOLD_END:	
   280            C        ;---Display
   281            C      M 	PAGE	#(VGA)
       01323 1E8C     1     PAGE ( VGA / 1024 ),
   282 01324 1882 C        	MOV	A,@(STYLE_RIGHT)
   283 01325 1026 C        	CALL	VGACHAR
   284            C        	
   285 01326 182D C        	MOV	A,@(CH_M)
   286 01327 1026 C        	CALL	VGACHAR
   287 01328 0431 C        	MOV	A,B1_MSG_N
   288 01329 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   289 0132A 1026 C        	CALL	VGACHAR
   290            C        ;-
   291 0132B 18FF C        	MOV	A,@(CH_END)
   292 0132C 1026 C        	CALL	VGACHAR
   293 0132D 10AB C        	CALL	VGADRAWCHAR
   294            C      M 	PAGE	#($)
       0132E 1E84     1     PAGE ( $ / 1024 ),
   295            C        ;!!!!!!
   296 0132F 1820 C        	MOV	A,@CTMR2S
   297            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       01330 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       01331 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01332 1E84     2     PAGE ( $ / 1024 ),
   298            C        
   299            C      M 	LCALL	CLR_PRO_STACK
                      2  M  PAGE #( CLR_PRO_STACK ),
       01333 1E8D     2     PAGE ( CLR_PRO_STACK / 1024 ),
       01334 1352     1     CALL ( CLR_PRO_STACK % 1024 ),
                      2  M  PAGE #( $ ),
       01335 1E84     2     PAGE ( $ / 1024 ),
   300 01336 00E1 C        	CLR	B1_PRO_VAR
   301            C        
   302 01337 160D C        	JMP	STOR_FUNC_END
   303            C        ;-------------------------------------------------------------------------------
   304 01338      C        STOR_FUNC_1_TMR:	
   305 01338 160D C        	JMP	STOR_FUNC_END
   306            C        ;-------------------------------------------------------------------------------
   307 01339      C        STOR_FUNC_2:
   308 01339 1880 C        	MOV 	A,@CMSG_MKEY
   309 0133A 0120 C        	SUB 	A,B1_MSG
   310            C      M 	JPZ 	STOR_FUNC_2_MKEY
       0133B 0C83     1     JBC  _STATUS , Z 
       0133C 1742     1     JMP  STOR_FUNC_2_MKEY ,
   311            C        	
   312 0133D 1898 C        	MOV 	A,@CMSG_TMR
   313 0133E 0120 C        	SUB 	A,B1_MSG
   314            C      M 	JPZ 	STOR_FUNC_2_TMR
       0133F 0C83     1     JBC  _STATUS , Z 
       01340 1786     1     JMP  STOR_FUNC_2_TMR ,
   315            C        
   316 01341 160D C        	JMP	STOR_FUNC_END
   317            C        ;---------------------------------------
   318 01342      C        STOR_FUNC_2_MKEY:
   319 01342 00E2 C        	CLR	B1_PRO_VAR1
   320            C        	
   321 01343 1823 C        	MOV	A,@CKEY_DEL
   322            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01344 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01345 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01346 1E84     2     PAGE ( $ / 1024 ),
   323            C      M 	JPNC	STOR_FUNC_2_MKEY_DEL
       01347 0E03     1     JBS  _STATUS , C 
       01348 1786     1     JMP  STOR_FUNC_2_MKEY_DEL ,
   324 01349 1826 C        	MOV	A,@CKEY_RP
   325            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0134A 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0134B 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0134C 1E84     2     PAGE ( $ / 1024 ),
   326            C      M 	JPNC	STOR_FUNC_2_MKEY_RP
       0134D 0E03     1     JBS  _STATUS , C 
       0134E 177D     1     JMP  STOR_FUNC_2_MKEY_RP ,
   327 0134F 1813 C        	MOV	A,@CKEY_STP
   328            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01350 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01351 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01352 1E84     2     PAGE ( $ / 1024 ),
   329            C      M 	JPNC	STOR_FUNC_2_MKEY_STP
       01353 0E03     1     JBS  _STATUS , C 
       01354 177D     1     JMP  STOR_FUNC_2_MKEY_STP ,
   330 01355 1827 C        	MOV	A,@CKEY_SPK
   331            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01356 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01357 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01358 1E84     2     PAGE ( $ / 1024 ),
   332            C      M 	JPNC	STOR_FUNC_2_MKEY_SPK
       01359 0E03     1     JBS  _STATUS , C 
       0135A 1773     1     JMP  STOR_FUNC_2_MKEY_SPK ,
   333            C        
   334            C        
   335 0135B 1815 C        	MOV	A,@CKEY_1M
   336            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0135C 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0135D 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0135E 1E84     2     PAGE ( $ / 1024 ),
   337            C      M 	JPNC	STOR_FUNC_2_MKEY_1M
       0135F 0E03     1     JBS  _STATUS , C 
       01360 177D     1     JMP  STOR_FUNC_2_MKEY_1M ,
   338 01361 1816 C        	MOV	A,@CKEY_2M
   339            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01362 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01363 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01364 1E84     2     PAGE ( $ / 1024 ),
   340            C      M 	JPNC	STOR_FUNC_2_MKEY_2M
       01365 0E03     1     JBS  _STATUS , C 
       01366 177D     1     JMP  STOR_FUNC_2_MKEY_2M ,
   341 01367 1817 C        	MOV	A,@CKEY_3M
   342            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01368 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01369 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0136A 1E84     2     PAGE ( $ / 1024 ),
   343            C      M 	JPNC	STOR_FUNC_2_MKEY_3M
       0136B 0E03     1     JBS  _STATUS , C 
       0136C 177D     1     JMP  STOR_FUNC_2_MKEY_3M ,
   344            C        
   345            C      M 	LCALL	DIALKEY_CHK
                      2  M  PAGE #( DIALKEY_CHK ),
       0136D 1E82     2     PAGE ( DIALKEY_CHK / 1024 ),
       0136E 1203     1     CALL ( DIALKEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0136F 1E84     2     PAGE ( $ / 1024 ),
   346            C      M 	JPC	STOR_FUNC_2_MKEY_NUM	;Num 
       01370 0C03     1     JBC  _STATUS , C 
       01371 177D     1     JMP  STOR_FUNC_2_MKEY_NUM ,
   347            C        
   348 01372 160D C        	JMP	STOR_FUNC_END
   349            C        ;---------------------------------------
   350 01373      C        STOR_FUNC_2_MKEY_SPK:
   351            C        
   352            C      M 	RTC_DISP_ENABLE
       01373 0A12     1     BS  SYS_FLAG , 0 
   353            C        	
   354 01374 18A5 C        	MOV	A,@CDIAL_OUT
   355            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       01375 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       01376 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       01377 1E84     2     PAGE ( $ / 1024 ),
   356            C        
   357            C      M 	LCALL	CLR_PRO_STACK
                      2  M  PAGE #( CLR_PRO_STACK ),
       01378 1E8D     2     PAGE ( CLR_PRO_STACK / 1024 ),
       01379 1352     1     CALL ( CLR_PRO_STACK % 1024 ),
                      2  M  PAGE #( $ ),
       0137A 1E84     2     PAGE ( $ / 1024 ),
   358 0137B 00E1 C        	CLR	B1_PRO_VAR
   359            C        	
   360 0137C 160D C        	JMP	STOR_FUNC_END	
   361            C        ;---------------------------------------
   362 0137D      C        STOR_FUNC_2_MKEY_NUM:
   363            C        ;---------------------------------------
   364 0137D      C        STOR_FUNC_2_MKEY_RP:
   365 0137D      C        STOR_FUNC_2_MKEY_STP:
   366 0137D      C        STOR_FUNC_2_MKEY_1M:
   367 0137D      C        STOR_FUNC_2_MKEY_2M:
   368 0137D      C        STOR_FUNC_2_MKEY_3M:
   369            C        ;---------------------------------------
   370            C        
   371 0137D      C        STOR_FUNC_1_MKEY_SPK:	
   372 0137D 0420 C        	MOV	A,B1_MSG
   373            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       0137E 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       0137F 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       01380 1E84     2     PAGE ( $ / 1024 ),
   374 01381      C        STOR_FUNC_EXIT:	
   375            C      M 	LCALL	CLR_PRO_STACK
                      2  M  PAGE #( CLR_PRO_STACK ),
       01381 1E8D     2     PAGE ( CLR_PRO_STACK / 1024 ),
       01382 1352     1     CALL ( CLR_PRO_STACK % 1024 ),
                      2  M  PAGE #( $ ),
       01383 1E84     2     PAGE ( $ / 1024 ),
   376 01384 00E1 C        	CLR	B1_PRO_VAR
   377            C        	
   378 01385 160D C        	JMP	STOR_FUNC_END
   379            C        ;---------------------------------------
   380 01386      C        STOR_FUNC_2_TMR:
   381 01386      C        STOR_FUNC_2_MKEY_DEL:
   382 01386 16BC C        	JMP	STOR_FUNC_1_MKEY_STP
   383            C        
   608                     ;-------------------------------------------------------------------------------
   609                     ;page5
   610                     INCLUDE		"f_remote.dt"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;	remote
     3            C        ;-------------------------------------------------------------------------------
     4            C        ORG	(5<<10)
     5            C        ;-------------------------------------------------------------------------------
     6 01400      C        RMT_FUNC:
     7            C      M 	BANK	1
       01400 0B84     1     BS  _RSR , 6 
       01401 09C4     1     BC  _RSR , 7 
     8            C        	
     9 01402 1880 C        	MOV 	A,@CMSG_MKEY
    10 01403 0120 C        	SUB 	A,B1_MSG
    11            C      M 	JPZ 	RMT_FUNC_MKEY
       01404 0C83     1     JBC  _STATUS , Z 
       01405 1413     1     JMP  RMT_FUNC_MKEY ,
    12            C        	
    13 01406 1893 C        	MOV 	A,@CHOOK_OFF
    14 01407 0120 C        	SUB 	A,B1_MSG
    15            C      M 	JPZ 	RMT_FUNC_HOOKOFF
       01408 0C83     1     JBC  _STATUS , Z 
       01409 142A     1     JMP  RMT_FUNC_HOOKOFF ,
    16            C        
    17 0140A 0421 C        	MOV	A,B1_PRO_VAR
    18 0140B 1A03 C        	AND	A,@0X03
    19            C      M 	MTBL
       0140C 0020     1     TBL 
             140C     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    20 0140D 1431 C        	JMP	RMT_0	;0
    21 0140E 155E C        	JMP	RMT_1	;1	Play message
    22 0140F 16CA C        	JMP	RMT_2	;2	OGM(play/record)
    23 01410 17D6 C        	JMP	RMT_3	;3	Exit
    24            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    25            C        ;return
    26 01411      C        RMT_FUNC_END:	
    27            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       01411 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       01412 15AC     1     JMP ( MAIN_LOOP % 1024 ),
    28            C        ;-------------------------------------------------------------------------------
    29 01413      C        RMT_FUNC_MKEY:
    30 01413 1813 C        	MOV	A,@CKEY_STP
    31            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01414 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01415 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01416 1E85     2     PAGE ( $ / 1024 ),
    32            C      M 	JPNC	RMT_FUNC_MKEY_STP
       01417 0E03     1     JBS  _STATUS , C 
       01418 1420     1     JMP  RMT_FUNC_MKEY_STP ,
    33            C        	
    34 01419 1827 C        	MOV	A,@CKEY_SPK
    35            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0141A 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0141B 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0141C 1E85     2     PAGE ( $ / 1024 ),
    36            C      M 	JPNC	RMT_FUNC_MKEY_SPK
       0141D 0E03     1     JBS  _STATUS , C 
       0141E 1423     1     JMP  RMT_FUNC_MKEY_SPK ,
    37            C        
    38 0141F 1411 C        	JMP	RMT_FUNC_END
    39            C        ;---------------------------------------
    40 01420      C        RMT_FUNC_MKEY_STP:
    41 01420 188B C        	MOV	A,@CMSG_CPC
    42 01421 0060 C        	MOV	B1_MSG,A
    43            C        	
    44 01422 1400 C        	JMP	RMT_FUNC
    45            C        ;---------------------------------------
    46 01423      C        RMT_FUNC_MKEY_SPK:
    47 01423 188B C        	MOV	A,@CMSG_CPC
    48 01424 0060 C        	MOV	B1_MSG,A
    49            C        	
    50 01425 1894 C        	MOV	A,@CPHONE_ON
    51            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       01426 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       01427 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       01428 1E85     2     PAGE ( $ / 1024 ),
    52            C        	
    53 01429 1400 C        	JMP	RMT_FUNC
    54            C        ;---------------------------------------
    55 0142A      C        RMT_FUNC_HOOKOFF:
    56 0142A 188B C        	MOV	A,@CMSG_CPC
    57 0142B 0060 C        	MOV	B1_MSG,A
    58            C        	
    59 0142C 1893 C        	MOV	A,@CHOOK_OFF
    60            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       0142D 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       0142E 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       0142F 1E85     2     PAGE ( $ / 1024 ),
    61            C        	
    62 01430 1400 C        	JMP	RMT_FUNC
    63            C        ;-------------------------------------------------------------------------------
    64 01431      C        RMT_0:
    65 01431 1890 C        	MOV	A,@CMSG_INIT
    66 01432 0120 C        	SUB	A,B1_MSG
    67            C      M 	JPZ	RMT_FUNC_0_INIT
       01433 0C83     1     JBC  _STATUS , Z 
       01434 1446     1     JMP  RMT_FUNC_0_INIT ,
    68            C        
    69 01435 1885 C        	MOV	A,@CVP_END
    70 01436 0120 C        	SUB	A,B1_MSG
    71            C      M 	JPZ	RMT_FUNC_0_VPEND
       01437 0C83     1     JBC  _STATUS , Z 
       01438 145D     1     JMP  RMT_FUNC_0_VPEND ,
    72            C        
    73 01439 188A C        	MOV	A,@CREV_DTMF
    74 0143A 0120 C        	SUB	A,B1_MSG
    75            C      M 	JPZ	RMT_FUNC_0_DTMF
       0143B 0C83     1     JBC  _STATUS , Z 
       0143C 1488     1     JMP  RMT_FUNC_0_DTMF ,
    76            C        
    77 0143D 1898 C        	MOV	A,@CMSG_TMR
    78 0143E 0120 C        	SUB	A,B1_MSG
    79            C      M 	JPZ	RMT_FUNC_0_TMR
       0143F 0C83     1     JBC  _STATUS , Z 
       01440 147D     1     JMP  RMT_FUNC_0_TMR ,
    80            C        
    81 01441 188B C        	MOV	A,@CMSG_CPC
    82 01442 0120 C        	SUB	A,B1_MSG		;接线后摘机(相当于CPC)
    83            C      M 	JPZ	RMT_0_CPC
       01443 0C83     1     JBC  _STATUS , Z 
       01444 1484     1     JMP  RMT_0_CPC ,
    84            C        
    85 01445 1411 C        	JMP	RMT_FUNC_END
    86            C        ;---------------------------------------
    87            C        ;	B1_PRO_VAR	bit4 - 1/0 - VOP status/not
    88            C        ;			bit5 - 1/0 - Del flag
    89            C        ;---------------------------------------
    90 01446      C        RMT_FUNC_0_INIT:
    91            C        	;HF_HOOK_H
    92            C      M 	DAM_SPK_DISABLE
       01446 0949     1     BC  _P9 , 5 
    93            C        ;-
    94            C      M 	PAGE	#(INIT_DAM_FUNC)
       01447 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
    95 01448 11C1 C        	CALL	INIT_DAM_FUNC
    96            C      M 	PAGE	#(DAA_LIN_SPK)
       01449 1E83     1     PAGE ( DAA_LIN_SPK / 1024 ),
    97 0144A 11E8 C        	CALL	DAA_LIN_SPK
    98            C      M 	PAGE	#(BCVOX_INIT)
       0144B 1E82     1     PAGE ( BCVOX_INIT / 1024 ),
    99 0144C 13B4 C        	CALL	BCVOX_INIT
   100            C        	;PAGE	#(CLR_TIMER)
   101            C        	;CALL	CLR_TIMER	;Disable Timer
   102            C        	;PAGE	#($)
   103            C        
   104            C      M 	PAGE	#(VGA)
       0144D 1E8C     1     PAGE ( VGA / 1024 ),
   105 0144E 111E C        	CALL	VGABLANKNUM2
   106 0144F 1127 C        	CALL	VGABLANKCHAR
   107 01450 1883 C        	MOV	A,@(STYLE_CENTER)
   108 01451 1026 C        	CALL	VGACHAR
   109 01452 1811 C        	MOV	A,@17		;REMOTE
   110 01453 114D C        	CALL	VGASTRING
   111 01454 18FF C        	MOV	A,@(CH_END)
   112 01455 1026 C        	CALL	VGACHAR
   113 01456 10AB C        	CALL	VGADRAWCHAR
   114            C        	;PAGE	#($)
   115            C        ;-	
   116            C      M 	LCALL	LBEEP
                      2  M  PAGE #( LBEEP ),
       01457 1E83     2     PAGE ( LBEEP / 1024 ),
       01458 108C     1     CALL ( LBEEP % 1024 ),
                      2  M  PAGE #( $ ),
       01459 1E85     2     PAGE ( $ / 1024 ),
   117            C      M 	MOV	B1_PRO_VAR,@0X10
       0145A 1810     1     MOV A,@( 16 )
       0145B 0061     1     MOV  B1_PRO_VAR ,A
   118 0145C 00F2 C        	CLR	B1_MSG_ID
   119            C        
   120 0145D      C        RMT_FUNC_0_VPEND:
   121 0145D 00E2 C        	CLR	B1_PRO_VAR1
   122            C        	
   123            C      M 	JPNB	B1_PRO_VAR,4,RMT_FUNC_0_VOPOVER_1
       0145E 0F21     1     JBS  B1_PRO_VAR , 4 
       0145F 1471     1     JMP  RMT_FUNC_0_VOPOVER_1 ,
   124            C        
   125 01460 0432 C        	MOV	A,B1_MSG_ID
   126            C      M 	LCALL	RMT_VOP_TAB
                      2  M  PAGE #( RMT_VOP_TAB ),
       01461 1E8E     2     PAGE ( RMT_VOP_TAB / 1024 ),
       01462 11DA     1     CALL ( RMT_VOP_TAB % 1024 ),
                      2  M  PAGE #( $ ),
       01463 1E85     2     PAGE ( $ / 1024 ),
   127 01464 1900 C        	OR	A,@0
   128            C      M 	JPZ	RMT_FUNC_0_VOPOVER_0	;VOP over(The table end with "0")
       01465 0C83     1     JBC  _STATUS , Z 
       01466 146C     1     JMP  RMT_FUNC_0_VOPOVER_0 ,
   129            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       01467 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       01468 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       01469 1E85     2     PAGE ( $ / 1024 ),
   130 0146A 0572 C        	INC	B1_MSG_ID
   131            C        
   132 0146B 1411 C        	JMP	RMT_FUNC_END
   133            C        ;-------------------
   134 0146C      C        RMT_FUNC_0_VOPOVER_0:
   135 0146C 0921 C        	BC	B1_PRO_VAR,4	;VOP-flag
   136            C      M 	LCALL	BEEP
                      2  M  PAGE #( BEEP ),
       0146D 1E83     2     PAGE ( BEEP / 1024 ),
       0146E 1085     1     CALL ( BEEP % 1024 ),
                      2  M  PAGE #( $ ),
       0146F 1E85     2     PAGE ( $ / 1024 ),
   137 01470 1411 C        	JMP	RMT_FUNC_END
   138 01471      C        RMT_FUNC_0_VOPOVER_1:
   139            C        
   140 01471 00E1 C        	CLR	B1_PRO_VAR
   141            C        	
   142            C      M 	PAGE	#(INIT_DAM_FUNC)
       01472 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   143 01473 11C1 C        	CALL	INIT_DAM_FUNC
   144            C      M 	PAGE	#(DAA_LIN_REC)
       01474 1E83     1     PAGE ( DAA_LIN_REC / 1024 ),
   145 01475 11E3 C        	CALL	DAA_LIN_REC
   146            C      M 	PAGE	#(LINE_START)
       01476 1E82     1     PAGE ( LINE_START / 1024 ),
   147 01477 1038 C        	CALL	LINE_START
   148            C        
   149 01478 1810 C        	MOV	A,@CTMR1S
   150            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       01479 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       0147A 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       0147B 1E85     2     PAGE ( $ / 1024 ),
   151            C        	
   152 0147C 1411 C        	JMP	RMT_FUNC_END
   153            C        ;---------------------------------------
   154 0147D      C        RMT_FUNC_0_TMR:
   155 0147D 0562 C        	INC	B1_PRO_VAR1
   156            C        	
   157 0147E 0961 C        	BC	B1_PRO_VAR,5	;Clean del-falg
   158            C        	
   159 0147F 0422 C        	MOV	A,B1_PRO_VAR1
   160 01480 1D13 C        	SUB	A,@19
   161            C      M 	JPC	RMT_FUNC_END
       01481 0C03     1     JBC  _STATUS , C 
       01482 1411     1     JMP  RMT_FUNC_END ,
   162 01483 17DB C        	JMP	RMT_3_EXIT_VPEND	;TimeOut( >=20s )
   163            C        ;---------------------------------------
   164 01484      C        RMT_0_CPC:
   165 01484      C        RMT_1_0_CPC:
   166 01484      C        RMT_1_2_CPC:	
   167 01484      C        RMT_2_VOP_CPC:
   168 01484      C        RMT_2_PLY_CPC:
   169            C      M 	PAGE	#(INIT_DAM_FUNC)
       01484 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   170 01485 11C1 C        	CALL	INIT_DAM_FUNC
   171            C      M 	PAGE	#($)
       01486 1E85     1     PAGE ( $ / 1024 ),
   172            C        
   173 01487 17DB C        	JMP	RMT_3_EXIT_VPEND	;TimeOut( >=20s )
   174            C        ;---------------------------------------
   175 01488      C        RMT_FUNC_0_DTMF:
   176 01488 0429 C        	MOV	A,B1_DTMF_VAL
   177 01489 1D03 C        	SUB	A,@NUM_JIN
   178            C      M 	JPZ	RMT_FUNC_0_DTMFJIN
       0148A 0C83     1     JBC  _STATUS , Z 
       0148B 1558     1     JMP  RMT_FUNC_0_DTMFJIN ,
   179            C        	
   180 0148C 0429 C        	MOV	A,B1_DTMF_VAL
   181 0148D 1D0A C        	SUB	A,@NUM_XIN
   182            C      M 	JPZ	RMT_FUNC_0_DTMFXIN
       0148E 0C83     1     JBC  _STATUS , Z 
       0148F 1557     1     JMP  RMT_FUNC_0_DTMFXIN ,
   183            C        	
   184 01490 0429 C        	MOV	A,B1_DTMF_VAL
   185 01491 1A0F C        	AND	A,@0X0F
   186            C      M 	MTBL
       01492 0020     1     TBL 
             1492     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   187 01493 14A3 C        	JMP	RMT_FUNC_0_DTMF_0	;0x00
   188 01494 1411 C        	JMP	RMT_FUNC_END		;0x01
   189 01495 14C1 C        	JMP	RMT_FUNC_0_DTMF_2	;play message
   190 01496 1411 C        	JMP	RMT_FUNC_END		;0x03
   191 01497 14F0 C        	JMP	RMT_FUNC_0_DTMF_4	;play announcement
   192 01498 150E C        	JMP	RMT_FUNC_0_DTMF_5	;record announcement
   193 01499 1411 C        	JMP	RMT_FUNC_END		;0x06
   194 0149A 1411 C        	JMP	RMT_FUNC_END		;No
   195 0149B 1518 C        	JMP	RMT_FUNC_0_DTMF_8	;Set answer off
   196 0149C 1529 C        	JMP	RMT_FUNC_0_DTMF_9	;Set answer on
   197 0149D 1411 C        	JMP	RMT_FUNC_END		;0x0A
   198 0149E 1411 C        	JMP	RMT_FUNC_END		;0x0B
   199 0149F 1411 C        	JMP	RMT_FUNC_END		;0x0C
   200 014A0 1411 C        	JMP	RMT_FUNC_END		;0x0D
   201 014A1 1411 C        	JMP	RMT_FUNC_END		;0x0E
   202 014A2 1411 C        	JMP	RMT_FUNC_END		;0x0F
   203            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   204            C        ;---------------------------------------
   205 014A3      C        RMT_FUNC_0_DTMF_0:
   206            C      M 	JPB	B1_PRO_VAR,5,RMT_0_DODELALL
       014A3 0D61     1     JBC  B1_PRO_VAR , 5 
       014A4 14A7     1     JMP  RMT_0_DODELALL ,
   207            C        	
   208 014A5 0B61 C        	BS	B1_PRO_VAR,5	;Set del-falg
   209            C        	
   210 014A6 1411 C        	JMP	RMT_FUNC_END
   211            C        ;-------------------
   212 014A7      C        RMT_0_DODELALL:
   213 014A7 0961 C        	BC	B1_PRO_VAR,5	;Clean del-falg
   214            C        	
   215 014A8 0B21 C        	BS	B1_PRO_VAR,4
   216 014A9 00F2 C        	CLR	B1_MSG_ID
   217            C        	
   218            C      M 	PAGE	#(CLR_TIMER)
       014AA 1E8D     1     PAGE ( CLR_TIMER / 1024 ),
   219 014AB 1358 C        	CALL	CLR_TIMER
   220            C        	
   221            C      M 	PAGE	#(INIT_DAM_FUNC)
       014AC 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   222 014AD 11C1 C        	CALL	INIT_DAM_FUNC
   223            C      M 	PAGE	#(DAA_LIN_SPK)
       014AE 1E83     1     PAGE ( DAA_LIN_SPK / 1024 ),
   224 014AF 11E8 C        	CALL	DAA_LIN_SPK
   225            C        
   226            C      M 	PAGE	#(VPMSG_DELOLD)
       014B0 1E83     1     PAGE ( VPMSG_DELOLD / 1024 ),
   227 014B1 122B C        	CALL	VPMSG_DELOLD
   228            C      M 	PAGE	#(VPMSG_REALDEL)
       014B2 1E83     1     PAGE ( VPMSG_REALDEL / 1024 ),
   229 014B3 1227 C        	CALL	VPMSG_REALDEL
   230            C      M 	PAGE	#(TEL_GC_CHK)
       014B4 1E82     1     PAGE ( TEL_GC_CHK / 1024 ),
   231 014B5 10FC C        	CALL	TEL_GC_CHK
   232            C        
   233 014B6 1810 C        	MOV	A,@CTMR1S
   234            C      M 	PAGE	#(SET_TIMER)
       014B7 1E8D     1     PAGE ( SET_TIMER / 1024 ),
   235 014B8 1359 C        	CALL	SET_TIMER
   236            C        
   237            C      M 	PAGE	#(VOP_STOR_VP)	
       014B9 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   238 014BA 183C C        	MOV	A,@VOPID_ALLMESSAGES
   239 014BB 1064 C        	CALL	VOP_STOR_VP
   240 014BC 1838 C        	MOV	A,@VOPID_DELETED
   241 014BD 1064 C        	CALL	VOP_STOR_VP
   242 014BE 108C C        	CALL	LBEEP
   243            C      M 	PAGE	#($)
       014BF 1E85     1     PAGE ( $ / 1024 ),
   244            C        	
   245 014C0 1411 C        	JMP	RMT_FUNC_END
   246            C        ;---------------------------------------
   247 014C1      C        RMT_FUNC_0_DTMF_2:
   248            C      M 	PAGE	#(INIT_DAM_FUNC)
       014C1 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   249 014C2 11C1 C        	CALL	INIT_DAM_FUNC
   250            C      M 	PAGE	#(DAA_LIN_SPK)
       014C3 1E83     1     PAGE ( DAA_LIN_SPK / 1024 ),
   251 014C4 11E8 C        	CALL	DAA_LIN_SPK
   252            C      M 	PAGE	#(VPMSG_CHK)
       014C5 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   253 014C6 1182 C        	CALL	VPMSG_CHK
   254 014C7 1182 C        	CALL	VPMSG_CHK
   255            C      M 	PAGE	#($)
       014C8 1E85     1     PAGE ( $ / 1024 ),
   256            C        	
   257            C      M 	MOV	B1_PRO_VAR,@0X01
       014C9 1801     1     MOV A,@( 1 )
       014CA 0061     1     MOV  B1_PRO_VAR ,A
   258 014CB 00F2 C        	CLR	B1_MSG_ID
   259            C        	
   260            C      M 	JPB	DAM_FLAG,6,RMT_FUNC_0_DTMF_2_ALLMSG
       014CC 0D94     1     JBC  DAM_FLAG , 6 
       014CD 14D9     1     JMP  RMT_FUNC_0_DTMF_2_ALLMSG ,
   261            C        
   262            C      M 	PAGE	#(VOP_STOR_VP)
       014CE 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   263 014CF 182B C        	MOV	A,@VOPID_YOUHAVE
   264 014D0 1064 C        	CALL	VOP_STOR_VP
   265 014D1 182C C        	MOV	A,@VOPID_NO
   266 014D2 1064 C        	CALL	VOP_STOR_VP
   267 014D3 182F C        	MOV	A,@VOPID_MESSAGES
   268 014D4 1064 C        	CALL	VOP_STOR_VP
   269            C      M 	PAGE	#($)
       014D5 1E85     1     PAGE ( $ / 1024 ),
   270            C        
   271            C      M 	MOV	B1_PRO_VAR,@0X21		;其状态与EndOfMessage相同
       014D6 1821     1     MOV A,@( 33 )
       014D7 0061     1     MOV  B1_PRO_VAR ,A
   272            C        	
   273 014D8 1411 C        	JMP	RMT_FUNC_END
   274            C        ;---------------------------------------
   275 014D9      C        RMT_FUNC_0_DTMF_2_ALLMSG:
   276            C      M 	PAGE	#(VOP_STOR_VP)
       014D9 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   277 014DA 182B C        	MOV	A,@VOPID_YOUHAVE
   278 014DB 1064 C        	CALL	VOP_STOR_VP
   279 014DC 0430 C        	MOV	A,B1_MSG_T
   280            C      M 	PAGE	#(ANNOUNCE_NUM)
       014DD 1E82     1     PAGE ( ANNOUNCE_NUM / 1024 ),
   281 014DE 11C8 C        	CALL	ANNOUNCE_NUM
   282 014DF 182F C        	MOV	A,@VOPID_MESSAGES
   283            C      M 	PAGE	#(VOP_STOR_VP)
       014E0 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   284 014E1 1064 C        	CALL	VOP_STOR_VP
   285            C      M 	PAGE	#($)
       014E2 1E85     1     PAGE ( $ / 1024 ),
   286            C        
   287            C      M 	JPB	DAM_FLAG,7,RMT_FUNC_0_DTMF_2_NEWMSG
       014E3 0DD4     1     JBC  DAM_FLAG , 7 
       014E4 14E6     1     JMP  RMT_FUNC_0_DTMF_2_NEWMSG ,
   288            C        
   289 014E5 1411 C        	JMP	RMT_FUNC_END
   290            C        ;---------------------------------------
   291 014E6      C        RMT_FUNC_0_DTMF_2_NEWMSG:
   292            C        
   293 014E6 0431 C        	MOV	A,B1_MSG_N
   294            C      M 	PAGE	#(ANNOUNCE_NUM)
       014E7 1E82     1     PAGE ( ANNOUNCE_NUM / 1024 ),
   295 014E8 11C8 C        	CALL	ANNOUNCE_NUM
   296 014E9 182D C        	MOV	A,@VOPID_NEW
   297            C      M 	PAGE	#(VOP_STOR_VP)
       014EA 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   298 014EB 1064 C        	CALL	VOP_STOR_VP
   299 014EC 182F C        	MOV	A,@VOPID_MESSAGES
   300 014ED 1064 C        	CALL	VOP_STOR_VP
   301            C      M 	PAGE	#($)
       014EE 1E85     1     PAGE ( $ / 1024 ),
   302            C        	
   303 014EF 1411 C        	JMP	RMT_FUNC_END
   304            C        ;---------------------------------------
   305 014F0      C        RMT_FUNC_0_DTMF_4:
   306            C      M 	PAGE	#(INIT_DAM_FUNC)
       014F0 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   307 014F1 11C1 C        	CALL	INIT_DAM_FUNC
   308            C      M 	PAGE	#(DAA_LIN_SPK)
       014F2 1E83     1     PAGE ( DAA_LIN_SPK / 1024 ),
   309 014F3 11E8 C        	CALL	DAA_LIN_SPK
   310            C      M 	PAGE	#($)
       014F4 1E85     1     PAGE ( $ / 1024 ),
   311            C        
   312            C      M 	MOV	B1_PRO_VAR,@0X22
       014F5 1822     1     MOV A,@( 34 )
       014F6 0061     1     MOV  B1_PRO_VAR ,A
   313            C        	
   314 014F7 1801 C        	MOV	A,@COGM1
   315 014F8 0CD4 C        	JBC	DAM_FLAG,3
   316 014F9 1802 C        	MOV	A,@COGM2
   317            C        
   318            C      M 	LCALL	OGM_STATUS
                      2  M  PAGE #( OGM_STATUS ),
       014FA 1E82     2     PAGE ( OGM_STATUS / 1024 ),
       014FB 1169     1     CALL ( OGM_STATUS % 1024 ),
                      2  M  PAGE #( $ ),
       014FC 1E85     2     PAGE ( $ / 1024 ),
   319 014FD 1900 C        	OR	A,@0
   320            C      M 	JPZ	RMT_FUNC_0_OGMPLY_DEFAULT
       014FE 0C83     1     JBC  _STATUS , Z 
       014FF 1507     1     JMP  RMT_FUNC_0_OGMPLY_DEFAULT ,
   321 01500 0056 C        	MOV	TEMP1,A
   322            C      M 	MOV	TEMP0,@ID_PLYA
       01501 1806     1     MOV A,@( ID_PLYA )
       01502 0055     1     MOV  TEMP0 ,A
   323            C      M 	PAGE	#(DSP)
       01503 1E83     1     PAGE ( DSP / 1024 ),
   324 01504 1067 C        	CALL	STOR_VP
   325            C      M 	PAGE	#($)
       01505 1E85     1     PAGE ( $ / 1024 ),
   326            C        	
   327 01506 1411 C        	JMP	RMT_FUNC_END
   328            C        ;-------------------
   329 01507      C        RMT_FUNC_0_OGMPLY_DEFAULT:
   330            C        	
   331 01507 1829 C        	MOV	A,@VOPID_DEFOGM1
   332 01508 0CD4 C        	JBC	DAM_FLAG,3
   333 01509 182A C        	MOV	A,@VOPID_DEFOGM2
   334            C      M 	PAGE	#(DSP)
       0150A 1E83     1     PAGE ( DSP / 1024 ),
   335 0150B 1064 C        	CALL	VOP_STOR_VP
   336            C      M 	PAGE	#($)
       0150C 1E85     1     PAGE ( $ / 1024 ),
   337            C        	
   338 0150D 1411 C        	JMP	RMT_FUNC_END
   339            C        ;---------------------------------------
   340 0150E      C        RMT_FUNC_0_DTMF_5:
   341            C      M 	PAGE	#(INIT_DAM_FUNC)
       0150E 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   342 0150F 11C1 C        	CALL	INIT_DAM_FUNC
   343            C      M 	PAGE	#(DAA_LIN_SPK)
       01510 1E83     1     PAGE ( DAA_LIN_SPK / 1024 ),
   344 01511 11E8 C        	CALL	DAA_LIN_SPK
   345            C      M 	PAGE	#(LBEEP)
       01512 1E83     1     PAGE ( LBEEP / 1024 ),
   346 01513 108C C        	CALL	LBEEP
   347            C      M 	PAGE	#($)
       01514 1E85     1     PAGE ( $ / 1024 ),
   348            C        	
   349            C      M 	MOV	B1_PRO_VAR,@0X02
       01515 1802     1     MOV A,@( 2 )
       01516 0061     1     MOV  B1_PRO_VAR ,A
   350            C        
   351 01517 1411 C        	JMP	RMT_FUNC_END
   352            C        ;---------------------------------------
   353 01518      C        RMT_FUNC_0_DTMF_8:	;AnswerMachine is off
   354            C      M 	DAM_OFF
       01518 0A94     1     BS  DAM_FLAG , 2 
   355            C        	
   356 01519 0B21 C        	BS	B1_PRO_VAR,4
   357 0151A 00F2 C        	CLR	B1_MSG_ID
   358            C        ;---
   359            C      M 	PAGE	#(CLR_TIMER)
       0151B 1E8D     1     PAGE ( CLR_TIMER / 1024 ),
   360 0151C 1358 C        	CALL	CLR_TIMER
   361            C      M 	PAGE	#(INIT_DAM_FUNC)
       0151D 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   362 0151E 11C1 C        	CALL	INIT_DAM_FUNC
   363            C      M 	PAGE	#(DAA_LIN_SPK)
       0151F 1E83     1     PAGE ( DAA_LIN_SPK / 1024 ),
   364 01520 11E8 C        	CALL	DAA_LIN_SPK
   365            C        	;PAGE	#($)
   366            C        	
   367            C      M 	PAGE	#(VOP_STOR_VP)
       01521 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   368 01522 183A C        	MOV	A,@VOPID_ANSMACHINE
   369 01523 1064 C        	CALL	VOP_STOR_VP
   370 01524 183F C        	MOV	A,@VOPID_OFF
   371 01525 1064 C        	CALL	VOP_STOR_VP
   372 01526 108C C        	CALL	LBEEP
   373            C      M 	PAGE	#($)
       01527 1E85     1     PAGE ( $ / 1024 ),
   374            C        
   375 01528 1411 C        	JMP	RMT_FUNC_END
   376            C        ;---------------------------------------
   377 01529      C        RMT_FUNC_0_DTMF_9:
   378 01529 0B21 C        	BS	B1_PRO_VAR,4
   379 0152A 00F2 C        	CLR	B1_MSG_ID
   380            C        
   381            C      M 	PAGE	#(CLR_TIMER)
       0152B 1E8D     1     PAGE ( CLR_TIMER / 1024 ),
   382 0152C 1358 C        	CALL	CLR_TIMER
   383            C      M 	PAGE	#(INIT_DAM_FUNC)
       0152D 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   384 0152E 11C1 C        	CALL	INIT_DAM_FUNC
   385            C      M 	PAGE	#(DAA_LIN_SPK)
       0152F 1E83     1     PAGE ( DAA_LIN_SPK / 1024 ),
   386 01530 11E8 C        	CALL	DAA_LIN_SPK
   387            C      M 	PAGE	#($)
       01531 1E85     1     PAGE ( $ / 1024 ),
   388            C        
   389            C      M 	JPNB	DAM_FLAG,2,RMT_FUNC_0_DTMF_9_SELOGM
       01532 0E94     1     JBS  DAM_FLAG , 2 
       01533 1542     1     JMP  RMT_FUNC_0_DTMF_9_SELOGM ,
   390            C        	
   391            C      M 	DAM_ON
       01534 0894     1     BC  DAM_FLAG , 2 
   392            C      M 	SEL_OGM1
       01535 08D4     1     BC  DAM_FLAG , 3 
   393            C        	
   394            C      M 	PAGE	#(VOP_STOR_VP)
       01536 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   395 01537 183A C        	MOV	A,@VOPID_ANSMACHINE
   396 01538 1064 C        	CALL	VOP_STOR_VP
   397 01539 183E C        	MOV	A,@VOPID_ON
   398 0153A 1064 C        	CALL	VOP_STOR_VP
   399 0153B 183B C        	MOV	A,@VOPID_ANNOUNCEMENT
   400 0153C 1064 C        	CALL	VOP_STOR_VP
   401 0153D 1802 C        	MOV	A,@VOPID_ONE
   402 0153E 1064 C        	CALL	VOP_STOR_VP
   403 0153F 108C C        	CALL	LBEEP
   404            C      M 	PAGE	#($)
       01540 1E85     1     PAGE ( $ / 1024 ),
   405            C        	
   406 01541 1411 C        	JMP	RMT_FUNC_END
   407            C        ;---------------------------------------
   408 01542      C        RMT_FUNC_0_DTMF_9_SELOGM:	;AnswerMachine is on Select OGM
   409            C      M 	SELOGM_COM
       01542 0414     1     MOV A, DAM_FLAG 
       01543 1B08     1     XOR A,@(( 1 << 3 ))
       01544 0054     1     MOV  DAM_FLAG ,A
   410            C        	
   411            C      M 	JPB	DAM_FLAG,3,RMT_FUNC_0_DTMF_9_SELOGM2
       01545 0CD4     1     JBC  DAM_FLAG , 3 
       01546 154F     1     JMP  RMT_FUNC_0_DTMF_9_SELOGM2 ,
   412            C        	
   413            C      M 	PAGE	#(VOP_STOR_VP)
       01547 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   414 01548 183B C        	MOV	A,@VOPID_ANNOUNCEMENT
   415 01549 1064 C        	CALL	VOP_STOR_VP
   416 0154A 1802 C        	MOV	A,@VOPID_ONE
   417 0154B 1064 C        	CALL	VOP_STOR_VP
   418 0154C 108C C        	CALL	LBEEP
   419            C      M 	PAGE	#($)
       0154D 1E85     1     PAGE ( $ / 1024 ),
   420            C        	
   421 0154E 1411 C        	JMP	RMT_FUNC_END
   422            C        ;---------------------------------------
   423 0154F      C        RMT_FUNC_0_DTMF_9_SELOGM2:
   424            C        	
   425            C      M 	PAGE	#(VOP_STOR_VP)		
       0154F 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   426 01550 183B C        	MOV	A,@VOPID_ANNOUNCEMENT
   427 01551 1064 C        	CALL	VOP_STOR_VP
   428 01552 1803 C        	MOV	A,@VOPID_TWO
   429 01553 1064 C        	CALL	VOP_STOR_VP
   430 01554 108C C        	CALL	LBEEP
   431            C      M 	PAGE	#($)
       01555 1E85     1     PAGE ( $ / 1024 ),
   432            C        		
   433 01556 1411 C        	JMP	RMT_FUNC_END
   434            C        ;---------------------------------------
   435 01557      C        RMT_FUNC_0_DTMFXIN:
   436 01557 1411 C        	JMP	RMT_FUNC_END
   437            C        ;---------------------------------------
   438 01558      C        RMT_FUNC_0_DTMFJIN:
   439            C      M 	PAGE	#(INIT_DAM_FUNC)
       01558 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   440 01559 11C1 C        	CALL	INIT_DAM_FUNC
   441            C      M 	PAGE	#(VPMSG_CHK)
       0155A 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   442 0155B 1182 C        	CALL	VPMSG_CHK
   443            C      M 	PAGE	#($)
       0155C 1E85     1     PAGE ( $ / 1024 ),
   444            C        	
   445 0155D 17DB C        	JMP	RMT_3_EXIT_VPEND
   446            C        ;-------------------------------------------------------------------------------
   447 0155E      C        RMT_1:			;play Mode
   448 0155E 0721 C        	SWAPA	B1_PRO_VAR
   449 0155F 1A03 C        	AND	A,@0X03
   450            C      M 	MTBL
       01560 0020     1     TBL 
             1560     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   451 01561 1565 C        	JMP	RMT_1_0		;Start VOP
   452 01562 1597 C        	JMP	RMT_1_1		;Playing message
   453 01563 168B C        	JMP	RMT_1_2		;End of play
   454 01564 16C9 C        	JMP	RMT_1_3		;exit
   455            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   456            C        ;---------------------------------------
   457            C        ;B1_PRO_VAR	bit(1..0)	=Play function
   458            C        ;		bit2		=reserved
   459            C        ;		bit3		=Repeat-flag
   460            C        ;		bit(5..4)	=step(start_VOP/message/End_VOP)
   461            C        ;		bit6		=pause status
   462            C        ;		bit7		=TimeOut pause status
   463            C        ;---------------------------------------
   464 01565      C        RMT_1_0:		;Play message
   465 01565 188A C        	MOV	A,@CREV_DTMF
   466 01566 0120 C        	SUB	A,B1_MSG
   467            C      M 	JPZ	RMT_1_0_DTMF
       01567 0C83     1     JBC  _STATUS , Z 
       01568 157A     1     JMP  RMT_1_0_DTMF ,
   468            C        
   469 01569 1888 C        	MOV	A,@CMSG_BTONE
   470 0156A 0120 C        	SUB	A,B1_MSG		;BTONE
   471            C      M 	JPZ	RMT_1_0_BTONE
       0156B 0C83     1     JBC  _STATUS , Z 
       0156C 1583     1     JMP  RMT_1_0_BTONE ,
   472            C        	
   473 0156D 1898 C        	MOV	A,@CMSG_TMR
   474 0156E 0120 C        	SUB	A,B1_MSG
   475            C      M 	JPZ	RMT_1_0_TMR
       0156F 0C83     1     JBC  _STATUS , Z 
       01570 1584     1     JMP  RMT_1_0_TMR ,
   476            C        
   477 01571 1885 C        	MOV	A,@CVP_END
   478 01572 0120 C        	SUB	A,B1_MSG
   479            C      M 	JPZ	RMT_1_0_VPEND
       01573 0C83     1     JBC  _STATUS , Z 
       01574 1591     1     JMP  RMT_1_0_VPEND ,
   480            C        
   481 01575 188B C        	MOV	A,@CMSG_CPC
   482 01576 0120 C        	SUB	A,B1_MSG		;接线后摘机(相当于CPC)
   483            C      M 	JPZ	RMT_1_0_CPC
       01577 0C83     1     JBC  _STATUS , Z 
       01578 1484     1     JMP  RMT_1_0_CPC ,
   484            C        
   485 01579 1411 C        	JMP	RMT_FUNC_END
   486            C        ;---------------------------------------
   487 0157A      C        RMT_1_0_DTMF:
   488 0157A 0429 C        	MOV	A,B1_DTMF_VAL
   489 0157B 1D06 C        	SUB	A,@6
   490            C      M 	JPZ	RMT_1_0_DTMF_6
       0157C 0C83     1     JBC  _STATUS , Z 
       0157D 16BD     1     JMP  RMT_1_0_DTMF_6 ,
   491            C        	
   492 0157E 0429 C        	MOV	A,B1_DTMF_VAL
   493 0157F 1D03 C        	SUB	A,@NUM_JIN
   494            C      M 	JPZ	RMT_1_0_DTMF_JIN
       01580 0C83     1     JBC  _STATUS , Z 
       01581 1583     1     JMP  RMT_1_0_DTMF_JIN ,
   495            C        
   496 01582 1411 C        	JMP	RMT_FUNC_END
   497            C        ;---------------------------------------
   498 01583      C        RMT_1_0_DTMF_JIN:
   499 01583      C        RMT_1_0_BTONE:
   500 01583 17DB C        	JMP	RMT_3_EXIT_VPEND
   501            C        ;---------------------------------------
   502 01584      C        RMT_1_0_TMR:
   503 01584 0562 C        	INC	B1_PRO_VAR1
   504            C        	
   505 01585 0422 C        	MOV	A,B1_PRO_VAR1
   506 01586 1DA5 C        	SUB	A,@165		;2.75m(2m45s)
   507            C      M 	JPZ	RMT_1_0_TMROUT
       01587 0C83     1     JBC  _STATUS , Z 
       01588 158A     1     JMP  RMT_1_0_TMROUT ,
   508            C        	
   509 01589 1411 C        	JMP	RMT_FUNC_END
   510            C        ;---------------------------------------
   511 0158A      C        RMT_1_0_TMROUT:
   512            C      M 	PAGE	#(IIC)
       0158A 1E83     1     PAGE ( IIC / 1024 ),
   513 0158B 13EC C        	CALL	GET_COMMAND
   514 0158C 0A16 C        	BS	TEMP1,0
   515 0158D 13CA C        	CALL	STOR_COMMAND
   516            C      M 	PAGE	#($)	
       0158E 1E85     1     PAGE ( $ / 1024 ),
   517            C        	
   518 0158F 00E2 C        	CLR	B1_PRO_VAR1
   519            C        	
   520 01590 1411 C        	JMP	RMT_FUNC_END
   521            C        ;---------------------------------------
   522 01591      C        RMT_1_0_VPEND:
   523            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       01591 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       01592 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       01593 1E85     2     PAGE ( $ / 1024 ),
   524            C      M 	MOV	B1_PRO_VAR,@0X11
       01594 1811     1     MOV A,@( 17 )
       01595 0061     1     MOV  B1_PRO_VAR ,A
   525            C        	;LCALL	VPMSG_CHK
   526            C        
   527 01596 162F C        	JMP	RMT_1_1_VPEND
   528            C        ;-------------------------------------------------------------------------------
   529 01597      C        RMT_1_1:
   530            C        
   531 01597 188A C        	MOV	A,@CREV_DTMF
   532 01598 0120 C        	SUB	A,B1_MSG
   533            C      M 	JPZ	RMT_1_1_DTMF
       01599 0C83     1     JBC  _STATUS , Z 
       0159A 15B4     1     JMP  RMT_1_1_DTMF ,
   534            C        
   535 0159B 1888 C        	MOV	A,@CMSG_BTONE
   536 0159C 0120 C        	SUB	A,B1_MSG		;BTONE
   537            C      M 	JPZ	RMT_1_1_BTONE
       0159D 0C83     1     JBC  _STATUS , Z 
       0159E 15FD     1     JMP  RMT_1_1_BTONE ,
   538            C        	
   539 0159F 1898 C        	MOV	A,@CMSG_TMR
   540 015A0 0120 C        	SUB	A,B1_MSG
   541            C      M 	JPZ	RMT_1_1_TMR
       015A1 0C83     1     JBC  _STATUS , Z 
       015A2 1605     1     JMP  RMT_1_1_TMR ,
   542            C        
   543 015A3 1885 C        	MOV	A,@CVP_END
   544 015A4 0120 C        	SUB	A,B1_MSG
   545            C      M 	JPZ	RMT_1_1_VPEND
       015A5 0C83     1     JBC  _STATUS , Z 
       015A6 162F     1     JMP  RMT_1_1_VPEND ,
   546            C        
   547 015A7 188B C        	MOV	A,@CMSG_CPC
   548 015A8 0120 C        	SUB	A,B1_MSG		;接线后摘机(相当于CPC)
   549            C      M 	JPZ	RMT_1_1_CPC
       015A9 0C83     1     JBC  _STATUS , Z 
       015AA 15AC     1     JMP  RMT_1_1_CPC ,
   550            C        
   551 015AB 1411 C        	JMP	RMT_FUNC_END
   552            C        ;---------------------------------------
   553 015AC      C        RMT_1_1_CPC:
   554            C      M 	PAGE	#(INIT_DAM_FUNC)
       015AC 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   555 015AD 11C1 C        	CALL	INIT_DAM_FUNC
   556            C      M 	PAGE	#(VPMSG_REALDEL)
       015AE 1E83     1     PAGE ( VPMSG_REALDEL / 1024 ),
   557 015AF 1227 C        	CALL	VPMSG_REALDEL
   558            C      M 	PAGE	#(GC_CHK)
       015B0 1E82     1     PAGE ( GC_CHK / 1024 ),
   559 015B1 113F C        	CALL	GC_CHK
   560            C      M 	PAGE	#($)	
       015B2 1E85     1     PAGE ( $ / 1024 ),
   561            C        	
   562 015B3 17DB C        	JMP	RMT_3_EXIT_VPEND
   563            C        ;---------------------------------------
   564 015B4      C        RMT_1_1_DTMF:
   565            C        
   566 015B4 0429 C        	MOV	A,B1_DTMF_VAL
   567 015B5 1D03 C        	SUB	A,@NUM_JIN
   568            C      M 	JPZ	RMT_1_1_DTMF_JIN
       015B6 0C83     1     JBC  _STATUS , Z 
       015B7 15FD     1     JMP  RMT_1_1_DTMF_JIN ,
   569            C        
   570 015B8 0429 C        	MOV	A,B1_DTMF_VAL
   571 015B9 1D17 C        	SUB	A,@NUM_7
   572            C      M 	JPNC	RMT_FUNC_END	;>7
       015BA 0E03     1     JBS  _STATUS , C 
       015BB 1411     1     JMP  RMT_FUNC_END ,
   573            C        ;-B1_DTMF_VAL ==> 0..7	
   574 015BC 0429 C        	MOV	A,B1_DTMF_VAL
   575 015BD 1A07 C        	AND	A,@0X07
   576            C      M 	MTBL
       015BE 0020     1     TBL 
             15BE     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   577 015BF 1411 C        	JMP	RMT_FUNC_END	;0-reserved
   578 015C0 15C7 C        	JMP	RMT_1_1_DTMF_1	;Last one
   579 015C1 15D8 C        	JMP	RMT_1_1_DTMF_2	;pause/replay
   580 015C2 15EF C        	JMP	RMT_1_1_DTMF_3	;next
   581 015C3 1411 C        	JMP	RMT_FUNC_END	;4-reserved
   582 015C4 1411 C        	JMP	RMT_FUNC_END	;5-reserved
   583 015C5 16BD C        	JMP	RMT_1_1_DTMF_6	;stop
   584 015C6 15F1 C        	JMP	RMT_1_1_DTMF_7	;Erase the playing message
   585            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   586            C        ;---------------------------------------
   587 015C7      C        RMT_1_1_DTMF_1:
   588            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       015C7 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       015C8 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       015C9 1E85     2     PAGE ( $ / 1024 ),
   589            C        
   590            C      M 	JPB	B1_PRO_VAR,3,RMT_1_1_DTMF_1_DOLAST
       015CA 0CE1     1     JBC  B1_PRO_VAR , 3 
       015CB 15D2     1     JMP  RMT_1_1_DTMF_1_DOLAST ,
   591 015CC 0AE1 C        	BS	B1_PRO_VAR,3	;Set repeat-flag
   592            C        	
   593 015CD 1810 C        	MOV	A,@CTMR1S
   594            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       015CE 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       015CF 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       015D0 1E85     2     PAGE ( $ / 1024 ),
   595 015D1      C        RMT_1_1_DTMF_1_REPEAT:
   596 015D1 1636 C        	JMP	RMT_1_1_IDOK
   597 015D2      C        RMT_1_1_DTMF_1_DOLAST:
   598 015D2 0432 C        	MOV	A,B1_MSG_ID
   599 015D3 1D01 C        	SUB	A,@1
   600            C      M 	JPC	RMT_1_1_DTMF_1_REPEAT
       015D4 0C03     1     JBC  _STATUS , C 
       015D5 15D1     1     JMP  RMT_1_1_DTMF_1_REPEAT ,
   601            C        	
   602 015D6 01F2 C        	DEC	B1_MSG_ID
   603 015D7 15D1 C        	JMP	RMT_1_1_DTMF_1_REPEAT
   604            C        ;---------------------------------------
   605 015D8      C        RMT_1_1_DTMF_2:
   606 015D8 00E2 C        	CLR	B1_PRO_VAR1
   607            C        	
   608            C      M 	PAGE	#(IIC)
       015D9 1E83     1     PAGE ( IIC / 1024 ),
   609 015DA 13EC C        	CALL	GET_COMMAND
   610            C      M 	PAGE	#($)
       015DB 1E85     1     PAGE ( $ / 1024 ),
   611            C      M 	XOR	TEMP1,@0x01		;Pause/restart
       015DC 1801     1     MOV A,@( 1 )
       015DD 0356     1     XOR  TEMP1 ,A
   612            C        
   613 015DE 0416 C        	MOV	A,TEMP1
   614 015DF 1AF0 C        	AND	A,@0XF0
   615 015E0 1D20 C        	SUB	A,@0X20
   616            C      M 	JPZ	RMT_1_1_DTMF_DOPAUSE
       015E1 0C83     1     JBC  _STATUS , Z 
       015E2 15E8     1     JMP  RMT_1_1_DTMF_DOPAUSE ,
   617            C        ;---Not 0x2000
   618 015E3 0416 C        	MOV	A,TEMP1
   619 015E4 1AF0 C        	AND	A,@0XF0
   620 015E5 1DB0 C        	SUB	A,@0XB0
   621            C      M 	JPNZ	RMT_FUNC_END	;Not 0xB000
       015E6 0E83     1     JBS  _STATUS , Z 
       015E7 1411     1     JMP  RMT_FUNC_END ,
   622            C        	
   623 015E8      C        RMT_1_1_DTMF_DOPAUSE:	
   624            C        ;---0X2000/0XB000	
   625 015E8 0BA1 C        	BS	B1_PRO_VAR,6
   626 015E9 0E16 C        	JBS	TEMP1,0
   627 015EA 09A1 C        	BC	B1_PRO_VAR,6
   628            C        	
   629            C      M 	PAGE	#(IIC)
       015EB 1E83     1     PAGE ( IIC / 1024 ),
   630 015EC 13CA C        	CALL	STOR_COMMAND	
   631            C      M 	PAGE	#($)
       015ED 1E85     1     PAGE ( $ / 1024 ),
   632            C        	
   633 015EE 1411 C        	JMP	RMT_FUNC_END
   634            C        ;---------------------------------------
   635 015EF      C        RMT_1_1_DTMF_3:	
   636 015EF 0000 C        	nop
   637 015F0 162F C        	JMP	RMT_1_1_VPEND
   638            C        ;---------------------------------------
   639 015F1      C        RMT_1_1_DTMF_7:
   640            C        	
   641            C      M 	PAGE	#(INIT_DAM_FUNC)
       015F1 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   642 015F2 11C1 C        	CALL	INIT_DAM_FUNC
   643            C        ;---Do delete
   644 015F3 0432 C        	MOV	A,B1_MSG_ID
   645            C      M 	PAGE	#(SET_DELMARK)
       015F4 1E83     1     PAGE ( SET_DELMARK / 1024 ),
   646 015F5 1235 C        	CALL	SET_DELMARK
   647            C        ;---Display	
   648            C      M 	PAGE	#(VOP_STOR_VP)
       015F6 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   649 015F7 182E C        	MOV	A,@VOPID_MESSAGE
   650 015F8 1064 C        	CALL	VOP_STOR_VP		;VP"message"
   651 015F9 1838 C        	MOV	A,@VOPID_DELETED
   652 015FA 1064 C        	CALL	VOP_STOR_VP		;VP"Deletee"	
   653            C      M 	PAGE	#($)
       015FB 1E85     1     PAGE ( $ / 1024 ),
   654            C        
   655 015FC 1411 C        	JMP	RMT_FUNC_END
   656            C        ;---------------------------------------
   657 015FD      C        RMT_1_1_DTMF_JIN:	;Exit the Remote
   658 015FD      C        RMT_1_1_BTONE:
   659            C        
   660            C      M 	PAGE	#(INIT_DAM_FUNC)
       015FD 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   661 015FE 11C1 C        	CALL	INIT_DAM_FUNC
   662            C      M 	PAGE	#(VPMSG_REALDEL)	
       015FF 1E83     1     PAGE ( VPMSG_REALDEL / 1024 ),
   663 01600 1227 C        	CALL	VPMSG_REALDEL
   664            C      M 	PAGE	#(GC_CHK)
       01601 1E82     1     PAGE ( GC_CHK / 1024 ),
   665 01602 113F C        	CALL	GC_CHK
   666            C      M 	PAGE	#($)
       01603 1E85     1     PAGE ( $ / 1024 ),
   667            C        
   668 01604 17DB C        	JMP	RMT_3_EXIT_VPEND
   669            C        ;---------------------------------------
   670 01605      C        RMT_1_1_TMR:
   671 01605 0562 C        	INC	B1_PRO_VAR1
   672            C        	
   673 01606 08E1 C        	BC	B1_PRO_VAR,3	;Clean repeat-flag
   674            C        	
   675            C      M 	JPB	B1_PRO_VAR,7,RMT_1_1_TMROUTPAUSE
       01607 0DE1     1     JBC  B1_PRO_VAR , 7 
       01608 1618     1     JMP  RMT_1_1_TMROUTPAUSE ,
   676            C      M 	JPB	B1_PRO_VAR,6,RMT_1_1_KEYPASUE
       01609 0DA1     1     JBC  B1_PRO_VAR , 6 
       0160A 1624     1     JMP  RMT_1_1_KEYPASUE ,
   677            C        	
   678 0160B 0422 C        	MOV	A,B1_PRO_VAR1
   679 0160C 1DA5 C        	SUB	A,@165
   680            C      M 	JPZ	RMT_1_1_TMROUT
       0160D 0C83     1     JBC  _STATUS , Z 
       0160E 1610     1     JMP  RMT_1_1_TMROUT ,
   681 0160F 1411 C        	JMP	RMT_FUNC_END
   682            C        	
   683            C        ;---------------------------------------
   684 01610      C        RMT_1_1_TMROUT:
   685            C      M 	PAGE	#(IIC)
       01610 1E83     1     PAGE ( IIC / 1024 ),
   686 01611 13EC C        	CALL	GET_COMMAND
   687 01612 0A16 C        	BS	TEMP1,0
   688 01613 13CA C        	CALL	STOR_COMMAND
   689            C      M 	PAGE	#($)	
       01614 1E85     1     PAGE ( $ / 1024 ),
   690            C        	
   691 01615 0BE1 C        	BS	B1_PRO_VAR,7	;TimerOut pause
   692 01616 00E2 C        	CLR	B1_PRO_VAR1
   693            C        
   694 01617 1411 C        	JMP	RMT_FUNC_END
   695            C        ;---------------------------------------
   696 01618      C        RMT_1_1_TMROUTPAUSE:		;In TimerOut pause(2.75min continue play message), if no new command receive in 10s then exit		
   697 01618 0422 C        	MOV	A,B1_PRO_VAR1
   698 01619 1D0A C        	SUB	A,@10
   699            C      M 	JPNZ	RMT_FUNC_END
       0161A 0E83     1     JBS  _STATUS , Z 
       0161B 1411     1     JMP  RMT_FUNC_END ,
   700            C        	
   701            C      M 	PAGE	#(INIT_DAM_FUNC)
       0161C 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   702 0161D 11C1 C        	CALL	INIT_DAM_FUNC
   703            C      M 	PAGE	#(VPMSG_REALDEL)
       0161E 1E83     1     PAGE ( VPMSG_REALDEL / 1024 ),
   704 0161F 1227 C        	CALL	VPMSG_REALDEL
   705            C      M 	PAGE	#(GC_CHK)
       01620 1E82     1     PAGE ( GC_CHK / 1024 ),
   706 01621 113F C        	CALL	GC_CHK
   707            C      M 	PAGE	#($)
       01622 1E85     1     PAGE ( $ / 1024 ),
   708            C        	
   709 01623 17DB C        	JMP	RMT_3_EXIT_VPEND
   710            C        ;---------------------------------------
   711 01624      C        RMT_1_1_KEYPASUE:		;In Key pause, if no new command receive in 30s then play continue	
   712 01624 0422 C        	MOV	A,B1_PRO_VAR1
   713 01625 1D1E C        	SUB	A,@30
   714            C      M 	JPNZ	RMT_FUNC_END
       01626 0E83     1     JBS  _STATUS , Z 
       01627 1411     1     JMP  RMT_FUNC_END ,
   715            C        	
   716            C      M 	PAGE	#(IIC)
       01628 1E83     1     PAGE ( IIC / 1024 ),
   717 01629 13EC C        	CALL	GET_COMMAND
   718 0162A 0816 C        	BC	TEMP1,0
   719 0162B 13CA C        	CALL	STOR_COMMAND
   720            C      M 	PAGE	#($)	
       0162C 1E85     1     PAGE ( $ / 1024 ),
   721            C        
   722 0162D 09A1 C        	BC	B1_PRO_VAR,6	;pause timerout,continue play
   723            C        
   724 0162E 1411 C        	JMP	RMT_FUNC_END
   725            C        ;---------------------------------------
   726 0162F      C        RMT_1_1_VPEND:
   727            C        	
   728 0162F 0431 C        	MOV	A,B1_MSG_N
   729 01630 0FD4 C        	JBS	DAM_FLAG,7
   730 01631 0430 C        	MOV	A,B1_MSG_T
   731 01632 0132 C        	SUB	A,B1_MSG_ID
   732            C      M 	JPZ	RMT_1_1_VPOVER_VPEND
       01633 0C83     1     JBC  _STATUS , Z 
       01634 167C     1     JMP  RMT_1_1_VPOVER_VPEND ,
   733            C        
   734 01635 0572 C        	INC	B1_MSG_ID		;next message
   735 01636      C        RMT_1_1_IDOK:			;找到下一条要播放的VP的ID号
   736            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       01636 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       01637 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       01638 1E85     2     PAGE ( $ / 1024 ),
   737            C        ;---------------------------------------
   738 01639      C        RMT_1_1_LOADVP:
   739 01639 182E C        	MOV	A,@VOPID_MESSAGE
   740            C      M 	LCALL	VOP_STOR_VP		;VP"message"
                      2  M  PAGE #( VOP_STOR_VP ),
       0163A 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       0163B 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       0163C 1E85     2     PAGE ( $ / 1024 ),
   741 0163D 0432 C        	MOV	A,B1_MSG_ID		;message_ID	;报出的
   742            C      M 	LCALL	ANNOUNCE_NUM
                      2  M  PAGE #( ANNOUNCE_NUM ),
       0163E 1E82     2     PAGE ( ANNOUNCE_NUM / 1024 ),
       0163F 11C8     1     CALL ( ANNOUNCE_NUM % 1024 ),
                      2  M  PAGE #( $ ),
       01640 1E85     2     PAGE ( $ / 1024 ),
   743 01641      C        RMT_1_1_LOADVP_1:
   744            C      M 	JPB	DAM_FLAG,7,RMT_1_1_LOADVPNEW
       01641 0DD4     1     JBC  DAM_FLAG , 7 
       01642 1662     1     JMP  RMT_1_1_LOADVPNEW ,
   745            C        
   746            C      M 	MOV	TEMP1,B1_MSG_ID
       01643 0432     1     MOV A, B1_MSG_ID 
       01644 0056     1     MOV  TEMP1 ,A
   747            C      M 	MOV	TEMP0,@ID_PLYA
       01645 1806     1     MOV A,@( ID_PLYA )
       01646 0055     1     MOV  TEMP0 ,A
   748            C      M 	LCALL	STOR_VP	
                      2  M  PAGE #( STOR_VP ),
       01647 1E83     2     PAGE ( STOR_VP / 1024 ),
       01648 1067     1     CALL ( STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       01649 1E85     2     PAGE ( $ / 1024 ),
   749            C        ;---Get the tag
   750            C      M 	PAGE	#(GET_MSGMIN)	
       0164A 1E83     1     PAGE ( GET_MSGMIN / 1024 ),
   751 0164B 12A3 C        	CALL	GET_MSGMIN
   752            C      M 	MOV	B1_MIN_REG,TEMP0
       0164C 0415     1     MOV A, TEMP0 
       0164D 0074     1     MOV  B1_MIN_REG ,A
   753 0164E 12A0 C        	CALL	GET_MSGHOUR
   754            C      M 	MOV	B1_HOUR_REG,TEMP0
       0164F 0415     1     MOV A, TEMP0 
       01650 0075     1     MOV  B1_HOUR_REG ,A
   755 01651 12A9 C        	CALL	GET_MSGDAY
   756            C      M 	MOV	B1_DAY_REG,TEMP0
       01652 0415     1     MOV A, TEMP0 
       01653 0076     1     MOV  B1_DAY_REG ,A
   757 01654 12A6 C        	CALL	GET_MSGMON
   758            C      M 	MOV	B1_MON_REG,TEMP0
       01655 0415     1     MOV A, TEMP0 
       01656 0077     1     MOV  B1_MON_REG ,A
   759 01657 129B C        	CALL	GET_MSGWEEK
   760            C      M 	MOV	B1_WEEK_REG,TEMP0
       01658 0415     1     MOV A, TEMP0 
       01659 0079     1     MOV  B1_WEEK_REG ,A
   761            C        
   762 0165A 0439 C        	MOV	A,B1_WEEK_REG
   763 0165B 12C8 C        	CALL	VP_TOWEEK
   764 0165C 0435 C        	MOV	A,B1_HOUR_REG
   765 0165D 12CE C        	CALL	VP_TOHOUR
   766 0165E 0434 C        	MOV	A,B1_MIN_REG
   767 0165F 12D2 C        	CALL	VP_TOMIN
   768            C      M 	PAGE	#($)
       01660 1E85     1     PAGE ( $ / 1024 ),
   769            C        ;---
   770 01661 1411 C        	JMP	RMT_FUNC_END
   771            C        ;---------------------------------------
   772 01662      C        RMT_1_1_LOADVPNEW:
   773            C      M 	MOV	TEMP1,B1_MSG_ID
       01662 0432     1     MOV A, B1_MSG_ID 
       01663 0056     1     MOV  TEMP1 ,A
   774            C      M 	MOV	TEMP0,@ID_PLYN
       01664 1805     1     MOV A,@( ID_PLYN )
       01665 0055     1     MOV  TEMP0 ,A
   775            C      M 	LCALL	STOR_VP
                      2  M  PAGE #( STOR_VP ),
       01666 1E83     2     PAGE ( STOR_VP / 1024 ),
       01667 1067     1     CALL ( STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       01668 1E85     2     PAGE ( $ / 1024 ),
   776            C        ;---Get the tag
   777            C      M 	PAGE	#(GET_MSGMINNEW)	
       01669 1E83     1     PAGE ( GET_MSGMINNEW / 1024 ),
   778 0166A 1292 C        	CALL	GET_MSGMINNEW
   779 0166B 0074 C        	MOV	B1_MIN_REG,A
   780 0166C 128F C        	CALL	GET_MSGHOURNEW
   781 0166D 0075 C        	MOV	B1_HOUR_REG,A
   782 0166E 1298 C        	CALL	GET_MSGDAYNEW
   783 0166F 0076 C        	MOV	B1_DAY_REG,A
   784 01670 1295 C        	CALL	GET_MSGMONNEW
   785 01671 0077 C        	MOV	B1_MON_REG,A
   786 01672 1289 C        	CALL	GET_MSGWEEKNEW
   787 01673 0079 C        	MOV	B1_WEEK_REG,A
   788            C        
   789 01674 0439 C        	MOV	A,B1_WEEK_REG
   790 01675 12C8 C        	CALL	VP_TOWEEK
   791 01676 0435 C        	MOV	A,B1_HOUR_REG
   792 01677 12CE C        	CALL	VP_TOHOUR
   793 01678 0434 C        	MOV	A,B1_MIN_REG
   794 01679 12D2 C        	CALL	VP_TOMIN
   795            C      M 	PAGE	#($)
       0167A 1E85     1     PAGE ( $ / 1024 ),
   796            C        ;---
   797 0167B 1411 C        	JMP	RMT_FUNC_END
   798            C        ;---------------------------------------
   799 0167C      C        RMT_1_1_VPOVER_VPEND:
   800            C      M 	MOV	B1_PRO_VAR,@0X21
       0167C 1821     1     MOV A,@( 33 )
       0167D 0061     1     MOV  B1_PRO_VAR ,A
   801            C        
   802            C      M 	PAGE	#(INIT_DAM_FUNC)
       0167E 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   803 0167F 11C1 C        	CALL	INIT_DAM_FUNC
   804            C      M 	PAGE	#(VPMSG_REALDEL)
       01680 1E83     1     PAGE ( VPMSG_REALDEL / 1024 ),
   805 01681 1227 C        	CALL	VPMSG_REALDEL	;0x6100
   806            C      M 	PAGE	#(TEL_GC_CHK)
       01682 1E82     1     PAGE ( TEL_GC_CHK / 1024 ),
   807 01683 10FC C        	CALL	TEL_GC_CHK
   808            C      M 	PAGE	#(VPMSG_CHK)
       01684 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   809 01685 1182 C        	CALL	VPMSG_CHK
   810            C        
   811 01686 1830 C        	MOV	A,@VOPID_ENDOFMESSAGE
   812            C      M 	PAGE	#(VOP_STOR_VP)
       01687 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   813 01688 1064 C        	CALL	VOP_STOR_VP
   814            C      M 	PAGE	#($)
       01689 1E85     1     PAGE ( $ / 1024 ),
   815            C        
   816 0168A 1411 C        	JMP	RMT_FUNC_END
   817            C        ;-------------------------------------------------------------------------------
   818 0168B      C        RMT_1_2:
   819            C        
   820 0168B 188A C        	MOV	A,@CREV_DTMF
   821 0168C 0120 C        	SUB	A,B1_MSG
   822            C      M 	JPZ	RMT_1_2_DTMF
       0168D 0C83     1     JBC  _STATUS , Z 
       0168E 16B4     1     JMP  RMT_1_2_DTMF ,
   823            C        
   824 0168F 1888 C        	MOV	A,@CMSG_BTONE
   825 01690 0120 C        	SUB	A,B1_MSG		;BTONE
   826            C      M 	JPZ	RMT_1_2_BTONE
       01691 0C83     1     JBC  _STATUS , Z 
       01692 16AB     1     JMP  RMT_1_2_BTONE ,
   827            C        	
   828 01693 1898 C        	MOV	A,@CMSG_TMR
   829 01694 0120 C        	SUB	A,B1_MSG
   830            C      M 	JPZ	RMT_1_2_TMR
       01695 0C83     1     JBC  _STATUS , Z 
       01696 16A9     1     JMP  RMT_1_2_TMR ,
   831            C        
   832 01697 1885 C        	MOV	A,@CVP_END
   833 01698 0120 C        	SUB	A,B1_MSG
   834            C      M 	JPZ	RMT_1_2_VPEND
       01699 0C83     1     JBC  _STATUS , Z 
       0169A 16A0     1     JMP  RMT_1_2_VPEND ,
   835            C        	
   836 0169B 188B C        	MOV	A,@CMSG_CPC
   837 0169C 0120 C        	SUB	A,B1_MSG		;接线后摘机(相当于CPC)
   838            C      M 	JPZ	RMT_1_2_CPC
       0169D 0C83     1     JBC  _STATUS , Z 
       0169E 1484     1     JMP  RMT_1_2_CPC ,
   839            C        
   840 0169F 1411 C        	JMP	RMT_FUNC_END
   841            C        ;---------------------------------------
   842 016A0      C        RMT_1_2_VPEND:
   843            C        
   844 016A0 00E2 C        	CLR	B1_PRO_VAR1
   845 016A1 00E1 C        	CLR	B1_PRO_VAR
   846            C        	
   847            C      M 	PAGE	#(INIT_DAM_FUNC)
       016A2 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   848 016A3 11C1 C        	CALL	INIT_DAM_FUNC
   849            C        	
   850 016A4 1890 C        	MOV	A,@CMSG_INIT
   851            C      M 	PAGE	#(STOR_MSG)
       016A5 1E8D     1     PAGE ( STOR_MSG / 1024 ),
   852 016A6 1308 C        	CALL	STOR_MSG
   853            C      M 	PAGE	#($)
       016A7 1E85     1     PAGE ( $ / 1024 ),
   854            C        
   855 016A8 1411 C        	JMP	RMT_FUNC_END
   856            C        ;---------------------------------------
   857 016A9      C        RMT_1_2_TMR:
   858 016A9 00E2 C        	CLR	B1_PRO_VAR1
   859            C        	
   860 016AA 1411 C        	JMP	RMT_FUNC_END
   861            C        ;---------------------------------------
   862 016AB      C        RMT_1_2_BTONE:
   863 016AB 00E2 C        	CLR	B1_PRO_VAR1
   864            C        	
   865            C      M 	PAGE	#(INIT_DAM_FUNC)
       016AC 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   866 016AD 11C1 C        	CALL	INIT_DAM_FUNC
   867            C      M 	PAGE	#(VPMSG_REALDEL)	
       016AE 1E83     1     PAGE ( VPMSG_REALDEL / 1024 ),
   868 016AF 1227 C        	CALL	VPMSG_REALDEL
   869            C      M 	PAGE	#(GC_CHK)
       016B0 1E82     1     PAGE ( GC_CHK / 1024 ),
   870 016B1 113F C        	CALL	GC_CHK
   871            C      M 	PAGE	#($)
       016B2 1E85     1     PAGE ( $ / 1024 ),
   872            C        
   873 016B3 17DB C        	JMP	RMT_3_EXIT_VPEND
   874            C        ;---------------------------------------
   875 016B4      C        RMT_1_2_DTMF:
   876 016B4 0429 C        	MOV	A,B1_DTMF_VAL
   877 016B5 1D06 C        	SUB	A,@6
   878            C      M 	JPZ	RMT_1_2_DTMF_6
       016B6 0C83     1     JBC  _STATUS , Z 
       016B7 16BE     1     JMP  RMT_1_2_DTMF_6 ,
   879            C        	
   880 016B8 0429 C        	MOV	A,B1_DTMF_VAL
   881 016B9 1D03 C        	SUB	A,@NUM_JIN
   882            C      M 	JPZ	RMT_1_2_DTMF_JIN
       016BA 0C83     1     JBC  _STATUS , Z 
       016BB 16BF     1     JMP  RMT_1_2_DTMF_JIN ,
   883            C        
   884 016BC 1411 C        	JMP	RMT_FUNC_END
   885            C        ;---------------------------------------
   886 016BD      C        RMT_1_0_DTMF_6:		;EndOfMessage
   887 016BD      C        RMT_1_1_DTMF_6:
   888            C        	
   889 016BD 167C C        	JMP	RMT_1_1_VPOVER_VPEND
   890            C        ;---------------------------------------
   891 016BE      C        RMT_1_2_DTMF_6:
   892 016BE 1411 C        	JMP	RMT_FUNC_END
   893            C        ;---------------------------------------
   894 016BF      C        RMT_1_2_DTMF_JIN:
   895            C        	
   896            C      M 	PAGE	#(CLR_TIMER)
       016BF 1E8D     1     PAGE ( CLR_TIMER / 1024 ),
   897 016C0 1358 C        	CALL	CLR_TIMER
   898            C      M 	PAGE	#(INIT_DAM_FUNC)
       016C1 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   899 016C2 11C1 C        	CALL	INIT_DAM_FUNC
   900            C      M 	PAGE	#(VPMSG_REALDEL)
       016C3 1E83     1     PAGE ( VPMSG_REALDEL / 1024 ),
   901 016C4 1227 C        	CALL	VPMSG_REALDEL
   902            C      M 	PAGE	#(GC_CHK)
       016C5 1E82     1     PAGE ( GC_CHK / 1024 ),
   903 016C6 113F C        	CALL	GC_CHK
   904            C      M 	PAGE	#($)
       016C7 1E85     1     PAGE ( $ / 1024 ),
   905            C        
   906 016C8 17DB C        	JMP	RMT_3_EXIT_VPEND	
   907            C        ;-------------------------------------------------------------------------------
   908 016C9      C        RMT_1_3:
   909            C        	
   910 016C9 1411 C        	JMP	RMT_FUNC_END
   911            C        ;-------------------------------------------------------------------------------
   912 016CA      C        RMT_2:			;OGM Mdoe
   913 016CA 0721 C        	SWAPA	B1_PRO_VAR
   914 016CB 1A03 C        	AND	A,@0X03
   915            C      M 	MTBL
       016CC 0020     1     TBL 
             16CC     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   916 016CD 16D1 C        	JMP	RMT_2_VOP	;Start VOP
   917 016CE 16FD C        	JMP	RMT_2_REC	;OGM record
   918 016CF 1781 C        	JMP	RMT_2_PLY	;OGM play
   919 016D0 17D5 C        	JMP	RMT_2_3		;exit
   920            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   921            C        ;-------------------------------------------------------------------------------
   922 016D1      C        RMT_2_VOP:		;VOP before OGM-record
   923 016D1 1885 C        	MOV	A,@CVP_END
   924 016D2 0120 C        	SUB	A,B1_MSG
   925            C      M 	JPZ	RMT_2_VOP_RECSTART
       016D3 0C83     1     JBC  _STATUS , Z 
       016D4 16DE     1     JMP  RMT_2_VOP_RECSTART ,
   926            C        
   927 016D5 188A C        	MOV	A,@CREV_DTMF
   928 016D6 0120 C        	SUB	A,B1_MSG
   929            C      M 	JPZ	RMT_2_VOP_DTMF
       016D7 0C83     1     JBC  _STATUS , Z 
       016D8 16F8     1     JMP  RMT_2_VOP_DTMF ,
   930            C        	
   931 016D9 188B C        	MOV	A,@CMSG_CPC
   932 016DA 0120 C        	SUB	A,B1_MSG		;接线后摘机(相当于CPC)
   933            C      M 	JPZ	RMT_2_VOP_CPC
       016DB 0C83     1     JBC  _STATUS , Z 
       016DC 1484     1     JMP  RMT_2_VOP_CPC ,
   934            C        	
   935 016DD 1411 C        	JMP	RMT_FUNC_END
   936            C        ;---------------------------------------
   937 016DE      C        RMT_2_VOP_RECSTART:
   938            C      M 	LCALL	BCVOX_INIT
                      2  M  PAGE #( BCVOX_INIT ),
       016DE 1E82     2     PAGE ( BCVOX_INIT / 1024 ),
       016DF 13B4     1     CALL ( BCVOX_INIT % 1024 ),
                      2  M  PAGE #( $ ),
       016E0 1E85     2     PAGE ( $ / 1024 ),
   939            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       016E1 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       016E2 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       016E3 1E85     2     PAGE ( $ / 1024 ),
   940            C      M 	LCALL	DAA_LIN_REC
                      2  M  PAGE #( DAA_LIN_REC ),
       016E4 1E83     2     PAGE ( DAA_LIN_REC / 1024 ),
       016E5 11E3     1     CALL ( DAA_LIN_REC % 1024 ),
                      2  M  PAGE #( $ ),
       016E6 1E85     2     PAGE ( $ / 1024 ),
   941            C        
   942            C      M 	MOV	B1_PRO_VAR,@0X12
       016E7 1812     1     MOV A,@( 18 )
       016E8 0061     1     MOV  B1_PRO_VAR ,A
   943            C        
   944 016E9 00E2 C        	CLR	B1_PRO_VAR1
   945 016EA 1810 C        	MOV	A,@CTMR1S
   946            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       016EB 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       016EC 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       016ED 1E85     2     PAGE ( $ / 1024 ),
   947            C        	
   948 016EE 1801 C        	MOV	A,@COGM1
   949 016EF 0CD4 C        	JBC	DAM_FLAG,3
   950 016F0 1802 C        	MOV	A,@COGM2
   951            C      M 	LCALL	OGM_STATUS
                      2  M  PAGE #( OGM_STATUS ),
       016F1 1E82     2     PAGE ( OGM_STATUS / 1024 ),
       016F2 1169     1     CALL ( OGM_STATUS % 1024 ),
                      2  M  PAGE #( $ ),
       016F3 1E85     2     PAGE ( $ / 1024 ),
   952            C        
   953            C      M 	LCALL	RECORD_START
                      2  M  PAGE #( RECORD_START ),
       016F4 1E82     2     PAGE ( RECORD_START / 1024 ),
       016F5 1041     1     CALL ( RECORD_START % 1024 ),
                      2  M  PAGE #( $ ),
       016F6 1E85     2     PAGE ( $ / 1024 ),
   954            C        
   955 016F7 1411 C        	JMP	RMT_FUNC_END
   956            C        ;---------------------------------------
   957 016F8      C        RMT_2_VOP_DTMF:
   958 016F8 0429 C        	MOV	A,B1_DTMF_VAL	
   959 016F9 1D03 C        	SUB	A,@NUM_JIN
   960            C      M 	JPZ	RMT_3_EXIT_VPEND	;#
       016FA 0C83     1     JBC  _STATUS , Z 
       016FB 17DB     1     JMP  RMT_3_EXIT_VPEND ,
   961            C        	
   962 016FC 1411 C        	JMP	RMT_FUNC_END
   963            C        ;-------------------------------------------------------------------------------
   964 016FD      C        RMT_2_REC:		;Record OGM
   965            C        
   966 016FD 188A C        	MOV	A,@CREV_DTMF
   967 016FE 0120 C        	SUB	A,B1_MSG
   968            C      M 	JPZ	RMT_2_REC_DTMF
       016FF 0C83     1     JBC  _STATUS , Z 
       01700 1749     1     JMP  RMT_2_REC_DTMF ,
   969            C        
   970 01701 1889 C        	MOV	A,@CMSG_CTONE
   971 01702 0120 C        	SUB	A,B1_MSG		;CTONE
   972            C      M 	JPZ	RMT_2_REC_CTONE
       01703 0C83     1     JBC  _STATUS , Z 
       01704 1780     1     JMP  RMT_2_REC_CTONE ,
   973            C        
   974 01705 1888 C        	MOV	A,@CMSG_BTONE
   975 01706 0120 C        	SUB	A,B1_MSG		;BTONE
   976            C      M 	JPZ	RMT_2_REC_BTONE
       01707 0C83     1     JBC  _STATUS , Z 
       01708 1780     1     JMP  RMT_2_REC_BTONE ,
   977            C        	
   978 01709 1898 C        	MOV	A,@CMSG_TMR
   979 0170A 0120 C        	SUB	A,B1_MSG
   980            C      M 	JPZ	RMT_2_REC_TMR
       0170B 0C83     1     JBC  _STATUS , Z 
       0170C 171C     1     JMP  RMT_2_REC_TMR ,
   981            C        	
   982 0170D 188B C        	MOV	A,@CMSG_CPC
   983 0170E 0120 C        	SUB	A,B1_MSG		;接线后摘机(相当于CPC)
   984            C      M 	JPZ	RMT_2_REC_CPC
       0170F 0C83     1     JBC  _STATUS , Z 
       01710 1712     1     JMP  RMT_2_REC_CPC ,
   985            C        		
   986 01711 1411 C        	JMP	RMT_FUNC_END
   987            C        ;---------------------------------------
   988 01712      C        RMT_2_REC_CPC:
   989 01712 0422 C        	MOV	A,B1_PRO_VAR1
   990 01713 1D02 C        	SUB	A,@2
   991            C      M 	JPNC	RMT_2_REC_CPC_RECOK
       01714 0E03     1     JBS  _STATUS , C 
       01715 1718     1     JMP  RMT_2_REC_CPC_RECOK ,
   992            C        
   993            C      M 	PAGE	#(REC_GIVEUP)
       01716 1E83     1     PAGE ( REC_GIVEUP / 1024 ),
   994 01717 127D C        	CALL	REC_GIVEUP
   995 01718      C        RMT_2_REC_CPC_RECOK:	
   996            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       01718 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       01719 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       0171A 1E85     2     PAGE ( $ / 1024 ),
   997            C        
   998 0171B 17DB C        	JMP	RMT_3_EXIT_VPEND
   999            C        ;---------------------------------------
  1000 0171C      C        RMT_2_REC_TMR:
  1001 0171C 0562 C        	INC	B1_PRO_VAR1
  1002            C        	
  1003 0171D 0422 C        	MOV	A,B1_PRO_VAR1
  1004 0171E 1D3C C        	SUB	A,@60
  1005            C      M 	JPNZ	RMT_FUNC_END
       0171F 0E83     1     JBS  _STATUS , Z 
       01720 1411     1     JMP  RMT_FUNC_END ,
  1006            C        ;---Over 60s
  1007 01721      C        RMT_2_START_OGMPLY:
  1008            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       01721 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       01722 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       01723 1E85     2     PAGE ( $ / 1024 ),
  1009            C      M 	LCALL	DAA_LIN_SPK
                      2  M  PAGE #( DAA_LIN_SPK ),
       01724 1E83     2     PAGE ( DAA_LIN_SPK / 1024 ),
       01725 11E8     1     CALL ( DAA_LIN_SPK % 1024 ),
                      2  M  PAGE #( $ ),
       01726 1E85     2     PAGE ( $ / 1024 ),
  1010            C        
  1011            C      M 	MOV	B1_PRO_VAR,@0X22
       01727 1822     1     MOV A,@( 34 )
       01728 0061     1     MOV  B1_PRO_VAR ,A
  1012            C        	
  1013            C      M 	LCALL	BEEP
                      2  M  PAGE #( BEEP ),
       01729 1E83     2     PAGE ( BEEP / 1024 ),
       0172A 1085     1     CALL ( BEEP % 1024 ),
                      2  M  PAGE #( $ ),
       0172B 1E85     2     PAGE ( $ / 1024 ),
  1014            C        	
  1015 0172C 1801 C        	MOV	A,@COGM1
  1016 0172D 0CD4 C        	JBC	DAM_FLAG,3
  1017 0172E 1802 C        	MOV	A,@COGM2
  1018            C        
  1019            C      M 	LCALL	OGM_STATUS
                      2  M  PAGE #( OGM_STATUS ),
       0172F 1E82     2     PAGE ( OGM_STATUS / 1024 ),
       01730 1169     1     CALL ( OGM_STATUS % 1024 ),
                      2  M  PAGE #( $ ),
       01731 1E85     2     PAGE ( $ / 1024 ),
  1020 01732 1900 C        	OR	A,@0
  1021            C      M 	JPZ	RMT_2_START_OGMPLY_DEFAULT
       01733 0C83     1     JBC  _STATUS , Z 
       01734 173F     1     JMP  RMT_2_START_OGMPLY_DEFAULT ,
  1022 01735 0056 C        	MOV	TEMP1,A
  1023            C      M 	MOV	TEMP0,@ID_PLYA
       01736 1806     1     MOV A,@( ID_PLYA )
       01737 0055     1     MOV  TEMP0 ,A
  1024            C      M 	LCALL	STOR_VP	
                      2  M  PAGE #( STOR_VP ),
       01738 1E83     2     PAGE ( STOR_VP / 1024 ),
       01739 1067     1     CALL ( STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       0173A 1E85     2     PAGE ( $ / 1024 ),
  1025            C        
  1026            C      M 	LCALL	BEEP	
                      2  M  PAGE #( BEEP ),
       0173B 1E83     2     PAGE ( BEEP / 1024 ),
       0173C 1085     1     CALL ( BEEP % 1024 ),
                      2  M  PAGE #( $ ),
       0173D 1E85     2     PAGE ( $ / 1024 ),
  1027            C        
  1028 0173E 1411 C        	JMP	RMT_FUNC_END
  1029            C        ;-------------------
  1030 0173F      C        RMT_2_START_OGMPLY_DEFAULT:
  1031            C        	
  1032 0173F 1829 C        	MOV	A,@VOPID_DEFOGM1
  1033 01740 0CD4 C        	JBC	DAM_FLAG,3
  1034 01741 182A C        	MOV	A,@VOPID_DEFOGM2
  1035            C      M 	LCALL	VOP_STOR_VP	
                      2  M  PAGE #( VOP_STOR_VP ),
       01742 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       01743 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       01744 1E85     2     PAGE ( $ / 1024 ),
  1036            C      M 	LCALL	BEEP
                      2  M  PAGE #( BEEP ),
       01745 1E83     2     PAGE ( BEEP / 1024 ),
       01746 1085     1     CALL ( BEEP % 1024 ),
                      2  M  PAGE #( $ ),
       01747 1E85     2     PAGE ( $ / 1024 ),
  1037            C        	
  1038 01748 1411 C        	JMP	RMT_FUNC_END
  1039            C        ;---------------------------------------
  1040 01749      C        RMT_2_REC_DTMF:
  1041 01749 0429 C        	MOV	A,B1_DTMF_VAL
  1042 0174A 1D06 C        	SUB	A,@6
  1043            C      M 	JPZ	RMT_2_REC_DTMF_6
       0174B 0C83     1     JBC  _STATUS , Z 
       0174C 1752     1     JMP  RMT_2_REC_DTMF_6 ,
  1044            C        	
  1045 0174D 0429 C        	MOV	A,B1_DTMF_VAL
  1046 0174E 1D03 C        	SUB	A,@NUM_JIN
  1047            C      M 	JPZ	RMT_2_REC_DTMF_JIN
       0174F 0C83     1     JBC  _STATUS , Z 
       01750 1772     1     JMP  RMT_2_REC_DTMF_JIN ,
  1048            C        	
  1049 01751 1411 C        	JMP	RMT_FUNC_END
  1050            C        ;---------------------------------------	
  1051 01752      C        RMT_2_REC_DTMF_6:
  1052 01752 0422 C        	MOV	A,B1_PRO_VAR1
  1053 01753 1D03 C        	SUB	A,@3
  1054            C      M 	JPNC	RMT_2_REC_DTMF_6_SUCC
       01754 0E03     1     JBS  _STATUS , C 
       01755 175C     1     JMP  RMT_2_REC_DTMF_6_SUCC ,
  1055            C        ;---Less than 3s, give up the message
  1056            C      M 	LCALL	REC_GIVEUP
                      2  M  PAGE #( REC_GIVEUP ),
       01756 1E83     2     PAGE ( REC_GIVEUP / 1024 ),
       01757 127D     1     CALL ( REC_GIVEUP % 1024 ),
                      2  M  PAGE #( $ ),
       01758 1E85     2     PAGE ( $ / 1024 ),
  1057            C      M 	LCALL	GC_CHK
                      2  M  PAGE #( GC_CHK ),
       01759 1E82     2     PAGE ( GC_CHK / 1024 ),
       0175A 113F     1     CALL ( GC_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0175B 1E85     2     PAGE ( $ / 1024 ),
  1058            C        	;JMP	RMT_FUNC_END
  1059 0175C      C        RMT_2_REC_DTMF_6_SUCC:
  1060            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       0175C 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       0175D 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       0175E 1E85     2     PAGE ( $ / 1024 ),
  1061 0175F      C        RMT_2_DELOLD:
  1062 0175F 1801 C        	MOV	A,@COGM1
  1063 01760 0CD4 C        	JBC	DAM_FLAG,3
  1064 01761 1802 C        	MOV	A,@COGM2
  1065            C        
  1066            C      M 	LCALL	OGM_STATUS
                      2  M  PAGE #( OGM_STATUS ),
       01762 1E82     2     PAGE ( OGM_STATUS / 1024 ),
       01763 1169     1     CALL ( OGM_STATUS % 1024 ),
                      2  M  PAGE #( $ ),
       01764 1E85     2     PAGE ( $ / 1024 ),
  1067 01765 0415 C        	MOV	A,TEMP0
  1068 01766 1D01 C        	SUB	A,@1
  1069            C      M 	JPC	RMT_2_DELOLD_END	;Less than 2
       01767 0C03     1     JBC  _STATUS , C 
       01768 176E     1     JMP  RMT_2_DELOLD_END ,
  1070            C        
  1071 01769 1801 C        	MOV	A,@1			;delete the oldest one
  1072            C      M 	LCALL	VPMSG_DEL
                      2  M  PAGE #( VPMSG_DEL ),
       0176A 1E83     2     PAGE ( VPMSG_DEL / 1024 ),
       0176B 1222     1     CALL ( VPMSG_DEL % 1024 ),
                      2  M  PAGE #( $ ),
       0176C 1E85     2     PAGE ( $ / 1024 ),
  1073 0176D 175F C        	JMP	RMT_2_DELOLD
  1074 0176E      C        RMT_2_DELOLD_END:
  1075            C      M 	LCALL	GC_CHK
                      2  M  PAGE #( GC_CHK ),
       0176E 1E82     2     PAGE ( GC_CHK / 1024 ),
       0176F 113F     1     CALL ( GC_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01770 1E85     2     PAGE ( $ / 1024 ),
  1076            C        
  1077 01771 1721 C        	JMP	RMT_2_START_OGMPLY
  1078            C        ;---------------------------------------
  1079 01772      C        RMT_2_REC_DTMF_JIN:	;"#" exit
  1080 01772 0422 C        	MOV	A,B1_PRO_VAR1
  1081 01773 1D03 C        	SUB	A,@3
  1082            C      M 	JPNC	RMT_2_REC_DTMF_JIN_SUCC
       01774 0E03     1     JBS  _STATUS , C 
       01775 177C     1     JMP  RMT_2_REC_DTMF_JIN_SUCC ,
  1083            C        ;---Less than 3s, give up the message
  1084            C      M 	LCALL	REC_GIVEUP
                      2  M  PAGE #( REC_GIVEUP ),
       01776 1E83     2     PAGE ( REC_GIVEUP / 1024 ),
       01777 127D     1     CALL ( REC_GIVEUP % 1024 ),
                      2  M  PAGE #( $ ),
       01778 1E85     2     PAGE ( $ / 1024 ),
  1085            C      M 	LCALL	GC_CHK
                      2  M  PAGE #( GC_CHK ),
       01779 1E82     2     PAGE ( GC_CHK / 1024 ),
       0177A 113F     1     CALL ( GC_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0177B 1E85     2     PAGE ( $ / 1024 ),
  1086 0177C      C        RMT_2_REC_DTMF_JIN_SUCC:
  1087            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       0177C 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       0177D 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       0177E 1E85     2     PAGE ( $ / 1024 ),
  1088            C        
  1089 0177F 17DB C        	JMP	RMT_3_EXIT_VPEND
  1090            C        ;---------------------------------------
  1091 01780      C        RMT_2_REC_CTONE:
  1092 01780      C        RMT_2_REC_BTONE:
  1093 01780 1772 C        	JMP	RMT_2_REC_DTMF_JIN
  1094            C        ;-------------------------------------------------------------------------------
  1095 01781      C        RMT_2_PLY:		;Play OGM
  1096 01781 188A C        	MOV	A,@CREV_DTMF
  1097 01782 0120 C        	SUB	A,B1_MSG
  1098            C      M 	JPZ	RMT_2_PLY_DTMF
       01783 0C83     1     JBC  _STATUS , Z 
       01784 1798     1     JMP  RMT_2_PLY_DTMF ,
  1099            C        
  1100 01785 1888 C        	MOV	A,@CMSG_BTONE
  1101 01786 0120 C        	SUB	A,B1_MSG		;BTONE
  1102            C      M 	JPZ	RMT_2_PLY_BTONE
       01787 0C83     1     JBC  _STATUS , Z 
       01788 1796     1     JMP  RMT_2_PLY_BTONE ,
  1103            C        	
  1104 01789 1898 C        	MOV	A,@CMSG_TMR
  1105 0178A 0120 C        	SUB	A,B1_MSG
  1106            C      M 	JPZ	RMT_2_PLY_TMR
       0178B 0C83     1     JBC  _STATUS , Z 
       0178C 1797     1     JMP  RMT_2_PLY_TMR ,
  1107            C        
  1108 0178D 1885 C        	MOV	A,@CVP_END
  1109 0178E 0120 C        	SUB	A,B1_MSG
  1110            C      M 	JPZ	RMT_2_PLY_VPEND
       0178F 0C83     1     JBC  _STATUS , Z 
       01790 17CC     1     JMP  RMT_2_PLY_VPEND ,
  1111            C        
  1112 01791 188B C        	MOV	A,@CMSG_CPC
  1113 01792 0120 C        	SUB	A,B1_MSG		;接线后摘机(相当于CPC)
  1114            C      M 	JPZ	RMT_2_PLY_CPC
       01793 0C83     1     JBC  _STATUS , Z 
       01794 1484     1     JMP  RMT_2_PLY_CPC ,
  1115            C        		
  1116 01795 1411 C        	JMP	RMT_FUNC_END
  1117            C        ;---------------------------------------
  1118 01796      C        RMT_2_PLY_BTONE:
  1119 01796 17DB C        	JMP	RMT_3_EXIT_VPEND	;Exit directly
  1120            C        ;---------------------------------------
  1121 01797      C        RMT_2_PLY_TMR:
  1122 01797 1411 C        	JMP	RMT_FUNC_END
  1123            C        ;---------------------------------------
  1124 01798      C        RMT_2_PLY_DTMF:
  1125            C        
  1126 01798 0429 C        	MOV	A,B1_DTMF_VAL
  1127 01799 1D06 C        	SUB	A,@6
  1128            C      M 	JPZ	RMT_2_PLY_DTMF_6
       0179A 0C83     1     JBC  _STATUS , Z 
       0179B 17A5     1     JMP  RMT_2_PLY_DTMF_6 ,
  1129            C        	
  1130 0179C 0429 C        	MOV	A,B1_DTMF_VAL
  1131 0179D 1D07 C        	SUB	A,@7
  1132            C      M 	JPZ	RMT_2_PLY_DTMF_7
       0179E 0C83     1     JBC  _STATUS , Z 
       0179F 17B5     1     JMP  RMT_2_PLY_DTMF_7 ,
  1133            C        	
  1134 017A0 0429 C        	MOV	A,B1_DTMF_VAL
  1135 017A1 1D03 C        	SUB	A,@NUM_JIN
  1136            C      M 	JPZ	RMT_2_PLY_DTMF_JIN
       017A2 0C83     1     JBC  _STATUS , Z 
       017A3 17C8     1     JMP  RMT_2_PLY_DTMF_JIN ,
  1137            C        	
  1138 017A4 1411 C        	JMP	RMT_FUNC_END
  1139            C        ;---------------------------------------
  1140 017A5      C        RMT_2_PLY_DTMF_6:	;Stop playing OGM
  1141            C        
  1142            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       017A5 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       017A6 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       017A7 1E85     2     PAGE ( $ / 1024 ),
  1143            C      M 	LCALL	DAA_LIN_REC
                      2  M  PAGE #( DAA_LIN_REC ),
       017A8 1E83     2     PAGE ( DAA_LIN_REC / 1024 ),
       017A9 11E3     1     CALL ( DAA_LIN_REC % 1024 ),
                      2  M  PAGE #( $ ),
       017AA 1E85     2     PAGE ( $ / 1024 ),
  1144            C        
  1145 017AB 00E2 C        	CLR	B1_PRO_VAR1
  1146 017AC 1810 C        	MOV	A,@CTMR1S
  1147            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       017AD 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       017AE 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       017AF 1E85     2     PAGE ( $ / 1024 ),
  1148            C        	
  1149 017B0 00E1 C        	CLR	B1_PRO_VAR
  1150            C      M 	LCALL	LINE_START
                      2  M  PAGE #( LINE_START ),
       017B1 1E82     2     PAGE ( LINE_START / 1024 ),
       017B2 1038     1     CALL ( LINE_START % 1024 ),
                      2  M  PAGE #( $ ),
       017B3 1E85     2     PAGE ( $ / 1024 ),
  1151            C        	
  1152 017B4 1411 C        	JMP	RMT_FUNC_END
  1153            C        ;---------------------------------------
  1154 017B5      C        RMT_2_PLY_DTMF_7:	;Delete playing OGM
  1155            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       017B5 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       017B6 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       017B7 1E85     2     PAGE ( $ / 1024 ),
  1156 017B8      C        RMT_2_PLY_DELOGM:	
  1157 017B8 1801 C        	MOV	A,@COGM1
  1158 017B9 0CD4 C        	JBC	DAM_FLAG,3
  1159 017BA 1802 C        	MOV	A,@COGM2
  1160            C        
  1161            C      M 	LCALL	OGM_STATUS
                      2  M  PAGE #( OGM_STATUS ),
       017BB 1E82     2     PAGE ( OGM_STATUS / 1024 ),
       017BC 1169     1     CALL ( OGM_STATUS % 1024 ),
                      2  M  PAGE #( $ ),
       017BD 1E85     2     PAGE ( $ / 1024 ),
  1162 017BE 1900 C        	OR	A,@0
  1163            C      M 	JPNZ	RMT_2_PLY_DELOGM
       017BF 0E83     1     JBS  _STATUS , Z 
       017C0 17B8     1     JMP  RMT_2_PLY_DELOGM ,
  1164            C        	
  1165            C      M 	PAGE	#(VOP_STOR_VP)
       017C1 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
  1166 017C2 182E C        	MOV	A,@VOPID_MESSAGE
  1167 017C3 1064 C        	CALL	VOP_STOR_VP
  1168 017C4 1838 C        	MOV	A,@VOPID_DELETED
  1169 017C5 1064 C        	CALL	VOP_STOR_VP
  1170            C      M 	PAGE	#($)
       017C6 1E85     1     PAGE ( $ / 1024 ),
  1171            C        	
  1172 017C7 1411 C        	JMP	RMT_FUNC_END
  1173            C        ;---------------------------------------
  1174 017C8      C        RMT_2_PLY_DTMF_JIN:
  1175            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       017C8 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       017C9 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       017CA 1E85     2     PAGE ( $ / 1024 ),
  1176 017CB 17DB C        	JMP	RMT_3_EXIT_VPEND
  1177            C        ;---------------------------------------
  1178 017CC      C        RMT_2_PLY_VPEND:
  1179 017CC 00E1 C        	CLR	B1_PRO_VAR
  1180 017CD 00E2 C        	CLR	B1_PRO_VAR1
  1181            C        	
  1182            C      M 	PAGE	#(INIT_DAM_FUNC)
       017CE 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
  1183 017CF 11C1 C        	CALL	INIT_DAM_FUNC
  1184 017D0 1890 C        	MOV	A,@CMSG_INIT
  1185            C      M 	PAGE	#(STOR_MSG)
       017D1 1E8D     1     PAGE ( STOR_MSG / 1024 ),
  1186 017D2 1308 C        	CALL	STOR_MSG
  1187            C      M 	PAGE	#($)
       017D3 1E85     1     PAGE ( $ / 1024 ),
  1188            C        	
  1189 017D4 1411 C        	JMP	RMT_FUNC_END
  1190            C        ;---------------------------------------
  1191 017D5      C        RMT_2_3:
  1192 017D5 1411 C        	JMP	RMT_FUNC_END
  1193            C        ;-------------------------------------------------------------------------------
  1194 017D6      C        RMT_3:			;Exit Mode
  1195 017D6 1885 C        	MOV	A,@CVP_END
  1196 017D7 0120 C        	SUB	A,B1_MSG
  1197            C      M 	JPZ	RMT_3_EXIT_VPEND
       017D8 0C83     1     JBC  _STATUS , Z 
       017D9 17DB     1     JMP  RMT_3_EXIT_VPEND ,
  1198            C        	
  1199 017DA 1411 C        	JMP	RMT_FUNC_END
  1200            C        ;---------------------------------------
  1201 017DB      C        RMT_3_EXIT_VPEND:
  1202            C        	
  1203            C      M 	HF_HOOK_L		;On hook
       017DB 0908     1     BC  _P8 , 4 
  1204            C        
  1205            C      M 	PAGE	#(SET_DAM_AD0GAIN)
       017DC 1E83     1     PAGE ( SET_DAM_AD0GAIN / 1024 ),
  1206 017DD 1200 C        	CALL	SET_DAM_AD0GAIN
  1207            C      M 	PAGE	#(CLR_PRO_STACK)
       017DE 1E8D     1     PAGE ( CLR_PRO_STACK / 1024 ),
  1208 017DF 1352 C        	CALL	CLR_PRO_STACK
  1209 017E0 00E1 C        	CLR	B1_PRO_VAR
  1210            C        
  1211 017E1 1890 C        	MOV	A,@CMSG_INIT
  1212            C      M 	PAGE	#(STOR_MSG)
       017E2 1E8D     1     PAGE ( STOR_MSG / 1024 ),
  1213 017E3 1308 C        	CALL	STOR_MSG
  1214            C      M 	PAGE	#($)
       017E4 1E85     1     PAGE ( $ / 1024 ),
  1215            C        
  1216 017E5 1411 C        	JMP	RMT_FUNC_END
  1217            C        ;-------------------------------------------------------------------------------
  1218            C        
  1219            C        ;-------------------------------------------------------------------------------
   611                     ;-------------------------------------------------------------------------------
   612                     ;page6
   613                     INCLUDE		"f_cid.dt"
     1            C        ORG	(6<<10)
     2            C        ;-------------------------------------------------------------------------------
     3 01800      C        CID_FUNC:
     4            C      M 	BANK	1
       01800 0B84     1     BS  _RSR , 6 
       01801 09C4     1     BC  _RSR , 7 
     5            C        	
     6 01802 0421 C        	MOV	A,B1_PRO_VAR
     7 01803 1A03 C        	AND	A,@0X03
     8            C      M 	MTBL
       01804 0020     1     TBL 
             1804     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
     9 01805 140B C        	JMP	CID_FUNC_0	;0 - Enter
    10 01806 15A5 C        	JMP	CID_FUNC_1	;1 - Lookup
    11 01807 1409 C        	JMP	CID_FUNC_END	;2 
    12 01808 1409 C        	JMP	CID_FUNC_END	;3
    13            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    14            C        ;return
    15 01809      C        CID_FUNC_END:	
    16            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       01809 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       0180A 15AC     1     JMP ( MAIN_LOOP % 1024 ),
    17            C        ;-------------------------------------------------------------------------------
    18            C        ;	B1_PRO_VAR	bit(0,1) = the program status
    19            C        ;			bit2 = 
    20            C        ;			bit3 = 1/0 - dial/Cid
    21            C        ;			bit4 = 
    22            C        ;			bit5 = DelAll-flag
    23            C        ;			bit6 = DelCur-flag
    24            C        ;			bit7 = from receive NEW-CID
    25            C        ;
    26            C        ;-------------------------------------------------------------------------------
    27 0180B      C        CID_FUNC_0:
    28            C        	
    29 0180B 18A6 C        	MOV	A,@CLOOK_DIAL
    30 0180C 0120 C        	SUB	A,B1_MSG
    31            C      M 	JPZ	CID_FUNC_0_LOOKDIL	;lookup dialed-num
       0180D 0C83     1     JBC  _STATUS , Z 
       0180E 14C7     1     JMP  CID_FUNC_0_LOOKDIL ,
    32            C        
    33 0180F 18CE C        	MOV	A,@CLOOK_CID
    34 01810 0120 C        	SUB	A,B1_MSG
    35            C      M 	JPZ	CID_FUNC_0_LOOKCID	;lookup Cid-num
       01811 0C83     1     JBC  _STATUS , Z 
       01812 14B5     1     JMP  CID_FUNC_0_LOOKCID ,
    36            C        	
    37 01813 18CF C        	MOV	A,@CMSG_CID
    38 01814 0120 C        	SUB	A,B1_MSG
    39            C      M 	JPZ	CID_FUNC_0_STORCID
       01815 0C83     1     JBC  _STATUS , Z 
       01816 1418     1     JMP  CID_FUNC_0_STORCID ,
    40            C        
    41 01817 1409 C        	JMP	CID_FUNC_END
    42            C        ;---------------------------------------
    43 01818      C        CID_FUNC_0_STORCID:		;stor and then display the CID
    44            C      M 	RTC_DISP_DISABLE
       01818 0812     1     BC  SYS_FLAG , 0 
    45            C        ;---Copy to edit-zone first
    46            C      M 	MOV	BASE_ADDR,@0X21		;s-block and d-block
       01819 1821     1     MOV A,@( 33 )
       0181A 005F     1     MOV  BASE_ADDR ,A
    47            C      M 	MOV	OFFSET_S,@CIDTEL_FLAG	;source
       0181B 18C0     1     MOV A,@( CIDTEL_FLAG )
       0181C 005C     1     MOV  OFFSET_S ,A
    48            C      M 	MOV	OFFSET_D,@TEL_FLAG	;destination
       0181D 1860     1     MOV A,@( TEL_FLAG )
       0181E 005D     1     MOV  OFFSET_D ,A
    49            C      M 	MOV	COUNT,@55		;count
       0181F 1837     1     MOV A,@( 55 )
       01820 005E     1     MOV  COUNT ,A
    50            C      M 	PAGE	#(COPY_DATA)
       01821 1E82     1     PAGE ( COPY_DATA / 1024 ),
    51 01822 1085 C        	CALL	COPY_DATA
    52            C        ;---Clean the timer	
    53 01823 00E2 C        	CLR	B1_PRO_VAR1
    54            C      M 	PAGE	#(CLR_TIMER)
       01824 1E8D     1     PAGE ( CLR_TIMER / 1024 ),
    55 01825 1358 C        	CALL	CLR_TIMER
    56            C        ;---Check message-wait or not
    57            C      M 	BLOCK	1
       01826 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01827 000A     1     IOW  _IOCA ,
    58 01828 1860 C        	MOV	A,@TEL_FLAG
    59 01829 004C C        	MOV	_RC,A
    60 0182A 040D C        	MOV	A,_RD
    61 0182B 0055 C        	MOV	TEMP0,A
    62            C        	;JPZ	CID_FUNC_0_STORCID_NORMAL
    63 0182C 1D03 C        	SUB	A,@3
    64            C      M 	JPZ	CID_FUNC_0_STORCID_MSGWAIT
       0182D 0C83     1     JBC  _STATUS , Z 
       0182E 14B4     1     JMP  CID_FUNC_0_STORCID_MSGWAIT ,
    65 0182F 0415 C        	MOV	A,TEMP0
    66 01830 1D04 C        	SUB	A,@4
    67            C      M 	JPZ	CID_FUNC_0_STORCID_MSGWAIT
       01831 0C83     1     JBC  _STATUS , Z 
       01832 14B4     1     JMP  CID_FUNC_0_STORCID_MSGWAIT ,
    68            C        	
    69 01833      C        CID_FUNC_0_STORCID_NORMAL:
    70            C      M 	LCALL	COMP_ALLTELNUM
                      2  M  PAGE #( COMP_ALLTELNUM ),
       01833 1E8F     2     PAGE ( COMP_ALLTELNUM / 1024 ),
       01834 136C     1     CALL ( COMP_ALLTELNUM % 1024 ),
                      2  M  PAGE #( $ ),
       01835 1E86     2     PAGE ( $ / 1024 ),
    71 01836 1900 C        	OR	A,@0		;To verify Z-flag
    72            C      M 	JPZ	CID_FUNC_0_STORCID_COMPARED
       01837 0C83     1     JBC  _STATUS , Z 
       01838 1449     1     JMP  CID_FUNC_0_STORCID_COMPARED ,
    73            C        ;---The phonebook had been found(Same TEL-number),then covered the name only
    74 01839 18B3 C        	MOV	A,@(M123_BUF_START+NAME_FGOFFSET)
    75 0183A 004C C        	MOV	_RC,A
    76 0183B 040D C        	MOV	A,_RD
    77 0183C 0055 C        	MOV	TEMP0,A
    78 0183D 1863 C        	MOV	A,@(TEL_FLAG+NAME_FGOFFSET)
    79 0183E 004C C        	MOV	_RC,A
    80 0183F 0415 C        	MOV	A,TEMP0
    81 01840 004D C        	MOV	_RD,A					;length update
    82            C        
    83            C      M 	MOV	OFFSET_S,@(M123_BUF_START+NAME_OFFSET)	;source
       01841 18D8     1     MOV A,@(( M123_BUF_START + NAME_OFFSET ))
       01842 005C     1     MOV  OFFSET_S ,A
    84            C      M 	MOV	OFFSET_D,@(TEL_FLAG+NAME_OFFSET)	;destination
       01843 1888     1     MOV A,@(( TEL_FLAG + NAME_OFFSET ))
       01844 005D     1     MOV  OFFSET_D ,A
    85            C      M 	MOV	COUNT,@15				;count
       01845 180F     1     MOV A,@( 15 )
       01846 005E     1     MOV  COUNT ,A
    86            C      M 	PAGE	#(MOVE_DATA)
       01847 1E82     1     PAGE ( MOVE_DATA / 1024 ),
    87 01848 1056 C        	CALL	MOVE_DATA
    88 01849      C        CID_FUNC_0_STORCID_COMPARED:
    89            C        ;---Check the number of total CID--------------------------------------------------------
    90            C      M 	PAGE	#(INIT_DAM_FUNC)
       01849 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
    91 0184A 11C1 C        	CALL	INIT_DAM_FUNC
    92            C      M 	PAGE	#(SET_INITTEL0IDX)
       0184B 1E83     1     PAGE ( SET_INITTEL0IDX / 1024 ),
    93 0184C 1267 C        	CALL	SET_INITTEL0IDX
    94 0184D 180E C        	MOV	A,@CGROUP_MISSCID	;Set Cid-group
    95            C      M 	PAGE	#(SET_GROUP)
       0184E 1E83     1     PAGE ( SET_GROUP / 1024 ),
    96 0184F 1241 C        	CALL	SET_GROUP
    97            C        
    98 01850      C        CID_FUNC_0_STORCID_CHKTOTAL:	
    99            C      M 	LCALL	GET_TELT
                      2  M  PAGE #( GET_TELT ),
       01850 1E83     2     PAGE ( GET_TELT / 1024 ),
       01851 1246     1     CALL ( GET_TELT % 1024 ),
                      2  M  PAGE #( $ ),
       01852 1E86     2     PAGE ( $ / 1024 ),
   100 01853 0415 C        	MOV	A,TEMP0
   101 01854 1D62 C        	SUB	A,@(CMAX_MISSCID-1)
   102            C      M 	JPC	CID_FUNC_0_STORCID_DO
       01855 0C03     1     JBC  _STATUS , C 
       01856 145E     1     JMP  CID_FUNC_0_STORCID_DO ,
   103            C        ;---The number over (CMAX_MISSCID-1),delete the oldest one
   104 01857 1801 C        	MOV	A,@1
   105            C      M 	PAGE	#(DEL_TEL)
       01858 1E83     1     PAGE ( DEL_TEL / 1024 ),
   106 01859 124B C        	CALL	DEL_TEL
   107            C      M 	LCALL	TEL_GC_CHK
                      2  M  PAGE #( TEL_GC_CHK ),
       0185A 1E82     2     PAGE ( TEL_GC_CHK / 1024 ),
       0185B 10FC     1     CALL ( TEL_GC_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0185C 1E86     2     PAGE ( $ / 1024 ),
   108 0185D 1450 C        	JMP	CID_FUNC_0_STORCID_CHKTOTAL
   109 0185E      C        CID_FUNC_0_STORCID_DO:
   110            C        ;---write into flash
   111            C      M 	MOV	OFFSET_S,@DATA_ZONE_START		;start address
       0185E 1860     1     MOV A,@( DATA_ZONE_START )
       0185F 005C     1     MOV  OFFSET_S ,A
   112            C      M 	MOV	COUNT,@(DATA_ZONE_END-DATA_ZONE_START)	;length(55bytes)
       01860 183A     1     MOV A,@(( DATA_ZONE_END - DATA_ZONE_START ))
       01861 005E     1     MOV  COUNT ,A
   113 01862      C        CID_FUNC_0_STORCID_DOLOOP:
   114            C      M 	BLOCK	1
       01862 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01863 000A     1     IOW  _IOCA ,
   115            C        
   116            C      M 	MOV	_RC,OFFSET_S
       01864 041C     1     MOV A, OFFSET_S 
       01865 004C     1     MOV  _RC ,A
   117 01866 040D C        	MOV	A,_RD
   118            C      M 	LCALL	DAT_WRITE
                      2  M  PAGE #( DAT_WRITE ),
       01867 1E83     2     PAGE ( DAT_WRITE / 1024 ),
       01868 124F     1     CALL ( DAT_WRITE % 1024 ),
                      2  M  PAGE #( $ ),
       01869 1E86     2     PAGE ( $ / 1024 ),
   119            C        	
   120 0186A 055C C        	INC	OFFSET_S
   121            C        	
   122 0186B 01DE C        	DEC	COUNT
   123 0186C 041E C        	MOV	A,COUNT
   124            C      M 	JPNZ	CID_FUNC_0_STORCID_DOLOOP
       0186D 0E83     1     JBS  _STATUS , Z 
       0186E 1462     1     JMP  CID_FUNC_0_STORCID_DOLOOP ,
   125            C      M 	PAGE	#(DAT_WRITE_STOP)
       0186F 1E83     1     PAGE ( DAT_WRITE_STOP / 1024 ),
   126 01870 1253 C        	CALL	DAT_WRITE_STOP	
   127            C        ;---
   128            C      M 	PAGE	#(GET_TELT)
       01871 1E83     1     PAGE ( GET_TELT / 1024 ),
   129 01872 1246 C        	CALL	GET_TELT
   130 01873 0415 C        	MOV	A,TEMP0	
   131 01874 006E C        	MOV	B1_CID_T,A	;Total CID record
   132            C        
   133            C      M 	SET_NEWESTCID_FLAG	;the newest CID exist
       01875 0B12     1     BS  SYS_FLAG , 4 
   134            C        ;---------------------------------------
   135            C        ;---Display CID
   136            C      M 	BLOCK	1
       01876 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01877 000A     1     IOW  _IOCA ,
   137            C      M 	BANK	1
       01878 0B84     1     BS  _RSR , 6 
       01879 09C4     1     BC  _RSR , 7 
   138 0187A 1864 C        	MOV	A,@TIME_START
   139 0187B 004C C        	MOV	_RC,A
   140            C        
   141 0187C 040D C        	MOV	A,_RD
   142 0187D 0077 C        	MOV	B1_MON_REG,A	;Month
   143 0187E 054C C        	INC	_RC
   144            C        
   145 0187F 040D C        	MOV	A,_RD
   146 01880 0076 C        	MOV	B1_DAY_REG,A	;Day
   147 01881 054C C        	INC	_RC
   148            C        	
   149 01882 040D C        	MOV	A,_RD
   150 01883 0075 C        	MOV	B1_HOUR_REG,A	;Hour
   151 01884 054C C        	INC	_RC
   152            C        
   153 01885 040D C        	MOV	A,_RD
   154 01886 0074 C        	MOV	B1_MIN_REG,A	;Minute
   155 01887 054C C        	INC	_RC
   156            C        ;---
   157            C      M 	PAGE	#(VGA)
       01888 1E8C     1     PAGE ( VGA / 1024 ),
   158 01889 1115 C        	CALL	VGABLANKNUM1
   159 0188A 111E C        	CALL	VGABLANKNUM2
   160 0188B 1127 C        	CALL	VGABLANKCHAR	
   161            C        ;-the first icon
   162 0188C 1824 C        	MOV	A,@((1<<5)|(1<<2))	;":","/"
   163 0188D 1000 C        	CALL	VGASTAMP1
   164 0188E 180C C        	MOV	A,@((1<<3)|(1<<2))	;"CALL","NEW"
   165 0188F 1004 C        	CALL	VGASTAMP2
   166 01890 1097 C        	CALL	VGADRAWSTAMP	
   167            C        ;-first line date/time
   168 01891 12D6 C        	CALL	DISP_DATETIME
   169            C        ;-first line TEL-ID
   170 01892 042E C        	MOV	A,B1_CID_T
   171 01893 1374 C        	CALL	DISP_ID
   172            C        	;PAGE	#($)
   173            C        ;---Set DSP Date/Time	
   174            C      M 	LCALL	CALC_WEEK
                      2  M  PAGE #( CALC_WEEK ),
       01894 1E8D     2     PAGE ( CALC_WEEK / 1024 ),
       01895 137D     1     CALL ( CALC_WEEK % 1024 ),
                      2  M  PAGE #( $ ),
       01896 1E86     2     PAGE ( $ / 1024 ),
   175            C      M 	JPNC	CID_FUNC_0_STORCID_NUM
       01897 0E03     1     JBS  _STATUS , C 
       01898 14AA     1     JMP  CID_FUNC_0_STORCID_NUM ,
   176 01899 0079 C        	MOV	B1_WEEK_REG,A
   177            C        	
   178            C      M 	PAGE	#(SET_TIME)
       0189A 1E83     1     PAGE ( SET_TIME / 1024 ),
   179 0189B 0080 C        	CLRA
   180 0189C 12B8 C        	CALL	SET_SEC		;clear the second
   181 0189D 0438 C        	MOV	A,B1_YEAR_REG
   182 0189E 12BC C        	CALL	SET_YEAR
   183 0189F 0437 C        	MOV	A,B1_MON_REG
   184 018A0 12C0 C        	CALL	SET_MON
   185 018A1 0436 C        	MOV	A,B1_DAY_REG
   186 018A2 12C4 C        	CALL	SET_DAY
   187 018A3 0439 C        	MOV	A,B1_WEEK_REG
   188 018A4 12AC C        	CALL	SET_WEEK
   189 018A5 0435 C        	MOV	A,B1_HOUR_REG
   190 018A6 12B0 C        	CALL	SET_HOUR
   191 018A7 0434 C        	MOV	A,B1_MIN_REG
   192 018A8 12B4 C        	CALL	SET_MIN
   193            C      M 	PAGE	#($)
       018A9 1E86     1     PAGE ( $ / 1024 ),
   194            C        	
   195 018AA      C        CID_FUNC_0_STORCID_NUM:
   196            C        ;---号码在第二行显示
   197            C      M 	PAGE	#(DISP_TELNUM)
       018AA 1E8C     1     PAGE ( DISP_TELNUM / 1024 ),
   198 018AB 131A C        	CALL	DISP_TELNUM	;---号码在第二行显示
   199 018AC 1342 C        	CALL	DISP_TELNAME	;---姓名在第三行显示
   200            C        	;PAGE	#($)
   201            C        ;---
   202 018AD 1801 C        	MOV	A,@0X01
   203 018AE 0061 C        	MOV	B1_PRO_VAR,A
   204            C        
   205 018AF 1810 C        	MOV	A,@CTMR1S
   206            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       018B0 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       018B1 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       018B2 1E86     2     PAGE ( $ / 1024 ),
   207            C        	
   208 018B3 1409 C        	JMP	CID_FUNC_END
   209            C        ;---------------------------------------
   210 018B4      C        CID_FUNC_0_STORCID_MSGWAIT:
   211 018B4 169B C        	JMP	CID_1_MKEY_STP
   212            C        ;---------------------------------------
   213 018B5      C        CID_FUNC_0_LOOKCID:
   214 018B5 1801 C        	MOV	A,@0X01
   215 018B6 0061 C        	MOV	B1_PRO_VAR,A
   216            C        		
   217 018B7 180E C        	MOV	A,@CGROUP_MISSCID
   218            C      M 	PAGE	#(SET_GROUP)
       018B8 1E83     1     PAGE ( SET_GROUP / 1024 ),
   219 018B9 1241 C        	CALL	SET_GROUP
   220            C        
   221 018BA 00E2 C        	CLR	B1_PRO_VAR1
   222 018BB 1810 C        	MOV	A,@CTMR1S
   223            C      M 	PAGE	#(SET_TIMER)
       018BC 1E8D     1     PAGE ( SET_TIMER / 1024 ),
   224 018BD 1359 C        	CALL	SET_TIMER
   225            C        
   226            C      M 	PAGE	#(GET_TELT)
       018BE 1E83     1     PAGE ( GET_TELT / 1024 ),
   227 018BF 1246 C        	CALL	GET_TELT
   228            C      M 	PAGE	#($)
       018C0 1E86     1     PAGE ( $ / 1024 ),
   229 018C1 0415 C        	MOV	A,TEMP0	
   230 018C2 006E C        	MOV	B1_CID_T,A
   231 018C3 0072 C        	MOV	B1_MSG_ID,A		;Must load the data before jump because the TEL-flush need check data
   232            C      M 	JPZ	CID_FUNC_0_NOCID
       018C4 0C83     1     JBC  _STATUS , Z 
       018C5 1548     1     JMP  CID_FUNC_0_NOCID ,
   233            C        ;---
   234 018C6 160D C        	JMP	CID_1_LOOKUP
   235            C        ;-----------------------------
   236 018C7      C        CID_FUNC_0_LOOKDIL:
   237            C        ;---set Group	
   238 018C7 1810 C        	MOV	A,@GROUP_DIAL
   239            C      M 	PAGE	#(SET_GROUP)
       018C8 1E83     1     PAGE ( SET_GROUP / 1024 ),
   240 018C9 1241 C        	CALL	SET_GROUP
   241            C      M 	PAGE	#(GET_TELT)
       018CA 1E83     1     PAGE ( GET_TELT / 1024 ),
   242 018CB 1246 C        	CALL	GET_TELT
   243 018CC 0415 C        	MOV	A,TEMP0
   244 018CD 0072 C        	MOV	B1_MSG_ID,A
   245 018CE 006E C        	MOV	B1_CID_T,A		;Total tel record
   246            C        	
   247 018CF 00E2 C        	CLR	B1_PRO_VAR1
   248 018D0 1810 C        	MOV	A,@CTMR1S
   249            C      M 	PAGE	#(SET_TIMER)
       018D1 1E8D     1     PAGE ( SET_TIMER / 1024 ),
   250 018D2 1359 C        	CALL	SET_TIMER
   251            C      M 	PAGE	#($)
       018D3 1E86     1     PAGE ( $ / 1024 ),
   252 018D4 00E2 C        	CLR	B1_PRO_VAR1
   253            C        
   254            C      M 	MOV	B1_PRO_VAR,@0x09	;!!!bit3 dial
       018D5 1809     1     MOV A,@( 9 )
       018D6 0061     1     MOV  B1_PRO_VAR ,A
   255 018D7      C        CID_LOOK_DIAL:
   256 018D7 042E C        	MOV	A,B1_CID_T
   257            C      M 	JPZ	DISP_NOCALL		;
       018D8 0C83     1     JBC  _STATUS , Z 
       018D9 1548     1     JMP  DISP_NOCALL ,
   258            C        	
   259 018DA 0432 C        	MOV	A,B1_MSG_ID
   260            C      M 	JPZ	DISP_ENDLIST
       018DB 0C83     1     JBC  _STATUS , Z 
       018DC 1565     1     JMP  DISP_ENDLIST ,
   261            C        ;---
   262 018DD 0961 C        	BC	B1_PRO_VAR,5		;DelAll-flag
   263 018DE 09A1 C        	BC	B1_PRO_VAR,6		;DelCur-flag
   264            C        ;---读出数据	
   265            C      M 	MOV	OFFSET_D,@DATA_ZONE_START
       018DF 1860     1     MOV A,@( DATA_ZONE_START )
       018E0 005D     1     MOV  OFFSET_D ,A
   266 018E1      C        CID_READDIAL_LOOP:
   267 018E1 0432 C        	MOV	A,B1_MSG_ID
   268            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       018E2 1E83     2     PAGE ( DAT_READ / 1024 ),
       018E3 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       018E4 1E86     2     PAGE ( $ / 1024 ),
   269            C        	
   270            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       018E5 041D     1     MOV A, OFFSET_D 
       018E6 004C     1     MOV  _RC ,A
   271            C      M 	MOV	_RD,TEMP0	;the data
       018E7 0415     1     MOV A, TEMP0 
       018E8 004D     1     MOV  _RD ,A
   272            C        	
   273 018E9 055D C        	INC	OFFSET_D	;next address
   274            C        	
   275 018EA 0416 C        	MOV	A,TEMP1		;Error code
   276            C      M 	JPZ	CID_READDIAL_LOOP
       018EB 0C83     1     JBC  _STATUS , Z 
       018EC 14E1     1     JMP  CID_READDIAL_LOOP ,
   277            C      M 	PAGE	#(DAT_READ_STOP)
       018ED 1E83     1     PAGE ( DAT_READ_STOP / 1024 ),
   278 018EE 125B C        	CALL	DAT_READ_STOP
   279 018EF      C        DIAL_1_DIALDISP:
   280            C        ;---LCD	blank	
   281            C      M 	PAGE	#(VGA)
       018EF 1E8C     1     PAGE ( VGA / 1024 ),
   282 018F0 111E C        	CALL	VGABLANKNUM2
   283 018F1 1127 C        	CALL	VGABLANKCHAR
   284            C        ;-first line date/time
   285 018F2 18A2 C        	MOV	A,@(STYLE_RIGHT+STYLE_TOBCD)	;!!!
   286 018F3 1018 C        	CALL	VGANUM1
   287 018F4 0432 C        	MOV	A,B1_MSG_ID
   288 018F5 1018 C        	CALL	VGANUM1
   289 018F6 18FF C        	MOV	A,@(CH_END)
   290 018F7 1018 C        	CALL	VGANUM1
   291 018F8 109D C        	CALL	VGADRAWNUM1
   292            C      M 	PAGE	#($)
       018F9 1E86     1     PAGE ( $ / 1024 ),
   293 018FA      C        DIAL_1_DIALDISP_NUM:
   294            C        ;---号码在第二行显示
   295            C      M 	BLOCK	1
       018FA 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       018FB 000A     1     IOW  _IOCA ,
   296            C      M 	MOV	BASE_ADDR,@0X10		;base
       018FC 1810     1     MOV A,@( 16 )
       018FD 005F     1     MOV  BASE_ADDR ,A
   297            C      M 	MOV	OFFSET_S,@NUM_START	;source
       018FE 1868     1     MOV A,@( NUM_START )
       018FF 005C     1     MOV  OFFSET_S ,A
   298            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination
       01900 188D     1     MOV A,@( LCD_2NDLINE )
       01901 005D     1     MOV  OFFSET_D ,A
   299            C        	
   300            C      M 	MOV	_RC,@NUM_FLAG
       01902 1862     1     MOV A,@( NUM_FLAG )
       01903 004C     1     MOV  _RC ,A
   301 01904 040D C        	MOV	A,_RD			;count
   302 01905 1A3F C        	AND	A,@0X3F			;Can't bigger than 15
   303 01906 005E C        	MOV	COUNT,A
   304            C        ;---Adjust COUNT
   305 01907 041E C        	MOV	A,COUNT
   306 01908 1D0F C        	SUB	A,@LENGTH2NDL
   307            C      M 	JPC	DIAL_1_DIALDISP_NUM_2	;check length
       01909 0C03     1     JBC  _STATUS , C 
       0190A 150D     1     JMP  DIAL_1_DIALDISP_NUM_2 ,
   308            C        	
   309            C      M 	MOV	COUNT,@14
       0190B 180E     1     MOV A,@( 14 )
       0190C 005E     1     MOV  COUNT ,A
   310 0190D      C        DIAL_1_DIALDISP_NUM_2:
   311            C      M 	LCALL	COPY_DATA
                      2  M  PAGE #( COPY_DATA ),
       0190D 1E82     2     PAGE ( COPY_DATA / 1024 ),
       0190E 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       0190F 1E86     2     PAGE ( $ / 1024 ),
   312            C        	
   313            C      M 	MOV	_RC,@NUM_FLAG
       01910 1862     1     MOV A,@( NUM_FLAG )
       01911 004C     1     MOV  _RC ,A
   314 01912 040D C        	MOV	A,_RD			;count
   315 01913 1A3F C        	AND	A,@0X3F			;Can't bigger than 15
   316 01914 1D0F C        	SUB	A,@LENGTH2NDL
   317            C      M 	JPC	DIAL_1_DIALDISP_3
       01915 0C03     1     JBC  _STATUS , C 
       01916 151D     1     JMP  DIAL_1_DIALDISP_3 ,
   318            C        ;---more than 15,display it two steps,the step1 display 14-bytes end with "-",the step2 display the remained start with "-"	
   319            C      M 	BLOCK	0
       01917 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       01918 000A     1     IOW  _IOCA ,
   320            C      M 	MOV	_RC,@(LCD_2NDLINE+LENGTH2NDL-1)
       01919 189B     1     MOV A,@((( LCD_2NDLINE + LENGTH2NDL )- 1 ))
       0191A 004C     1     MOV  _RC ,A
   321            C      M 	MOV	_RD,@NUM_AMPERE
       0191B 180D     1     MOV A,@( NUM_AMPERE )
       0191C 004D     1     MOV  _RD ,A
   322            C        	
   323 0191D      C        DIAL_1_DIALDISP_3:
   324 0191D      C        DIAL_1_DIALDISP_NAME:
   325            C        ;---通话时间在第三行显示
   326            C      M 	BLOCK	1
       0191D 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       0191E 000A     1     IOW  _IOCA ,
   327 0191F 1898 C        	MOV	A,@PMIN_START
   328 01920 004C C        	MOV	_RC,A
   329 01921 040D C        	MOV	A,_RD
   330 01922 0074 C        	MOV	B1_MIN_REG,A
   331            C        
   332 01923 1899 C        	MOV	A,@PSEC_START
   333 01924 004C C        	MOV	_RC,A
   334 01925 040D C        	MOV	A,_RD
   335 01926 0073 C        	MOV	B1_SEC_REG,A
   336            C        
   337            C      M 	PAGE	#(VGA)
       01927 1E8C     1     PAGE ( VGA / 1024 ),
   338 01928 1883 C        	MOV	A,@(STYLE_CENTER)
   339 01929 1026 C        	CALL	VGACHAR
   340            C        	
   341 0192A 0734 C        	SWAPA	B1_MIN_REG
   342 0192B 1A0F C        	AND	A,@0X0F
   343 0192C 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   344 0192D 1026 C        	CALL	VGACHAR
   345 0192E 0434 C        	MOV	A,B1_MIN_REG
   346 0192F 1A0F C        	AND	A,@0X0F
   347 01930 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   348 01931 1026 C        	CALL	VGACHAR
   349 01932 180D C        	MOV	A,@(CH_AMPERE)
   350 01933 1026 C        	CALL	VGACHAR
   351 01934 0733 C        	SWAPA	B1_SEC_REG
   352 01935 1A0F C        	AND	A,@0X0F
   353 01936 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   354 01937 1026 C        	CALL	VGACHAR
   355 01938 0433 C        	MOV	A,B1_SEC_REG
   356 01939 1A0F C        	AND	A,@0X0F
   357 0193A 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   358 0193B 1026 C        	CALL	VGACHAR
   359 0193C 18FF C        	MOV	A,@(CH_END)
   360 0193D 1026 C        	CALL	VGACHAR
   361            C        
   362 0193E 10AB C        	CALL	VGADRAWCHAR
   363            C      M 	PAGE	#($)
       0193F 1E86     1     PAGE ( $ / 1024 ),
   364            C        ;---刷新第一二三行	
   365            C      M 	REFURBISH_1AND2AND3L		
                      2  M  BLOCK  0 
       01940 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       01941 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       01942 1880     2     MOV A,@( LCD_CTRL )
       01943 004C     2     MOV  _RC ,A
       01944 0B4D     1     BS  _RD , 5 
       01945 0B8D     1     BS  _RD , 6 
       01946 0BCD     1     BS  _RD , 7 
   366            C        
   367 01947 1409 C        	JMP	CID_FUNC_END
   368            C        ;---------------------------------------
   369 01948      C        CID_FUNC_0_NOCID:
   370 01948      C        DISP_NOCALL:
   371            C      M 	RTC_DISP_ENABLE
       01948 0A12     1     BS  SYS_FLAG , 0 
   372            C        	
   373            C      M 	PAGE	#(VGA)
       01949 1E8C     1     PAGE ( VGA / 1024 ),
   374 0194A 111E C        	CALL	VGABLANKNUM2	
   375 0194B 1127 C        	CALL	VGABLANKCHAR
   376 0194C 18F0 C        	MOV	A,@~((1<<3)|(1<<2)|(1<<1)|(1<<0))	;"CALL","NEW","RET","MSG"
   377 0194D 1010 C        	CALL	CLRVGASTAMP2
   378 0194E 1097 C        	CALL	VGADRAWSTAMP
   379            C        ;---First line index	
   380 0194F 1882 C        	MOV	A,@(STYLE_RIGHT)	;!!!
   381 01950 1018 C        	CALL	VGANUM1
   382 01951 1800 C        	MOV	A,@NUM_BLANK
   383 01952 1018 C        	CALL	VGANUM1
   384 01953 1800 C        	MOV	A,@NUM_BLANK
   385 01954 1018 C        	CALL	VGANUM1
   386            C        
   387 01955 18FF C        	MOV	A,@(CH_END)
   388 01956 1018 C        	CALL	VGANUM1
   389 01957 109D C        	CALL	VGADRAWNUM1
   390            C        ;-third line
   391 01958 1883 C        	MOV	A,@(STYLE_CENTER)
   392 01959 1026 C        	CALL	VGACHAR
   393 0195A 180C C        	MOV	A,@12		;NO
   394 0195B 114D C        	CALL	VGASTRING
   395 0195C 1800 C        	MOV	A,@(CH_BLANK)
   396 0195D 1026 C        	CALL	VGACHAR
   397 0195E 1802 C        	MOV	A,@2		;CALLS
   398 0195F 114D C        	CALL	VGASTRING
   399            C        ;-
   400 01960 18FF C        	MOV	A,@(CH_END)
   401 01961 1026 C        	CALL	VGACHAR
   402 01962 10AB C        	CALL	VGADRAWCHAR
   403            C      M 	PAGE	#($)	
       01963 1E86     1     PAGE ( $ / 1024 ),
   404            C        
   405 01964 1409 C        	JMP	CID_FUNC_END
   406            C        ;---------------------------------------
   407 01965      C        DISP_ENDLIST:
   408            C      M 	RTC_DISP_ENABLE
       01965 0A12     1     BS  SYS_FLAG , 0 
   409            C        	
   410            C      M 	PAGE	#(VGA)
       01966 1E8C     1     PAGE ( VGA / 1024 ),
   411 01967 111E C        	CALL	VGABLANKNUM2
   412 01968 1127 C        	CALL	VGABLANKCHAR
   413            C        	
   414 01969 18F0 C        	MOV	A,@~((1<<3)|(1<<2)|(1<<1)|(1<<0))	;"CALL","NEW","RET","MSG"
   415 0196A 1010 C        	CALL	CLRVGASTAMP2
   416 0196B 1097 C        	CALL	VGADRAWSTAMP
   417            C        ;---First line index off
   418 0196C 18C8 C        	MOV	A,@ID_BLANK
   419 0196D 1374 C        	CALL	DISP_ID
   420            C        ;-third line
   421 0196E 1883 C        	MOV	A,@(STYLE_CENTER)
   422 0196F 1026 C        	CALL	VGACHAR
   423 01970 1825 C        	MOV	A,@37		;END
   424 01971 114D C        	CALL	VGASTRING
   425 01972 1800 C        	MOV	A,@(CH_BLANK)
   426 01973 1026 C        	CALL	VGACHAR
   427 01974 1826 C        	MOV	A,@38		;OF
   428 01975 114D C        	CALL	VGASTRING
   429 01976 1800 C        	MOV	A,@(CH_BLANK)
   430 01977 1026 C        	CALL	VGACHAR
   431 01978 1827 C        	MOV	A,@39		;LIST
   432 01979 114D C        	CALL	VGASTRING
   433            C        ;-
   434 0197A 18FF C        	MOV	A,@(CH_END)
   435 0197B 1026 C        	CALL	VGACHAR
   436 0197C 10AB C        	CALL	VGADRAWCHAR
   437            C      M 	PAGE	#($)
       0197D 1E86     1     PAGE ( $ / 1024 ),
   438            C        
   439 0197E 1409 C        	JMP	CID_FUNC_END
   440            C        ;---------------------------------------
   441 0197F      C        DISP_DELALLCALLS_DISP:
   442            C        	
   443            C      M 	PAGE	#(VGA)
       0197F 1E8C     1     PAGE ( VGA / 1024 ),
   444 01980 1127 C        	CALL	VGABLANKCHAR
   445 01981 1883 C        	MOV	A,@(STYLE_CENTER)
   446 01982 1026 C        	CALL	VGACHAR
   447 01983 1832 C        	MOV	A,@50		;DEL
   448 01984 114D C        	CALL	VGASTRING
   449 01985 1800 C        	MOV	A,@(CH_BLANK)
   450 01986 1026 C        	CALL	VGACHAR
   451 01987 1831 C        	MOV	A,@49		;ALL
   452 01988 114D C        	CALL	VGASTRING
   453 01989 1800 C        	MOV	A,@(CH_BLANK)	
   454 0198A 1026 C        	CALL	VGACHAR
   455 0198B 1802 C        	MOV	A,@2		;CALLS
   456 0198C 114D C        	CALL	VGASTRING
   457 0198D 181F C        	MOV	A,@(CH_INTE)	;?
   458 0198E 1026 C        	CALL	VGACHAR
   459            C        ;-
   460 0198F 18FF C        	MOV	A,@(CH_END)
   461 01990 1026 C        	CALL	VGACHAR
   462 01991 10AB C        	CALL	VGADRAWCHAR
   463            C      M 	PAGE	#($)	
       01992 1E86     1     PAGE ( $ / 1024 ),
   464            C        
   465 01993 1409 C        	JMP	CID_FUNC_END
   466            C        ;---------------------------------------
   467 01994      C        DISP_DELETECALL_DISP:
   468            C        	
   469            C      M 	PAGE	#(VGA)
       01994 1E8C     1     PAGE ( VGA / 1024 ),
   470 01995 1127 C        	CALL	VGABLANKCHAR
   471 01996 1883 C        	MOV	A,@(STYLE_CENTER)
   472 01997 1026 C        	CALL	VGACHAR
   473 01998 1804 C        	MOV	A,@4		;DELETE
   474 01999 114D C        	CALL	VGASTRING
   475 0199A 1800 C        	MOV	A,@(CH_BLANK)
   476 0199B 1026 C        	CALL	VGACHAR
   477 0199C 1833 C        	MOV	A,@51		;CALL
   478 0199D 114D C        	CALL	VGASTRING
   479 0199E 181F C        	MOV	A,@(CH_INTE)	;?
   480 0199F 1026 C        	CALL	VGACHAR
   481            C        ;-
   482 019A0 18FF C        	MOV	A,@(CH_END)
   483 019A1 1026 C        	CALL	VGACHAR
   484 019A2 10AB C        	CALL	VGADRAWCHAR
   485            C      M 	PAGE	#($)	
       019A3 1E86     1     PAGE ( $ / 1024 ),
   486            C        
   487 019A4 1409 C        	JMP	CID_FUNC_END
   488            C        ;-------------------------------------------------------------------------------
   489 019A5      C        CID_FUNC_1:
   490 019A5 1880 C        	MOV 	A,@CMSG_MKEY
   491 019A6 0120 C        	SUB 	A,B1_MSG
   492            C      M 	JPZ 	CID_1_MKEY
       019A7 0C83     1     JBC  _STATUS , Z 
       019A8 15C8     1     JMP  CID_1_MKEY ,
   493            C        	
   494 019A9 1882 C        	MOV 	A,@CMSG_CKEY
   495 019AA 0120 C        	SUB 	A,B1_MSG
   496            C      M 	JPZ 	CID_1_CKEY
       019AB 0C83     1     JBC  _STATUS , Z 
       019AC 169C     1     JMP  CID_1_CKEY ,
   497            C        	
   498 019AD 1881 C        	MOV 	A,@CMSG_BKEY
   499 019AE 0120 C        	SUB 	A,B1_MSG
   500            C      M 	JPZ 	CID_1_BKEY
       019AF 0C83     1     JBC  _STATUS , Z 
       019B0 16A4     1     JMP  CID_1_BKEY ,
   501            C        	
   502 019B1 1898 C        	MOV 	A,@CMSG_TMR
   503 019B2 0120 C        	SUB 	A,B1_MSG
   504            C      M 	JPZ 	CID_1_TMR
       019B3 0C83     1     JBC  _STATUS , Z 
       019B4 16BB     1     JMP  CID_1_TMR ,
   505            C        	
   506 019B5 18CF C        	MOV	A,@CMSG_CID
   507 019B6 0120 C        	SUB	A,B1_MSG
   508            C      M 	JPZ	CID_FUNC_0_STORCID	;收到新的CID
       019B7 0C83     1     JBC  _STATUS , Z 
       019B8 1418     1     JMP  CID_FUNC_0_STORCID ,
   509            C        	
   510 019B9 18CD C        	MOV 	A,@CRDY_CID
   511 019BA 0120 C        	SUB 	A,B1_MSG
   512            C      M 	JPZ 	CID_FUNC_ROFF
       019BB 0C83     1     JBC  _STATUS , Z 
       019BC 15BE     1     JMP  CID_FUNC_ROFF ,
   513            C        	
   514 019BD 1409 C        	JMP	CID_FUNC_END
   515            C        ;---------------------------------------
   516 019BE      C        CID_FUNC_ROFF:
   517            C      M 	PAGE	#(INIT_DAM_FUNC)
       019BE 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   518 019BF 11C1 C        	CALL	INIT_DAM_FUNC
   519            C        	
   520            C      M 	PAGE	#(MODE9_LON)
       019C0 1E81     1     PAGE ( MODE9_LON / 1024 ),
   521 019C1 1373 C        	CALL	MODE9_LON
   522            C      M 	PAGE	#(DAA_OFF)
       019C2 1E83     1     PAGE ( DAA_OFF / 1024 ),
   523 019C3 11ED C        	CALL	DAA_OFF
   524            C      M 	PAGE	#(LINE_START)
       019C4 1E82     1     PAGE ( LINE_START / 1024 ),
   525 019C5 1038 C        	CALL	LINE_START
   526            C      M 	PAGE	#($)
       019C6 1E86     1     PAGE ( $ / 1024 ),
   527            C        	
   528 019C7 1409 C        	JMP	CID_FUNC_END
   529            C        ;---------------------------------------
   530 019C8      C        CID_1_MKEY:
   531 019C8 1820 C        	MOV	A,@CTMR2S
   532            C      M 	LCALL	SET_PTIMER	;
                      2  M  PAGE #( SET_PTIMER ),
       019C9 1E8D     2     PAGE ( SET_PTIMER / 1024 ),
       019CA 1371     1     CALL ( SET_PTIMER % 1024 ),
                      2  M  PAGE #( $ ),
       019CB 1E86     2     PAGE ( $ / 1024 ),
   533            C        	
   534 019CC 00E2 C        	CLR	B1_PRO_VAR1	;TimeOut counter clean
   535            C        ;---	
   536 019CD 1814 C        	MOV	A,@CKEY_PBK
   537            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       019CE 1E81     2     PAGE ( KEY_CHK / 1024 ),
       019CF 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       019D0 1E86     2     PAGE ( $ / 1024 ),
   538            C      M 	JPNC	CID_1_MKEY_BOOK
       019D1 0E03     1     JBS  _STATUS , C 
       019D2 15F2     1     JMP  CID_1_MKEY_BOOK ,
   539            C        	
   540 019D3 1821 C        	MOV	A,@CKEY_UP
   541            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       019D4 1E81     2     PAGE ( KEY_CHK / 1024 ),
       019D5 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       019D6 1E86     2     PAGE ( $ / 1024 ),
   542            C      M 	JPNC	CID_1_MKEY_UP
       019D7 0E03     1     JBS  _STATUS , C 
       019D8 15FA     1     JMP  CID_1_MKEY_UP ,
   543 019D9 1822 C        	MOV	A,@CKEY_DWN
   544            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       019DA 1E81     2     PAGE ( KEY_CHK / 1024 ),
       019DB 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       019DC 1E86     2     PAGE ( $ / 1024 ),
   545            C      M 	JPNC	CID_1_MKEY_DWN
       019DD 0E03     1     JBS  _STATUS , C 
       019DE 1604     1     JMP  CID_1_MKEY_DWN ,
   546 019DF 1823 C        	MOV	A,@CKEY_DEL
   547            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       019E0 1E81     2     PAGE ( KEY_CHK / 1024 ),
       019E1 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       019E2 1E86     2     PAGE ( $ / 1024 ),
   548            C      M 	JPNC	CID_1_MKEY_DEL
       019E3 0E03     1     JBS  _STATUS , C 
       019E4 1665     1     JMP  CID_1_MKEY_DEL ,
   549 019E5 1813 C        	MOV	A,@CKEY_STP
   550            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       019E6 1E81     2     PAGE ( KEY_CHK / 1024 ),
       019E7 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       019E8 1E86     2     PAGE ( $ / 1024 ),
   551            C      M 	JPNC	CID_1_MKEY_STP
       019E9 0E03     1     JBS  _STATUS , C 
       019EA 169B     1     JMP  CID_1_MKEY_STP ,
   552            C        
   553 019EB 1827 C        	MOV	A,@CKEY_SPK
   554            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       019EC 1E81     2     PAGE ( KEY_CHK / 1024 ),
       019ED 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       019EE 1E86     2     PAGE ( $ / 1024 ),
   555            C      M 	JPNC	CID_1_MKEY_SPK
       019EF 0E03     1     JBS  _STATUS , C 
       019F0 1693     1     JMP  CID_1_MKEY_SPK ,
   556            C        
   557 019F1 1409 C        	JMP	CID_FUNC_END
   558            C        ;-------------------
   559 019F2      C        CID_1_MKEY_BOOK:
   560            C      M 	RTC_DISP_ENABLE
       019F2 0A12     1     BS  SYS_FLAG , 0 
   561            C        	
   562            C        	;PAGE	#(VGA)
   563            C        	;CALL	VGABLANKSTAMP
   564            C        	;CALL	VGABLANKNUM1
   565            C        	;PAGE	#($)
   566            C        		
   567 019F3 18A4 C        	MOV	A,@CCID_EDIT
   568            C      M 	PAGE	#(KSTOR_MSG)
       019F4 1E8D     1     PAGE ( KSTOR_MSG / 1024 ),
   569 019F5 1308 C        	CALL	KSTOR_MSG
   570 019F6 1352 C        	CALL	KCLR_PRO_STACK
   571            C      M 	PAGE	#($)
       019F7 1E86     1     PAGE ( $ / 1024 ),
   572            C        	
   573 019F8 00E1 C        	CLR	B1_PRO_VAR
   574            C        
   575 019F9 1409 C        	JMP	CID_FUNC_END
   576            C        ;---------------------------------------
   577 019FA      C        CID_1_MKEY_UP:
   578            C        	
   579            C      M 	MOV	TEMP1,@0	;min
       019FA 1800     1     MOV A,@( 0 )
       019FB 0056     1     MOV  TEMP1 ,A
   580            C      M 	MOV	TEMP2,B1_CID_T	;max
       019FC 042E     1     MOV A, B1_CID_T 
       019FD 0057     1     MOV  TEMP2 ,A
   581            C        	
   582 019FE 0432 C        	MOV	A,B1_MSG_ID
   583            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       019FF 1E82     2     PAGE ( VALUE_INC / 1024 ),
       01A00 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       01A01 1E86     2     PAGE ( $ / 1024 ),
   584 01A02 0072 C        	MOV	B1_MSG_ID,A
   585            C        
   586 01A03 160D C        	JMP	CID_1_LOOKUP
   587            C        ;---------------------------------------
   588 01A04      C        CID_1_MKEY_DWN:
   589            C        	
   590            C      M 	MOV	TEMP1,@0	;min
       01A04 1800     1     MOV A,@( 0 )
       01A05 0056     1     MOV  TEMP1 ,A
   591            C      M 	MOV	TEMP2,B1_CID_T	;max
       01A06 042E     1     MOV A, B1_CID_T 
       01A07 0057     1     MOV  TEMP2 ,A
   592            C        	
   593 01A08 0432 C        	MOV	A,B1_MSG_ID
   594            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       01A09 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       01A0A 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       01A0B 1E86     2     PAGE ( $ / 1024 ),
   595 01A0C 0072 C        	MOV	B1_MSG_ID,A
   596            C        	;JMP	BOOK_FUNC_END
   597 01A0D      C        CID_1_LOOKUP:
   598 01A0D 09A1 C        	BC	B1_PRO_VAR,6		;Clear Del flag
   599 01A0E      C        CID_1_LOOKUP_AFTERDEL:
   600 01A0E 00E2 C        	CLR	B1_PRO_VAR1
   601            C        
   602 01A0F 042E C        	MOV	A,B1_CID_T
   603            C      M 	JPZ	CID_FUNC_0_NOCID	;
       01A10 0C83     1     JBC  _STATUS , Z 
       01A11 1548     1     JMP  CID_FUNC_0_NOCID ,
   604            C        	
   605 01A12 0432 C        	MOV	A,B1_MSG_ID
   606            C      M 	JPZ	DISP_ENDLIST
       01A13 0C83     1     JBC  _STATUS , Z 
       01A14 1565     1     JMP  DISP_ENDLIST ,
   607            C        ;---------------------------------------
   608 01A15      C        CID_1_LOOKUPCID:
   609            C        	
   610            C      M 	JPB	B1_PRO_VAR,3,CID_LOOK_DIAL
       01A15 0CE1     1     JBC  B1_PRO_VAR , 3 
       01A16 14D7     1     JMP  CID_LOOK_DIAL ,
   611            C        	
   612            C      M 	RTC_DISP_DISABLE
       01A17 0812     1     BC  SYS_FLAG , 0 
   613            C        ;---Clean New-flag	
   614 01A18 0432 C        	MOV	A,B1_MSG_ID
   615            C      M 	PAGE	#(GET_TEL0IDX)
       01A19 1E83     1     PAGE ( GET_TEL0IDX / 1024 ),
   616 01A1A 1271 C        	CALL	GET_TEL0IDX
   617            C        
   618 01A1B 0415 C        	MOV	A,TEMP0
   619 01A1C 0078 C        	MOV	B1_YEAR_REG,A	;!!!Save the new-flag && VP-msg-flag
   620            C        
   621 01A1D 0432 C        	MOV	A,B1_MSG_ID
   622 01A1E 0055 C        	MOV	TEMP0,A
   623 01A1F 0438 C        	MOV	A,B1_YEAR_REG
   624 01A20 1A7F C        	AND	A,@0X7F	
   625            C      M 	PAGE	#(SET_TEL0IDXF)
       01A21 1E83     1     PAGE ( SET_TEL0IDXF / 1024 ),
   626 01A22 126C C        	CALL	SET_TEL0IDXF
   627            C        	;PAGE	#($)
   628            C        ;---读出数据	
   629            C      M 	MOV	OFFSET_D,@DATA_ZONE_START
       01A23 1860     1     MOV A,@( DATA_ZONE_START )
       01A24 005D     1     MOV  OFFSET_D ,A
   630 01A25      C        CID_1_READCID_LOOP:
   631 01A25 0432 C        	MOV	A,B1_MSG_ID
   632            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       01A26 1E83     2     PAGE ( DAT_READ / 1024 ),
       01A27 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       01A28 1E86     2     PAGE ( $ / 1024 ),
   633            C        	
   634            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       01A29 041D     1     MOV A, OFFSET_D 
       01A2A 004C     1     MOV  _RC ,A
   635            C      M 	MOV	_RD,TEMP0	;the data
       01A2B 0415     1     MOV A, TEMP0 
       01A2C 004D     1     MOV  _RD ,A
   636            C        	
   637 01A2D 055D C        	INC	OFFSET_D	;next address
   638            C        	
   639 01A2E 0416 C        	MOV	A,TEMP1		;Error code
   640            C      M 	JPZ	CID_1_READCID_LOOP
       01A2F 0C83     1     JBC  _STATUS , Z 
       01A30 1625     1     JMP  CID_1_READCID_LOOP ,
   641            C      M 	PAGE	#(DAT_READ_STOP)
       01A31 1E83     1     PAGE ( DAT_READ_STOP / 1024 ),
   642 01A32 125B C        	CALL	DAT_READ_STOP
   643            C        	
   644 01A33      C        CID_1_CIDDISP:
   645            C      M 	BLOCK	1
       01A33 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01A34 000A     1     IOW  _IOCA ,
   646            C      M 	BANK	1
       01A35 0B84     1     BS  _RSR , 6 
       01A36 09C4     1     BC  _RSR , 7 
   647            C        	
   648 01A37 1864 C        	MOV	A,@TIME_START
   649 01A38 004C C        	MOV	_RC,A
   650 01A39 040D C        	MOV	A,_RD
   651 01A3A 0077 C        	MOV	B1_MON_REG,A		;Month
   652 01A3B 054C C        	INC	_RC
   653 01A3C 040D C        	MOV	A,_RD
   654 01A3D 0076 C        	MOV	B1_DAY_REG,A		;Day
   655 01A3E 054C C        	INC	_RC
   656 01A3F 040D C        	MOV	A,_RD
   657 01A40 0075 C        	MOV	B1_HOUR_REG,A		;Hour
   658 01A41 054C C        	INC	_RC
   659 01A42 040D C        	MOV	A,_RD
   660 01A43 0074 C        	MOV	B1_MIN_REG,A		;Minute
   661            C        	;INC	_RC
   662            C        ;---
   663 01A44 0438 C        	MOV	A,B1_YEAR_REG
   664            C      M 	LCALL	SET_CIDFLAG
                      2  M  PAGE #( SET_CIDFLAG ),
       01A45 1E8C     2     PAGE ( SET_CIDFLAG / 1024 ),
       01A46 107E     1     CALL ( SET_CIDFLAG % 1024 ),
                      2  M  PAGE #( $ ),
       01A47 1E86     2     PAGE ( $ / 1024 ),
   665 01A48 0078 C        	MOV	B1_YEAR_REG,A		;"MSG"/"NEW"
   666            C        ;---LCD	blank	
   667            C      M 	PAGE	#(VGA)
       01A49 1E8C     1     PAGE ( VGA / 1024 ),
   668 01A4A 18F0 C        	MOV	A,@~((1<<3)|(1<<2)|(1<<1)|(1<<0))	;"CALL","NEW","RET","MSG"
   669 01A4B 1010 C        	CALL	CLRVGASTAMP2
   670 01A4C 111E C        	CALL	VGABLANKNUM2
   671 01A4D 1127 C        	CALL	VGABLANKCHAR
   672            C        ;-the first icon
   673 01A4E 1824 C        	MOV	A,@((1<<5)|(1<<2))	;":","/"
   674 01A4F 1000 C        	CALL	VGASTAMP1
   675            C        	
   676 01A50 0438 C        	MOV	A,B1_YEAR_REG
   677 01A51 1908 C        	OR	A,@(1<<3)		;"CALL"
   678 01A52 1004 C        	CALL	VGASTAMP2
   679 01A53 1097 C        	CALL	VGADRAWSTAMP
   680            C        ;-first line date/time
   681            C      M 	PAGE	#(DISP_DATETIME)
       01A54 1E8C     1     PAGE ( DISP_DATETIME / 1024 ),
   682 01A55 12D6 C        	CALL	DISP_DATETIME
   683 01A56 0432 C        	MOV	A,B1_MSG_ID
   684            C      M 	PAGE	#(DISP_ID)
       01A57 1E8C     1     PAGE ( DISP_ID / 1024 ),
   685 01A58 1374 C        	CALL	DISP_ID
   686            C        ;CID_1_CIDDISP_NUM:
   687            C      M 	PAGE	#(DISP_TELNUM)
       01A59 1E8C     1     PAGE ( DISP_TELNUM / 1024 ),
   688 01A5A 131A C        	CALL	DISP_TELNUM	;---号码在第二行显示
   689 01A5B 1342 C        	CALL	DISP_TELNAME	;---姓名在第三行显示
   690            C      M 	PAGE	#($)
       01A5C 1E86     1     PAGE ( $ / 1024 ),
   691            C        
   692            C      M 	REFURBISH_1AND2AND3L	;---刷新第一二三行			
                      2  M  BLOCK  0 
       01A5D 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       01A5E 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       01A5F 1880     2     MOV A,@( LCD_CTRL )
       01A60 004C     2     MOV  _RC ,A
       01A61 0B4D     1     BS  _RD , 5 
       01A62 0B8D     1     BS  _RD , 6 
       01A63 0BCD     1     BS  _RD , 7 
   693            C        	
   694 01A64 1409 C        	JMP	CID_FUNC_END
   695            C        ;---------------------------------------
   696 01A65      C        CID_1_MKEY_DEL:
   697            C      M 	JPB	B1_PRO_VAR,5,CID_1_MKEY_DODELALL
       01A65 0D61     1     JBC  B1_PRO_VAR , 5 
       01A66 1684     1     JMP  CID_1_MKEY_DODELALL ,
   698            C      M 	JPB	B1_PRO_VAR,6,CID_1_MKEY_DODELONE
       01A67 0DA1     1     JBC  B1_PRO_VAR , 6 
       01A68 166A     1     JMP  CID_1_MKEY_DODELONE ,
   699            C        
   700 01A69 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   701            C        ;---------------------------------------
   702 01A6A      C        CID_1_MKEY_DODELONE:
   703            C        ;---
   704            C      M 	PAGE	#(VGA)
       01A6A 1E8C     1     PAGE ( VGA / 1024 ),
   705 01A6B 1127 C        	CALL	VGABLANKCHAR
   706            C        	
   707 01A6C 1883 C        	MOV	A,@(STYLE_CENTER)
   708 01A6D 1026 C        	CALL	VGACHAR
   709 01A6E 182F C        	MOV	A,@47		;DELETE...
   710 01A6F 114D C        	CALL	VGASTRING
   711 01A70 18FF C        	MOV	A,@(CH_END)
   712 01A71 1026 C        	CALL	VGACHAR
   713 01A72 10AB C        	CALL	VGADRAWCHAR
   714            C      M 	PAGE	#($)	
       01A73 1E86     1     PAGE ( $ / 1024 ),
   715            C        ;---	
   716 01A74 0432 C        	MOV	A,B1_MSG_ID
   717            C      M 	PAGE	#(DEL_TEL)
       01A75 1E83     1     PAGE ( DEL_TEL / 1024 ),
   718 01A76 124B C        	CALL	DEL_TEL
   719            C      M 	PAGE	#(TEL_GC_CHK)
       01A77 1E82     1     PAGE ( TEL_GC_CHK / 1024 ),
   720 01A78 10FC C        	CALL	TEL_GC_CHK
   721            C      M 	PAGE	#(GET_TELT)
       01A79 1E83     1     PAGE ( GET_TELT / 1024 ),
   722 01A7A 1246 C        	CALL	GET_TELT
   723            C      M 	PAGE	#($)
       01A7B 1E86     1     PAGE ( $ / 1024 ),
   724 01A7C 0415 C        	MOV	A,TEMP0
   725 01A7D 006E C        	MOV	B1_CID_T,A
   726            C        	
   727 01A7E 0432 C        	MOV	A,B1_MSG_ID
   728 01A7F 012E C        	SUB	A,B1_CID_T
   729            C      M 	JPC	CID_1_LOOKUP_AFTERDEL
       01A80 0C03     1     JBC  _STATUS , C 
       01A81 160E     1     JMP  CID_1_LOOKUP_AFTERDEL ,
   730            C        	
   731 01A82 00F2 C        	CLR	B1_MSG_ID
   732            C        	
   733 01A83 160E C        	JMP	CID_1_LOOKUP_AFTERDEL
   734            C        ;---------------------------------------
   735 01A84      C        CID_1_MKEY_DODELALL:
   736            C        	
   737            C      M 	PAGE	#(DEL_TEL)
       01A84 1E83     1     PAGE ( DEL_TEL / 1024 ),
   738 01A85 1801 C        	MOV	A,@1
   739 01A86 124B C        	CALL	DEL_TEL
   740            C        	
   741            C      M 	PAGE	#(GET_TELT)
       01A87 1E83     1     PAGE ( GET_TELT / 1024 ),
   742 01A88 1246 C        	CALL	GET_TELT
   743            C      M 	PAGE	#($)
       01A89 1E86     1     PAGE ( $ / 1024 ),
   744 01A8A 0415 C        	MOV	A,TEMP0
   745            C      M 	JPNZ	CID_1_MKEY_DODELALL	;Delete until no tel exist
       01A8B 0E83     1     JBS  _STATUS , Z 
       01A8C 1684     1     JMP  CID_1_MKEY_DODELALL ,
   746            C        	
   747            C      M 	PAGE	#(TEL_GC_CHK)
       01A8D 1E82     1     PAGE ( TEL_GC_CHK / 1024 ),
   748 01A8E 10FC C        	CALL	TEL_GC_CHK
   749            C      M 	PAGE	#($)
       01A8F 1E86     1     PAGE ( $ / 1024 ),
   750            C        	
   751 01A90 00EE C        	CLR	B1_CID_T	;Total tel record
   752 01A91 00F2 C        	CLR	B1_MSG_ID
   753            C        	
   754 01A92 160E C        	JMP	CID_1_LOOKUP_AFTERDEL
   755            C        ;---------------------------------------
   756 01A93      C        CID_1_MKEY_SPK:
   757            C      M 	RTC_DISP_ENABLE
       01A93 0A12     1     BS  SYS_FLAG , 0 
   758            C        	
   759 01A94 18A5 C        	MOV	A,@CDIAL_OUT
   760            C      M 	PAGE	#(KSTOR_MSG)
       01A95 1E8D     1     PAGE ( KSTOR_MSG / 1024 ),
   761 01A96 1308 C        	CALL	KSTOR_MSG
   762 01A97 1352 C        	CALL	KCLR_PRO_STACK
   763            C      M 	PAGE	#($)
       01A98 1E86     1     PAGE ( $ / 1024 ),
   764            C        	
   765 01A99 00E1 C        	CLR	B1_PRO_VAR
   766            C        	
   767 01A9A 1409 C        	JMP	CID_FUNC_END
   768            C        ;-------------------	
   769 01A9B      C        CID_1_MKEY_STP:	
   770 01A9B 16E5 C        	JMP	CID_1_TMROUT
   771            C        ;---------------------------------------
   772 01A9C      C        CID_1_CKEY:
   773 01A9C 00E2 C        	CLR	B1_PRO_VAR1	;TimeOut counter clean
   774            C        	
   775 01A9D 1823 C        	MOV	A,@CKEY_DEL
   776            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01A9E 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01A9F 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01AA0 1E86     2     PAGE ( $ / 1024 ),
   777            C      M 	JPNC	CID_1_CKEY_DEL
       01AA1 0E03     1     JBS  _STATUS , C 
       01AA2 16AB     1     JMP  CID_1_CKEY_DEL ,
   778            C        	
   779 01AA3 1409 C        	JMP	CID_FUNC_END
   780            C        ;---------------------------------------
   781 01AA4      C        CID_1_BKEY:
   782            C        	
   783 01AA4 1823 C        	MOV	A,@CKEY_DEL
   784            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01AA5 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01AA6 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01AA7 1E86     2     PAGE ( $ / 1024 ),
   785            C      M 	JPNC	CID_1_BKEY_DEL
       01AA8 0E03     1     JBS  _STATUS , C 
       01AA9 16B0     1     JMP  CID_1_BKEY_DEL ,
   786            C        	
   787 01AAA 1409 C        	JMP	CID_FUNC_END
   788            C        ;---------------------------------------
   789 01AAB      C        CID_1_CKEY_DEL:
   790 01AAB 042E C        	MOV	A,B1_CID_T
   791            C      M 	JPZ	CID_FUNC_END
       01AAC 0C83     1     JBC  _STATUS , Z 
       01AAD 1409     1     JMP  CID_FUNC_END ,
   792            C        	
   793 01AAE 0B61 C        	BS	B1_PRO_VAR,5
   794            C        
   795 01AAF 157F C        	JMP	DISP_DELALLCALLS_DISP	;!!!!!!Display "delete all?"
   796            C        ;---------------------------------------	
   797 01AB0      C        CID_1_BKEY_DEL:
   798            C      M 	JPB	B1_PRO_VAR,5,CID_FUNC_END	;Check Del all flag
       01AB0 0D61     1     JBC  B1_PRO_VAR , 5 
       01AB1 1409     1     JMP  CID_FUNC_END ,
   799            C        	
   800 01AB2 0432 C        	MOV	A,B1_MSG_ID
   801            C      M 	JPZ	CID_FUNC_END
       01AB3 0C83     1     JBC  _STATUS , Z 
       01AB4 1409     1     JMP  CID_FUNC_END ,
   802            C        	
   803 01AB5 0421 C        	MOV	A,B1_PRO_VAR
   804 01AB6 1B40 C        	XOR	A,@(1<<6)
   805 01AB7 0061 C        	MOV	B1_PRO_VAR,A	;Delete flag(Because confirexcept lookup the next CID)
   806            C        
   807            C      M 	JPNB	B1_PRO_VAR,6,CID_FUNC_END	;Don't clean the flag when do delete,it can avoid set delete-flag aftelete
       01AB8 0FA1     1     JBS  B1_PRO_VAR , 6 
       01AB9 1409     1     JMP  CID_FUNC_END ,
   808            C        	
   809 01ABA 1594 C        	JMP	DISP_DELETECALL_DISP	
   810            C        ;---------------------------------------
   811 01ABB      C        CID_1_TMR:
   812 01ABB 0562 C        	INC	B1_PRO_VAR1
   813            C        ;---time out	
   814            C      M 	MOV	TEMP0,@4	;No calls(4s time out)
       01ABC 1804     1     MOV A,@( 4 )
       01ABD 0055     1     MOV  TEMP0 ,A
   815 01ABE 042E C        	MOV	A,B1_CID_T
   816            C      M 	JPZ	CID_1_TMR_1
       01ABF 0C83     1     JBC  _STATUS , Z 
       01AC0 16C3     1     JMP  CID_1_TMR_1 ,
   817            C        	
   818            C      M 	MOV	TEMP0,@10	;(10s time out)
       01AC1 180A     1     MOV A,@( 10 )
       01AC2 0055     1     MOV  TEMP0 ,A
   819 01AC3      C        CID_1_TMR_1:	
   820 01AC3 0422 C        	MOV	A,B1_PRO_VAR1
   821 01AC4 0115 C        	SUB	A,TEMP0
   822            C      M 	JPNC	CID_1_TMROUT
       01AC5 0E03     1     JBS  _STATUS , C 
       01AC6 16E5     1     JMP  CID_1_TMROUT ,
   823            C        	
   824 01AC7 0432 C        	MOV	A,B1_MSG_ID
   825            C      M 	JPZ	CID_FUNC_END	;End of list
       01AC8 0C83     1     JBC  _STATUS , Z 
       01AC9 1409     1     JMP  CID_FUNC_END ,
   826            C        ;---check alternate when the length longer than 15 bytes
   827            C      M 	BLOCK	1
       01ACA 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01ACB 000A     1     IOW  _IOCA ,
   828            C        	
   829            C      M 	MOV	_RC,@NUM_FLAG
       01ACC 1862     1     MOV A,@( NUM_FLAG )
       01ACD 004C     1     MOV  _RC ,A
   830 01ACE 040D C        	MOV	A,_RD			;count
   831 01ACF 1A3F C        	AND	A,@0X3F	
   832 01AD0 1D0F C        	SUB	A,@LENGTH2NDL
   833            C      M 	JPC	CID_FUNC_END
       01AD1 0C03     1     JBC  _STATUS , C 
       01AD2 1409     1     JMP  CID_FUNC_END ,
   834            C        ;---The length longer than "LENGTH2NDL",then alternate display
   835            C      M 	LCALL	VGABLANKNUM2
                      2  M  PAGE #( VGABLANKNUM2 ),
       01AD3 1E8C     2     PAGE ( VGABLANKNUM2 / 1024 ),
       01AD4 111E     1     CALL ( VGABLANKNUM2 % 1024 ),
                      2  M  PAGE #( $ ),
       01AD5 1E86     2     PAGE ( $ / 1024 ),
   836            C      M 	REFURBISH_2NDL
                      2  M  BLOCK  0 
       01AD6 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       01AD7 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       01AD8 1880     2     MOV A,@( LCD_CTRL )
       01AD9 004C     2     MOV  _RC ,A
       01ADA 0B8D     1     BS  _RD , 6 
   837            C        
   838            C      M 	JPB	B1_PRO_VAR1,0,CID_1_TMR_ALTER_1
       01ADB 0C22     1     JBC  B1_PRO_VAR1 , 0 
       01ADC 16E1     1     JMP  CID_1_TMR_ALTER_1 ,
   839            C        
   840            C      M 	LCALL	DISP_TAILNUM
                      2  M  PAGE #( DISP_TAILNUM ),
       01ADD 1E8C     2     PAGE ( DISP_TAILNUM / 1024 ),
       01ADE 1351     1     CALL ( DISP_TAILNUM % 1024 ),
                      2  M  PAGE #( $ ),
       01ADF 1E86     2     PAGE ( $ / 1024 ),
   841 01AE0 1409 C        	JMP	CID_FUNC_END
   842            C        ;---------------------------------------
   843 01AE1      C        CID_1_TMR_ALTER_1:
   844            C        
   845            C      M 	LCALL	DISP_TELNUM
                      2  M  PAGE #( DISP_TELNUM ),
       01AE1 1E8C     2     PAGE ( DISP_TELNUM / 1024 ),
       01AE2 131A     1     CALL ( DISP_TELNUM % 1024 ),
                      2  M  PAGE #( $ ),
       01AE3 1E86     2     PAGE ( $ / 1024 ),
   846 01AE4 1409 C        	JMP	CID_FUNC_END
   847            C        ;---------------------------------------
   848 01AE5      C        CID_1_TMROUT:
   849            C      M 	RTC_DISP_ENABLE
       01AE5 0A12     1     BS  SYS_FLAG , 0 
   850            C        
   851            C      M 	PAGE	#(VGABLANKSTAMP)
       01AE6 1E8C     1     PAGE ( VGABLANKSTAMP / 1024 ),
   852 01AE7 110D C        	CALL	VGABLANKSTAMP	
   853            C        
   854 01AE8 1890 C        	MOV	A,@CMSG_INIT
   855            C      M 	PAGE	#(KSTOR_MSG)
       01AE9 1E8D     1     PAGE ( KSTOR_MSG / 1024 ),
   856 01AEA 1308 C        	CALL	KSTOR_MSG
   857 01AEB 1352 C        	CALL	KCLR_PRO_STACK
   858            C      M 	PAGE	#($)
       01AEC 1E86     1     PAGE ( $ / 1024 ),
   859            C        
   860 01AED 00E1 C        	CLR	B1_PRO_VAR
   861            C        	
   862 01AEE 1409 C        	JMP	CID_FUNC_END	
   863            C        ;-------------------------------------------------------------------------------
   864            C        
   614                     ;-------------------------------------------------------------------------------
   615                     ;page7
   616                     INCLUDE		"f_phone.dt"
     1            C        ORG	(7<<10)
     2            C        ;-------------------------------------------------------------------------------
     3 01C00      C        PHONE_FUNC:
     4            C        
     5            C      M 	BANK	1
       01C00 0B84     1     BS  _RSR , 6 
       01C01 09C4     1     BC  _RSR , 7 
     6            C        
     7 01C02 0421 C        	MOV	A,B1_PRO_VAR	;
     8 01C03 1A07 C        	AND	A,@0X07
     9            C      M 	MTBL
       01C04 0020     1     TBL 
             1C04     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    10 01C05 1414 C        	JMP	PHONE_0		;0 - wait from start
    11 01C06 1624 C        	JMP	PHONE_1		;1 - phone
    12 01C07 1624 C        	JMP	PHONE_2		;2 - Dialing
    13 01C08 1684 C        	JMP	PHONE_3		;3 - Flash
    14 01C09 1698 C        	JMP	PHONE_4		;4 - Press num-key in idle
    15 01C0A 170D C        	JMP	PHONE_5		;5 - EXIT
    16 01C0B 140D C        	JMP	PHONE_FUNC_END	;6 - reserved
    17 01C0C 140D C        	JMP	PHONE_FUNC_END	;7 - reserved
    18            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    19 01C0D      C        PHONE_FUNC_END:
    20            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       01C0D 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       01C0E 15AC     1     JMP ( MAIN_LOOP % 1024 ),
    21            C        ;-------------------------------------------------------------------------------
    22            C        ;B1_PRO_VAR1 use for timer2 counter
    23            C        ;TIMER1 use for Display or Speakerphone start or FLASH
    24            C        ;TIMER2 use for dial
    25            C        
    26            C        ;B1_PRO_VAR(2..0) for working status
    27            C        ;B1_PRO_VAR(bit3) MUTE-flag
    28            C        ;B1_PRO_VAR(bit4) for 5s waiting status(sec/min/hour not work)
    29            C        ;B1_PRO_VAR(bit5) the length flag(>32)
    30            C        ;B1_PRO_VAR(bit6) the dial/not flag
    31            C        ;B1_PRO_VAR(bit7) the dial pause flag
    32            C        ;-------------------------------------------------------------------------------
    33 01C0F      C        FLASH_TAB:
    34            C      M 	MTBL	
       01C0F 0020     1     TBL 
             1C0F     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    35 01C10 1C01 C        	RETL	@1
    36 01C11 1C03 C        	RETL	@3
    37 01C12 1C06 C        	RETL	@6
    38 01C13 1C0A C        	RETL	@10
    39            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    40            C        ;-------------------------------------------------------------------------------
    41 01C14      C        PHONE_0:			;Enter work
    42 01C14 1880 C        	MOV 	A,@CMSG_MKEY
    43 01C15 0120 C        	SUB 	A,B1_MSG
    44            C      M 	JPZ 	PHONE_0_MKEY
       01C16 0C83     1     JBC  _STATUS , Z 
       01C17 1431     1     JMP  PHONE_0_MKEY ,
    45            C        
    46 01C18 1894 C        	MOV	A,@CPHONE_ON
    47 01C19 0120 C        	SUB	A,B1_MSG
    48            C      M 	JPZ	PHONE_0_PHONEON
       01C1A 0C83     1     JBC  _STATUS , Z 
       01C1B 147B     1     JMP  PHONE_0_PHONEON ,
    49            C        	
    50 01C1C 1898 C        	MOV	A,@CMSG_TMR
    51 01C1D 0120 C        	SUB	A,B1_MSG
    52            C      M 	JPZ	PHONE_0_TMR
       01C1E 0C83     1     JBC  _STATUS , Z 
       01C1F 1444     1     JMP  PHONE_0_TMR ,
    53            C        		
    54 01C20 1896 C        	MOV	A,@CKEY_NUM
    55 01C21 0120 C        	SUB	A,B1_MSG
    56            C      M 	JPZ	PHONE_0_NUMKEY
       01C22 0C83     1     JBC  _STATUS , Z 
       01C23 144C     1     JMP  PHONE_0_NUMKEY ,
    57            C        		
    58 01C24 18A5 C        	MOV 	A,@CDIAL_OUT
    59 01C25 0120 C        	SUB 	A,B1_MSG
    60            C      M 	JPZ 	PHONE_0_DIAL	;Dial out the displayed tel-num
       01C26 0C83     1     JBC  _STATUS , Z 
       01C27 16E5     1     JMP  PHONE_0_DIAL ,
    61            C        	
    62 01C28 1893 C        	MOV	A,@CHOOK_OFF
    63 01C29 0120 C        	SUB	A,B1_MSG
    64            C      M 	JPZ	PHONE_0_HOOKOFF	
       01C2A 0C83     1     JBC  _STATUS , Z 
       01C2B 147A     1     JMP  PHONE_0_HOOKOFF ,
    65            C        	
    66 01C2C 1892 C        	MOV	A,@CHOOK_ON
    67 01C2D 0120 C        	SUB	A,B1_MSG
    68            C      M 	JPZ	PHONE_0_HOOKON
       01C2E 0C83     1     JBC  _STATUS , Z 
       01C2F 15C2     1     JMP  PHONE_0_HOOKON ,
    69            C        		
    70 01C30 140D C        	JMP	PHONE_FUNC_END
    71            C        ;---------------------------------------
    72 01C31      C        PHONE_0_MKEY:
    73 01C31 1827 C        	MOV	A,@CKEY_SPK
    74            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01C32 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01C33 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01C34 1E87     2     PAGE ( $ / 1024 ),
    75            C      M 	JPNC	PHONE_0_MKEY_SPK
       01C35 0E03     1     JBS  _STATUS , C 
       01C36 15C4     1     JMP  PHONE_0_MKEY_SPK ,
    76            C        
    77 01C37 1826 C        	MOV	A,@CKEY_RP
    78            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01C38 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01C39 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01C3A 1E87     2     PAGE ( $ / 1024 ),
    79            C      M 	JPNC	PHONE_0_MKEY_RP		;Pause/Repeat
       01C3B 0E03     1     JBS  _STATUS , C 
       01C3C 1591     1     JMP  PHONE_0_MKEY_RP ,
    80            C        
    81 01C3D 1824 C        	MOV	A,@CKEY_MTE
    82            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01C3E 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01C3F 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01C40 1E87     2     PAGE ( $ / 1024 ),
    83            C      M 	JPNC	PHONE_0_MKEY_MTE	;Mute
       01C41 0E03     1     JBS  _STATUS , C 
       01C42 1500     1     JMP  PHONE_0_MKEY_MTE ,
    84            C        
    85 01C43 140D C        	JMP	PHONE_FUNC_END
    86            C        ;-------------------
    87            C        ;---------------------------------------
    88 01C44      C        PHONE_0_TMR:
    89            C        
    90            C      M 	MOV	B1_PRO_VAR,@0X11	;the bit4=1 => waiting for 5s timer(the sec/min/hour not work)
       01C44 1811     1     MOV A,@( 17 )
       01C45 0061     1     MOV  B1_PRO_VAR ,A
    91            C      M 	DAM_SPK_ENABLE
       01C46 0B49     1     BS  _P9 , 5 
    92            C        	
    93 01C47 1810 C        	MOV	A,@CTMR1S
    94            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       01C48 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       01C49 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01C4A 1E87     2     PAGE ( $ / 1024 ),
    95            C        	;LCALL	PHONE_START
    96            C        	
    97 01C4B 140D C        	JMP	PHONE_FUNC_END	
    98            C        ;---------------------------------------
    99 01C4C      C        PHONE_0_NUMKEY:
   100 01C4C 1810 C        	MOV	A,@CTMR1S
   101            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       01C4D 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       01C4E 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01C4F 1E87     2     PAGE ( $ / 1024 ),
   102 01C50 00E2 C        	CLR	B1_PRO_VAR1
   103 01C51 1362 C        	CALL	CLR_TELQUE
   104            C        
   105 01C52 0431 C        	MOV	A,B1_MSG_N
   106 01C53 1343 C        	CALL	STOR_TELQUE
   107            C        	
   108            C      M 	MOV	B1_PRO_VAR,@0X4
       01C54 1804     1     MOV A,@( 4 )
       01C55 0061     1     MOV  B1_PRO_VAR ,A
   109            C      M 	MOV	B1_CID_T,@1		;the number of num-key pressed
       01C56 1801     1     MOV A,@( 1 )
       01C57 006E     1     MOV  B1_CID_T ,A
   110            C        
   111 01C58      C        PHONE_0_NUMKEY_DISP:
   112 01C58      C        PHONE_4_NUMKEY_DISP:
   113            C        ;---
   114            C      M 	PAGE	#(VGA)
       01C58 1E8C     1     PAGE ( VGA / 1024 ),
   115 01C59 111E C        	CALL	VGABLANKNUM2
   116 01C5A 1127 C        	CALL	VGABLANKCHAR
   117            C      M 	PAGE	#($)
       01C5B 1E87     1     PAGE ( $ / 1024 ),
   118            C        	
   119 01C5C 042E C        	MOV	A,B1_CID_T
   120 01C5D 1D1E C        	SUB	A,@30
   121            C      M 	JPC	PHONE_4_NUMKEY_DISP30MORE
       01C5E 0C03     1     JBC  _STATUS , C 
       01C5F 146E     1     JMP  PHONE_4_NUMKEY_DISP30MORE ,
   122            C        ;--More than 30-bytes	
   123            C      M 	MOV	BASE_ADDR,@0X10	
       01C60 1810     1     MOV A,@( 16 )
       01C61 005F     1     MOV  BASE_ADDR ,A
   124 01C62 181E C        	MOV	A,@30
   125 01C63 012E C        	SUB	A,B1_CID_T
   126 01C64 1F68 C        	ADD	A,@NUM_START
   127 01C65 005C C        	MOV	OFFSET_S,A		;source address
   128            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination address
       01C66 188D     1     MOV A,@( LCD_2NDLINE )
       01C67 005D     1     MOV  OFFSET_D ,A
   129            C      M 	MOV	COUNT,@30		;length
       01C68 181E     1     MOV A,@( 30 )
       01C69 005E     1     MOV  COUNT ,A
   130            C      M 	LCALL	COPY_DATA	
                      2  M  PAGE #( COPY_DATA ),
       01C6A 1E82     2     PAGE ( COPY_DATA / 1024 ),
       01C6B 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       01C6C 1E87     2     PAGE ( $ / 1024 ),
   131            C        ;---	
   132 01C6D 140D C        	JMP	PHONE_FUNC_END	
   133            C        ;-------------------
   134 01C6E      C        PHONE_4_NUMKEY_DISP30MORE:		;少于或等于30Bytes
   135            C      M 	MOV	BASE_ADDR,@0X10	
       01C6E 1810     1     MOV A,@( 16 )
       01C6F 005F     1     MOV  BASE_ADDR ,A
   136            C      M 	MOV	OFFSET_S,@NUM_START	;source address
       01C70 1868     1     MOV A,@( NUM_START )
       01C71 005C     1     MOV  OFFSET_S ,A
   137            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination address
       01C72 188D     1     MOV A,@( LCD_2NDLINE )
       01C73 005D     1     MOV  OFFSET_D ,A
   138            C      M 	MOV	COUNT,B1_CID_T		;length
       01C74 042E     1     MOV A, B1_CID_T 
       01C75 005E     1     MOV  COUNT ,A
   139            C      M 	LCALL	COPY_DATA
                      2  M  PAGE #( COPY_DATA ),
       01C76 1E82     2     PAGE ( COPY_DATA / 1024 ),
       01C77 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       01C78 1E87     2     PAGE ( $ / 1024 ),
   140            C        	
   141 01C79 140D C        	JMP	PHONE_FUNC_END
   142            C        ;---------------------------------------
   143 01C7A      C        PHONE_0_HOOKOFF:
   144            C        	
   145 01C7A 1486 C        	JMP	PHONE_0_START
   146            C        ;---------------------------------------
   147 01C7B      C        PHONE_0_PHONEON:
   148 01C7B 1802 C        	MOV	A,@(1<<1)
   149            C      M 	LCALL	VGASTAMP1	;SPK icon on
                      2  M  PAGE #( VGASTAMP1 ),
       01C7C 1E8C     2     PAGE ( VGASTAMP1 / 1024 ),
       01C7D 1000     1     CALL ( VGASTAMP1 % 1024 ),
                      2  M  PAGE #( $ ),
       01C7E 1E87     2     PAGE ( $ / 1024 ),
   150            C      M 	REFURBISH_ICON
                      2  M  BLOCK  0 
       01C7F 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       01C80 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       01C81 1880     2     MOV A,@( LCD_CTRL )
       01C82 004C     2     MOV  _RC ,A
       01C83 0B0D     1     BS  _RD , 4 
   151            C        	
   152            C      M 	HF_HOOK_H
       01C84 0B08     1     BS  _P8 , 4 
   153            C      M 	HFLED_L		;On
       01C85 09C9     1     BC  _P9 , 7 
   154 01C86      C        PHONE_0_START:	
   155            C      M 	LCALL	CLR_TIMER
                      2  M  PAGE #( CLR_TIMER ),
       01C86 1E8D     2     PAGE ( CLR_TIMER / 1024 ),
       01C87 1358     1     CALL ( CLR_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01C88 1E87     2     PAGE ( $ / 1024 ),
   156            C        
   157            C        ;---
   158 01C89 1808 C        	MOV	A,@CTMR500MS
   159            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       01C8A 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       01C8B 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01C8C 1E87     2     PAGE ( $ / 1024 ),
   160 01C8D      C        PHONE_0_DISP:
   161            C        	
   162            C      M 	XMUTE_H
       01C8D 0A88     1     BS  _P8 , 2 
   163            C      M 	MUTE_H
       01C8E 0AC8     1     BS  _P8 , 3 
   164            C      M 	DAM_MIC_DISABLE
       01C8F 0909     1     BC  _P9 , 4 
   165            C        
   166 01C90 1362 C        	CALL	CLR_TELQUE
   167 01C91 00DE C        	CLR	COUNT		;数字键按下计数清0
   168            C        
   169 01C92 00F3 C        	CLR	B1_SEC_REG	;计时
   170 01C93 00F4 C        	CLR	B1_MIN_REG
   171 01C94 00F5 C        	CLR	B1_HOUR_REG
   172            C        
   173            C      M 	PAGE	#(VGA)
       01C95 1E8C     1     PAGE ( VGA / 1024 ),
   174 01C96 111E C        	CALL	VGABLANKNUM2
   175 01C97 1127 C        	CALL	VGABLANKCHAR
   176            C      M 	PAGE	#($)
       01C98 1E87     1     PAGE ( $ / 1024 ),
   177            C        	
   178            C        	;DAM_SPK_ENABLE
   179 01C99 14AE C        	JMP	PHONE_1_TMR_DISP
   180            C        ;-------------------------------------------------------------------------------
   181            C        ;---------------------------------------
   182 01C9A      C        PHONE_1_HOOKOFF:
   183            C      M 	DAM_SPK_DISABLE		;Disable SPK
       01C9A 0949     1     BC  _P9 , 5 
   184 01C9B 140D C        	JMP	PHONE_FUNC_END
   185            C        ;---------------------------------------
   186 01C9C      C        PHONE_1_TMR:
   187 01C9C      C        PHONE_2_TMR:
   188            C        
   189            C      M 	JPB	B1_PRO_VAR,4,PHONE_1_TMR_1	;waiting for 5s
       01C9C 0D21     1     JBC  B1_PRO_VAR , 4 
       01C9D 14C8     1     JMP  PHONE_1_TMR_1 ,
   190            C        	
   191 01C9E 0433 C        	MOV	A,B1_SEC_REG
   192 01C9F 1F01 C        	ADD	A,@1
   193 01CA0 0001 C        	DAA
   194 01CA1 0073 C        	MOV	B1_SEC_REG,A
   195 01CA2 1D60 C        	SUB	A,@0X60
   196            C      M 	JPNZ	PHONE_1_TMR_0
       01CA3 0E83     1     JBS  _STATUS , Z 
       01CA4 14AE     1     JMP  PHONE_1_TMR_0 ,
   197            C        	
   198 01CA5 00F3 C        	CLR	B1_SEC_REG
   199            C        	
   200 01CA6 0434 C        	MOV	A,B1_MIN_REG
   201 01CA7 1F01 C        	ADD	A,@1
   202 01CA8 0001 C        	DAA
   203 01CA9 0074 C        	MOV	B1_MIN_REG,A
   204 01CAA 1D60 C        	SUB	A,@0X60
   205            C      M 	JPNZ	PHONE_1_TMR_0
       01CAB 0E83     1     JBS  _STATUS , Z 
       01CAC 14AE     1     JMP  PHONE_1_TMR_0 ,
   206            C        	
   207 01CAD 00F4 C        	CLR	B1_MIN_REG
   208 01CAE      C        PHONE_1_TMR_0:
   209 01CAE      C        PHONE_1_TMR_DISP:
   210 01CAE      C        PHONE_4_TMR_DISP:
   211            C        ;---the third line
   212            C      M 	PAGE	#(VGA)
       01CAE 1E8C     1     PAGE ( VGA / 1024 ),
   213 01CAF 1883 C        	MOV	A,@(STYLE_CENTER)
   214 01CB0 1026 C        	CALL	VGACHAR
   215            C        	
   216 01CB1 0734 C        	SWAPA	B1_MIN_REG
   217 01CB2 1A0F C        	AND	A,@0X0F
   218 01CB3 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   219 01CB4 1026 C        	CALL	VGACHAR
   220 01CB5 0434 C        	MOV	A,B1_MIN_REG
   221 01CB6 1A0F C        	AND	A,@0X0F
   222 01CB7 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   223 01CB8 1026 C        	CALL	VGACHAR
   224 01CB9 180D C        	MOV	A,@(CH_AMPERE)
   225 01CBA 1026 C        	CALL	VGACHAR
   226 01CBB 0733 C        	SWAPA	B1_SEC_REG
   227 01CBC 1A0F C        	AND	A,@0X0F
   228 01CBD 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   229 01CBE 1026 C        	CALL	VGACHAR
   230 01CBF 0433 C        	MOV	A,B1_SEC_REG
   231 01CC0 1A0F C        	AND	A,@0X0F
   232 01CC1 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   233 01CC2 1026 C        	CALL	VGACHAR
   234 01CC3 18FF C        	MOV	A,@(CH_END)
   235 01CC4 1026 C        	CALL	VGACHAR
   236            C        
   237 01CC5 10AB C        	CALL	VGADRAWCHAR
   238            C      M 	PAGE	#($)
       01CC6 1E87     1     PAGE ( $ / 1024 ),
   239            C        	
   240 01CC7 140D C        	JMP	PHONE_FUNC_END
   241            C        ;---------------------------------------
   242 01CC8      C        PHONE_1_TMR_1:
   243 01CC8 0573 C        	INC	B1_SEC_REG
   244            C        	
   245 01CC9 0433 C        	MOV	A,B1_SEC_REG
   246 01CCA 1D05 C        	SUB	A,@5
   247            C      M 	JPNZ	PHONE_FUNC_END
       01CCB 0E83     1     JBS  _STATUS , Z 
       01CCC 140D     1     JMP  PHONE_FUNC_END ,
   248            C        	
   249 01CCD 0921 C        	BC	B1_PRO_VAR,4
   250 01CCE 00F3 C        	CLR	B1_SEC_REG
   251 01CCF 140D C        	JMP	PHONE_FUNC_END
   252            C        ;---------------------------------------
   253 01CD0      C        PHONE_1_MKEY:
   254 01CD0 1827 C        	MOV	A,@CKEY_SPK
   255            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01CD1 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01CD2 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01CD3 1E87     2     PAGE ( $ / 1024 ),
   256            C      M 	JPNC	PHONE_1_MKEY_SPK
       01CD4 0E03     1     JBS  _STATUS , C 
       01CD5 15C4     1     JMP  PHONE_1_MKEY_SPK ,
   257            C        
   258 01CD6 1825 C        	MOV	A,@CKEY_FLS
   259            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01CD7 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01CD8 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01CD9 1E87     2     PAGE ( $ / 1024 ),
   260            C      M 	JPNC	PHONE_1_MKEY_FLS
       01CDA 0E03     1     JBS  _STATUS , C 
       01CDB 1557     1     JMP  PHONE_1_MKEY_FLS ,
   261            C        
   262 01CDC 1826 C        	MOV	A,@CKEY_RP
   263            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01CDD 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01CDE 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01CDF 1E87     2     PAGE ( $ / 1024 ),
   264            C      M 	JPNC	PHONE_1_MKEY_RP		;Pause/Repeat
       01CE0 0E03     1     JBS  _STATUS , C 
       01CE1 1591     1     JMP  PHONE_1_MKEY_RP ,
   265            C        
   266 01CE2 1824 C        	MOV	A,@CKEY_MTE
   267            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01CE3 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01CE4 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01CE5 1E87     2     PAGE ( $ / 1024 ),
   268            C      M 	JPNC	PHONE_1_MKEY_MTE	;Mute
       01CE6 0E03     1     JBS  _STATUS , C 
       01CE7 1500     1     JMP  PHONE_1_MKEY_MTE ,
   269            C        
   270 01CE8 1815 C        	MOV	A,@CKEY_1M
   271            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01CE9 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01CEA 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01CEB 1E87     2     PAGE ( $ / 1024 ),
   272            C      M 	JPNC	PHONE_1_MKEY_M1
       01CEC 0E03     1     JBS  _STATUS , C 
       01CED 151E     1     JMP  PHONE_1_MKEY_M1 ,
   273 01CEE 1816 C        	MOV	A,@CKEY_2M
   274            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01CEF 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01CF0 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01CF1 1E87     2     PAGE ( $ / 1024 ),
   275            C      M 	JPNC	PHONE_1_MKEY_M2
       01CF2 0E03     1     JBS  _STATUS , C 
       01CF3 1520     1     JMP  PHONE_1_MKEY_M2 ,
   276 01CF4 1817 C        	MOV	A,@CKEY_3M
   277            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01CF5 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01CF6 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01CF7 1E87     2     PAGE ( $ / 1024 ),
   278            C      M 	JPNC	PHONE_1_MKEY_M3
       01CF8 0E03     1     JBS  _STATUS , C 
       01CF9 1522     1     JMP  PHONE_1_MKEY_M3 ,
   279            C        
   280            C      M 	LCALL	DIALKEY_CHK
                      2  M  PAGE #( DIALKEY_CHK ),
       01CFA 1E82     2     PAGE ( DIALKEY_CHK / 1024 ),
       01CFB 1203     1     CALL ( DIALKEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01CFC 1E87     2     PAGE ( $ / 1024 ),
   281            C      M 	JPC	PHONE_1_MKEY_NUM	;Num 
       01CFD 0C03     1     JBC  _STATUS , C 
       01CFE 15B7     1     JMP  PHONE_1_MKEY_NUM ,
   282            C        
   283 01CFF 140D C        	JMP	PHONE_FUNC_END
   284            C        ;---------------------------------------
   285 01D00      C        PHONE_0_MKEY_MTE:
   286 01D00      C        PHONE_1_MKEY_MTE:
   287 01D00 0421 C        	MOV	A,B1_PRO_VAR
   288 01D01 1B08 C        	XOR	A,@(1<<3)
   289 01D02 0061 C        	MOV	B1_PRO_VAR,A	;Mute-flag
   290            C        ;---	
   291 01D03 1830 C        	MOV	A,@48		;MUTE
   292 01D04 0EE1 C        	JBS	B1_PRO_VAR,3
   293 01D05 182B C        	MOV	A,@43		;Blank
   294 01D06 0071 C        	MOV	B1_MSG_N,A
   295            C        ;---Icon Display
   296            C      M 	JPB	B1_PRO_VAR,3,PHONE_1__MICON_ON
       01D07 0CE1     1     JBC  B1_PRO_VAR , 3 
       01D08 150F     1     JMP  PHONE_1__MICON_ON ,
   297            C        ;PHONE_1__MICON_OFF:
   298            C      M 	MUTE_H
       01D09 0AC8     1     BS  _P8 , 3 
   299            C        
   300 01D0A 187F C        	MOV	A,@~(1<<7)		;MUTE icon off
   301            C      M 	LCALL	CLRVGASTAMP1
                      2  M  PAGE #( CLRVGASTAMP1 ),
       01D0B 1E8C     2     PAGE ( CLRVGASTAMP1 / 1024 ),
       01D0C 100C     1     CALL ( CLRVGASTAMP1 % 1024 ),
                      2  M  PAGE #( $ ),
       01D0D 1E87     2     PAGE ( $ / 1024 ),
   302 01D0E 1514 C        	JMP	PHONE_1__MUTEICON
   303 01D0F      C        PHONE_1__MICON_ON:
   304            C        
   305            C      M 	MUTE_L
       01D0F 08C8     1     BC  _P8 , 3 
   306            C        	
   307 01D10 1880 C        	MOV	A,@(1<<7)		;MUTE icon on
   308            C      M 	LCALL	VGASTAMP1
                      2  M  PAGE #( VGASTAMP1 ),
       01D11 1E8C     2     PAGE ( VGASTAMP1 / 1024 ),
       01D12 1000     1     CALL ( VGASTAMP1 % 1024 ),
                      2  M  PAGE #( $ ),
       01D13 1E87     2     PAGE ( $ / 1024 ),
   309 01D14      C        PHONE_1__MUTEICON:
   310            C        ;---Char Display
   311            C      M 	PAGE	#(VGA)
       01D14 1E8C     1     PAGE ( VGA / 1024 ),
   312 01D15 1882 C        	MOV	A,@(STYLE_RIGHT)
   313 01D16 1026 C        	CALL	VGACHAR
   314 01D17 0431 C        	MOV	A,B1_MSG_N
   315 01D18 114D C        	CALL	VGASTRING
   316 01D19 18FF C        	MOV	A,@(CH_END)
   317 01D1A 1026 C        	CALL	VGACHAR
   318 01D1B 10AB C        	CALL	VGADRAWCHAR
   319            C      M 	PAGE	#($)
       01D1C 1E87     1     PAGE ( $ / 1024 ),
   320            C        	
   321 01D1D 140D C        	JMP	PHONE_FUNC_END
   322            C        ;---------------------------------------
   323 01D1E      C        PHONE_1_MKEY_M1:
   324 01D1E 1801 C        	MOV	A,@1
   325 01D1F 1523 C        	JMP	PHONE_1_MKEY_123M
   326 01D20      C        PHONE_1_MKEY_M2:
   327 01D20 1802 C        	MOV	A,@2
   328 01D21 1523 C        	JMP	PHONE_1_MKEY_123M
   329 01D22      C        PHONE_1_MKEY_M3:
   330 01D22 1803 C        	MOV	A,@3
   331            C        	;JMP	PHONE_1_MKEY_123M
   332            C        
   333 01D23      C        PHONE_1_MKEY_123M:		
   334 01D23 1F0A C        	ADD	A,@GROUP_M
   335            C      M 	PAGE	#(SET_GROUP)
       01D24 1E83     1     PAGE ( SET_GROUP / 1024 ),
   336 01D25 1241 C        	CALL	SET_GROUP
   337            C      M 	PAGE	#(GET_TELT)
       01D26 1E83     1     PAGE ( GET_TELT / 1024 ),
   338 01D27 1246 C        	CALL	GET_TELT
   339            C      M 	PAGE	#($)
       01D28 1E87     1     PAGE ( $ / 1024 ),
   340            C        	
   341 01D29 0415 C        	MOV	A,TEMP0
   342            C      M 	JPZ	PHONE_FUNC_END	;No M1/M2/M3
       01D2A 0C83     1     JBC  _STATUS , Z 
       01D2B 140D     1     JMP  PHONE_FUNC_END ,
   343 01D2C 0072 C        	MOV	B1_MSG_ID,A
   344            C        ;---Read M1/M2/M3
   345            C      M 	LCALL	CLR_2TIMER
                      2  M  PAGE #( CLR_2TIMER ),
       01D2D 1E8D     2     PAGE ( CLR_2TIMER / 1024 ),
       01D2E 1364     1     CALL ( CLR_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01D2F 1E87     2     PAGE ( $ / 1024 ),
   346            C        
   347            C      M 	MOV	OFFSET_D,@M123_BUF_START
       01D30 18B0     1     MOV A,@( M123_BUF_START )
       01D31 005D     1     MOV  OFFSET_D ,A
   348 01D32      C        PHONE_1_READ123M_LOOP:
   349 01D32 0432 C        	MOV	A,B1_MSG_ID
   350            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       01D33 1E83     2     PAGE ( DAT_READ / 1024 ),
       01D34 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       01D35 1E87     2     PAGE ( $ / 1024 ),
   351            C        	
   352            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       01D36 041D     1     MOV A, OFFSET_D 
       01D37 004C     1     MOV  _RC ,A
   353            C      M 	MOV	_RD,TEMP0	;the data
       01D38 0415     1     MOV A, TEMP0 
       01D39 004D     1     MOV  _RD ,A
   354            C        	
   355 01D3A 055D C        	INC	OFFSET_D	;next address
   356            C        	
   357 01D3B 0416 C        	MOV	A,TEMP1		;Error code
   358            C      M 	JPZ	PHONE_1_READ123M_LOOP
       01D3C 0C83     1     JBC  _STATUS , Z 
       01D3D 1532     1     JMP  PHONE_1_READ123M_LOOP ,
   359            C      M 	LCALL	DAT_READ_STOP
                      2  M  PAGE #( DAT_READ_STOP ),
       01D3E 1E83     2     PAGE ( DAT_READ_STOP / 1024 ),
       01D3F 125B     1     CALL ( DAT_READ_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       01D40 1E87     2     PAGE ( $ / 1024 ),
   360            C        ;---
   361 01D41 1864 C        	MOV	A,@CTMR100MS
   362            C      M 	LCALL	SET_2TIMER
                      2  M  PAGE #( SET_2TIMER ),
       01D42 1E8D     2     PAGE ( SET_2TIMER / 1024 ),
       01D43 1365     1     CALL ( SET_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01D44 1E87     2     PAGE ( $ / 1024 ),
   363            C        
   364 01D45 18B2 C        	MOV	A,@(M123_BUF_START+NUM_FGOFFSET)
   365 01D46 004C C        	MOV	_RC,A
   366 01D47 040D C        	MOV	A,_RD
   367 01D48 005E C        	MOV	COUNT,A
   368            C        	
   369 01D49 18B8 C        	MOV	A,@(M123_BUF_START+NUM_OFFSET)
   370 01D4A 005C C        	MOV	OFFSET_S,A
   371            C        
   372 01D4B      C        PHONE_1_LOAD123M_LOOP:
   373 01D4B 041E C        	MOV	A,COUNT
   374            C      M 	JPZ	PHONE_FUNC_END
       01D4C 0C83     1     JBC  _STATUS , Z 
       01D4D 140D     1     JMP  PHONE_FUNC_END ,
   375            C        	
   376 01D4E 041C C        	MOV	A,OFFSET_S
   377 01D4F 004C C        	MOV	_RC,A
   378 01D50 040D C        	MOV	A,_RD
   379            C      M 	LCALL	STOR_TELQUE
                      2  M  PAGE #( STOR_TELQUE ),
       01D51 1E87     2     PAGE ( STOR_TELQUE / 1024 ),
       01D52 1343     1     CALL ( STOR_TELQUE % 1024 ),
                      2  M  PAGE #( $ ),
       01D53 1E87     2     PAGE ( $ / 1024 ),
   380            C        	
   381 01D54 01DE C        	DEC	COUNT
   382 01D55 055C C        	INC	OFFSET_S	;next address
   383            C        
   384 01D56 154B C        	JMP	PHONE_1_LOAD123M_LOOP
   385            C        ;---------------------------------------
   386 01D57      C        PHONE_1_MKEY_FLS:
   387            C      M 	DAM_SPK_DISABLE
       01D57 0949     1     BC  _P9 , 5 
   388            C      M 	LCALL	CLR_2TIMER
                      2  M  PAGE #( CLR_2TIMER ),
       01D58 1E8D     2     PAGE ( CLR_2TIMER / 1024 ),
       01D59 1364     1     CALL ( CLR_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01D5A 1E87     2     PAGE ( $ / 1024 ),
   389            C        	
   390 01D5B 136B C        	CALL	GET_TELQUE_LEN
   391 01D5C 005E C        	MOV	COUNT,A
   392            C        ;---stor the tel
   393            C      M 	JPNB	B1_PRO_VAR,5,PHONE_FLS_1
       01D5D 0F61     1     JBS  B1_PRO_VAR , 5 
       01D5E 1561     1     JMP  PHONE_FLS_1 ,
   394            C        	
   395            C      M 	MOV	COUNT,@24
       01D5F 1818     1     MOV A,@( 24 )
       01D60 005E     1     MOV  COUNT ,A
   396 01D61      C        PHONE_FLS_1:
   397 01D61 041E C        	MOV	A,COUNT
   398            C      M 	JPZ	PHONE_DOFLASH
       01D62 0C83     1     JBC  _STATUS , Z 
       01D63 1585     1     JMP  PHONE_DOFLASH ,
   399            C        ;!!!!!!!!!!!!!!!!!!!
   400            C      M 	BLOCK	1
       01D64 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01D65 000A     1     IOW  _IOCA ,
   401            C        
   402            C      M 	MOV	_RC,@NUM_FLAG
       01D66 1862     1     MOV A,@( NUM_FLAG )
       01D67 004C     1     MOV  _RC ,A
   403 01D68 041E C        	MOV	A,COUNT
   404 01D69 004D C        	MOV	_RD,A
   405            C        
   406            C      M 	MOV	_RC,@NAME_FLAG
       01D6A 1863     1     MOV A,@( NAME_FLAG )
       01D6B 004C     1     MOV  _RC ,A
   407 01D6C 00CD C        	CLR	_RD
   408            C        
   409 01D6D 1810 C        	MOV	A,@GROUP_DIAL
   410            C      M 	LCALL	SET_GROUP
                      2  M  PAGE #( SET_GROUP ),
       01D6E 1E83     2     PAGE ( SET_GROUP / 1024 ),
       01D6F 1241     1     CALL ( SET_GROUP % 1024 ),
                      2  M  PAGE #( $ ),
       01D70 1E87     2     PAGE ( $ / 1024 ),
   411            C        	
   412            C      M 	MOV	OFFSET_S,@DATA_ZONE_START		;start address
       01D71 1860     1     MOV A,@( DATA_ZONE_START )
       01D72 005C     1     MOV  OFFSET_S ,A
   413            C      M 	MOV	COUNT,@(DATA_ZONE_END-DATA_ZONE_START)	;length(58bytes)
       01D73 183A     1     MOV A,@(( DATA_ZONE_END - DATA_ZONE_START ))
       01D74 005E     1     MOV  COUNT ,A
   414 01D75      C        PHONE_FLS_STORTEL:
   415            C      M 	BLOCK	1
       01D75 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01D76 000A     1     IOW  _IOCA ,
   416            C        
   417            C      M 	MOV	_RC,OFFSET_S
       01D77 041C     1     MOV A, OFFSET_S 
       01D78 004C     1     MOV  _RC ,A
   418 01D79 040D C        	MOV	A,_RD
   419            C      M 	LCALL	DAT_WRITE
                      2  M  PAGE #( DAT_WRITE ),
       01D7A 1E83     2     PAGE ( DAT_WRITE / 1024 ),
       01D7B 124F     1     CALL ( DAT_WRITE % 1024 ),
                      2  M  PAGE #( $ ),
       01D7C 1E87     2     PAGE ( $ / 1024 ),
   420            C        	
   421 01D7D 055C C        	INC	OFFSET_S
   422            C        	
   423 01D7E 01DE C        	DEC	COUNT
   424 01D7F 041E C        	MOV	A,COUNT
   425            C      M 	JPNZ	PHONE_FLS_STORTEL
       01D80 0E83     1     JBS  _STATUS , Z 
       01D81 1575     1     JMP  PHONE_FLS_STORTEL ,
   426            C        	
   427 01D82      C        PHONE_FLS_STORTEL_END:
   428            C      M 	LCALL	DAT_WRITE_STOP
                      2  M  PAGE #( DAT_WRITE_STOP ),
       01D82 1E83     2     PAGE ( DAT_WRITE_STOP / 1024 ),
       01D83 1253     1     CALL ( DAT_WRITE_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       01D84 1E87     2     PAGE ( $ / 1024 ),
   429            C        
   430            C        ;!!!!!!!!!!!!!!!!!!!	
   431            C        ;---
   432 01D85      C        PHONE_DOFLASH:
   433 01D85 1864 C        	MOV	A,@CTMR100MS			;以100ms为单位
   434            C      M 	LCALL	SET_2TIMER
                      2  M  PAGE #( SET_2TIMER ),
       01D86 1E8D     2     PAGE ( SET_2TIMER / 1024 ),
       01D87 1365     1     CALL ( SET_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01D88 1E87     2     PAGE ( $ / 1024 ),
   435 01D89 00E2 C        	CLR	B1_PRO_VAR1
   436            C      M 	DP_PULSE_L
       01D8A 0948     1     BC  _P8 , 5 
   437 01D8B 1362 C        	CALL	CLR_TELQUE
   438 01D8C 0421 C        	MOV	A,B1_PRO_VAR
   439 01D8D 1AF0 C        	AND	A,@0XF0
   440 01D8E 1903 C        	OR	A,@0X03
   441 01D8F 0061 C        	MOV	B1_PRO_VAR,A
   442            C        	
   443 01D90 140D C        	JMP	PHONE_FUNC_END
   444            C        ;---------------------------------------
   445 01D91      C        PHONE_0_MKEY_RP:
   446 01D91      C        PHONE_1_MKEY_RP:
   447            C        	;JPB	B1_PRO_VAR,5,PHONE_PAUSE
   448            C        	;MOV	A,COUNT
   449            C        	;JPNZ	PHONE_PAUSE
   450 01D91 136B C        	CALL	GET_TELQUE_LEN
   451 01D92 1900 C        	OR	A,@0
   452            C      M 	JPNZ	PHONE_PAUSE
       01D93 0E83     1     JBS  _STATUS , Z 
       01D94 15B6     1     JMP  PHONE_PAUSE ,
   453            C        ;---Redial读出数据
   454 01D95 1810 C        	MOV	A,@GROUP_DIAL
   455            C      M 	LCALL	SET_GROUP
                      2  M  PAGE #( SET_GROUP ),
       01D96 1E83     2     PAGE ( SET_GROUP / 1024 ),
       01D97 1241     1     CALL ( SET_GROUP % 1024 ),
                      2  M  PAGE #( $ ),
       01D98 1E87     2     PAGE ( $ / 1024 ),
   456            C      M 	LCALL	GET_TELT
                      2  M  PAGE #( GET_TELT ),
       01D99 1E83     2     PAGE ( GET_TELT / 1024 ),
       01D9A 1246     1     CALL ( GET_TELT % 1024 ),
                      2  M  PAGE #( $ ),
       01D9B 1E87     2     PAGE ( $ / 1024 ),
   457 01D9C 0415 C        	MOV	A,TEMP0
   458            C      M 	JPZ	PHONE_FUNC_END
       01D9D 0C83     1     JBC  _STATUS , Z 
       01D9E 140D     1     JMP  PHONE_FUNC_END ,
   459 01D9F 0072 C        	MOV	B1_MSG_ID,A
   460            C        
   461            C      M 	MOV	OFFSET_D,@DATA_ZONE_START
       01DA0 1860     1     MOV A,@( DATA_ZONE_START )
       01DA1 005D     1     MOV  OFFSET_D ,A
   462 01DA2      C        PHONE_2_READDIAL_LOOP:
   463 01DA2 0432 C        	MOV	A,B1_MSG_ID
   464            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       01DA3 1E83     2     PAGE ( DAT_READ / 1024 ),
       01DA4 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       01DA5 1E87     2     PAGE ( $ / 1024 ),
   465            C        	
   466            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       01DA6 041D     1     MOV A, OFFSET_D 
       01DA7 004C     1     MOV  _RC ,A
   467            C      M 	MOV	_RD,TEMP0	;the data
       01DA8 0415     1     MOV A, TEMP0 
       01DA9 004D     1     MOV  _RD ,A
   468            C        	
   469 01DAA 055D C        	INC	OFFSET_D	;next address
   470            C        	
   471 01DAB 0416 C        	MOV	A,TEMP1		;Error code
   472            C      M 	JPZ	PHONE_2_READDIAL_LOOP
       01DAC 0C83     1     JBC  _STATUS , Z 
       01DAD 15A2     1     JMP  PHONE_2_READDIAL_LOOP ,
   473            C      M 	LCALL	DAT_READ_STOP
                      2  M  PAGE #( DAT_READ_STOP ),
       01DAE 1E83     2     PAGE ( DAT_READ_STOP / 1024 ),
       01DAF 125B     1     CALL ( DAT_READ_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       01DB0 1E87     2     PAGE ( $ / 1024 ),
   474            C        
   475 01DB1 1864 C        	MOV	A,@CTMR100MS
   476            C      M 	LCALL	SET_2TIMER
                      2  M  PAGE #( SET_2TIMER ),
       01DB2 1E8D     2     PAGE ( SET_2TIMER / 1024 ),
       01DB3 1365     1     CALL ( SET_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01DB4 1E87     2     PAGE ( $ / 1024 ),
   477            C        	
   478 01DB5 140D C        	JMP	PHONE_FUNC_END	
   479            C        ;---------------------------------------	
   480 01DB6      C        PHONE_PAUSE:	
   481 01DB6 1860 C        	MOV	A,@NUM_P
   482            C        ;-------------------
   483 01DB7      C        PHONE_1_MKEY_NUM:
   484            C        
   485 01DB7 1343 C        	CALL	STOR_TELQUE
   486            C        
   487 01DB8 136B C        	CALL	GET_TELQUE_LEN		;the number of length(the pointer of number)
   488 01DB9 1D17 C        	SUB	A,@23
   489            C      M 	JPC	PHONE_1_MKEY_NUM_1
       01DBA 0C03     1     JBC  _STATUS , C 
       01DBB 15BD     1     JMP  PHONE_1_MKEY_NUM_1 ,
   490            C        	
   491 01DBC 0B61 C        	BS	B1_PRO_VAR,5		;the length flag(>24)
   492 01DBD      C        PHONE_1_MKEY_NUM_1:	
   493 01DBD 1864 C        	MOV	A,@CTMR100MS
   494            C      M 	LCALL	SET_2TIMER
                      2  M  PAGE #( SET_2TIMER ),
       01DBE 1E8D     2     PAGE ( SET_2TIMER / 1024 ),
       01DBF 1365     1     CALL ( SET_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01DC0 1E87     2     PAGE ( $ / 1024 ),
   495            C        	
   496 01DC1 140D C        	JMP	PHONE_FUNC_END
   497            C        ;---------------------------------------
   498 01DC2      C        PHONE_0_HOOKON:
   499 01DC2      C        PHONE_1_HOOKON:
   500            C      M 	DAM_SPK_ENABLE		;Disable SPK
       01DC2 0B49     1     BS  _P9 , 5 
   501 01DC3 15CC C        	JMP	PHONE_STATE
   502            C        ;---------------------------------------
   503 01DC4      C        PHONE_0_MKEY_SPK:
   504 01DC4      C        PHONE_1_MKEY_SPK:
   505            C        
   506            C      M 	HF_HOOK_COM			;HF ON/OFF COM
       01DC4 0408     1     MOV A, _P8 
       01DC5 1B10     1     XOR A,@(( 1 << 4 ))
       01DC6 0048     1     MOV  _P8 ,A
   507            C      M 	REFURBISH_ICON
                      2  M  BLOCK  0 
       01DC7 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       01DC8 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       01DC9 1880     2     MOV A,@( LCD_CTRL )
       01DCA 004C     2     MOV  _RC ,A
       01DCB 0B0D     1     BS  _RD , 4 
   508            C        
   509 01DCC      C        PHONE_STATE:
   510            C      M 	JPB	_P8,4,PHONE_FUNC_1_HFWORK	;HF WORK ?
       01DCC 0D08     1     JBC  _P8 , 4 
       01DCD 161D     1     JMP  PHONE_FUNC_1_HFWORK ,
   511            C        ;---
   512            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       01DCE 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       01DCF 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       01DD0 1E87     2     PAGE ( $ / 1024 ),
   513 01DD1 18FD C        	MOV	A,@~(1<<1)		;SPK icon off
   514            C      M 	LCALL	CLRVGASTAMP1
                      2  M  PAGE #( CLRVGASTAMP1 ),
       01DD2 1E8C     2     PAGE ( CLRVGASTAMP1 / 1024 ),
       01DD3 100C     1     CALL ( CLRVGASTAMP1 % 1024 ),
                      2  M  PAGE #( $ ),
       01DD4 1E87     2     PAGE ( $ / 1024 ),
   515            C      M 	DAM_SPK_DISABLE
       01DD5 0949     1     BC  _P9 , 5 
   516            C        	;HF_HOOK_L
   517            C      M 	HFLED_H		;Off
       01DD6 0BC9     1     BS  _P9 , 7 
   518            C        	
   519            C      M 	JPNB	_P7,4,PHONE_FUNC_END	;HS WORK ?
       01DD7 0F07     1     JBS  _P7 , 4 
       01DD8 140D     1     JMP  PHONE_FUNC_END ,
   520            C        ;---HF/HS all exit!!!!!!!!!!!!!!!!!!!!!!
   521            C        
   522            C      M 	DAM_SPK_DISABLE
       01DD9 0949     1     BC  _P9 , 5 
   523            C      M 	LCALL	CLR_2TIMER
                      2  M  PAGE #( CLR_2TIMER ),
       01DDA 1E8D     2     PAGE ( CLR_2TIMER / 1024 ),
       01DDB 1364     1     CALL ( CLR_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01DDC 1E87     2     PAGE ( $ / 1024 ),
   524            C        	
   525 01DDD 187F C        	MOV	A,@~(1<<7)		;Mute icon off
   526            C      M 	LCALL	CLRVGASTAMP1
                      2  M  PAGE #( CLRVGASTAMP1 ),
       01DDE 1E8C     2     PAGE ( CLRVGASTAMP1 / 1024 ),
       01DDF 100C     1     CALL ( CLRVGASTAMP1 % 1024 ),
                      2  M  PAGE #( $ ),
       01DE0 1E87     2     PAGE ( $ / 1024 ),
   527            C        	
   528 01DE1 136B C        	CALL	GET_TELQUE_LEN
   529 01DE2 005E C        	MOV	COUNT,A
   530            C        ;---stor the tel
   531            C      M 	JPNB	B1_PRO_VAR,5,PHONE_EXIT_1
       01DE3 0F61     1     JBS  B1_PRO_VAR , 5 
       01DE4 15E7     1     JMP  PHONE_EXIT_1 ,
   532            C        	
   533            C      M 	MOV	COUNT,@24
       01DE5 1818     1     MOV A,@( 24 )
       01DE6 005E     1     MOV  COUNT ,A
   534 01DE7      C        PHONE_EXIT_1:
   535 01DE7 041E C        	MOV	A,COUNT
   536            C      M 	JPZ	PHONE_EXIT_STORTEL_END
       01DE8 0C83     1     JBC  _STATUS , Z 
       01DE9 1616     1     JMP  PHONE_EXIT_STORTEL_END ,
   537            C        ;!!!!!!!!!!!!!!!!!!!
   538            C        
   539            C      M 	BLOCK	1
       01DEA 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01DEB 000A     1     IOW  _IOCA ,
   540            C        
   541            C      M 	MOV	_RC,@NUM_FLAG
       01DEC 1862     1     MOV A,@( NUM_FLAG )
       01DED 004C     1     MOV  _RC ,A
   542 01DEE 041E C        	MOV	A,COUNT
   543 01DEF 004D C        	MOV	_RD,A
   544            C      M 	MOV	_RC,@NAME_FLAG
       01DF0 1863     1     MOV A,@( NAME_FLAG )
       01DF1 004C     1     MOV  _RC ,A
   545 01DF2 00CD C        	CLR	_RD
   546            C        ;-the talked time
   547            C      M 	MOV	_RC,@PHOUR_START
       01DF3 1897     1     MOV A,@( PHOUR_START )
       01DF4 004C     1     MOV  _RC ,A
   548 01DF5 00CD C        	CLR	_RD
   549            C        
   550            C      M 	MOV	_RC,@PMIN_START
       01DF6 1898     1     MOV A,@( PMIN_START )
       01DF7 004C     1     MOV  _RC ,A
   551 01DF8 0434 C        	MOV	A,B1_MIN_REG
   552 01DF9 004D C        	MOV	_RD,A
   553            C        
   554            C      M 	MOV	_RC,@PSEC_START
       01DFA 1899     1     MOV A,@( PSEC_START )
       01DFB 004C     1     MOV  _RC ,A
   555 01DFC 0433 C        	MOV	A,B1_SEC_REG
   556 01DFD 004D C        	MOV	_RD,A
   557            C        
   558 01DFE 1810 C        	MOV	A,@GROUP_DIAL
   559            C      M 	LCALL	SET_GROUP
                      2  M  PAGE #( SET_GROUP ),
       01DFF 1E83     2     PAGE ( SET_GROUP / 1024 ),
       01E00 1241     1     CALL ( SET_GROUP % 1024 ),
                      2  M  PAGE #( $ ),
       01E01 1E87     2     PAGE ( $ / 1024 ),
   560            C        	
   561            C      M 	MOV	OFFSET_S,@DATA_ZONE_START		;start address
       01E02 1860     1     MOV A,@( DATA_ZONE_START )
       01E03 005C     1     MOV  OFFSET_S ,A
   562            C      M 	MOV	COUNT,@(DATA_ZONE_END-DATA_ZONE_START)	;length(55bytes)
       01E04 183A     1     MOV A,@(( DATA_ZONE_END - DATA_ZONE_START ))
       01E05 005E     1     MOV  COUNT ,A
   563 01E06      C        PHONE_EXIT_STORTEL:
   564            C      M 	BLOCK	1
       01E06 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01E07 000A     1     IOW  _IOCA ,
   565            C        
   566            C      M 	MOV	_RC,OFFSET_S
       01E08 041C     1     MOV A, OFFSET_S 
       01E09 004C     1     MOV  _RC ,A
   567 01E0A 040D C        	MOV	A,_RD
   568            C      M 	LCALL	DAT_WRITE
                      2  M  PAGE #( DAT_WRITE ),
       01E0B 1E83     2     PAGE ( DAT_WRITE / 1024 ),
       01E0C 124F     1     CALL ( DAT_WRITE % 1024 ),
                      2  M  PAGE #( $ ),
       01E0D 1E87     2     PAGE ( $ / 1024 ),
   569            C        	
   570 01E0E 055C C        	INC	OFFSET_S
   571            C        	
   572 01E0F 01DE C        	DEC	COUNT
   573 01E10 041E C        	MOV	A,COUNT
   574            C      M 	JPNZ	PHONE_EXIT_STORTEL
       01E11 0E83     1     JBS  _STATUS , Z 
       01E12 1606     1     JMP  PHONE_EXIT_STORTEL ,
   575            C      M 	LCALL	DAT_WRITE_STOP
                      2  M  PAGE #( DAT_WRITE_STOP ),
       01E13 1E83     2     PAGE ( DAT_WRITE_STOP / 1024 ),
       01E14 1253     1     CALL ( DAT_WRITE_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       01E15 1E87     2     PAGE ( $ / 1024 ),
   576            C        
   577 01E16      C        PHONE_EXIT_STORTEL_END:
   578            C        ;!!!The reason not exit phone state directly is that HOOK status alternate and produce a RING-OFF message(an low pulse) 
   579            C        
   580            C      M 	MOV	B1_PRO_VAR,@5		;Delay 125ms before exit to idle
       01E16 1805     1     MOV A,@( 5 )
       01E17 0061     1     MOV  B1_PRO_VAR ,A
   581 01E18 1802 C        	MOV	A,@CTMR125MS
   582            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       01E19 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       01E1A 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01E1B 1E87     2     PAGE ( $ / 1024 ),
   583            C        	
   584 01E1C 140D C        	JMP	PHONE_FUNC_END
   585            C        ;---------------------------------------
   586 01E1D      C        PHONE_FUNC_1_HFWORK:			;HF WORK
   587            C      M 	DAM_SPK_ENABLE
       01E1D 0B49     1     BS  _P9 , 5 
   588            C        	;HF_HOOK_H
   589            C      M 	HFLED_L				;On
       01E1E 09C9     1     BC  _P9 , 7 
   590 01E1F 1802 C        	MOV	A,@(1<<1)		;SPK icon on
   591            C      M 	LCALL	VGASTAMP1
                      2  M  PAGE #( VGASTAMP1 ),
       01E20 1E8C     2     PAGE ( VGASTAMP1 / 1024 ),
       01E21 1000     1     CALL ( VGASTAMP1 % 1024 ),
                      2  M  PAGE #( $ ),
       01E22 1E87     2     PAGE ( $ / 1024 ),
   592            C        ;!!!
   593            C        
   594            C        ;!!!
   595 01E23 140D C        	JMP	PHONE_FUNC_END
   596            C        
   597            C        ;-------------------------------------------------------------------------------
   598 01E24      C        PHONE_1:
   599 01E24      C        PHONE_2:		;dialing
   600            C        
   601 01E24 1880 C        	MOV 	A,@CMSG_MKEY
   602 01E25 0120 C        	SUB 	A,B1_MSG
   603            C      M 	JPZ 	PHONE_1_MKEY
       01E26 0C83     1     JBC  _STATUS , Z 
       01E27 14D0     1     JMP  PHONE_1_MKEY ,
   604            C        
   605 01E28 1897 C        	MOV 	A,@CMSG_TMR2
   606 01E29 0120 C        	SUB 	A,B1_MSG
   607            C      M 	JPZ 	PHONE_1_2TMR
       01E2A 0C83     1     JBC  _STATUS , Z 
       01E2B 1639     1     JMP  PHONE_1_2TMR ,
   608            C        
   609 01E2C 1898 C        	MOV 	A,@CMSG_TMR
   610 01E2D 0120 C        	SUB 	A,B1_MSG
   611            C      M 	JPZ 	PHONE_1_TMR
       01E2E 0C83     1     JBC  _STATUS , Z 
       01E2F 149C     1     JMP  PHONE_1_TMR ,
   612            C        
   613 01E30 1893 C        	MOV	A,@CHOOK_OFF
   614 01E31 0120 C        	SUB	A,B1_MSG
   615            C      M 	JPZ	PHONE_1_HOOKOFF
       01E32 0C83     1     JBC  _STATUS , Z 
       01E33 149A     1     JMP  PHONE_1_HOOKOFF ,
   616            C        
   617 01E34 1892 C        	MOV	A,@CHOOK_ON
   618 01E35 0120 C        	SUB	A,B1_MSG
   619            C      M 	JPZ	PHONE_1_HOOKON
       01E36 0C83     1     JBC  _STATUS , Z 
       01E37 15C2     1     JMP  PHONE_1_HOOKON ,
   620            C        
   621 01E38 140D C        	JMP	PHONE_FUNC_END
   622            C        ;---------------------------------------
   623 01E39      C        PHONE_1_2TMR:			;(0-dialing/1-waiting)
   624 01E39 1864 C        	MOV	A,@CTMR100MS
   625            C      M 	LCALL	SET_2TIMER
                      2  M  PAGE #( SET_2TIMER ),
       01E3A 1E8D     2     PAGE ( SET_2TIMER / 1024 ),
       01E3B 1365     1     CALL ( SET_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01E3C 1E87     2     PAGE ( $ / 1024 ),
   626            C        
   627            C      M 	JPB	B1_PRO_VAR,6,PHONE_1_2TMR_DIAL
       01E3D 0DA1     1     JBC  B1_PRO_VAR , 6 
       01E3E 1668     1     JMP  PHONE_1_2TMR_DIAL ,
   628            C        	
   629 01E3F      C        PHONE_1_2TMR_WAIT:
   630 01E3F 131F C        	CALL	GET_TELQUE
   631            C      M 	JPNC	PHONE_1_2TMR_WAIT_1
       01E40 0E03     1     JBS  _STATUS , C 
       01E41 1667     1     JMP  PHONE_1_2TMR_WAIT_1 ,
   632 01E42 0069 C        	MOV	B1_DTMF_VAL,A
   633            C        ;---Disp Update	
   634            C      M 	BLOCK	0
       01E43 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       01E44 000A     1     IOW  _IOCA ,
   635            C      M 	MOV	OFFSET_S,@(LCD_2NDLINE+1)
       01E45 188E     1     MOV A,@(( LCD_2NDLINE + 1 ))
       01E46 005C     1     MOV  OFFSET_S ,A
   636            C      M 	MOV	OFFSET_D,@(LCD_2NDLINE)	
       01E47 188D     1     MOV A,@( LCD_2NDLINE )
       01E48 005D     1     MOV  OFFSET_D ,A
   637            C      M 	MOV	COUNT,@14
       01E49 180E     1     MOV A,@( 14 )
       01E4A 005E     1     MOV  COUNT ,A
   638            C      M 	LCALL	MOVE_DATA
                      2  M  PAGE #( MOVE_DATA ),
       01E4B 1E82     2     PAGE ( MOVE_DATA / 1024 ),
       01E4C 1056     1     CALL ( MOVE_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       01E4D 1E87     2     PAGE ( $ / 1024 ),
   639            C        	
   640            C      M 	MOV	_RC,@(LCD_2NDLINE+LENGTH2NDL-1)
       01E4E 189B     1     MOV A,@((( LCD_2NDLINE + LENGTH2NDL )- 1 ))
       01E4F 004C     1     MOV  _RC ,A
   641            C      M 	MOV	_RD,B1_DTMF_VAL
       01E50 0429     1     MOV A, B1_DTMF_VAL 
       01E51 004D     1     MOV  _RD ,A
   642            C        ;---
   643            C      M 	REFURBISH_2NDL
                      2  M  BLOCK  0 
       01E52 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       01E53 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       01E54 1880     2     MOV A,@( LCD_CTRL )
       01E55 004C     2     MOV  _RC ,A
       01E56 0B8D     1     BS  _RD , 6 
   644 01E57 0BA1 C        	BS	B1_PRO_VAR,6
   645            C        ;---mute mic	
   646            C        	;CLRA
   647            C        	;CALL	SET_MIC_GAIN
   648            C        ;---spk
   649            C        	;MOV	A,@1
   650            C        	;CALL	SET_SPKVOL		;0X5F20
   651            C        ;---dial	
   652 01E58 0429 C        	MOV	A,B1_DTMF_VAL
   653 01E59 1D60 C        	SUB	A,@NUM_P
   654            C      M 	JPZ	PHONE_1_2TMR_PAUSE
       01E5A 0C83     1     JBC  _STATUS , Z 
       01E5B 1664     1     JMP  PHONE_1_2TMR_PAUSE ,
   655            C        
   656 01E5C 0429 C        	MOV	A,B1_DTMF_VAL
   657            C      M 	LCALL	DTMFO_TAB
                      2  M  PAGE #( DTMFO_TAB ),
       01E5D 1E8E     2     PAGE ( DTMFO_TAB / 1024 ),
       01E5E 10C8     1     CALL ( DTMFO_TAB % 1024 ),
                      2  M  PAGE #( $ ),
       01E5F 1E87     2     PAGE ( $ / 1024 ),
   658            C      M 	PHONE_STARTDIAL
       01E60 004B     1     MOV  _RB ,A
   659            C        
   660            C      M 	XMUTE_L
       01E61 0888     1     BC  _P8 , 2 
   661            C      M 	MUTE_L
       01E62 08C8     1     BC  _P8 , 3 
   662            C        
   663 01E63 140D C        	JMP	PHONE_FUNC_END
   664            C        ;-----------------------------
   665 01E64      C        PHONE_1_2TMR_PAUSE:
   666 01E64 00E2 C        	CLR	B1_PRO_VAR1		;暂停计时清0
   667 01E65 0BE1 C        	BS	B1_PRO_VAR,7
   668 01E66 140D C        	JMP	PHONE_FUNC_END	
   669            C        ;-----------------------------
   670 01E67      C        PHONE_1_2TMR_WAIT_1:
   671            C        	;PHONE_STOPDIAL
   672            C        	;BC	B1_PRO_VAR,6
   673 01E67 140D C        	JMP	PHONE_FUNC_END
   674            C        
   675            C        ;-----------------------------	
   676 01E68      C        PHONE_1_2TMR_DIAL:
   677            C      M 	JPNB	B1_PRO_VAR,7,PHONE_1_2TMR_DIALOVER	;正在拔的不是暂停吗?
       01E68 0FE1     1     JBS  B1_PRO_VAR , 7 
       01E69 1670     1     JMP  PHONE_1_2TMR_DIALOVER ,
   678            C        
   679 01E6A 0562 C        	INC	B1_PRO_VAR1
   680            C        
   681 01E6B 0422 C        	MOV	A,B1_PRO_VAR1
   682 01E6C 1D24 C        	SUB	A,@36		
   683            C      M 	JPNZ	PHONE_FUNC_END				;暂停时间到了吗(100ms*36)?
       01E6D 0E83     1     JBS  _STATUS , Z 
       01E6E 140D     1     JMP  PHONE_FUNC_END ,
   684            C        
   685 01E6F 09E1 C        	BC	B1_PRO_VAR,7			;Clear pause bit
   686 01E70      C        PHONE_1_2TMR_DIALOVER:		;进入拔号间隙
   687 01E70 1371 C        	CALL	EMPTY_TELQUE
   688            C      M 	JPC	PHONE_1_2TMR_CHKKEY		;No data in dial queue
       01E71 0C03     1     JBC  _STATUS , C 
       01E72 1677     1     JMP  PHONE_1_2TMR_CHKKEY ,
   689            C        ;---有号码
   690            C        ;---stop dial and wait for next dial-num
   691            C      M 	PHONE_STOPDIAL
                      2  M  MOV  _RB ,@( 255 )
       01E73 18FF     2     MOV A,@( 255 )
       01E74 004B     2     MOV  _RB ,A
   692 01E75 09A1 C        	BC	B1_PRO_VAR,6
   693 01E76 140D C        	JMP	PHONE_FUNC_END
   694            C        
   695            C        ;-----------------------------
   696 01E77      C        PHONE_1_2TMR_CHKKEY:				;已拔号100ms,查队列后再查按键
   697            C      M 	LCALL	KEYPRESS_CHK
                      2  M  PAGE #( KEYPRESS_CHK ),
       01E77 1E81     2     PAGE ( KEYPRESS_CHK / 1024 ),
       01E78 114A     1     CALL ( KEYPRESS_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01E79 1E87     2     PAGE ( $ / 1024 ),
   698            C      M 	JPC	PHONE_1_2TMR_KEYPRESS
       01E7A 0C03     1     JBC  _STATUS , C 
       01E7B 1683     1     JMP  PHONE_1_2TMR_KEYPRESS ,
   699            C        ;---key released	
   700            C      M 	PHONE_STOPDIAL	;???????????????????????????????????
                      2  M  MOV  _RB ,@( 255 )
       01E7C 18FF     2     MOV A,@( 255 )
       01E7D 004B     2     MOV  _RB ,A
   701 01E7E 09A1 C        	BC	B1_PRO_VAR,6
   702            C        	
   703            C      M 	XMUTE_H
       01E7F 0A88     1     BS  _P8 , 2 
   704 01E80 0EE1 C        	JBS	B1_PRO_VAR,3	;是Mute状态吗?
   705            C      M 	MUTE_H			;C1
       01E81 0AC8     1     BS  _P8 , 3 
   706            C        
   707 01E82 140D C        	JMP	PHONE_FUNC_END
   708 01E83      C        PHONE_1_2TMR_KEYPRESS:			;按键持续按下,继续发DTMF拔号音
   709            C        
   710 01E83 140D C        	JMP	PHONE_FUNC_END
   711            C        ;-------------------------------------------------------------------------------
   712 01E84      C        PHONE_3:
   713 01E84 1897 C        	MOV 	A,@CMSG_TMR2
   714 01E85 0120 C        	SUB 	A,B1_MSG
   715            C      M 	JPZ 	PHONE_3_2TMR
       01E86 0C83     1     JBC  _STATUS , Z 
       01E87 1689     1     JMP  PHONE_3_2TMR ,
   716            C        	
   717 01E88 140D C        	JMP	PHONE_FUNC_END
   718            C        ;---------------------------------------
   719 01E89      C        PHONE_3_2TMR:
   720 01E89 0562 C        	INC	B1_PRO_VAR1
   721            C        	
   722 01E8A 0425 C        	MOV	A,B1_FLASH
   723            C      M 	LCALL	FLASH_TAB
                      2  M  PAGE #( FLASH_TAB ),
       01E8B 1E87     2     PAGE ( FLASH_TAB / 1024 ),
       01E8C 100F     1     CALL ( FLASH_TAB % 1024 ),
                      2  M  PAGE #( $ ),
       01E8D 1E87     2     PAGE ( $ / 1024 ),
   724 01E8E 0122 C        	SUB	A,B1_PRO_VAR1
   725            C      M 	JPNZ	PHONE_FUNC_END
       01E8F 0E83     1     JBS  _STATUS , Z 
       01E90 140D     1     JMP  PHONE_FUNC_END ,
   726            C        ;---时间到
   727            C      M 	MOV	B1_PRO_VAR,@0X11
       01E91 1811     1     MOV A,@( 17 )
       01E92 0061     1     MOV  B1_PRO_VAR ,A
   728            C        	
   729            C      M 	LCALL	CLR_2TIMER
                      2  M  PAGE #( CLR_2TIMER ),
       01E93 1E8D     2     PAGE ( CLR_2TIMER / 1024 ),
       01E94 1364     1     CALL ( CLR_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01E95 1E87     2     PAGE ( $ / 1024 ),
   730            C      M 	DP_PULSE_H
       01E96 0B48     1     BS  _P8 , 5 
   731            C        	
   732 01E97 148D C        	JMP	PHONE_0_DISP	;!!!!!!!!!!!!!!!!!!!!!!!!!!!
   733            C        ;-------------------------------------------------------------------------------
   734 01E98      C        PHONE_4:
   735 01E98 1893 C        	MOV	A,@CHOOK_OFF
   736 01E99 0120 C        	SUB	A,B1_MSG
   737            C      M 	JPZ	PHONE_4_HOOKOFF
       01E9A 0C83     1     JBC  _STATUS , Z 
       01E9B 16F1     1     JMP  PHONE_4_HOOKOFF ,
   738            C        	
   739 01E9C 1880 C        	MOV 	A,@CMSG_MKEY
   740 01E9D 0120 C        	SUB 	A,B1_MSG
   741            C      M 	JPZ 	PHONE_4_MKEY
       01E9E 0C83     1     JBC  _STATUS , Z 
       01E9F 16B1     1     JMP  PHONE_4_MKEY ,
   742            C        	
   743 01EA0 1898 C        	MOV 	A,@CMSG_TMR
   744 01EA1 0120 C        	SUB 	A,B1_MSG
   745            C      M 	JPZ 	PHONE_4_TMR
       01EA2 0C83     1     JBC  _STATUS , Z 
       01EA3 16A5     1     JMP  PHONE_4_TMR ,
   746            C        
   747 01EA4 140D C        	JMP	PHONE_FUNC_END
   748            C        ;-------------------------------------------------------------------------------
   749 01EA5      C        PHONE_4_TMR:
   750 01EA5 0562 C        	INC	B1_PRO_VAR1
   751            C        	
   752            C      M 	JPB	B1_PRO_VAR,4,PHONE_4_TMRDIAL
       01EA6 0D21     1     JBC  B1_PRO_VAR , 4 
       01EA7 16A9     1     JMP  PHONE_4_TMRDIAL ,
   753            C        	
   754 01EA8 140D C        	JMP	PHONE_FUNC_END
   755            C        ;---------------------------------------
   756 01EA9      C        PHONE_4_TMRDIAL:
   757 01EA9 00E2 C        	CLR	B1_PRO_VAR1
   758 01EAA 1864 C        	MOV	A,@CTMR100MS
   759            C      M 	LCALL	SET_2TIMER
                      2  M  PAGE #( SET_2TIMER ),
       01EAB 1E8D     2     PAGE ( SET_2TIMER / 1024 ),
       01EAC 1365     1     CALL ( SET_2TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01EAD 1E87     2     PAGE ( $ / 1024 ),
   760            C        	
   761            C      M 	MOV	B1_PRO_VAR,@0X12
       01EAE 1812     1     MOV A,@( 18 )
       01EAF 0061     1     MOV  B1_PRO_VAR ,A
   762            C        	
   763 01EB0 140D C        	JMP	PHONE_FUNC_END
   764            C        ;---------------------------------------
   765 01EB1      C        PHONE_4_MKEY:
   766 01EB1 00E2 C        	CLR	B1_PRO_VAR1
   767            C        	
   768 01EB2 1823 C        	MOV	A,@CKEY_DEL
   769            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01EB3 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01EB4 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01EB5 1E87     2     PAGE ( $ / 1024 ),
   770            C      M 	JPNC	PHONE_4_MKEY_DEL
       01EB6 0E03     1     JBS  _STATUS , C 
       01EB7 16D2     1     JMP  PHONE_4_MKEY_DEL ,
   771 01EB8 1826 C        	MOV	A,@CKEY_RP
   772            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01EB9 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01EBA 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01EBB 1E87     2     PAGE ( $ / 1024 ),
   773            C      M 	JPNC	PHONE_4_MKEY_RP
       01EBC 0E03     1     JBS  _STATUS , C 
       01EBD 16DB     1     JMP  PHONE_4_MKEY_RP ,
   774            C        	
   775 01EBE 1827 C        	MOV	A,@CKEY_SPK
   776            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       01EBF 1E81     2     PAGE ( KEY_CHK / 1024 ),
       01EC0 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01EC1 1E87     2     PAGE ( $ / 1024 ),
   777            C      M 	JPNC	PHONE_4_MKEY_SPK
       01EC2 0E03     1     JBS  _STATUS , C 
       01EC3 16F1     1     JMP  PHONE_4_MKEY_SPK ,
   778            C        
   779            C      M 	LCALL	DIALKEY_CHK
                      2  M  PAGE #( DIALKEY_CHK ),
       01EC4 1E82     2     PAGE ( DIALKEY_CHK / 1024 ),
       01EC5 1203     1     CALL ( DIALKEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       01EC6 1E87     2     PAGE ( $ / 1024 ),
   780            C      M 	JPC	PHONE_4_MKEY_NUM	;Num 
       01EC7 0C03     1     JBC  _STATUS , C 
       01EC8 16DC     1     JMP  PHONE_4_MKEY_NUM ,
   781            C        
   782 01EC9 1880 C        	MOV	A,@CMSG_MKEY
   783            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       01ECA 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       01ECB 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       01ECC 1E87     2     PAGE ( $ / 1024 ),
   784 01ECD 00E1 C        	CLR	B1_PRO_VAR
   785            C      M 	LCALL	CLR_PRO_STACK
                      2  M  PAGE #( CLR_PRO_STACK ),
       01ECE 1E8D     2     PAGE ( CLR_PRO_STACK / 1024 ),
       01ECF 1352     1     CALL ( CLR_PRO_STACK % 1024 ),
                      2  M  PAGE #( $ ),
       01ED0 1E87     2     PAGE ( $ / 1024 ),
   786            C        	
   787 01ED1 140D C        	JMP	PHONE_FUNC_END
   788            C        ;---------------------------------------
   789 01ED2      C        PHONE_4_MKEY_DEL:
   790            C        ;-length adjust	
   791 01ED2 042E C        	MOV	A,B1_CID_T
   792            C      M 	JPZ	PHONE_EXIT_STORTEL_END	
       01ED3 0C83     1     JBC  _STATUS , Z 
       01ED4 1616     1     JMP  PHONE_EXIT_STORTEL_END ,
   793            C        
   794 01ED5 1358 C        	CALL	PUT_TELQUE		;退出队列
   795 01ED6 01EE C        	DEC	B1_CID_T		;decrease the length
   796            C        	
   797 01ED7 042E C        	MOV	A,B1_CID_T
   798            C      M 	JPZ	PHONE_EXIT_STORTEL_END
       01ED8 0C83     1     JBC  _STATUS , Z 
       01ED9 1616     1     JMP  PHONE_EXIT_STORTEL_END ,
   799            C        
   800 01EDA 1458 C        	JMP	PHONE_4_NUMKEY_DISP
   801            C        ;---------------------------------------
   802 01EDB      C        PHONE_4_MKEY_RP:
   803 01EDB 1860 C        	MOV	A,@NUM_P
   804            C        ;---------------------------------------
   805 01EDC      C        PHONE_4_MKEY_NUM:
   806 01EDC 0071 C        	MOV	B1_MSG_N,A
   807            C        ;-length adjust	
   808 01EDD 042E C        	MOV	A,B1_CID_T
   809 01EDE 1D20 C        	SUB	A,@32
   810            C      M 	JPZ	PHONE_FUNC_END	
       01EDF 0C83     1     JBC  _STATUS , Z 
       01EE0 140D     1     JMP  PHONE_FUNC_END ,
   811            C        ;-Save data
   812 01EE1 0431 C        	MOV	A,B1_MSG_N
   813 01EE2 1343 C        	CALL	STOR_TELQUE
   814            C        
   815 01EE3 056E C        	INC	B1_CID_T
   816 01EE4 1458 C        	JMP	PHONE_4_NUMKEY_DISP
   817            C        ;---------------------------------------
   818 01EE5      C        PHONE_0_DIAL:
   819 01EE5 1804 C        	MOV	A,@4
   820 01EE6 0061 C        	MOV	B1_PRO_VAR,A
   821            C        	
   822            C      M 	BLOCK	1
       01EE7 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01EE8 000A     1     IOW  _IOCA ,
   823            C      M 	MOV	_RC,@NUM_FLAG
       01EE9 1862     1     MOV A,@( NUM_FLAG )
       01EEA 004C     1     MOV  _RC ,A
   824 01EEB 040D C        	MOV	A,_RD		;!!!the stor data pointer
   825 01EEC 1A3F C        	AND	A,@0X3F
   826 01EED 004D C        	MOV	_RD,A
   827            C      M 	MOV	_RC,@NAME_FLAG
       01EEE 1863     1     MOV A,@( NAME_FLAG )
       01EEF 004C     1     MOV  _RC ,A
   828 01EF0 00CD C        	CLR	_RD		;!!!Clean the get data pointer
   829 01EF1      C        PHONE_4_MKEY_SPK:
   830 01EF1      C        PHONE_4_HOOKOFF:
   831            C      M 	LCALL	CLR_TIMER
                      2  M  PAGE #( CLR_TIMER ),
       01EF1 1E8D     2     PAGE ( CLR_TIMER / 1024 ),
       01EF2 1358     1     CALL ( CLR_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01EF3 1E87     2     PAGE ( $ / 1024 ),
   832 01EF4 0B21 C        	BS	B1_PRO_VAR,4	;for dial
   833            C        
   834            C      M 	REFURBISH_ICON
                      2  M  BLOCK  0 
       01EF5 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       01EF6 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       01EF7 1880     2     MOV A,@( LCD_CTRL )
       01EF8 004C     2     MOV  _RC ,A
       01EF9 0B0D     1     BS  _RD , 4 
   835            C      M 	HF_HOOK_H
       01EFA 0B08     1     BS  _P8 , 4 
   836            C      M 	HFLED_L		;On
       01EFB 09C9     1     BC  _P9 , 7 
   837            C        ;---
   838 01EFC 1810 C        	MOV	A,@CTMR1S
   839            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       01EFD 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       01EFE 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       01EFF 1E87     2     PAGE ( $ / 1024 ),
   840            C        	
   841            C      M 	XMUTE_H
       01F00 0A88     1     BS  _P8 , 2 
   842            C      M 	MUTE_H
       01F01 0AC8     1     BS  _P8 , 3 
   843            C      M 	DAM_MIC_DISABLE
       01F02 0909     1     BC  _P9 , 4 
   844            C        
   845 01F03 00F3 C        	CLR	B1_SEC_REG	;计时
   846 01F04 00F4 C        	CLR	B1_MIN_REG
   847 01F05 00F5 C        	CLR	B1_HOUR_REG
   848            C        
   849            C      M 	PAGE	#(VGA)
       01F06 1E8C     1     PAGE ( VGA / 1024 ),
   850 01F07 111E C        	CALL	VGABLANKNUM2
   851 01F08 1127 C        	CALL	VGABLANKCHAR
   852 01F09 1802 C        	MOV	A,@(1<<1)
   853 01F0A 1000 C        	CALL	VGASTAMP1
   854            C      M 	PAGE	#($)
       01F0B 1E87     1     PAGE ( $ / 1024 ),
   855            C        
   856 01F0C 14AE C        	JMP	PHONE_4_TMR_DISP
   857            C        ;-------------------------------------------------------------------------------
   858 01F0D      C        PHONE_5:
   859 01F0D 1898 C        	MOV	A,@CMSG_TMR
   860 01F0E 0120 C        	SUB	A,B1_MSG
   861            C      M 	JPZ	PHONE_5_TMR
       01F0F 0C83     1     JBC  _STATUS , Z 
       01F10 1716     1     JMP  PHONE_5_TMR ,
   862            C        
   863            C        if	0	
   864            C        	JMP	PHONE_FUNC_END
   865            C        else
   866 01F11 0420 C        	MOV	A,B1_MSG
   867            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       01F12 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       01F13 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       01F14 1E87     2     PAGE ( $ / 1024 ),
   868 01F15 171A C        	JMP	PHONE_5_EXIT
   869            C        endif
   870            C        ;---------------------------------------
   871 01F16      C        PHONE_5_TMR:
   872 01F16 1890 C        	MOV	A,@CMSG_INIT
   873            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       01F17 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       01F18 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       01F19 1E87     2     PAGE ( $ / 1024 ),
   874 01F1A      C        PHONE_5_EXIT:	
   875 01F1A 00E1 C        	CLR	B1_PRO_VAR
   876            C      M 	LCALL	CLR_PRO_STACK
                      2  M  PAGE #( CLR_PRO_STACK ),
       01F1B 1E8D     2     PAGE ( CLR_PRO_STACK / 1024 ),
       01F1C 1352     1     CALL ( CLR_PRO_STACK % 1024 ),
                      2  M  PAGE #( $ ),
       01F1D 1E87     2     PAGE ( $ / 1024 ),
   877            C        	
   878 01F1E 140D C        	JMP	PHONE_FUNC_END
   879            C        ;-------------------------------------------------------------------------------
   880            C        ;	Function : GET_TELQUE	
   881            C        ;	从以NUM_START为起始地址以NUM_FLAG为指针的队列取数据(一个字节)
   882            C        ;	INPUT : 
   883            C        ;
   884            C        ;	output: ACC = the data you got
   885            C        ;		C = 1/0 - valid/not
   886            C        ;!Note:用到缓冲特性:from 0 to 63,如果到顶,回转到32处
   887            C        ;0 -> 1 -> 2 -> 3 -> .. -> 31 -> 32 -> .. -> 63
   888            C        ;				  |___________|
   889            C        ;-------------------------------------------------------------------------------
   890 01F1F      C        GET_TELQUE:			;for redial
   891            C      M 	BLOCK	1
       01F1F 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01F20 000A     1     IOW  _IOCA ,
   892            C        
   893            C      M 	MOV	_RC,@NAME_FLAG
       01F21 1863     1     MOV A,@( NAME_FLAG )
       01F22 004C     1     MOV  _RC ,A
   894            C      M 	MOV	TEMP1,_RD
       01F23 040D     1     MOV A, _RD 
       01F24 0056     1     MOV  TEMP1 ,A
   895            C      M 	MOV	_RC,@NUM_FLAG
       01F25 1862     1     MOV A,@( NUM_FLAG )
       01F26 004C     1     MOV  _RC ,A
   896 01F27 040D C        	MOV	A,_RD
   897 01F28 0116 C        	SUB	A,TEMP1
   898            C      M 	JPZ	GET_TELQUE_END		;(pGet = pStor)No data
       01F29 0C83     1     JBC  _STATUS , Z 
       01F2A 1741     1     JMP  GET_TELQUE_END ,
   899            C        	
   900            C      M 	MOV	_RC,@NAME_FLAG
       01F2B 1863     1     MOV A,@( NAME_FLAG )
       01F2C 004C     1     MOV  _RC ,A
   901 01F2D 040D C        	MOV	A,_RD
   902 01F2E 1F68 C        	ADD	A,@NUM_START
   903 01F2F 004C C        	MOV	_RC,A
   904            C      M 	MOV	TEMP0,_RD		;Get data
       01F30 040D     1     MOV A, _RD 
       01F31 0055     1     MOV  TEMP0 ,A
   905            C        	
   906 01F32 0416 C        	MOV	A,TEMP1
   907 01F33 1D3F C        	SUB	A,@63
   908            C      M 	JPZ	GET_TELQUE_ADJUST1
       01F34 0C83     1     JBC  _STATUS , Z 
       01F35 173A     1     JMP  GET_TELQUE_ADJUST1 ,
   909            C        
   910            C      M 	MOV	_RC,@NAME_FLAG
       01F36 1863     1     MOV A,@( NAME_FLAG )
       01F37 004C     1     MOV  _RC ,A
   911 01F38 054D C        	INC	_RD
   912 01F39 173E C        	JMP	GET_TELQUE_ADJUSTED
   913 01F3A      C        GET_TELQUE_ADJUST1:
   914            C      M 	MOV	_RC,@NAME_FLAG
       01F3A 1863     1     MOV A,@( NAME_FLAG )
       01F3B 004C     1     MOV  _RC ,A
   915            C      M 	MOV	_RD,@32
       01F3C 1820     1     MOV A,@( 32 )
       01F3D 004D     1     MOV  _RD ,A
   916 01F3E      C        GET_TELQUE_ADJUSTED:
   917            C        ;---Get data
   918 01F3E 0415 C        	MOV	A,TEMP0
   919            C      M 	SETC
       01F3F 0A03     1     BS  _STATUS , C 
   920            C        	
   921 01F40 0012 C        	RET
   922 01F41      C        GET_TELQUE_END:
   923            C      M 	CLRC
       01F41 0803     1     BC  _STATUS , C 
   924            C        	
   925 01F42 0012 C        	RET
   926            C        ;-------------------------------------------------------------------------
   927            C        ;	Function : STOR_TELQUE	
   928            C        ;	将数据存在以PHO_ADDR为起始地址以OFFSET_D为offset的空间(一个字节)
   929            C        ;	INPUT : ACCH = the data you will stor
   930            C        ;		OFFSET_D = the offset you will stor data
   931            C        ;		ADDR_D = the BASE you will stor data
   932            C        ;	output: ACCH = ~0/0 data stor ok or not
   933            C        ;-------------------------------------------------------------------------
   934 01F43      C        STOR_TELQUE:
   935 01F43 0055 C        	MOV	TEMP0,A
   936            C        ;---
   937            C      M 	BLOCK	1
       01F44 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01F45 000A     1     IOW  _IOCA ,
   938            C        
   939            C      M 	MOV	_RC,@NUM_FLAG
       01F46 1862     1     MOV A,@( NUM_FLAG )
       01F47 004C     1     MOV  _RC ,A
   940 01F48 040D C        	MOV	A,_RD
   941 01F49 1F68 C        	ADD	A,@NUM_START
   942 01F4A 004C C        	MOV	_RC,A		;stor data
   943            C      M 	MOV	_RD,TEMP0
       01F4B 0415     1     MOV A, TEMP0 
       01F4C 004D     1     MOV  _RD ,A
   944            C        	
   945            C      M 	MOV	_RC,@NUM_FLAG
       01F4D 1862     1     MOV A,@( NUM_FLAG )
       01F4E 004C     1     MOV  _RC ,A
   946 01F4F 040D C        	MOV	A,_RD
   947 01F50 1D3F C        	SUB	A,@63
   948            C      M 	JPZ	STOR_TELQUE_ADJUST1
       01F51 0C83     1     JBC  _STATUS , Z 
       01F52 1755     1     JMP  STOR_TELQUE_ADJUST1 ,
   949            C        ;!!!
   950 01F53 054D C        	INC	_RD
   951 01F54 1757 C        	JMP	STOR_TELQUE_END
   952 01F55      C        STOR_TELQUE_ADJUST1:
   953            C      M 	MOV	_RD,@32
       01F55 1820     1     MOV A,@( 32 )
       01F56 004D     1     MOV  _RD ,A
   954 01F57      C        STOR_TELQUE_END:
   955            C        	
   956 01F57 0012 C        	RET
   957            C        ;-------------------------------------------------------------------------
   958            C        ;	Function : PUT_TELQUE	
   959            C        ;	退出队列(!!!从进入队列的地址退出,只是修改指针)
   960            C        ;	input : 
   961            C        ;	output: 
   962            C        ;-------------------------------------------------------------------------
   963 01F58      C        PUT_TELQUE:
   964            C        
   965            C      M 	BLOCK	1
       01F58 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01F59 000A     1     IOW  _IOCA ,
   966            C        
   967            C      M 	MOV	_RC,@NUM_FLAG
       01F5A 1862     1     MOV A,@( NUM_FLAG )
       01F5B 004C     1     MOV  _RC ,A
   968 01F5C 040D C        	MOV	A,_RD
   969 01F5D 183F C        	MOV	A,@0X3F
   970            C      M 	JPZ	PUT_TELQUE_END
       01F5E 0C83     1     JBC  _STATUS , Z 
       01F5F 1761     1     JMP  PUT_TELQUE_END ,
   971            C        
   972 01F60 01CD C        	DEC	_RD
   973 01F61      C        PUT_TELQUE_END:
   974            C        	
   975 01F61 0012 C        	RET
   976            C        ;-------------------------------------------------------------------------
   977            C        ;	Function : CLR_TELQUE
   978            C        ;	input : no
   979            C        ;	output: no
   980            C        ;-------------------------------------------------------------------------
   981 01F62      C        CLR_TELQUE:
   982            C      M 	BLOCK	1
       01F62 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01F63 000A     1     IOW  _IOCA ,
   983            C      M 	MOV	_RC,@NUM_FLAG
       01F64 1862     1     MOV A,@( NUM_FLAG )
       01F65 004C     1     MOV  _RC ,A
   984 01F66 00CD C        	CLR	_RD
   985            C      M 	MOV	_RC,@NAME_FLAG
       01F67 1863     1     MOV A,@( NAME_FLAG )
       01F68 004C     1     MOV  _RC ,A
   986 01F69 00CD C        	CLR	_RD
   987            C        
   988 01F6A 0012 C        	RET
   989            C        ;-------------------------------------------------------------------------
   990            C        ;	Function : GET_TELQUE_LEN
   991            C        ;	Get the store pointer
   992            C        ;	input : no
   993            C        ;	output: no
   994            C        ;-------------------------------------------------------------------------
   995 01F6B      C        GET_TELQUE_LEN:
   996            C      M 	BLOCK	1
       01F6B 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01F6C 000A     1     IOW  _IOCA ,
   997            C        	
   998            C      M 	MOV	_RC,@NUM_FLAG
       01F6D 1862     1     MOV A,@( NUM_FLAG )
       01F6E 004C     1     MOV  _RC ,A
   999 01F6F 040D C        	MOV	A,_RD
  1000            C        
  1001 01F70 0012 C        	RET
  1002            C        ;-------------------------------------------------------------------------------
  1003            C        ;	Function : EMPTY_TELQUE
  1004            C        ;	input : no
  1005            C        ;	output: Z = 0/~0 empty/not 
  1006            C        ;-------------------------------------------------------------------------------
  1007 01F71      C        EMPTY_TELQUE:
  1008            C      M 	BLOCK	1
       01F71 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       01F72 000A     1     IOW  _IOCA ,
  1009            C      M 	MOV	_RC,@NUM_FLAG
       01F73 1862     1     MOV A,@( NUM_FLAG )
       01F74 004C     1     MOV  _RC ,A
  1010            C      M 	MOV	TEMP1,_RD
       01F75 040D     1     MOV A, _RD 
       01F76 0056     1     MOV  TEMP1 ,A
  1011            C      M 	MOV	_RC,@NAME_FLAG
       01F77 1863     1     MOV A,@( NAME_FLAG )
       01F78 004C     1     MOV  _RC ,A
  1012 01F79 040D C        	MOV	A,_RD
  1013 01F7A 0116 C        	SUB	A,TEMP1
  1014            C      M 	JPZ	EMPTY_TELQUE_1
       01F7B 0C83     1     JBC  _STATUS , Z 
       01F7C 177F     1     JMP  EMPTY_TELQUE_1 ,
  1015            C        	
  1016            C      M 	CLRC
       01F7D 0803     1     BC  _STATUS , C 
  1017            C        	
  1018 01F7E 0012 C        	RET
  1019 01F7F      C        EMPTY_TELQUE_1:
  1020            C      M 	SETC
       01F7F 0A03     1     BS  _STATUS , C 
  1021            C        	
  1022 01F80 0012 C        	RET
  1023            C        ;-------------------------------------------------------------------------------
   617                     
   618                     ;-------------------------------------------------------------------------------
   619                     ;page8
   620                     INCLUDE		"f_ogm.dt"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;	OGM/MEMO record OGMplay
     3            C        ;-------------------------------------------------------------------------------
     4            C        ORG	(8<<10)
     5            C        ;-------------------------------------------------------------------------------
     6 02000      C        OGM_FUNC:
     7            C      M 	BANK	1
       02000 0B84     1     BS  _RSR , 6 
       02001 09C4     1     BC  _RSR , 7 
     8            C        	
     9 02002 0421 C        	MOV	A,B1_PRO_VAR
    10 02003 1A07 C        	AND	A,@0X07
    11            C      M 	MTBL
       02004 0020     1     TBL 
             2004     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    12 02005 1414 C        	JMP	OGM_FUNC_0	;0
    13 02006 1497 C        	JMP	OGM_FUNC_RVOP	;1.VOP before record
    14 02007 14CF C        	JMP	OGM_FUNC_REC	;2.REC OGM/MEMO
    15 02008 153B C        	JMP	OGM_FUNC_PVOP	;3.VOP after record
    16 02009 1543 C        	JMP	OGM_FUNC_PLY	;4.play OGM/VOP
    17 0200A 159A C        	JMP	OGM_FUNC_EVOP	;5.VOP after play
    18 0200B 15A0 C        	JMP	OGM_FUNC_DELALL	;6.Del all old message
    19 0200C 140D C        	JMP	OGM_FUNC_END	;7.reserved
    20            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    21            C        ;return
    22 0200D      C        OGM_FUNC_END:	
    23            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       0200D 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       0200E 15AC     1     JMP ( MAIN_LOOP % 1024 ),
    24            C        ;-------------------------------------------------------------------------------
    25            C        ;	B1_PRO_VAR	bit4 - 0/1 = OGM/Memo
    26            C        ;			bit5 - 
    27            C        ;			bit6 - Del-flag
    28            C        ;-------------------------------------------------------------------------------
    29 0200F      C        MSGLEN_TAB:
    30            C      M 	MTBL
       0200F 0020     1     TBL 
             200F     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    31 02010 1C00 C        	RETL	@0	;0 - 0
    32 02011 1C3C C        	RETL	@60	;1min - 60s
    33 02012 1C78 C        	RETL	@120	;2min - 120s
    34 02013 1CB4 C        	RETL	@180	;3min - 180s
    35            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    36            C        ;-------------------------------------------------------------------------------
    37 02014      C        OGM_FUNC_0:	;idle
    38            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       02014 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       02015 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       02016 1E88     2     PAGE ( $ / 1024 ),
    39            C        
    40 02017 18C0 C        	MOV	A,@CREC_OGM
    41 02018 0120 C        	SUB	A,B1_MSG
    42            C      M 	JPZ	OGM_FUNC_0_OGMREC
       02019 0C83     1     JBC  _STATUS , Z 
       0201A 1428     1     JMP  OGM_FUNC_0_OGMREC ,
    43 0201B 18C1 C        	MOV	A,@CPLY_OGM
    44 0201C 0120 C        	SUB	A,B1_MSG
    45            C      M 	JPZ	OGM_FUNC_0_OGMPLY
       0201D 0C83     1     JBC  _STATUS , Z 
       0201E 1452     1     JMP  OGM_FUNC_0_OGMPLY ,
    46            C        
    47 0201F 18C2 C        	MOV	A,@CREC_MMO
    48 02020 0120 C        	SUB	A,B1_MSG
    49            C      M 	JPZ	OGM_FUNC_0_MMOREC
       02021 0C83     1     JBC  _STATUS , Z 
       02022 1440     1     JMP  OGM_FUNC_0_MMOREC ,
    50            C        	
    51 02023 18C4 C        	MOV	A,@CDEL_ALL
    52 02024 0120 C        	SUB	A,B1_MSG
    53            C      M 	JPZ	OGM_FUNC_0_DELALL
       02025 0C83     1     JBC  _STATUS , Z 
       02026 147F     1     JMP  OGM_FUNC_0_DELALL ,
    54            C        
    55 02027 140D C        	JMP	OGM_FUNC_END
    56            C        ;---------------------------------------	
    57 02028      C        OGM_FUNC_0_OGMREC:
    58            C        ;-
    59            C      M 	PAGE	#(VGA)
       02028 1E8C     1     PAGE ( VGA / 1024 ),
    60 02029 111E C        	CALL	VGABLANKNUM2
    61 0202A 1127 C        	CALL	VGABLANKCHAR
    62            C        ;-	
    63 0202B 1883 C        	MOV	A,@(STYLE_CENTER)
    64 0202C 1026 C        	CALL	VGACHAR
    65 0202D 180D C        	MOV	A,@13		;OGM
    66 0202E 114D C        	CALL	VGASTRING
    67 0202F 1800 C        	MOV	A,@(CH_BLANK)
    68 02030 1026 C        	CALL	VGACHAR
    69 02031 1810 C        	MOV	A,@16		;RECORDING
    70 02032 114D C        	CALL	VGASTRING
    71            C        	
    72 02033 18FF C        	MOV	A,@(CH_END)
    73 02034 1026 C        	CALL	VGACHAR
    74            C        
    75 02035 10AB C        	CALL	VGADRAWCHAR
    76            C      M 	PAGE	#($)
       02036 1E88     1     PAGE ( $ / 1024 ),
    77            C      M 	MOV	B1_PRO_VAR,@0X01
       02037 1801     1     MOV A,@( 1 )
       02038 0061     1     MOV  B1_PRO_VAR ,A
    78 02039      C        OGM_FUNC_0_RECVOP:
    79            C        ;-DA0ToSpk
    80            C      M 	PAGE	#(DAA_SPK)
       02039 1E83     1     PAGE ( DAA_SPK / 1024 ),
    81 0203A 11CA C        	CALL	DAA_SPK
    82            C      M 	PAGE	#(LBEEP)
       0203B 1E83     1     PAGE ( LBEEP / 1024 ),
    83 0203C 108C C        	CALL	LBEEP
    84            C      M 	PAGE	#($)	
       0203D 1E88     1     PAGE ( $ / 1024 ),
    85            C      M 	DAM_SPK_ENABLE
       0203E 0B49     1     BS  _P9 , 5 
    86 0203F 140D C        	JMP	OGM_FUNC_END
    87            C        ;-----------------------------
    88 02040      C        OGM_FUNC_0_MMOREC:
    89            C        ;-
    90            C      M 	PAGE	#(VGA)
       02040 1E8C     1     PAGE ( VGA / 1024 ),
    91 02041 111E C        	CALL	VGABLANKNUM2
    92 02042 1127 C        	CALL	VGABLANKCHAR
    93            C        ;-	
    94 02043 1883 C        	MOV	A,@(STYLE_CENTER)
    95 02044 1026 C        	CALL	VGACHAR
    96 02045 180A C        	MOV	A,@10		;MEMO
    97 02046 114D C        	CALL	VGASTRING
    98 02047 1800 C        	MOV	A,@(CH_BLANK)
    99 02048 1026 C        	CALL	VGACHAR
   100 02049 1810 C        	MOV	A,@16		;RECORDING
   101 0204A 114D C        	CALL	VGASTRING
   102            C        	
   103 0204B 18FF C        	MOV	A,@(CH_END)
   104 0204C 1026 C        	CALL	VGACHAR
   105            C        
   106 0204D 10AB C        	CALL	VGADRAWCHAR
   107            C      M 	PAGE	#($)
       0204E 1E88     1     PAGE ( $ / 1024 ),
   108            C        	
   109            C      M 	MOV	B1_PRO_VAR,@0X11
       0204F 1811     1     MOV A,@( 17 )
       02050 0061     1     MOV  B1_PRO_VAR ,A
   110            C        	
   111 02051 1439 C        	JMP	OGM_FUNC_0_RECVOP
   112            C        ;---------------------------------------	
   113 02052      C        OGM_FUNC_0_OGMPLY:
   114            C      M 	MOV	B1_PRO_VAR,@0X04
       02052 1804     1     MOV A,@( 4 )
       02053 0061     1     MOV  B1_PRO_VAR ,A
   115            C        ;-
   116            C      M 	PAGE	#(VGA)
       02054 1E8C     1     PAGE ( VGA / 1024 ),
   117 02055 111E C        	CALL	VGABLANKNUM2
   118 02056 1127 C        	CALL	VGABLANKCHAR
   119 02057 1883 C        	MOV	A,@(STYLE_CENTER)
   120 02058 1026 C        	CALL	VGACHAR
   121            C        
   122 02059 180F C        	MOV	A,@15	;PLAY
   123 0205A 114D C        	CALL	VGASTRING
   124 0205B 1800 C        	MOV	A,@(CH_BLANK)
   125 0205C 1026 C        	CALL	VGACHAR
   126 0205D 180D C        	MOV	A,@13	;OGM
   127 0205E 114D C        	CALL	VGASTRING
   128            C        	
   129 0205F 18FF C        	MOV	A,@(CH_END)
   130 02060 1026 C        	CALL	VGACHAR
   131 02061 10AB C        	CALL	VGADRAWCHAR
   132            C        	;PAGE	#($)
   133            C        ;-DA0ToSpk
   134            C      M 	LCALL	DAA_SPK
                      2  M  PAGE #( DAA_SPK ),
       02062 1E83     2     PAGE ( DAA_SPK / 1024 ),
       02063 11CA     1     CALL ( DAA_SPK % 1024 ),
                      2  M  PAGE #( $ ),
       02064 1E88     2     PAGE ( $ / 1024 ),
   135            C      M 	DAM_SPK_ENABLE
       02065 0B49     1     BS  _P9 , 5 
   136            C        ;-VP Start
   137 02066 1801 C        	MOV	A,@COGM1
   138 02067 0CD4 C        	JBC	DAM_FLAG,3
   139 02068 1802 C        	MOV	A,@COGM2
   140            C        
   141            C      M 	LCALL	OGM_STATUS
                      2  M  PAGE #( OGM_STATUS ),
       02069 1E82     2     PAGE ( OGM_STATUS / 1024 ),
       0206A 1169     1     CALL ( OGM_STATUS % 1024 ),
                      2  M  PAGE #( $ ),
       0206B 1E88     2     PAGE ( $ / 1024 ),
   142 0206C 1900 C        	OR	A,@0
   143            C      M 	JPZ	OGM_FUNC_0_OGMPLY_DEFAULT
       0206D 0C83     1     JBC  _STATUS , Z 
       0206E 1477     1     JMP  OGM_FUNC_0_OGMPLY_DEFAULT ,
   144 0206F 0056 C        	MOV	TEMP1,A
   145            C      M 	MOV	TEMP0,@ID_PLYA
       02070 1806     1     MOV A,@( ID_PLYA )
       02071 0055     1     MOV  TEMP0 ,A
   146            C      M 	PAGE	#(STOR_VP)		
       02072 1E83     1     PAGE ( STOR_VP / 1024 ),
   147 02073 1067 C        	CALL	STOR_VP	
   148            C        	;PAGE	#(BEEP)
   149 02074 1085 C        	CALL	BEEP	
   150            C      M 	PAGE	#($)
       02075 1E88     1     PAGE ( $ / 1024 ),
   151            C        	
   152 02076 140D C        	JMP	OGM_FUNC_END
   153 02077      C        OGM_FUNC_0_OGMPLY_DEFAULT:
   154            C        	
   155 02077 1829 C        	MOV	A,@VOPID_DEFOGM1
   156 02078 0CD4 C        	JBC	DAM_FLAG,3
   157 02079 182A C        	MOV	A,@VOPID_DEFOGM2
   158            C      M 	PAGE	#(VOP_STOR_VP)
       0207A 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   159 0207B 1064 C        	CALL	VOP_STOR_VP	
   160            C        	;PAGE	#(BEEP)
   161 0207C 1085 C        	CALL	BEEP
   162            C      M 	PAGE	#($)
       0207D 1E88     1     PAGE ( $ / 1024 ),
   163            C        	
   164 0207E 140D C        	JMP	OGM_FUNC_END
   165            C        ;---------------------------------------
   166 0207F      C        OGM_FUNC_0_DELALL:
   167            C      M 	MOV	B1_PRO_VAR,@6
       0207F 1806     1     MOV A,@( 6 )
       02080 0061     1     MOV  B1_PRO_VAR ,A
   168            C        	
   169 02081 1830 C        	MOV	A,@CTMR3S
   170            C      M 	PAGE	#(SET_TIMER)
       02082 1E8D     1     PAGE ( SET_TIMER / 1024 ),
   171 02083 1359 C        	CALL	SET_TIMER
   172            C        	
   173            C      M 	PAGE	#(VGA)
       02084 1E8C     1     PAGE ( VGA / 1024 ),
   174 02085 111E C        	CALL	VGABLANKNUM2
   175 02086      C        OGM_FUNC_0_DELALL_DISP:		;Delete all messages
   176            C      M 	PAGE	#(VGA)
       02086 1E8C     1     PAGE ( VGA / 1024 ),
   177 02087 1127 C        	CALL	VGABLANKCHAR
   178            C        	
   179 02088 1883 C        	MOV	A,@(STYLE_CENTER)
   180 02089 1026 C        	CALL	VGACHAR
   181 0208A 1804 C        	MOV	A,@4		;DELETE
   182 0208B 114D C        	CALL	VGASTRING
   183 0208C 1800 C        	MOV	A,@(CH_BLANK)
   184 0208D 1026 C        	CALL	VGACHAR
   185 0208E 1831 C        	MOV	A,@49		;ALL
   186 0208F 114D C        	CALL	VGASTRING	
   187 02090 181F C        	MOV	A,@(CH_INTE)	;?
   188 02091 1026 C        	CALL	VGACHAR
   189 02092 18FF C        	MOV	A,@(CH_END)
   190 02093 1026 C        	CALL	VGACHAR
   191 02094 10AB C        	CALL	VGADRAWCHAR	
   192            C      M 	PAGE	#($)
       02095 1E88     1     PAGE ( $ / 1024 ),
   193            C        	
   194 02096 140D C        	JMP	OGM_FUNC_END
   195            C        ;-------------------------------------------------------------------------------
   196 02097      C        OGM_FUNC_RVOP:	;VOP beford record
   197            C        	
   198 02097 1885 C        	MOV	A,@CVP_END
   199 02098 0120 C        	SUB	A,B1_MSG
   200            C      M 	JPZ	OGM_FUNC_VOP_RECSTART
       02099 0C83     1     JBC  _STATUS , Z 
       0209A 14A0     1     JMP  OGM_FUNC_VOP_RECSTART ,
   201            C        	
   202 0209B 1891 C        	MOV	A,@CMSG_EXIT
   203 0209C 0120 C        	SUB	A,B1_MSG
   204            C      M 	JPZ	OGM_FUNC_0_OGMPLY
       0209D 0C83     1     JBC  _STATUS , Z 
       0209E 1452     1     JMP  OGM_FUNC_0_OGMPLY ,
   205            C        
   206 0209F 140D C        	JMP	OGM_FUNC_END
   207            C        ;---------------------------------------
   208 020A0      C        OGM_FUNC_VOP_RECSTART:		;VOP over then start record OGM
   209            C      M 	XMUTE_L
       020A0 0888     1     BC  _P8 , 2 
   210            C      M 	MUTE_H
       020A1 0AC8     1     BS  _P8 , 3 
   211            C      M 	DAM_MIC_ENABLE
       020A2 0B09     1     BS  _P9 , 4 
   212            C      M 	SET_NLEDBLK_FLAG
       020A3 0A92     1     BS  SYS_FLAG , 2 
   213            C      M 	LCALL	DAA_MIC	
                      2  M  PAGE #( DAA_MIC ),
       020A4 1E83     2     PAGE ( DAA_MIC / 1024 ),
       020A5 11D5     1     CALL ( DAA_MIC % 1024 ),
                      2  M  PAGE #( $ ),
       020A6 1E88     2     PAGE ( $ / 1024 ),
   214            C        	
   215            C        	;MOV	A,@CTMR100MS
   216            C        	;LCALL	SET_2TIMER
   217            C        	
   218 020A7 0721 C        	SWAPA	B1_PRO_VAR
   219 020A8 1A01 C        	AND	A,@0X01
   220            C      M 	JPNZ	OGM_FUNC_RECMEMO
       020A9 0E83     1     JBS  _STATUS , Z 
       020AA 14C6     1     JMP  OGM_FUNC_RECMEMO ,
   221            C        	
   222 020AB      C        OGM_FUNC_RECOGM:	
   223            C      M 	MOV	B1_PRO_VAR,@0X02
       020AB 1802     1     MOV A,@( 2 )
       020AC 0061     1     MOV  B1_PRO_VAR ,A
   224            C        ;-
   225 020AD 1801 C        	MOV	A,@COGM1
   226 020AE 0CD4 C        	JBC	DAM_FLAG,3
   227 020AF 1802 C        	MOV	A,@COGM2
   228            C        
   229            C      M 	PAGE	#(OGM_STATUS)
       020B0 1E82     1     PAGE ( OGM_STATUS / 1024 ),
   230 020B1 1169 C        	CALL	OGM_STATUS
   231 020B2      C        OGM_FUNC_RECSTART:
   232 020B2 00E2 C        	CLR	B1_PRO_VAR1
   233 020B3 1810 C        	MOV	A,@CTMR1S
   234            C      M 	PAGE	#(SET_TIMER)
       020B4 1E8D     1     PAGE ( SET_TIMER / 1024 ),
   235 020B5 1359 C        	CALL	SET_TIMER
   236            C        	
   237            C      M 	PAGE	#(VGA)
       020B6 1E8C     1     PAGE ( VGA / 1024 ),
   238 020B7 1883 C        	MOV	A,@(STYLE_CENTER)
   239 020B8 101F C        	CALL	VGANUM2
   240 020B9 1810 C        	MOV	A,@(NUM_0)
   241 020BA 101F C        	CALL	VGANUM2	
   242 020BB 1810 C        	MOV	A,@(NUM_0)
   243 020BC 101F C        	CALL	VGANUM2
   244 020BD 1810 C        	MOV	A,@(NUM_0)
   245 020BE 101F C        	CALL	VGANUM2
   246            C        	
   247 020BF 18FF C        	MOV	A,@(CH_END)
   248 020C0 101F C        	CALL	VGANUM2
   249 020C1 10A4 C        	CALL	VGADRAWNUM2
   250            C        	;PAGE	#($)
   251            C        
   252            C        ;-Record Start
   253            C      M 	LCALL	RECORD_START
                      2  M  PAGE #( RECORD_START ),
       020C2 1E82     2     PAGE ( RECORD_START / 1024 ),
       020C3 1041     1     CALL ( RECORD_START % 1024 ),
                      2  M  PAGE #( $ ),
       020C4 1E88     2     PAGE ( $ / 1024 ),
   254            C        
   255 020C5 140D C        	JMP	OGM_FUNC_END
   256 020C6      C        OGM_FUNC_RECMEMO:
   257            C      M 	MOV	B1_PRO_VAR,@0X12
       020C6 1812     1     MOV A,@( 18 )
       020C7 0061     1     MOV  B1_PRO_VAR ,A
   258            C        ;-
   259            C      M 	PAGE	#(VPMSG_CHK)
       020C8 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   260 020C9 1182 C        	CALL	VPMSG_CHK
   261            C        
   262 020CA 1800 C        	MOV	A,@0
   263            C      M 	LCALL	SET_VP1IDX	;Identify as Memo
                      2  M  PAGE #( SET_VP1IDX ),
       020CB 1E83     2     PAGE ( SET_VP1IDX / 1024 ),
       020CC 1275     1     CALL ( SET_VP1IDX % 1024 ),
                      2  M  PAGE #( $ ),
       020CD 1E88     2     PAGE ( $ / 1024 ),
   264 020CE 14B2 C        	JMP	OGM_FUNC_RECSTART
   265            C        ;-------------------------------------------------------------------------------
   266 020CF      C        OGM_FUNC_REC:			;OGM recording
   267 020CF 1880 C        	MOV	A,@CMSG_MKEY
   268 020D0 0120 C        	SUB	A,B1_MSG
   269            C      M 	JPZ	OGM_FUNC_REC_MKEY
       020D1 0C83     1     JBC  _STATUS , Z 
       020D2 1506     1     JMP  OGM_FUNC_REC_MKEY ,
   270            C        	
   271 020D3 1898 C        	MOV	A,@CMSG_TMR
   272 020D4 0120 C        	SUB	A,B1_MSG
   273            C      M 	JPZ	OGM_FUNC_REC_TMR
       020D5 0C83     1     JBC  _STATUS , Z 
       020D6 14D8     1     JMP  OGM_FUNC_REC_TMR ,
   274            C        	
   275 020D7 140D C        	JMP	OGM_FUNC_END
   276            C        ;---------------------------------------
   277 020D8      C        OGM_FUNC_REC_TMR:
   278 020D8 0562 C        	INC	B1_PRO_VAR1
   279            C        
   280 020D9 0422 C        	MOV	A,B1_PRO_VAR1
   281            C      M 	PAGE	#(HEX_DGT)	;Note invoke this subroutine only(no other subroutine or jmp)
       020DA 1E82     1     PAGE ( HEX_DGT / 1024 ),
   282 020DB 100F C        	CALL	HEX_DGT
   283 020DC 0073 C        	MOV	B1_SEC_REG,A	;当大于99时,高位仍是16进制数
   284            C        	
   285 020DD 0733 C        	SWAPA	B1_SEC_REG
   286 020DE 1A0F C        	AND	A,@0X0F
   287 020DF 100F C        	CALL	HEX_DGT
   288            C        	;PAGE	#($)
   289 020E0 0074 C        	MOV	B1_MIN_REG,A	;此时保存的只是秒的十位和百位
   290            C        ;---	
   291            C      M 	PAGE	#(VGA)
       020E1 1E8C     1     PAGE ( VGA / 1024 ),
   292 020E2 1883 C        	MOV	A,@(STYLE_CENTER)
   293 020E3 101F C        	CALL	VGANUM2
   294            C        
   295 020E4 0734 C        	SWAPA	B1_MIN_REG
   296 020E5 1A0F C        	AND	A,@0X0F
   297 020E6 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   298 020E7 101F C        	CALL	VGANUM2
   299 020E8 0434 C        	MOV	A,B1_MIN_REG
   300 020E9 1A0F C        	AND	A,@0X0F
   301 020EA 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   302 020EB 101F C        	CALL	VGANUM2	
   303 020EC 0433 C        	MOV	A,B1_SEC_REG
   304 020ED 1A0F C        	AND	A,@0X0F
   305 020EE 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   306 020EF 101F C        	CALL	VGANUM2	
   307            C        	
   308 020F0 18FF C        	MOV	A,@(CH_END)
   309 020F1 101F C        	CALL	VGANUM2
   310 020F2 10A4 C        	CALL	VGADRAWNUM2
   311            C      M 	PAGE	#($)	
       020F3 1E88     1     PAGE ( $ / 1024 ),
   312            C        ;---
   313 020F4 0721 C        	SWAPA	B1_PRO_VAR
   314 020F5 1A0F C        	AND	A,@0X0F
   315            C      M 	JPNZ	OGM_FUNC_REC_TMR_MEMO
       020F6 0E83     1     JBS  _STATUS , Z 
       020F7 14FD     1     JMP  OGM_FUNC_REC_TMR_MEMO ,
   316            C        
   317 020F8 0422 C        	MOV	A,B1_PRO_VAR1
   318 020F9 1D3C C        	SUB	A,@60
   319            C      M 	JPNC	OGM_FUNC_REC_MKEY_STP	;录满60s退出
       020FA 0E03     1     JBS  _STATUS , C 
       020FB 1513     1     JMP  OGM_FUNC_REC_MKEY_STP ,
   320            C        	
   321 020FC 140D C        	JMP	OGM_FUNC_END
   322            C        ;---------------------------------------
   323 020FD      C        OGM_FUNC_REC_TMR_MEMO:
   324 020FD 0726 C        	SWAPA	B1_RING_NUM
   325 020FE 1A03 C        	AND	A,@0X03
   326 020FF 100F C        	CALL	MSGLEN_TAB
   327 02100 0055 C        	MOV	TEMP0,A
   328            C        
   329 02101 0422 C        	MOV	A,B1_PRO_VAR1
   330 02102 0115 C        	SUB	A,TEMP0
   331            C      M 	JPNC	OGM_FUNC_REC_MKEY_STP	;录满60*Xs退出
       02103 0E03     1     JBS  _STATUS , C 
       02104 1513     1     JMP  OGM_FUNC_REC_MKEY_STP ,
   332            C        	
   333 02105 140D C        	JMP	OGM_FUNC_END
   334            C        ;---------------------------------------
   335 02106      C        OGM_FUNC_REC_MKEY:
   336 02106 1813 C        	MOV	A,@CKEY_STP
   337            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02107 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02108 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02109 1E88     2     PAGE ( $ / 1024 ),
   338            C      M 	JPNC	OGM_FUNC_REC_MKEY_STP	;Stop record OGM
       0210A 0E03     1     JBS  _STATUS , C 
       0210B 1513     1     JMP  OGM_FUNC_REC_MKEY_STP ,
   339            C        	
   340 0210C 1827 C        	MOV	A,@CKEY_SPK
   341            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0210D 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0210E 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0210F 1E88     2     PAGE ( $ / 1024 ),
   342            C      M 	JPNC	OGM_FUNC_REC_MKEY_SPK	;Stop record OGM
       02110 0E03     1     JBS  _STATUS , C 
       02111 153A     1     JMP  OGM_FUNC_REC_MKEY_SPK ,
   343            C        
   344 02112 140D C        	JMP	OGM_FUNC_END
   345            C        ;---------------------------------------
   346 02113      C        OGM_FUNC_REC_MKEY_STP:		;stop record(timer-out/stop-key)
   347            C        ;---Cut tail or not
   348 02113 0422 C        	MOV	A,B1_PRO_VAR1
   349 02114 1D02 C        	SUB	A,@2
   350            C      M 	JPNC	OGM_FUNC_REC_MKEY_STP_1	
       02115 0E03     1     JBS  _STATUS , C 
       02116 1519     1     JMP  OGM_FUNC_REC_MKEY_STP_1 ,
   351            C        
   352            C      M 	PAGE	#(REC_GIVEUP)
       02117 1E83     1     PAGE ( REC_GIVEUP / 1024 ),
   353 02118 127D C        	CALL	REC_GIVEUP	;less than 3second 
   354 02119      C        OGM_FUNC_REC_MKEY_STP_1:
   355            C        	;DAM_NEWLED_H
   356            C        	;LCALL	CLR_2TIMER
   357            C      M 	RESET_NLEDBLK_FLAG
       02119 0892     1     BC  SYS_FLAG , 2 
   358            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       0211A 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       0211B 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       0211C 1E88     2     PAGE ( $ / 1024 ),
   359            C        ;---OGM or MEMO	
   360 0211D 0721 C        	SWAPA	B1_PRO_VAR
   361 0211E 1A0F C        	AND	A,@0X0F
   362            C      M 	JPNZ	OGM_FUNC_RECSTP
       0211F 0E83     1     JBS  _STATUS , Z 
       02120 1530     1     JMP  OGM_FUNC_RECSTP ,
   363            C        	
   364 02121      C        OGM_FUNC_DELOLD:
   365 02121 1801 C        	MOV	A,@COGM1
   366 02122 0CD4 C        	JBC	DAM_FLAG,3
   367 02123 1802 C        	MOV	A,@COGM2
   368            C        
   369            C      M 	LCALL	OGM_STATUS
                      2  M  PAGE #( OGM_STATUS ),
       02124 1E82     2     PAGE ( OGM_STATUS / 1024 ),
       02125 1169     1     CALL ( OGM_STATUS % 1024 ),
                      2  M  PAGE #( $ ),
       02126 1E88     2     PAGE ( $ / 1024 ),
   370 02127 0415 C        	MOV	A,TEMP0
   371 02128 1D01 C        	SUB	A,@1
   372            C      M 	JPC	OGM_FUNC_RECSTP		;Less than 2
       02129 0C03     1     JBC  _STATUS , C 
       0212A 1530     1     JMP  OGM_FUNC_RECSTP ,
   373            C        
   374 0212B 1801 C        	MOV	A,@1			;delete the oldest one
   375            C      M 	LCALL	VPMSG_DEL
                      2  M  PAGE #( VPMSG_DEL ),
       0212C 1E83     2     PAGE ( VPMSG_DEL / 1024 ),
       0212D 1222     1     CALL ( VPMSG_DEL % 1024 ),
                      2  M  PAGE #( $ ),
       0212E 1E88     2     PAGE ( $ / 1024 ),
   376 0212F 1521 C        	JMP	OGM_FUNC_DELOLD
   377 02130      C        OGM_FUNC_RECSTP:
   378            C      M 	PAGE	#(GC_CHK)
       02130 1E82     1     PAGE ( GC_CHK / 1024 ),
   379 02131 113F C        	CALL	GC_CHK
   380            C        ;OGM_FUNC_REC_MKEYSTOP_VOP:
   381            C      M 	PAGE	#(DAA_SPK)
       02132 1E83     1     PAGE ( DAA_SPK / 1024 ),
   382 02133 11CA C        	CALL	DAA_SPK
   383            C        	;PAGE	#(BEEP)
   384 02134 1085 C        	CALL	BEEP
   385            C      M 	PAGE	#($)
       02135 1E88     1     PAGE ( $ / 1024 ),
   386            C      M 	DAM_SPK_ENABLE
       02136 0B49     1     BS  _P9 , 5 
   387            C        		
   388 02137 0561 C        	INC	B1_PRO_VAR		;MOV	B1_PRO_VAR,@0X03	
   389 02138 00E2 C        	CLR	B1_PRO_VAR1
   390            C        
   391 02139 140D C        	JMP	OGM_FUNC_END
   392            C        ;---------------------------------------
   393 0213A      C        OGM_FUNC_REC_MKEY_SPK:
   394 0213A 140D C        	JMP	OGM_FUNC_END
   395            C        ;-------------------------------------------------------------------------------
   396 0213B      C        OGM_FUNC_PVOP:
   397 0213B 1885 C        	MOV	A,@CVP_END
   398 0213C 0120 C        	SUB	A,B1_MSG
   399            C      M 	JPZ	OGM_FUNC_PVOP_VPSTOP
       0213D 0C83     1     JBC  _STATUS , Z 
       0213E 1540     1     JMP  OGM_FUNC_PVOP_VPSTOP ,
   400            C        	
   401 0213F 140D C        	JMP	OGM_FUNC_END
   402            C        ;---------------------------------------
   403 02140      C        OGM_FUNC_PVOP_VPSTOP:
   404            C        
   405            C      M 	JPB	B1_PRO_VAR,4,OGM_FUNC_PLY_OVER	;Memo record ?
       02140 0D21     1     JBC  B1_PRO_VAR , 4 
       02141 1588     1     JMP  OGM_FUNC_PLY_OVER ,
   406 02142 1452 C        	JMP	OGM_FUNC_0_OGMPLY
   407            C        
   408            C        /*	
   409            C        	SWAPA	B1_PRO_VAR
   410            C        	AND	A,@1
   411            C        	MTBL
   412            C        	JMP	OGM_FUNC_0_OGMPLY	;0 - After OGM record
   413            C        	JMP	OGM_FUNC_PLY_OVER	;1 - After MEMO record(= OGM play end)
   414            C        	ENDT
   415            C        */
   416            C        ;-------------------------------------------------------------------------------
   417 02143      C        OGM_FUNC_PLY:	;OGM playing
   418 02143 1885 C        	MOV	A,@CVP_END
   419 02144 0120 C        	SUB	A,B1_MSG
   420            C      M 	JPZ	OGM_FUNC_PLY_OVER
       02145 0C83     1     JBC  _STATUS , Z 
       02146 1588     1     JMP  OGM_FUNC_PLY_OVER ,
   421            C        
   422 02147 1880 C        	MOV	A,@CMSG_MKEY
   423 02148 0120 C        	SUB	A,B1_MSG
   424            C      M 	JPZ	OGM_FUNC_PLY_MKEY
       02149 0C83     1     JBC  _STATUS , Z 
       0214A 1550     1     JMP  OGM_FUNC_PLY_MKEY ,
   425            C        
   426 0214B 1898 C        	MOV	A,@CMSG_TMR
   427 0214C 0120 C        	SUB	A,B1_MSG
   428            C      M 	JPZ	OGM_FUNC_PLY_TMR
       0214D 0C83     1     JBC  _STATUS , Z 
       0214E 155D     1     JMP  OGM_FUNC_PLY_TMR ,
   429            C        
   430 0214F 140D C        	JMP	OGM_FUNC_END
   431            C        ;---------------------------------------
   432 02150      C        OGM_FUNC_PLY_MKEY:
   433            C        
   434 02150 1813 C        	MOV	A,@CKEY_STP
   435            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02151 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02152 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02153 1E88     2     PAGE ( $ / 1024 ),
   436            C      M 	JPNC	OGM_FUNC_PLY_MKEY_STP	;Stop record OGM
       02154 0E03     1     JBS  _STATUS , C 
       02155 155F     1     JMP  OGM_FUNC_PLY_MKEY_STP ,
   437            C        
   438 02156 1823 C        	MOV	A,@CKEY_DEL
   439            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02157 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02158 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02159 1E88     2     PAGE ( $ / 1024 ),
   440            C      M 	JPNC	OGM_FUNC_PLY_MKEY_DEL	;Delete the message
       0215A 0E03     1     JBS  _STATUS , C 
       0215B 1569     1     JMP  OGM_FUNC_PLY_MKEY_DEL ,
   441            C        
   442 0215C 140D C        	JMP	OGM_FUNC_END		;!!!
   443            C        ;---------------------------------------
   444 0215D      C        OGM_FUNC_PLY_TMR:
   445 0215D 0562 C        	INC	B1_PRO_VAR1
   446            C        
   447 0215E 140D C        	JMP	OGM_FUNC_END
   448            C        ;---------------------------------------
   449 0215F      C        OGM_FUNC_PLY_MKEY_STP:			;stop playing OGM
   450            C      M 	MOV	B1_PRO_VAR,@0X05
       0215F 1805     1     MOV A,@( 5 )
       02160 0061     1     MOV  B1_PRO_VAR ,A
   451            C        
   452            C      M 	PAGE	#(INIT_DAM_FUNC)
       02161 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   453 02162 11C1 C        	CALL	INIT_DAM_FUNC
   454            C      M 	PAGE	#(BEEP)
       02163 1E83     1     PAGE ( BEEP / 1024 ),
   455 02164 1085 C        	CALL	BEEP	
   456            C      M 	PAGE	#(CLR_TIMER)
       02165 1E8D     1     PAGE ( CLR_TIMER / 1024 ),
   457 02166 1358 C        	CALL	CLR_TIMER
   458            C      M 	PAGE	#($)
       02167 1E88     1     PAGE ( $ / 1024 ),
   459            C        		
   460 02168 140D C        	JMP	OGM_FUNC_END
   461 02169      C        OGM_FUNC_PLY_MKEY_DEL:
   462            C      M 	JPB	B1_PRO_VAR,6,OGM_FUNC_DO_DELOGM
       02169 0DA1     1     JBC  B1_PRO_VAR , 6 
       0216A 1579     1     JMP  OGM_FUNC_DO_DELOGM ,
   463 0216B 0BA1 C        	BS	B1_PRO_VAR,6
   464            C        	
   465 0216C      C        OGM_FUNC_0_DELONE_DISP:		;Delete one message
   466            C      M 	PAGE	#(VGA)
       0216C 1E8C     1     PAGE ( VGA / 1024 ),
   467 0216D 1127 C        	CALL	VGABLANKCHAR
   468 0216E 1883 C        	MOV	A,@(STYLE_CENTER)
   469 0216F 1026 C        	CALL	VGACHAR
   470 02170 1804 C        	MOV	A,@4		;DELETE
   471 02171 114D C        	CALL	VGASTRING
   472 02172 181F C        	MOV	A,@(CH_INTE)	;?
   473 02173 1026 C        	CALL	VGACHAR
   474            C        ;-
   475 02174 18FF C        	MOV	A,@(CH_END)
   476 02175 1026 C        	CALL	VGACHAR
   477 02176 10AB C        	CALL	VGADRAWCHAR
   478            C      M 	PAGE	#($)	
       02177 1E88     1     PAGE ( $ / 1024 ),
   479            C        
   480 02178 140D C        	JMP	OGM_FUNC_END
   481            C        ;---------------------------------------
   482 02179      C        OGM_FUNC_DO_DELOGM:	
   483            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       02179 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       0217A 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       0217B 1E88     2     PAGE ( $ / 1024 ),
   484            C        	
   485 0217C 09A1 C        	BC	B1_PRO_VAR,6
   486            C        
   487 0217D 1801 C        	MOV	A,@COGM1
   488 0217E 0CD4 C        	JBC	DAM_FLAG,3
   489 0217F 1802 C        	MOV	A,@COGM2
   490            C        
   491            C      M 	PAGE	#(OGM_STATUS)
       02180 1E82     1     PAGE ( OGM_STATUS / 1024 ),
   492 02181 1169 C        	CALL	OGM_STATUS
   493            C      M 	PAGE	#(VPMSG_DEL)
       02182 1E83     1     PAGE ( VPMSG_DEL / 1024 ),
   494 02183 1222 C        	CALL	VPMSG_DEL
   495            C      M 	PAGE	#(GC_CHK)	
       02184 1E82     1     PAGE ( GC_CHK / 1024 ),
   496 02185 113F C        	CALL	GC_CHK
   497            C      M 	PAGE	#($)
       02186 1E88     1     PAGE ( $ / 1024 ),
   498 02187 155F C        	JMP	OGM_FUNC_PLY_MKEY_STP
   499            C        ;---------------------------------------
   500 02188      C        OGM_FUNC_PLY_OVER:
   501            C      M 	DAM_SPK_DISABLE
       02188 0949     1     BC  _P9 , 5 
   502            C        	
   503            C      M 	PAGE	#(INIT_DAM_FUNC)
       02189 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   504 0218A 11C1 C        	CALL	INIT_DAM_FUNC
   505            C      M 	PAGE	#(DAA_OFF)
       0218B 1E83     1     PAGE ( DAA_OFF / 1024 ),
   506 0218C 11ED C        	CALL	DAA_OFF
   507            C      M 	PAGE	#(VPMSG_CHK)
       0218D 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   508 0218E 1182 C        	CALL	VPMSG_CHK
   509            C      M 	PAGE	#(CLR_PRO_STACK)	
       0218F 1E8D     1     PAGE ( CLR_PRO_STACK / 1024 ),
   510 02190 1352 C        	CALL	CLR_PRO_STACK
   511 02191 00E1 C        	CLR	B1_PRO_VAR
   512            C        	
   513 02192 1808 C        	MOV	A,@CTMR500MS
   514            C      M 	PAGE	#(SET_TIMER)
       02193 1E8D     1     PAGE ( SET_TIMER / 1024 ),
   515 02194 1359 C        	CALL	SET_TIMER
   516            C        ;---
   517 02195 1890 C        	MOV	A,@CMSG_INIT
   518            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       02196 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       02197 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       02198 1E88     2     PAGE ( $ / 1024 ),
   519            C        	
   520 02199 140D C        	JMP	OGM_FUNC_END	
   521            C        ;-------------------------------------------------------------------------------
   522 0219A      C        OGM_FUNC_EVOP:	;OGM over
   523            C        			
   524 0219A 1885 C        	MOV	A,@CVP_END
   525 0219B 0120 C        	SUB	A,B1_MSG
   526            C      M 	JPZ	OGM_FUNC_EVOP_PLYOVER
       0219C 0C83     1     JBC  _STATUS , Z 
       0219D 159F     1     JMP  OGM_FUNC_EVOP_PLYOVER ,
   527            C        
   528 0219E 140D C        	JMP	OGM_FUNC_END
   529            C        ;---------------------------------------
   530 0219F      C        OGM_FUNC_EVOP_PLYOVER:
   531 0219F 1588 C        	JMP	OGM_FUNC_PLY_OVER
   532            C        ;-------------------------------------------------------------------------------
   533 021A0      C        OGM_FUNC_DELALL:	;Del all
   534            C        
   535 021A0 1880 C        	MOV	A,@CMSG_MKEY
   536 021A1 0120 C        	SUB	A,B1_MSG
   537            C      M 	JPZ	OGM_FUNC_DELALL_MKEY
       021A2 0C83     1     JBC  _STATUS , Z 
       021A3 15A9     1     JMP  OGM_FUNC_DELALL_MKEY ,
   538            C        
   539 021A4 1898 C        	MOV	A,@CMSG_TMR
   540 021A5 0120 C        	SUB	A,B1_MSG
   541            C      M 	JPZ	OGM_FUNC_DELALL_TMR
       021A6 0C83     1     JBC  _STATUS , Z 
       021A7 15B6     1     JMP  OGM_FUNC_DELALL_TMR ,
   542            C        
   543 021A8 140D C        	JMP	OGM_FUNC_END	
   544            C        ;---------------------------------------
   545 021A9      C        OGM_FUNC_DELALL_MKEY:
   546            C        	
   547 021A9 1823 C        	MOV	A,@CKEY_DEL
   548            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       021AA 1E81     2     PAGE ( KEY_CHK / 1024 ),
       021AB 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       021AC 1E88     2     PAGE ( $ / 1024 ),
   549            C      M 	JPNC	OGM_FUNC_DELALL_MKEY_DEL	;Delete the message
       021AD 0E03     1     JBS  _STATUS , C 
       021AE 15B7     1     JMP  OGM_FUNC_DELALL_MKEY_DEL ,
   550            C        
   551            C        	;JMP	OGM_FUNC_DELALL_FORIDLE
   552            C        ;-------------------	
   553 021AF      C        OGM_FUNC_DELALL_FORIDLE:
   554 021AF 0420 C        	MOV	A,B1_MSG
   555            C      M 	PAGE	#(KSTOR_MSG)
       021B0 1E8D     1     PAGE ( KSTOR_MSG / 1024 ),
   556 021B1 1308 C        	CALL	KSTOR_MSG
   557 021B2 1352 C        	CALL	KCLR_PRO_STACK
   558            C      M 	PAGE	#($)
       021B3 1E88     1     PAGE ( $ / 1024 ),
   559            C        
   560 021B4 00E1 C        	CLR	B1_PRO_VAR
   561            C        
   562 021B5 140D C        	JMP	OGM_FUNC_END	;!!!Note exit the status
   563            C        ;---------------------------------------
   564 021B6      C        OGM_FUNC_DELALL_TMR:
   565 021B6 1588 C        	JMP	OGM_FUNC_PLY_OVER
   566            C        ;---------------------------------------
   567 021B7      C        OGM_FUNC_DELALL_MKEY_DEL:
   568            C      M 	MOV	B1_PRO_VAR,@5
       021B7 1805     1     MOV A,@( 5 )
       021B8 0061     1     MOV  B1_PRO_VAR ,A
   569            C        ;-
   570            C      M 	PAGE	#(VPMSG_CHK)
       021B9 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   571 021BA 1182 C        	CALL	VPMSG_CHK
   572            C      M 	PAGE	#(VPMSG_DELOLD)
       021BB 1E83     1     PAGE ( VPMSG_DELOLD / 1024 ),
   573 021BC 122B C        	CALL	VPMSG_DELOLD
   574            C      M 	PAGE	#(GC_CHK)
       021BD 1E82     1     PAGE ( GC_CHK / 1024 ),
   575 021BE 113F C        	CALL	GC_CHK
   576            C      M 	PAGE	#(TEL_UNLINK)
       021BF 1E84     1     PAGE ( TEL_UNLINK / 1024 ),
   577 021C0 11D3 C        	CALL	TEL_UNLINK
   578            C        ;-DA0ToSpk
   579            C      M 	DAM_SPK_ENABLE	
       021C1 0B49     1     BS  _P9 , 5 
   580            C      M 	PAGE	#(DAA_SPK)
       021C2 1E83     1     PAGE ( DAA_SPK / 1024 ),
   581 021C3 11CA C        	CALL	DAA_SPK
   582            C        	
   583            C      M 	PAGE	#(VPQUE)
       021C4 1E83     1     PAGE ( VPQUE / 1024 ),
   584 021C5 183C C        	MOV	A,@VOPID_ALLMESSAGES
   585 021C6 1064 C        	CALL	VOP_STOR_VP
   586 021C7 1838 C        	MOV	A,@VOPID_DELETED
   587 021C8 1064 C        	CALL	VOP_STOR_VP
   588 021C9      C        OGM_FUNC_DODEL_DISP:	
   589            C      M 	PAGE	#(VGA)
       021C9 1E8C     1     PAGE ( VGA / 1024 ),
   590 021CA 1127 C        	CALL	VGABLANKCHAR
   591 021CB 1883 C        	MOV	A,@(STYLE_CENTER)
   592 021CC 1026 C        	CALL	VGACHAR
   593 021CD 182F C        	MOV	A,@47		;Delete...
   594 021CE 114D C        	CALL	VGASTRING
   595            C        
   596 021CF 18FF C        	MOV	A,@(CH_END)
   597 021D0 1026 C        	CALL	VGACHAR
   598 021D1 10AB C        	CALL	VGADRAWCHAR
   599            C      M 	PAGE	#($)
       021D2 1E88     1     PAGE ( $ / 1024 ),
   600            C        	
   601 021D3 140D C        	JMP	OGM_FUNC_END
   602            C        ;-------------------------------------------------------------------------------
   621                     INCLUDE		"f_play.dt"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;	play message
     3            C        ;-------------------------------------------------------------------------------
     4            C        ;ORG	(8<<10)
     5            C        ;-------------------------------------------------------------------------------
     6 021D4      C        PLAY_FUNC:
     7            C      M 	BANK	1
       021D4 0B84     1     BS  _RSR , 6 
       021D5 09C4     1     BC  _RSR , 7 
     8            C        ;-------------------------------------------------------------------------------
     9 021D6      C        PLAY_FUNC_0:			;0 - normal
    10 021D6 0421 C        	MOV	A,B1_PRO_VAR
    11 021D7 1A03 C        	AND	A,@0X03
    12            C      M 	MTBL
       021D8 0020     1     TBL 
             21D8     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    13 021D9 15DF C        	JMP	PLAY_FUNC_0_0	;local-idle to play
    14 021DA 162B C        	JMP	PLAY_FUNC_0_1	;VOP before play(x messages)
    15 021DB 1649 C        	JMP	PLAY_FUNC_0_2	;message playing
    16 021DC 17BD C        	JMP	PLAY_FUNC_0_3	;end of message/no message
    17            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    18            C        
    19 021DD      C        PLAY_FUNC_END:
    20            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       021DD 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       021DE 15AC     1     JMP ( MAIN_LOOP % 1024 ),
    21            C        ;-------------------------------------------------------------------------------
    22            C        ;	B1_PRO_VAR	bit(0,1) - play status
    23            C        ;
    24            C        ;			bit2 - Reserved for pause
    25            C        ;			bit3 - 1/0 repeat/not
    26            C        ;			bit4 - 1/0 del/not
    27            C        ;			bit5 - 1/0 New CID need to display
    28            C        ;			bit6 - 
    29            C        ;			bit7 - 
    30            C        ;In this function
    31            C        ;	B1_MSG_ID	- VP_ID
    32            C        ;	B1_MSG_T	- the number of total VP
    33            C        ;	B1_MSG_N	- the number of new VP
    34            C        ;	B1_CID_T	- the number of total CID
    35            C        ;	B1_CID_N	- CID_ID
    36            C        ;-------------------------------------------------------------------------------
    37 021DF      C        PLAY_FUNC_0_0:			;
    38            C      M 	PAGE	#(INIT_DAM_FUNC)
       021DF 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
    39 021E0 11C1 C        	CALL	INIT_DAM_FUNC
    40 021E1 1810 C        	MOV	A,@CTMR1S
    41            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       021E2 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       021E3 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       021E4 1E88     2     PAGE ( $ / 1024 ),
    42            C        	
    43 021E5 18C3 C        	MOV	A,@CPLY_MSG
    44 021E6 0120 C        	SUB	A,B1_MSG
    45            C      M 	JPZ	PLAY_FUNC_0_0_PLAY
       021E7 0C83     1     JBC  _STATUS , Z 
       021E8 15EA     1     JMP  PLAY_FUNC_0_0_PLAY ,
    46            C        	
    47 021E9 15DD C        	JMP	PLAY_FUNC_END
    48            C        ;---------------------------------------
    49 021EA      C        PLAY_FUNC_0_0_PLAY:
    50            C        
    51            C      M 	MOV	B1_PRO_VAR,@1
       021EA 1801     1     MOV A,@( 1 )
       021EB 0061     1     MOV  B1_PRO_VAR ,A
    52            C      M 	PAGE	#(DAA_SPK)
       021EC 1E83     1     PAGE ( DAA_SPK / 1024 ),
    53 021ED 11CA C        	CALL	DAA_SPK
    54            C      M 	DAM_SPK_ENABLE
       021EE 0B49     1     BS  _P9 , 5 
    55            C        ;-
    56            C      M 	PAGE	#(VGA)
       021EF 1E8C     1     PAGE ( VGA / 1024 ),
    57 021F0 111E C        	CALL	VGABLANKNUM2
    58 021F1 1127 C        	CALL	VGABLANKCHAR
    59            C        	
    60 021F2 18A3 C        	MOV	A,@(STYLE_CENTER+STYLE_TOBCD)	;!!!
    61 021F3 101F C        	CALL	VGANUM2
    62 021F4 0430 C        	MOV	A,B1_MSG_T
    63 021F5 101F C        	CALL	VGANUM2
    64 021F6 18FF C        	MOV	A,@(CH_END)
    65 021F7 101F C        	CALL	VGANUM2
    66 021F8 10A4 C        	CALL	VGADRAWNUM2
    67            C        	
    68 021F9 1883 C        	MOV	A,@(STYLE_CENTER)
    69 021FA 1026 C        	CALL	VGACHAR
    70 021FB 180B C        	MOV	A,@11			;MESSAGES
    71 021FC 114D C        	CALL	VGASTRING
    72 021FD 18FF C        	MOV	A,@(CH_END)
    73 021FE 1026 C        	CALL	VGACHAR
    74 021FF 10AB C        	CALL	VGADRAWCHAR
    75            C      M 	PAGE	#($)
       02200 1E88     1     PAGE ( $ / 1024 ),
    76            C        
    77            C      M 	LCALL	VPMSG_CHK
                      2  M  PAGE #( VPMSG_CHK ),
       02201 1E82     2     PAGE ( VPMSG_CHK / 1024 ),
       02202 1182     1     CALL ( VPMSG_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02203 1E88     2     PAGE ( $ / 1024 ),
    78            C        ;---
    79            C      M 	JPB	DAM_FLAG,6,PLAY_FUNC_0_0_PLAY_ALL
       02204 0D94     1     JBC  DAM_FLAG , 6 
       02205 1613     1     JMP  PLAY_FUNC_0_0_PLAY_ALL ,
    80            C        ;---No messages	
    81            C      M 	PAGE	#(INIT_DAM_FUNC)
       02206 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
    82 02207 11C1 C        	CALL	INIT_DAM_FUNC
    83            C        
    84            C      M 	PAGE	#(VPQUE)
       02208 1E83     1     PAGE ( VPQUE / 1024 ),
    85 02209 182B C        	MOV	A,@VOPID_YOUHAVE
    86 0220A 1064 C        	CALL	VOP_STOR_VP
    87 0220B 182C C        	MOV	A,@VOPID_NO
    88 0220C 1064 C        	CALL	VOP_STOR_VP
    89 0220D 182F C        	MOV	A,@VOPID_MESSAGES
    90 0220E 1064 C        	CALL	VOP_STOR_VP
    91            C      M 	PAGE	#($)
       0220F 1E88     1     PAGE ( $ / 1024 ),
    92            C        
    93            C      M 	MOV	B1_PRO_VAR,@3
       02210 1803     1     MOV A,@( 3 )
       02211 0061     1     MOV  B1_PRO_VAR ,A
    94            C        
    95 02212 15DD C        	JMP	PLAY_FUNC_END
    96            C        
    97            C        ;---------------------------------------
    98 02213      C        PLAY_FUNC_0_0_PLAY_ALL:
    99            C        	
   100 02213 182B C        	MOV	A,@VOPID_YOUHAVE
   101            C      M 	PAGE	#(VOP_STOR_VP)
       02214 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   102 02215 1064 C        	CALL	VOP_STOR_VP
   103 02216 0430 C        	MOV	A,B1_MSG_T
   104            C      M 	PAGE	#(ANNOUNCE_NUM)
       02217 1E82     1     PAGE ( ANNOUNCE_NUM / 1024 ),
   105 02218 11C8 C        	CALL	ANNOUNCE_NUM
   106 02219 182F C        	MOV	A,@VOPID_MESSAGES
   107            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       0221A 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       0221B 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       0221C 1E88     2     PAGE ( $ / 1024 ),
   108            C        
   109            C      M 	JPB	DAM_FLAG,7,PLAY_FUNC_0_0_PLAY_NEW	;New message exist ?
       0221D 0DD4     1     JBC  DAM_FLAG , 7 
       0221E 1620     1     JMP  PLAY_FUNC_0_0_PLAY_NEW ,
   110            C        
   111 0221F 15DD C        	JMP	PLAY_FUNC_END
   112            C        ;---------------------------------------
   113 02220      C        PLAY_FUNC_0_0_PLAY_NEW:
   114            C        
   115 02220 0431 C        	MOV	A,B1_MSG_N
   116            C      M 	PAGE	#(ANNOUNCE_NUM)
       02221 1E82     1     PAGE ( ANNOUNCE_NUM / 1024 ),
   117 02222 11C8 C        	CALL	ANNOUNCE_NUM
   118 02223 182D C        	MOV	A,@VOPID_NEW
   119            C      M 	PAGE	#(VOP_STOR_VP)
       02224 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   120 02225 1064 C        	CALL	VOP_STOR_VP
   121 02226 182F C        	MOV	A,@VOPID_MESSAGES
   122            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       02227 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       02228 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       02229 1E88     2     PAGE ( $ / 1024 ),
   123            C        
   124 0222A 15DD C        	JMP	PLAY_FUNC_END
   125            C        ;-------------------------------------------------------------------------------
   126 0222B      C        PLAY_FUNC_0_1:			;Play VOP before message
   127 0222B 1885 C        	MOV	A,@CVP_END
   128 0222C 0120 C        	SUB	A,B1_MSG
   129            C      M 	JPZ	PLAY_FUNC_0_1_VPOVER	;VOP play end
       0222D 0C83     1     JBC  _STATUS , Z 
       0222E 1641     1     JMP  PLAY_FUNC_0_1_VPOVER ,
   130            C        
   131 0222F 1880 C        	MOV 	A,@CMSG_MKEY
   132 02230 0120 C        	SUB 	A,B1_MSG
   133            C      M 	JPZ 	PLAY_FUNC_0_1_MKEY
       02231 0C83     1     JBC  _STATUS , Z 
       02232 1634     1     JMP  PLAY_FUNC_0_1_MKEY ,
   134            C        	
   135 02233 15DD C        	JMP	PLAY_FUNC_END
   136            C        ;---------------------------------------
   137 02234      C        PLAY_FUNC_0_1_MKEY:
   138 02234 1813 C        	MOV	A,@CKEY_STP
   139            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02235 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02236 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02237 1E88     2     PAGE ( $ / 1024 ),
   140            C      M 	JPNC	PLAY_FUNC_0_2_MKEY_STP	;stop
       02238 0E03     1     JBS  _STATUS , C 
       02239 1735     1     JMP  PLAY_FUNC_0_2_MKEY_STP ,
   141            C        
   142 0223A 1827 C        	MOV	A,@CKEY_SPK
   143            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0223B 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0223C 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0223D 1E88     2     PAGE ( $ / 1024 ),
   144            C      M 	JPNC	PLAY_FUNC_0_2_MKEY_SPK
       0223E 0E03     1     JBS  _STATUS , C 
       0223F 17B1     1     JMP  PLAY_FUNC_0_2_MKEY_SPK ,
   145            C        
   146 02240 15DD C        	JMP	PLAY_FUNC_END
   147            C        ;---------------------------------------
   148 02241      C        PLAY_FUNC_0_1_VPOVER:
   149            C        	
   150 02241 0420 C        	MOV	A,B1_MSG
   151            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       02242 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       02243 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       02244 1E88     2     PAGE ( $ / 1024 ),
   152            C        
   153 02245 00F2 C        	CLR	B1_MSG_ID	;from 0
   154            C      M 	MOV	B1_PRO_VAR,@2	;INC	B1_PRO_VAR
       02246 1802     1     MOV A,@( 2 )
       02247 0061     1     MOV  B1_PRO_VAR ,A
   155            C        	
   156 02248 15DD C        	JMP	PLAY_FUNC_END
   157            C        ;-------------------------------------------------------------------------------
   158 02249      C        PLAY_FUNC_0_2:
   159 02249 1885 C        	MOV	A,@CVP_END
   160 0224A 0120 C        	SUB	A,B1_MSG
   161            C      M 	JPZ	PLAY_FUNC_0_2_VPOVER	;VOP play end
       0224B 0C83     1     JBC  _STATUS , Z 
       0224C 1677     1     JMP  PLAY_FUNC_0_2_VPOVER ,
   162            C        
   163 0224D 1880 C        	MOV 	A,@CMSG_MKEY
   164 0224E 0120 C        	SUB 	A,B1_MSG
   165            C      M 	JPZ 	PLAY_FUNC_0_2_MKEY
       0224F 0C83     1     JBC  _STATUS , Z 
       02250 1748     1     JMP  PLAY_FUNC_0_2_MKEY ,
   166            C        
   167 02251 1898 C        	MOV 	A,@CMSG_TMR
   168 02252 0120 C        	SUB 	A,B1_MSG
   169            C      M 	JPZ 	PLAY_FUNC_0_2_TMR
       02253 0C83     1     JBC  _STATUS , Z 
       02254 1656     1     JMP  PLAY_FUNC_0_2_TMR ,
   170            C        
   171 02255 15DD C        	JMP	PLAY_FUNC_END
   172            C        ;---------------------------------------
   173 02256      C        PLAY_FUNC_0_2_TMR:
   174 02256 08E1 C        	BC	B1_PRO_VAR,3	;Clean repeat-flag
   175 02257 0562 C        	INC	B1_PRO_VAR1
   176            C        	
   177            C      M 	JPNB	B1_PRO_VAR,5,PLAY_FUNC_END	;No CID need to display
       02258 0F61     1     JBS  B1_PRO_VAR , 5 
       02259 15DD     1     JMP  PLAY_FUNC_END ,
   178            C        	
   179            C      M 	BLOCK	1
       0225A 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       0225B 000A     1     IOW  _IOCA ,
   180            C      M 	MOV	_RC,@NUM_FLAG
       0225C 1862     1     MOV A,@( NUM_FLAG )
       0225D 004C     1     MOV  _RC ,A
   181 0225E 040D C        	MOV	A,_RD			;count
   182 0225F 1A3F C        	AND	A,@0X3F	
   183 02260 1D0F C        	SUB	A,@LENGTH2NDL
   184            C      M 	JPC	PLAY_FUNC_END	;<=15 No need to alter CID display
       02261 0C03     1     JBC  _STATUS , C 
       02262 15DD     1     JMP  PLAY_FUNC_END ,
   185            C        
   186            C      M 	LCALL	VGABLANKNUM2	
                      2  M  PAGE #( VGABLANKNUM2 ),
       02263 1E8C     2     PAGE ( VGABLANKNUM2 / 1024 ),
       02264 111E     1     CALL ( VGABLANKNUM2 % 1024 ),
                      2  M  PAGE #( $ ),
       02265 1E88     2     PAGE ( $ / 1024 ),
   187            C      M 	REFURBISH_1AND2AND3L
                      2  M  BLOCK  0 
       02266 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02267 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02268 1880     2     MOV A,@( LCD_CTRL )
       02269 004C     2     MOV  _RC ,A
       0226A 0B4D     1     BS  _RD , 5 
       0226B 0B8D     1     BS  _RD , 6 
       0226C 0BCD     1     BS  _RD , 7 
   188            C      M 	JPB	B1_PRO_VAR1,0,PLAY_FUNC_0_2_TMR_1	
       0226D 0C22     1     JBC  B1_PRO_VAR1 , 0 
       0226E 1673     1     JMP  PLAY_FUNC_0_2_TMR_1 ,
   189            C        
   190            C      M 	LCALL	DISP_TELNUM
                      2  M  PAGE #( DISP_TELNUM ),
       0226F 1E8C     2     PAGE ( DISP_TELNUM / 1024 ),
       02270 131A     1     CALL ( DISP_TELNUM % 1024 ),
                      2  M  PAGE #( $ ),
       02271 1E88     2     PAGE ( $ / 1024 ),
   191 02272 15DD C        	JMP	PLAY_FUNC_END	
   192 02273      C        PLAY_FUNC_0_2_TMR_1:
   193            C        	
   194            C      M 	LCALL	DISP_TAILNUM
                      2  M  PAGE #( DISP_TAILNUM ),
       02273 1E8C     2     PAGE ( DISP_TAILNUM / 1024 ),
       02274 1351     1     CALL ( DISP_TAILNUM % 1024 ),
                      2  M  PAGE #( $ ),
       02275 1E88     2     PAGE ( $ / 1024 ),
   195 02276 15DD C        	JMP	PLAY_FUNC_END
   196            C        ;---------------------------------------
   197 02277      C        PLAY_FUNC_0_2_VPOVER:
   198            C      M 	RTC_DISP_DISABLE
       02277 0812     1     BC  SYS_FLAG , 0 
   199 02278 0961 C        	BC	B1_PRO_VAR,5	;Clear the CID display flag
   200            C        ;-the first icon
   201            C      M 	PAGE	#(VGA)
       02279 1E8C     1     PAGE ( VGA / 1024 ),
   202 0227A 1824 C        	MOV	A,@((1<<5)|(1<<2))	;":","/"
   203 0227B 1000 C        	CALL	VGASTAMP1
   204 0227C 1097 C        	CALL	VGADRAWSTAMP
   205            C      M 	PAGE	#($)
       0227D 1E88     1     PAGE ( $ / 1024 ),
   206            C        ;---Check end of message
   207            C        
   208 0227E 0431 C        	MOV	A,B1_MSG_N
   209 0227F 0FD4 C        	JBS	DAM_FLAG,7	;New message exist ?
   210 02280 0430 C        	MOV	A,B1_MSG_T
   211 02281 0132 C        	SUB	A,B1_MSG_ID
   212            C      M 	JPZ	PLAY_FUNC_0_2_VPOVER_VPEND
       02282 0C83     1     JBC  _STATUS , Z 
       02283 1737     1     JMP  PLAY_FUNC_0_2_VPOVER_VPEND ,
   213            C        	
   214 02284      C        PLAY_FUNC_0_2_VPOVER_1:
   215 02284 0572 C        	INC	B1_MSG_ID		;next message
   216 02285      C        PLAY_FUNC_0_2_IDOK:			;找到下一条要播放的VP的ID号
   217 02285 0921 C        	BC	B1_PRO_VAR,4	;Clean del-flag
   218            C        
   219            C      M 	PAGE	#(VGA)
       02286 1E8C     1     PAGE ( VGA / 1024 ),
   220 02287 111E C        	CALL	VGABLANKNUM2
   221 02288 1127 C        	CALL	VGABLANKCHAR
   222            C      M 	PAGE	#($)
       02289 1E88     1     PAGE ( $ / 1024 ),
   223            C        ;---Check Memo/Message
   224 0228A 1880 C        	MOV	A,@0X80
   225 0228B 0FD4 C        	JBS	DAM_FLAG,7	;Check new-flag
   226 0228C 1800 C        	MOV	A,@0
   227 0228D 0232 C        	OR	A,B1_MSG_ID
   228            C      M 	LCALL	GET_VP1IDX	;Check Memo/Message
                      2  M  PAGE #( GET_VP1IDX ),
       0228E 1E83     2     PAGE ( GET_VP1IDX / 1024 ),
       0228F 1279     1     CALL ( GET_VP1IDX % 1024 ),
                      2  M  PAGE #( $ ),
       02290 1E88     2     PAGE ( $ / 1024 ),
   229 02291 0415 C        	MOV	A,TEMP0
   230 02292 0073 C        	MOV	B1_SEC_REG,A	;Save the status(0/~0 - Memo/Message) 
   231            C      M 	JPZ	PLAY_FUNC_0_2_DISP	;---If it is Memo,no CID need display	
       02293 0C83     1     JBC  _STATUS , Z 
       02294 16D9     1     JMP  PLAY_FUNC_0_2_DISP ,
   232            C        
   233            C        ;---It is ICM-message	
   234 02295 180E C        	MOV	A,@CGROUP_MISSCID
   235            C      M 	LCALL	SET_GROUP
                      2  M  PAGE #( SET_GROUP ),
       02296 1E83     2     PAGE ( SET_GROUP / 1024 ),
       02297 1241     1     CALL ( SET_GROUP % 1024 ),
                      2  M  PAGE #( $ ),
       02298 1E88     2     PAGE ( $ / 1024 ),
   236            C        ;-	
   237 02299 1880 C        	MOV	A,@0X80
   238 0229A 0FD4 C        	JBS	DAM_FLAG,7		;Check new-flag
   239 0229B 1800 C        	MOV	A,@0
   240 0229C 0232 C        	OR	A,B1_MSG_ID
   241            C      M 	PAGE	#(DSP)
       0229D 1E83     1     PAGE ( DSP / 1024 ),
   242 0229E 1263 C        	CALL	GET_ONLYID
   243            C        ;???????????????????????????????????????
   244            C        ;Save the Only-ID
   245 0229F 0432 C        	MOV	A,B1_MSG_ID
   246 022A0 1A0F C        	AND	A,@0X0F
   247 022A1 1FF0 C        	ADD	A,@0xF0
   248 022A2 004C C        	MOV	_RC,A
   249 022A3 0415 C        	MOV	A,TEMP0
   250 022A4 004D C        	MOV	_RD,A
   251            C        ;???????????????????????????????????????
   252 022A5 0415 C        	MOV	A,TEMP0		;!!!Only-id(1..100 Nother to do with New-CID)
   253            C      M 	PAGE	#(GET_TELID)
       022A6 1E83     1     PAGE ( GET_TELID / 1024 ),
   254 022A7 125F C        	CALL	GET_TELID
   255            C      M 	PAGE	#($)
       022A8 1E88     1     PAGE ( $ / 1024 ),
   256 022A9 0415 C        	MOV	A,TEMP0
   257            C      M 	JPNZ	PLAY_FUNC_0_2_READCID
       022AA 0E83     1     JBS  _STATUS , Z 
       022AB 16BA     1     JMP  PLAY_FUNC_0_2_READCID ,
   258            C        
   259 022AC 1880 C        	MOV	A,@0X80
   260 022AD 0FD4 C        	JBS	DAM_FLAG,7	;Check new-flag
   261 022AE 1800 C        	MOV	A,@0
   262 022AF 0232 C        	OR	A,B1_MSG_ID
   263            C      M 	PAGE	#(DSP)
       022B0 1E83     1     PAGE ( DSP / 1024 ),
   264 022B1 1263 C        	CALL	GET_ONLYID
   265 022B2 0415 C        	MOV	A,TEMP0
   266 022B3 1980 C        	OR	A,@0X80		;!!!Only-id(0x80|1..0x80|100 Nother to do with Old-CID)
   267            C      M 	PAGE	#(GET_TELID)
       022B4 1E83     1     PAGE ( GET_TELID / 1024 ),
   268 022B5 125F C        	CALL	GET_TELID
   269            C      M 	PAGE	#($)
       022B6 1E88     1     PAGE ( $ / 1024 ),
   270 022B7 0415 C        	MOV	A,TEMP0
   271            C      M 	JPZ	PLAY_FUNC_0_2_DISP	;Can't find the CID
       022B8 0C83     1     JBC  _STATUS , Z 
       022B9 16D9     1     JMP  PLAY_FUNC_0_2_DISP ,
   272 022BA      C        PLAY_FUNC_0_2_READCID:
   273            C        	
   274 022BA 0415 C        	MOV	A,TEMP0
   275 022BB 006F C        	MOV	B1_CID_N,A	;the message number of TEL
   276            C        ;---Read the data
   277            C      M 	MOV	OFFSET_D,@DATA_ZONE_START
       022BC 1860     1     MOV A,@( DATA_ZONE_START )
       022BD 005D     1     MOV  OFFSET_D ,A
   278 022BE      C        PLAY_FUNC_0_2_READCID_LOOP:
   279 022BE 042F C        	MOV	A,B1_CID_N
   280            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       022BF 1E83     2     PAGE ( DAT_READ / 1024 ),
       022C0 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       022C1 1E88     2     PAGE ( $ / 1024 ),
   281            C        
   282            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       022C2 041D     1     MOV A, OFFSET_D 
       022C3 004C     1     MOV  _RC ,A
   283            C      M 	MOV	_RD,TEMP0	;the data
       022C4 0415     1     MOV A, TEMP0 
       022C5 004D     1     MOV  _RD ,A
   284            C        
   285 022C6 055D C        	INC	OFFSET_D	;next address
   286            C        
   287 022C7 0416 C        	MOV	A,TEMP1		;Error code
   288            C      M 	JPZ	PLAY_FUNC_0_2_READCID_LOOP
       022C8 0C83     1     JBC  _STATUS , Z 
       022C9 16BE     1     JMP  PLAY_FUNC_0_2_READCID_LOOP ,
   289            C        	
   290            C      M 	PAGE	#(DAT_READ_STOP)
       022CA 1E83     1     PAGE ( DAT_READ_STOP / 1024 ),
   291 022CB 125B C        	CALL	DAT_READ_STOP
   292            C        	
   293 022CC 0B61 C        	BS	B1_PRO_VAR,5	;Set the CID display flag
   294            C        ;---号码在第二,三行显示
   295 022CD      C        PLAY_FUNC_0_2_DISPCID:
   296            C      M 	PAGE	#(DISP_TELNUM)
       022CD 1E8C     1     PAGE ( DISP_TELNUM / 1024 ),
   297 022CE 131A C        	CALL	DISP_TELNUM
   298 022CF 1342 C        	CALL	DISP_TELNAME
   299            C      M 	PAGE	#($)
       022D0 1E88     1     PAGE ( $ / 1024 ),
   300            C        ;---刷新第一二三行	
   301            C      M 	REFURBISH_1AND2AND3L	
                      2  M  BLOCK  0 
       022D1 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       022D2 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       022D3 1880     2     MOV A,@( LCD_CTRL )
       022D4 004C     2     MOV  _RC ,A
       022D5 0B4D     1     BS  _RD , 5 
       022D6 0B8D     1     BS  _RD , 6 
       022D7 0BCD     1     BS  _RD , 7 
   302            C        
   303 022D8 16E8 C        	JMP	PLAY_FUNC_0_2_1stDISP
   304 022D9      C        PLAY_FUNC_0_2_DISP:
   305            C        ;---------------------------------------
   306            C      M 	PAGE	#(VGA)
       022D9 1E8C     1     PAGE ( VGA / 1024 ),
   307            C        ;---Third line	
   308 022DA 1883 C        	MOV	A,@(STYLE_CENTER)
   309 022DB 1026 C        	CALL	VGACHAR
   310 022DC 180F C        	MOV	A,@15			;PLAY
   311 022DD 114D C        	CALL	VGASTRING
   312 022DE 1800 C        	MOV	A,@(CH_BLANK)
   313 022DF 1026 C        	CALL	VGACHAR
   314            C        	
   315 022E0 0433 C        	MOV	A,B1_SEC_REG		;Save the status(0/~0 - Memo/Message) 
   316            C      M 	PAGE	#(SEL_MSGDISP)
       022E1 1E8C     1     PAGE ( SEL_MSGDISP / 1024 ),
   317 022E2 108D C        	CALL	SEL_MSGDISP
   318            C      M 	PAGE	#(VGA)
       022E3 1E8C     1     PAGE ( VGA / 1024 ),
   319 022E4 114D C        	CALL	VGASTRING		;MEMO/MESSAGE
   320            C        
   321 022E5 18FF C        	MOV	A,@(CH_END)
   322 022E6 1026 C        	CALL	VGACHAR
   323 022E7 10AB C        	CALL	VGADRAWCHAR
   324            C        
   325 022E8      C        PLAY_FUNC_0_2_1stDISP:
   326            C        ;---First line	
   327 022E8 0432 C        	MOV	A,B1_MSG_ID
   328            C      M 	PAGE	#(DISP_ID)
       022E9 1E8C     1     PAGE ( DISP_ID / 1024 ),
   329 022EA 1374 C        	CALL	DISP_ID
   330            C        ;---No Second line
   331            C      M 	PAGE	#($)
       022EB 1E88     1     PAGE ( $ / 1024 ),
   332 022EC      C        PLAY_FUNC_0_2_LOADVP:
   333            C        		
   334 022EC 182E C        	MOV	A,@VOPID_MESSAGE
   335            C      M 	PAGE	#(VOP_STOR_VP)
       022ED 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   336 022EE 1064 C        	CALL	VOP_STOR_VP			;VP"message"
   337 022EF 0432 C        	MOV	A,B1_MSG_ID			;message_ID	;Announce
   338            C      M 	LCALL	ANNOUNCE_NUM
                      2  M  PAGE #( ANNOUNCE_NUM ),
       022F0 1E82     2     PAGE ( ANNOUNCE_NUM / 1024 ),
       022F1 11C8     1     CALL ( ANNOUNCE_NUM % 1024 ),
                      2  M  PAGE #( $ ),
       022F2 1E88     2     PAGE ( $ / 1024 ),
   339            C        
   340            C      M 	JPB	DAM_FLAG,7,PLAY_FUNC_0_2_LOADVPNEW
       022F3 0DD4     1     JBC  DAM_FLAG , 7 
       022F4 1715     1     JMP  PLAY_FUNC_0_2_LOADVPNEW ,
   341            C        
   342            C      M 	MOV	TEMP1,B1_MSG_ID
       022F5 0432     1     MOV A, B1_MSG_ID 
       022F6 0056     1     MOV  TEMP1 ,A
   343            C      M 	MOV	TEMP0,@ID_PLYA
       022F7 1806     1     MOV A,@( ID_PLYA )
       022F8 0055     1     MOV  TEMP0 ,A
   344            C      M 	PAGE	#(STOR_VP)
       022F9 1E83     1     PAGE ( STOR_VP / 1024 ),
   345 022FA 1067 C        	CALL	STOR_VP	
   346            C        ;---Get the tag
   347            C      M 	PAGE	#(GET_MSGMIN)	
       022FB 1E83     1     PAGE ( GET_MSGMIN / 1024 ),
   348 022FC 12A3 C        	CALL	GET_MSGMIN
   349            C      M 	MOV	B1_MIN_REG,TEMP0
       022FD 0415     1     MOV A, TEMP0 
       022FE 0074     1     MOV  B1_MIN_REG ,A
   350 022FF 12A0 C        	CALL	GET_MSGHOUR
   351            C      M 	MOV	B1_HOUR_REG,TEMP0
       02300 0415     1     MOV A, TEMP0 
       02301 0075     1     MOV  B1_HOUR_REG ,A
   352 02302 12A9 C        	CALL	GET_MSGDAY
   353            C      M 	MOV	B1_DAY_REG,TEMP0
       02303 0415     1     MOV A, TEMP0 
       02304 0076     1     MOV  B1_DAY_REG ,A
   354 02305 12A6 C        	CALL	GET_MSGMON
   355            C      M 	MOV	B1_MON_REG,TEMP0
       02306 0415     1     MOV A, TEMP0 
       02307 0077     1     MOV  B1_MON_REG ,A
   356 02308 129B C        	CALL	GET_MSGWEEK
   357            C      M 	MOV	B1_WEEK_REG,TEMP0
       02309 0415     1     MOV A, TEMP0 
       0230A 0079     1     MOV  B1_WEEK_REG ,A
   358            C        
   359 0230B 0439 C        	MOV	A,B1_WEEK_REG
   360 0230C 12C8 C        	CALL	VP_TOWEEK
   361 0230D 0435 C        	MOV	A,B1_HOUR_REG
   362 0230E 12CE C        	CALL	VP_TOHOUR
   363 0230F 0434 C        	MOV	A,B1_MIN_REG
   364 02310 12D2 C        	CALL	VP_TOMIN
   365            C        	;PAGE	#($)
   366            C        ;---
   367            C        ;-the first date/time	
   368            C      M 	PAGE	#(DISP_DATETIME)
       02311 1E8C     1     PAGE ( DISP_DATETIME / 1024 ),
   369 02312 12D6 C        	CALL	DISP_DATETIME
   370            C      M 	PAGE	#($)
       02313 1E88     1     PAGE ( $ / 1024 ),
   371            C        	
   372 02314 15DD C        	JMP	PLAY_FUNC_END
   373            C        ;---------------------------------------
   374 02315      C        PLAY_FUNC_0_2_LOADVPNEW:
   375            C        	
   376            C      M 	MOV	TEMP1,B1_MSG_ID
       02315 0432     1     MOV A, B1_MSG_ID 
       02316 0056     1     MOV  TEMP1 ,A
   377            C      M 	MOV	TEMP0,@ID_PLYN
       02317 1805     1     MOV A,@( ID_PLYN )
       02318 0055     1     MOV  TEMP0 ,A
   378            C      M 	PAGE	#(STOR_VP)
       02319 1E83     1     PAGE ( STOR_VP / 1024 ),
   379 0231A 1067 C        	CALL	STOR_VP
   380            C        ;---Get the tag
   381            C      M 	PAGE	#(GET_MSGMINNEW)	
       0231B 1E83     1     PAGE ( GET_MSGMINNEW / 1024 ),
   382 0231C 1292 C        	CALL	GET_MSGMINNEW
   383            C      M 	MOV	B1_MIN_REG,TEMP0
       0231D 0415     1     MOV A, TEMP0 
       0231E 0074     1     MOV  B1_MIN_REG ,A
   384 0231F 128F C        	CALL	GET_MSGHOURNEW
   385            C      M 	MOV	B1_HOUR_REG,TEMP0
       02320 0415     1     MOV A, TEMP0 
       02321 0075     1     MOV  B1_HOUR_REG ,A
   386 02322 1298 C        	CALL	GET_MSGDAYNEW
   387            C      M 	MOV	B1_DAY_REG,TEMP0
       02323 0415     1     MOV A, TEMP0 
       02324 0076     1     MOV  B1_DAY_REG ,A
   388 02325 1295 C        	CALL	GET_MSGMONNEW
   389            C      M 	MOV	B1_MON_REG,TEMP0
       02326 0415     1     MOV A, TEMP0 
       02327 0077     1     MOV  B1_MON_REG ,A
   390 02328 1289 C        	CALL	GET_MSGWEEKNEW
   391            C      M 	MOV	B1_WEEK_REG,TEMP0
       02329 0415     1     MOV A, TEMP0 
       0232A 0079     1     MOV  B1_WEEK_REG ,A
   392            C        
   393 0232B 0439 C        	MOV	A,B1_WEEK_REG
   394 0232C 12C8 C        	CALL	VP_TOWEEK
   395 0232D 0435 C        	MOV	A,B1_HOUR_REG
   396 0232E 12CE C        	CALL	VP_TOHOUR
   397 0232F 0434 C        	MOV	A,B1_MIN_REG
   398 02330 12D2 C        	CALL	VP_TOMIN
   399            C        	;PAGE	#($)
   400            C        ;-the first date/time	
   401            C      M 	PAGE	#(DISP_DATETIME)
       02331 1E8C     1     PAGE ( DISP_DATETIME / 1024 ),
   402 02332 12D6 C        	CALL	DISP_DATETIME
   403            C      M 	PAGE	#($)
       02333 1E88     1     PAGE ( $ / 1024 ),
   404            C        	
   405 02334 15DD C        	JMP	PLAY_FUNC_END
   406            C        ;---------------------------------------
   407 02335      C        PLAY_FUNC_0_2_MKEY_STP:		;stop
   408            C      M 	PAGE	#(INIT_DAM_FUNC)
       02335 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   409 02336 11C1 C        	CALL	INIT_DAM_FUNC
   410            C        	;JMP	PLAY_FUNC_END
   411            C        ;---------------------------------------
   412 02337      C        PLAY_FUNC_0_2_VPOVER_VPEND:
   413            C      M 	PAGE	#(INIT_DAM_FUNC)
       02337 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   414 02338 11C1 C        	CALL	INIT_DAM_FUNC
   415            C      M 	PAGE	#(VPMSG_REALDEL)
       02339 1E83     1     PAGE ( VPMSG_REALDEL / 1024 ),
   416 0233A 1227 C        	CALL	VPMSG_REALDEL	;0x6100
   417            C      M 	PAGE	#(TEL_GC_CHK)
       0233B 1E82     1     PAGE ( TEL_GC_CHK / 1024 ),
   418 0233C 10FC C        	CALL	TEL_GC_CHK
   419            C      M 	PAGE	#(VPMSG_CHK)
       0233D 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   420 0233E 1182 C        	CALL	VPMSG_CHK
   421            C      M 	PAGE	#(TEL_UNLINK)
       0233F 1E84     1     PAGE ( TEL_UNLINK / 1024 ),
   422 02340 11D3 C        	CALL	TEL_UNLINK	;Disable the VP-TEL link(follow the VPMSG_CHK)
   423            C        
   424 02341 1830 C        	MOV	A,@VOPID_ENDOFMESSAGE
   425            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       02342 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       02343 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       02344 1E88     2     PAGE ( $ / 1024 ),
   426            C        
   427            C      M 	MOV	B1_PRO_VAR,@3
       02345 1803     1     MOV A,@( 3 )
       02346 0061     1     MOV  B1_PRO_VAR ,A
   428            C        	
   429 02347 15DD C        	JMP	PLAY_FUNC_END
   430            C        ;---------------------------------------
   431 02348      C        PLAY_FUNC_0_2_MKEY:
   432            C        		
   433 02348 1810 C        	MOV	A,@CKEY_PLY
   434            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02349 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0234A 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0234B 1E88     2     PAGE ( $ / 1024 ),
   435            C      M 	JPNC	PLAY_FUNC_0_2_MKEY_PLY	;play/pause
       0234C 0E03     1     JBS  _STATUS , C 
       0234D 176D     1     JMP  PLAY_FUNC_0_2_MKEY_PLY ,
   436            C        
   437 0234E 1811 C        	MOV	A,@CKEY_OGM
   438            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0234F 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02350 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02351 1E88     2     PAGE ( $ / 1024 ),
   439            C      M 	JPNC	PLAY_FUNC_0_2_MKEY_OGM	;Repeat
       02352 0E03     1     JBS  _STATUS , C 
       02353 1775     1     JMP  PLAY_FUNC_0_2_MKEY_OGM ,
   440 02354 1812 C        	MOV	A,@CKEY_MMO
   441            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02355 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02356 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02357 1E88     2     PAGE ( $ / 1024 ),
   442            C      M 	JPNC	PLAY_FUNC_0_2_MKEY_MMO	;Next
       02358 0E03     1     JBS  _STATUS , C 
       02359 1785     1     JMP  PLAY_FUNC_0_2_MKEY_MMO ,
   443 0235A 1813 C        	MOV	A,@CKEY_STP
   444            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0235B 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0235C 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0235D 1E88     2     PAGE ( $ / 1024 ),
   445            C      M 	JPNC	PLAY_FUNC_0_2_MKEY_STP	;stop
       0235E 0E03     1     JBS  _STATUS , C 
       0235F 1735     1     JMP  PLAY_FUNC_0_2_MKEY_STP ,
   446 02360 1823 C        	MOV	A,@CKEY_DEL
   447            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02361 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02362 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02363 1E88     2     PAGE ( $ / 1024 ),
   448            C      M 	JPNC	PLAY_FUNC_0_2_MKEY_DEL	;Delete the message
       02364 0E03     1     JBS  _STATUS , C 
       02365 178C     1     JMP  PLAY_FUNC_0_2_MKEY_DEL ,
   449            C        
   450 02366 1827 C        	MOV	A,@CKEY_SPK
   451            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02367 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02368 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02369 1E88     2     PAGE ( $ / 1024 ),
   452            C      M 	JPNC	PLAY_FUNC_0_2_MKEY_SPK
       0236A 0E03     1     JBS  _STATUS , C 
       0236B 17B1     1     JMP  PLAY_FUNC_0_2_MKEY_SPK ,
   453            C        
   454 0236C 15DD C        	JMP	PLAY_FUNC_END
   455            C        ;---------------------------------------
   456 0236D      C        PLAY_FUNC_0_2_MKEY_PLY:
   457            C        
   458            C      M 	PAGE	#(IIC)
       0236D 1E83     1     PAGE ( IIC / 1024 ),
   459 0236E 13EC C        	CALL	GET_COMMAND
   460 0236F 0416 C        	MOV	A,TEMP1
   461 02370 1B01 C        	XOR	A,@(1)		;bit8(No work with BEEP)
   462 02371 0056 C        	MOV	TEMP1,A
   463 02372 13CA C        	CALL	STOR_COMMAND
   464            C      M 	PAGE	#($)
       02373 1E88     1     PAGE ( $ / 1024 ),
   465            C        
   466 02374 15DD C        	JMP	PLAY_FUNC_END
   467            C        ;---------------------------------------
   468 02375      C        PLAY_FUNC_0_2_MKEY_OGM:		;repeat
   469 02375 1810 C        	MOV	A,@CTMR1S
   470            C      M 	PAGE	#(STOR_MSG)
       02376 1E8D     1     PAGE ( STOR_MSG / 1024 ),
   471 02377 1308 C        	CALL	STOR_MSG
   472            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       02378 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       02379 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       0237A 1E88     2     PAGE ( $ / 1024 ),
   473            C        
   474            C      M 	JPB	B1_PRO_VAR,3,PLAY_FUNC_0_2_MKEY_DOLAST
       0237B 0CE1     1     JBC  B1_PRO_VAR , 3 
       0237C 177F     1     JMP  PLAY_FUNC_0_2_MKEY_DOLAST ,
   475 0237D 0AE1 C        	BS	B1_PRO_VAR,3	;Set repeat-flag
   476            C        
   477 0237E      C        PLAY_FUNC_0_2_REPEAT:
   478 0237E 1685 C        	JMP	PLAY_FUNC_0_2_IDOK
   479 0237F      C        PLAY_FUNC_0_2_MKEY_DOLAST:
   480 0237F 0432 C        	MOV	A,B1_MSG_ID
   481 02380 1D01 C        	SUB	A,@1
   482            C      M 	JPC	PLAY_FUNC_0_2_REPEAT
       02381 0C03     1     JBC  _STATUS , C 
       02382 177E     1     JMP  PLAY_FUNC_0_2_REPEAT ,
   483            C        	
   484 02383 01F2 C        	DEC	B1_MSG_ID
   485            C        	
   486 02384 177E C        	JMP	PLAY_FUNC_0_2_REPEAT
   487            C        ;---------------------------------------
   488 02385      C        PLAY_FUNC_0_2_MKEY_MMO:		;next
   489            C        
   490 02385 1885 C        	MOV	A,@CVP_END
   491            C      M 	PAGE	#(STOR_MSG)
       02386 1E8D     1     PAGE ( STOR_MSG / 1024 ),
   492 02387 1308 C        	CALL	STOR_MSG
   493            C      M 	PAGE	#(INIT_DAM_FUNC)
       02388 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   494 02389 11C1 C        	CALL	INIT_DAM_FUNC
   495            C      M 	PAGE	#($)
       0238A 1E88     1     PAGE ( $ / 1024 ),
   496            C        
   497 0238B 15DD C        	JMP	PLAY_FUNC_END
   498            C        ;---------------------------------------
   499 0238C      C        PLAY_FUNC_0_2_MKEY_DEL:		;delete
   500            C        	
   501            C      M 	JPB	B1_PRO_VAR,4,PLAY_FUNC_0_2_MKEY_DODEL
       0238C 0D21     1     JBC  B1_PRO_VAR , 4 
       0238D 179C     1     JMP  PLAY_FUNC_0_2_MKEY_DODEL ,
   502            C        
   503 0238E 0B21 C        	BS	B1_PRO_VAR,4	;Set del-flag
   504            C        
   505            C      M 	PAGE	#(VGA)
       0238F 1E8C     1     PAGE ( VGA / 1024 ),
   506 02390 1127 C        	CALL	VGABLANKCHAR
   507 02391 1883 C        	MOV	A,@(STYLE_CENTER)
   508 02392 1026 C        	CALL	VGACHAR
   509 02393 1804 C        	MOV	A,@4		;DELETE
   510 02394 114D C        	CALL	VGASTRING
   511 02395 181F C        	MOV	A,@(CH_INTE)	;?
   512 02396 1026 C        	CALL	VGACHAR
   513            C        ;-
   514 02397 18FF C        	MOV	A,@(CH_END)
   515 02398 1026 C        	CALL	VGACHAR
   516 02399 10AB C        	CALL	VGADRAWCHAR
   517            C      M 	PAGE	#($)	
       0239A 1E88     1     PAGE ( $ / 1024 ),
   518            C        	
   519 0239B 15DD C        	JMP	PLAY_FUNC_END
   520 0239C      C        PLAY_FUNC_0_2_MKEY_DODEL:
   521 0239C 0921 C        	BC	B1_PRO_VAR,4	;Clean del-flag
   522            C        
   523            C      M 	PAGE	#(INIT_DAM_FUNC)
       0239D 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   524 0239E 11C1 C        	CALL	INIT_DAM_FUNC
   525            C        ;---Do delete	
   526 0239F 0432 C        	MOV	A,B1_MSG_ID
   527            C      M 	PAGE	#(SET_DELMARK)
       023A0 1E83     1     PAGE ( SET_DELMARK / 1024 ),
   528 023A1 1235 C        	CALL	SET_DELMARK
   529            C        	;PAGE	#($)
   530            C        ;---VOP
   531            C      M 	PAGE	#(VOP_STOR_VP)
       023A2 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
   532 023A3 182E C        	MOV	A,@VOPID_MESSAGE
   533 023A4 1064 C        	CALL	VOP_STOR_VP		;VP"message"
   534 023A5 1838 C        	MOV	A,@VOPID_DELETED
   535 023A6 1064 C        	CALL	VOP_STOR_VP		;VP"Deletee"	
   536            C        	;PAGE	#($)
   537            C        ;---Display	
   538            C      M 	PAGE	#(VGA)
       023A7 1E8C     1     PAGE ( VGA / 1024 ),
   539 023A8 1883 C        	MOV	A,@(STYLE_CENTER)
   540 023A9 1026 C        	CALL	VGACHAR
   541 023AA 182F C        	MOV	A,@47		;DELETE...
   542 023AB 114D C        	CALL	VGASTRING
   543            C        ;-
   544 023AC 18FF C        	MOV	A,@(CH_END)
   545 023AD 1026 C        	CALL	VGACHAR
   546 023AE 10AB C        	CALL	VGADRAWCHAR
   547            C      M 	PAGE	#($)	
       023AF 1E88     1     PAGE ( $ / 1024 ),
   548            C        
   549 023B0 15DD C        	JMP	PLAY_FUNC_END
   550            C        ;---------------------------------------
   551 023B1      C        PLAY_FUNC_0_2_MKEY_SPK:
   552            C      M 	PAGE	#(DSP)
       023B1 1E83     1     PAGE ( DSP / 1024 ),
   553 023B2 11C1 C        	CALL	INIT_DAM_FUNC
   554 023B3 1227 C        	CALL	VPMSG_REALDEL	;0x6100
   555            C      M 	PAGE	#(TEL_GC_CHK)
       023B4 1E82     1     PAGE ( TEL_GC_CHK / 1024 ),
   556 023B5 10FC C        	CALL	TEL_GC_CHK
   557            C        	
   558 023B6 1894 C        	MOV	A,@CPHONE_ON
   559            C      M 	PAGE	#(STOR_MSG)
       023B7 1E8D     1     PAGE ( STOR_MSG / 1024 ),
   560 023B8 1308 C        	CALL	STOR_MSG
   561 023B9 1352 C        	CALL	CLR_PRO_STACK
   562            C      M 	PAGE	#($)
       023BA 1E88     1     PAGE ( $ / 1024 ),
   563 023BB 00E1 C        	CLR	B1_PRO_VAR
   564            C        
   565 023BC 15DD C        	JMP	PLAY_FUNC_END
   566            C        ;-------------------------------------------------------------------------------
   567 023BD      C        PLAY_FUNC_0_3:
   568 023BD 1885 C        	MOV	A,@CVP_END
   569 023BE 0120 C        	SUB	A,B1_MSG
   570            C      M 	JPZ	PLAY_FUNC_0_3_VPOVER	;VOP play end
       023BF 0C83     1     JBC  _STATUS , Z 
       023C0 17C6     1     JMP  PLAY_FUNC_0_3_VPOVER ,
   571 023C1 1880 C        	MOV 	A,@CMSG_MKEY
   572 023C2 0120 C        	SUB 	A,B1_MSG
   573            C      M 	JPZ 	PLAY_FUNC_0_3_MKEY
       023C3 0C83     1     JBC  _STATUS , Z 
       023C4 17D5     1     JMP  PLAY_FUNC_0_3_MKEY ,
   574            C        
   575 023C5 15DD C        	JMP	PLAY_FUNC_END
   576            C        ;---------------------------------------	
   577 023C6      C        PLAY_FUNC_0_3_VPOVER:
   578            C      M 	DAM_SPK_DISABLE
       023C6 0949     1     BC  _P9 , 5 
   579            C        	
   580            C      M 	PAGE	#(INIT_DAM_FUNC)
       023C7 1E83     1     PAGE ( INIT_DAM_FUNC / 1024 ),
   581 023C8 11C1 C        	CALL	INIT_DAM_FUNC
   582            C      M 	PAGE	#(VPMSG_CHK)
       023C9 1E82     1     PAGE ( VPMSG_CHK / 1024 ),
   583 023CA 1182 C        	CALL	VPMSG_CHK
   584            C      M 	PAGE	#(DAA_OFF)
       023CB 1E83     1     PAGE ( DAA_OFF / 1024 ),
   585 023CC 11ED C        	CALL	DAA_OFF
   586            C        
   587            C      M 	PAGE	#(CLR_PRO_STACK)	
       023CD 1E8D     1     PAGE ( CLR_PRO_STACK / 1024 ),
   588 023CE 1352 C        	CALL	CLR_PRO_STACK
   589 023CF 00E1 C        	CLR	B1_PRO_VAR
   590            C        ;---
   591 023D0 1890 C        	MOV	A,@CMSG_INIT
   592            C      M 	PAGE	#(STOR_MSG)
       023D1 1E8D     1     PAGE ( STOR_MSG / 1024 ),
   593 023D2 1308 C        	CALL	STOR_MSG
   594            C      M 	PAGE	#($)
       023D3 1E88     1     PAGE ( $ / 1024 ),
   595            C        	
   596 023D4 15DD C        	JMP	PLAY_FUNC_END
   597            C        ;---------------------------------------
   598 023D5      C        PLAY_FUNC_0_3_MKEY:
   599 023D5 1813 C        	MOV	A,@CKEY_STP
   600            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       023D6 1E81     2     PAGE ( KEY_CHK / 1024 ),
       023D7 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       023D8 1E88     2     PAGE ( $ / 1024 ),
   601            C      M 	JPNC	PLAY_FUNC_0_3_VPOVER	;stop
       023D9 0E03     1     JBS  _STATUS , C 
       023DA 17C6     1     JMP  PLAY_FUNC_0_3_VPOVER ,
   602            C        
   603 023DB 1827 C        	MOV	A,@CKEY_SPK
   604            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       023DC 1E81     2     PAGE ( KEY_CHK / 1024 ),
       023DD 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       023DE 1E88     2     PAGE ( $ / 1024 ),
   605            C      M 	JPNC	PLAY_FUNC_0_2_MKEY_SPK
       023DF 0E03     1     JBS  _STATUS , C 
       023E0 17B1     1     JMP  PLAY_FUNC_0_2_MKEY_SPK ,
   606            C        
   607 023E1 15DD C        	JMP	PLAY_FUNC_END
   608            C        ;-------------------------------------------------------------------------------
   609            C        	
   622                     ;-------------------------------------------------------------------------------
   623                     ;page9-10-11
   624                     INCLUDE		"f_menu.dt"
     1            C        ORG	(9<<10)
     2            C        ;-------------------------------------------------------------------------------
     3 02400      C        MENU_FUNC:
     4            C      M 	BANK	1
       02400 0B84     1     BS  _RSR , 6 
       02401 09C4     1     BC  _RSR , 7 
     5            C        	
     6 02402 0421 C        	MOV	A,B1_PRO_VAR
     7 02403 1A0F C        	AND	A,@0X0f
     8            C      M 	MTBL
       02404 0020     1     TBL 
             2404     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
     9 02405 144B C        	JMP	MENU_FUNC_0	;0 - Enter
    10 02406 1484 C        	JMP	MENU_FUNC_1	;1 - OPTIONS MENU
    11 02407 1561 C        	JMP	MENU_FUNC_2	;2 - SET TIME/DATE
    12 02408 16B9 C        	JMP	MENU_FUNC_3	;3 - SET FLASH TIME
    13 02409 172E C        	JMP	MENU_FUNC_4	;4 - LCD CONTRAST
    14 0240A 1792 C        	JMP	MENU_FUNC_5	;5 - MESSAGE LENGTH
    15 0240B 1794 C        	JMP	MENU_FUNC_6	;6 - RINGS TO ANSWER
    16 0240C 1796 C        	JMP	MENU_FUNC_7	;7 - REMOTE ACCESS
    17 0240D 1798 C        	JMP	MENU_FUNC_8	;8 - TAM HD: ON/OFF
    18 0240E 1415 C        	JMP	MENU_FUNC_END	;9
    19 0240F 179A C        	JMP	MENU_FUNC_A	;10 - 
    20 02410 1415 C        	JMP	MENU_FUNC_END	;11
    21 02411 1415 C        	JMP	MENU_FUNC_END	;12
    22 02412 1415 C        	JMP	MENU_FUNC_END	;13
    23 02413 1415 C        	JMP	MENU_FUNC_END	;14
    24 02414 1415 C        	JMP	MENU_FUNC_END	;15
    25            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    26            C        ;return
    27 02415      C        MENU_FUNC_END:	
    28            C        	
    29            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       02415 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       02416 15AC     1     JMP ( MAIN_LOOP % 1024 ),
    30            C        ;-------------------------------------------------------------------------------
    31            C        ;-------------------------------------------------------------------------------
    32            C        ;	上一年最后一天到上个月最后一天的天数,折算成变化的星期数(不算闰年)
    33            C        ;-------------------------------------------------------------------------------
    34 02417      C        DATE_TAB:
    35            C      M 	MTBL
       02417 0020     1     TBL 
             2417     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    36 02418 1C00 C        	RETL	@0	;1月 - 31
    37 02419 1C03 C        	RETL	@3	;2月 - 28
    38 0241A 1C03 C        	RETL	@3	;3月 - 31
    39 0241B 1C06 C        	RETL	@6	;4月 - 30
    40 0241C 1C01 C        	RETL	@1	;5月 - 31
    41 0241D 1C04 C        	RETL	@4	;6月 - 30
    42 0241E 1C06 C        	RETL	@6	;7月 - 31
    43 0241F 1C02 C        	RETL	@2	;8月 - 31
    44 02420 1C05 C        	RETL	@5	;9月 - 30
    45 02421 1C00 C        	RETL	@0	;10月 - 31
    46 02422 1C03 C        	RETL	@3	;11月 - 30
    47 02423 1C05 C        	RETL	@5	;12月 - 31
    48            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    49            C        ;-------------------------------------------------------------------------------
    50 02424      C        DATEMAX_TAB:
    51            C      M 	MTBL
       02424 0020     1     TBL 
             2424     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    52 02425 1C00 C        	RETL	@0	;0 - reserved
    53 02426 1C63 C        	RETL	@99	;1 - year
    54 02427 1C0C C        	RETL	@12	;2 - month
    55 02428 1C1F C        	RETL	@31	;3 - day
    56 02429 1C17 C        	RETL	@23	;4 - hour
    57 0242A 1C3B C        	RETL	@59	;5 - minute
    58 0242B 1C06 C        	RETL	@6	;6 - week
    59 0242C 1C00 C        	RETL	@0	;0 - reserved
    60            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    61 0242D      C        DATEMIN_TAB:
    62            C      M 	MTBL
       0242D 0020     1     TBL 
             242D     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    63 0242E 1C00 C        	RETL	@0	;0 - reserved
    64 0242F 1C00 C        	RETL	@0	;1 - year
    65 02430 1C01 C        	RETL	@1	;2 - month
    66 02431 1C01 C        	RETL	@1	;3 - day
    67 02432 1C00 C        	RETL	@0	;4 - hour
    68 02433 1C00 C        	RETL	@0	;5 - minute
    69 02434 1C00 C        	RETL	@0	;6 - week
    70 02435 1C00 C        	RETL	@0	;0 - reserved
    71            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    72 02436      C        DATEDISPOFFSET_TAB:		;以第一行左起的偏移
    73            C      M 	MTBL
       02436 0020     1     TBL 
             2436     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    74 02437 1C00 C        	RETL	@0	;0 - reserved
    75 02438 1C11 C        	RETL	@17	;1 - year
    76 02439 1C06 C        	RETL	@6	;2 - month
    77 0243A 1C04 C        	RETL	@4	;3 - day
    78 0243B 1C00 C        	RETL	@0	;4 - hour
    79 0243C 1C02 C        	RETL	@2	;5 - minute
    80 0243D 1C00 C        	RETL	@0	;6 - week
    81 0243E 1C00 C        	RETL	@0	;0 - reserved
    82            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    83 0243F      C        DATEADDR_TAB:		;存取数据的地址
    84            C      M 	MTBL
       0243F 0020     1     TBL 
             243F     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    85 02440 1C00 C        	RETL	@0		;0 - reserved
    86 02441 1C38 C        	RETL	@B1_YEAR_REG	;1 - year
    87 02442 1C37 C        	RETL	@B1_MON_REG	;2 - month
    88 02443 1C36 C        	RETL	@B1_DAY_REG	;3 - day
    89 02444 1C35 C        	RETL	@B1_HOUR_REG	;4 - hour
    90 02445 1C34 C        	RETL	@B1_MIN_REG	;5 - minute
    91 02446 1C39 C        	RETL	@B1_WEEK_REG	;6 - week
    92 02447 1C00 C        	RETL	@0		;0 - reserved
    93            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    94 02448      C        HD_TAB:		;HD on/off display string index
    95            C      M 	MTBL
       02448 0020     1     TBL 
             2448     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    96 02449 1C20 C        	RETL	@32	;0 - off
    97 0244A 1C1F C        	RETL	@31	;1 - on
    98            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    99            C        ;-------------------------------------------------------------------------------
   100 0244B      C        MENU_FUNC_0:		;idle
   101            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       0244B 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       0244C 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       0244D 1E89     2     PAGE ( $ / 1024 ),
   102            C        
   103 0244E 18CB C        	MOV	A,@CMSG_MENU
   104 0244F 0120 C        	SUB	A,B1_MSG
   105            C      M 	JPZ	MENU_FUNC_0_MENU
       02450 0C83     1     JBC  _STATUS , Z 
       02451 1465     1     JMP  MENU_FUNC_0_MENU ,
   106            C        
   107            C        
   108 02452 18C7 C        	MOV	A,@CSEL_OGM
   109 02453 0120 C        	SUB	A,B1_MSG
   110            C      M 	JPZ	MENU_FUNC_0_SELOGM
       02454 0C83     1     JBC  _STATUS , Z 
       02455 145F     1     JMP  MENU_FUNC_0_SELOGM ,
   111 02456 18C8 C        	MOV	A,@CSEL_ONOFF
   112 02457 0120 C        	SUB	A,B1_MSG
   113            C      M 	JPZ	MENU_FUNC_0_SELONOFF
       02458 0C83     1     JBC  _STATUS , Z 
       02459 1461     1     JMP  MENU_FUNC_0_SELONOFF ,
   114            C        
   115 0245A 18A8 C        	MOV 	A,@CPOWER_ON
   116 0245B 0120 C        	SUB 	A,B1_MSG
   117            C      M 	JPZ 	MENU_FUNC_0_POWERON
       0245C 0C83     1     JBC  _STATUS , Z 
       0245D 1463     1     JMP  MENU_FUNC_0_POWERON ,
   118            C        	
   119 0245E 1415 C        	JMP	MENU_FUNC_END
   120            C        ;---------------------------------------
   121 0245F      C        MENU_FUNC_0_SELOGM:
   122            C      M 	LJMP	MENU_0_SELOGM
                      2  M  PAGE #( MENU_0_SELOGM ),
       0245F 1E8A     2     PAGE ( MENU_0_SELOGM / 1024 ),
       02460 1640     1     JMP ( MENU_0_SELOGM % 1024 ),
   123            C        ;---------------------------------------
   124 02461      C        MENU_FUNC_0_SELONOFF:
   125            C      M 	LJMP	MENU_0_SELONOFF
                      2  M  PAGE #( MENU_0_SELONOFF ),
       02461 1E8A     2     PAGE ( MENU_0_SELONOFF / 1024 ),
       02462 1668     1     JMP ( MENU_0_SELONOFF % 1024 ),
   126 02463      C        MENU_FUNC_0_POWERON:	
   127            C      M 	LJMP	MENU_0_SELONOFF_1
                      2  M  PAGE #( MENU_0_SELONOFF_1 ),
       02463 1E8A     2     PAGE ( MENU_0_SELONOFF_1 / 1024 ),
       02464 167F     1     JMP ( MENU_0_SELONOFF_1 % 1024 ),
   128            C        ;---------------------------------------
   129 02465      C        MENU_FUNC_0_MENU:
   130            C        	
   131 02465 1801 C        	MOV	A,@1		
   132 02466 0061 C        	MOV	B1_PRO_VAR,A	;
   133 02467 0071 C        	MOV	B1_MSG_N,A	;function value
   134            C        
   135            C      M 	RTC_DISP_DISABLE	;Disable RTC display
       02468 0812     1     BC  SYS_FLAG , 0 
   136            C        
   137 02469 00E2 C        	CLR	B1_PRO_VAR1
   138 0246A 1808 C        	MOV	A,@CTMR500MS
   139            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       0246B 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       0246C 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       0246D 1E89     2     PAGE ( $ / 1024 ),
   140            C        	
   141            C      M 	PAGE	#(VGA)
       0246E 1E8C     1     PAGE ( VGA / 1024 ),
   142 0246F 110D C        	CALL	VGABLANKSTAMP
   143 02470 1115 C        	CALL	VGABLANKNUM1
   144 02471 111E C        	CALL	VGABLANKNUM2
   145 02472 1127 C        	CALL	VGABLANKCHAR
   146 02473 1883 C        	MOV	A,@(STYLE_CENTER)
   147 02474 1026 C        	CALL	VGACHAR
   148            C        ;-
   149 02475 180E C        	MOV	A,@14		;OPTIONS
   150 02476 114D C        	CALL	VGASTRING
   151 02477 1800 C        	MOV	A,@(CH_BLANK)
   152 02478 1026 C        	CALL	VGACHAR
   153 02479 1817 C        	MOV	A,@23		;MENU
   154 0247A 114D C        	CALL	VGASTRING
   155 0247B 1861 C        	MOV	A,@(CH_UP)	;UP
   156 0247C 1026 C        	CALL	VGACHAR
   157 0247D 1862 C        	MOV	A,@(CH_DOWN)	;DOWN
   158 0247E 1026 C        	CALL	VGACHAR
   159            C        ;-
   160 0247F 18FF C        	MOV	A,@(CH_END)
   161 02480 1026 C        	CALL	VGACHAR
   162 02481 10AB C        	CALL	VGADRAWCHAR
   163            C      M 	PAGE	#($)
       02482 1E89     1     PAGE ( $ / 1024 ),
   164            C        
   165 02483 1415 C        	JMP	MENU_FUNC_END
   166            C        ;-------------------------------------------------------------------------------
   167 02484      C        MENU_FUNC_1:
   168            C        	
   169 02484 1880 C        	MOV 	A,@CMSG_MKEY
   170 02485 0120 C        	SUB 	A,B1_MSG
   171            C      M 	JPZ 	MENU_FUNC_1_MKEY
       02486 0C83     1     JBC  _STATUS , Z 
       02487 148D     1     JMP  MENU_FUNC_1_MKEY ,
   172            C        
   173 02488 1898 C        	MOV 	A,@CMSG_TMR
   174 02489 0120 C        	SUB 	A,B1_MSG
   175            C      M 	JPZ 	MENU_FUNC_1_TMR		;500ms
       0248A 0C83     1     JBC  _STATUS , Z 
       0248B 14BF     1     JMP  MENU_FUNC_1_TMR ,
   176            C        
   177 0248C 1415 C        	JMP	MENU_FUNC_END
   178            C        ;---------------------------------------
   179 0248D      C        MENU_FUNC_1_MKEY:
   180 0248D 00E2 C        	CLR	B1_PRO_VAR1
   181            C        	
   182 0248E 1820 C        	MOV	A,@CKEY_MNU
   183            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0248F 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02490 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02491 1E89     2     PAGE ( $ / 1024 ),
   184            C      M 	JPNC	MENU_FUNC_1_MKEY_MNU
       02492 0E03     1     JBS  _STATUS , C 
       02493 14A7     1     JMP  MENU_FUNC_1_MKEY_MNU ,
   185            C        	
   186 02494 1821 C        	MOV	A,@CKEY_UP
   187            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02495 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02496 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02497 1E89     2     PAGE ( $ / 1024 ),
   188            C      M 	JPNC	MENU_FUNC_1_MKEY_UP
       02498 0E03     1     JBS  _STATUS , C 
       02499 14CF     1     JMP  MENU_FUNC_1_MKEY_UP ,
   189 0249A 1822 C        	MOV	A,@CKEY_DWN
   190            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0249B 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0249C 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0249D 1E89     2     PAGE ( $ / 1024 ),
   191            C      M 	JPNC	MENU_FUNC_1_MKEY_DWN
       0249E 0E03     1     JBS  _STATUS , C 
       0249F 14C5     1     JMP  MENU_FUNC_1_MKEY_DWN ,
   192            C        
   193 024A0 1813 C        	MOV	A,@CKEY_STP
   194            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       024A1 1E81     2     PAGE ( KEY_CHK / 1024 ),
       024A2 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       024A3 1E89     2     PAGE ( $ / 1024 ),
   195            C      M 	JPNC	MENU_FUNC_1_MKEY_STP
       024A4 0E03     1     JBS  _STATUS , C 
       024A5 14B6     1     JMP  MENU_FUNC_1_MKEY_STP ,
   196            C        	
   197 024A6 1415 C        	JMP	MENU_FUNC_END
   198            C        ;---------------------------------------
   199 024A7      C        MENU_FUNC_1_MKEY_MNU:
   200 024A7 0431 C        	MOV	A,B1_MSG_N
   201 024A8 1D01 C        	SUB	A,@1
   202            C      M 	JPZ	MENU_FUNC_1_MKEY_EXITMNU
       024A9 0C83     1     JBC  _STATUS , Z 
       024AA 14B6     1     JMP  MENU_FUNC_1_MKEY_EXITMNU ,
   203 024AB 0431 C        	MOV	A,B1_MSG_N
   204 024AC 1D09 C        	SUB	A,@9
   205            C      M 	JPZ	MENU_FUNC_1_MKEY_EXITMNU
       024AD 0C83     1     JBC  _STATUS , Z 
       024AE 14B6     1     JMP  MENU_FUNC_1_MKEY_EXITMNU ,
   206            C        	
   207 024AF 0431 C        	MOV	A,B1_MSG_N
   208 024B0 0061 C        	MOV	B1_PRO_VAR,A
   209            C        
   210 024B1 1890 C        	MOV	A,@CMSG_INIT
   211            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       024B2 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       024B3 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       024B4 1E89     2     PAGE ( $ / 1024 ),
   212            C        
   213 024B5 1415 C        	JMP	MENU_FUNC_END
   214            C        ;---------------------------------------
   215 024B6      C        MENU_FUNC_1_MKEY_STP:
   216 024B6      C        MENU_FUNC_2_MKEY_STP:
   217 024B6      C        MENU_FUNC_3_MKEY_STP:
   218 024B6      C        MENU_FUNC_4_MKEY_STP:
   219 024B6      C        MENU_FUNC_5_MKEY_STP:
   220 024B6      C        MENU_FUNC_6789_MKEY_STP:
   221            C        ;MENU_FUNC_6_MKEY_STP:
   222            C        ;MENU_FUNC_7_MKEY_STP:
   223            C        ;MENU_FUNC_8_MKEY_STP:
   224            C        ;MENU_FUNC_9_MKEY_STP:
   225 024B6      C        MENU_FUNC_1_MKEY_EXITMNU:	;!!!!!!!
   226            C        ;!!!
   227            C      M 	LCALL	CLR_PRO_STACK
                      2  M  PAGE #( CLR_PRO_STACK ),
       024B6 1E8D     2     PAGE ( CLR_PRO_STACK / 1024 ),
       024B7 1352     1     CALL ( CLR_PRO_STACK % 1024 ),
                      2  M  PAGE #( $ ),
       024B8 1E89     2     PAGE ( $ / 1024 ),
   228 024B9 00E1 C        	CLR	B1_PRO_VAR
   229            C        	
   230 024BA 18A7 C        	MOV	A,@CUPDT_MENU
   231            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       024BB 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       024BC 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       024BD 1E89     2     PAGE ( $ / 1024 ),
   232            C        ;---
   233 024BE 1415 C        	JMP	MENU_FUNC_END
   234            C        ;---------------------------------------
   235 024BF      C        MENU_FUNC_1_TMR:
   236 024BF      C        MENU_FUNC_3_TMR:
   237 024BF      C        MENU_FUNC_4_TMR:
   238 024BF      C        MENU_FUNC_6_TMR:
   239 024BF 0562 C        	INC	B1_PRO_VAR1
   240            C        	
   241 024C0 0422 C        	MOV	A,B1_PRO_VAR1
   242 024C1 1D14 C        	SUB	A,@20
   243            C      M 	JPNC	MENU_FUNC_1_MKEY_EXITMNU
       024C2 0E03     1     JBS  _STATUS , C 
       024C3 14B6     1     JMP  MENU_FUNC_1_MKEY_EXITMNU ,
   244 024C4 1415 C        	JMP	MENU_FUNC_END
   245            C        ;---------------------------------------
   246 024C5      C        MENU_FUNC_1_MKEY_DWN:
   247            C      M 	MOV	TEMP1,@1
       024C5 1801     1     MOV A,@( 1 )
       024C6 0056     1     MOV  TEMP1 ,A
   248            C      M 	MOV	TEMP2,@9
       024C7 1809     1     MOV A,@( 9 )
       024C8 0057     1     MOV  TEMP2 ,A
   249            C        	
   250 024C9 0431 C        	MOV	A,B1_MSG_N
   251            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       024CA 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       024CB 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       024CC 1E89     2     PAGE ( $ / 1024 ),
   252 024CD 0071 C        	MOV	B1_MSG_N,A
   253            C        	
   254 024CE 14D8 C        	JMP	MENU_FUNC_1_MKEY_SELMENU
   255            C        ;---------------------------------------
   256 024CF      C        MENU_FUNC_1_MKEY_UP:
   257            C      M 	MOV	TEMP1,@1	;min
       024CF 1801     1     MOV A,@( 1 )
       024D0 0056     1     MOV  TEMP1 ,A
   258            C      M 	MOV	TEMP2,@9	;max
       024D1 1809     1     MOV A,@( 9 )
       024D2 0057     1     MOV  TEMP2 ,A
   259            C        	
   260 024D3 0431 C        	MOV	A,B1_MSG_N
   261            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       024D4 1E82     2     PAGE ( VALUE_INC / 1024 ),
       024D5 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       024D6 1E89     2     PAGE ( $ / 1024 ),
   262 024D7 0071 C        	MOV	B1_MSG_N,A
   263            C        
   264            C        	;JMP	MENU_FUNC_1_MKEY_SELMENU
   265            C        ;---------------------------------------
   266            C        
   267 024D8      C        MENU_FUNC_1_MKEY_SELMENU:
   268            C        
   269            C      M 	PAGE	#(VGA)
       024D8 1E8C     1     PAGE ( VGA / 1024 ),
   270 024D9 110D C        	CALL	VGABLANKSTAMP
   271 024DA 1115 C        	CALL	VGABLANKNUM1
   272 024DB 111E C        	CALL	VGABLANKNUM2
   273 024DC 1127 C        	CALL	VGABLANKCHAR
   274 024DD 1883 C        	MOV	A,@(STYLE_CENTER)
   275 024DE 1026 C        	CALL	VGACHAR
   276            C      M 	PAGE	#($)
       024DF 1E89     1     PAGE ( $ / 1024 ),
   277            C        
   278            C        	;DECA	B1_MSG_N
   279            C        	
   280 024E0 0431 C        	MOV	A,B1_MSG_N
   281 024E1 1A0F C        	AND	A,@0X0F
   282            C      M 	MTBL
       024E2 0020     1     TBL 
             24E2     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   283 024E3 1415 C        	JMP	MENU_FUNC_END	;0 - Enter
   284 024E4 14F3 C        	JMP	MENUSEL_1	;1 - OPTIONS MENU
   285 024E5 1500 C        	JMP	MENUSEL_2	;2 - SET TIME/DATE
   286 024E6 150D C        	JMP	MENUSEL_3	;3 - SET FLASH TIME
   287 024E7 151A C        	JMP	MENUSEL_4	;4 - LCD CONTRAST
   288 024E8 1523 C        	JMP	MENUSEL_5	;5 - MESSAGE LENGTH
   289 024E9 152C C        	JMP	MENUSEL_6	;6 - RINGS TO ANSWER
   290 024EA 1539 C        	JMP	MENUSEL_7	;7 - REMOTE ACCESS
   291 024EB 1542 C        	JMP	MENUSEL_8	;8 - TAM HD: ON/OFF
   292 024EC 1552 C        	JMP	MENUSEL_9	;9 - EXIT OPTIONS
   293 024ED 1415 C        	JMP	MENU_FUNC_END	;0X0A
   294 024EE 1415 C        	JMP	MENU_FUNC_END	;0X0B
   295 024EF 1415 C        	JMP	MENU_FUNC_END	;0X0C
   296 024F0 1415 C        	JMP	MENU_FUNC_END	;0X0D
   297 024F1 1415 C        	JMP	MENU_FUNC_END	;0X0E
   298 024F2 1415 C        	JMP	MENU_FUNC_END	;0X0F
   299            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   300            C        	
   301 024F3      C        MENUSEL_1:
   302            C        
   303            C      M 	PAGE	#(VGA)
       024F3 1E8C     1     PAGE ( VGA / 1024 ),
   304 024F4 180E C        	MOV	A,@14		;OPTIONS
   305 024F5 114D C        	CALL	VGASTRING
   306 024F6 1800 C        	MOV	A,@(CH_BLANK)
   307 024F7 1026 C        	CALL	VGACHAR
   308 024F8 1817 C        	MOV	A,@23		;MENU
   309 024F9 114D C        	CALL	VGASTRING
   310 024FA 1861 C        	MOV	A,@(CH_UP)	;UP
   311 024FB 1026 C        	CALL	VGACHAR
   312 024FC 1862 C        	MOV	A,@(CH_DOWN)	;DOWN
   313 024FD 1026 C        	CALL	VGACHAR
   314            C      M 	PAGE	#($)
       024FE 1E89     1     PAGE ( $ / 1024 ),
   315            C        
   316 024FF 155B C        	JMP	MENU_FUNC_1_MKEY_SELMENU_DO
   317 02500      C        MENUSEL_2:
   318            C      M 	PAGE	#(VGA)
       02500 1E8C     1     PAGE ( VGA / 1024 ),
   319 02501 1813 C        	MOV	A,@19		;SET
   320 02502 114D C        	CALL	VGASTRING
   321 02503 1800 C        	MOV	A,@(CH_BLANK)
   322 02504 1026 C        	CALL	VGACHAR
   323 02505 1814 C        	MOV	A,@20		;TIME
   324 02506 114D C        	CALL	VGASTRING
   325            C        	
   326 02507 180F C        	MOV	A,@(CH_SCH1)	;/
   327 02508 1026 C        	CALL	VGACHAR
   328            C        
   329 02509 1818 C        	MOV	A,@24		;DATE
   330 0250A 114D C        	CALL	VGASTRING
   331            C      M 	PAGE	#($)
       0250B 1E89     1     PAGE ( $ / 1024 ),
   332            C        
   333 0250C 155B C        	JMP	MENU_FUNC_1_MKEY_SELMENU_DO
   334 0250D      C        MENUSEL_3:
   335            C        
   336            C      M 	PAGE	#(VGA)
       0250D 1E8C     1     PAGE ( VGA / 1024 ),
   337 0250E 1813 C        	MOV	A,@19		;SET
   338 0250F 114D C        	CALL	VGASTRING
   339 02510 1800 C        	MOV	A,@(CH_BLANK)
   340 02511 1026 C        	CALL	VGACHAR
   341 02512 1806 C        	MOV	A,@6		;FLASH
   342 02513 114D C        	CALL	VGASTRING
   343 02514 1800 C        	MOV	A,@(CH_BLANK)
   344 02515 1026 C        	CALL	VGACHAR
   345 02516 1814 C        	MOV	A,@20		;TIME
   346 02517 114D C        	CALL	VGASTRING
   347            C      M 	PAGE	#($)
       02518 1E89     1     PAGE ( $ / 1024 ),
   348            C        
   349 02519 155B C        	JMP	MENU_FUNC_1_MKEY_SELMENU_DO
   350 0251A      C        MENUSEL_4:
   351            C        
   352            C      M 	PAGE	#(VGA)	
       0251A 1E8C     1     PAGE ( VGA / 1024 ),
   353 0251B 1809 C        	MOV	A,@9		;LCD
   354 0251C 114D C        	CALL	VGASTRING
   355 0251D 1800 C        	MOV	A,@(CH_BLANK)
   356 0251E 1026 C        	CALL	VGACHAR
   357 0251F 1803 C        	MOV	A,@3		;CONTRAST
   358 02520 114D C        	CALL	VGASTRING
   359            C      M 	PAGE	#($)
       02521 1E89     1     PAGE ( $ / 1024 ),
   360            C        
   361 02522 155B C        	JMP	MENU_FUNC_1_MKEY_SELMENU_DO
   362 02523      C        MENUSEL_5:
   363            C        
   364            C      M 	PAGE	#(VGA)
       02523 1E8C     1     PAGE ( VGA / 1024 ),
   365 02524 1819 C        	MOV	A,@25		;MESSAGE
   366 02525 114D C        	CALL	VGASTRING
   367 02526 1800 C        	MOV	A,@(CH_BLANK)
   368 02527 1026 C        	CALL	VGACHAR
   369 02528 1808 C        	MOV	A,@8		;LENGTH
   370 02529 114D C        	CALL	VGASTRING
   371            C      M 	PAGE	#($)
       0252A 1E89     1     PAGE ( $ / 1024 ),
   372            C        
   373 0252B 155B C        	JMP	MENU_FUNC_1_MKEY_SELMENU_DO
   374 0252C      C        MENUSEL_6:	
   375            C      M 	PAGE	#(VGA)		
       0252C 1E8C     1     PAGE ( VGA / 1024 ),
   376 0252D 1812 C        	MOV	A,@18		;RINGS
   377 0252E 114D C        	CALL	VGASTRING
   378 0252F 1800 C        	MOV	A,@(CH_BLANK)
   379 02530 1026 C        	CALL	VGACHAR
   380 02531 1815 C        	MOV	A,@21		;TO
   381 02532 114D C        	CALL	VGASTRING
   382 02533 1800 C        	MOV	A,@(CH_BLANK)
   383 02534 1026 C        	CALL	VGACHAR
   384 02535 1801 C        	MOV	A,@1		;ANSWER
   385 02536 114D C        	CALL	VGASTRING
   386            C      M 	PAGE	#($)
       02537 1E89     1     PAGE ( $ / 1024 ),
   387            C        	
   388 02538 155B C        	JMP	MENU_FUNC_1_MKEY_SELMENU_DO
   389 02539      C        MENUSEL_7:
   390            C        
   391            C      M 	PAGE	#(VGA)
       02539 1E8C     1     PAGE ( VGA / 1024 ),
   392 0253A 1811 C        	MOV	A,@17		;REMOTE
   393 0253B 114D C        	CALL	VGASTRING
   394 0253C 1800 C        	MOV	A,@(CH_BLANK)
   395 0253D 1026 C        	CALL	VGACHAR
   396 0253E 1800 C        	MOV	A,@0		;ACCESS
   397 0253F 114D C        	CALL	VGASTRING
   398            C      M 	PAGE	#($)
       02540 1E89     1     PAGE ( $ / 1024 ),
   399            C        	
   400 02541 155B C        	JMP	MENU_FUNC_1_MKEY_SELMENU_DO
   401 02542      C        MENUSEL_8:	
   402            C        	;SWAPA	SYS_FLAG
   403            C        	;AND	A,@0X01
   404            C        	
   405 02542 1801 C        	MOV	A,@1
   406 02543 0ED2 C        	JBS	SYS_FLAG,3
   407 02544 1800 C        	MOV	A,@0
   408 02545 1048 C        	CALL	HD_TAB
   409 02546 0072 C        	MOV	B1_MSG_ID,A
   410            C        	
   411            C      M 	PAGE	#(VGA)
       02547 1E8C     1     PAGE ( VGA / 1024 ),
   412 02548 181A C        	MOV	A,@26		;TAM HD
   413 02549 114D C        	CALL	VGASTRING
   414 0254A 181A C        	MOV	A,@(CH_COLON)
   415 0254B 1026 C        	CALL	VGACHAR
   416 0254C 1800 C        	MOV	A,@(CH_BLANK)
   417 0254D 1026 C        	CALL	VGACHAR
   418 0254E 0432 C        	MOV	A,B1_MSG_ID	;ID on/off
   419 0254F 114D C        	CALL	VGASTRING
   420            C      M 	PAGE	#($)
       02550 1E89     1     PAGE ( $ / 1024 ),
   421            C        	
   422 02551 155B C        	JMP	MENU_FUNC_1_MKEY_SELMENU_DO
   423 02552      C        MENUSEL_9:
   424            C        	
   425            C      M 	PAGE	#(VGA)		
       02552 1E8C     1     PAGE ( VGA / 1024 ),
   426 02553 1805 C        	MOV	A,@5		;EXIT
   427 02554 114D C        	CALL	VGASTRING
   428 02555 1800 C        	MOV	A,@(CH_BLANK)
   429 02556 1026 C        	CALL	VGACHAR
   430 02557 180E C        	MOV	A,@14		;OPTIONS
   431 02558 114D C        	CALL	VGASTRING
   432            C      M 	PAGE	#($)
       02559 1E89     1     PAGE ( $ / 1024 ),
   433 0255A 155B C        	JMP	MENU_FUNC_1_MKEY_SELMENU_DO
   434            C        /*
   435            C        MENUSEL_10:
   436            C        	PAGE	#(VGA)		
   437            C        	MOV	A,@5		;EXIT
   438            C        	CALL	VGASTRING
   439            C        	MOV	A,@(CH_BLANK)
   440            C        	CALL	VGACHAR
   441            C        	MOV	A,@14		;OPTIONS
   442            C        	CALL	VGASTRING
   443            C        	PAGE	#($)	
   444            C        	;JMP	MENU_FUNC_1_MKEY_SELMENU_DO
   445            C        */	
   446 0255B      C        MENU_FUNC_1_MKEY_SELMENU_DO:
   447            C        	
   448            C      M 	PAGE	#(VGA)	
       0255B 1E8C     1     PAGE ( VGA / 1024 ),
   449 0255C 18FF C        	MOV	A,@(CH_END)
   450 0255D 1026 C        	CALL	VGACHAR
   451 0255E 10AB C        	CALL	VGADRAWCHAR
   452            C      M 	PAGE	#($)
       0255F 1E89     1     PAGE ( $ / 1024 ),
   453            C        
   454 02560 1415 C        	JMP	MENU_FUNC_END
   455            C        
   456            C        ;-------------------------------------------------------------------------------
   457 02561      C        MENU_FUNC_2:			;TimeDate
   458 02561 1890 C        	MOV	A,@CMSG_INIT
   459 02562 0120 C        	SUB	A,B1_MSG
   460            C      M 	JPZ	MENU_FUNC_2_INIT
       02563 0C83     1     JBC  _STATUS , Z 
       02564 1587     1     JMP  MENU_FUNC_2_INIT ,
   461            C        
   462 02565 1880 C        	MOV 	A,@CMSG_MKEY
   463 02566 0120 C        	SUB 	A,B1_MSG
   464            C      M 	JPZ 	MENU_FUNC_2_MKEY
       02567 0C83     1     JBC  _STATUS , Z 
       02568 15C8     1     JMP  MENU_FUNC_2_MKEY ,
   465            C        	
   466 02569 1898 C        	MOV 	A,@CMSG_TMR
   467 0256A 0120 C        	SUB 	A,B1_MSG
   468            C      M 	JPZ 	MENU_FUNC_2_TMR
       0256B 0C83     1     JBC  _STATUS , Z 
       0256C 156E     1     JMP  MENU_FUNC_2_TMR ,
   469            C        	
   470 0256D 1415 C        	JMP	MENU_FUNC_END
   471            C        ;-----------------------------------------------------------
   472 0256E      C        MENU_FUNC_2_TMR:	;blink
   473 0256E 0562 C        	INC	B1_PRO_VAR1
   474            C        	
   475 0256F 0422 C        	MOV	A,B1_PRO_VAR1
   476 02570 1D14 C        	SUB	A,@20
   477            C      M 	JPNC	MENU_FUNC_1_MKEY_EXITMNU	;Time out,exit
       02571 0E03     1     JBS  _STATUS , C 
       02572 14B6     1     JMP  MENU_FUNC_1_MKEY_EXITMNU ,
   478            C        
   479            C      M 	REFURBISH_1AND2L
                      2  M  BLOCK  0 
       02573 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02574 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02575 1880     2     MOV A,@( LCD_CTRL )
       02576 004C     2     MOV  _RC ,A
       02577 0B4D     1     BS  _RD , 5 
       02578 0B8D     1     BS  _RD , 6 
   480            C        	
   481 02579 0721 C        	SWAPA	B1_PRO_VAR
   482 0257A 1A0F C        	AND	A,@0X0F
   483 0257B 1036 C        	CALL	DATEDISPOFFSET_TAB
   484 0257C 1F83 C        	ADD	A,@(LCD_CTRL+OFFSETDATE)
   485 0257D 004C C        	MOV	_RC,A				;Off first
   486            C      M 	MOV	_RD,@NUM_BLANK
       0257E 1800     1     MOV A,@( NUM_BLANK )
       0257F 004D     1     MOV  _RD ,A
   487 02580 054C C        	INC	_RC
   488            C      M 	MOV	_RD,@NUM_BLANK
       02581 1800     1     MOV A,@( NUM_BLANK )
       02582 004D     1     MOV  _RD ,A
   489            C        	
   490 02583 01CC C        	DEC	_RC				;退回
   491            C        	
   492            C      M 	JPB	B1_PRO_VAR1,0,MENU_FUNC_2_TMR_ON
       02584 0C22     1     JBC  B1_PRO_VAR1 , 0 
       02585 1681     1     JMP  MENU_FUNC_2_TMR_ON ,
   493            C        
   494 02586 1415 C        	JMP	MENU_FUNC_END
   495            C        ;---------------------------------------
   496 02587      C        MENU_FUNC_2_INIT:
   497 02587 00E2 C        	CLR	B1_PRO_VAR1
   498            C        
   499            C      M 	MOV	B1_PRO_VAR,@0X12	;year/menu
       02588 1812     1     MOV A,@( 18 )
       02589 0061     1     MOV  B1_PRO_VAR ,A
   500            C        
   501            C      M 	PAGE	#(VGA)
       0258A 1E8C     1     PAGE ( VGA / 1024 ),
   502 0258B 1127 C        	CALL	VGABLANKCHAR
   503            C        ;-the third line
   504 0258C 1883 C        	MOV	A,@(STYLE_CENTER)
   505 0258D 1026 C        	CALL	VGACHAR
   506 0258E 181E C        	MOV	A,@30		;YEAR
   507 0258F 114D C        	CALL	VGASTRING
   508 02590 180F C        	MOV	A,@(CH_SCH1)	;/
   509 02591 1026 C        	CALL	VGACHAR
   510 02592 1818 C        	MOV	A,@24		;DATE
   511 02593 114D C        	CALL	VGASTRING
   512 02594 180F C        	MOV	A,@(CH_SCH1)	;/
   513 02595 1026 C        	CALL	VGACHAR
   514 02596 1814 C        	MOV	A,@20		;TIME
   515 02597 114D C        	CALL	VGASTRING
   516            C        
   517 02598 18FF C        	MOV	A,@(CH_END)
   518 02599 1026 C        	CALL	VGACHAR
   519 0259A 10AB C        	CALL	VGADRAWCHAR
   520            C        	;PAGE	#($)
   521            C        ;-
   522            C        ;-Get min/hour/day/month/year
   523            C      M 	BANK	0
       0259B 0984     1     BC  _RSR , 6 
       0259C 09C4     1     BC  _RSR , 7 
   524            C      M 	MOV	TEMP0,B0_MIN_REG
       0259D 0433     1     MOV A, B0_MIN_REG 
       0259E 0055     1     MOV  TEMP0 ,A
   525            C      M 	MOV	TEMP1,B0_HOUR_REG
       0259F 0434     1     MOV A, B0_HOUR_REG 
       025A0 0056     1     MOV  TEMP1 ,A
   526            C      M 	MOV	TEMP2,B0_DAY_REG
       025A1 0435     1     MOV A, B0_DAY_REG 
       025A2 0057     1     MOV  TEMP2 ,A
   527            C      M 	MOV	TEMP3,B0_MON_REG
       025A3 0436     1     MOV A, B0_MON_REG 
       025A4 0058     1     MOV  TEMP3 ,A
   528            C      M 	MOV	TEMP4,B0_YEAR_REG
       025A5 0437     1     MOV A, B0_YEAR_REG 
       025A6 0059     1     MOV  TEMP4 ,A
   529            C      M 	BANK	1	
       025A7 0B84     1     BS  _RSR , 6 
       025A8 09C4     1     BC  _RSR , 7 
   530            C      M 	MOV	B1_MIN_REG,TEMP0
       025A9 0415     1     MOV A, TEMP0 
       025AA 0074     1     MOV  B1_MIN_REG ,A
   531            C      M 	MOV	B1_HOUR_REG,TEMP1
       025AB 0416     1     MOV A, TEMP1 
       025AC 0075     1     MOV  B1_HOUR_REG ,A
   532            C      M 	MOV	B1_DAY_REG,TEMP2
       025AD 0417     1     MOV A, TEMP2 
       025AE 0076     1     MOV  B1_DAY_REG ,A
   533            C      M 	MOV	B1_MON_REG,TEMP3
       025AF 0418     1     MOV A, TEMP3 
       025B0 0077     1     MOV  B1_MON_REG ,A
   534            C      M 	MOV	B1_YEAR_REG,TEMP4
       025B1 0419     1     MOV A, TEMP4 
       025B2 0078     1     MOV  B1_YEAR_REG ,A
   535            C        ;-the icon
   536            C        	;PAGE	#(VGA)
   537            C        	
   538 025B3 1824 C        	MOV	A,@(1<<2|1<<5)
   539 025B4 1000 C        	CALL	VGASTAMP1
   540 025B5 1097 C        	CALL	VGADRAWSTAMP
   541            C        ;-the first line
   542 025B6 12D6 C        	CALL	DISP_DATETIME
   543            C      M 	REFURBISH_1STL
                      2  M  BLOCK  0 
       025B7 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       025B8 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       025B9 1880     2     MOV A,@( LCD_CTRL )
       025BA 004C     2     MOV  _RC ,A
       025BB 0B4D     1     BS  _RD , 5 
   544            C        /*
   545            C        	MOV	A,@(STYLE_LEFT+STYLE_TOBCD)	;!!!
   546            C        	CALL	VGANUM1
   547            C        	
   548            C        	MOV	A,B1_HOUR_REG
   549            C        	CALL	VGANUM1
   550            C        	MOV	A,B1_MIN_REG
   551            C        	CALL	VGANUM1
   552            C        	MOV	A,B1_DAY_REG
   553            C        	CALL	VGANUM1
   554            C        	MOV	A,B1_MON_REG
   555            C        	CALL	VGANUM1
   556            C        
   557            C        	MOV	A,@(CH_END)
   558            C        	CALL	VGANUM1
   559            C        	CALL	VGADRAWNUM1
   560            C        	;PAGE	#($)
   561            C        */
   562            C        ;-the second line
   563            C        	;PAGE	#(VGA)
   564 025BC 18A3 C        	MOV	A,@(STYLE_CENTER+STYLE_TOBCD)	;!!!
   565 025BD 101F C        	CALL	VGANUM2
   566            C        	
   567 025BE 1814 C        	MOV	A,@20
   568 025BF 101F C        	CALL	VGANUM2
   569 025C0 0438 C        	MOV	A,B1_YEAR_REG
   570 025C1 0071 C        	MOV	B1_MSG_N,A
   571 025C2 101F C        	CALL	VGANUM2
   572            C        
   573 025C3 18FF C        	MOV	A,@(CH_END)
   574 025C4 101F C        	CALL	VGANUM2
   575 025C5 10A4 C        	CALL	VGADRAWNUM2
   576            C      M 	PAGE	#($)
       025C6 1E89     1     PAGE ( $ / 1024 ),
   577            C        ;-
   578 025C7 1415 C        	JMP	MENU_FUNC_END
   579            C        ;---------------------------------------
   580 025C8      C        MENU_FUNC_2_MKEY:
   581 025C8 00E2 C        	CLR	B1_PRO_VAR1
   582            C        	
   583 025C9 1820 C        	MOV	A,@CKEY_MNU
   584            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       025CA 1E81     2     PAGE ( KEY_CHK / 1024 ),
       025CB 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       025CC 1E89     2     PAGE ( $ / 1024 ),
   585            C      M 	JPNC	MENU_FUNC_2_MKEY_MNU
       025CD 0E03     1     JBS  _STATUS , C 
       025CE 15E2     1     JMP  MENU_FUNC_2_MKEY_MNU ,
   586            C        	
   587 025CF 1821 C        	MOV	A,@CKEY_UP
   588            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       025D0 1E81     2     PAGE ( KEY_CHK / 1024 ),
       025D1 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       025D2 1E89     2     PAGE ( $ / 1024 ),
   589            C      M 	JPNC	MENU_FUNC_2_MKEY_UP
       025D3 0E03     1     JBS  _STATUS , C 
       025D4 1665     1     JMP  MENU_FUNC_2_MKEY_UP ,
   590 025D5 1822 C        	MOV	A,@CKEY_DWN
   591            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       025D6 1E81     2     PAGE ( KEY_CHK / 1024 ),
       025D7 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       025D8 1E89     2     PAGE ( $ / 1024 ),
   592            C      M 	JPNC	MENU_FUNC_2_MKEY_DWN
       025D9 0E03     1     JBS  _STATUS , C 
       025DA 16AB     1     JMP  MENU_FUNC_2_MKEY_DWN ,
   593            C        
   594 025DB 1813 C        	MOV	A,@CKEY_STP
   595            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       025DC 1E81     2     PAGE ( KEY_CHK / 1024 ),
       025DD 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       025DE 1E89     2     PAGE ( $ / 1024 ),
   596            C      M 	JPNC	MENU_FUNC_2_MKEY_STP
       025DF 0E03     1     JBS  _STATUS , C 
       025E0 14B6     1     JMP  MENU_FUNC_2_MKEY_STP ,
   597            C        		
   598 025E1 1415 C        	JMP	MENU_FUNC_END
   599            C        ;---------------------------------------
   600 025E2      C        MENU_FUNC_2_MKEY_MNU:
   601            C        ;---Save the data	
   602 025E2 0721 C        	SWAPA	B1_PRO_VAR
   603 025E3 1A0F C        	AND	A,@0X0F
   604 025E4 103F C        	CALL	DATEADDR_TAB
   605 025E5 1F40 C        	ADD	A,@BANK1
   606 025E6 0044 C        	MOV	_RSR,A
   607            C      M 	MOV	_R0,B1_MSG_N		;Save the value
       025E7 0431     1     MOV A, B1_MSG_N 
       025E8 0040     1     MOV  _R0 ,A
   608            C        ;---
   609            C      M 	REFURBISH_1AND2L
                      2  M  BLOCK  0 
       025E9 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       025EA 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       025EB 1880     2     MOV A,@( LCD_CTRL )
       025EC 004C     2     MOV  _RC ,A
       025ED 0B4D     1     BS  _RD , 5 
       025EE 0B8D     1     BS  _RD , 6 
   610            C        ;-Get address	
   611 025EF 0721 C        	SWAPA	B1_PRO_VAR
   612 025F0 1A0F C        	AND	A,@0X0F
   613 025F1 1036 C        	CALL	DATEDISPOFFSET_TAB
   614 025F2 0055 C        	MOV	TEMP0,A
   615            C        
   616 025F3 1883 C        	MOV	A,@(LCD_CTRL+OFFSETDATE)
   617 025F4 0395 C        	ADD	A,TEMP0
   618 025F5 004C C        	MOV	_RC,A
   619            C        ;-Display confirm
   620 025F6 0431 C        	MOV	A,B1_MSG_N
   621            C      M 	LCALL	HEX_DGT
                      2  M  PAGE #( HEX_DGT ),
       025F7 1E82     2     PAGE ( HEX_DGT / 1024 ),
       025F8 100F     1     CALL ( HEX_DGT % 1024 ),
                      2  M  PAGE #( $ ),
       025F9 1E89     2     PAGE ( $ / 1024 ),
   622 025FA 0055 C        	MOV	TEMP0,A
   623            C        	
   624 025FB 0715 C        	SWAPA	TEMP0
   625 025FC 1A0F C        	AND	A,@0X0F
   626 025FD 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   627 025FE 004D C        	MOV	_RD,A
   628            C        	
   629 025FF 054C C        	INC	_RC
   630 02600 0415 C        	MOV	A,TEMP0
   631 02601 1A0F C        	AND	A,@0X0F
   632 02602 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   633 02603 004D C        	MOV	_RD,A
   634            C        	
   635 02604 0431 C        	MOV	A,B1_MSG_N
   636 02605 1D09 C        	SUB	A,@9
   637            C      M 	JPNC	MENU_FUNC_2_MKEY_MNU_CHKVALOVER	
       02606 0E03     1     JBS  _STATUS , C 
       02607 161F     1     JMP  MENU_FUNC_2_MKEY_MNU_CHKVALOVER ,
   638            C        ;---Now the current value <=9,then check if month/hour or not
   639 02608 0721 C        	SWAPA	B1_PRO_VAR
   640 02609 1A0F C        	AND	A,@0X0F
   641 0260A 0055 C        	MOV	TEMP0,A
   642 0260B 1D02 C        	SUB	A,@2	;2
   643            C      M 	JPZ	MENU_FUNC_2_MKEY_MNU_MONTH
       0260C 0C83     1     JBC  _STATUS , Z 
       0260D 1617     1     JMP  MENU_FUNC_2_MKEY_MNU_MONTH ,
   644            C        	
   645 0260E 0415 C        	MOV	A,TEMP0
   646 0260F 1D04 C        	SUB	A,@4	;4
   647            C      M 	JPZ	MENU_FUNC_2_MKEY_MNU_HOUR
       02610 0C83     1     JBC  _STATUS , Z 
       02611 1613     1     JMP  MENU_FUNC_2_MKEY_MNU_HOUR ,
   648            C        	
   649 02612 161F C        	JMP	MENU_FUNC_2_MKEY_MNU_CHKVALOVER
   650            C        ;-------
   651 02613      C        MENU_FUNC_2_MKEY_MNU_HOUR:	;Clean the 0
   652 02613 1883 C        	MOV	A,@(LCD_CTRL+OFFSETDATE)
   653 02614 004C C        	MOV	_RC,A
   654 02615 00CD C        	CLR	_RD
   655 02616 161F C        	JMP	MENU_FUNC_2_MKEY_MNU_CHKVALOVER
   656            C        ;-------
   657 02617      C        MENU_FUNC_2_MKEY_MNU_MONTH:
   658 02617 188A C        	MOV	A,@(LCD_CTRL+OFFSETDATE+7)
   659 02618 004C C        	MOV	_RC,A
   660 02619 040D C        	MOV	A,_RD
   661 0261A 0055 C        	MOV	TEMP0,A
   662 0261B 00CD C        	CLR	_RD
   663            C        	
   664 0261C 01CC C        	DEC	_RC
   665 0261D 0415 C        	MOV	A,TEMP0
   666 0261E 004D C        	MOV	_RD,A
   667            C        	
   668            C        	;JMP	MENU_FUNC_END
   669            C        	
   670 0261F      C        MENU_FUNC_2_MKEY_MNU_CHKVALOVER:
   671            C        ;---
   672 0261F 0721 C        	SWAPA	B1_PRO_VAR		;时间完了吗?
   673 02620 1A07 C        	AND	A,@0X07
   674 02621 1D05 C        	SUB	A,@5
   675            C      M 	JPZ	MENU_FUNC_2_MKEY_MNU_1
       02622 0C83     1     JBC  _STATUS , Z 
       02623 162F     1     JMP  MENU_FUNC_2_MKEY_MNU_1 ,
   676            C        ;---the next adjust date/time data
   677 02624 0421 C        	MOV	A,B1_PRO_VAR
   678 02625 1F10 C        	ADD	A,@0X10
   679 02626 0061 C        	MOV	B1_PRO_VAR,A
   680            C        ;-Get data
   681 02627 0721 C        	SWAPA	B1_PRO_VAR
   682 02628 1A07 C        	AND	A,@0X07
   683 02629 103F C        	CALL	DATEADDR_TAB
   684 0262A 1F40 C        	ADD	A,@BANK1
   685 0262B 0044 C        	MOV	_RSR,A
   686            C      M 	MOV	B1_MSG_N,_R0
       0262C 0400     1     MOV A, _R0 
       0262D 0071     1     MOV  B1_MSG_N ,A
   687            C        		
   688 0262E 1415 C        	JMP	MENU_FUNC_END
   689            C        ;-----------------------------
   690 0262F      C        MENU_FUNC_2_MKEY_MNU_1:		;Date/Time adjust over
   691            C      M 	LCALL	INIT_DAM_FUNC
                      2  M  PAGE #( INIT_DAM_FUNC ),
       0262F 1E83     2     PAGE ( INIT_DAM_FUNC / 1024 ),
       02630 11C1     1     CALL ( INIT_DAM_FUNC % 1024 ),
                      2  M  PAGE #( $ ),
       02631 1E89     2     PAGE ( $ / 1024 ),
   692            C        ;---Set Date/Time	
   693            C      M 	LCALL	CALC_WEEK
                      2  M  PAGE #( CALC_WEEK ),
       02632 1E8D     2     PAGE ( CALC_WEEK / 1024 ),
       02633 137D     1     CALL ( CALC_WEEK % 1024 ),
                      2  M  PAGE #( $ ),
       02634 1E89     2     PAGE ( $ / 1024 ),
   694            C      M 	JPNC	MENU_FUNC_2_MKEY_MNU_FAIL
       02635 0E03     1     JBS  _STATUS , C 
       02636 1660     1     JMP  MENU_FUNC_2_MKEY_MNU_FAIL ,
   695 02637 0079 C        	MOV	B1_WEEK_REG,A
   696            C        	
   697            C        ;---Set MCU Date/Time
   698 02638 00F3 C        	CLR	B1_SEC_REG
   699            C      M 	MOV	TEMP0,B1_MIN_REG
       02639 0434     1     MOV A, B1_MIN_REG 
       0263A 0055     1     MOV  TEMP0 ,A
   700            C      M 	MOV	TEMP1,B1_HOUR_REG
       0263B 0435     1     MOV A, B1_HOUR_REG 
       0263C 0056     1     MOV  TEMP1 ,A
   701            C      M 	MOV	TEMP2,B1_DAY_REG
       0263D 0436     1     MOV A, B1_DAY_REG 
       0263E 0057     1     MOV  TEMP2 ,A
   702            C      M 	MOV	TEMP3,B1_MON_REG
       0263F 0437     1     MOV A, B1_MON_REG 
       02640 0058     1     MOV  TEMP3 ,A
   703            C      M 	MOV	TEMP4,B1_YEAR_REG
       02641 0438     1     MOV A, B1_YEAR_REG 
       02642 0059     1     MOV  TEMP4 ,A
   704            C      M 	MOV	TEMP5,B1_WEEK_REG
       02643 0439     1     MOV A, B1_WEEK_REG 
       02644 005A     1     MOV  TEMP5 ,A
   705            C        
   706            C      M 	BANK	0
       02645 0984     1     BC  _RSR , 6 
       02646 09C4     1     BC  _RSR , 7 
   707 02647 00E9 C        	CLR	B0_TMR
   708 02648 00F2 C        	CLR	B0_SEC_REG
   709            C      M 	MOV	B0_MIN_REG,TEMP0
       02649 0415     1     MOV A, TEMP0 
       0264A 0073     1     MOV  B0_MIN_REG ,A
   710            C      M 	MOV	B0_HOUR_REG,TEMP1
       0264B 0416     1     MOV A, TEMP1 
       0264C 0074     1     MOV  B0_HOUR_REG ,A
   711            C      M 	MOV	B0_DAY_REG,TEMP2
       0264D 0417     1     MOV A, TEMP2 
       0264E 0075     1     MOV  B0_DAY_REG ,A
   712            C      M 	MOV	B0_MON_REG,TEMP3
       0264F 0418     1     MOV A, TEMP3 
       02650 0076     1     MOV  B0_MON_REG ,A
   713            C      M 	MOV	B0_YEAR_REG,TEMP4
       02651 0419     1     MOV A, TEMP4 
       02652 0077     1     MOV  B0_YEAR_REG ,A
   714            C      M 	MOV	B0_WEEK_REG,TEMP5
       02653 041A     1     MOV A, TEMP5 
       02654 0078     1     MOV  B0_WEEK_REG ,A
   715            C        	
   716            C      M 	PAGE	#(SET_DSPRTC)
       02655 1E8A     1     PAGE ( SET_DSPRTC / 1024 ),
   717 02656 12A1 C        	CALL	SET_DSPRTC
   718            C      M 	PAGE	#($)
       02657 1E89     1     PAGE ( $ / 1024 ),
   719            C        
   720            C      M 	BANK	1	
       02658 0B84     1     BS  _RSR , 6 
       02659 09C4     1     BC  _RSR , 7 
   721            C        ;---
   722 0265A 0421 C        	MOV	A,B1_PRO_VAR
   723 0265B 1A0F C        	AND	A,@0X0F
   724 0265C 0071 C        	MOV	B1_MSG_N,A
   725            C        
   726            C      M 	MOV	B1_PRO_VAR,@1
       0265D 1801     1     MOV A,@( 1 )
       0265E 0061     1     MOV  B1_PRO_VAR ,A
   727            C        
   728 0265F 14D8 C        	JMP	MENU_FUNC_1_MKEY_SELMENU
   729            C        	
   730 02660      C        MENU_FUNC_2_MKEY_MNU_FAIL:
   731 02660 1890 C        	MOV	A,@CMSG_INIT
   732            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       02661 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       02662 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       02663 1E89     2     PAGE ( $ / 1024 ),
   733 02664 1415 C        	JMP	MENU_FUNC_END
   734            C        ;---------------------------------------
   735 02665      C        MENU_FUNC_2_MKEY_UP:
   736 02665 0721 C        	SWAPA	B1_PRO_VAR
   737 02666 1A0F C        	AND	A,@0X0F
   738 02667 1024 C        	CALL	DATEMAX_TAB
   739 02668 0057 C        	MOV	TEMP2,A
   740            C        	
   741 02669 0721 C        	SWAPA	B1_PRO_VAR
   742 0266A 1A0F C        	AND	A,@0X0F
   743 0266B 102D C        	CALL	DATEMIN_TAB
   744 0266C 0056 C        	MOV	TEMP1,A
   745            C        	
   746 0266D 0431 C        	MOV	A,B1_MSG_N
   747            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       0266E 1E82     2     PAGE ( VALUE_INC / 1024 ),
       0266F 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       02670 1E89     2     PAGE ( $ / 1024 ),
   748 02671 0071 C        	MOV	B1_MSG_N,A
   749            C        ;---
   750 02672      C        MENU_FUNC_2_MKEY_ADJUST:
   751            C        
   752 02672 1808 C        	MOV	A,@CTMR500MS
   753            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       02673 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       02674 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       02675 1E89     2     PAGE ( $ / 1024 ),
   754            C        
   755            C      M 	REFURBISH_1AND2L
                      2  M  BLOCK  0 
       02676 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02677 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02678 1880     2     MOV A,@( LCD_CTRL )
       02679 004C     2     MOV  _RC ,A
       0267A 0B4D     1     BS  _RD , 5 
       0267B 0B8D     1     BS  _RD , 6 
   756            C        	
   757 0267C 0721 C        	SWAPA	B1_PRO_VAR
   758 0267D 1A0F C        	AND	A,@0X0F
   759 0267E 1036 C        	CALL	DATEDISPOFFSET_TAB
   760 0267F 1F83 C        	ADD	A,@(LCD_CTRL+OFFSETDATE)
   761 02680 004C C        	MOV	_RC,A
   762 02681      C        MENU_FUNC_2_TMR_ON:
   763 02681 0431 C        	MOV	A,B1_MSG_N
   764            C      M 	LCALL	HEX_DGT
                      2  M  PAGE #( HEX_DGT ),
       02682 1E82     2     PAGE ( HEX_DGT / 1024 ),
       02683 100F     1     CALL ( HEX_DGT % 1024 ),
                      2  M  PAGE #( $ ),
       02684 1E89     2     PAGE ( $ / 1024 ),
   765 02685 0055 C        	MOV	TEMP0,A
   766            C        	
   767 02686 0715 C        	SWAPA	TEMP0
   768 02687 1A0F C        	AND	A,@0X0F
   769 02688 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   770 02689 004D C        	MOV	_RD,A
   771            C        	
   772 0268A 054C C        	INC	_RC
   773 0268B 0415 C        	MOV	A,TEMP0
   774 0268C 1A0F C        	AND	A,@0X0F
   775 0268D 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   776 0268E 004D C        	MOV	_RD,A
   777            C        
   778 0268F 0431 C        	MOV	A,B1_MSG_N
   779 02690 1D09 C        	SUB	A,@9
   780            C      M 	JPNC	MENU_FUNC_END
       02691 0E03     1     JBS  _STATUS , C 
       02692 1415     1     JMP  MENU_FUNC_END ,
   781            C        ;---Now the current value <=9,then check if month/hour or not
   782 02693 0721 C        	SWAPA	B1_PRO_VAR
   783 02694 1A0F C        	AND	A,@0X0F
   784 02695 0055 C        	MOV	TEMP0,A
   785 02696 1D02 C        	SUB	A,@2	;2
   786            C      M 	JPZ	MENU_FUNC_2_MKEY_ADJUST_MONTH
       02697 0C83     1     JBC  _STATUS , Z 
       02698 16A2     1     JMP  MENU_FUNC_2_MKEY_ADJUST_MONTH ,
   787            C        	
   788 02699 0415 C        	MOV	A,TEMP0
   789 0269A 1D04 C        	SUB	A,@4	;4
   790            C      M 	JPZ	MENU_FUNC_2_MKEY_ADJUST_HOUR
       0269B 0C83     1     JBC  _STATUS , Z 
       0269C 169E     1     JMP  MENU_FUNC_2_MKEY_ADJUST_HOUR ,
   791            C        	
   792 0269D 1415 C        	JMP	MENU_FUNC_END
   793            C        ;-----------------------------
   794 0269E      C        MENU_FUNC_2_MKEY_ADJUST_HOUR:	;Clean the 0
   795 0269E 1883 C        	MOV	A,@(LCD_CTRL+OFFSETDATE)
   796 0269F 004C C        	MOV	_RC,A
   797 026A0 00CD C        	CLR	_RD
   798 026A1 1415 C        	JMP	MENU_FUNC_END
   799            C        ;-----------------------------
   800 026A2      C        MENU_FUNC_2_MKEY_ADJUST_MONTH:
   801 026A2 188A C        	MOV	A,@(LCD_CTRL+OFFSETDATE+7)
   802 026A3 004C C        	MOV	_RC,A
   803 026A4 040D C        	MOV	A,_RD
   804 026A5 0055 C        	MOV	TEMP0,A
   805 026A6 00CD C        	CLR	_RD
   806            C        	
   807 026A7 01CC C        	DEC	_RC
   808 026A8 0415 C        	MOV	A,TEMP0
   809 026A9 004D C        	MOV	_RD,A
   810            C        	
   811 026AA 1415 C        	JMP	MENU_FUNC_END
   812            C        ;---------------------------------------
   813 026AB      C        MENU_FUNC_2_MKEY_DWN:
   814            C        	
   815 026AB 0721 C        	SWAPA	B1_PRO_VAR
   816 026AC 1A0F C        	AND	A,@0X0F
   817 026AD 1024 C        	CALL	DATEMAX_TAB
   818 026AE 0057 C        	MOV	TEMP2,A
   819            C        	
   820 026AF 0721 C        	SWAPA	B1_PRO_VAR
   821 026B0 1A0F C        	AND	A,@0X0F
   822 026B1 102D C        	CALL	DATEMIN_TAB
   823 026B2 0056 C        	MOV	TEMP1,A
   824            C        	
   825 026B3 0431 C        	MOV	A,B1_MSG_N
   826            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       026B4 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       026B5 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       026B6 1E89     2     PAGE ( $ / 1024 ),
   827 026B7 0071 C        	MOV	B1_MSG_N,A
   828            C        	
   829 026B8 1672 C        	JMP	MENU_FUNC_2_MKEY_ADJUST	
   830            C        ;-------------------------------------------------------------------------------
   831 026B9      C        MENU_FUNC_3:		;flash
   832            C        	
   833 026B9 1890 C        	MOV	A,@CMSG_INIT
   834 026BA 0120 C        	SUB	A,B1_MSG
   835            C      M 	JPZ	MENU_FUNC_3_INIT
       026BB 0C83     1     JBC  _STATUS , Z 
       026BC 16C6     1     JMP  MENU_FUNC_3_INIT ,
   836            C        
   837 026BD 1880 C        	MOV 	A,@CMSG_MKEY
   838 026BE 0120 C        	SUB 	A,B1_MSG
   839            C      M 	JPZ 	MENU_FUNC_3_MKEY
       026BF 0C83     1     JBC  _STATUS , Z 
       026C0 16FC     1     JMP  MENU_FUNC_3_MKEY ,
   840            C        	
   841 026C1 1898 C        	MOV 	A,@CMSG_TMR
   842 026C2 0120 C        	SUB 	A,B1_MSG
   843            C      M 	JPZ 	MENU_FUNC_3_TMR
       026C3 0C83     1     JBC  _STATUS , Z 
       026C4 14BF     1     JMP  MENU_FUNC_3_TMR ,
   844            C        	
   845 026C5 1415 C        	JMP	MENU_FUNC_END
   846            C        ;---------------------------------------
   847 026C6      C        MENU_FUNC_3_INIT:
   848 026C6 00E2 C        	CLR	B1_PRO_VAR1
   849            C        
   850 026C7 0425 C        	MOV	A,B1_FLASH
   851 026C8 0071 C        	MOV	B1_MSG_N,A
   852 026C9      C        MENU_FUNC_3_FLASH:
   853            C      M 	PAGE	#(VGA)
       026C9 1E8C     1     PAGE ( VGA / 1024 ),
   854 026CA 1127 C        	CALL	VGABLANKCHAR
   855            C        ;-the third line
   856 026CB 1883 C        	MOV	A,@(STYLE_CENTER)
   857 026CC 1026 C        	CALL	VGACHAR
   858 026CD 1806 C        	MOV	A,@6		;FLASH
   859 026CE 114D C        	CALL	VGASTRING
   860 026CF 1800 C        	MOV	A,@(CH_BLANK)
   861 026D0 1026 C        	CALL	VGACHAR	
   862            C      M 	PAGE	#($)
       026D1 1E89     1     PAGE ( $ / 1024 ),
   863            C        	
   864 026D2 0431 C        	MOV	A,B1_MSG_N
   865 026D3 1A03 C        	AND	A,@0X03
   866            C      M 	MTBL
       026D4 0020     1     TBL 
             26D4     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   867 026D5 16D9 C        	JMP	MENU_FUNC_3_100MS
   868 026D6 16DE C        	JMP	MENU_FUNC_3_300MS
   869 026D7 16E3 C        	JMP	MENU_FUNC_3_600MS
   870 026D8 16E8 C        	JMP	MENU_FUNC_3_1000MS	
   871            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   872 026D9      C        MENU_FUNC_3_100MS:
   873            C      M 	PAGE	#(VGA)
       026D9 1E8C     1     PAGE ( VGA / 1024 ),
   874 026DA 1811 C        	MOV	A,@(CH_1)
   875 026DB 1026 C        	CALL	VGACHAR	
   876            C      M 	PAGE	#($)
       026DC 1E89     1     PAGE ( $ / 1024 ),
   877 026DD 16EE C        	JMP	MENU_FUNC_3_INIT_1
   878 026DE      C        MENU_FUNC_3_300MS:
   879            C      M 	PAGE	#(VGA)
       026DE 1E8C     1     PAGE ( VGA / 1024 ),
   880 026DF 1813 C        	MOV	A,@(CH_3)
   881 026E0 1026 C        	CALL	VGACHAR	
   882            C      M 	PAGE	#($)
       026E1 1E89     1     PAGE ( $ / 1024 ),
   883 026E2 16EE C        	JMP	MENU_FUNC_3_INIT_1
   884            C        	
   885 026E3      C        MENU_FUNC_3_600MS:
   886            C      M 	PAGE	#(VGA)
       026E3 1E8C     1     PAGE ( VGA / 1024 ),
   887 026E4 1816 C        	MOV	A,@(CH_6)
   888 026E5 1026 C        	CALL	VGACHAR	
   889            C      M 	PAGE	#($)
       026E6 1E89     1     PAGE ( $ / 1024 ),
   890 026E7 16EE C        	JMP	MENU_FUNC_3_INIT_1
   891 026E8      C        MENU_FUNC_3_1000MS:
   892            C      M 	PAGE	#(VGA)
       026E8 1E8C     1     PAGE ( VGA / 1024 ),
   893 026E9 1811 C        	MOV	A,@(CH_1)
   894 026EA 1026 C        	CALL	VGACHAR	
   895 026EB 1810 C        	MOV	A,@(CH_0)
   896 026EC 1026 C        	CALL	VGACHAR	
   897            C      M 	PAGE	#($)
       026ED 1E89     1     PAGE ( $ / 1024 ),
   898            C        	;JMP	MENU_FUNC_3_INIT_1		
   899 026EE      C        MENU_FUNC_3_INIT_1:
   900            C      M 	PAGE	#(VGA)
       026EE 1E8C     1     PAGE ( VGA / 1024 ),
   901 026EF 1810 C        	MOV	A,@(CH_0)
   902 026F0 1026 C        	CALL	VGACHAR	
   903 026F1 1810 C        	MOV	A,@(CH_0)
   904 026F2 1026 C        	CALL	VGACHAR
   905 026F3 182D C        	MOV	A,@(CH_M)
   906 026F4 1026 C        	CALL	VGACHAR
   907 026F5 1833 C        	MOV	A,@(CH_S)
   908 026F6 1026 C        	CALL	VGACHAR
   909 026F7 18FF C        	MOV	A,@(CH_END)
   910 026F8 1026 C        	CALL	VGACHAR
   911 026F9 10AB C        	CALL	VGADRAWCHAR
   912            C      M 	PAGE	#($)
       026FA 1E89     1     PAGE ( $ / 1024 ),
   913            C        	
   914 026FB 1415 C        	JMP	MENU_FUNC_END
   915            C        ;---------------------------------------
   916 026FC      C        MENU_FUNC_3_MKEY:
   917            C        		
   918 026FC 1820 C        	MOV	A,@CKEY_MNU
   919            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       026FD 1E81     2     PAGE ( KEY_CHK / 1024 ),
       026FE 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       026FF 1E89     2     PAGE ( $ / 1024 ),
   920            C      M 	JPNC	MENU_FUNC_3_MKEY_MNU
       02700 0E03     1     JBS  _STATUS , C 
       02701 1715     1     JMP  MENU_FUNC_3_MKEY_MNU ,
   921            C        	
   922 02702 1821 C        	MOV	A,@CKEY_UP
   923            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02703 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02704 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02705 1E89     2     PAGE ( $ / 1024 ),
   924            C      M 	JPNC	MENU_FUNC_3_MKEY_UP
       02706 0E03     1     JBS  _STATUS , C 
       02707 171C     1     JMP  MENU_FUNC_3_MKEY_UP ,
   925 02708 1822 C        	MOV	A,@CKEY_DWN
   926            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02709 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0270A 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0270B 1E89     2     PAGE ( $ / 1024 ),
   927            C      M 	JPNC	MENU_FUNC_3_MKEY_DWN
       0270C 0E03     1     JBS  _STATUS , C 
       0270D 1725     1     JMP  MENU_FUNC_3_MKEY_DWN ,
   928            C        
   929 0270E 1813 C        	MOV	A,@CKEY_STP
   930            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0270F 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02710 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02711 1E89     2     PAGE ( $ / 1024 ),
   931            C      M 	JPNC	MENU_FUNC_3_MKEY_STP
       02712 0E03     1     JBS  _STATUS , C 
       02713 14B6     1     JMP  MENU_FUNC_3_MKEY_STP ,
   932            C        		
   933 02714 1415 C        	JMP	MENU_FUNC_END
   934            C        ;---------------------------------------
   935 02715      C        MENU_FUNC_3_MKEY_MNU:
   936            C        	
   937 02715 0431 C        	MOV	A,B1_MSG_N
   938 02716 0065 C        	MOV	B1_FLASH,A		;Save the value
   939            C        	
   940 02717 0421 C        	MOV	A,B1_PRO_VAR
   941 02718 0071 C        	MOV	B1_MSG_N,A
   942            C        	
   943            C      M 	MOV	B1_PRO_VAR,@1
       02719 1801     1     MOV A,@( 1 )
       0271A 0061     1     MOV  B1_PRO_VAR ,A
   944            C        
   945 0271B 14D8 C        	JMP	MENU_FUNC_1_MKEY_SELMENU
   946            C        ;---------------------------------------
   947 0271C      C        MENU_FUNC_3_MKEY_UP:	
   948            C        		
   949 0271C 00D6 C        	CLR	TEMP1		;min
   950            C      M 	MOV	TEMP2,@3	;max
       0271D 1803     1     MOV A,@( 3 )
       0271E 0057     1     MOV  TEMP2 ,A
   951            C        	
   952 0271F 0431 C        	MOV	A,B1_MSG_N
   953            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       02720 1E82     2     PAGE ( VALUE_INC / 1024 ),
       02721 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       02722 1E89     2     PAGE ( $ / 1024 ),
   954 02723 0071 C        	MOV	B1_MSG_N,A
   955            C        	
   956 02724 16C9 C        	JMP	MENU_FUNC_3_FLASH
   957            C        ;---------------------------------------
   958 02725      C        MENU_FUNC_3_MKEY_DWN:	
   959            C        	
   960 02725 00D6 C        	CLR	TEMP1
   961            C      M 	MOV	TEMP2,@3
       02726 1803     1     MOV A,@( 3 )
       02727 0057     1     MOV  TEMP2 ,A
   962            C        	
   963 02728 0431 C        	MOV	A,B1_MSG_N
   964            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       02729 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       0272A 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       0272B 1E89     2     PAGE ( $ / 1024 ),
   965 0272C 0071 C        	MOV	B1_MSG_N,A
   966            C        		
   967 0272D 16C9 C        	JMP	MENU_FUNC_3_FLASH
   968            C        ;---------------------------------------
   969            C        ;-------------------------------------------------------------------------------
   970 0272E      C        MENU_FUNC_4:		;LCD contrast
   971            C        
   972 0272E 1890 C        	MOV	A,@CMSG_INIT
   973 0272F 0120 C        	SUB	A,B1_MSG
   974            C      M 	JPZ	MENU_FUNC_4_INIT
       02730 0C83     1     JBC  _STATUS , Z 
       02731 173B     1     JMP  MENU_FUNC_4_INIT ,
   975            C        
   976 02732 1880 C        	MOV 	A,@CMSG_MKEY
   977 02733 0120 C        	SUB 	A,B1_MSG
   978            C      M 	JPZ 	MENU_FUNC_4_MKEY
       02734 0C83     1     JBC  _STATUS , Z 
       02735 1755     1     JMP  MENU_FUNC_4_MKEY ,
   979            C        	
   980 02736 1898 C        	MOV 	A,@CMSG_TMR
   981 02737 0120 C        	SUB 	A,B1_MSG
   982            C      M 	JPZ 	MENU_FUNC_4_TMR
       02738 0C83     1     JBC  _STATUS , Z 
       02739 14BF     1     JMP  MENU_FUNC_4_TMR ,
   983            C        	
   984 0273A 1415 C        	JMP	MENU_FUNC_END
   985            C        ;---------------------------------------
   986 0273B      C        MENU_FUNC_4_INIT:
   987            C        
   988 0273B 0423 C        	MOV	A,B1_CONTRAST
   989 0273C 0071 C        	MOV	B1_MSG_N,A
   990            C        
   991            C      M 	PAGE	#(VGA)
       0273D 1E8C     1     PAGE ( VGA / 1024 ),
   992 0273E 1127 C        	CALL	VGABLANKCHAR
   993            C        ;-the third line
   994 0273F 1883 C        	MOV	A,@(STYLE_CENTER)
   995 02740 1026 C        	CALL	VGACHAR
   996 02741 1803 C        	MOV	A,@3		;CONTRAST
   997 02742 114D C        	CALL	VGASTRING
   998 02743 18FF C        	MOV	A,@(CH_END)
   999 02744 1026 C        	CALL	VGACHAR
  1000 02745 10AB C        	CALL	VGADRAWCHAR
  1001            C        	;PAGE	#($)
  1002 02746      C        MENU_FUNC_4_CONTRAST:
  1003            C      M 	PAGE	#(VGA)
       02746 1E8C     1     PAGE ( VGA / 1024 ),
  1004 02747 111E C        	CALL	VGABLANKNUM2
  1005            C        
  1006 02748 1883 C        	MOV	A,@(STYLE_CENTER)
  1007 02749 101F C        	CALL	VGANUM2
  1008            C        	
  1009 0274A 0431 C        	MOV	A,B1_MSG_N
  1010 0274B 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
  1011 0274C 101F C        	CALL	VGANUM2
  1012 0274D 18FF C        	MOV	A,@(CH_END)
  1013 0274E 101F C        	CALL	VGANUM2
  1014 0274F 10A4 C        	CALL	VGADRAWNUM2
  1015            C        
  1016 02750 0431 C        	MOV	A,B1_MSG_N
  1017            C      M 	PAGE	#(SETLCDCONTRAST)	
       02751 1E82     1     PAGE ( SETLCDCONTRAST / 1024 ),
  1018 02752 104A C        	CALL	SETLCDCONTRAST
  1019            C      M 	PAGE	#($)	
       02753 1E89     1     PAGE ( $ / 1024 ),
  1020            C        	
  1021 02754 1415 C        	JMP	MENU_FUNC_END
  1022            C        ;---------------------------------------
  1023 02755      C        MENU_FUNC_4_MKEY:
  1024            C        
  1025 02755 1820 C        	MOV	A,@CKEY_MNU
  1026            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02756 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02757 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02758 1E89     2     PAGE ( $ / 1024 ),
  1027            C      M 	JPNC	MENU_FUNC_4_MKEY_MNU
       02759 0E03     1     JBS  _STATUS , C 
       0275A 176E     1     JMP  MENU_FUNC_4_MKEY_MNU ,
  1028            C        	
  1029 0275B 1821 C        	MOV	A,@CKEY_UP
  1030            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0275C 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0275D 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0275E 1E89     2     PAGE ( $ / 1024 ),
  1031            C      M 	JPNC	MENU_FUNC_4_MKEY_UP
       0275F 0E03     1     JBS  _STATUS , C 
       02760 1779     1     JMP  MENU_FUNC_4_MKEY_UP ,
  1032 02761 1822 C        	MOV	A,@CKEY_DWN
  1033            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02762 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02763 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02764 1E89     2     PAGE ( $ / 1024 ),
  1034            C      M 	JPNC	MENU_FUNC_4_MKEY_DWN
       02765 0E03     1     JBS  _STATUS , C 
       02766 1783     1     JMP  MENU_FUNC_4_MKEY_DWN ,
  1035            C        
  1036 02767 1813 C        	MOV	A,@CKEY_STP
  1037            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02768 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02769 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0276A 1E89     2     PAGE ( $ / 1024 ),
  1038            C      M 	JPNC	MENU_FUNC_4_MKEY_TOSTP
       0276B 0E03     1     JBS  _STATUS , C 
       0276C 178D     1     JMP  MENU_FUNC_4_MKEY_TOSTP ,
  1039            C        		
  1040 0276D 1415 C        	JMP	MENU_FUNC_END
  1041            C        ;---------------------------------------
  1042 0276E      C        MENU_FUNC_4_MKEY_MNU:	
  1043            C        
  1044            C        ;-保存修改		
  1045 0276E 0431 C        	MOV	A,B1_MSG_N
  1046 0276F 0063 C        	MOV	B1_CONTRAST,A		;Save the value
  1047            C        	
  1048 02770 0421 C        	MOV	A,B1_PRO_VAR
  1049 02771 0071 C        	MOV	B1_MSG_N,A
  1050            C        	
  1051            C      M 	MOV	B1_PRO_VAR,@1
       02772 1801     1     MOV A,@( 1 )
       02773 0061     1     MOV  B1_PRO_VAR ,A
  1052            C        ;-应用修改
  1053 02774 0423 C        	MOV	A,B1_CONTRAST
  1054            C      M 	PAGE	#(SETLCDCONTRAST)	
       02775 1E82     1     PAGE ( SETLCDCONTRAST / 1024 ),
  1055 02776 104A C        	CALL	SETLCDCONTRAST
  1056            C      M 	PAGE	#($)		
       02777 1E89     1     PAGE ( $ / 1024 ),
  1057 02778 14D8 C        	JMP	MENU_FUNC_1_MKEY_SELMENU
  1058            C        ;---------------------------------------
  1059 02779      C        MENU_FUNC_4_MKEY_UP:
  1060            C        		
  1061            C      M 	MOV	TEMP1,@1	;min
       02779 1801     1     MOV A,@( 1 )
       0277A 0056     1     MOV  TEMP1 ,A
  1062            C      M 	MOV	TEMP2,@5	;max
       0277B 1805     1     MOV A,@( 5 )
       0277C 0057     1     MOV  TEMP2 ,A
  1063            C        
  1064 0277D 0431 C        	MOV	A,B1_MSG_N
  1065            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       0277E 1E82     2     PAGE ( VALUE_INC / 1024 ),
       0277F 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       02780 1E89     2     PAGE ( $ / 1024 ),
  1066 02781 0071 C        	MOV	B1_MSG_N,A
  1067            C        	
  1068 02782 1746 C        	JMP	MENU_FUNC_4_CONTRAST
  1069            C        ;---------------------------------------
  1070 02783      C        MENU_FUNC_4_MKEY_DWN:	
  1071            C        
  1072            C      M 	MOV	TEMP1,@1	;min
       02783 1801     1     MOV A,@( 1 )
       02784 0056     1     MOV  TEMP1 ,A
  1073            C      M 	MOV	TEMP2,@5	;max
       02785 1805     1     MOV A,@( 5 )
       02786 0057     1     MOV  TEMP2 ,A
  1074            C        	
  1075 02787 0431 C        	MOV	A,B1_MSG_N
  1076            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       02788 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       02789 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       0278A 1E89     2     PAGE ( $ / 1024 ),
  1077 0278B 0071 C        	MOV	B1_MSG_N,A
  1078            C        			
  1079 0278C 1746 C        	JMP	MENU_FUNC_4_CONTRAST
  1080            C        ;---------------------------------------
  1081 0278D      C        MENU_FUNC_4_MKEY_TOSTP:
  1082            C        ;-放弃修改
  1083 0278D 0423 C        	MOV	A,B1_CONTRAST
  1084            C      M 	PAGE	#(SETLCDCONTRAST)	
       0278E 1E82     1     PAGE ( SETLCDCONTRAST / 1024 ),
  1085 0278F 104A C        	CALL	SETLCDCONTRAST
  1086            C      M 	PAGE	#($)	
       02790 1E89     1     PAGE ( $ / 1024 ),
  1087            C        
  1088 02791 14B6 C        	JMP	MENU_FUNC_4_MKEY_STP
  1089            C        ;---------------------------------------
  1090            C        ;-------------------------------------------------------------------------------
  1091 02792      C        MENU_FUNC_5:
  1092            C      M 	LJMP	MENU_5_FUNC
                      2  M  PAGE #( MENU_5_FUNC ),
       02792 1E8A     2     PAGE ( MENU_5_FUNC / 1024 ),
       02793 1400     1     JMP ( MENU_5_FUNC % 1024 ),
  1093 02794      C        MENU_FUNC_6:
  1094            C      M 	LJMP	MENU_6_FUNC
                      2  M  PAGE #( MENU_6_FUNC ),
       02794 1E8A     2     PAGE ( MENU_6_FUNC / 1024 ),
       02795 146B     1     JMP ( MENU_6_FUNC % 1024 ),
  1095 02796      C        MENU_FUNC_7:
  1096            C      M 	LJMP	MENU_7_FUNC
                      2  M  PAGE #( MENU_7_FUNC ),
       02796 1E8A     2     PAGE ( MENU_7_FUNC / 1024 ),
       02797 14EF     1     JMP ( MENU_7_FUNC % 1024 ),
  1097 02798      C        MENU_FUNC_8:
  1098            C      M 	LJMP	MENU_8_FUNC
                      2  M  PAGE #( MENU_8_FUNC ),
       02798 1E8A     2     PAGE ( MENU_8_FUNC / 1024 ),
       02799 15AE     1     JMP ( MENU_8_FUNC % 1024 ),
  1099 0279A      C        MENU_FUNC_A:
  1100            C      M 	LJMP	MENU_FUNC_A_FUNC
                      2  M  PAGE #( MENU_FUNC_A_FUNC ),
       0279A 1E8A     2     PAGE ( MENU_FUNC_A_FUNC / 1024 ),
       0279B 1627     1     JMP ( MENU_FUNC_A_FUNC % 1024 ),
  1101            C        ;-------------------------------------------------------------------------------
  1102            C        ORG	(10<<10)
  1103            C        ;-------------------------------------------------------------------------------
  1104 02800      C        MENU_5_FUNC:	
  1105 02800 1890 C        	MOV	A,@CMSG_INIT
  1106 02801 0120 C        	SUB	A,B1_MSG
  1107            C      M 	JPZ	MENU_FUNC_5_INIT
       02802 0C83     1     JBC  _STATUS , Z 
       02803 140E     1     JMP  MENU_FUNC_5_INIT ,
  1108            C        
  1109 02804 1880 C        	MOV 	A,@CMSG_MKEY
  1110 02805 0120 C        	SUB 	A,B1_MSG
  1111            C      M 	JPZ 	MENU_FUNC_5_MKEY
       02806 0C83     1     JBC  _STATUS , Z 
       02807 141D     1     JMP  MENU_FUNC_5_MKEY ,
  1112            C        	
  1113 02808 1898 C        	MOV 	A,@CMSG_TMR
  1114 02809 0120 C        	SUB 	A,B1_MSG
  1115            C      M 	JPZ 	MENU_FUNC_5_TMR
       0280A 0C83     1     JBC  _STATUS , Z 
       0280B 1459     1     JMP  MENU_FUNC_5_TMR ,
  1116            C        	
  1117 0280C      C        MENU_FUNC_5_END:
  1118 0280C      C        MENU_FUNC_6_FUNC_END:
  1119 0280C      C        MENU_FUNC_7_FUNC_END:
  1120 0280C      C        MENU_FUNC_8_FUNC_END:
  1121 0280C      C        MENU_FUNC_A_FUNC_END:
  1122            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       0280C 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       0280D 15AC     1     JMP ( MAIN_LOOP % 1024 ),
  1123            C        ;---------------------------------------
  1124 0280E      C        MENU_FUNC_5_INIT:
  1125            C        
  1126 0280E 0726 C        	SWAPA	B1_RING_NUM
  1127 0280F 1A0F C        	AND	A,@0X0F
  1128 02810 0071 C        	MOV	B1_MSG_N,A
  1129            C        
  1130            C        ;	PAGE	#(VGA)
  1131            C        ;	CALL	VGABLANKCHAR
  1132            C        ;;-the third line
  1133            C        ;	MOV	A,@(STYLE_CENTER)
  1134            C        ;	CALL	VGACHAR
  1135            C        ;	MOV	A,@25		;MESSAGE
  1136            C        ;	CALL	VGASTRING
  1137            C        ;	MOV	A,@(CH_BLANK)
  1138            C        ;	CALL	VGACHAR
  1139            C        ;	MOV	A,@7		;LENGTH
  1140            C        ;	CALL	VGASTRING
  1141            C        ;	MOV	A,@(CH_END)
  1142            C        ;	CALL	VGACHAR
  1143            C        ;	CALL	VGADRAWCHAR
  1144            C        	;PAGE	#($)
  1145 02811      C        MENU_FUNC_5_MSGLEN:
  1146            C      M 	PAGE	#(VGA)
       02811 1E8C     1     PAGE ( VGA / 1024 ),
  1147 02812 111E C        	CALL	VGABLANKNUM2
  1148            C        
  1149 02813 1883 C        	MOV	A,@(STYLE_CENTER)
  1150 02814 101F C        	CALL	VGANUM2
  1151            C        	
  1152 02815 0431 C        	MOV	A,B1_MSG_N
  1153 02816 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
  1154 02817 101F C        	CALL	VGANUM2
  1155 02818 18FF C        	MOV	A,@(CH_END)
  1156 02819 101F C        	CALL	VGANUM2
  1157 0281A 10A4 C        	CALL	VGADRAWNUM2
  1158            C      M 	PAGE	#($)
       0281B 1E8A     1     PAGE ( $ / 1024 ),
  1159            C        
  1160 0281C 140C C        	JMP	MENU_FUNC_5_END
  1161            C        ;---------------------------------------
  1162 0281D      C        MENU_FUNC_5_MKEY:
  1163            C        
  1164 0281D 1820 C        	MOV	A,@CKEY_MNU
  1165            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0281E 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0281F 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02820 1E8A     2     PAGE ( $ / 1024 ),
  1166            C      M 	JPNC	MENU_FUNC_5_MKEY_MNU
       02821 0E03     1     JBS  _STATUS , C 
       02822 1438     1     JMP  MENU_FUNC_5_MKEY_MNU ,
  1167            C        	
  1168 02823 1821 C        	MOV	A,@CKEY_UP
  1169            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02824 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02825 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02826 1E8A     2     PAGE ( $ / 1024 ),
  1170            C      M 	JPNC	MENU_FUNC_5_MKEY_UP
       02827 0E03     1     JBS  _STATUS , C 
       02828 1445     1     JMP  MENU_FUNC_5_MKEY_UP ,
  1171 02829 1822 C        	MOV	A,@CKEY_DWN
  1172            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0282A 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0282B 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0282C 1E8A     2     PAGE ( $ / 1024 ),
  1173            C      M 	JPNC	MENU_FUNC_5_MKEY_DWN
       0282D 0E03     1     JBS  _STATUS , C 
       0282E 144F     1     JMP  MENU_FUNC_5_MKEY_DWN ,
  1174            C        
  1175 0282F 1813 C        	MOV	A,@CKEY_STP
  1176            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02830 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02831 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02832 1E8A     2     PAGE ( $ / 1024 ),
  1177            C      M 	JPNC	MENU_5_MKEY_STP
       02833 0E03     1     JBS  _STATUS , C 
       02834 1436     1     JMP  MENU_5_MKEY_STP ,
  1178            C        			
  1179 02835 140C C        	JMP	MENU_FUNC_5_END
  1180            C        ;---------------------------------------
  1181 02836      C        MENU_5_MKEY_STP:
  1182 02836      C        MENU_6_MKEY_STP:
  1183 02836      C        MENU_7_MKEY_STP:
  1184 02836      C        MENU_9_MKEY_STP:
  1185 02836      C        MENU_A_MKEY_STP:
  1186 02836      C        MENU_EXITMNU:
  1187            C      M 	LJMP	MENU_FUNC_6789_MKEY_STP
                      2  M  PAGE #( MENU_FUNC_6789_MKEY_STP ),
       02836 1E89     2     PAGE ( MENU_FUNC_6789_MKEY_STP / 1024 ),
       02837 14B6     1     JMP ( MENU_FUNC_6789_MKEY_STP % 1024 ),
  1188            C        ;---------------------------------------
  1189 02838      C        MENU_FUNC_5_MKEY_MNU:
  1190            C        ;-保存修改	
  1191 02838 0426 C        	MOV	A,B1_RING_NUM
  1192 02839 1A0F C        	AND	A,@0X0F
  1193 0283A 0066 C        	MOV	B1_RING_NUM,A
  1194            C        		
  1195 0283B 0731 C        	SWAPA	B1_MSG_N
  1196 0283C 1AF0 C        	AND	A,@0XF0
  1197 0283D 0226 C        	OR	A,B1_RING_NUM
  1198 0283E 0066 C        	MOV	B1_RING_NUM,A		;Save the value
  1199            C        	
  1200 0283F 0421 C        	MOV	A,B1_PRO_VAR
  1201 02840 0071 C        	MOV	B1_MSG_N,A
  1202            C        	
  1203            C      M 	MOV	B1_PRO_VAR,@1
       02841 1801     1     MOV A,@( 1 )
       02842 0061     1     MOV  B1_PRO_VAR ,A
  1204            C        			
  1205            C      M 	LJMP	MENU_FUNC_1_MKEY_SELMENU
                      2  M  PAGE #( MENU_FUNC_1_MKEY_SELMENU ),
       02843 1E89     2     PAGE ( MENU_FUNC_1_MKEY_SELMENU / 1024 ),
       02844 14D8     1     JMP ( MENU_FUNC_1_MKEY_SELMENU % 1024 ),
  1206            C        ;---------------------------------------
  1207 02845      C        MENU_FUNC_5_MKEY_UP:
  1208            C        			
  1209            C      M 	MOV	TEMP1,@1	;min
       02845 1801     1     MOV A,@( 1 )
       02846 0056     1     MOV  TEMP1 ,A
  1210            C      M 	MOV	TEMP2,@2	;max
       02847 1802     1     MOV A,@( 2 )
       02848 0057     1     MOV  TEMP2 ,A
  1211            C        
  1212 02849 0431 C        	MOV	A,B1_MSG_N
  1213            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       0284A 1E82     2     PAGE ( VALUE_INC / 1024 ),
       0284B 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       0284C 1E8A     2     PAGE ( $ / 1024 ),
  1214 0284D 0071 C        	MOV	B1_MSG_N,A
  1215            C        	
  1216 0284E 1411 C        	JMP	MENU_FUNC_5_MSGLEN
  1217 0284F      C        MENU_FUNC_5_MKEY_DWN:
  1218            C        	
  1219            C      M 	MOV	TEMP1,@1	;min
       0284F 1801     1     MOV A,@( 1 )
       02850 0056     1     MOV  TEMP1 ,A
  1220            C      M 	MOV	TEMP2,@2	;max
       02851 1802     1     MOV A,@( 2 )
       02852 0057     1     MOV  TEMP2 ,A
  1221            C        	
  1222 02853 0431 C        	MOV	A,B1_MSG_N
  1223            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       02854 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       02855 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       02856 1E8A     2     PAGE ( $ / 1024 ),
  1224 02857 0071 C        	MOV	B1_MSG_N,A
  1225            C        			
  1226 02858 1411 C        	JMP	MENU_FUNC_5_MSGLEN
  1227            C        ;---------------------------------------
  1228 02859      C        MENU_FUNC_5_TMR:
  1229 02859 0562 C        	INC	B1_PRO_VAR1
  1230            C        	
  1231 0285A 0422 C        	MOV	A,B1_PRO_VAR1
  1232 0285B 1D14 C        	SUB	A,@20
  1233            C      M 	JPNC	MENU_EXITMNU	;Time out
       0285C 0E03     1     JBS  _STATUS , C 
       0285D 1436     1     JMP  MENU_EXITMNU ,
  1234            C        
  1235            C      M 	REFURBISH_2NDL
                      2  M  BLOCK  0 
       0285E 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0285F 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02860 1880     2     MOV A,@( LCD_CTRL )
       02861 004C     2     MOV  _RC ,A
       02862 0B8D     1     BS  _RD , 6 
  1236            C        
  1237            C      M 	JPB	B1_PRO_VAR1,0,MENU_FUNC_5_MSGLEN
       02863 0C22     1     JBC  B1_PRO_VAR1 , 0 
       02864 1411     1     JMP  MENU_FUNC_5_MSGLEN ,
  1238            C        ;MENU_FUNC_9_TMR_OFF:
  1239            C        
  1240 02865 1894 C        	MOV	A,@(LCD_CTRL+OFFSET2NDL+7)
  1241 02866 004C C        	MOV	_RC,A
  1242            C        	
  1243            C      M 	MOV	_RD,@NUM_BLANK
       02867 1800     1     MOV A,@( NUM_BLANK )
       02868 004D     1     MOV  _RD ,A
  1244 02869 054C C        	INC	_RC
  1245            C        	
  1246 0286A 140C C        	JMP	MENU_FUNC_5_END
  1247            C        
  1248            C        ;-------------------------------------------------------------------------------
  1249 0286B      C        MENU_6_FUNC:	
  1250 0286B 1890 C        	MOV	A,@CMSG_INIT
  1251 0286C 0120 C        	SUB	A,B1_MSG
  1252            C      M 	JPZ	MENU_FUNC_6_INIT
       0286D 0C83     1     JBC  _STATUS , Z 
       0286E 1483     1     JMP  MENU_FUNC_6_INIT ,
  1253            C        
  1254 0286F 1880 C        	MOV 	A,@CMSG_MKEY
  1255 02870 0120 C        	SUB 	A,B1_MSG
  1256            C      M 	JPZ 	MENU_FUNC_6_MKEY
       02871 0C83     1     JBC  _STATUS , Z 
       02872 14B2     1     JMP  MENU_FUNC_6_MKEY ,
  1257            C        	
  1258 02873 1898 C        	MOV 	A,@CMSG_TMR
  1259 02874 0120 C        	SUB 	A,B1_MSG
  1260            C      M 	JPZ 	MENU_6_TMR
       02875 0C83     1     JBC  _STATUS , Z 
       02876 14ED     1     JMP  MENU_6_TMR ,
  1261            C        	
  1262 02877 140C C        	JMP	MENU_FUNC_6_FUNC_END
  1263            C        ;---------------------------------------
  1264 02878      C        PSADDR_TAB:		;the address(temp memory,use to stor psword)
  1265            C      M 	MTBL
       02878 0020     1     TBL 
             2878     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
  1266 02879 1C00 C        	RETL	@0		;0 - reserved
  1267 0287A 1C34 C        	RETL	@B1_MIN_REG	;1 - ps1
  1268 0287B 1C35 C        	RETL	@B1_HOUR_REG	;2 - ps2
  1269 0287C 1C36 C        	RETL	@B1_DAY_REG	;3 - ps3
  1270 0287D 1C37 C        	RETL	@B1_MON_REG	;4 - ps4
  1271            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
  1272 0287E      C        PSOFFSET_TAB:		;以第二行左起的偏移(Display memoryr)
  1273            C      M 	MTBL
       0287E 0020     1     TBL 
             287E     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
  1274 0287F 1C00 C        	RETL	@0		;0 - reserved
  1275 02880 1C06 C        	RETL	@6	;1 - year
  1276 02881 1C07 C        	RETL	@7	;2 - month
  1277 02882 1C08 C        	RETL	@8	;3 - day
  1278            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
  1279            C        ;---------------------------------------
  1280 02883      C        MENU_FUNC_6_INIT:
  1281            C        	
  1282 02883 0426 C        	MOV	A,B1_RING_NUM
  1283 02884 1A0F C        	AND	A,@0X0F
  1284 02885 0071 C        	MOV	B1_MSG_N,A
  1285 02886      C        MENU_FUNC_6_RINGS:
  1286            C        
  1287            C      M 	PAGE	#(VGA)
       02886 1E8C     1     PAGE ( VGA / 1024 ),
  1288 02887 111E C        	CALL	VGABLANKNUM2
  1289 02888 1127 C        	CALL	VGABLANKCHAR
  1290            C      M 	PAGE	#($)
       02889 1E8A     1     PAGE ( $ / 1024 ),
  1291            C        	
  1292 0288A 0431 C        	MOV	A,B1_MSG_N
  1293 0288B 1D01 C        	SUB	A,@1
  1294            C      M 	JPZ	MENU_FUNC_6_TOLLSAVE
       0288C 0C83     1     JBC  _STATUS , Z 
       0288D 14A8     1     JMP  MENU_FUNC_6_TOLLSAVE ,
  1295            C        ;-the third line
  1296            C      M 	PAGE	#(VGA)
       0288E 1E8C     1     PAGE ( VGA / 1024 ),
  1297 0288F 1883 C        	MOV	A,@(STYLE_CENTER)
  1298 02890 1026 C        	CALL	VGACHAR
  1299 02891 1812 C        	MOV	A,@18		;RINGS
  1300 02892 114D C        	CALL	VGASTRING
  1301 02893 1800 C        	MOV	A,@(CH_BLANK)
  1302 02894 1026 C        	CALL	VGACHAR
  1303 02895 1815 C        	MOV	A,@21		;TO
  1304 02896 114D C        	CALL	VGASTRING
  1305 02897 1800 C        	MOV	A,@(CH_BLANK)
  1306 02898 1026 C        	CALL	VGACHAR
  1307 02899 1801 C        	MOV	A,@1		;ANSWER
  1308 0289A 114D C        	CALL	VGASTRING
  1309 0289B 18FF C        	MOV	A,@(CH_END)
  1310 0289C 1026 C        	CALL	VGACHAR
  1311 0289D 10AB C        	CALL	VGADRAWCHAR
  1312            C        ;-the second line
  1313 0289E 1883 C        	MOV	A,@(STYLE_CENTER)
  1314 0289F 101F C        	CALL	VGANUM2
  1315            C        	
  1316 028A0 0431 C        	MOV	A,B1_MSG_N
  1317 028A1 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
  1318 028A2 101F C        	CALL	VGANUM2
  1319 028A3 18FF C        	MOV	A,@(CH_END)
  1320 028A4 101F C        	CALL	VGANUM2
  1321 028A5 10A4 C        	CALL	VGADRAWNUM2
  1322            C      M 	PAGE	#($)
       028A6 1E8A     1     PAGE ( $ / 1024 ),
  1323            C        
  1324 028A7 140C C        	JMP	MENU_FUNC_6_FUNC_END
  1325 028A8      C        MENU_FUNC_6_TOLLSAVE:
  1326            C        ;-the third line
  1327            C      M 	PAGE	#(VGA)
       028A8 1E8C     1     PAGE ( VGA / 1024 ),
  1328 028A9 1883 C        	MOV	A,@(STYLE_CENTER)
  1329 028AA 1026 C        	CALL	VGACHAR
  1330 028AB 182D C        	MOV	A,@45		;TOLL SAVE
  1331 028AC 114D C        	CALL	VGASTRING
  1332 028AD 18FF C        	MOV	A,@(CH_END)
  1333 028AE 1026 C        	CALL	VGACHAR
  1334 028AF 10AB C        	CALL	VGADRAWCHAR
  1335            C      M 	PAGE	#($)
       028B0 1E8A     1     PAGE ( $ / 1024 ),
  1336            C        
  1337 028B1 140C C        	JMP	MENU_FUNC_6_FUNC_END
  1338            C        ;---------------------------------------
  1339 028B2      C        MENU_FUNC_6_MKEY:
  1340 028B2 00E2 C        	CLR	B1_PRO_VAR1
  1341            C        	
  1342 028B3 1820 C        	MOV	A,@CKEY_MNU
  1343            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       028B4 1E81     2     PAGE ( KEY_CHK / 1024 ),
       028B5 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       028B6 1E8A     2     PAGE ( $ / 1024 ),
  1344            C      M 	JPNC	MENU_FUNC_6_MKEY_MNU
       028B7 0E03     1     JBS  _STATUS , C 
       028B8 14CC     1     JMP  MENU_FUNC_6_MKEY_MNU ,
  1345            C        	
  1346 028B9 1821 C        	MOV	A,@CKEY_UP
  1347            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       028BA 1E81     2     PAGE ( KEY_CHK / 1024 ),
       028BB 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       028BC 1E8A     2     PAGE ( $ / 1024 ),
  1348            C      M 	JPNC	MENU_FUNC_6_MKEY_UP
       028BD 0E03     1     JBS  _STATUS , C 
       028BE 14D9     1     JMP  MENU_FUNC_6_MKEY_UP ,
  1349 028BF 1822 C        	MOV	A,@CKEY_DWN
  1350            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       028C0 1E81     2     PAGE ( KEY_CHK / 1024 ),
       028C1 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       028C2 1E8A     2     PAGE ( $ / 1024 ),
  1351            C      M 	JPNC	MENU_FUNC_6_MKEY_DWN
       028C3 0E03     1     JBS  _STATUS , C 
       028C4 14E3     1     JMP  MENU_FUNC_6_MKEY_DWN ,
  1352            C        
  1353 028C5 1813 C        	MOV	A,@CKEY_STP
  1354            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       028C6 1E81     2     PAGE ( KEY_CHK / 1024 ),
       028C7 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       028C8 1E8A     2     PAGE ( $ / 1024 ),
  1355            C      M 	JPNC	MENU_6_MKEY_STP
       028C9 0E03     1     JBS  _STATUS , C 
       028CA 1436     1     JMP  MENU_6_MKEY_STP ,
  1356            C        	
  1357 028CB 140C C        	JMP	MENU_FUNC_6_FUNC_END
  1358            C        ;---------------------------------------
  1359            C        ;---------------------------------------
  1360 028CC      C        MENU_FUNC_6_MKEY_MNU:
  1361            C        ;-保存修改	
  1362 028CC 0426 C        	MOV	A,B1_RING_NUM
  1363 028CD 1AF0 C        	AND	A,@0XF0
  1364 028CE 0066 C        	MOV	B1_RING_NUM,A
  1365            C        		
  1366 028CF 0431 C        	MOV	A,B1_MSG_N
  1367 028D0 1A0F C        	AND	A,@0X0F
  1368 028D1 0226 C        	OR	A,B1_RING_NUM
  1369 028D2 0066 C        	MOV	B1_RING_NUM,A		;Save the value
  1370            C        	
  1371 028D3 0421 C        	MOV	A,B1_PRO_VAR
  1372 028D4 0071 C        	MOV	B1_MSG_N,A
  1373            C        	
  1374            C      M 	MOV	B1_PRO_VAR,@1
       028D5 1801     1     MOV A,@( 1 )
       028D6 0061     1     MOV  B1_PRO_VAR ,A
  1375            C        			
  1376            C      M 	LJMP	MENU_FUNC_1_MKEY_SELMENU
                      2  M  PAGE #( MENU_FUNC_1_MKEY_SELMENU ),
       028D7 1E89     2     PAGE ( MENU_FUNC_1_MKEY_SELMENU / 1024 ),
       028D8 14D8     1     JMP ( MENU_FUNC_1_MKEY_SELMENU % 1024 ),
  1377            C        ;---------------------------------------
  1378 028D9      C        MENU_FUNC_6_MKEY_UP:
  1379            C        			
  1380            C      M 	MOV	TEMP1,@1	;min
       028D9 1801     1     MOV A,@( 1 )
       028DA 0056     1     MOV  TEMP1 ,A
  1381            C      M 	MOV	TEMP2,@9	;max
       028DB 1809     1     MOV A,@( 9 )
       028DC 0057     1     MOV  TEMP2 ,A
  1382            C        
  1383 028DD 0431 C        	MOV	A,B1_MSG_N
  1384            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       028DE 1E82     2     PAGE ( VALUE_INC / 1024 ),
       028DF 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       028E0 1E8A     2     PAGE ( $ / 1024 ),
  1385 028E1 0071 C        	MOV	B1_MSG_N,A
  1386            C        	
  1387 028E2 1486 C        	JMP	MENU_FUNC_6_RINGS
  1388 028E3      C        MENU_FUNC_6_MKEY_DWN:
  1389            C        	
  1390            C      M 	MOV	TEMP1,@1	;min
       028E3 1801     1     MOV A,@( 1 )
       028E4 0056     1     MOV  TEMP1 ,A
  1391            C      M 	MOV	TEMP2,@9	;max
       028E5 1809     1     MOV A,@( 9 )
       028E6 0057     1     MOV  TEMP2 ,A
  1392            C        
  1393 028E7 0431 C        	MOV	A,B1_MSG_N
  1394            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       028E8 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       028E9 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       028EA 1E8A     2     PAGE ( $ / 1024 ),
  1395 028EB 0071 C        	MOV	B1_MSG_N,A
  1396            C        				
  1397 028EC 1486 C        	JMP	MENU_FUNC_6_RINGS	
  1398            C        ;---------------------------------------
  1399 028ED      C        MENU_6_TMR:
  1400            C      M 	LJMP	MENU_FUNC_6_TMR
                      2  M  PAGE #( MENU_FUNC_6_TMR ),
       028ED 1E89     2     PAGE ( MENU_FUNC_6_TMR / 1024 ),
       028EE 14BF     1     JMP ( MENU_FUNC_6_TMR % 1024 ),
  1401            C        ;-------------------------------------------------------------------------------
  1402 028EF      C        MENU_7_FUNC:
  1403            C        	
  1404 028EF 1890 C        	MOV	A,@CMSG_INIT
  1405 028F0 0120 C        	SUB	A,B1_MSG
  1406            C      M 	JPZ	MENU_FUNC_7_INIT
       028F1 0C83     1     JBC  _STATUS , Z 
       028F2 14FC     1     JMP  MENU_FUNC_7_INIT ,
  1407            C        
  1408 028F3 1880 C        	MOV 	A,@CMSG_MKEY
  1409 028F4 0120 C        	SUB 	A,B1_MSG
  1410            C      M 	JPZ 	MENU_FUNC_7_MKEY
       028F5 0C83     1     JBC  _STATUS , Z 
       028F6 1536     1     JMP  MENU_FUNC_7_MKEY ,
  1411            C        	
  1412 028F7 1898 C        	MOV 	A,@CMSG_TMR
  1413 028F8 0120 C        	SUB 	A,B1_MSG
  1414            C      M 	JPZ 	MENU_FUNC_7_TMR
       028F9 0C83     1     JBC  _STATUS , Z 
       028FA 151E     1     JMP  MENU_FUNC_7_TMR ,
  1415            C        
  1416 028FB 140C C        	JMP	MENU_FUNC_7_FUNC_END
  1417            C        ;---------------------------------------
  1418 028FC      C        MENU_FUNC_7_INIT:
  1419            C        
  1420            C      M 	MOV	B1_PRO_VAR,@0X17	;PSWORD/ps1
       028FC 1817     1     MOV A,@( 23 )
       028FD 0061     1     MOV  B1_PRO_VAR ,A
  1421 028FE      C        MENU_FUNC_7_PSWORD:
  1422            C        
  1423 028FE 0721 C        	SWAPA	B1_PRO_VAR
  1424 028FF 1A0F C        	AND	A,@0X0F
  1425 02900 107E C        	CALL	PSOFFSET_TAB
  1426 02901 0055 C        	MOV	TEMP0,A
  1427            C        ;-the second line
  1428 02902 188D C        	MOV	A,@(LCD_CTRL+OFFSET2NDL)
  1429 02903 0395 C        	ADD	A,TEMP0
  1430 02904 004C C        	MOV	_RC,A
  1431            C        	
  1432 02905 0727 C        	SWAPA	B1_12PSWORD
  1433 02906 1A0F C        	AND	A,@0X0F
  1434 02907 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
  1435 02908 004D C        	MOV	_RD,A
  1436 02909 0074 C        	MOV	B1_MIN_REG,A
  1437 0290A 0071 C        	MOV	B1_MSG_N,A
  1438 0290B 054C C        	INC	_RC
  1439            C        
  1440 0290C 0427 C        	MOV	A,B1_12PSWORD
  1441 0290D 1A0F C        	AND	A,@0X0F
  1442 0290E 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
  1443 0290F 004D C        	MOV	_RD,A
  1444 02910 0075 C        	MOV	B1_HOUR_REG,A
  1445 02911 054C C        	INC	_RC
  1446            C        	
  1447 02912 0728 C        	SWAPA	B1_34PSWORD
  1448 02913 1A0F C        	AND	A,@0X0F
  1449 02914 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
  1450 02915 004D C        	MOV	_RD,A
  1451 02916 0076 C        	MOV	B1_DAY_REG,A
  1452 02917 054C C        	INC	_RC
  1453            C        
  1454            C      M 	REFURBISH_2NDL
                      2  M  BLOCK  0 
       02918 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02919 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       0291A 1880     2     MOV A,@( LCD_CTRL )
       0291B 004C     2     MOV  _RC ,A
       0291C 0B8D     1     BS  _RD , 6 
  1455            C        ;-	
  1456 0291D 140C C        	JMP	MENU_FUNC_7_FUNC_END
  1457            C        ;---------------------------------------
  1458 0291E      C        MENU_FUNC_7_TMR:
  1459 0291E 0562 C        	INC	B1_PRO_VAR1
  1460            C        	
  1461 0291F 0422 C        	MOV	A,B1_PRO_VAR1
  1462 02920 1D14 C        	SUB	A,@20
  1463            C      M 	JPNC	MENU_EXITMNU	;Time out
       02921 0E03     1     JBS  _STATUS , C 
       02922 1436     1     JMP  MENU_EXITMNU ,
  1464            C        	
  1465            C      M 	REFURBISH_2NDL
                      2  M  BLOCK  0 
       02923 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02924 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02925 1880     2     MOV A,@( LCD_CTRL )
       02926 004C     2     MOV  _RC ,A
       02927 0B8D     1     BS  _RD , 6 
  1466            C        ;-Get address(offset)	
  1467 02928 0721 C        	SWAPA	B1_PRO_VAR
  1468 02929 1A0F C        	AND	A,@0X0F
  1469 0292A 107E C        	CALL	PSOFFSET_TAB
  1470 0292B 1F8D C        	ADD	A,@(LCD_CTRL+OFFSET2NDL)
  1471 0292C 004C C        	MOV	_RC,A
  1472            C      M 	MOV	_RD,@NUM_BLANK
       0292D 1800     1     MOV A,@( NUM_BLANK )
       0292E 004D     1     MOV  _RD ,A
  1473            C      M 	JPNB	B1_PRO_VAR1,0,MENU_FUNC_7_FUNC_END
       0292F 0E22     1     JBS  B1_PRO_VAR1 , 0 
       02930 140C     1     JMP  MENU_FUNC_7_FUNC_END ,
  1474            C        
  1475 02931 0431 C        	MOV	A,B1_MSG_N
  1476 02932 1A0F C        	AND	A,@0X0F
  1477 02933 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
  1478 02934 004D C        	MOV	_RD,A
  1479            C        	
  1480 02935 140C C        	JMP	MENU_FUNC_7_FUNC_END
  1481            C        ;---------------------------------------
  1482 02936      C        MENU_FUNC_7_MKEY:
  1483            C        		
  1484 02936 1820 C        	MOV	A,@CKEY_MNU
  1485            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02937 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02938 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02939 1E8A     2     PAGE ( $ / 1024 ),
  1486            C      M 	JPNC	MENU_FUNC_7_MKEY_MNU
       0293A 0E03     1     JBS  _STATUS , C 
       0293B 154F     1     JMP  MENU_FUNC_7_MKEY_MNU ,
  1487            C        	
  1488 0293C 1821 C        	MOV	A,@CKEY_UP
  1489            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       0293D 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0293E 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0293F 1E8A     2     PAGE ( $ / 1024 ),
  1490            C      M 	JPNC	MENU_FUNC_7_MKEY_UP
       02940 0E03     1     JBS  _STATUS , C 
       02941 1586     1     JMP  MENU_FUNC_7_MKEY_UP ,
  1491 02942 1822 C        	MOV	A,@CKEY_DWN
  1492            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02943 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02944 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02945 1E8A     2     PAGE ( $ / 1024 ),
  1493            C      M 	JPNC	MENU_FUNC_7_MKEY_DWN
       02946 0E03     1     JBS  _STATUS , C 
       02947 15A4     1     JMP  MENU_FUNC_7_MKEY_DWN ,
  1494            C        
  1495 02948 1813 C        	MOV	A,@CKEY_STP
  1496            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02949 1E81     2     PAGE ( KEY_CHK / 1024 ),
       0294A 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       0294B 1E8A     2     PAGE ( $ / 1024 ),
  1497            C      M 	JPNC	MENU_7_MKEY_STP
       0294C 0E03     1     JBS  _STATUS , C 
       0294D 1436     1     JMP  MENU_7_MKEY_STP ,
  1498            C        		
  1499 0294E 140C C        	JMP	MENU_FUNC_7_FUNC_END
  1500            C        ;---------------------------------------
  1501            C        ;---------------------------------------
  1502 0294F      C        MENU_FUNC_7_MKEY_MNU:
  1503            C        ;---
  1504            C      M 	REFURBISH_2NDL
                      2  M  BLOCK  0 
       0294F 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02950 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02951 1880     2     MOV A,@( LCD_CTRL )
       02952 004C     2     MOV  _RC ,A
       02953 0B8D     1     BS  _RD , 6 
  1505            C        ;---Display conform	
  1506 02954 0721 C        	SWAPA	B1_PRO_VAR
  1507 02955 1A0F C        	AND	A,@0X0F
  1508 02956 107E C        	CALL	PSOFFSET_TAB
  1509 02957 1F8D C        	ADD	A,@(LCD_CTRL+OFFSET2NDL)
  1510 02958 004C C        	MOV	_RC,A
  1511            C        
  1512 02959 0431 C        	MOV	A,B1_MSG_N
  1513 0295A 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
  1514 0295B 004D C        	MOV	_RD,A
  1515            C        ;---Save the data	
  1516 0295C 0721 C        	SWAPA	B1_PRO_VAR
  1517 0295D 1A0F C        	AND	A,@0X0F
  1518 0295E 1078 C        	CALL	PSADDR_TAB
  1519 0295F 1F40 C        	ADD	A,@BANK1
  1520 02960 0044 C        	MOV	_RSR,A
  1521            C      M 	MOV	_R0,B1_MSG_N		;Save the value
       02961 0431     1     MOV A, B1_MSG_N 
       02962 0040     1     MOV  _R0 ,A
  1522            C        
  1523 02963 0721 C        	SWAPA	B1_PRO_VAR		;PS adjust over?
  1524 02964 1A03 C        	AND	A,@0X03
  1525 02965 1D03 C        	SUB	A,@3
  1526            C      M 	JPZ	MENU_FUNC_7_MKEY_MNU_1
       02966 0C83     1     JBC  _STATUS , Z 
       02967 1573     1     JMP  MENU_FUNC_7_MKEY_MNU_1 ,
  1527            C        ;---the next adjust psword data
  1528 02968 0421 C        	MOV	A,B1_PRO_VAR
  1529 02969 1F10 C        	ADD	A,@0x10
  1530 0296A 0061 C        	MOV	B1_PRO_VAR,A
  1531            C        ;-Get data
  1532 0296B 0721 C        	SWAPA	B1_PRO_VAR
  1533 0296C 1A03 C        	AND	A,@0X03
  1534 0296D 1078 C        	CALL	PSADDR_TAB
  1535 0296E 1F40 C        	ADD	A,@BANK1
  1536 0296F 0044 C        	MOV	_RSR,A
  1537            C      M 	MOV	B1_MSG_N,_R0
       02970 0400     1     MOV A, _R0 
       02971 0071     1     MOV  B1_MSG_N ,A
  1538            C        		
  1539 02972 140C C        	JMP	MENU_FUNC_7_FUNC_END
  1540            C        ;-----------------------------
  1541 02973      C        MENU_FUNC_7_MKEY_MNU_1:		;PSWORD adjust over
  1542            C        ;---conform adjust data	
  1543            C        
  1544 02973 0734 C        	SWAPA	B1_MIN_REG	;ps1
  1545 02974 1AF0 C        	AND	A,@0XF0
  1546 02975 0067 C        	MOV	B1_12PSWORD,A
  1547            C        	
  1548 02976 0435 C        	MOV	A,B1_HOUR_REG	;ps2
  1549 02977 0227 C        	OR	A,B1_12PSWORD
  1550 02978 0067 C        	MOV	B1_12PSWORD,A
  1551            C        
  1552 02979 0736 C        	SWAPA	B1_DAY_REG	;ps3
  1553 0297A 1AF0 C        	AND	A,@0XF0
  1554 0297B 0068 C        	MOV	B1_34PSWORD,A
  1555            C        	
  1556 0297C 0437 C        	MOV	A,B1_MON_REG	;ps4
  1557 0297D 0228 C        	OR	A,B1_34PSWORD
  1558 0297E 0068 C        	MOV	B1_34PSWORD,A	
  1559            C        ;---
  1560 0297F 0421 C        	MOV	A,B1_PRO_VAR
  1561 02980 1A0F C        	AND	A,@0X0F
  1562 02981 0071 C        	MOV	B1_MSG_N,A
  1563            C        
  1564            C      M 	MOV	B1_PRO_VAR,@1
       02982 1801     1     MOV A,@( 1 )
       02983 0061     1     MOV  B1_PRO_VAR ,A
  1565            C        
  1566            C      M 	LJMP	MENU_FUNC_1_MKEY_SELMENU
                      2  M  PAGE #( MENU_FUNC_1_MKEY_SELMENU ),
       02984 1E89     2     PAGE ( MENU_FUNC_1_MKEY_SELMENU / 1024 ),
       02985 14D8     1     JMP ( MENU_FUNC_1_MKEY_SELMENU % 1024 ),
  1567            C        ;---------------------------------------
  1568 02986      C        MENU_FUNC_7_MKEY_UP:
  1569            C      M 	MOV	TEMP1,@0	;min
       02986 1800     1     MOV A,@( 0 )
       02987 0056     1     MOV  TEMP1 ,A
  1570            C      M 	MOV	TEMP2,@9	;max
       02988 1809     1     MOV A,@( 9 )
       02989 0057     1     MOV  TEMP2 ,A
  1571            C        	
  1572 0298A 0431 C        	MOV	A,B1_MSG_N
  1573            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       0298B 1E82     2     PAGE ( VALUE_INC / 1024 ),
       0298C 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       0298D 1E8A     2     PAGE ( $ / 1024 ),
  1574 0298E 0071 C        	MOV	B1_MSG_N,A
  1575            C        ;---
  1576 0298F      C        MENU_FUNC_7_MKEY_ADJUST:
  1577 0298F 00E2 C        	CLR	B1_PRO_VAR1
  1578            C        	
  1579 02990 1808 C        	MOV	A,@CTMR500MS
  1580            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       02991 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       02992 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       02993 1E8A     2     PAGE ( $ / 1024 ),
  1581            C        
  1582            C      M 	REFURBISH_2NDL
                      2  M  BLOCK  0 
       02994 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02995 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02996 1880     2     MOV A,@( LCD_CTRL )
       02997 004C     2     MOV  _RC ,A
       02998 0B8D     1     BS  _RD , 6 
  1583            C        	
  1584 02999 0721 C        	SWAPA	B1_PRO_VAR
  1585 0299A 1A0F C        	AND	A,@0X0F
  1586 0299B 107E C        	CALL	PSOFFSET_TAB
  1587 0299C 0055 C        	MOV	TEMP0,A
  1588            C        
  1589 0299D 188D C        	MOV	A,@(LCD_CTRL+OFFSET2NDL)
  1590 0299E 0395 C        	ADD	A,TEMP0
  1591 0299F 004C C        	MOV	_RC,A
  1592            C        
  1593 029A0 0431 C        	MOV	A,B1_MSG_N
  1594 029A1 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
  1595 029A2 004D C        	MOV	_RD,A
  1596            C        
  1597 029A3 140C C        	JMP	MENU_FUNC_7_FUNC_END
  1598            C        ;---------------------------------------
  1599 029A4      C        MENU_FUNC_7_MKEY_DWN:
  1600            C        	
  1601            C      M 	MOV	TEMP1,@0	;min
       029A4 1800     1     MOV A,@( 0 )
       029A5 0056     1     MOV  TEMP1 ,A
  1602            C      M 	MOV	TEMP2,@9	;max
       029A6 1809     1     MOV A,@( 9 )
       029A7 0057     1     MOV  TEMP2 ,A
  1603            C        	
  1604 029A8 0431 C        	MOV	A,B1_MSG_N
  1605            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       029A9 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       029AA 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       029AB 1E8A     2     PAGE ( $ / 1024 ),
  1606 029AC 0071 C        	MOV	B1_MSG_N,A
  1607            C        	
  1608 029AD 158F C        	JMP	MENU_FUNC_7_MKEY_ADJUST
  1609            C        ;-------------------------------------------------------------------------------
  1610 029AE      C        MENU_8_FUNC:
  1611 029AE 1890 C        	MOV	A,@CMSG_INIT
  1612 029AF 0120 C        	SUB	A,B1_MSG
  1613            C      M 	JPZ	MENU_FUNC_8_INIT
       029B0 0C83     1     JBC  _STATUS , Z 
       029B1 15BB     1     JMP  MENU_FUNC_8_INIT ,
  1614            C        
  1615 029B2 1880 C        	MOV 	A,@CMSG_MKEY
  1616 029B3 0120 C        	SUB 	A,B1_MSG
  1617            C      M 	JPZ 	MENU_FUNC_8_MKEY
       029B4 0C83     1     JBC  _STATUS , Z 
       029B5 15EE     1     JMP  MENU_FUNC_8_MKEY ,
  1618            C        	
  1619 029B6 1898 C        	MOV 	A,@CMSG_TMR
  1620 029B7 0120 C        	SUB 	A,B1_MSG
  1621            C      M 	JPZ 	MENU_FUNC_8_TMR
       029B8 0C83     1     JBC  _STATUS , Z 
       029B9 15DA     1     JMP  MENU_FUNC_8_TMR ,
  1622            C        	
  1623 029BA 140C C        	JMP	MENU_FUNC_8_FUNC_END
  1624            C        ;---------------------------------------
  1625 029BB      C        MENU_FUNC_8_INIT:
  1626 029BB 1801 C        	MOV	A,@1
  1627 029BC 0ED2 C        	JBS	SYS_FLAG,3
  1628 029BD 1800 C        	MOV	A,@0
  1629 029BE 0071 C        	MOV	B1_MSG_N,A
  1630 029BF      C        MENU_FUNC_8_HD:	
  1631 029BF 00E2 C        	CLR	B1_PRO_VAR1
  1632            C        	
  1633 029C0 1808 C        	MOV	A,@CTMR500MS
  1634            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       029C1 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       029C2 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       029C3 1E8A     2     PAGE ( $ / 1024 ),
  1635 029C4      C        MENU_FUNC_9_HD_1:	
  1636 029C4 0431 C        	MOV	A,B1_MSG_N
  1637            C      M 	LCALL	HD_TAB
                      2  M  PAGE #( HD_TAB ),
       029C5 1E89     2     PAGE ( HD_TAB / 1024 ),
       029C6 1048     1     CALL ( HD_TAB % 1024 ),
                      2  M  PAGE #( $ ),
       029C7 1E8A     2     PAGE ( $ / 1024 ),
  1638 029C8 0072 C        	MOV	B1_MSG_ID,A
  1639            C        ;-the third line
  1640            C      M 	PAGE	#(VGA)
       029C9 1E8C     1     PAGE ( VGA / 1024 ),
  1641 029CA 1127 C        	CALL	VGABLANKCHAR
  1642            C        
  1643 029CB 1883 C        	MOV	A,@(STYLE_CENTER)
  1644 029CC 1026 C        	CALL	VGACHAR
  1645 029CD 181A C        	MOV	A,@26		;TAM HD
  1646 029CE 114D C        	CALL	VGASTRING
  1647 029CF 181A C        	MOV	A,@(CH_COLON)
  1648 029D0 1026 C        	CALL	VGACHAR
  1649 029D1 1800 C        	MOV	A,@(CH_BLANK)
  1650 029D2 1026 C        	CALL	VGACHAR
  1651 029D3 0432 C        	MOV	A,B1_MSG_ID	;ID on/off
  1652 029D4 114D C        	CALL	VGASTRING
  1653 029D5 18FF C        	MOV	A,@(CH_END)
  1654 029D6 1026 C        	CALL	VGACHAR
  1655 029D7 10AB C        	CALL	VGADRAWCHAR
  1656            C      M 	PAGE	#($)
       029D8 1E8A     1     PAGE ( $ / 1024 ),
  1657            C        
  1658 029D9 140C C        	JMP	MENU_FUNC_8_FUNC_END
  1659            C        ;---------------------------------------
  1660 029DA      C        MENU_FUNC_8_TMR:
  1661 029DA 0562 C        	INC	B1_PRO_VAR1
  1662            C        	
  1663            C      M 	REFURBISH_3RDL
                      2  M  BLOCK  0 
       029DB 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       029DC 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       029DD 1880     2     MOV A,@( LCD_CTRL )
       029DE 004C     2     MOV  _RC ,A
       029DF 0BCD     1     BS  _RD , 7 
  1664            C        
  1665            C      M 	JPB	B1_PRO_VAR1,0,MENU_FUNC_9_HD_1
       029E0 0C22     1     JBC  B1_PRO_VAR1 , 0 
       029E1 15C4     1     JMP  MENU_FUNC_9_HD_1 ,
  1666            C        ;MENU_FUNC_9_TMR_OFF:
  1667            C        
  1668 029E2 18A6 C        	MOV	A,@(LCD_CTRL+OFFSET3RDL+10)
  1669 029E3 004C C        	MOV	_RC,A
  1670            C        
  1671            C      M 	MOV	_RD,@CH_BLANK
       029E4 1800     1     MOV A,@( CH_BLANK )
       029E5 004D     1     MOV  _RD ,A
  1672 029E6 054C C        	INC	_RC
  1673            C      M 	MOV	_RD,@CH_BLANK
       029E7 1800     1     MOV A,@( CH_BLANK )
       029E8 004D     1     MOV  _RD ,A
  1674 029E9 054C C        	INC	_RC
  1675            C      M 	MOV	_RD,@CH_BLANK
       029EA 1800     1     MOV A,@( CH_BLANK )
       029EB 004D     1     MOV  _RD ,A
  1676 029EC 054C C        	INC	_RC
  1677            C        	
  1678 029ED 140C C        	JMP	MENU_FUNC_8_FUNC_END
  1679            C        ;---------------------------------------
  1680 029EE      C        MENU_FUNC_8_MKEY:
  1681            C        		
  1682 029EE 1820 C        	MOV	A,@CKEY_MNU
  1683            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       029EF 1E81     2     PAGE ( KEY_CHK / 1024 ),
       029F0 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       029F1 1E8A     2     PAGE ( $ / 1024 ),
  1684            C      M 	JPNC	MENU_FUNC_8_MKEY_MNU
       029F2 0E03     1     JBS  _STATUS , C 
       029F3 1607     1     JMP  MENU_FUNC_8_MKEY_MNU ,
  1685            C        	
  1686 029F4 1821 C        	MOV	A,@CKEY_UP
  1687            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       029F5 1E81     2     PAGE ( KEY_CHK / 1024 ),
       029F6 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       029F7 1E8A     2     PAGE ( $ / 1024 ),
  1688            C      M 	JPNC	MENU_FUNC_8_MKEY_UP
       029F8 0E03     1     JBS  _STATUS , C 
       029F9 1613     1     JMP  MENU_FUNC_8_MKEY_UP ,
  1689 029FA 1822 C        	MOV	A,@CKEY_DWN
  1690            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       029FB 1E81     2     PAGE ( KEY_CHK / 1024 ),
       029FC 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       029FD 1E8A     2     PAGE ( $ / 1024 ),
  1691            C      M 	JPNC	MENU_FUNC_8_MKEY_DWN
       029FE 0E03     1     JBS  _STATUS , C 
       029FF 161D     1     JMP  MENU_FUNC_8_MKEY_DWN ,
  1692            C        
  1693 02A00 1813 C        	MOV	A,@CKEY_STP
  1694            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02A01 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02A02 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02A03 1E8A     2     PAGE ( $ / 1024 ),
  1695            C      M 	JPNC	MENU_9_MKEY_STP
       02A04 0E03     1     JBS  _STATUS , C 
       02A05 1436     1     JMP  MENU_9_MKEY_STP ,
  1696            C        		
  1697 02A06 140C C        	JMP	MENU_FUNC_8_FUNC_END
  1698            C        ;---------------------------------------
  1699 02A07      C        MENU_FUNC_8_MKEY_MNU:
  1700            C        ;-保存修改	
  1701 02A07 08D2 C        	BC	SYS_FLAG,3
  1702 02A08 0C31 C        	JBC	B1_MSG_N,0
  1703 02A09 0AD2 C        	BS	SYS_FLAG,3		;Save the value
  1704            C        	
  1705            C      M 	LCALL	INIT_ENABLEDAC
                      2  M  PAGE #( INIT_ENABLEDAC ),
       02A0A 1E81     2     PAGE ( INIT_ENABLEDAC / 1024 ),
       02A0B 13AF     1     CALL ( INIT_ENABLEDAC % 1024 ),
                      2  M  PAGE #( $ ),
       02A0C 1E8A     2     PAGE ( $ / 1024 ),
  1706            C        	
  1707 02A0D 0421 C        	MOV	A,B1_PRO_VAR
  1708 02A0E 0071 C        	MOV	B1_MSG_N,A
  1709            C        	
  1710            C      M 	MOV	B1_PRO_VAR,@1
       02A0F 1801     1     MOV A,@( 1 )
       02A10 0061     1     MOV  B1_PRO_VAR ,A
  1711            C        			
  1712            C      M 	LJMP	MENU_FUNC_1_MKEY_SELMENU
                      2  M  PAGE #( MENU_FUNC_1_MKEY_SELMENU ),
       02A11 1E89     2     PAGE ( MENU_FUNC_1_MKEY_SELMENU / 1024 ),
       02A12 14D8     1     JMP ( MENU_FUNC_1_MKEY_SELMENU % 1024 ),
  1713            C        ;---------------------------------------
  1714 02A13      C        MENU_FUNC_8_MKEY_UP:
  1715            C        				
  1716            C      M 	MOV	TEMP1,@0	;min
       02A13 1800     1     MOV A,@( 0 )
       02A14 0056     1     MOV  TEMP1 ,A
  1717            C      M 	MOV	TEMP2,@1	;max
       02A15 1801     1     MOV A,@( 1 )
       02A16 0057     1     MOV  TEMP2 ,A
  1718            C        
  1719 02A17 0431 C        	MOV	A,B1_MSG_N
  1720            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       02A18 1E82     2     PAGE ( VALUE_INC / 1024 ),
       02A19 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       02A1A 1E8A     2     PAGE ( $ / 1024 ),
  1721 02A1B 0071 C        	MOV	B1_MSG_N,A
  1722            C        	
  1723 02A1C 15BF C        	JMP	MENU_FUNC_8_HD
  1724            C        ;---------------------------------------
  1725 02A1D      C        MENU_FUNC_8_MKEY_DWN:
  1726            C        	
  1727            C      M 	MOV	TEMP1,@0	;min
       02A1D 1800     1     MOV A,@( 0 )
       02A1E 0056     1     MOV  TEMP1 ,A
  1728            C      M 	MOV	TEMP2,@1	;max
       02A1F 1801     1     MOV A,@( 1 )
       02A20 0057     1     MOV  TEMP2 ,A
  1729            C        
  1730 02A21 0431 C        	MOV	A,B1_MSG_N
  1731            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       02A22 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       02A23 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       02A24 1E8A     2     PAGE ( $ / 1024 ),
  1732 02A25 0071 C        	MOV	B1_MSG_N,A
  1733            C        				
  1734 02A26 15BF C        	JMP	MENU_FUNC_8_HD
  1735            C        ;-------------------------------------------------------------------------------
  1736 02A27      C        MENU_FUNC_A_FUNC:
  1737            C        	
  1738 02A27 1885 C        	MOV	A,@CVP_END
  1739 02A28 0120 C        	SUB	A,B1_MSG
  1740            C      M 	JPZ	MENU_FUNC_A_FUNC_OVER
       02A29 0C83     1     JBC  _STATUS , Z 
       02A2A 1630     1     JMP  MENU_FUNC_A_FUNC_OVER ,
  1741            C        
  1742 02A2B 1880 C        	MOV	A,@CMSG_MKEY
  1743 02A2C 0120 C        	SUB	A,B1_MSG
  1744            C      M 	JPZ	MENU_FUNC_A_FUNC_MKEY
       02A2D 0C83     1     JBC  _STATUS , Z 
       02A2E 1638     1     JMP  MENU_FUNC_A_FUNC_MKEY ,
  1745            C        
  1746 02A2F 140C C        	JMP	MENU_FUNC_A_FUNC_END
  1747            C        ;---------------------------------------
  1748 02A30      C        MENU_FUNC_A_FUNC_OVER:
  1749 02A30 00E1 C        	CLR	B1_PRO_VAR	
  1750            C      M 	PAGE	#(KCLR_PRO_STACK)	
       02A31 1E8D     1     PAGE ( KCLR_PRO_STACK / 1024 ),
  1751 02A32 1352 C        	CALL	KCLR_PRO_STACK
  1752 02A33 18A7 C        	MOV	A,@CUPDT_MENU
  1753 02A34 1308 C        	CALL	KSTOR_MSG
  1754            C      M 	PAGE	#($)
       02A35 1E8A     1     PAGE ( $ / 1024 ),
  1755            C        	
  1756            C      M 	DAM_SPK_DISABLE
       02A36 0949     1     BC  _P9 , 5 
  1757            C        
  1758 02A37 140C C        	JMP	MENU_FUNC_A_FUNC_END
  1759            C        ;---------------------------------------
  1760 02A38      C        MENU_FUNC_A_FUNC_MKEY:
  1761            C        	
  1762 02A38 0420 C        	MOV	A,B1_MSG
  1763            C      M 	PAGE	#(KSTOR_MSG)
       02A39 1E8D     1     PAGE ( KSTOR_MSG / 1024 ),
  1764 02A3A 1308 C        	CALL	KSTOR_MSG
  1765 02A3B 1352 C        	CALL	KCLR_PRO_STACK
  1766            C      M 	PAGE	#($)
       02A3C 1E8A     1     PAGE ( $ / 1024 ),
  1767            C        	
  1768 02A3D 00E1 C        	CLR	B1_PRO_VAR
  1769            C      M 	DAM_SPK_DISABLE
       02A3E 0949     1     BC  _P9 , 5 
  1770            C        				
  1771 02A3F 140C C        	JMP	MENU_FUNC_A_FUNC_END	
  1772            C        ;---------------------------------------
  1773 02A40      C        MENU_0_SELOGM:
  1774            C      M 	SELOGM_COM
       02A40 0414     1     MOV A, DAM_FLAG 
       02A41 1B08     1     XOR A,@(( 1 << 3 ))
       02A42 0054     1     MOV  DAM_FLAG ,A
  1775            C        	
  1776 02A43 1802 C        	MOV	A,@2
  1777 02A44 0ED4 C        	JBS	DAM_FLAG,3
  1778 02A45 1801 C        	MOV	A,@1
  1779 02A46 0071 C        	MOV	B1_MSG_N,A
  1780            C        ;-
  1781            C      M 	PAGE	#(VGA)
       02A47 1E8C     1     PAGE ( VGA / 1024 ),
  1782 02A48 111E C        	CALL	VGABLANKNUM2
  1783 02A49 1127 C        	CALL	VGABLANKCHAR
  1784            C        	
  1785 02A4A 1883 C        	MOV	A,@(STYLE_CENTER)
  1786 02A4B 1026 C        	CALL	VGACHAR
  1787 02A4C 1801 C        	MOV	A,@1		;ANSWER
  1788 02A4D 114D C        	CALL	VGASTRING
  1789 02A4E 1800 C        	MOV	A,@(CH_BLANK)
  1790 02A4F 1026 C        	CALL	VGACHAR
  1791 02A50 1821 C        	MOV	A,@(CH_A)
  1792 02A51 1026 C        	CALL	VGACHAR
  1793 02A52 0431 C        	MOV	A,B1_MSG_N	;1/2
  1794 02A53 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
  1795 02A54 1026 C        	CALL	VGACHAR
  1796 02A55 18FF C        	MOV	A,@(CH_END)
  1797 02A56 1026 C        	CALL	VGACHAR
  1798 02A57 10AB C        	CALL	VGADRAWCHAR
  1799            C        	;PAGE	#($)
  1800            C        
  1801            C        ;-VP into queue
  1802 02A58 183B C        	MOV	A,@VOPID_ANNOUNCEMENT
  1803            C      M 	PAGE	#(VOP_STOR_VP)
       02A59 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
  1804 02A5A 1064 C        	CALL	VOP_STOR_VP
  1805            C        
  1806            C      M 	MOV	TEMP0,@ID_VOP
       02A5B 1804     1     MOV A,@( ID_VOP )
       02A5C 0055     1     MOV  TEMP0 ,A
  1807 02A5D 0431 C        	MOV	A,B1_MSG_N
  1808 02A5E 1F01 C        	ADD	A,@1
  1809 02A5F 0056 C        	MOV	TEMP1,A
  1810 02A60 1067 C        	CALL	STOR_VP
  1811            C        	;PAGE	#($)
  1812            C        ;-DA0ToSpk
  1813            C      M 	LCALL	DAA_SPK
                      2  M  PAGE #( DAA_SPK ),
       02A61 1E83     2     PAGE ( DAA_SPK / 1024 ),
       02A62 11CA     1     CALL ( DAA_SPK % 1024 ),
                      2  M  PAGE #( $ ),
       02A63 1E8A     2     PAGE ( $ / 1024 ),
  1814            C      M 	DAM_SPK_ENABLE
       02A64 0B49     1     BS  _P9 , 5 
  1815            C      M 	MOV	B1_PRO_VAR,@0X0A	
       02A65 180A     1     MOV A,@( 10 )
       02A66 0061     1     MOV  B1_PRO_VAR ,A
  1816            C        
  1817 02A67 140C C        	JMP	MENU_FUNC_A_FUNC_END
  1818            C        ;---------------------------------------
  1819 02A68      C        MENU_0_SELONOFF:
  1820            C      M 	DAM_COM
       02A68 0414     1     MOV A, DAM_FLAG 
       02A69 1B04     1     XOR A,@(( 1 << 2 ))
       02A6A 0054     1     MOV  DAM_FLAG ,A
  1821            C        ;-
  1822 02A6B 1820 C        	MOV	A,@32
  1823 02A6C 0E94 C        	JBS	DAM_FLAG,2
  1824 02A6D 181F C        	MOV	A,@31
  1825 02A6E 0071 C        	MOV	B1_MSG_N,A
  1826            C        
  1827            C      M 	PAGE	#(VGA)
       02A6F 1E8C     1     PAGE ( VGA / 1024 ),
  1828 02A70 111E C        	CALL	VGABLANKNUM2
  1829 02A71 1127 C        	CALL	VGABLANKCHAR
  1830            C        	
  1831 02A72 1883 C        	MOV	A,@(STYLE_CENTER)
  1832 02A73 1026 C        	CALL	VGACHAR
  1833 02A74 1801 C        	MOV	A,@1		;ANSWER
  1834 02A75 114D C        	CALL	VGASTRING
  1835 02A76 1800 C        	MOV	A,@(CH_BLANK)
  1836 02A77 1026 C        	CALL	VGACHAR
  1837 02A78 0431 C        	MOV	A,B1_MSG_N	;ON/OFF
  1838 02A79 114D C        	CALL	VGASTRING
  1839            C        	
  1840 02A7A 18FF C        	MOV	A,@(CH_END)
  1841 02A7B 1026 C        	CALL	VGACHAR
  1842 02A7C 10AB C        	CALL	VGADRAWCHAR
  1843            C      M 	PAGE	#($)
       02A7D 1E8A     1     PAGE ( $ / 1024 ),
  1844            C        	
  1845            C      M 	SEL_OGM1
       02A7E 08D4     1     BC  DAM_FLAG , 3 
  1846 02A7F      C        MENU_0_SELONOFF_1:
  1847            C      M 	LCALL	DAA_SPK
                      2  M  PAGE #( DAA_SPK ),
       02A7F 1E83     2     PAGE ( DAA_SPK / 1024 ),
       02A80 11CA     1     CALL ( DAA_SPK % 1024 ),
                      2  M  PAGE #( $ ),
       02A81 1E8A     2     PAGE ( $ / 1024 ),
  1848            C      M 	DAM_SPK_ENABLE
       02A82 0B49     1     BS  _P9 , 5 
  1849            C        
  1850            C      M 	MOV	B1_PRO_VAR,@0X0A	
       02A83 180A     1     MOV A,@( 10 )
       02A84 0061     1     MOV  B1_PRO_VAR ,A
  1851            C        	
  1852            C        ;-VP into queue
  1853            C      M 	PAGE	#(LBEEP)
       02A85 1E83     1     PAGE ( LBEEP / 1024 ),
  1854 02A86 108C C        	CALL	LBEEP
  1855 02A87 183A C        	MOV	A,@VOPID_ANSMACHINE
  1856            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       02A88 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       02A89 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       02A8A 1E8A     2     PAGE ( $ / 1024 ),
  1857            C        	
  1858            C      M 	JPB	DAM_FLAG,2,MENU_FUNC_0_SELOFF
       02A8B 0C94     1     JBC  DAM_FLAG , 2 
       02A8C 169C     1     JMP  MENU_FUNC_0_SELOFF ,
  1859            C        	
  1860 02A8D 183E C        	MOV	A,@VOPID_ON
  1861            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       02A8E 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       02A8F 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       02A90 1E8A     2     PAGE ( $ / 1024 ),
  1862            C        ;---	
  1863 02A91 1803 C        	MOV	A,@VOPID_TWO
  1864 02A92 0ED4 C        	JBS	DAM_FLAG,3	;Announcement one/two
  1865 02A93 1802 C        	MOV	A,@VOPID_ONE
  1866 02A94 0072 C        	MOV	B1_MSG_ID,A
  1867            C        
  1868 02A95 183B C        	MOV	A,@VOPID_ANNOUNCEMENT
  1869            C      M 	PAGE	#(VOP_STOR_VP)
       02A96 1E83     1     PAGE ( VOP_STOR_VP / 1024 ),
  1870 02A97 1064 C        	CALL	VOP_STOR_VP
  1871 02A98 0432 C        	MOV	A,B1_MSG_ID
  1872 02A99 1064 C        	CALL	VOP_STOR_VP
  1873            C      M 	PAGE	#($)
       02A9A 1E8A     1     PAGE ( $ / 1024 ),
  1874            C        
  1875 02A9B 140C C        	JMP	MENU_FUNC_A_FUNC_END
  1876            C        ;-----------------------------
  1877 02A9C      C        MENU_FUNC_0_SELOFF:
  1878            C        
  1879 02A9C 183F C        	MOV	A,@VOPID_OFF
  1880            C      M 	LCALL	VOP_STOR_VP
                      2  M  PAGE #( VOP_STOR_VP ),
       02A9D 1E83     2     PAGE ( VOP_STOR_VP / 1024 ),
       02A9E 1064     1     CALL ( VOP_STOR_VP % 1024 ),
                      2  M  PAGE #( $ ),
       02A9F 1E8A     2     PAGE ( $ / 1024 ),
  1881            C        
  1882 02AA0 140C C        	JMP	MENU_FUNC_A_FUNC_END
  1883            C        ;-------------------------------------------------------------------------------
  1884            C        ;	SET_DSPRTC
  1885            C        ;	
  1886            C        ;	input : 
  1887            C        ;	output: 
  1888            C        ;
  1889            C        ;Note : set bank 0 before invoke this subroutine
  1890            C        ;
  1891            C        ;-------------------------------------------------------------------------------
  1892 02AA1      C        SET_DSPRTC:
  1893            C        	;BANK	0
  1894 02AA1 0432 C        	MOV	A,B0_SEC_REG
  1895            C      M 	JPNZ	SET_DSPRTC_END	;The condition 
       02AA2 0E83     1     JBS  _STATUS , Z 
       02AA3 16B4     1     JMP  SET_DSPRTC_END ,
  1896            C        	
  1897            C      M 	PAGE	#(SET_SEC)
       02AA4 1E83     1     PAGE ( SET_SEC / 1024 ),
  1898 02AA5 0080 C        	CLRA
  1899 02AA6 12B8 C        	CALL	SET_SEC		;clear the second
  1900 02AA7 0437 C        	MOV	A,B0_YEAR_REG
  1901 02AA8 12BC C        	CALL	SET_YEAR
  1902 02AA9 0436 C        	MOV	A,B0_MON_REG
  1903 02AAA 12C0 C        	CALL	SET_MON
  1904 02AAB 0435 C        	MOV	A,B0_DAY_REG
  1905 02AAC 12C4 C        	CALL	SET_DAY
  1906 02AAD 0438 C        	MOV	A,B0_WEEK_REG
  1907 02AAE 12AC C        	CALL	SET_WEEK
  1908 02AAF 0434 C        	MOV	A,B0_HOUR_REG
  1909 02AB0 12B0 C        	CALL	SET_HOUR
  1910 02AB1 0433 C        	MOV	A,B0_MIN_REG
  1911 02AB2 12B4 C        	CALL	SET_MIN
  1912            C      M 	PAGE	#($)	;???????????????????????????????????????????????????????
       02AB3 1E8A     1     PAGE ( $ / 1024 ),
  1913            C        	
  1914 02AB4      C        SET_DSPRTC_END:	
  1915 02AB4 0012 C        	RET
  1916            C        ;-------------------------------------------------------------------------------	
  1917            C        
   625                     INCLUDE		"f_book.dt"
     1            C        ORG	(10<<10)|(3<<8)
     2            C        ;-------------------------------------------------------------------------------
     3 02B00      C        BOOK_FUNC:
     4            C      M 	BANK	1
       02B00 0B84     1     BS  _RSR , 6 
       02B01 09C4     1     BC  _RSR , 7 
     5            C        	
     6 02B02 0421 C        	MOV	A,B1_PRO_VAR
     7 02B03 1A07 C        	AND	A,@0X07
     8            C      M 	MTBL
       02B04 0020     1     TBL 
             2B04     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
     9 02B05 170F C        	JMP	BOOK_FUNC_0	;0 - Enter
    10 02B06 1760 C        	JMP	BOOK_FUNC_1	;1 - SEARCH/ADD select
    11 02B07 17C4 C        	JMP	BOOK_FUNC_2	;2 - SEARCH
    12 02B08 17C6 C        	JMP	BOOK_FUNC_3	;3 - ADD/edit number
    13 02B09 17C8 C        	JMP	BOOK_FUNC_4	;4 - ADD/edit name
    14 02B0A 170D C        	JMP	BOOK_FUNC_END	;5 - reserved
    15 02B0B 170D C        	JMP	BOOK_FUNC_END	;6 - reserved
    16 02B0C 170D C        	JMP	BOOK_FUNC_END	;7 - reserved
    17            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    18            C        ;return
    19 02B0D      C        BOOK_FUNC_END:	
    20            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       02B0D 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       02B0E 15AC     1     JMP ( MAIN_LOOP % 1024 ),
    21            C        ;-------------------------------------------------------------------------------
    22            C        ;	B1_PRO_VAR(2..0) - status
    23            C        ;	B1_PRO_VAR(bit4) - flag EDIT/ADD(Need delete old one or not)
    24            C        ;	B1_PRO_VAR(bit5) - DelAll-flag
    25            C        ;	B1_PRO_VAR(bit6) - DelCur-flag
    26            C        ;	B1_PRO_VAR(bit7) - offset-flag(5s/2 time out flag use to edit name,then goto next site)
    27            C        ;-------------------
    28            C        ;在编辑状态:
    29            C        ;	B1_MSG_ID 表示正在编辑的条目号
    30            C        ;	B1_CID_T表示正在编辑的条目的长度
    31            C        ;在添加状态:
    32            C        ;	B1_MSG_ID = 0 表示正在进行的是添加操作
    33            C        ;	B1_CID_T表示正在编辑的条目的长度
    34            C        ;-------------------------------------------------------------------------------
    35 02B0F      C        BOOK_FUNC_0:
    36            C        
    37 02B0F 18CC C        	MOV	A,@CMSG_BOOK
    38 02B10 0120 C        	SUB	A,B1_MSG
    39            C      M 	JPZ	BOOK_FUNC_0_BOOK
       02B11 0C83     1     JBC  _STATUS , Z 
       02B12 1718     1     JMP  BOOK_FUNC_0_BOOK ,
    40            C        		
    41 02B13 18A4 C        	MOV 	A,@CCID_EDIT
    42 02B14 0120 C        	SUB 	A,B1_MSG
    43            C      M 	JPZ 	BOOK_FUNC_0_EDITCID
       02B15 0C83     1     JBC  _STATUS , Z 
       02B16 1730     1     JMP  BOOK_FUNC_0_EDITCID ,
    44            C        		
    45 02B17 170D C        	JMP	BOOK_FUNC_END
    46            C        ;---------------------------------------
    47 02B18      C        BOOK_FUNC_0_BOOK:
    48            C        	
    49 02B18 1801 C        	MOV	A,@1		
    50 02B19 0061 C        	MOV	B1_PRO_VAR,A	;
    51 02B1A 00F1 C        	CLR	B1_MSG_N	;function value
    52 02B1B      C        BOOK_FUNC_0_BOOK_1:
    53 02B1B 00E2 C        	CLR	B1_PRO_VAR1
    54 02B1C 1808 C        	MOV	A,@CTMR500MS
    55            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       02B1D 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       02B1E 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       02B1F 1E8A     2     PAGE ( $ / 1024 ),
    56            C        	
    57 02B20      C        BOOK_FUNC_0_BOOK_2:		;Display
    58            C        
    59            C      M 	PAGE	#(VGA)
       02B20 1E8C     1     PAGE ( VGA / 1024 ),
    60 02B21 111E C        	CALL	VGABLANKNUM2
    61 02B22 1127 C        	CALL	VGABLANKCHAR
    62            C        ;---------
    63 02B23 1883 C        	MOV	A,@(STYLE_CENTER)
    64 02B24 1026 C        	CALL	VGACHAR
    65            C        	
    66 02B25 1822 C        	MOV	A,@34		;SEARCH
    67 02B26 114D C        	CALL	VGASTRING
    68 02B27 1800 C        	MOV	A,@(CH_BLANK)
    69 02B28 1026 C        	CALL	VGACHAR
    70 02B29 1823 C        	MOV	A,@35		;ADD 
    71 02B2A 114D C        	CALL	VGASTRING
    72            C        ;-
    73 02B2B 18FF C        	MOV	A,@(CH_END)
    74 02B2C 1026 C        	CALL	VGACHAR
    75 02B2D 10AB C        	CALL	VGADRAWCHAR
    76            C      M 	PAGE	#($)
       02B2E 1E8A     1     PAGE ( $ / 1024 ),
    77            C        	
    78 02B2F 170D C        	JMP	BOOK_FUNC_END
    79            C        ;---------------------------------------
    80 02B30      C        BOOK_FUNC_0_EDITCID:
    81            C        ;---Clean Icon display
    82            C      M 	PAGE	#(VGA)
       02B30 1E8C     1     PAGE ( VGA / 1024 ),
    83 02B31 18F0 C        	MOV	A,@~((1<<3)|(1<<2)|(1<<1)|(1<<0))	;"CALL","NEW","RET","MSG"
    84 02B32 1010 C        	CALL	CLRVGASTAMP2
    85            C        ;---Clean id display
    86 02B33 18C8 C        	MOV	A,@ID_BLANK
    87 02B34 1374 C        	CALL	DISP_ID
    88            C        
    89 02B35 1811 C        	MOV	A,@GROUP_BOOK
    90            C      M 	PAGE	#(SET_GROUP)
       02B36 1E83     1     PAGE ( SET_GROUP / 1024 ),
    91 02B37 1241 C        	CALL	SET_GROUP
    92            C        	
    93 02B38 00F2 C        	CLR	B1_MSG_ID	;ADD(Edit an CID/..)
    94 02B39      C        BOOK_FUNC_0_EDIT:
    95            C        ;---the tel-num display in the second line
    96            C      M 	LCALL	VGABLANKNUM2
                      2  M  PAGE #( VGABLANKNUM2 ),
       02B39 1E8C     2     PAGE ( VGABLANKNUM2 / 1024 ),
       02B3A 111E     1     CALL ( VGABLANKNUM2 % 1024 ),
                      2  M  PAGE #( $ ),
       02B3B 1E8A     2     PAGE ( $ / 1024 ),
    97            C        
    98            C      M 	BLOCK	1
       02B3C 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02B3D 000A     1     IOW  _IOCA ,
    99            C        
   100            C      M 	MOV	_RC,@NUM_FLAG
       02B3E 1862     1     MOV A,@( NUM_FLAG )
       02B3F 004C     1     MOV  _RC ,A
   101 02B40 040D C        	MOV	A,_RD			;count
   102 02B41 1A3F C        	AND	A,@0X3F			;Len bigger than 15 ?
   103 02B42 005E C        	MOV	COUNT,A
   104 02B43 1D0F C        	SUB	A,@LENGTH2NDL
   105            C      M 	JPC	BOOK_FUNC_0_BOOKEDIT_2
       02B44 0C03     1     JBC  _STATUS , C 
       02B45 1748     1     JMP  BOOK_FUNC_0_BOOKEDIT_2 ,
   106            C        	
   107            C      M 	MOV	COUNT,@15
       02B46 180F     1     MOV A,@( 15 )
       02B47 005E     1     MOV  COUNT ,A
   108 02B48      C        BOOK_FUNC_0_BOOKEDIT_2:
   109            C      M 	MOV	BASE_ADDR,@0X10		;base
       02B48 1810     1     MOV A,@( 16 )
       02B49 005F     1     MOV  BASE_ADDR ,A
   110            C      M 	MOV	OFFSET_S,@NUM_START	;source
       02B4A 1868     1     MOV A,@( NUM_START )
       02B4B 005C     1     MOV  OFFSET_S ,A
   111            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination
       02B4C 188D     1     MOV A,@( LCD_2NDLINE )
       02B4D 005D     1     MOV  OFFSET_D ,A
   112            C      M 	PAGE	#(COPY_DATA)
       02B4E 1E82     1     PAGE ( COPY_DATA / 1024 ),
   113 02B4F 1085 C        	CALL	COPY_DATA
   114            C        	
   115 02B50 1808 C        	MOV	A,@CTMR500MS
   116            C      M 	PAGE	#(SET_TIMER)
       02B51 1E8D     1     PAGE ( SET_TIMER / 1024 ),
   117 02B52 1359 C        	CALL	SET_TIMER
   118            C      M 	PAGE	#($)
       02B53 1E8A     1     PAGE ( $ / 1024 ),
   119 02B54 00E2 C        	CLR	B1_PRO_VAR1
   120            C        
   121            C        ;---进入编辑状态
   122            C      M 	MOV	B1_PRO_VAR,@0X03
       02B55 1803     1     MOV A,@( 3 )
       02B56 0061     1     MOV  B1_PRO_VAR ,A
   123 02B57 00D1 C        	CLR	CURSOR	
   124            C      M 	BLOCK	1
       02B58 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02B59 000A     1     IOW  _IOCA ,
   125            C      M 	MOV	_RC,@NUM_FLAG
       02B5A 1862     1     MOV A,@( NUM_FLAG )
       02B5B 004C     1     MOV  _RC ,A
   126 02B5C 040D C        	MOV	A,_RD
   127 02B5D 1A3F C        	AND	A,@0X3F
   128 02B5E 006E C        	MOV	B1_CID_T,A
   129            C        
   130 02B5F 170D C        	JMP	BOOK_FUNC_END
   131            C        ;-------------------------------------------------------------------------------
   132 02B60      C        BOOK_FUNC_1:
   133 02B60 1880 C        	MOV 	A,@CMSG_MKEY
   134 02B61 0120 C        	SUB 	A,B1_MSG
   135            C      M 	JPZ 	BOOK_FUNC_1_MKEY
       02B62 0C83     1     JBC  _STATUS , Z 
       02B63 1785     1     JMP  BOOK_FUNC_1_MKEY ,
   136            C        	
   137 02B64 1898 C        	MOV 	A,@CMSG_TMR
   138 02B65 0120 C        	SUB 	A,B1_MSG
   139            C      M 	JPZ 	BOOK_FUNC_1_TMR
       02B66 0C83     1     JBC  _STATUS , Z 
       02B67 1769     1     JMP  BOOK_FUNC_1_TMR ,
   140            C        
   141 02B68 170D C        	JMP	BOOK_FUNC_END
   142            C        ;---------------------------------------
   143 02B69      C        BOOK_FUNC_1_TMR:
   144 02B69 0562 C        	INC	B1_PRO_VAR1
   145            C        	
   146 02B6A 0422 C        	MOV	A,B1_PRO_VAR1
   147 02B6B 1D14 C        	SUB	A,@20
   148            C      M 	JPZ	BOOK_FUNC_1_TMROUT
       02B6C 0C83     1     JBC  _STATUS , Z 
       02B6D 17A7     1     JMP  BOOK_FUNC_1_TMROUT ,
   149            C        	
   150 02B6E 1808 C        	MOV	A,@CTMR500MS
   151            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       02B6F 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       02B70 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       02B71 1E8A     2     PAGE ( $ / 1024 ),
   152            C        
   153            C      M 	REFURBISH_3RDL
                      2  M  BLOCK  0 
       02B72 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02B73 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02B74 1880     2     MOV A,@( LCD_CTRL )
       02B75 004C     2     MOV  _RC ,A
       02B76 0BCD     1     BS  _RD , 7 
   154            C        
   155            C      M 	JPB	B1_PRO_VAR1,0,BOOK_FUNC_0_BOOK_2
       02B77 0C22     1     JBC  B1_PRO_VAR1 , 0 
       02B78 1720     1     JMP  BOOK_FUNC_0_BOOK_2 ,
   156            C        ;BOOK_FUNC_1_TMR_OFF:
   157 02B79 1882 C        	MOV	A,@(STYLE_RIGHT)
   158 02B7A 0E31 C        	JBS	B1_MSG_N,0
   159 02B7B 1881 C        	MOV	A,@(STYLE_LEFT)
   160            C        
   161            C      M 	PAGE	#(VGA)
       02B7C 1E8C     1     PAGE ( VGA / 1024 ),
   162 02B7D 1026 C        	CALL	VGACHAR
   163 02B7E 1821 C        	MOV	A,@33		;BLANK(SEARCH/ADD)
   164 02B7F 114D C        	CALL	VGASTRING
   165 02B80 18FF C        	MOV	A,@(CH_END)
   166 02B81 1026 C        	CALL	VGACHAR
   167 02B82 10AB C        	CALL	VGADRAWCHAR
   168            C      M 	PAGE	#($)
       02B83 1E8A     1     PAGE ( $ / 1024 ),
   169            C        
   170 02B84 170D C        	JMP	BOOK_FUNC_END
   171            C        ;---------------------------------------
   172 02B85      C        BOOK_FUNC_1_MKEY:
   173            C        
   174 02B85 1814 C        	MOV	A,@CKEY_PBK
   175            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02B86 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02B87 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02B88 1E8A     2     PAGE ( $ / 1024 ),
   176            C      M 	JPNC	BOOK_FUNC_1_MKEY_BOOK
       02B89 0E03     1     JBS  _STATUS , C 
       02B8A 179E     1     JMP  BOOK_FUNC_1_MKEY_BOOK ,
   177            C        	
   178 02B8B 1821 C        	MOV	A,@CKEY_UP
   179            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02B8C 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02B8D 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02B8E 1E8A     2     PAGE ( $ / 1024 ),
   180            C      M 	JPNC	BOOK_FUNC_1_MKEY_UP
       02B8F 0E03     1     JBS  _STATUS , C 
       02B90 17BA     1     JMP  BOOK_FUNC_1_MKEY_UP ,
   181 02B91 1822 C        	MOV	A,@CKEY_DWN
   182            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02B92 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02B93 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02B94 1E8A     2     PAGE ( $ / 1024 ),
   183            C      M 	JPNC	BOOK_FUNC_1_MKEY_DWN
       02B95 0E03     1     JBS  _STATUS , C 
       02B96 17B0     1     JMP  BOOK_FUNC_1_MKEY_DWN ,
   184            C        
   185 02B97 1813 C        	MOV	A,@CKEY_STP
   186            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02B98 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02B99 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02B9A 1E8A     2     PAGE ( $ / 1024 ),
   187            C      M 	JPNC	BOOK_FUNC_1_MKEY_STP
       02B9B 0E03     1     JBS  _STATUS , C 
       02B9C 17A7     1     JMP  BOOK_FUNC_1_MKEY_STP ,
   188            C        	
   189 02B9D 170D C        	JMP	BOOK_FUNC_END
   190            C        ;---------------------------------------
   191 02B9E      C        BOOK_FUNC_1_MKEY_BOOK:
   192 02B9E 0431 C        	MOV	A,B1_MSG_N	;(0..1)
   193 02B9F 1A01 C        	AND	A,@0x1
   194 02BA0 1F02 C        	ADD	A,@2
   195 02BA1 0061 C        	MOV	B1_PRO_VAR,A	;(2..3)
   196            C        
   197 02BA2 1890 C        	MOV	A,@CMSG_INIT
   198            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       02BA3 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       02BA4 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       02BA5 1E8A     2     PAGE ( $ / 1024 ),
   199            C        
   200 02BA6 170D C        	JMP	BOOK_FUNC_END
   201            C        ;---------------------------------------
   202 02BA7      C        BOOK_FUNC_1_MKEY_STP:
   203 02BA7      C        BOOK_FUNC_1_TMROUT:
   204            C      M 	LCALL	CLR_PRO_STACK
                      2  M  PAGE #( CLR_PRO_STACK ),
       02BA7 1E8D     2     PAGE ( CLR_PRO_STACK / 1024 ),
       02BA8 1352     1     CALL ( CLR_PRO_STACK % 1024 ),
                      2  M  PAGE #( $ ),
       02BA9 1E8A     2     PAGE ( $ / 1024 ),
   205 02BAA 00E1 C        	CLR	B1_PRO_VAR
   206            C        	
   207 02BAB 1890 C        	MOV	A,@CMSG_INIT
   208            C      M 	LCALL	STOR_MSG
                      2  M  PAGE #( STOR_MSG ),
       02BAC 1E8D     2     PAGE ( STOR_MSG / 1024 ),
       02BAD 1308     1     CALL ( STOR_MSG % 1024 ),
                      2  M  PAGE #( $ ),
       02BAE 1E8A     2     PAGE ( $ / 1024 ),
   209            C        
   210 02BAF 170D C        	JMP	BOOK_FUNC_END
   211            C        
   212            C        ;---------------------------------------
   213 02BB0      C        BOOK_FUNC_1_MKEY_DWN:
   214            C      M 	MOV	TEMP1,@0
       02BB0 1800     1     MOV A,@( 0 )
       02BB1 0056     1     MOV  TEMP1 ,A
   215            C      M 	MOV	TEMP2,@1
       02BB2 1801     1     MOV A,@( 1 )
       02BB3 0057     1     MOV  TEMP2 ,A
   216            C        	
   217 02BB4 0431 C        	MOV	A,B1_MSG_N
   218            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       02BB5 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       02BB6 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       02BB7 1E8A     2     PAGE ( $ / 1024 ),
   219 02BB8 0071 C        	MOV	B1_MSG_N,A
   220            C        	
   221 02BB9 171B C        	JMP	BOOK_FUNC_0_BOOK_1
   222            C        ;---------------------------------------
   223 02BBA      C        BOOK_FUNC_1_MKEY_UP:
   224            C      M 	MOV	TEMP1,@0	;min
       02BBA 1800     1     MOV A,@( 0 )
       02BBB 0056     1     MOV  TEMP1 ,A
   225            C      M 	MOV	TEMP2,@1	;max
       02BBC 1801     1     MOV A,@( 1 )
       02BBD 0057     1     MOV  TEMP2 ,A
   226            C        	
   227 02BBE 0431 C        	MOV	A,B1_MSG_N
   228            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       02BBF 1E82     2     PAGE ( VALUE_INC / 1024 ),
       02BC0 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       02BC1 1E8A     2     PAGE ( $ / 1024 ),
   229 02BC2 0071 C        	MOV	B1_MSG_N,A
   230            C        
   231 02BC3 171B C        	JMP	BOOK_FUNC_0_BOOK_1
   232            C        ;-------------------------------------------------------------------------------
   233 02BC4      C        BOOK_FUNC_2:
   234            C      M 	LJMP	BOOK_FUNC_2_FUNC
                      2  M  PAGE #( BOOK_FUNC_2_FUNC ),
       02BC4 1E8B     2     PAGE ( BOOK_FUNC_2_FUNC / 1024 ),
       02BC5 1400     1     JMP ( BOOK_FUNC_2_FUNC % 1024 ),
   235 02BC6      C        BOOK_FUNC_3:
   236            C      M 	LJMP	BOOK_FUNC_3_FUNC
                      2  M  PAGE #( BOOK_FUNC_3_FUNC ),
       02BC6 1E8B     2     PAGE ( BOOK_FUNC_3_FUNC / 1024 ),
       02BC7 158C     1     JMP ( BOOK_FUNC_3_FUNC % 1024 ),
   237 02BC8      C        BOOK_FUNC_4:
   238            C      M 	LJMP	BOOK_FUNC_4_FUNC
                      2  M  PAGE #( BOOK_FUNC_4_FUNC ),
       02BC8 1E8B     2     PAGE ( BOOK_FUNC_4_FUNC / 1024 ),
       02BC9 169E     1     JMP ( BOOK_FUNC_4_FUNC % 1024 ),
   239            C        ;-------------------------------------------------------------------------------
   240            C        ORG	(11<<10)
   241            C        ;-------------------------------------------------------------------------------
   242 02C00      C        BOOK_FUNC_2_FUNC:			;SEARCH
   243 02C00 1890 C        	MOV	A,@CMSG_INIT
   244 02C01 0120 C        	SUB	A,B1_MSG
   245            C      M 	JPZ	BOOK_FUNC_2_INIT
       02C02 0C83     1     JBC  _STATUS , Z 
       02C03 141E     1     JMP  BOOK_FUNC_2_INIT ,
   246            C        	
   247 02C04 1880 C        	MOV 	A,@CMSG_MKEY
   248 02C05 0120 C        	SUB 	A,B1_MSG
   249            C      M 	JPZ 	BOOK_FUNC_2_MKEY
       02C06 0C83     1     JBC  _STATUS , Z 
       02C07 148F     1     JMP  BOOK_FUNC_2_MKEY ,
   250            C        	
   251 02C08 1882 C        	MOV 	A,@CMSG_CKEY
   252 02C09 0120 C        	SUB 	A,B1_MSG
   253            C      M 	JPZ 	BOOK_FUNC_2_CKEY
       02C0A 0C83     1     JBC  _STATUS , Z 
       02C0B 14B8     1     JMP  BOOK_FUNC_2_CKEY ,
   254            C        
   255 02C0C 1881 C        	MOV 	A,@CMSG_BKEY
   256 02C0D 0120 C        	SUB 	A,B1_MSG
   257            C      M 	JPZ 	BOOK_FUNC_2_BKEY
       02C0E 0C83     1     JBC  _STATUS , Z 
       02C0F 14BF     1     JMP  BOOK_FUNC_2_BKEY ,
   258            C        	
   259 02C10 1898 C        	MOV 	A,@CMSG_TMR
   260 02C11 0120 C        	SUB 	A,B1_MSG
   261            C      M 	JPZ 	BOOK_FUNC_2_TMR
       02C12 0C83     1     JBC  _STATUS , Z 
       02C13 1549     1     JMP  BOOK_FUNC_2_TMR ,
   262            C        
   263 02C14      C        BOOK_FUNC_2_FUNC_END:
   264 02C14      C        BOOK_FUNC_3_FUNC_END:
   265 02C14      C        BOOK_FUNC_4_FUNC_END:
   266            C      M 	LJMP	MAIN_LOOP
                      2  M  PAGE #( MAIN_LOOP ),
       02C14 1E80     2     PAGE ( MAIN_LOOP / 1024 ),
       02C15 15AC     1     JMP ( MAIN_LOOP % 1024 ),
   267            C        ;---------------------------------------
   268 02C16      C        BOOK_FUNC_2_TMROUT:
   269 02C16      C        BOOK_FUNC_3_TMROUT:
   270 02C16      C        BOOK_FUNC_4_TMROUT:
   271            C        	
   272 02C16 1890 C        	MOV	A,@CMSG_INIT
   273            C      M 	PAGE	#(STOR_MSG)
       02C17 1E8D     1     PAGE ( STOR_MSG / 1024 ),
   274 02C18 1308 C        	CALL	STOR_MSG
   275            C        
   276            C      M 	LCALL	CLR_PRO_STACK
                      2  M  PAGE #( CLR_PRO_STACK ),
       02C19 1E8D     2     PAGE ( CLR_PRO_STACK / 1024 ),
       02C1A 1352     1     CALL ( CLR_PRO_STACK % 1024 ),
                      2  M  PAGE #( $ ),
       02C1B 1E8B     2     PAGE ( $ / 1024 ),
   277 02C1C 00E1 C        	CLR	B1_PRO_VAR
   278            C        	
   279 02C1D 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   280            C        ;---------------------------------------
   281 02C1E      C        BOOK_FUNC_2_INIT:
   282 02C1E 1810 C        	MOV	A,@CTMR1S
   283            C      M 	PAGE	#(SET_TIMER)
       02C1F 1E8D     1     PAGE ( SET_TIMER / 1024 ),
   284 02C20 1359 C        	CALL	SET_TIMER
   285 02C21 00E2 C        	CLR	B1_PRO_VAR1
   286 02C22 00F2 C        	CLR	B1_MSG_ID
   287            C        	
   288 02C23 1811 C        	MOV	A,@GROUP_BOOK
   289            C      M 	PAGE	#(SET_GROUP)
       02C24 1E83     1     PAGE ( SET_GROUP / 1024 ),
   290 02C25 1241 C        	CALL	SET_GROUP
   291            C      M 	PAGE	#(GET_TELT)
       02C26 1E83     1     PAGE ( GET_TELT / 1024 ),
   292 02C27 1246 C        	CALL	GET_TELT
   293            C      M 	PAGE	#($)
       02C28 1E8B     1     PAGE ( $ / 1024 ),
   294 02C29 0415 C        	MOV	A,TEMP0
   295 02C2A 006E C        	MOV	B1_CID_T,A	;Total tel record
   296            C      M 	JPZ	BOOK_FUNC_2_INIT_EMPTY
       02C2B 0C83     1     JBC  _STATUS , Z 
       02C2C 1484     1     JMP  BOOK_FUNC_2_INIT_EMPTY ,
   297            C        
   298            C      M 	MOV	B1_MSG_ID,@1
       02C2D 1801     1     MOV A,@( 1 )
       02C2E 0072     1     MOV  B1_MSG_ID ,A
   299 02C2F      C        BOOK_FUNC_2_BOOKLOOKUP:	
   300            C        ;---translate the table-index to DSP-index
   301 02C2F 0432 C        	MOV	A,B1_MSG_ID
   302            C      M 	PAGE	#(TRSLATE_TABTODSP)
       02C30 1E8E     1     PAGE ( TRSLATE_TABTODSP / 1024 ),
   303 02C31 12C8 C        	CALL	TRSLATE_TABTODSP
   304 02C32 0078 C        	MOV	B1_YEAR_REG,A		;TEL-ID
   305            C        ;---Read data
   306 02C33 1811 C        	MOV	A,@GROUP_BOOK
   307            C      M 	PAGE	#(SET_GROUP)
       02C34 1E83     1     PAGE ( SET_GROUP / 1024 ),
   308 02C35 1241 C        	CALL	SET_GROUP
   309            C        
   310            C      M 	MOV	OFFSET_D,@DATA_ZONE_START
       02C36 1860     1     MOV A,@( DATA_ZONE_START )
       02C37 005D     1     MOV  OFFSET_D ,A
   311 02C38      C        BOOK_FUNC_2_BOOKREAD_LOOP:
   312 02C38 0438 C        	MOV	A,B1_YEAR_REG
   313            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       02C39 1E83     2     PAGE ( DAT_READ / 1024 ),
       02C3A 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       02C3B 1E8B     2     PAGE ( $ / 1024 ),
   314            C        	
   315            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       02C3C 041D     1     MOV A, OFFSET_D 
       02C3D 004C     1     MOV  _RC ,A
   316            C      M 	MOV	_RD,TEMP0	;the data
       02C3E 0415     1     MOV A, TEMP0 
       02C3F 004D     1     MOV  _RD ,A
   317            C        	
   318 02C40 055D C        	INC	OFFSET_D	;next address
   319            C        	
   320 02C41 0416 C        	MOV	A,TEMP1		;Error code
   321            C      M 	JPZ	BOOK_FUNC_2_BOOKREAD_LOOP
       02C42 0C83     1     JBC  _STATUS , Z 
       02C43 1438     1     JMP  BOOK_FUNC_2_BOOKREAD_LOOP ,
   322            C      M 	PAGE	#(DAT_READ_STOP)
       02C44 1E83     1     PAGE ( DAT_READ_STOP / 1024 ),
   323 02C45 125B C        	CALL	DAT_READ_STOP
   324 02C46      C        BOOK_FUNC_2_BOOKDISP:
   325            C        ;---LCD	blank	
   326            C      M 	PAGE	#(VGA)
       02C46 1E8C     1     PAGE ( VGA / 1024 ),
   327 02C47 111E C        	CALL	VGABLANKNUM2
   328 02C48 1127 C        	CALL	VGABLANKCHAR
   329            C        ;---First line	
   330 02C49 0432 C        	MOV	A,B1_MSG_ID
   331            C      M 	PAGE	#(DISP_ID)
       02C4A 1E8C     1     PAGE ( DISP_ID / 1024 ),
   332 02C4B 1374 C        	CALL	DISP_ID
   333            C      M 	PAGE	#($)
       02C4C 1E8B     1     PAGE ( $ / 1024 ),
   334            C        
   335 02C4D      C        BOOK_FUNC_2_BOOKDISP_1:
   336            C        ;---将数据复制到显示区
   337            C        ;---号码在第二行显示
   338            C      M 	BLOCK	1
       02C4D 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02C4E 000A     1     IOW  _IOCA ,
   339            C        	
   340            C      M 	MOV	_RC,@NUM_FLAG
       02C4F 1862     1     MOV A,@( NUM_FLAG )
       02C50 004C     1     MOV  _RC ,A
   341 02C51 040D C        	MOV	A,_RD			;count
   342 02C52 1A3F C        	AND	A,@0X3F			;Can't bigger than 15
   343 02C53 005E C        	MOV	COUNT,A
   344            C        	
   345 02C54 1D0F C        	SUB	A,@LENGTH2NDL
   346            C      M 	JPC	BOOK_FUNC_2_BOOKDISP_2
       02C55 0C03     1     JBC  _STATUS , C 
       02C56 1459     1     JMP  BOOK_FUNC_2_BOOKDISP_2 ,
   347            C        	
   348            C      M 	MOV	COUNT,@14
       02C57 180E     1     MOV A,@( 14 )
       02C58 005E     1     MOV  COUNT ,A
   349 02C59      C        BOOK_FUNC_2_BOOKDISP_2:
   350            C      M 	MOV	BASE_ADDR,@0X10		;base
       02C59 1810     1     MOV A,@( 16 )
       02C5A 005F     1     MOV  BASE_ADDR ,A
   351            C      M 	MOV	OFFSET_S,@NUM_START	;source
       02C5B 1868     1     MOV A,@( NUM_START )
       02C5C 005C     1     MOV  OFFSET_S ,A
   352            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination
       02C5D 188D     1     MOV A,@( LCD_2NDLINE )
       02C5E 005D     1     MOV  OFFSET_D ,A
   353            C      M 	LCALL	COPY_DATA
                      2  M  PAGE #( COPY_DATA ),
       02C5F 1E82     2     PAGE ( COPY_DATA / 1024 ),
       02C60 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02C61 1E8B     2     PAGE ( $ / 1024 ),
   354            C        	
   355            C      M 	MOV	_RC,@NUM_FLAG
       02C62 1862     1     MOV A,@( NUM_FLAG )
       02C63 004C     1     MOV  _RC ,A
   356 02C64 040D C        	MOV	A,_RD			;count
   357 02C65 1A3F C        	AND	A,@0X3F			;Can't bigger than 15
   358 02C66 1D0F C        	SUB	A,@LENGTH2NDL
   359            C      M 	JPC	BOOK_FUNC_2_BOOKDISP_2_1
       02C67 0C03     1     JBC  _STATUS , C 
       02C68 146F     1     JMP  BOOK_FUNC_2_BOOKDISP_2_1 ,
   360            C        ;---more than 15,display it in two time	
   361            C      M 	BLOCK	0
       02C69 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02C6A 000A     1     IOW  _IOCA ,
   362            C      M 	MOV	_RC,@(LCD_2NDLINE+LENGTH2NDL-1)
       02C6B 189B     1     MOV A,@((( LCD_2NDLINE + LENGTH2NDL )- 1 ))
       02C6C 004C     1     MOV  _RC ,A
   363            C      M 	MOV	_RD,@NUM_AMPERE
       02C6D 180D     1     MOV A,@( NUM_AMPERE )
       02C6E 004D     1     MOV  _RD ,A
   364            C        	
   365 02C6F      C        BOOK_FUNC_2_BOOKDISP_2_1:
   366            C        ;---姓名在第三行显示
   367            C      M 	BLOCK	1	
       02C6F 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02C70 000A     1     IOW  _IOCA ,
   368            C      M 	MOV	_RC,@NAME_FLAG
       02C71 1863     1     MOV A,@( NAME_FLAG )
       02C72 004C     1     MOV  _RC ,A
   369 02C73 040D C        	MOV	A,_RD			;count
   370 02C74 1A0F C        	AND	A,@0X0F			;Can't bigger than 15
   371 02C75 005E C        	MOV	COUNT,A
   372            C        	
   373            C      M 	MOV	OFFSET_S,@NAME_START		;
       02C76 1888     1     MOV A,@( NAME_START )
       02C77 005C     1     MOV  OFFSET_S ,A
   374            C      M 	MOV	OFFSET_D,@LCD_3RDLINE
       02C78 189C     1     MOV A,@( LCD_3RDLINE )
       02C79 005D     1     MOV  OFFSET_D ,A
   375            C      M 	LCALL	COPY_DATA
                      2  M  PAGE #( COPY_DATA ),
       02C7A 1E82     2     PAGE ( COPY_DATA / 1024 ),
       02C7B 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02C7C 1E8B     2     PAGE ( $ / 1024 ),
   376            C        ;---刷新第二三行	
   377            C      M 	REFURBISH_2AND3L		
                      2  M  BLOCK  0 
       02C7D 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02C7E 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02C7F 1880     2     MOV A,@( LCD_CTRL )
       02C80 004C     2     MOV  _RC ,A
       02C81 0B8D     1     BS  _RD , 6 
       02C82 0BCD     1     BS  _RD , 7 
   378            C        	
   379 02C83 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   380            C        ;---------------------------------------
   381 02C84      C        BOOK_FUNC_2_INIT_EMPTY:
   382            C        	
   383            C      M 	PAGE	#(VGA)
       02C84 1E8C     1     PAGE ( VGA / 1024 ),
   384 02C85 1127 C        	CALL	VGABLANKCHAR
   385 02C86 1883 C        	MOV	A,@(STYLE_CENTER)
   386 02C87 1026 C        	CALL	VGACHAR
   387            C        
   388 02C88 1824 C        	MOV	A,@36		;EMPTY
   389 02C89 114D C        	CALL	VGASTRING
   390            C        ;-
   391 02C8A 18FF C        	MOV	A,@(CH_END)
   392 02C8B 1026 C        	CALL	VGACHAR
   393 02C8C 10AB C        	CALL	VGADRAWCHAR
   394            C      M 	PAGE	#($)	
       02C8D 1E8B     1     PAGE ( $ / 1024 ),
   395            C        
   396 02C8E 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   397            C        ;---------------------------------------
   398 02C8F      C        BOOK_FUNC_2_MKEY:
   399            C        	
   400 02C8F 1820 C        	MOV	A,@CTMR2S
   401            C      M 	LCALL	SET_PTIMER	;
                      2  M  PAGE #( SET_PTIMER ),
       02C90 1E8D     2     PAGE ( SET_PTIMER / 1024 ),
       02C91 1371     1     CALL ( SET_PTIMER % 1024 ),
                      2  M  PAGE #( $ ),
       02C92 1E8B     2     PAGE ( $ / 1024 ),
   402            C        
   403 02C93 1814 C        	MOV	A,@CKEY_PBK
   404            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02C94 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02C95 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02C96 1E8B     2     PAGE ( $ / 1024 ),
   405            C      M 	JPNC	BOOK_FUNC_2_MKEY_BOOK
       02C97 0E03     1     JBS  _STATUS , C 
       02C98 1584     1     JMP  BOOK_FUNC_2_MKEY_BOOK ,
   406            C        	
   407 02C99 1821 C        	MOV	A,@CKEY_UP
   408            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02C9A 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02C9B 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02C9C 1E8B     2     PAGE ( $ / 1024 ),
   409            C      M 	JPNC	BOOK_FUNC_2_MKEY_UP
       02C9D 0E03     1     JBS  _STATUS , C 
       02C9E 1518     1     JMP  BOOK_FUNC_2_MKEY_UP ,
   410 02C9F 1822 C        	MOV	A,@CKEY_DWN
   411            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02CA0 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02CA1 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02CA2 1E8B     2     PAGE ( $ / 1024 ),
   412            C      M 	JPNC	BOOK_FUNC_2_MKEY_DWN
       02CA3 0E03     1     JBS  _STATUS , C 
       02CA4 1522     1     JMP  BOOK_FUNC_2_MKEY_DWN ,
   413 02CA5 1813 C        	MOV	A,@CKEY_STP
   414            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02CA6 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02CA7 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02CA8 1E8B     2     PAGE ( $ / 1024 ),
   415            C      M 	JPNC	BOOK_FUNC_2_MKEY_STP
       02CA9 0E03     1     JBS  _STATUS , C 
       02CAA 14E1     1     JMP  BOOK_FUNC_2_MKEY_STP ,
   416 02CAB 1823 C        	MOV	A,@CKEY_DEL
   417            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02CAC 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02CAD 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02CAE 1E8B     2     PAGE ( $ / 1024 ),
   418            C      M 	JPNC	BOOK_FUNC_2_MKEY_DEL
       02CAF 0E03     1     JBS  _STATUS , C 
       02CB0 14E6     1     JMP  BOOK_FUNC_2_MKEY_DEL ,
   419            C        
   420 02CB1 1827 C        	MOV	A,@CKEY_SPK
   421            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02CB2 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02CB3 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02CB4 1E8B     2     PAGE ( $ / 1024 ),
   422            C      M 	JPNC	BOOK_FUNC_2_MKEY_SPK
       02CB5 0E03     1     JBS  _STATUS , C 
       02CB6 14D8     1     JMP  BOOK_FUNC_2_MKEY_SPK ,
   423            C        
   424 02CB7 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   425            C        ;---------------------------------------
   426 02CB8      C        BOOK_FUNC_2_CKEY:
   427            C        	
   428 02CB8 1823 C        	MOV	A,@CKEY_DEL
   429            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02CB9 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02CBA 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02CBB 1E8B     2     PAGE ( $ / 1024 ),
   430            C      M 	JPNC	BOOK_FUNC_2_CKEY_DEL
       02CBC 0E03     1     JBS  _STATUS , C 
       02CBD 14C6     1     JMP  BOOK_FUNC_2_CKEY_DEL ,
   431            C        	
   432 02CBE 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   433            C        ;---------------------------------------
   434 02CBF      C        BOOK_FUNC_2_BKEY:
   435            C        	
   436 02CBF 1823 C        	MOV	A,@CKEY_DEL
   437            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02CC0 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02CC1 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02CC2 1E8B     2     PAGE ( $ / 1024 ),
   438            C      M 	JPNC	BOOK_FUNC_2_BKEY_DEL
       02CC3 0E03     1     JBS  _STATUS , C 
       02CC4 14CC     1     JMP  BOOK_FUNC_2_BKEY_DEL ,
   439            C        
   440 02CC5 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   441            C        ;---------------------------------------
   442 02CC6      C        BOOK_FUNC_2_CKEY_DEL:
   443 02CC6 0B61 C        	BS	B1_PRO_VAR,5
   444            C        	
   445 02CC7 042E C        	MOV	A,B1_CID_T
   446            C      M 	JPZ	BOOK_FUNC_2_FUNC_END
       02CC8 0C83     1     JBC  _STATUS , Z 
       02CC9 1414     1     JMP  BOOK_FUNC_2_FUNC_END ,
   447            C        	
   448            C      M 	LJMP	OGM_FUNC_0_DELALL_DISP	;!!!!!!Display "delete all?"
                      2  M  PAGE #( OGM_FUNC_0_DELALL_DISP ),
       02CCA 1E88     2     PAGE ( OGM_FUNC_0_DELALL_DISP / 1024 ),
       02CCB 1486     1     JMP ( OGM_FUNC_0_DELALL_DISP % 1024 ),
   449            C        ;---------------------------------------
   450 02CCC      C        BOOK_FUNC_2_BKEY_DEL:
   451            C      M 	JPB	B1_PRO_VAR,5,BOOK_FUNC_2_FUNC_END	;Del all flag
       02CCC 0D61     1     JBC  B1_PRO_VAR , 5 
       02CCD 1414     1     JMP  BOOK_FUNC_2_FUNC_END ,
   452            C        	
   453 02CCE 0432 C        	MOV	A,B1_MSG_ID
   454            C      M 	JPZ	BOOK_FUNC_2_FUNC_END
       02CCF 0C83     1     JBC  _STATUS , Z 
       02CD0 1414     1     JMP  BOOK_FUNC_2_FUNC_END ,
   455            C        	
   456 02CD1 0421 C        	MOV	A,B1_PRO_VAR
   457 02CD2 1B40 C        	XOR	A,@(1<<6)
   458 02CD3 0061 C        	MOV	B1_PRO_VAR,A		;Delete flag
   459            C        
   460            C      M 	JPNB	B1_PRO_VAR,6,BOOK_FUNC_2_FUNC_END	;Don't clean the flag when do delete,it can avoid set delete-flag after doing delete
       02CD4 0FA1     1     JBS  B1_PRO_VAR , 6 
       02CD5 1414     1     JMP  BOOK_FUNC_2_FUNC_END ,
   461            C        	
   462            C      M 	LJMP	OGM_FUNC_0_DELONE_DISP
                      2  M  PAGE #( OGM_FUNC_0_DELONE_DISP ),
       02CD6 1E88     2     PAGE ( OGM_FUNC_0_DELONE_DISP / 1024 ),
       02CD7 156C     1     JMP ( OGM_FUNC_0_DELONE_DISP % 1024 ),
   463            C        ;---------------------------------------
   464 02CD8      C        BOOK_FUNC_2_MKEY_SPK:
   465            C      M 	RTC_DISP_ENABLE
       02CD8 0A12     1     BS  SYS_FLAG , 0 
   466            C        
   467 02CD9 18A5 C        	MOV	A,@CDIAL_OUT
   468            C      M 	PAGE	#(STOR_MSG)
       02CDA 1E8D     1     PAGE ( STOR_MSG / 1024 ),
   469 02CDB 1308 C        	CALL	STOR_MSG
   470            C        
   471            C      M 	PAGE	#(CLR_PRO_STACK)
       02CDC 1E8D     1     PAGE ( CLR_PRO_STACK / 1024 ),
   472 02CDD 1352 C        	CALL	CLR_PRO_STACK
   473            C      M 	PAGE	#($)
       02CDE 1E8B     1     PAGE ( $ / 1024 ),
   474            C        
   475 02CDF 00E1 C        	CLR	B1_PRO_VAR
   476            C        	
   477 02CE0 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   478            C        ;---------------------------------------
   479 02CE1      C        BOOK_FUNC_2_MKEY_STP:
   480 02CE1      C        BOOK_FUNC_3_MKEY_STP:
   481 02CE1      C        BOOK_FUNC_4_MKEY_STP:	
   482 02CE1 1801 C        	MOV	A,@1
   483 02CE2 0071 C        	MOV	B1_MSG_N,A	;function value
   484 02CE3 0061 C        	MOV	B1_PRO_VAR,A
   485            C      M 	LJMP	BOOK_FUNC_0_BOOK_1
                      2  M  PAGE #( BOOK_FUNC_0_BOOK_1 ),
       02CE4 1E8A     2     PAGE ( BOOK_FUNC_0_BOOK_1 / 1024 ),
       02CE5 171B     1     JMP ( BOOK_FUNC_0_BOOK_1 % 1024 ),
   486            C        ;---------------------------------------
   487 02CE6      C        BOOK_FUNC_2_MKEY_DEL:		;Confirm the delete action
   488            C      M 	JPB	B1_PRO_VAR,5,BOOK_FUNC_2_MKEY_DO_DELALL
       02CE6 0D61     1     JBC  B1_PRO_VAR , 5 
       02CE7 1509     1     JMP  BOOK_FUNC_2_MKEY_DO_DELALL ,
   489            C      M 	JPB	B1_PRO_VAR,6,BOOK_FUNC_2_MKEY_DO_DELONE
       02CE8 0DA1     1     JBC  B1_PRO_VAR , 6 
       02CE9 14EB     1     JMP  BOOK_FUNC_2_MKEY_DO_DELONE ,
   490            C        
   491 02CEA 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   492            C        ;---------------------------------------
   493 02CEB      C        BOOK_FUNC_2_MKEY_DO_DELONE:
   494            C        ;---Delete
   495 02CEB 0432 C        	MOV	A,B1_MSG_ID
   496            C      M 	PAGE	#(TRSLATE_TABTODSP)
       02CEC 1E8E     1     PAGE ( TRSLATE_TABTODSP / 1024 ),
   497 02CED 12C8 C        	CALL	TRSLATE_TABTODSP
   498            C      M 	PAGE	#(DEL_TEL)
       02CEE 1E83     1     PAGE ( DEL_TEL / 1024 ),
   499 02CEF 124B C        	CALL	DEL_TEL
   500            C        
   501            C      M 	PAGE	#(GET_TELT)
       02CF0 1E83     1     PAGE ( GET_TELT / 1024 ),
   502 02CF1 1246 C        	CALL	GET_TELT
   503 02CF2 0415 C        	MOV	A,TEMP0
   504 02CF3 006E C        	MOV	B1_CID_T,A	;Total tel record
   505            C        ;---Change index-table
   506            C      M 	PAGE	#(IDXTAB_DEL)
       02CF4 1E8E     1     PAGE ( IDXTAB_DEL / 1024 ),
   507 02CF5 139F C        	CALL	IDXTAB_DEL
   508 02CF6 132D C        	CALL	IDXTAB_WRITE
   509            C        ;-	
   510            C      M 	PAGE	#(TEL_GC_CHK)
       02CF7 1E82     1     PAGE ( TEL_GC_CHK / 1024 ),
   511 02CF8 10FC C        	CALL	TEL_GC_CHK
   512            C        ;---
   513            C      M 	PAGE	#(VGA)
       02CF9 1E8C     1     PAGE ( VGA / 1024 ),
   514 02CFA 1127 C        	CALL	VGABLANKCHAR
   515 02CFB 1883 C        	MOV	A,@(STYLE_CENTER)
   516 02CFC 1026 C        	CALL	VGACHAR
   517 02CFD 182F C        	MOV	A,@47		;DELETE...
   518 02CFE 114D C        	CALL	VGASTRING
   519            C        ;-
   520 02CFF 18FF C        	MOV	A,@(CH_END)
   521 02D00 1026 C        	CALL	VGACHAR
   522 02D01 10AB C        	CALL	VGADRAWCHAR
   523            C      M 	PAGE	#($)
       02D02 1E8B     1     PAGE ( $ / 1024 ),
   524            C        	
   525 02D03 0432 C        	MOV	A,B1_MSG_ID
   526 02D04 012E C        	SUB	A,B1_CID_T
   527            C      M 	JPC	BOOK_FUNC_2_MKEY_BOOK_LOOKUP
       02D05 0C03     1     JBC  _STATUS , C 
       02D06 152C     1     JMP  BOOK_FUNC_2_MKEY_BOOK_LOOKUP ,
   528            C        	
   529 02D07 00F2 C        	CLR	B1_MSG_ID
   530 02D08 152C C        	JMP	BOOK_FUNC_2_MKEY_BOOK_LOOKUP	
   531            C        ;---------------------------------------
   532 02D09      C        BOOK_FUNC_2_MKEY_DO_DELALL:	;!!!Update index-table is no need
   533            C        	
   534            C      M 	PAGE	#(DEL_TEL)
       02D09 1E83     1     PAGE ( DEL_TEL / 1024 ),
   535 02D0A 1801 C        	MOV	A,@1
   536 02D0B 124B C        	CALL	DEL_TEL
   537            C        	
   538            C      M 	PAGE	#(GET_TELT)
       02D0C 1E83     1     PAGE ( GET_TELT / 1024 ),
   539 02D0D 1246 C        	CALL	GET_TELT
   540            C      M 	PAGE	#($)
       02D0E 1E8B     1     PAGE ( $ / 1024 ),
   541 02D0F 0415 C        	MOV	A,TEMP0
   542            C      M 	JPNZ	BOOK_FUNC_2_MKEY_DO_DELALL	;Delete until no tel exist
       02D10 0E83     1     JBS  _STATUS , Z 
       02D11 1509     1     JMP  BOOK_FUNC_2_MKEY_DO_DELALL ,
   543            C        	
   544            C      M 	PAGE	#(TEL_GC_CHK)
       02D12 1E82     1     PAGE ( TEL_GC_CHK / 1024 ),
   545 02D13 10FC C        	CALL	TEL_GC_CHK
   546            C      M 	PAGE	#($)
       02D14 1E8B     1     PAGE ( $ / 1024 ),
   547            C        	
   548 02D15 00EE C        	CLR	B1_CID_T	;Total tel record
   549 02D16 00F2 C        	CLR	B1_MSG_ID
   550            C        	
   551 02D17 152C C        	JMP	BOOK_FUNC_2_MKEY_BOOK_LOOKUP
   552            C        ;---------------------------------------
   553 02D18      C        BOOK_FUNC_2_MKEY_UP:
   554            C        
   555            C      M 	MOV	TEMP1,@0	;min
       02D18 1800     1     MOV A,@( 0 )
       02D19 0056     1     MOV  TEMP1 ,A
   556            C      M 	MOV	TEMP2,B1_CID_T	;max
       02D1A 042E     1     MOV A, B1_CID_T 
       02D1B 0057     1     MOV  TEMP2 ,A
   557            C        	
   558 02D1C 0432 C        	MOV	A,B1_MSG_ID
   559            C      M 	LCALL	VALUE_INC
                      2  M  PAGE #( VALUE_INC ),
       02D1D 1E82     2     PAGE ( VALUE_INC / 1024 ),
       02D1E 101C     1     CALL ( VALUE_INC % 1024 ),
                      2  M  PAGE #( $ ),
       02D1F 1E8B     2     PAGE ( $ / 1024 ),
   560 02D20 0072 C        	MOV	B1_MSG_ID,A
   561            C        
   562 02D21 152B C        	JMP	BOOK_LOOKUP
   563            C        ;---------------------------------------
   564 02D22      C        BOOK_FUNC_2_MKEY_DWN:
   565            C        	
   566            C      M 	MOV	TEMP1,@0	;min
       02D22 1800     1     MOV A,@( 0 )
       02D23 0056     1     MOV  TEMP1 ,A
   567            C      M 	MOV	TEMP2,B1_CID_T	;max
       02D24 042E     1     MOV A, B1_CID_T 
       02D25 0057     1     MOV  TEMP2 ,A
   568            C        	
   569 02D26 0432 C        	MOV	A,B1_MSG_ID
   570            C      M 	LCALL	VALUE_DEC
                      2  M  PAGE #( VALUE_DEC ),
       02D27 1E82     2     PAGE ( VALUE_DEC / 1024 ),
       02D28 102A     1     CALL ( VALUE_DEC % 1024 ),
                      2  M  PAGE #( $ ),
       02D29 1E8B     2     PAGE ( $ / 1024 ),
   571 02D2A 0072 C        	MOV	B1_MSG_ID,A
   572            C        	
   573            C        	;JMP	BOOK_LOOKUP
   574 02D2B      C        BOOK_LOOKUP:	
   575 02D2B 09A1 C        	BC	B1_PRO_VAR,6		;Clear Del flag
   576 02D2C      C        BOOK_FUNC_2_MKEY_BOOK_LOOKUP:
   577 02D2C 00E2 C        	CLR	B1_PRO_VAR1
   578            C        
   579 02D2D 042E C        	MOV	A,B1_CID_T
   580            C      M 	JPZ	BOOK_FUNC_2_INIT_EMPTY
       02D2E 0C83     1     JBC  _STATUS , Z 
       02D2F 1484     1     JMP  BOOK_FUNC_2_INIT_EMPTY ,
   581 02D30 0432 C        	MOV	A,B1_MSG_ID
   582            C      M 	JPNZ	BOOK_FUNC_2_BOOKLOOKUP
       02D31 0E83     1     JBS  _STATUS , Z 
       02D32 142F     1     JMP  BOOK_FUNC_2_BOOKLOOKUP ,
   583 02D33      C        BOOK_FUNC_2_MKEY_BOOK_ENDLIST:
   584            C        	
   585            C      M 	PAGE	#(VGA)
       02D33 1E8C     1     PAGE ( VGA / 1024 ),
   586 02D34 111E C        	CALL	VGABLANKNUM2
   587 02D35 1127 C        	CALL	VGABLANKCHAR
   588            C        ;---First line index	
   589 02D36 18C8 C        	MOV	A,@ID_BLANK
   590 02D37 1374 C        	CALL	DISP_ID
   591            C        ;-third line
   592 02D38 1883 C        	MOV	A,@(STYLE_CENTER)
   593 02D39 1026 C        	CALL	VGACHAR
   594            C        
   595 02D3A 1825 C        	MOV	A,@37		;END
   596 02D3B 114D C        	CALL	VGASTRING
   597 02D3C 1800 C        	MOV	A,@(CH_BLANK)
   598 02D3D 1026 C        	CALL	VGACHAR
   599 02D3E 1826 C        	MOV	A,@38		;OF
   600 02D3F 114D C        	CALL	VGASTRING
   601 02D40 1800 C        	MOV	A,@(CH_BLANK)
   602 02D41 1026 C        	CALL	VGACHAR
   603 02D42 1827 C        	MOV	A,@39		;LIST
   604 02D43 114D C        	CALL	VGASTRING
   605            C        ;-
   606 02D44 18FF C        	MOV	A,@(CH_END)
   607 02D45 1026 C        	CALL	VGACHAR
   608 02D46 10AB C        	CALL	VGADRAWCHAR
   609            C      M 	PAGE	#($)
       02D47 1E8B     1     PAGE ( $ / 1024 ),
   610            C        
   611 02D48 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   612            C        ;---------------------------------------
   613 02D49      C        BOOK_FUNC_2_TMR:
   614 02D49 0562 C        	INC	B1_PRO_VAR1
   615            C        	
   616 02D4A 0422 C        	MOV	A,B1_PRO_VAR1
   617 02D4B 1D0A C        	SUB	A,@10
   618            C      M 	JPZ	BOOK_FUNC_2_TMROUT	;10s time out
       02D4C 0C83     1     JBC  _STATUS , Z 
       02D4D 1416     1     JMP  BOOK_FUNC_2_TMROUT ,
   619            C        	
   620 02D4E 0432 C        	MOV	A,B1_MSG_ID
   621            C      M 	JPZ	BOOK_FUNC_2_FUNC_END	;End of list
       02D4F 0C83     1     JBC  _STATUS , Z 
       02D50 1414     1     JMP  BOOK_FUNC_2_FUNC_END ,
   622            C        	
   623            C        ;---号码在第二行显示
   624            C      M 	BLOCK	1
       02D51 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02D52 000A     1     IOW  _IOCA ,
   625            C        	
   626            C      M 	MOV	_RC,@NUM_FLAG
       02D53 1862     1     MOV A,@( NUM_FLAG )
       02D54 004C     1     MOV  _RC ,A
   627 02D55 040D C        	MOV	A,_RD			;count
   628 02D56 1A3F C        	AND	A,@0X3F			;Can't bigger than 15
   629 02D57 005E C        	MOV	COUNT,A
   630 02D58 1D0F C        	SUB	A,@LENGTH2NDL
   631            C      M 	JPC	BOOK_FUNC_2_FUNC_END	;Less than 15 or equ 15,no need two times display
       02D59 0C03     1     JBC  _STATUS , C 
       02D5A 1414     1     JMP  BOOK_FUNC_2_FUNC_END ,
   632            C        ;---More than 15 byte	
   633            C      M 	LCALL	VGABLANKNUM2
                      2  M  PAGE #( VGABLANKNUM2 ),
       02D5B 1E8C     2     PAGE ( VGABLANKNUM2 / 1024 ),
       02D5C 111E     1     CALL ( VGABLANKNUM2 % 1024 ),
                      2  M  PAGE #( $ ),
       02D5D 1E8B     2     PAGE ( $ / 1024 ),
   634            C        	
   635            C      M 	JPNB	B1_PRO_VAR1,0,BOOK_FUNC_2_TMR_1
       02D5E 0E22     1     JBS  B1_PRO_VAR1 , 0 
       02D5F 1572     1     JMP  BOOK_FUNC_2_TMR_1 ,
   636            C        	
   637            C      M 	MOV	COUNT,@14
       02D60 180E     1     MOV A,@( 14 )
       02D61 005E     1     MOV  COUNT ,A
   638            C      M 	MOV	BASE_ADDR,@0X10		;base
       02D62 1810     1     MOV A,@( 16 )
       02D63 005F     1     MOV  BASE_ADDR ,A
   639            C      M 	MOV	OFFSET_S,@NUM_START	;source
       02D64 1868     1     MOV A,@( NUM_START )
       02D65 005C     1     MOV  OFFSET_S ,A
   640            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination
       02D66 188D     1     MOV A,@( LCD_2NDLINE )
       02D67 005D     1     MOV  OFFSET_D ,A
   641            C      M 	LCALL	COPY_DATA
                      2  M  PAGE #( COPY_DATA ),
       02D68 1E82     2     PAGE ( COPY_DATA / 1024 ),
       02D69 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02D6A 1E8B     2     PAGE ( $ / 1024 ),
   642            C        ;---End with"-"
   643            C      M 	BLOCK	0
       02D6B 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02D6C 000A     1     IOW  _IOCA ,
   644            C      M 	MOV	_RC,@(LCD_2NDLINE+LENGTH2NDL-1)
       02D6D 189B     1     MOV A,@((( LCD_2NDLINE + LENGTH2NDL )- 1 ))
       02D6E 004C     1     MOV  _RC ,A
   645            C      M 	MOV	_RD,@NUM_AMPERE
       02D6F 180D     1     MOV A,@( NUM_AMPERE )
       02D70 004D     1     MOV  _RD ,A
   646            C        
   647 02D71 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   648            C        ;-------------------
   649 02D72      C        BOOK_FUNC_2_TMR_1:
   650 02D72 180E C        	MOV	A,@(LENGTH2NDL-1)
   651 02D73 015E C        	SUB	COUNT,A
   652            C        
   653            C      M 	MOV	BASE_ADDR,@0X10		;base
       02D74 1810     1     MOV A,@( 16 )
       02D75 005F     1     MOV  BASE_ADDR ,A
   654            C      M 	MOV	OFFSET_S,@(NUM_START+LENGTH2NDL-1)	;source
       02D76 1876     1     MOV A,@((( NUM_START + LENGTH2NDL )- 1 ))
       02D77 005C     1     MOV  OFFSET_S ,A
   655            C      M 	MOV	OFFSET_D,@(LCD_2NDLINE+1)	;destination
       02D78 188E     1     MOV A,@(( LCD_2NDLINE + 1 ))
       02D79 005D     1     MOV  OFFSET_D ,A
   656            C      M 	LCALL	COPY_DATA
                      2  M  PAGE #( COPY_DATA ),
       02D7A 1E82     2     PAGE ( COPY_DATA / 1024 ),
       02D7B 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02D7C 1E8B     2     PAGE ( $ / 1024 ),
   657            C        ;---Start with"-"
   658            C      M 	BLOCK	0
       02D7D 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02D7E 000A     1     IOW  _IOCA ,
   659            C      M 	MOV	_RC,@(LCD_2NDLINE)
       02D7F 188D     1     MOV A,@( LCD_2NDLINE )
       02D80 004C     1     MOV  _RC ,A
   660            C      M 	MOV	_RD,@NUM_AMPERE
       02D81 180D     1     MOV A,@( NUM_AMPERE )
       02D82 004D     1     MOV  _RD ,A
   661            C        	
   662 02D83 1414 C        	JMP	BOOK_FUNC_2_FUNC_END
   663            C        ;---------------------------------------
   664 02D84      C        BOOK_FUNC_2_MKEY_BOOK:
   665 02D84 042E C        	MOV	A,B1_CID_T
   666            C      M 	JPZ	BOOK_FUNC_2_MKEY_STP	;No data in phonebook
       02D85 0C83     1     JBC  _STATUS , Z 
       02D86 14E1     1     JMP  BOOK_FUNC_2_MKEY_STP ,
   667            C        	
   668 02D87 0432 C        	MOV	A,B1_MSG_ID
   669            C      M 	JPZ	BOOK_FUNC_2_FUNC_END	;LCD display "END OF LIST",can't edit
       02D88 0C83     1     JBC  _STATUS , Z 
       02D89 1414     1     JMP  BOOK_FUNC_2_FUNC_END ,
   670            C        	
   671            C      M 	LJMP	BOOK_FUNC_0_EDIT
                      2  M  PAGE #( BOOK_FUNC_0_EDIT ),
       02D8A 1E8A     2     PAGE ( BOOK_FUNC_0_EDIT / 1024 ),
       02D8B 1739     1     JMP ( BOOK_FUNC_0_EDIT % 1024 ),
   672            C        
   673            C        ;-------------------------------------------------------------------------------
   674 02D8C      C        BOOK_FUNC_3_FUNC:			;ADD/Edit number
   675            C        
   676 02D8C 1890 C        	MOV	A,@CMSG_INIT
   677 02D8D 0120 C        	SUB	A,B1_MSG
   678            C      M 	JPZ	BOOK_FUNC_3_INIT
       02D8E 0C83     1     JBC  _STATUS , Z 
       02D8F 1599     1     JMP  BOOK_FUNC_3_INIT ,
   679            C        	
   680 02D90 1880 C        	MOV 	A,@CMSG_MKEY
   681 02D91 0120 C        	SUB 	A,B1_MSG
   682            C      M 	JPZ 	BOOK_FUNC_3_MKEY
       02D92 0C83     1     JBC  _STATUS , Z 
       02D93 15AC     1     JMP  BOOK_FUNC_3_MKEY ,
   683            C        	
   684 02D94 1898 C        	MOV 	A,@CMSG_TMR
   685 02D95 0120 C        	SUB 	A,B1_MSG
   686            C      M 	JPZ 	BOOK_FUNC_3_TMR
       02D96 0C83     1     JBC  _STATUS , Z 
       02D97 1673     1     JMP  BOOK_FUNC_3_TMR ,
   687            C        
   688 02D98 1414 C        	JMP	BOOK_FUNC_3_FUNC_END
   689            C        ;---------------------------------------
   690 02D99      C        BOOK_FUNC_3_INIT:			;ADD number(Edit num can't goto here)
   691            C      M 	PAGE	#(VGA)
       02D99 1E8C     1     PAGE ( VGA / 1024 ),
   692 02D9A 111E C        	CALL	VGABLANKNUM2
   693 02D9B 1127 C        	CALL	VGABLANKCHAR
   694            C      M 	PAGE	#($)
       02D9C 1E8B     1     PAGE ( $ / 1024 ),
   695            C        ;---清空编辑区	
   696            C      M 	BLOCK	1
       02D9D 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02D9E 000A     1     IOW  _IOCA ,
   697            C      M 	MOV	_RC,@DATA_ZONE_START	;起点
       02D9F 1860     1     MOV A,@( DATA_ZONE_START )
       02DA0 004C     1     MOV  _RC ,A
   698            C      M 	MOV	COUNT,@(DATA_ZONE_END-DATA_ZONE_START)	;长度
       02DA1 183A     1     MOV A,@(( DATA_ZONE_END - DATA_ZONE_START ))
       02DA2 005E     1     MOV  COUNT ,A
   699 02DA3 1800 C        	MOV	A,@0			;填充值
   700            C      M 	LCALL	STOR_DATA
                      2  M  PAGE #( STOR_DATA ),
       02DA4 1E82     2     PAGE ( STOR_DATA / 1024 ),
       02DA5 107C     1     CALL ( STOR_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02DA6 1E8B     2     PAGE ( $ / 1024 ),
   701 02DA7 00D1 C        	CLR	CURSOR
   702 02DA8 00E2 C        	CLR	B1_PRO_VAR1
   703 02DA9 00EE C        	CLR	B1_CID_T	;初始长度为0
   704 02DAA 00F2 C        	CLR	B1_MSG_ID
   705 02DAB 1414 C        	JMP	BOOK_FUNC_3_FUNC_END
   706            C        ;---------------------------------------
   707 02DAC      C        BOOK_FUNC_3_MKEY:
   708 02DAC 00E2 C        	CLR	B1_PRO_VAR1
   709            C        	
   710 02DAD 1814 C        	MOV	A,@CKEY_PBK
   711            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02DAE 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02DAF 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02DB0 1E8B     2     PAGE ( $ / 1024 ),
   712            C      M 	JPNC	BOOK_FUNC_3_MKEY_BOOK
       02DB1 0E03     1     JBS  _STATUS , C 
       02DB2 1611     1     JMP  BOOK_FUNC_3_MKEY_BOOK ,
   713            C        	
   714 02DB3 1821 C        	MOV	A,@CKEY_UP
   715            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02DB4 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02DB5 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02DB6 1E8B     2     PAGE ( $ / 1024 ),
   716            C      M 	JPNC	BOOK_FUNC_3_MKEY_UP
       02DB7 0E03     1     JBS  _STATUS , C 
       02DB8 1647     1     JMP  BOOK_FUNC_3_MKEY_UP ,
   717 02DB9 1822 C        	MOV	A,@CKEY_DWN
   718            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02DBA 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02DBB 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02DBC 1E8B     2     PAGE ( $ / 1024 ),
   719            C      M 	JPNC	BOOK_FUNC_3_MKEY_DWN
       02DBD 0E03     1     JBS  _STATUS , C 
       02DBE 163D     1     JMP  BOOK_FUNC_3_MKEY_DWN ,
   720 02DBF 1823 C        	MOV	A,@CKEY_DEL
   721            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02DC0 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02DC1 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02DC2 1E8B     2     PAGE ( $ / 1024 ),
   722            C      M 	JPNC	BOOK_FUNC_3_MKEY_DEL
       02DC3 0E03     1     JBS  _STATUS , C 
       02DC4 164C     1     JMP  BOOK_FUNC_3_MKEY_DEL ,
   723 02DC5 1826 C        	MOV	A,@CKEY_RP
   724            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02DC6 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02DC7 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02DC8 1E8B     2     PAGE ( $ / 1024 ),
   725            C      M 	JPNC	BOOK_FUNC_3_MKEY_RP
       02DC9 0E03     1     JBS  _STATUS , C 
       02DCA 15D7     1     JMP  BOOK_FUNC_3_MKEY_RP ,
   726            C        
   727 02DCB 1813 C        	MOV	A,@CKEY_STP
   728            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02DCC 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02DCD 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02DCE 1E8B     2     PAGE ( $ / 1024 ),
   729            C      M 	JPNC	BOOK_FUNC_3_MKEY_STP
       02DCF 0E03     1     JBS  _STATUS , C 
       02DD0 14E1     1     JMP  BOOK_FUNC_3_MKEY_STP ,
   730            C        
   731            C      M 	LCALL	DIALKEY_CHK
                      2  M  PAGE #( DIALKEY_CHK ),
       02DD1 1E82     2     PAGE ( DIALKEY_CHK / 1024 ),
       02DD2 1203     1     CALL ( DIALKEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02DD3 1E8B     2     PAGE ( $ / 1024 ),
   732            C      M 	JPC	BOOK_FUNC_3_MKEY_NUM	;Num 
       02DD4 0C03     1     JBC  _STATUS , C 
       02DD5 15D8     1     JMP  BOOK_FUNC_3_MKEY_NUM ,
   733            C        
   734 02DD6 1414 C        	JMP	BOOK_FUNC_3_FUNC_END
   735            C        ;---------------------------------------
   736 02DD7      C        BOOK_FUNC_3_MKEY_RP:
   737 02DD7 1860 C        	MOV	A,@NUM_P
   738            C        	;JMP	BOOK_FUNC_3_MKEY_NUM
   739            C        ;-----------------------------
   740 02DD8      C        BOOK_FUNC_3_MKEY_NUM:
   741 02DD8 0071 C        	MOV	B1_MSG_N,A
   742            C        ;-Save data
   743            C      M 	BLOCK	1
       02DD9 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02DDA 000A     1     IOW  _IOCA ,
   744 02DDB 1868 C        	MOV	A,@NUM_START	;起点
   745 02DDC 0391 C        	ADD	A,CURSOR	;偏移
   746 02DDD 004C C        	MOV	_RC,A
   747            C      M 	MOV	_RD,B1_MSG_N
       02DDE 0431     1     MOV A, B1_MSG_N 
       02DDF 004D     1     MOV  _RD ,A
   748            C        ;-length adjust	
   749 02DE0 042E C        	MOV	A,B1_CID_T
   750 02DE1 1D18 C        	SUB	A,@24
   751            C      M 	JPZ	BOOK_FUNC_3_MKEY_NUM_1
       02DE2 0C83     1     JBC  _STATUS , Z 
       02DE3 15E9     1     JMP  BOOK_FUNC_3_MKEY_NUM_1 ,
   752 02DE4 042E C        	MOV	A,B1_CID_T
   753 02DE5 0111 C        	SUB	A,CURSOR
   754            C      M 	JPNZ	BOOK_FUNC_3_MKEY_NUM_1
       02DE6 0E83     1     JBS  _STATUS , Z 
       02DE7 15E9     1     JMP  BOOK_FUNC_3_MKEY_NUM_1 ,
   755            C        	
   756 02DE8 056E C        	INC	B1_CID_T
   757 02DE9      C        BOOK_FUNC_3_MKEY_NUM_1:
   758            C        ;-cursor adjust	
   759 02DE9 0411 C        	MOV	A,CURSOR
   760 02DEA 1D17 C        	SUB	A,@23
   761            C      M 	JPZ	BOOK_FUNC_3_MKEY_NUM_2
       02DEB 0C83     1     JBC  _STATUS , Z 
       02DEC 15EE     1     JMP  BOOK_FUNC_3_MKEY_NUM_2 ,
   762            C        
   763 02DED 0551 C        	INC	CURSOR
   764 02DEE      C        BOOK_FUNC_3_MKEY_NUM_2:
   765            C        ;-----------------------------
   766 02DEE      C        BOOK_FUNC_3_MKEY_NUM_DISP:		;when cursor at the right side
   767            C      M 	LCALL	VGABLANKNUM2
                      2  M  PAGE #( VGABLANKNUM2 ),
       02DEE 1E8C     2     PAGE ( VGABLANKNUM2 / 1024 ),
       02DEF 111E     1     CALL ( VGABLANKNUM2 % 1024 ),
                      2  M  PAGE #( $ ),
       02DF0 1E8B     2     PAGE ( $ / 1024 ),
   768            C      M 	MOV	BASE_ADDR,@0X10	
       02DF1 1810     1     MOV A,@( 16 )
       02DF2 005F     1     MOV  BASE_ADDR ,A
   769            C        	
   770 02DF3 180F C        	MOV	A,@LENGTH2NDL
   771 02DF4 0111 C        	SUB	A,CURSOR
   772            C      M 	JPC	BOOK_FUNC_3_MKEY_NUM_DISP_RSIDE	;在一次能显示的范围之外,只显示后面的15个
       02DF5 0C03     1     JBC  _STATUS , C 
       02DF6 1607     1     JMP  BOOK_FUNC_3_MKEY_NUM_DISP_RSIDE ,
   773            C        ;---光标偏移少于(或等于)15
   774 02DF7      C        BOOK_FUNC_3_MKEY_NUM_DISP_NORMAL:
   775            C      M 	MOV	COUNT,B1_CID_T	
       02DF7 042E     1     MOV A, B1_CID_T 
       02DF8 005E     1     MOV  COUNT ,A
   776            C        	
   777 02DF9 042E C        	MOV	A,B1_CID_T
   778 02DFA 1D0F C        	SUB	A,@LENGTH2NDL		;Check length
   779            C      M 	JPC	BOOK_FUNC_3_DISP_NORMAL_1
       02DFB 0C03     1     JBC  _STATUS , C 
       02DFC 15FF     1     JMP  BOOK_FUNC_3_DISP_NORMAL_1 ,
   780            C        	
   781            C      M 	MOV	COUNT,@LENGTH2NDL
       02DFD 180F     1     MOV A,@( LENGTH2NDL )
       02DFE 005E     1     MOV  COUNT ,A
   782 02DFF      C        BOOK_FUNC_3_DISP_NORMAL_1:	
   783            C        ;---长度少于(或等于)15
   784            C      M 	MOV	OFFSET_S,@NUM_START	;source address
       02DFF 1868     1     MOV A,@( NUM_START )
       02E00 005C     1     MOV  OFFSET_S ,A
   785            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination address		
       02E01 188D     1     MOV A,@( LCD_2NDLINE )
       02E02 005D     1     MOV  OFFSET_D ,A
   786            C      M 	LCALL	COPY_DATA
                      2  M  PAGE #( COPY_DATA ),
       02E03 1E82     2     PAGE ( COPY_DATA / 1024 ),
       02E04 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02E05 1E8B     2     PAGE ( $ / 1024 ),
   787            C        	
   788 02E06 1414 C        	JMP	BOOK_FUNC_3_FUNC_END
   789            C        ;-----------------------------
   790 02E07      C        BOOK_FUNC_3_MKEY_NUM_DISP_RSIDE:	;长度大于或等于15
   791            C        
   792 02E07 1F69 C        	ADD	A,@(NUM_START+1)
   793 02E08 005C C        	MOV	OFFSET_S,A		;source address(Note! this method use cursor in the right side of LCD)
   794            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination address
       02E09 188D     1     MOV A,@( LCD_2NDLINE )
       02E0A 005D     1     MOV  OFFSET_D ,A
   795            C      M 	MOV	COUNT,@(LENGTH2NDL-1)	;length
       02E0B 180E     1     MOV A,@(( LENGTH2NDL - 1 ))
       02E0C 005E     1     MOV  COUNT ,A
   796            C      M 	LCALL	COPY_DATA	
                      2  M  PAGE #( COPY_DATA ),
       02E0D 1E82     2     PAGE ( COPY_DATA / 1024 ),
       02E0E 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02E0F 1E8B     2     PAGE ( $ / 1024 ),
   797            C        
   798 02E10 1414 C        	JMP	BOOK_FUNC_3_FUNC_END
   799            C        ;-----------------------------------------------------------
   800 02E11      C        BOOK_FUNC_3_MKEY_BOOK:
   801 02E11 042E C        	MOV	A,B1_CID_T
   802            C      M 	JPZ	BOOK_FUNC_END		;号码有效长度为0,不能进入姓名编辑状态
       02E12 0C83     1     JBC  _STATUS , Z 
       02E13 170D     1     JMP  BOOK_FUNC_END ,
   803            C        ;-Save the length first
   804            C      M 	BLOCK	1
       02E14 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02E15 000A     1     IOW  _IOCA ,
   805            C      M 	MOV	_RC,@NUM_FLAG
       02E16 1862     1     MOV A,@( NUM_FLAG )
       02E17 004C     1     MOV  _RC ,A
   806 02E18 042E C        	MOV	A,B1_CID_T
   807            C        	;OR	A,@0X80
   808 02E19 004D C        	MOV	_RD,A
   809            C        
   810            C      M 	LCALL	VGABLANKNUM2
                      2  M  PAGE #( VGABLANKNUM2 ),
       02E1A 1E8C     2     PAGE ( VGABLANKNUM2 / 1024 ),
       02E1B 111E     1     CALL ( VGABLANKNUM2 % 1024 ),
                      2  M  PAGE #( $ ),
       02E1C 1E8B     2     PAGE ( $ / 1024 ),
   811            C      M 	MOV	BASE_ADDR,@0X10	
       02E1D 1810     1     MOV A,@( 16 )
       02E1E 005F     1     MOV  BASE_ADDR ,A
   812            C        	
   813            C      M 	MOV	TEMP1,@LENGTH2NDL
       02E1F 180F     1     MOV A,@( LENGTH2NDL )
       02E20 0056     1     MOV  TEMP1 ,A
   814            C        		
   815            C        	;MOV	A,@LENGTH2NDL
   816 02E21 012E C        	SUB	A,B1_CID_T
   817            C      M 	JPC	BOOK_FUNC_3_MKEY_BOOK_1	;在一次能显示的范围之外,只显示前面的15个
       02E22 0C03     1     JBC  _STATUS , C 
       02E23 1626     1     JMP  BOOK_FUNC_3_MKEY_BOOK_1 ,
   818            C        ;---长度少于(或等于)15
   819            C      M 	MOV	TEMP1,B1_CID_T
       02E24 042E     1     MOV A, B1_CID_T 
       02E25 0056     1     MOV  TEMP1 ,A
   820            C        	
   821 02E26      C        BOOK_FUNC_3_MKEY_BOOK_1:
   822            C        
   823            C      M 	MOV	OFFSET_S,@NUM_START	;source address
       02E26 1868     1     MOV A,@( NUM_START )
       02E27 005C     1     MOV  OFFSET_S ,A
   824            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination address
       02E28 188D     1     MOV A,@( LCD_2NDLINE )
       02E29 005D     1     MOV  OFFSET_D ,A
   825            C      M 	MOV	COUNT,TEMP1		;length
       02E2A 0416     1     MOV A, TEMP1 
       02E2B 005E     1     MOV  COUNT ,A
   826            C      M 	LCALL	COPY_DATA	
                      2  M  PAGE #( COPY_DATA ),
       02E2C 1E82     2     PAGE ( COPY_DATA / 1024 ),
       02E2D 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02E2E 1E8B     2     PAGE ( $ / 1024 ),
   827            C        ;---
   828 02E2F 00D1 C        	CLR	CURSOR
   829            C        	
   830            C      M 	BLOCK	1
       02E30 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02E31 000A     1     IOW  _IOCA ,
   831            C      M 	MOV	_RC,@NAME_FLAG
       02E32 1863     1     MOV A,@( NAME_FLAG )
       02E33 004C     1     MOV  _RC ,A
   832 02E34 040D C        	MOV	A,_RD
   833 02E35 1A0F C        	AND	A,@0X0F
   834 02E36 006E C        	MOV	B1_CID_T,A		;the name length
   835            C        	
   836            C      M 	MOV	B1_CID_N,@0XFF		;tell that the first key at edit name
       02E37 18FF     1     MOV A,@( 255 )
       02E38 006F     1     MOV  B1_CID_N ,A
   837 02E39 00E2 C        	CLR	B1_PRO_VAR1
   838 02E3A 1804 C        	MOV	A,@0X04
   839 02E3B 0061 C        	MOV	B1_PRO_VAR,A
   840            C        
   841 02E3C 1414 C        	JMP	BOOK_FUNC_3_FUNC_END
   842            C        ;-----------------------------------------------------------
   843 02E3D      C        BOOK_FUNC_3_MKEY_DWN:	
   844 02E3D 0411 C        	MOV	A,CURSOR
   845 02E3E 1D17 C        	SUB	A,@23
   846            C      M 	JPZ	BOOK_FUNC_3_FUNC_END	;达到允许最大值
       02E3F 0C83     1     JBC  _STATUS , Z 
       02E40 1414     1     JMP  BOOK_FUNC_3_FUNC_END ,
   847            C        
   848 02E41 042E C        	MOV	A,B1_CID_T
   849 02E42 0111 C        	SUB	A,CURSOR
   850            C      M 	JPZ	BOOK_FUNC_3_FUNC_END	;达到实际最大值的下一位(偏移+1=长度)
       02E43 0C83     1     JBC  _STATUS , Z 
       02E44 1414     1     JMP  BOOK_FUNC_3_FUNC_END ,
   851            C        		
   852 02E45 0551 C        	INC	CURSOR
   853            C        	
   854 02E46 15EE C        	JMP	BOOK_FUNC_3_MKEY_NUM_DISP
   855            C        ;---------------------------------------
   856 02E47      C        BOOK_FUNC_3_MKEY_UP:
   857            C        	
   858 02E47 0411 C        	MOV	A,CURSOR
   859            C      M 	JPZ	BOOK_FUNC_3_FUNC_END	;达到允许最小值
       02E48 0C83     1     JBC  _STATUS , Z 
       02E49 1414     1     JMP  BOOK_FUNC_3_FUNC_END ,
   860            C        
   861 02E4A 01D1 C        	DEC	CURSOR
   862 02E4B 15EE C        	JMP	BOOK_FUNC_3_MKEY_NUM_DISP
   863            C        ;---------------------------------------
   864 02E4C      C        BOOK_FUNC_3_MKEY_DEL:		;删除当前值(将以CURSOR+1指向值为起点,23-CURSOR为长度的值前移一个byte,然后CURSOR也前移一个byte)
   865            C        	
   866 02E4C 0411 C        	MOV	A,CURSOR
   867            C      M 	JPZ	BOOK_FUNC_3_MKEY_DEL_1	;起点位置
       02E4D 0C83     1     JBC  _STATUS , Z 
       02E4E 1663     1     JMP  BOOK_FUNC_3_MKEY_DEL_1 ,
   868            C        ;---
   869            C      M 	BLOCK	1
       02E4F 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02E50 000A     1     IOW  _IOCA ,
   870            C        
   871 02E51 0511 C        	INCA	CURSOR
   872 02E52 1F68 C        	ADD	A,@NUM_START
   873 02E53 005C C        	MOV	OFFSET_S,A	;source address
   874            C        
   875 02E54 019C C        	DECA	OFFSET_S
   876 02E55 005D C        	MOV	OFFSET_D,A	;destination address
   877            C        
   878 02E56 0411 C        	MOV	A,CURSOR
   879 02E57 1D18 C        	SUB	A,@24
   880 02E58 005E C        	MOV	COUNT,A		;move length
   881            C        ;---	
   882 02E59 0411 C        	MOV	A,CURSOR	;Check if it in right side of string(the cursor is blank),if so move cursor only
   883 02E5A 012E C        	SUB	A,B1_CID_T
   884            C      M 	JPZ	BOOK_FUNC_3_MKEY_DEL_0
       02E5B 0C83     1     JBC  _STATUS , Z 
       02E5C 1661     1     JMP  BOOK_FUNC_3_MKEY_DEL_0 ,
   885            C        
   886            C      M 	LCALL	MOVE_DATA
                      2  M  PAGE #( MOVE_DATA ),
       02E5D 1E82     2     PAGE ( MOVE_DATA / 1024 ),
       02E5E 1056     1     CALL ( MOVE_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02E5F 1E8B     2     PAGE ( $ / 1024 ),
   887            C        ;---	
   888 02E60 01EE C        	DEC	B1_CID_T	;length
   889 02E61      C        BOOK_FUNC_3_MKEY_DEL_0:
   890 02E61 01D1 C        	DEC	CURSOR		;cursor offset
   891            C        ;---
   892 02E62 15EE C        	JMP	BOOK_FUNC_3_MKEY_NUM_DISP
   893 02E63      C        BOOK_FUNC_3_MKEY_DEL_1:		;起点位置为0
   894 02E63 042E C        	MOV	A,B1_CID_T
   895            C      M 	JPZ	BOOK_FUNC_3_FUNC_END	;总长度为0
       02E64 0C83     1     JBC  _STATUS , Z 
       02E65 1414     1     JMP  BOOK_FUNC_3_FUNC_END ,
   896            C        	
   897            C      M 	BLOCK	1
       02E66 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02E67 000A     1     IOW  _IOCA ,
   898            C        
   899            C      M 	MOV	OFFSET_S,@(NUM_START+1)	;source address
       02E68 1869     1     MOV A,@(( NUM_START + 1 ))
       02E69 005C     1     MOV  OFFSET_S ,A
   900            C      M 	MOV	OFFSET_D,@NUM_START	;destination address
       02E6A 1868     1     MOV A,@( NUM_START )
       02E6B 005D     1     MOV  OFFSET_D ,A
   901            C      M 	MOV	COUNT,B1_CID_T
       02E6C 042E     1     MOV A, B1_CID_T 
       02E6D 005E     1     MOV  COUNT ,A
   902            C      M 	LCALL	MOVE_DATA
                      2  M  PAGE #( MOVE_DATA ),
       02E6E 1E82     2     PAGE ( MOVE_DATA / 1024 ),
       02E6F 1056     1     CALL ( MOVE_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02E70 1E8B     2     PAGE ( $ / 1024 ),
   903            C        ;---	
   904 02E71 01EE C        	DEC	B1_CID_T	;length
   905            C        ;---
   906 02E72 15EE C        	JMP	BOOK_FUNC_3_MKEY_NUM_DISP
   907            C        ;---------------------------------------
   908 02E73      C        BOOK_FUNC_3_TMR:				;闪烁(闪烁点一定小于等于LENGTH2NDL,即编辑点靠右)
   909 02E73 0562 C        	INC	B1_PRO_VAR1
   910            C        	
   911 02E74 0422 C        	MOV	A,B1_PRO_VAR1
   912 02E75 1D14 C        	SUB	A,@20
   913            C      M 	JPZ	BOOK_FUNC_3_TMROUT	
       02E76 0C83     1     JBC  _STATUS , Z 
       02E77 1416     1     JMP  BOOK_FUNC_3_TMROUT ,
   914 02E78      C        BOOK_FUNC_3_BLINK:				;刷新闪烁点
   915            C        ;---find blink site
   916            C      M 	MOV	TEMP1,@(LENGTH2NDL-1)
       02E78 180E     1     MOV A,@(( LENGTH2NDL - 1 ))
       02E79 0056     1     MOV  TEMP1 ,A
   917            C        	
   918 02E7A 180F C        	MOV	A,@LENGTH2NDL
   919 02E7B 0111 C        	SUB	A,CURSOR
   920            C      M 	JPC	BOOK_FUNC_3_TMR_BLINKSITE	;找LCD闪烁点
       02E7C 0C03     1     JBC  _STATUS , C 
       02E7D 1680     1     JMP  BOOK_FUNC_3_TMR_BLINKSITE ,
   921            C        
   922            C      M 	MOV	TEMP1,CURSOR
       02E7E 0411     1     MOV A, CURSOR 
       02E7F 0056     1     MOV  TEMP1 ,A
   923 02E80      C        BOOK_FUNC_3_TMR_BLINKSITE:
   924            C      M 	MOV	TEMP0,@NUM_BLANK
       02E80 1800     1     MOV A,@( NUM_BLANK )
       02E81 0055     1     MOV  TEMP0 ,A
   925            C        	
   926            C      M 	JPNB	B1_PRO_VAR1,0,BOOK_FUNC_3_TMR_BLINKDATA
       02E82 0E22     1     JBS  B1_PRO_VAR1 , 0 
       02E83 1691     1     JMP  BOOK_FUNC_3_TMR_BLINKDATA ,
   927            C        
   928            C      M 	MOV	TEMP0,@NUM__
       02E84 183F     1     MOV A,@( NUM__ )
       02E85 0055     1     MOV  TEMP0 ,A
   929            C        	
   930 02E86 042E C        	MOV	A,B1_CID_T
   931 02E87 0111 C        	SUB	A,CURSOR
   932            C      M 	JPC	BOOK_FUNC_3_TMR_BLINKDATA	;找闪烁位置(CURSOR小于长度时,当前有效值闪烁;CURSOR等于长度时,"_"闪烁)
       02E88 0C03     1     JBC  _STATUS , C 
       02E89 1691     1     JMP  BOOK_FUNC_3_TMR_BLINKDATA ,
   933            C        ;---Get the data
   934            C      M 	BLOCK	1
       02E8A 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02E8B 000A     1     IOW  _IOCA ,
   935 02E8C 1868 C        	MOV	A,@NUM_START
   936 02E8D 0391 C        	ADD	A,CURSOR
   937 02E8E 004C C        	MOV	_RC,A
   938            C      M 	MOV	TEMP0,_RD
       02E8F 040D     1     MOV A, _RD 
       02E90 0055     1     MOV  TEMP0 ,A
   939            C        
   940 02E91      C        BOOK_FUNC_3_TMR_BLINKDATA:
   941            C        
   942            C      M 	BLOCK	0
       02E91 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02E92 000A     1     IOW  _IOCA ,
   943 02E93 188D C        	MOV	A,@LCD_2NDLINE	;base
   944 02E94 0396 C        	ADD	A,TEMP1		;offset
   945 02E95 004C C        	MOV	_RC,A
   946            C      M 	MOV	_RD,TEMP0	;data
       02E96 0415     1     MOV A, TEMP0 
       02E97 004D     1     MOV  _RD ,A
   947            C        
   948            C      M 	REFURBISH_2NDL
                      2  M  BLOCK  0 
       02E98 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02E99 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02E9A 1880     2     MOV A,@( LCD_CTRL )
       02E9B 004C     2     MOV  _RC ,A
       02E9C 0B8D     1     BS  _RD , 6 
   949            C        
   950 02E9D 1414 C        	JMP	BOOK_FUNC_3_FUNC_END
   951            C        ;-------------------------------------------------------------------------------
   952 02E9E      C        BOOK_FUNC_4_FUNC:			;ADD name
   953 02E9E 1880 C        	MOV 	A,@CMSG_MKEY
   954 02E9F 0120 C        	SUB 	A,B1_MSG
   955            C      M 	JPZ 	BOOK_FUNC_4_MKEY
       02EA0 0C83     1     JBC  _STATUS , Z 
       02EA1 16A7     1     JMP  BOOK_FUNC_4_MKEY ,
   956            C        	
   957 02EA2 1898 C        	MOV 	A,@CMSG_TMR
   958 02EA3 0120 C        	SUB 	A,B1_MSG
   959            C      M 	JPZ 	BOOK_FUNC_4_TMR
       02EA4 0C83     1     JBC  _STATUS , Z 
       02EA5 179E     1     JMP  BOOK_FUNC_4_TMR ,
   960            C        	
   961 02EA6 1414 C        	JMP	BOOK_FUNC_4_FUNC_END
   962            C        ;---------------------------------------
   963            C        ;In this function 
   964            C        ;	B1_MSG		=the current key value	
   965            C        ;	B1_MON_REG	=the repeat count
   966            C        ;	B1_MSG_N	=the char-code(the value we need)
   967            C        ;	B1_CID_T	=the length of the number
   968            C        ;	B1_CID_N	=the last key value
   969            C        ;	CURSOR		=the cursor offset
   970            C        ;
   971            C        ;---------------------------------------
   972 02EA7      C        BOOK_FUNC_4_MKEY:
   973            C        	
   974 02EA7 1814 C        	MOV	A,@CKEY_PBK
   975            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02EA8 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02EA9 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02EAA 1E8B     2     PAGE ( $ / 1024 ),
   976            C      M 	JPNC	BOOK_FUNC_4_MKEY_BOOK
       02EAB 0E03     1     JBS  _STATUS , C 
       02EAC 170E     1     JMP  BOOK_FUNC_4_MKEY_BOOK ,
   977            C        	
   978 02EAD 1821 C        	MOV	A,@CKEY_UP
   979            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02EAE 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02EAF 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02EB0 1E8B     2     PAGE ( $ / 1024 ),
   980            C      M 	JPNC	BOOK_FUNC_4_MKEY_UP
       02EB1 0E03     1     JBS  _STATUS , C 
       02EB2 1770     1     JMP  BOOK_FUNC_4_MKEY_UP ,
   981 02EB3 1822 C        	MOV	A,@CKEY_DWN
   982            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02EB4 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02EB5 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02EB6 1E8B     2     PAGE ( $ / 1024 ),
   983            C      M 	JPNC	BOOK_FUNC_4_MKEY_DWN
       02EB7 0E03     1     JBS  _STATUS , C 
       02EB8 1763     1     JMP  BOOK_FUNC_4_MKEY_DWN ,
   984 02EB9 1823 C        	MOV	A,@CKEY_DEL
   985            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02EBA 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02EBB 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02EBC 1E8B     2     PAGE ( $ / 1024 ),
   986            C      M 	JPNC	BOOK_FUNC_4_MKEY_DEL
       02EBD 0E03     1     JBS  _STATUS , C 
       02EBE 1778     1     JMP  BOOK_FUNC_4_MKEY_DEL ,
   987 02EBF 1813 C        	MOV	A,@CKEY_STP
   988            C      M 	LCALL	KEY_CHK
                      2  M  PAGE #( KEY_CHK ),
       02EC0 1E81     2     PAGE ( KEY_CHK / 1024 ),
       02EC1 10B2     1     CALL ( KEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02EC2 1E8B     2     PAGE ( $ / 1024 ),
   989            C      M 	JPNC	BOOK_FUNC_4_MKEY_STP
       02EC3 0E03     1     JBS  _STATUS , C 
       02EC4 14E1     1     JMP  BOOK_FUNC_4_MKEY_STP ,
   990            C        
   991            C      M 	LCALL	DIALKEY_CHK
                      2  M  PAGE #( DIALKEY_CHK ),
       02EC5 1E82     2     PAGE ( DIALKEY_CHK / 1024 ),
       02EC6 1203     1     CALL ( DIALKEY_CHK % 1024 ),
                      2  M  PAGE #( $ ),
       02EC7 1E8B     2     PAGE ( $ / 1024 ),
   992            C      M 	JPC	BOOK_FUNC_4_MKEY_DILNUM	;Num 
       02EC8 0C03     1     JBC  _STATUS , C 
       02EC9 16CB     1     JMP  BOOK_FUNC_4_MKEY_DILNUM ,
   993            C        	
   994 02ECA 1414 C        	JMP	BOOK_FUNC_4_FUNC_END
   995            C        ;---------------------------------------
   996 02ECB      C        BOOK_FUNC_4_MKEY_DILNUM:
   997 02ECB 0060 C        	MOV	B1_MSG,A	;Save the Key value(except *,#)
   998            C        
   999 02ECC 042F C        	MOV	A,B1_CID_N
  1000 02ECD 1BFF C        	XOR	A,@0XFF
  1001            C      M 	JPZ	BOOK_FUNC_4_MKEY_FIRST
       02ECE 0C83     1     JBC  _STATUS , Z 
       02ECF 16E1     1     JMP  BOOK_FUNC_4_MKEY_FIRST ,
  1002            C        ;-Not first char
  1003            C        ;---Check it is the same key(compare with last key)
  1004 02ED0 042F C        	MOV	A,B1_CID_N
  1005 02ED1 0120 C        	SUB	A,B1_MSG
  1006            C      M 	JPZ	BOOK_FUNC_4_MKEY_NUM	;Same KEY
       02ED2 0C83     1     JBC  _STATUS , Z 
       02ED3 16E2     1     JMP  BOOK_FUNC_4_MKEY_NUM ,
  1007            C        ;---Different Key
  1008 02ED4 00F7 C        	CLR	B1_MON_REG	;Clean the counter
  1009            C        ;---reflush cursor
  1010 02ED5 0422 C        	MOV	A,B1_PRO_VAR1
  1011 02ED6 1D04 C        	SUB	A,@4
  1012            C      M 	JPNC	BOOK_FUNC_4_MKEY_NUM	;5s time out(>=5)
       02ED7 0E03     1     JBS  _STATUS , C 
       02ED8 16E2     1     JMP  BOOK_FUNC_4_MKEY_NUM ,
  1013            C        
  1014 02ED9 0411 C        	MOV	A,CURSOR
  1015 02EDA 1D0E C        	SUB	A,@(LENGTH3RDL-1)
  1016            C      M 	JPZ	BOOK_FUNC_4_MKEY_NUM	;Different Key but the cursor is in the right side
       02EDB 0C83     1     JBC  _STATUS , Z 
       02EDC 16E2     1     JMP  BOOK_FUNC_4_MKEY_NUM ,
  1017            C        	
  1018            C      M 	JPB	B1_PRO_VAR,7,BOOK_FUNC_4_MKEY_NUM	;UP/DOWN key pressed don't update cursor offset
       02EDD 0DE1     1     JBC  B1_PRO_VAR , 7 
       02EDE 16E2     1     JMP  BOOK_FUNC_4_MKEY_NUM ,
  1019            C        ;---the condition(different key/less than 5s/not in the right side/DOWN,UP,DEL key pressed) is ok, then goto the next site
  1020 02EDF 0551 C        	INC	CURSOR			;reflush cursor
  1021 02EE0 16E2 C        	JMP	BOOK_FUNC_4_MKEY_NUM
  1022            C        
  1023 02EE1      C        BOOK_FUNC_4_MKEY_FIRST:			;Enter just now
  1024 02EE1 00F7 C        	CLR	B1_MON_REG		;Clean the counter
  1025            C        ;-----------------------------
  1026 02EE2      C        BOOK_FUNC_4_MKEY_NUM:
  1027 02EE2 00E2 C        	CLR	B1_PRO_VAR1		;Only num key can clear the counter(for cursor goto next site)
  1028            C        
  1029 02EE3 09E1 C        	BC	B1_PRO_VAR,7	;Reset flag, Enable update offset
  1030            C        
  1031 02EE4 0420 C        	MOV	A,B1_MSG		;Save the key-value
  1032 02EE5 006F C        	MOV	B1_CID_N,A
  1033            C        	
  1034 02EE6 0437 C        	MOV	A,B1_MON_REG
  1035 02EE7 0056 C        	MOV	TEMP1,A
  1036 02EE8 042F C        	MOV	A,B1_CID_N
  1037            C      M 	LCALL	GET_KEYCAHR
                      2  M  PAGE #( GET_KEYCAHR ),
       02EE9 1E81     2     PAGE ( GET_KEYCAHR / 1024 ),
       02EEA 1037     1     CALL ( GET_KEYCAHR % 1024 ),
                      2  M  PAGE #( $ ),
       02EEB 1E8B     2     PAGE ( $ / 1024 ),
  1038 02EEC 0071 C        	MOV	B1_MSG_N,A
  1039            C      M 	MOV	B1_MON_REG,TEMP1		;!!!!!
       02EED 0416     1     MOV A, TEMP1 
       02EEE 0077     1     MOV  B1_MON_REG ,A
  1040            C        
  1041 02EEF 0577 C        	INC	B1_MON_REG		;increase the counter after num-key pressed
  1042            C        ;-Save data
  1043            C      M 	BLOCK	1
       02EF0 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02EF1 000A     1     IOW  _IOCA ,
  1044 02EF2 1888 C        	MOV	A,@NAME_START		;Start address
  1045 02EF3 0391 C        	ADD	A,CURSOR		;offset address
  1046 02EF4 004C C        	MOV	_RC,A
  1047            C      M 	MOV	_RD,B1_MSG_N
       02EF5 0431     1     MOV A, B1_MSG_N 
       02EF6 004D     1     MOV  _RD ,A
  1048            C        ;-length adjust	
  1049 02EF7 042E C        	MOV	A,B1_CID_T
  1050 02EF8 1D0F C        	SUB	A,@15
  1051            C      M 	JPZ	BOOK_FUNC_4_MKEY_NUM_2
       02EF9 0C83     1     JBC  _STATUS , Z 
       02EFA 1700     1     JMP  BOOK_FUNC_4_MKEY_NUM_2 ,
  1052 02EFB 042E C        	MOV	A,B1_CID_T
  1053 02EFC 0111 C        	SUB	A,CURSOR
  1054            C      M 	JPNZ	BOOK_FUNC_4_MKEY_NUM_2
       02EFD 0E83     1     JBS  _STATUS , Z 
       02EFE 1700     1     JMP  BOOK_FUNC_4_MKEY_NUM_2 ,
  1055            C        	
  1056 02EFF 056E C        	INC	B1_CID_T
  1057 02F00      C        BOOK_FUNC_4_MKEY_NUM_2:
  1058            C        ;-----------------------------
  1059 02F00      C        BOOK_FUNC_4_MKEY_NUM_DISP:		;when cursor at the right side
  1060            C      M 	PAGE	#(VGABLANKCHAR)
       02F00 1E8C     1     PAGE ( VGABLANKCHAR / 1024 ),
  1061 02F01 1127 C        	CALL	VGABLANKCHAR
  1062            C      M 	MOV	BASE_ADDR,@0X10	
       02F02 1810     1     MOV A,@( 16 )
       02F03 005F     1     MOV  BASE_ADDR ,A
  1063            C        
  1064            C      M 	MOV	OFFSET_S,@NAME_START	;source address
       02F04 1888     1     MOV A,@( NAME_START )
       02F05 005C     1     MOV  OFFSET_S ,A
  1065            C      M 	MOV	OFFSET_D,@LCD_3RDLINE	;destination address
       02F06 189C     1     MOV A,@( LCD_3RDLINE )
       02F07 005D     1     MOV  OFFSET_D ,A
  1066            C      M 	MOV	COUNT,B1_CID_T		;length
       02F08 042E     1     MOV A, B1_CID_T 
       02F09 005E     1     MOV  COUNT ,A
  1067            C      M 	LCALL	COPY_DATA	
                      2  M  PAGE #( COPY_DATA ),
       02F0A 1E82     2     PAGE ( COPY_DATA / 1024 ),
       02F0B 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02F0C 1E8B     2     PAGE ( $ / 1024 ),
  1068            C        	
  1069 02F0D 1414 C        	JMP	BOOK_FUNC_4_FUNC_END
  1070            C        ;---------------------------------------
  1071 02F0E      C        BOOK_FUNC_4_MKEY_BOOK:	
  1072            C        ;---the length
  1073            C      M 	BLOCK	1
       02F0E 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02F0F 000A     1     IOW  _IOCA ,
  1074            C      M 	MOV	_RC,@NAME_FLAG
       02F10 1863     1     MOV A,@( NAME_FLAG )
       02F11 004C     1     MOV  _RC ,A
  1075 02F12 042E C        	MOV	A,B1_CID_T
  1076 02F13 004D C        	MOV	_RD,A
  1077            C        ;---Display
  1078            C      M 	PAGE	#(VGABLANKCHAR)
       02F14 1E8C     1     PAGE ( VGABLANKCHAR / 1024 ),
  1079 02F15 1127 C        	CALL	VGABLANKCHAR
  1080            C      M 	MOV	BASE_ADDR,@0X10	
       02F16 1810     1     MOV A,@( 16 )
       02F17 005F     1     MOV  BASE_ADDR ,A
  1081            C        
  1082            C      M 	MOV	OFFSET_S,@NAME_START	;source address
       02F18 1888     1     MOV A,@( NAME_START )
       02F19 005C     1     MOV  OFFSET_S ,A
  1083            C      M 	MOV	OFFSET_D,@LCD_3RDLINE	;destination address
       02F1A 189C     1     MOV A,@( LCD_3RDLINE )
       02F1B 005D     1     MOV  OFFSET_D ,A
  1084            C      M 	MOV	COUNT,B1_CID_T		;length
       02F1C 042E     1     MOV A, B1_CID_T 
       02F1D 005E     1     MOV  COUNT ,A
  1085            C      M 	PAGE	#(COPY_DATA)
       02F1E 1E82     1     PAGE ( COPY_DATA / 1024 ),
  1086 02F1F 1085 C        	CALL	COPY_DATA	
  1087            C        ;---
  1088 02F20 00D1 C        	CLR	CURSOR
  1089 02F21 00E2 C        	CLR	B1_PRO_VAR1
  1090 02F22 00EE C        	CLR	B1_CID_T
  1091            C      M 	MOV	B1_PRO_VAR,@0X04
       02F23 1804     1     MOV A,@( 4 )
       02F24 0061     1     MOV  B1_PRO_VAR ,A
  1092            C      M 	PAGE	#(CLR_TIMER)
       02F25 1E8D     1     PAGE ( CLR_TIMER / 1024 ),
  1093 02F26 1358 C        	CALL	CLR_TIMER
  1094            C        	
  1095 02F27 1811 C        	MOV	A,@GROUP_BOOK
  1096            C      M 	PAGE	#(SET_GROUP)
       02F28 1E83     1     PAGE ( SET_GROUP / 1024 ),
  1097 02F29 1241 C        	CALL	SET_GROUP
  1098            C      M 	PAGE	#($)
       02F2A 1E8B     1     PAGE ( $ / 1024 ),
  1099            C        	
  1100 02F2B 0432 C        	MOV	A,B1_MSG_ID
  1101            C      M 	JPZ	BOOK_FUNC_4_CHKMEM	;Is it in edit status ?
       02F2C 0C83     1     JBC  _STATUS , Z 
       02F2D 173A     1     JMP  BOOK_FUNC_4_CHKMEM ,
  1102            C        ;---Edit status delete old one first
  1103 02F2E 0432 C        	MOV	A,B1_MSG_ID
  1104            C      M 	PAGE	#(TRSLATE_TABTODSP)
       02F2F 1E8E     1     PAGE ( TRSLATE_TABTODSP / 1024 ),
  1105 02F30 12C8 C        	CALL	TRSLATE_TABTODSP
  1106            C      M 	PAGE	#(DEL_TEL)
       02F31 1E83     1     PAGE ( DEL_TEL / 1024 ),
  1107 02F32 124B C        	CALL	DEL_TEL	
  1108            C        	
  1109            C      M 	PAGE	#(GET_TELT)
       02F33 1E83     1     PAGE ( GET_TELT / 1024 ),
  1110 02F34 1246 C        	CALL	GET_TELT
  1111 02F35 0415 C        	MOV	A,TEMP0
  1112 02F36 006E C        	MOV	B1_CID_T,A	;Total tel record
  1113            C        	
  1114            C      M 	PAGE	#(IDXTAB_DEL)
       02F37 1E8E     1     PAGE ( IDXTAB_DEL / 1024 ),
  1115 02F38 139F C        	CALL	IDXTAB_DEL
  1116 02F39 132D C        	CALL	IDXTAB_WRITE
  1117            C        ;!!!!!!	
  1118 02F3A      C        BOOK_FUNC_4_CHKMEM:	
  1119            C        	
  1120            C      M 	PAGE	#(GET_TELT)
       02F3A 1E83     1     PAGE ( GET_TELT / 1024 ),
  1121 02F3B 1246 C        	CALL	GET_TELT
  1122 02F3C 0415 C        	MOV	A,TEMP0
  1123 02F3D 1D77 C        	SUB	A,@(CMAX_BOOK-1)
  1124            C      M 	JPNC	BOOK_FUNC_4_MEMFUL	;Over the maxumer number
       02F3E 0E03     1     JBS  _STATUS , C 
       02F3F 1762     1     JMP  BOOK_FUNC_4_MEMFUL ,
  1125            C        ;???????????????????????????????????????
  1126            C        /*
  1127            C        	PAGE	#(SET_INITTEL0IDX)
  1128            C        	CALL	SET_INITTEL0IDX
  1129            C        */
  1130            C        ;???????????????????????????????????????
  1131            C        
  1132            C      M 	MOV	OFFSET_S,@DATA_ZONE_START		;start address
       02F40 1860     1     MOV A,@( DATA_ZONE_START )
       02F41 005C     1     MOV  OFFSET_S ,A
  1133            C      M 	MOV	COUNT,@(DATA_ZONE_END-DATA_ZONE_START)	;length(58bytes)
       02F42 183A     1     MOV A,@(( DATA_ZONE_END - DATA_ZONE_START ))
       02F43 005E     1     MOV  COUNT ,A
  1134 02F44      C        BOOK_FUNC_4_MKEY_BOOK_INTOFLASH:
  1135            C      M 	BLOCK	1
       02F44 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02F45 000A     1     IOW  _IOCA ,
  1136            C        	
  1137            C      M 	MOV	_RC,OFFSET_S
       02F46 041C     1     MOV A, OFFSET_S 
       02F47 004C     1     MOV  _RC ,A
  1138 02F48 040D C        	MOV	A,_RD
  1139            C      M 	LCALL	DAT_WRITE
                      2  M  PAGE #( DAT_WRITE ),
       02F49 1E83     2     PAGE ( DAT_WRITE / 1024 ),
       02F4A 124F     1     CALL ( DAT_WRITE % 1024 ),
                      2  M  PAGE #( $ ),
       02F4B 1E8B     2     PAGE ( $ / 1024 ),
  1140            C        	
  1141 02F4C 055C C        	INC	OFFSET_S
  1142            C        	
  1143 02F4D 01DE C        	DEC	COUNT
  1144 02F4E 041E C        	MOV	A,COUNT
  1145            C      M 	JPNZ	BOOK_FUNC_4_MKEY_BOOK_INTOFLASH
       02F4F 0E83     1     JBS  _STATUS , Z 
       02F50 1744     1     JMP  BOOK_FUNC_4_MKEY_BOOK_INTOFLASH ,
  1146            C        	
  1147 02F51      C        BOOK_FUNC_4_MKEY_BOOK_INTOFLASH_END:
  1148            C      M 	PAGE	#(DAT_WRITE_STOP)
       02F51 1E83     1     PAGE ( DAT_WRITE_STOP / 1024 ),
  1149 02F52 1253 C        	CALL	DAT_WRITE_STOP
  1150            C        	
  1151            C      M 	PAGE	#(GET_TELT)
       02F53 1E83     1     PAGE ( GET_TELT / 1024 ),
  1152 02F54 1246 C        	CALL	GET_TELT
  1153 02F55 0415 C        	MOV	A,TEMP0
  1154 02F56 006E C        	MOV	B1_CID_T,A	;the total number
  1155            C        ;---update the index-table	
  1156            C      M 	PAGE	#(IDXTAB_ADD)
       02F57 1E8E     1     PAGE ( IDXTAB_ADD / 1024 ),
  1157 02F58 1361 C        	CALL	IDXTAB_ADD
  1158 02F59 132D C        	CALL	IDXTAB_WRITE
  1159            C        
  1160 02F5A 1820 C        	MOV	A,@CTMR2S
  1161            C      M 	LCALL	SET_TIMER
                      2  M  PAGE #( SET_TIMER ),
       02F5B 1E8D     2     PAGE ( SET_TIMER / 1024 ),
       02F5C 1359     1     CALL ( SET_TIMER % 1024 ),
                      2  M  PAGE #( $ ),
       02F5D 1E8B     2     PAGE ( $ / 1024 ),
  1162            C        
  1163 02F5E 1801 C        	MOV	A,@1
  1164 02F5F 0071 C        	MOV	B1_MSG_N,A
  1165 02F60 0061 C        	MOV	B1_PRO_VAR,A
  1166 02F61 1414 C        	JMP	BOOK_FUNC_4_FUNC_END
  1167            C        ;-------------------
  1168 02F62      C        BOOK_FUNC_4_MEMFUL:
  1169 02F62 1414 C        	JMP	BOOK_FUNC_4_FUNC_END
  1170            C        ;---------------------------------------
  1171 02F63      C        BOOK_FUNC_4_MKEY_DWN:
  1172 02F63 0BE1 C        	BS	B1_PRO_VAR,7	;Set flag, don't update offset
  1173 02F64 00E2 C        	CLR	B1_PRO_VAR1	;Clean time counter
  1174 02F65 00F7 C        	CLR	B1_MON_REG	;Clean key counter
  1175            C        	
  1176 02F66 0411 C        	MOV	A,CURSOR
  1177 02F67 1D0E C        	SUB	A,@14
  1178            C      M 	JPZ	BOOK_FUNC_4_FUNC_END	;达到允许最大值
       02F68 0C83     1     JBC  _STATUS , Z 
       02F69 1414     1     JMP  BOOK_FUNC_4_FUNC_END ,
  1179            C        	
  1180 02F6A 042E C        	MOV	A,B1_CID_T
  1181 02F6B 0111 C        	SUB	A,CURSOR
  1182            C      M 	JPZ	BOOK_FUNC_4_FUNC_END	;达到实际最大值的下一位(偏移+1=长度)
       02F6C 0C83     1     JBC  _STATUS , Z 
       02F6D 1414     1     JMP  BOOK_FUNC_4_FUNC_END ,
  1183            C        	
  1184 02F6E 0551 C        	INC	CURSOR
  1185            C        	
  1186 02F6F 1700 C        	JMP	BOOK_FUNC_4_MKEY_NUM_DISP
  1187            C        ;---------------------------------------
  1188 02F70      C        BOOK_FUNC_4_MKEY_UP:
  1189            C        
  1190 02F70 0BE1 C        	BS	B1_PRO_VAR,7	;Set flag, don't update offset
  1191 02F71 00E2 C        	CLR	B1_PRO_VAR1	;Clean time counter
  1192 02F72 00F7 C        	CLR	B1_MON_REG	;Clean key counter
  1193            C        	
  1194 02F73 0411 C        	MOV	A,CURSOR
  1195            C      M 	JPZ	BOOK_FUNC_4_FUNC_END	;达到允许最小值
       02F74 0C83     1     JBC  _STATUS , Z 
       02F75 1414     1     JMP  BOOK_FUNC_4_FUNC_END ,
  1196            C        
  1197 02F76 01D1 C        	DEC	CURSOR
  1198            C        
  1199 02F77 1700 C        	JMP	BOOK_FUNC_4_MKEY_NUM_DISP
  1200            C        ;---------------------------------------
  1201 02F78      C        BOOK_FUNC_4_MKEY_DEL:
  1202 02F78 0BE1 C        	BS	B1_PRO_VAR,7	;Set flag, don't update offset
  1203 02F79 00E2 C        	CLR	B1_PRO_VAR1	;Clean time counter
  1204 02F7A 00F7 C        	CLR	B1_MON_REG	;Clean key counter
  1205            C        	
  1206 02F7B 0411 C        	MOV	A,CURSOR
  1207            C      M 	JPZ	BOOK_FUNC_4_MKEY_DEL_1	;起点位置
       02F7C 0C83     1     JBC  _STATUS , Z 
       02F7D 178E     1     JMP  BOOK_FUNC_4_MKEY_DEL_1 ,
  1208            C        	
  1209            C      M 	BLOCK	1
       02F7E 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02F7F 000A     1     IOW  _IOCA ,
  1210            C        
  1211 02F80 0511 C        	INCA	CURSOR
  1212 02F81 1F88 C        	ADD	A,@NAME_START
  1213 02F82 005C C        	MOV	OFFSET_S,A	;source address
  1214            C        
  1215 02F83 019C C        	DECA	OFFSET_S
  1216 02F84 005D C        	MOV	OFFSET_D,A	;destination address
  1217            C        
  1218 02F85 0411 C        	MOV	A,CURSOR
  1219 02F86 1D0F C        	SUB	A,@15
  1220 02F87 005E C        	MOV	COUNT,A		;length
  1221            C        
  1222            C      M 	LCALL	MOVE_DATA
                      2  M  PAGE #( MOVE_DATA ),
       02F88 1E82     2     PAGE ( MOVE_DATA / 1024 ),
       02F89 1056     1     CALL ( MOVE_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02F8A 1E8B     2     PAGE ( $ / 1024 ),
  1223            C        ;---	
  1224 02F8B 01D1 C        	DEC	CURSOR		;cursor offset
  1225 02F8C 01EE C        	DEC	B1_CID_T	;length
  1226            C        ;---
  1227 02F8D 1700 C        	JMP	BOOK_FUNC_4_MKEY_NUM_DISP
  1228 02F8E      C        BOOK_FUNC_4_MKEY_DEL_1:		;起点位置为0
  1229            C        	
  1230 02F8E 042E C        	MOV	A,B1_CID_T
  1231            C      M 	JPZ	BOOK_FUNC_4_FUNC_END	;总长度为0
       02F8F 0C83     1     JBC  _STATUS , Z 
       02F90 1414     1     JMP  BOOK_FUNC_4_FUNC_END ,
  1232            C        	
  1233            C      M 	BLOCK	1
       02F91 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02F92 000A     1     IOW  _IOCA ,
  1234            C        
  1235            C      M 	MOV	OFFSET_S,@(NAME_START+1)	;source address
       02F93 1889     1     MOV A,@(( NAME_START + 1 ))
       02F94 005C     1     MOV  OFFSET_S ,A
  1236            C      M 	MOV	OFFSET_D,@NAME_START	;destination address
       02F95 1888     1     MOV A,@( NAME_START )
       02F96 005D     1     MOV  OFFSET_D ,A
  1237            C      M 	MOV	COUNT,B1_CID_T
       02F97 042E     1     MOV A, B1_CID_T 
       02F98 005E     1     MOV  COUNT ,A
  1238            C      M 	LCALL	MOVE_DATA
                      2  M  PAGE #( MOVE_DATA ),
       02F99 1E82     2     PAGE ( MOVE_DATA / 1024 ),
       02F9A 1056     1     CALL ( MOVE_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02F9B 1E8B     2     PAGE ( $ / 1024 ),
  1239            C        ;---	
  1240 02F9C 01EE C        	DEC	B1_CID_T	;length
  1241            C        ;---
  1242 02F9D 1700 C        	JMP	BOOK_FUNC_4_MKEY_NUM_DISP
  1243            C        ;---------------------------------------
  1244 02F9E      C        BOOK_FUNC_4_TMR:
  1245 02F9E 0562 C        	INC	B1_PRO_VAR1
  1246            C        	
  1247 02F9F 0422 C        	MOV	A,B1_PRO_VAR1
  1248 02FA0 1D14 C        	SUB	A,@20
  1249            C      M 	JPZ	BOOK_FUNC_4_TMROUT
       02FA1 0C83     1     JBC  _STATUS , Z 
       02FA2 1416     1     JMP  BOOK_FUNC_4_TMROUT ,
  1250            C        ;---check reflush cursor	
  1251 02FA3 042F C        	MOV	A,B1_CID_N
  1252 02FA4 1DFF C        	SUB	A,@0XFF
  1253            C      M 	JPZ	BOOK_FUNC_4_TMR_1	;Enter just now(Can't update cursor offset)
       02FA5 0C83     1     JBC  _STATUS , Z 
       02FA6 17C6     1     JMP  BOOK_FUNC_4_TMR_1 ,
  1254            C        
  1255 02FA7 0422 C        	MOV	A,B1_PRO_VAR1
  1256 02FA8 1D05 C        	SUB	A,@5
  1257            C      M 	JPNZ	BOOK_FUNC_4_TMR_1	;5s time out
       02FA9 0E83     1     JBS  _STATUS , Z 
       02FAA 17C6     1     JMP  BOOK_FUNC_4_TMR_1 ,
  1258            C        	
  1259            C        
  1260            C        ;---Check update cursor condition	
  1261 02FAB 0411 C        	MOV	A,CURSOR
  1262 02FAC 012E C        	SUB	A,B1_CID_T	
  1263            C      M 	JPNC	BOOK_FUNC_4_TMR_1	;in the end of number ?
       02FAD 0E03     1     JBS  _STATUS , C 
       02FAE 17C6     1     JMP  BOOK_FUNC_4_TMR_1 ,
  1264            C        	
  1265 02FAF 0411 C        	MOV	A,CURSOR
  1266 02FB0 1D0E C        	SUB	A,@(LENGTH3RDL-1)
  1267            C      M 	JPZ	BOOK_FUNC_4_TMR_1	;in the right of side ?
       02FB1 0C83     1     JBC  _STATUS , Z 
       02FB2 17C6     1     JMP  BOOK_FUNC_4_TMR_1 ,
  1268            C        ;
  1269            C      M 	JPB	B1_PRO_VAR,7,BOOK_FUNC_4_TMR_1	;update cursor offset is forbiden
       02FB3 0DE1     1     JBC  B1_PRO_VAR , 7 
       02FB4 17C6     1     JMP  BOOK_FUNC_4_TMR_1 ,
  1270            C        	
  1271 02FB5      C        BOOK_FUNC_4_TMR_DISPALL:
  1272            C        ;Display all
  1273            C      M 	PAGE	#(VGABLANKCHAR)
       02FB5 1E8C     1     PAGE ( VGABLANKCHAR / 1024 ),
  1274 02FB6 1127 C        	CALL	VGABLANKCHAR
  1275            C      M 	MOV	BASE_ADDR,@0X10	
       02FB7 1810     1     MOV A,@( 16 )
       02FB8 005F     1     MOV  BASE_ADDR ,A
  1276            C        
  1277            C      M 	MOV	OFFSET_S,@NAME_START	;source address
       02FB9 1888     1     MOV A,@( NAME_START )
       02FBA 005C     1     MOV  OFFSET_S ,A
  1278            C      M 	MOV	OFFSET_D,@LCD_3RDLINE	;destination address
       02FBB 189C     1     MOV A,@( LCD_3RDLINE )
       02FBC 005D     1     MOV  OFFSET_D ,A
  1279            C      M 	MOV	COUNT,B1_CID_T		;length
       02FBD 042E     1     MOV A, B1_CID_T 
       02FBE 005E     1     MOV  COUNT ,A
  1280            C      M 	LCALL	COPY_DATA	
                      2  M  PAGE #( COPY_DATA ),
       02FBF 1E82     2     PAGE ( COPY_DATA / 1024 ),
       02FC0 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       02FC1 1E8B     2     PAGE ( $ / 1024 ),
  1281            C        
  1282 02FC2 0437 C        	MOV	A,B1_MON_REG
  1283 02FC3 1AF0 C        	AND	A,@0XF0
  1284 02FC4 0077 C        	MOV	B1_MON_REG,A
  1285            C        
  1286 02FC5 0551 C        	INC	CURSOR			;reflush cursor
  1287 02FC6      C        BOOK_FUNC_4_TMR_1:
  1288            C        ;---find blink site	
  1289            C      M 	MOV	TEMP1,@(LENGTH3RDL-1)
       02FC6 180E     1     MOV A,@(( LENGTH3RDL - 1 ))
       02FC7 0056     1     MOV  TEMP1 ,A
  1290            C        
  1291 02FC8 180E C        	MOV	A,@(LENGTH3RDL-1)
  1292 02FC9 0111 C        	SUB	A,CURSOR
  1293            C      M 	JPC	BOOK_FUNC_4_TMR_BLINKSITE	;找LCD闪烁点
       02FCA 0C03     1     JBC  _STATUS , C 
       02FCB 17CE     1     JMP  BOOK_FUNC_4_TMR_BLINKSITE ,
  1294            C        
  1295            C      M 	MOV	TEMP1,CURSOR
       02FCC 0411     1     MOV A, CURSOR 
       02FCD 0056     1     MOV  TEMP1 ,A
  1296 02FCE      C        BOOK_FUNC_4_TMR_BLINKSITE:
  1297            C        ;---the LCD-corsur on or not
  1298            C      M 	MOV	TEMP0,@CH_BLANK
       02FCE 1800     1     MOV A,@( CH_BLANK )
       02FCF 0055     1     MOV  TEMP0 ,A
  1299            C        	
  1300            C      M 	JPNB	B1_PRO_VAR1,0,BOOK_FUNC_4_TMR_BLINKDATA	;even number then blank
       02FD0 0E22     1     JBS  B1_PRO_VAR1 , 0 
       02FD1 17E4     1     JMP  BOOK_FUNC_4_TMR_BLINKDATA ,
  1301            C        ;---Now it is to time to on
  1302            C      M 	MOV	TEMP0,@CH__
       02FD2 183F     1     MOV A,@( CH__ )
       02FD3 0055     1     MOV  TEMP0 ,A
  1303            C        	
  1304 02FD4 042E C        	MOV	A,B1_CID_T
  1305 02FD5 0111 C        	SUB	A,CURSOR
  1306            C      M 	JPC	BOOK_FUNC_4_TMR_BLINKDATA	;找闪烁位置(CURSOR小于长度时,当前有效值闪烁;CURSOR等于长度时,"_"闪烁)
       02FD6 0C03     1     JBC  _STATUS , C 
       02FD7 17E4     1     JMP  BOOK_FUNC_4_TMR_BLINKDATA ,
  1307            C        ;---Get the data
  1308            C      M 	BLOCK	1
       02FD8 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       02FD9 000A     1     IOW  _IOCA ,
  1309 02FDA 1888 C        	MOV	A,@NAME_START
  1310 02FDB 0391 C        	ADD	A,CURSOR
  1311 02FDC 004C C        	MOV	_RC,A
  1312 02FDD 040D C        	MOV	A,_RD
  1313 02FDE 0055 C        	MOV	TEMP0,A
  1314            C        	
  1315 02FDF 1D00 C        	SUB	A,@CH_BLANK	;
  1316            C      M 	JPNZ	BOOK_FUNC_4_TMR_BLINKDATA
       02FE0 0E83     1     JBS  _STATUS , Z 
       02FE1 17E4     1     JMP  BOOK_FUNC_4_TMR_BLINKDATA ,
  1317            C        	
  1318            C      M 	MOV	TEMP0,@CH__
       02FE2 183F     1     MOV A,@( CH__ )
       02FE3 0055     1     MOV  TEMP0 ,A
  1319            C        ;-
  1320 02FE4      C        BOOK_FUNC_4_TMR_BLINKDATA:
  1321            C        
  1322            C      M 	REFURBISH_3RDL
                      2  M  BLOCK  0 
       02FE4 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       02FE5 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       02FE6 1880     2     MOV A,@( LCD_CTRL )
       02FE7 004C     2     MOV  _RC ,A
       02FE8 0BCD     1     BS  _RD , 7 
  1323            C        
  1324            C        	;BLOCK	0
  1325 02FE9 189C C        	MOV	A,@LCD_3RDLINE	;base
  1326 02FEA 0396 C        	ADD	A,TEMP1		;offset
  1327 02FEB 004C C        	MOV	_RC,A
  1328            C      M 	MOV	_RD,TEMP0	;data
       02FEC 0415     1     MOV A, TEMP0 
       02FED 004D     1     MOV  _RD ,A
  1329            C        	
  1330 02FEE 1414 C        	JMP	BOOK_FUNC_4_FUNC_END
  1331            C        ;-------------------------------------------------------------------------------
  1332            C        	
   626                     ;-------------------------------------------------------------------------------
   627                     ;page12
   628                     INCLUDE		"vga.dt"
     1            C        
     2            C        ORG	(12<<10)
     3            C        ;-------------------------------------------------------------------------------
     4 03000      C        VGA:
     5            C        ;-------------------------------------------------------------------------------
     6 03000      C        VGASTAMP1:
     7 03000 0055 C        	MOV	TEMP0,A
     8            C      M 	MOV	_RC,@(LCD_CTRL+OFFSETSTMP)
       03001 1881     1     MOV A,@(( LCD_CTRL + OFFSETSTMP ))
       03002 004C     1     MOV  _RC ,A
     9 03003 1407 C        	JMP	VGASTAMP
    10 03004      C        VGASTAMP2:
    11 03004 0055 C        	MOV	TEMP0,A
    12            C      M 	MOV	_RC,@(LCD_CTRL+OFFSETSTMP+1)
       03005 1882     1     MOV A,@((( LCD_CTRL + OFFSETSTMP )+ 1 ))
       03006 004C     1     MOV  _RC ,A
    13            C        
    14 03007      C        VGASTAMP:
    15            C      M 	BLOCK	0
       03007 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       03008 000A     1     IOW  _IOCA ,
    16 03009 0415 C        	MOV	A,TEMP0
    17 0300A 024D C        	OR	_RD,A
    18 0300B 0012 C        	RET
    19            C        ;-------------------------------------------------------------------------------
    20            C        /*
    21            C        GET_VGASTAMP1:
    22            C        	MOV	_RC,@(LCD_CTRL+OFFSETSTMP)
    23            C        	JMP	GET_VGASTAMP
    24            C        GET_VGASTAMP2:
    25            C        	MOV	_RC,@(LCD_CTRL+OFFSETSTMP+1)
    26            C        	;JMP	GET_VGASTAMP
    27            C        GET_VGASTAMP:
    28            C        	BLOCK	0
    29            C        	MOV	A,_RD
    30            C        	RET
    31            C        */
    32            C        ;-------------------------------------------------------------------------------
    33 0300C      C        CLRVGASTAMP1:
    34 0300C 0055 C        	MOV	TEMP0,A
    35            C      M 	MOV	_RC,@(LCD_CTRL+OFFSETSTMP)
       0300D 1881     1     MOV A,@(( LCD_CTRL + OFFSETSTMP ))
       0300E 004C     1     MOV  _RC ,A
    36 0300F 1413 C        	JMP	CLRVGASTAMP
    37 03010      C        CLRVGASTAMP2:
    38 03010 0055 C        	MOV	TEMP0,A
    39            C      M 	MOV	_RC,@(LCD_CTRL+OFFSETSTMP+1)
       03011 1882     1     MOV A,@((( LCD_CTRL + OFFSETSTMP )+ 1 ))
       03012 004C     1     MOV  _RC ,A
    40            C        
    41 03013      C        CLRVGASTAMP:
    42            C      M 	BLOCK	0
       03013 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       03014 000A     1     IOW  _IOCA ,
    43            C        
    44 03015 0415 C        	MOV	A,TEMP0
    45 03016 02CD C        	AND	_RD,A	
    46            C        	
    47 03017 0012 C        	RET
    48            C        
    49            C        
    50            C        ;-------------------------------------------------------------------------------
    51            C        ;	input : acc = value
    52            C        ;	output:	
    53            C        ;-------------------------------------------------------------------------------
    54 03018      C        VGANUM1:
    55 03018 0055 C        	MOV	TEMP0,A
    56            C      M 	MOV	TEMP1,@(LENGTH1STL)
       03019 180A     1     MOV A,@( LENGTH1STL )
       0301A 0056     1     MOV  TEMP1 ,A
    57            C        
    58 0301B 18B7 C        	MOV	A,@(LCD_1CBUF_CTRL)
    59 0301C 0057 C        	MOV	TEMP2,A
    60 0301D 004C C        	MOV	_RC,A
    61            C        	
    62 0301E 142D C        	JMP	VGALCD
    63            C        ;-------------------------------------------------------------------------------
    64            C        ;	input : acc = value
    65            C        ;	output:	
    66            C        ;-------------------------------------------------------------------------------
    67 0301F      C        VGANUM2:
    68 0301F 0055 C        	MOV	TEMP0,A
    69            C      M 	MOV	TEMP1,@(LENGTH2NDL)
       03020 180F     1     MOV A,@( LENGTH2NDL )
       03021 0056     1     MOV  TEMP1 ,A
    70            C        	
    71 03022 18C4 C        	MOV	A,@(LCD_2CBUF_CTRL)
    72 03023 0057 C        	MOV	TEMP2,A
    73 03024 004C C        	MOV	_RC,A
    74            C        	
    75 03025 142D C        	JMP	VGALCD
    76            C        ;-------------------------------------------------------------------------------
    77            C        ;	input : acc = value
    78            C        ;	output:	
    79            C        ;-------------------------------------------------------------------------------
    80 03026      C        VGACHAR:
    81 03026 0055 C        	MOV	TEMP0,A
    82            C      M 	MOV	TEMP1,@(LENGTH3RDL)
       03027 180F     1     MOV A,@( LENGTH3RDL )
       03028 0056     1     MOV  TEMP1 ,A
    83            C        	
    84 03029 18D6 C        	MOV	A,@(LCD_3CBUF_CTRL)	
    85 0302A 0057 C        	MOV	TEMP2,A
    86 0302B 004C C        	MOV	_RC,A
    87            C        
    88 0302C 142D C        	JMP	VGALCD
    89            C        ;---------------------------------------
    90 0302D      C        VGALCD:					;至此TEMP0是待保存的值,_RC对应控制标志地址索引
    91            C        
    92            C      M 	BLOCK	0
       0302D 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0302E 000A     1     IOW  _IOCA ,
    93 0302F 0415 C        	MOV	A,TEMP0
    94 03030 1BFF C        	XOR	A,@CH_END		;送到的值是结束符吗?(Note CH_END=NUM_END)
    95            C      M 	JPZ	VGALCD_END
       03031 0C83     1     JBC  _STATUS , Z 
       03032 147C     1     JMP  VGALCD_END ,
    96            C      M 	JPNB	_RD,7,VGALCD_BEGIN	;查控制标志
       03033 0FCD     1     JBS  _RD , 7 
       03034 1448     1     JMP  VGALCD_BEGIN ,
    97            C      M 	JPB	_RD,5,VGALCD_TOBCD	;查BCD转换标志(this digital must use 2)
       03035 0D4D     1     JBC  _RD , 5 
       03036 1452     1     JMP  VGALCD_TOBCD ,
    98 03037      C        VGALCD_STOR:
    99            C      M 	ADD	_RC,@2			;此时_RC是指针的指针
       03037 1802     1     MOV A,@( 2 )
       03038 03CC     1     ADD  _RC ,A
   100            C      M 	SUBA	_RD,TEMP1		;查指针超过最大长度了吗?(11>10/16>15/16>15)
       03039 0416     1     MOV A, TEMP1 
       0303A 010D     1     SUB A, _RD 
   101            C      M 	JPC	VGALCD_FULL
       0303B 0C03     1     JBC  _STATUS , C 
       0303C 1443     1     JMP  VGALCD_FULL ,
   102            C        
   103 0303D 054D C        	INC	_RD			;指针值加1
   104            C      M 	ADD	_RC,_RD		;!!!在指针索引的基础上加入索引值
       0303E 040D     1     MOV A, _RD 
       0303F 03CC     1     ADD  _RC ,A
   105            C      M 	MOV	_RD,TEMP0
       03040 0415     1     MOV A, TEMP0 
       03041 004D     1     MOV  _RD ,A
   106 03042 0012 C        	RET
   107            C        ;-----------------------------	
   108 03043      C        VGALCD_FULL:
   109 03043 00CD C        	CLR	_RD			;指针清空;(注意指针不能为0,因为基址是指针的地址)
   110            C        	
   111            C      M 	MOV	_RC,TEMP2
       03044 0417     1     MOV A, TEMP2 
       03045 004C     1     MOV  _RC ,A
   112 03046 0B8D C        	BS	_RD,6			;set loopback flag
   113            C        	
   114            C        	
   115 03047 1437 C        	JMP	VGALCD_STOR
   116            C        	
   117            C        ;---------------------------------------
   118 03048      C        VGALCD_BEGIN:				;No start-flag,then clear all data except flag
   119            C      M 	MOV	_RD,TEMP0		;stor flag
       03048 0415     1     MOV A, TEMP0 
       03049 004D     1     MOV  _RD ,A
   120            C        	
   121 0304A 054C C        	INC	_RC			;start address
   122            C      M 	ADD	TEMP1,@2		;length(head-point,tail-point,data-zone)
       0304B 1802     1     MOV A,@( 2 )
       0304C 03D6     1     ADD  TEMP1 ,A
   123 0304D 00D5 C        	CLR	TEMP0			;value
   124            C      M 	LCALL	STORCIDRAM
                      2  M  PAGE #( STORCIDRAM ),
       0304E 1E82     2     PAGE ( STORCIDRAM / 1024 ),
       0304F 10F3     1     CALL ( STORCIDRAM % 1024 ),
                      2  M  PAGE #( $ ),
       03050 1E8C     2     PAGE ( $ / 1024 ),
   125            C        	
   126 03051 0012 C        	RET
   127            C        ;---------------------------------------
   128 03052      C        VGALCD_TOBCD:
   129            C        ;!!!!!!!!!!!!!!!
   130            C      M 	MOV	TEMP3,TEMP1
       03052 0416     1     MOV A, TEMP1 
       03053 0058     1     MOV  TEMP3 ,A
   131            C      M 	MOV	TEMP4,TEMP2
       03054 0417     1     MOV A, TEMP2 
       03055 0059     1     MOV  TEMP4 ,A
   132            C        
   133 03056 0415 C        	MOV	A,TEMP0
   134            C      M 	LCALL	HEX_DGT		;this subroutine use TEMP1/TEMP2
                      2  M  PAGE #( HEX_DGT ),
       03057 1E82     2     PAGE ( HEX_DGT / 1024 ),
       03058 100F     1     CALL ( HEX_DGT % 1024 ),
                      2  M  PAGE #( $ ),
       03059 1E8C     2     PAGE ( $ / 1024 ),
   135 0305A 0055 C        	MOV	TEMP0,A
   136            C        
   137            C      M 	MOV	TEMP1,TEMP3
       0305B 0418     1     MOV A, TEMP3 
       0305C 0056     1     MOV  TEMP1 ,A
   138            C      M 	MOV	TEMP2,TEMP4
       0305D 0419     1     MOV A, TEMP4 
       0305E 0057     1     MOV  TEMP2 ,A
   139            C        ;!!!!!!!!!!!!!!!
   140            C      M 	ADD	_RC,@2			;此时_RC是指针的指针
       0305F 1802     1     MOV A,@( 2 )
       03060 03CC     1     ADD  _RC ,A
   141            C      M 	SUBA	_RD,TEMP1		;查指针超过最大长度了吗?(11>10/16>15/16>15)
       03061 0416     1     MOV A, TEMP1 
       03062 010D     1     SUB A, _RD 
   142            C      M 	JPC	VGALCD_TOBCD_END
       03063 0C03     1     JBC  _STATUS , C 
       03064 147B     1     JMP  VGALCD_TOBCD_END ,
   143            C        
   144 03065 054D C        	INC	_RD			;指针值加1
   145            C      M 	ADD	_RC,_RD		;!!!在指针索引的基础上加入索引值
       03066 040D     1     MOV A, _RD 
       03067 03CC     1     ADD  _RC ,A
   146 03068 0715 C        	SWAPA	TEMP0
   147 03069 1A0F C        	AND	A,@0X0F
   148 0306A 1F10 C        	ADD	A,@0X10
   149 0306B 004D C        	MOV	_RD,A
   150            C        ;---
   151            C      M 	MOV	_RC,TEMP2	;
       0306C 0417     1     MOV A, TEMP2 
       0306D 004C     1     MOV  _RC ,A
   152            C      M 	ADD	_RC,@2
       0306E 1802     1     MOV A,@( 2 )
       0306F 03CC     1     ADD  _RC ,A
   153            C      M 	SUBA	_RD,TEMP1		;查指针超过最大长度了吗?(11>10/16>15/16>15)
       03070 0416     1     MOV A, TEMP1 
       03071 010D     1     SUB A, _RD 
   154            C      M 	JPC	VGALCD_TOBCD_END
       03072 0C03     1     JBC  _STATUS , C 
       03073 147B     1     JMP  VGALCD_TOBCD_END ,
   155            C        
   156 03074 054D C        	INC	_RD			;指针值加1
   157            C      M 	ADD	_RC,_RD		;!!!在指针索引的基础上加入索引值
       03075 040D     1     MOV A, _RD 
       03076 03CC     1     ADD  _RC ,A
   158 03077 0415 C        	MOV	A,TEMP0
   159 03078 1A0F C        	AND	A,@0X0F
   160 03079 1F10 C        	ADD	A,@0X10
   161 0307A 004D C        	MOV	_RD,A
   162 0307B      C        VGALCD_TOBCD_END:
   163 0307B 0012 C        	RET
   164            C        ;---------------------------------------	
   165            C        
   166 0307C      C        VGALCD_END:
   167 0307C 09CD C        	BC	_RD,7			;clr the start flag
   168            C        
   169 0307D 0012 C        	RET
   170            C        ;-------------------------------------------------------------------------------
   171            C        ;	Input : acc the TEL index-0
   172            C        ;	Output: acc 
   173            C        ;-------------------------------------------------------------------------------
   174 0307E      C        SET_CIDFLAG:
   175 0307E 0055 C        	MOV	TEMP0,A
   176 0307F 00D6 C        	CLR	TEMP1
   177            C        	
   178            C      M 	JPNB	TEMP0,7,SET_CIDFLAG_1
       03080 0FD5     1     JBS  TEMP0 , 7 
       03081 1483     1     JMP  SET_CIDFLAG_1 ,
   179            C        
   180 03082 0A96 C        	BS	TEMP1,2		;Set new flag
   181 03083      C        SET_CIDFLAG_1:
   182 03083 0415 C        	MOV	A,TEMP0
   183 03084 1A7F C        	AND	A,@0X7F
   184            C      M 	JPZ	SET_CIDFLAG_2
       03085 0C83     1     JBC  _STATUS , Z 
       03086 148B     1     JMP  SET_CIDFLAG_2 ,
   185 03087 1D7F C        	SUB	A,@0X7F
   186            C      M 	JPZ	SET_CIDFLAG_2
       03088 0C83     1     JBC  _STATUS , Z 
       03089 148B     1     JMP  SET_CIDFLAG_2 ,
   187            C        
   188 0308A 0A16 C        	BS	TEMP1,0		;Set MSG flag	
   189 0308B      C        SET_CIDFLAG_2:	
   190            C        
   191 0308B 0416 C        	MOV	A,TEMP1
   192 0308C 0012 C        	RET
   193            C        ;-------------------------------------------------------------------------------
   194            C        ;	Input : acc the TEL index-0
   195            C        ;	Output: acc 
   196            C        ;-------------------------------------------------------------------------------
   197 0308D      C        SEL_MSGDISP:
   198 0308D 0055 C        	MOV	TEMP0,A
   199            C        	
   200 0308E 180A C        	MOV	A,@10	;The id of memo
   201 0308F 0056 C        	MOV	TEMP1,A
   202            C        	
   203 03090 0415 C        	MOV	A,TEMP0
   204            C      M 	JPZ	SEL_MSGDISP_1
       03091 0C83     1     JBC  _STATUS , Z 
       03092 1495     1     JMP  SEL_MSGDISP_1 ,
   205            C        	
   206 03093 1819 C        	MOV	A,@25	;The id of message
   207 03094 0056 C        	MOV	TEMP1,A
   208            C        	
   209 03095      C        SEL_MSGDISP_1:	
   210 03095 0416 C        	MOV	A,TEMP1
   211            C        	
   212 03096 0012 C        	RET
   213            C        ;-------------------------------------------------------------------------------
   214            C        ;	input : 
   215            C        ;	output:	
   216            C        ;-------------------------------------------------------------------------------
   217 03097      C        VGADRAWSTAMP:
   218            C      M 	REFURBISH_ICON
                      2  M  BLOCK  0 
       03097 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       03098 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       03099 1880     2     MOV A,@( LCD_CTRL )
       0309A 004C     2     MOV  _RC ,A
       0309B 0B0D     1     BS  _RD , 4 
   219            C        
   220 0309C 0012 C        	RET
   221            C        ;-------------------------------------------------------------------------------
   222            C        ;	input : TEMP0
   223            C        ;	output:	
   224            C        ;	清除第一行的图标
   225            C        ;-------------------------------------------------------------------------------
   226 0309D      C        VGADRAWNUM1:
   227            C        	
   228            C      M 	REFURBISH_1STL
                      2  M  BLOCK  0 
       0309D 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0309E 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       0309F 1880     2     MOV A,@( LCD_CTRL )
       030A0 004C     2     MOV  _RC ,A
       030A1 0B4D     1     BS  _RD , 5 
   229            C        	
   230 030A2 1801 C        	MOV	A,@1
   231 030A3 14B2 C        	JMP	VGADRAW
   232            C        ;-------------------------------------------------------------------------------
   233            C        ;-------------------------------------------------------------------------------
   234 030A4      C        VGADRAWNUM2:
   235            C      M 	REFURBISH_2NDL
                      2  M  BLOCK  0 
       030A4 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       030A5 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       030A6 1880     2     MOV A,@( LCD_CTRL )
       030A7 004C     2     MOV  _RC ,A
       030A8 0B8D     1     BS  _RD , 6 
   236 030A9 1802 C        	MOV	A,@2
   237 030AA 14B2 C        	JMP	VGADRAW
   238            C        ;-------------------------------------------------------------------------------
   239            C        ;-------------------------------------------------------------------------------
   240 030AB      C        VGADRAWCHAR:
   241            C      M 	REFURBISH_3RDL
                      2  M  BLOCK  0 
       030AB 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       030AC 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       030AD 1880     2     MOV A,@( LCD_CTRL )
       030AE 004C     2     MOV  _RC ,A
       030AF 0BCD     1     BS  _RD , 7 
   242 030B0 1803 C        	MOV	A,@3
   243 030B1 14B2 C        	JMP	VGADRAW
   244            C        ;---------------------------------------
   245 030B2      C        VGADRAW:
   246 030B2 1A03 C        	AND	A,@3
   247 030B3 0020 C        	TBL
   248 030B4 14B8 C        	JMP	VGADRAW_STAMP
   249 030B5 14B9 C        	JMP	VGADRAW_NUM1
   250 030B6 14C2 C        	JMP	VGADRAW_NUM2
   251 030B7 14CB C        	JMP	VGADRAW_CHAR
   252 030B8      C        VGADRAW_STAMP:
   253 030B8 0012 C        	RET
   254 030B9      C        VGADRAW_NUM1:
   255            C      M 	MOV	OFFSET_S,@(LCD_1CBUF_ADDR)	;sources address(start)
       030B9 18BA     1     MOV A,@( LCD_1CBUF_ADDR )
       030BA 005C     1     MOV  OFFSET_S ,A
   256            C      M 	MOV	OFFSET_D,@(LCD_1STLINE)		;destination address(start)
       030BB 1883     1     MOV A,@( LCD_1STLINE )
       030BC 005D     1     MOV  OFFSET_D ,A
   257            C      M 	MOV	TEMP3,@(LENGTH1STL)		;length(counter)
       030BD 180A     1     MOV A,@( LENGTH1STL )
       030BE 0058     1     MOV  TEMP3 ,A
   258            C      M 	MOV	_RC,@(LCD_1CBUF_CTRL)		;control flag
       030BF 18B7     1     MOV A,@( LCD_1CBUF_CTRL )
       030C0 004C     1     MOV  _RC ,A
   259 030C1 14D4 C        	JMP	VGADRAW_ASCII
   260            C        
   261 030C2      C        VGADRAW_NUM2:
   262            C      M 	MOV	OFFSET_S,@(LCD_2CBUF_ADDR)		;
       030C2 18C7     1     MOV A,@( LCD_2CBUF_ADDR )
       030C3 005C     1     MOV  OFFSET_S ,A
   263            C      M 	MOV	OFFSET_D,@(LCD_2NDLINE)
       030C4 188D     1     MOV A,@( LCD_2NDLINE )
       030C5 005D     1     MOV  OFFSET_D ,A
   264            C      M 	MOV	TEMP3,@(LENGTH2NDL)
       030C6 180F     1     MOV A,@( LENGTH2NDL )
       030C7 0058     1     MOV  TEMP3 ,A
   265            C      M 	MOV	_RC,@(LCD_2CBUF_CTRL)
       030C8 18C4     1     MOV A,@( LCD_2CBUF_CTRL )
       030C9 004C     1     MOV  _RC ,A
   266 030CA 14D4 C        	JMP	VGADRAW_ASCII
   267            C        
   268 030CB      C        VGADRAW_CHAR:
   269            C      M 	MOV	OFFSET_S,@(LCD_3CBUF_ADDR)		;
       030CB 18D9     1     MOV A,@( LCD_3CBUF_ADDR )
       030CC 005C     1     MOV  OFFSET_S ,A
   270            C      M 	MOV	OFFSET_D,@(LCD_3RDLINE)
       030CD 189C     1     MOV A,@( LCD_3RDLINE )
       030CE 005D     1     MOV  OFFSET_D ,A
   271            C      M 	MOV	TEMP3,@(LENGTH3RDL)
       030CF 180F     1     MOV A,@( LENGTH3RDL )
       030D0 0058     1     MOV  TEMP3 ,A
   272            C      M 	MOV	_RC,@(LCD_3CBUF_CTRL)
       030D1 18D6     1     MOV A,@( LCD_3CBUF_CTRL )
       030D2 004C     1     MOV  _RC ,A
   273 030D3 14D4 C        	JMP	VGADRAW_ASCII
   274            C        
   275            C        ;---至此,各暂存器用途OFFSET_S/OFFSET_D/COUNT(长度)/TEMP3=MAX-counter(最大长度)/TEMP4=flag
   276 030D4      C        VGADRAW_ASCII:
   277            C      M 	MOV	TEMP4,_RD		;the flag
       030D4 040D     1     MOV A, _RD 
       030D5 0059     1     MOV  TEMP4 ,A
   278            C        
   279            C      M 	ADD	_RC,@2
       030D6 1802     1     MOV A,@( 2 )
       030D7 03CC     1     ADD  _RC ,A
   280 030D8 040D C        	MOV	A,_RD			;取得字符长度
   281            C      M 	JPZ	VGADRAW_RET
       030D9 0C83     1     JBC  _STATUS , Z 
       030DA 14EC     1     JMP  VGADRAW_RET ,
   282 030DB 005E C        	MOV	COUNT,A
   283            C        
   284            C      M 	JPB	_RD,6,VGADRAW_LPBACK
       030DC 0D8D     1     JBC  _RD , 6 
       030DD 14FB     1     JMP  VGADRAW_LPBACK ,
   285            C        
   286            C      M 	SUBA	COUNT,TEMP3
       030DE 0418     1     MOV A, TEMP3 
       030DF 011E     1     SUB A, COUNT 
   287            C      M 	JPZ	VGADRAW_MOVE		;本行满屏
       030E0 0C83     1     JBC  _STATUS , Z 
       030E1 14E9     1     JMP  VGADRAW_MOVE ,
   288            C        
   289            C      M 	ANDA	TEMP4,@(0X03)
       030E2 1803     1     MOV A,@( 3 )
       030E3 0299     1     AND A, TEMP4 
   290 030E4 0020 C        	TBL
   291 030E5 14EC C        	JMP	VGADRAW_RET		;无
   292 030E6 14E9 C        	JMP	VGADRAW_ASCII_LEFT
   293 030E7 14ED C        	JMP	VGADRAW_ASCII_RIGHT
   294 030E8 14F3 C        	JMP	VGADRAW_ASCII_CENTER
   295            C        
   296 030E9      C        VGADRAW_ASCII_LEFT:			;实际长度和最大长度中,取较小者
   297            C        	;SUBA	COUNT,TEMP3
   298            C        	;JPNC	VGADRAW_MOVE
   299            C        	;MOV	COUNT,TEMP3
   300 030E9      C        VGADRAW_MOVE:
   301            C      M 	LCALL	MOVE_DATA
                      2  M  PAGE #( MOVE_DATA ),
       030E9 1E82     2     PAGE ( MOVE_DATA / 1024 ),
       030EA 1056     1     CALL ( MOVE_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       030EB 1E8C     2     PAGE ( $ / 1024 ),
   302            C        	
   303 030EC      C        VGADRAW_RET:
   304 030EC 0012 C        	RET
   305            C        ;---------------------------------------
   306 030ED      C        VGADRAW_ASCII_RIGHT:
   307            C      M 	SUBA	COUNT,TEMP3
       030ED 0418     1     MOV A, TEMP3 
       030EE 011E     1     SUB A, COUNT 
   308            C        	;JPNC	VGADRAW_ASCII_RIGHT_1
   309            C        	;ADD	OFFSET_S,A		;左边留出
   310            C        	;MOV	COUNT,TEMP3
   311            C        	;JMP	VGADRAW_MOVE
   312 030EF      C        VGADRAW_ASCII_RIGHT_1:			;在规定的最大长度范围内,要在左边留出空间
   313 030EF 1BFF C        	XOR	A,@(0XFF)
   314 030F0 1F01 C        	ADD	A,@(1)
   315 030F1 03DD C        	ADD	OFFSET_D,A		;加上差值的相反数,得到目的地址的起始地址(即对10/15/15取补数)
   316 030F2 14E9 C        	JMP	VGADRAW_MOVE
   317            C        ;---------------------------------------
   318 030F3      C        VGADRAW_ASCII_CENTER:
   319            C      M 	SUBA	COUNT,TEMP3
       030F3 0418     1     MOV A, TEMP3 
       030F4 011E     1     SUB A, COUNT 
   320            C        	;JPC	VGADRAW_ASCII_RIGHT
   321            C        ;VGADRAW_ASCII_CENTER_1:		;在规定的最大长度范围内,要在左右两边留出空间
   322 030F5 1BFF C        	XOR	A,@(0XFF)
   323 030F6 1F01 C        	ADD	A,@(1)
   324 030F7 0059 C        	MOV	TEMP4,A			;得到差值的相反数
   325 030F8 0619 C        	RRCA	TEMP4
   326 030F9 03DD C        	ADD	OFFSET_D,A		;加上差值的相反数的一半,得到目的地址的起始地址
   327 030FA 14E9 C        	JMP	VGADRAW_MOVE
   328            C        ;-----------------------------
   329            C        
   330            C        ;-------------------------------------------------------------------------------
   331            C        ;---至此,各暂存器仅COUNT(长度)/OFFSET_D有用
   332 030FB      C        VGADRAW_LPBACK:
   333 030FB 041E C        	MOV	A,COUNT
   334 030FC 0059 C        	MOV	TEMP4,A		;临时保存	
   335 030FD 005C C        	MOV	OFFSET_S,A
   336            C        	
   337            C      M 	SUBA	COUNT,TEMP3
       030FE 0418     1     MOV A, TEMP3 
       030FF 011E     1     SUB A, COUNT 
   338 03100 1BFF C        	XOR	A,@(0XFF)
   339 03101 1F01 C        	ADD	A,@(1)
   340 03102 005E C        	MOV	COUNT,A		;将COUNT对10取补(1-9/2-8/3-7/4-6/5-5)
   341            C        	
   342            C      M 	LCALL	MOVE_DATA
                      2  M  PAGE #( MOVE_DATA ),
       03103 1E82     2     PAGE ( MOVE_DATA / 1024 ),
       03104 1056     1     CALL ( MOVE_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       03105 1E8C     2     PAGE ( $ / 1024 ),
   343            C        ;---Note: the OFFSET_D set in the last subroutine(LCALL MOVE_DATA)
   344            C      M 	MOV	COUNT,TEMP4
       03106 0419     1     MOV A, TEMP4 
       03107 005E     1     MOV  COUNT ,A
   345 03108 00DC C        	CLR	OFFSET_S
   346            C        	
   347            C      M 	LCALL	MOVE_DATA
                      2  M  PAGE #( MOVE_DATA ),
       03109 1E82     2     PAGE ( MOVE_DATA / 1024 ),
       0310A 1056     1     CALL ( MOVE_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       0310B 1E8C     2     PAGE ( $ / 1024 ),
   348            C        
   349 0310C 0012 C        	RET
   350            C        ;-------------------------------------------------------------------------------
   351            C        ;	input : 
   352            C        ;	output:	
   353            C        ;	清除第一行的图标(清空缓冲区,再执行刷新)
   354            C        ;-------------------------------------------------------------------------------
   355 0310D      C        VGABLANKSTAMP:
   356            C        
   357            C      M 	REFURBISH_ICON			;block	0
                      2  M  BLOCK  0 
       0310D 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0310E 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       0310F 1880     2     MOV A,@( LCD_CTRL )
       03110 004C     2     MOV  _RC ,A
       03111 0B0D     1     BS  _RD , 4 
   358            C        	
   359 03112 1800 C        	MOV	A,@0
   360 03113 0055 C        	MOV	TEMP0,A
   361 03114 1530 C        	JMP	VGABLANK
   362            C        ;-------------------------------------------------------------------------------
   363            C        ;	input : 
   364            C        ;	output:	
   365            C        ;	清除第一行的数字显示(清空缓冲区,再执行刷新)
   366            C        ;-------------------------------------------------------------------------------
   367 03115      C        VGABLANKNUM1:
   368            C        	
   369            C      M 	REFURBISH_1STL			;block	0
                      2  M  BLOCK  0 
       03115 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       03116 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       03117 1880     2     MOV A,@( LCD_CTRL )
       03118 004C     2     MOV  _RC ,A
       03119 0B4D     1     BS  _RD , 5 
   370            C        	
   371            C      M 	MOV	TEMP0,@NUM_BLANK
       0311A 1800     1     MOV A,@( NUM_BLANK )
       0311B 0055     1     MOV  TEMP0 ,A
   372 0311C 1801 C        	MOV	A,@1	
   373 0311D 1530 C        	JMP	VGABLANK
   374            C        ;-------------------------------------------------------------------------------
   375            C        ;	input : 
   376            C        ;	output:	
   377            C        ;	清除第二行的数字显示(清空缓冲区,再执行刷新)
   378            C        ;-------------------------------------------------------------------------------
   379 0311E      C        VGABLANKNUM2:
   380            C        	
   381            C      M 	REFURBISH_2NDL			;block	0
                      2  M  BLOCK  0 
       0311E 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0311F 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       03120 1880     2     MOV A,@( LCD_CTRL )
       03121 004C     2     MOV  _RC ,A
       03122 0B8D     1     BS  _RD , 6 
   382            C        	
   383            C      M 	MOV	TEMP0,@NUM_BLANK
       03123 1800     1     MOV A,@( NUM_BLANK )
       03124 0055     1     MOV  TEMP0 ,A
   384 03125 1802 C        	MOV	A,@2
   385 03126 1530 C        	JMP	VGABLANK
   386            C        ;-------------------------------------------------------------------------------
   387            C        ;	input : 
   388            C        ;	output:	
   389            C        ;
   390            C        ;	清除第三行的数字/字符显示(清空缓冲区,再执行刷新)
   391            C        ;-------------------------------------------------------------------------------
   392 03127      C        VGABLANKCHAR:
   393            C        	
   394            C      M 	REFURBISH_3RDL			;block	0
                      2  M  BLOCK  0 
       03127 1800     2     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       03128 000A     2     IOW  _IOCA ,
                      2  M  MOV  _RC ,@( LCD_CTRL )
       03129 1880     2     MOV A,@( LCD_CTRL )
       0312A 004C     2     MOV  _RC ,A
       0312B 0BCD     1     BS  _RD , 7 
   395            C        		
   396            C      M 	MOV	TEMP0,@CH_BLANK
       0312C 1800     1     MOV A,@( CH_BLANK )
       0312D 0055     1     MOV  TEMP0 ,A
   397 0312E 1803 C        	MOV	A,@3
   398 0312F 1530 C        	JMP	VGABLANK
   399            C        ;---------------------------------------
   400 03130      C        VGABLANK:
   401 03130 1A03 C        	AND	A,@0X03
   402            C      M 	MTBL
       03131 0020     1     TBL 
             3131     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   403 03132 1536 C        	JMP	VGABLANK_STAMP
   404 03133 153B C        	JMP	VGABLANK_NUM1
   405 03134 1540 C        	JMP	VGABLANK_NUM2
   406 03135 1545 C        	JMP	VGABLANK_CHAR
   407            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   408 03136      C        VGABLANK_STAMP:
   409            C      M 	MOV	_RC,@(LCD_CTRL+OFFSETSTMP)	;start address
       03136 1881     1     MOV A,@(( LCD_CTRL + OFFSETSTMP ))
       03137 004C     1     MOV  _RC ,A
   410            C      M 	MOV	TEMP1,@(2)			;length
       03138 1802     1     MOV A,@( 2 )
       03139 0056     1     MOV  TEMP1 ,A
   411 0313A 1549 C        	JMP	VGABLANK_RET
   412 0313B      C        VGABLANK_NUM1:
   413            C      M 	MOV	_RC,@(LCD_CTRL+OFFSET1STL)	;start address
       0313B 1883     1     MOV A,@(( LCD_CTRL + OFFSET1STL ))
       0313C 004C     1     MOV  _RC ,A
   414            C      M 	MOV	TEMP1,@(LENGTH1STL)		;length
       0313D 180A     1     MOV A,@( LENGTH1STL )
       0313E 0056     1     MOV  TEMP1 ,A
   415 0313F 1549 C        	JMP	VGABLANK_RET
   416 03140      C        VGABLANK_NUM2:
   417            C      M 	MOV	_RC,@(LCD_CTRL+OFFSET2NDL)	;start address
       03140 188D     1     MOV A,@(( LCD_CTRL + OFFSET2NDL ))
       03141 004C     1     MOV  _RC ,A
   418            C      M 	MOV	TEMP1,@(LENGTH2NDL)		;length
       03142 180F     1     MOV A,@( LENGTH2NDL )
       03143 0056     1     MOV  TEMP1 ,A
   419 03144 1549 C        	JMP	VGABLANK_RET
   420 03145      C        VGABLANK_CHAR:
   421            C      M 	MOV	_RC,@(LCD_CTRL+OFFSET3RDL)	;start address
       03145 189C     1     MOV A,@(( LCD_CTRL + OFFSET3RDL ))
       03146 004C     1     MOV  _RC ,A
   422            C      M 	MOV	TEMP1,@(LENGTH2NDL)		;length
       03147 180F     1     MOV A,@( LENGTH2NDL )
       03148 0056     1     MOV  TEMP1 ,A
   423 03149      C        VGABLANK_RET:
   424            C        	
   425            C      M 	LCALL	STORCIDRAM
                      2  M  PAGE #( STORCIDRAM ),
       03149 1E82     2     PAGE ( STORCIDRAM / 1024 ),
       0314A 10F3     1     CALL ( STORCIDRAM % 1024 ),
                      2  M  PAGE #( $ ),
       0314B 1E8C     2     PAGE ( $ / 1024 ),
   426 0314C 0012 C        	RET
   427            C        
   428            C        ;-------------------------------------------------------------------------------
   429            C        ;	字符串输入
   430            C        ;	input:	acch -- string ID
   431            C        ;	output:	none
   432            C        ;	note:
   433            C        ; 		字符串输入，只限于第三行
   434            C        ;-------------------------------------------------------------------------------
   435            C        VGASTR	MACRO	#STR_ADDR
   436            C        	MOV	A,_RD
   437            C        	LCALL	STR_ADDR
   438            C        	JMP	VGASTRING_LOOP1
   439            C        	ENDM
   440            C        ;---------------------------------------
   441 0314D      C        VGASTRING:
   442 0314D 0055 C        	MOV	TEMP0,A
   443            C      M 	BLOCK	0
       0314E 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0314F 000A     1     IOW  _IOCA ,
   444            C      M 	MOV	_RC,@(0x7a)
       03150 187A     1     MOV A,@( 122 )
       03151 004C     1     MOV  _RC ,A
   445            C      M 	MOV	_RD,TEMP0	;Save the id first
       03152 0415     1     MOV A, TEMP0 
       03153 004D     1     MOV  _RD ,A
   446            C      M 	MOV	_RC,@(0x7b)
       03154 187B     1     MOV A,@( 123 )
       03155 004C     1     MOV  _RC ,A
   447 03156 00CD C        	CLR	_RD		;then clean the counter
   448 03157      C        VGASTRING_LOOP:
   449            C      M 	MOV	_RC,@(0x7a)
       03157 187A     1     MOV A,@( 122 )
       03158 004C     1     MOV  _RC ,A
   450            C      M 	MOV	TEMP0,_RD
       03159 040D     1     MOV A, _RD 
       0315A 0055     1     MOV  TEMP0 ,A
   451 0315B 054C C        	INC	_RC
   452 0315C 0415 C        	MOV	A,TEMP0
   453            C      M 	MTBL
       0315D 0020     1     TBL 
             315D     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   454 0315E 159B C        	JMP	VgaString_000
   455 0315F 15A0 C        	JMP	VgaString_001
   456 03160 15A5 C        	JMP	VgaString_002
   457 03161 15AA C        	JMP	VgaString_003
   458 03162 15AF C        	JMP	VgaString_004
   459 03163 15B4 C        	JMP	VgaString_005
   460 03164 15B9 C        	JMP	VgaString_006
   461 03165 15BE C        	JMP	VgaString_007
   462 03166 15C3 C        	JMP	VgaString_008
   463 03167 15C8 C        	JMP	VgaString_009
   464 03168 15CD C        	JMP	VgaString_010
   465 03169 15D2 C        	JMP	VgaString_011
   466 0316A 15D7 C        	JMP	VgaString_012
   467 0316B 15DC C        	JMP	VgaString_013
   468 0316C 15E1 C        	JMP	VgaString_014
   469 0316D 15E6 C        	JMP	VgaString_015
   470 0316E 15EB C        	JMP	VgaString_016
   471 0316F 15F0 C        	JMP	VgaString_017
   472 03170 15F5 C        	JMP	VgaString_018
   473 03171 15FA C        	JMP	VgaString_019
   474 03172 15FF C        	JMP	VgaString_020
   475 03173 1604 C        	JMP	VgaString_021
   476 03174 1609 C        	JMP	VgaString_022
   477 03175 160E C        	JMP	VgaString_023
   478 03176 1613 C        	JMP	VgaString_024
   479 03177 1618 C        	JMP	VgaString_025
   480 03178 161D C        	JMP	VgaString_026
   481 03179 1622 C        	JMP	VgaString_027
   482 0317A 1627 C        	JMP	VgaString_028
   483 0317B 162C C        	JMP	VgaString_029
   484 0317C 1631 C        	JMP	VgaString_030
   485 0317D 1636 C        	JMP	VgaString_031
   486 0317E 163B C        	JMP	VgaString_032
   487 0317F 1640 C        	JMP	VgaString_033
   488 03180 1645 C        	JMP	VgaString_034
   489 03181 164A C        	JMP	VgaString_035
   490 03182 164F C        	JMP	VgaString_036
   491 03183 1654 C        	JMP	VgaString_037
   492 03184 1659 C        	JMP	VgaString_038
   493 03185 165E C        	JMP	VgaString_039
   494 03186 1663 C        	JMP	VgaString_040
   495 03187 1668 C        	JMP	VgaString_041
   496 03188 166D C        	JMP	VgaString_042
   497 03189 1672 C        	JMP	VgaString_043
   498 0318A 1677 C        	JMP	VgaString_044
   499 0318B 167C C        	JMP	VgaString_045
   500 0318C 1681 C        	JMP	VgaString_046
   501 0318D 1686 C        	JMP	VgaString_047
   502 0318E 168B C        	JMP	VgaString_048
   503 0318F 1690 C        	JMP	VgaString_049
   504 03190 1695 C        	JMP	VgaString_050
   505 03191 169A C        	JMP	VgaString_051
   506 03192 169F C        	JMP	VgaString_052
   507 03193 16A4 C        	JMP	VgaString_053
   508 03194 16A9 C        	JMP	VgaString_054
   509 03195 16AE C        	JMP	VgaString_055
   510 03196 16B3 C        	JMP	VgaString_056
   511 03197 16B8 C        	JMP	VgaString_057
   512 03198 16BD C        	JMP	VgaString_058
   513 03199 16C2 C        	JMP	VgaString_059
   514 0319A 16C7 C        	JMP	VgaString_060
   515            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   516 0319B      C        VgaString_000:
   517            C      M 	VGASTR	#(TABSTR_ACCESS)
       0319B 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ACCESS 
                      3  M  PAGE #( TABSTR_ACCESS ),
       0319C 1E8F     3     PAGE ( TABSTR_ACCESS / 1024 ),
       0319D 1016     2     CALL ( TABSTR_ACCESS % 1024 ),
                      3  M  PAGE #( $ ),
       0319E 1E8C     3     PAGE ( $ / 1024 ),
       0319F 16CC     1     JMP  VGASTRING_LOOP1 ,
   518 031A0      C        VgaString_001:
   519            C      M 	VGASTR	#(TABSTR_ANSWER)
       031A0 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ANSWER 
                      3  M  PAGE #( TABSTR_ANSWER ),
       031A1 1E8F     3     PAGE ( TABSTR_ANSWER / 1024 ),
       031A2 102B     2     CALL ( TABSTR_ANSWER % 1024 ),
                      3  M  PAGE #( $ ),
       031A3 1E8C     3     PAGE ( $ / 1024 ),
       031A4 16CC     1     JMP  VGASTRING_LOOP1 ,
   520 031A5      C        VgaString_002:
   521            C      M 	VGASTR	#(TABSTR_CALLS)
       031A5 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_CALLS 
                      3  M  PAGE #( TABSTR_CALLS ),
       031A6 1E8F     3     PAGE ( TABSTR_CALLS / 1024 ),
       031A7 1039     2     CALL ( TABSTR_CALLS % 1024 ),
                      3  M  PAGE #( $ ),
       031A8 1E8C     3     PAGE ( $ / 1024 ),
       031A9 16CC     1     JMP  VGASTRING_LOOP1 ,
   522 031AA      C        VgaString_003:
   523            C      M 	VGASTR	#(TABSTR_CONTRAST)
       031AA 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_CONTRAST 
                      3  M  PAGE #( TABSTR_CONTRAST ),
       031AB 1E8F     3     PAGE ( TABSTR_CONTRAST / 1024 ),
       031AC 1040     2     CALL ( TABSTR_CONTRAST % 1024 ),
                      3  M  PAGE #( $ ),
       031AD 1E8C     3     PAGE ( $ / 1024 ),
       031AE 16CC     1     JMP  VGASTRING_LOOP1 ,
   524 031AF      C        VgaString_004:
   525            C      M 	VGASTR	#(TABSTR_DELETE)
       031AF 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_DELETE 
                      3  M  PAGE #( TABSTR_DELETE ),
       031B0 1E8F     3     PAGE ( TABSTR_DELETE / 1024 ),
       031B1 1055     2     CALL ( TABSTR_DELETE % 1024 ),
                      3  M  PAGE #( $ ),
       031B2 1E8C     3     PAGE ( $ / 1024 ),
       031B3 16CC     1     JMP  VGASTRING_LOOP1 ,
   526 031B4      C        VgaString_005:
   527            C      M 	VGASTR	#(TABSTR_EXIT)
       031B4 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_EXIT 
                      3  M  PAGE #( TABSTR_EXIT ),
       031B5 1E8F     3     PAGE ( TABSTR_EXIT / 1024 ),
       031B6 107B     2     CALL ( TABSTR_EXIT % 1024 ),
                      3  M  PAGE #( $ ),
       031B7 1E8C     3     PAGE ( $ / 1024 ),
       031B8 16CC     1     JMP  VGASTRING_LOOP1 ,
   528 031B9      C        VgaString_006:
   529            C      M 	VGASTR	#(TABSTR_FLASH)
       031B9 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_FLASH 
                      3  M  PAGE #( TABSTR_FLASH ),
       031BA 1E8F     3     PAGE ( TABSTR_FLASH / 1024 ),
       031BB 1081     2     CALL ( TABSTR_FLASH % 1024 ),
                      3  M  PAGE #( $ ),
       031BC 1E8C     3     PAGE ( $ / 1024 ),
       031BD 16CC     1     JMP  VGASTRING_LOOP1 ,
   530 031BE      C        VgaString_007:
   531            C      M 	VGASTR	#(TABSTR_LANGUAGE)
       031BE 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_LANGUAGE 
                      3  M  PAGE #( TABSTR_LANGUAGE ),
       031BF 1E8F     3     PAGE ( TABSTR_LANGUAGE / 1024 ),
       031C0 10A7     2     CALL ( TABSTR_LANGUAGE % 1024 ),
                      3  M  PAGE #( $ ),
       031C1 1E8C     3     PAGE ( $ / 1024 ),
       031C2 16CC     1     JMP  VGASTRING_LOOP1 ,
   532 031C3      C        VgaString_008:
   533            C      M 	VGASTR	#(TABSTR_LENGTH)
       031C3 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_LENGTH 
                      3  M  PAGE #( TABSTR_LENGTH ),
       031C4 1E8F     3     PAGE ( TABSTR_LENGTH / 1024 ),
       031C5 10B1     2     CALL ( TABSTR_LENGTH % 1024 ),
                      3  M  PAGE #( $ ),
       031C6 1E8C     3     PAGE ( $ / 1024 ),
       031C7 16CC     1     JMP  VGASTRING_LOOP1 ,
   534 031C8      C        VgaString_009:
   535            C      M 	VGASTR	#(TABSTR_LCD)
       031C8 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_LCD 
                      3  M  PAGE #( TABSTR_LCD ),
       031C9 1E8F     3     PAGE ( TABSTR_LCD / 1024 ),
       031CA 10B9     2     CALL ( TABSTR_LCD % 1024 ),
                      3  M  PAGE #( $ ),
       031CB 1E8C     3     PAGE ( $ / 1024 ),
       031CC 16CC     1     JMP  VGASTRING_LOOP1 ,
   536 031CD      C        VgaString_010:
   537            C      M 	VGASTR	#(TABSTR_MEMO)
       031CD 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_MEMO 
                      3  M  PAGE #( TABSTR_MEMO ),
       031CE 1E8F     3     PAGE ( TABSTR_MEMO / 1024 ),
       031CF 10C4     2     CALL ( TABSTR_MEMO % 1024 ),
                      3  M  PAGE #( $ ),
       031D0 1E8C     3     PAGE ( $ / 1024 ),
       031D1 16CC     1     JMP  VGASTRING_LOOP1 ,
   538 031D2      C        VgaString_011:
   539            C      M 	VGASTR	#(TABSTR_MESSAGES)
       031D2 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_MESSAGES 
                      3  M  PAGE #( TABSTR_MESSAGES ),
       031D3 1E8F     3     PAGE ( TABSTR_MESSAGES / 1024 ),
       031D4 10D9     2     CALL ( TABSTR_MESSAGES % 1024 ),
                      3  M  PAGE #( $ ),
       031D5 1E8C     3     PAGE ( $ / 1024 ),
       031D6 16CC     1     JMP  VGASTRING_LOOP1 ,
   540 031D7      C        VgaString_012:
   541            C      M 	VGASTR	#(TABSTR_NO)
       031D7 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_NO 
                      3  M  PAGE #( TABSTR_NO ),
       031D8 1E8F     3     PAGE ( TABSTR_NO / 1024 ),
       031D9 10EE     2     CALL ( TABSTR_NO % 1024 ),
                      3  M  PAGE #( $ ),
       031DA 1E8C     3     PAGE ( $ / 1024 ),
       031DB 16CC     1     JMP  VGASTRING_LOOP1 ,
   542 031DC      C        VgaString_013:
   543            C      M 	VGASTR	#(TABSTR_OGM)
       031DC 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_OGM 
                      3  M  PAGE #( TABSTR_OGM ),
       031DD 1E8F     3     PAGE ( TABSTR_OGM / 1024 ),
       031DE 10FA     2     CALL ( TABSTR_OGM % 1024 ),
                      3  M  PAGE #( $ ),
       031DF 1E8C     3     PAGE ( $ / 1024 ),
       031E0 16CC     1     JMP  VGASTRING_LOOP1 ,
   544 031E1      C        VgaString_014:
   545            C      M 	VGASTR	#(TABSTR_OPTIONS)
       031E1 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_OPTIONS 
                      3  M  PAGE #( TABSTR_OPTIONS ),
       031E2 1E8F     3     PAGE ( TABSTR_OPTIONS / 1024 ),
       031E3 110E     2     CALL ( TABSTR_OPTIONS % 1024 ),
                      3  M  PAGE #( $ ),
       031E4 1E8C     3     PAGE ( $ / 1024 ),
       031E5 16CC     1     JMP  VGASTRING_LOOP1 ,
   546 031E6      C        VgaString_015:
   547            C      M 	VGASTR	#(TABSTR_PLAY)
       031E6 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_PLAY 
                      3  M  PAGE #( TABSTR_PLAY ),
       031E7 1E8F     3     PAGE ( TABSTR_PLAY / 1024 ),
       031E8 1117     2     CALL ( TABSTR_PLAY % 1024 ),
                      3  M  PAGE #( $ ),
       031E9 1E8C     3     PAGE ( $ / 1024 ),
       031EA 16CC     1     JMP  VGASTRING_LOOP1 ,
   548 031EB      C        VgaString_016:
   549            C      M 	VGASTR	#(TABSTR_RECORDING)
       031EB 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_RECORDING 
                      3  M  PAGE #( TABSTR_RECORDING ),
       031EC 1E8F     3     PAGE ( TABSTR_RECORDING / 1024 ),
       031ED 111D     2     CALL ( TABSTR_RECORDING % 1024 ),
                      3  M  PAGE #( $ ),
       031EE 1E8C     3     PAGE ( $ / 1024 ),
       031EF 16CC     1     JMP  VGASTRING_LOOP1 ,
   550 031F0      C        VgaString_017:
   551            C      M 	VGASTR	#(TABSTR_REMOTE)
       031F0 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_REMOTE 
                      3  M  PAGE #( TABSTR_REMOTE ),
       031F1 1E8F     3     PAGE ( TABSTR_REMOTE / 1024 ),
       031F2 1128     2     CALL ( TABSTR_REMOTE % 1024 ),
                      3  M  PAGE #( $ ),
       031F3 1E8C     3     PAGE ( $ / 1024 ),
       031F4 16CC     1     JMP  VGASTRING_LOOP1 ,
   552 031F5      C        VgaString_018:
   553            C      M 	VGASTR	#(TABSTR_RINGS)
       031F5 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_RINGS 
                      3  M  PAGE #( TABSTR_RINGS ),
       031F6 1E8F     3     PAGE ( TABSTR_RINGS / 1024 ),
       031F7 1130     2     CALL ( TABSTR_RINGS % 1024 ),
                      3  M  PAGE #( $ ),
       031F8 1E8C     3     PAGE ( $ / 1024 ),
       031F9 16CC     1     JMP  VGASTRING_LOOP1 ,
   554 031FA      C        VgaString_019:
   555            C      M 	VGASTR	#(TABSTR_SET)
       031FA 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_SET 
                      3  M  PAGE #( TABSTR_SET ),
       031FB 1E8F     3     PAGE ( TABSTR_SET / 1024 ),
       031FC 113F     2     CALL ( TABSTR_SET % 1024 ),
                      3  M  PAGE #( $ ),
       031FD 1E8C     3     PAGE ( $ / 1024 ),
       031FE 16CC     1     JMP  VGASTRING_LOOP1 ,
   556 031FF      C        VgaString_020:
   557            C      M 	VGASTR	#(TABSTR_TIME)
       031FF 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_TIME 
                      3  M  PAGE #( TABSTR_TIME ),
       03200 1E8F     3     PAGE ( TABSTR_TIME / 1024 ),
       03201 1152     2     CALL ( TABSTR_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       03202 1E8C     3     PAGE ( $ / 1024 ),
       03203 16CC     1     JMP  VGASTRING_LOOP1 ,
   558 03204      C        VgaString_021:
   559            C      M 	VGASTR	#(TABSTR_TO)
       03204 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_TO 
                      3  M  PAGE #( TABSTR_TO ),
       03205 1E8F     3     PAGE ( TABSTR_TO / 1024 ),
       03206 1158     2     CALL ( TABSTR_TO % 1024 ),
                      3  M  PAGE #( $ ),
       03207 1E8C     3     PAGE ( $ / 1024 ),
       03208 16CC     1     JMP  VGASTRING_LOOP1 ,
   560 03209      C        VgaString_022:
   561            C      M 	VGASTR	#(TABSTR_WITHHELD)
       03209 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_WITHHELD 
                      3  M  PAGE #( TABSTR_WITHHELD ),
       0320A 1E8F     3     PAGE ( TABSTR_WITHHELD / 1024 ),
       0320B 1167     2     CALL ( TABSTR_WITHHELD % 1024 ),
                      3  M  PAGE #( $ ),
       0320C 1E8C     3     PAGE ( $ / 1024 ),
       0320D 16CC     1     JMP  VGASTRING_LOOP1 ,
   562 0320E      C        VgaString_023:
   563            C      M 	VGASTR	#(TABSTR_MENU)
       0320E 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_MENU 
                      3  M  PAGE #( TABSTR_MENU ),
       0320F 1E8F     3     PAGE ( TABSTR_MENU / 1024 ),
       03210 10CA     2     CALL ( TABSTR_MENU % 1024 ),
                      3  M  PAGE #( $ ),
       03211 1E8C     3     PAGE ( $ / 1024 ),
       03212 16CC     1     JMP  VGASTRING_LOOP1 ,
   564 03213      C        VgaString_024:
   565            C      M 	VGASTR	#(TABSTR_DATE)
       03213 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_DATE 
                      3  M  PAGE #( TABSTR_DATE ),
       03214 1E8F     3     PAGE ( TABSTR_DATE / 1024 ),
       03215 104A     2     CALL ( TABSTR_DATE % 1024 ),
                      3  M  PAGE #( $ ),
       03216 1E8C     3     PAGE ( $ / 1024 ),
       03217 16CC     1     JMP  VGASTRING_LOOP1 ,
   566 03218      C        VgaString_025:
   567            C      M 	VGASTR	#(TABSTR_MESSAGE)
       03218 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_MESSAGE 
                      3  M  PAGE #( TABSTR_MESSAGE ),
       03219 1E8F     3     PAGE ( TABSTR_MESSAGE / 1024 ),
       0321A 10D0     2     CALL ( TABSTR_MESSAGE % 1024 ),
                      3  M  PAGE #( $ ),
       0321B 1E8C     3     PAGE ( $ / 1024 ),
       0321C 16CC     1     JMP  VGASTRING_LOOP1 ,
   568 0321D      C        VgaString_026:
   569            C      M 	VGASTR	#(TABSTR_TAM_HD)
       0321D 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_TAM_HD 
                      3  M  PAGE #( TABSTR_TAM_HD ),
       0321E 1E8F     3     PAGE ( TABSTR_TAM_HD / 1024 ),
       0321F 114A     2     CALL ( TABSTR_TAM_HD % 1024 ),
                      3  M  PAGE #( $ ),
       03220 1E8C     3     PAGE ( $ / 1024 ),
       03221 16CC     1     JMP  VGASTRING_LOOP1 ,
   570 03222      C        VgaString_027:
   571            C      M 	VGASTR	#(TABSTR_DEUTSCH)
       03222 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_DEUTSCH 
                      3  M  PAGE #( TABSTR_DEUTSCH ),
       03223 1E8F     3     PAGE ( TABSTR_DEUTSCH / 1024 ),
       03224 105D     2     CALL ( TABSTR_DEUTSCH % 1024 ),
                      3  M  PAGE #( $ ),
       03225 1E8C     3     PAGE ( $ / 1024 ),
       03226 16CC     1     JMP  VGASTRING_LOOP1 ,
   572 03227      C        VgaString_028:
   573            C      M 	VGASTR	#(TABSTR_ENGLISH)
       03227 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ENGLISH 
                      3  M  PAGE #( TABSTR_ENGLISH ),
       03228 1E8F     3     PAGE ( TABSTR_ENGLISH / 1024 ),
       03229 1072     2     CALL ( TABSTR_ENGLISH % 1024 ),
                      3  M  PAGE #( $ ),
       0322A 1E8C     3     PAGE ( $ / 1024 ),
       0322B 16CC     1     JMP  VGASTRING_LOOP1 ,
   574 0322C      C        VgaString_029:
   575            C      M 	VGASTR	#(TABSTR_FRANCAIS)
       0322C 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_FRANCAIS 
                      3  M  PAGE #( TABSTR_FRANCAIS ),
       0322D 1E8F     3     PAGE ( TABSTR_FRANCAIS / 1024 ),
       0322E 1088     2     CALL ( TABSTR_FRANCAIS % 1024 ),
                      3  M  PAGE #( $ ),
       0322F 1E8C     3     PAGE ( $ / 1024 ),
       03230 16CC     1     JMP  VGASTRING_LOOP1 ,
   576 03231      C        VgaString_030:
   577            C      M 	VGASTR	#(TABSTR_YEAR)
       03231 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_YEAR 
                      3  M  PAGE #( TABSTR_YEAR ),
       03232 1E8F     3     PAGE ( TABSTR_YEAR / 1024 ),
       03233 1171     2     CALL ( TABSTR_YEAR % 1024 ),
                      3  M  PAGE #( $ ),
       03234 1E8C     3     PAGE ( $ / 1024 ),
       03235 16CC     1     JMP  VGASTRING_LOOP1 ,
   578 03236      C        VgaString_031:
   579            C      M 	VGASTR	#(TABSTR_ON)
       03236 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ON 
                      3  M  PAGE #( TABSTR_ON ),
       03237 1E8F     3     PAGE ( TABSTR_ON / 1024 ),
       03238 1109     2     CALL ( TABSTR_ON % 1024 ),
                      3  M  PAGE #( $ ),
       03239 1E8C     3     PAGE ( $ / 1024 ),
       0323A 16CC     1     JMP  VGASTRING_LOOP1 ,
   580 0323B      C        VgaString_032:
   581            C      M 	VGASTR	#(TABSTR_OFF)
       0323B 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_OFF 
                      3  M  PAGE #( TABSTR_OFF ),
       0323C 1E8F     3     PAGE ( TABSTR_OFF / 1024 ),
       0323D 1100     2     CALL ( TABSTR_OFF % 1024 ),
                      3  M  PAGE #( $ ),
       0323E 1E8C     3     PAGE ( $ / 1024 ),
       0323F 16CC     1     JMP  VGASTRING_LOOP1 ,
   582 03240      C        VgaString_033:
   583            C      M 	VGASTR	#(TABSTR_7BLANK)	;半屏空格
       03240 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_7BLANK 
                      3  M  PAGE #( TABSTR_7BLANK ),
       03241 1E8F     3     PAGE ( TABSTR_7BLANK / 1024 ),
       03242 100D     2     CALL ( TABSTR_7BLANK % 1024 ),
                      3  M  PAGE #( $ ),
       03243 1E8C     3     PAGE ( $ / 1024 ),
       03244 16CC     1     JMP  VGASTRING_LOOP1 ,
   584 03245      C        VgaString_034:
   585            C      M 	VGASTR	#(TABSTR_SEARCH)
       03245 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_SEARCH 
                      3  M  PAGE #( TABSTR_SEARCH ),
       03246 1E8F     3     PAGE ( TABSTR_SEARCH / 1024 ),
       03247 1137     2     CALL ( TABSTR_SEARCH % 1024 ),
                      3  M  PAGE #( $ ),
       03248 1E8C     3     PAGE ( $ / 1024 ),
       03249 16CC     1     JMP  VGASTRING_LOOP1 ,
   586 0324A      C        VgaString_035:
   587            C      M 	VGASTR	#(TABSTR_ADD)
       0324A 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ADD 
                      3  M  PAGE #( TABSTR_ADD ),
       0324B 1E8F     3     PAGE ( TABSTR_ADD / 1024 ),
       0324C 101E     2     CALL ( TABSTR_ADD % 1024 ),
                      3  M  PAGE #( $ ),
       0324D 1E8C     3     PAGE ( $ / 1024 ),
       0324E 16CC     1     JMP  VGASTRING_LOOP1 ,
   588 0324F      C        VgaString_036:
   589            C      M 	VGASTR	#(TABSTR_EMPTY)
       0324F 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_EMPTY 
                      3  M  PAGE #( TABSTR_EMPTY ),
       03250 1E8F     3     PAGE ( TABSTR_EMPTY / 1024 ),
       03251 1066     2     CALL ( TABSTR_EMPTY % 1024 ),
                      3  M  PAGE #( $ ),
       03252 1E8C     3     PAGE ( $ / 1024 ),
       03253 16CC     1     JMP  VGASTRING_LOOP1 ,
   590 03254      C        VgaString_037:
   591            C      M 	VGASTR	#(TABSTR_END)
       03254 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_END 
                      3  M  PAGE #( TABSTR_END ),
       03255 1E8F     3     PAGE ( TABSTR_END / 1024 ),
       03256 106D     2     CALL ( TABSTR_END % 1024 ),
                      3  M  PAGE #( $ ),
       03257 1E8C     3     PAGE ( $ / 1024 ),
       03258 16CC     1     JMP  VGASTRING_LOOP1 ,
   592 03259      C        VgaString_038:
   593            C      M 	VGASTR	#(TABSTR_OF)
       03259 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_OF 
                      3  M  PAGE #( TABSTR_OF ),
       0325A 1E8F     3     PAGE ( TABSTR_OF / 1024 ),
       0325B 1105     2     CALL ( TABSTR_OF % 1024 ),
                      3  M  PAGE #( $ ),
       0325C 1E8C     3     PAGE ( $ / 1024 ),
       0325D 16CC     1     JMP  VGASTRING_LOOP1 ,
   594 0325E      C        VgaString_039:
   595            C      M 	VGASTR	#(TABSTR_LIST)
       0325E 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_LIST 
                      3  M  PAGE #( TABSTR_LIST ),
       0325F 1E8F     3     PAGE ( TABSTR_LIST / 1024 ),
       03260 10BE     2     CALL ( TABSTR_LIST % 1024 ),
                      3  M  PAGE #( $ ),
       03261 1E8C     3     PAGE ( $ / 1024 ),
       03262 16CC     1     JMP  VGASTRING_LOOP1 ,
   596 03263      C        VgaString_040:
   597            C      M 	VGASTR	#(TABSTR_STORE)
       03263 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_STORE 
                      3  M  PAGE #( TABSTR_STORE ),
       03264 1E8F     3     PAGE ( TABSTR_STORE / 1024 ),
       03265 1144     2     CALL ( TABSTR_STORE % 1024 ),
                      3  M  PAGE #( $ ),
       03266 1E8C     3     PAGE ( $ / 1024 ),
       03267 16CC     1     JMP  VGASTRING_LOOP1 ,
   598 03268      C        VgaString_041:
   599            C      M 	VGASTR	#(TABSTR_NUMBER)
       03268 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_NUMBER 
                      3  M  PAGE #( TABSTR_NUMBER ),
       03269 1E8F     3     PAGE ( TABSTR_NUMBER / 1024 ),
       0326A 10F2     2     CALL ( TABSTR_NUMBER % 1024 ),
                      3  M  PAGE #( $ ),
       0326B 1E8C     3     PAGE ( $ / 1024 ),
       0326C 16CC     1     JMP  VGASTRING_LOOP1 ,
   600 0326D      C        VgaString_042:
   601            C      M 	VGASTR	#(TABSTR_NEW)
       0326D 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_NEW 
                      3  M  PAGE #( TABSTR_NEW ),
       0326E 1E8F     3     PAGE ( TABSTR_NEW / 1024 ),
       0326F 10E9     2     CALL ( TABSTR_NEW % 1024 ),
                      3  M  PAGE #( $ ),
       03270 1E8C     3     PAGE ( $ / 1024 ),
       03271 16CC     1     JMP  VGASTRING_LOOP1 ,
   602 03272      C        VgaString_043:
   603            C      M 	VGASTR	#(TABSTR_4BLANK)
       03272 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_4BLANK 
                      3  M  PAGE #( TABSTR_4BLANK ),
       03273 1E8F     3     PAGE ( TABSTR_4BLANK / 1024 ),
       03274 1007     2     CALL ( TABSTR_4BLANK % 1024 ),
                      3  M  PAGE #( $ ),
       03275 1E8C     3     PAGE ( $ / 1024 ),
       03276 16CC     1     JMP  VGASTRING_LOOP1 ,
   604 03277      C        VgaString_044:
   605            C      M 	VGASTR	#(TABSTR_ICM)
       03277 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ICM 
                      3  M  PAGE #( TABSTR_ICM ),
       03278 1E8F     3     PAGE ( TABSTR_ICM / 1024 ),
       03279 1092     2     CALL ( TABSTR_ICM % 1024 ),
                      3  M  PAGE #( $ ),
       0327A 1E8C     3     PAGE ( $ / 1024 ),
       0327B 16CC     1     JMP  VGASTRING_LOOP1 ,
   606 0327C      C        VgaString_045:
   607            C      M 	VGASTR	#(TABSTR_TOLL_SAVE)
       0327C 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_TOLL_SAVE 
                      3  M  PAGE #( TABSTR_TOLL_SAVE ),
       0327D 1E8F     3     PAGE ( TABSTR_TOLL_SAVE / 1024 ),
       0327E 115C     2     CALL ( TABSTR_TOLL_SAVE % 1024 ),
                      3  M  PAGE #( $ ),
       0327F 1E8C     3     PAGE ( $ / 1024 ),
       03280 16CC     1     JMP  VGASTRING_LOOP1 ,
   608 03281      C        VgaString_046:
   609            C      M 	VGASTR	#(TABSTR_3DOT)
       03281 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_3DOT 
                      3  M  PAGE #( TABSTR_3DOT ),
       03282 1E8F     3     PAGE ( TABSTR_3DOT / 1024 ),
       03283 1000     2     CALL ( TABSTR_3DOT % 1024 ),
                      3  M  PAGE #( $ ),
       03284 1E8C     3     PAGE ( $ / 1024 ),
       03285 16CC     1     JMP  VGASTRING_LOOP1 ,
   610 03286      C        VgaString_047:
   611            C      M 	VGASTR	#(TABSTR_DELETE3DOT)
       03286 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_DELETE3DOT 
                      3  M  PAGE #( TABSTR_DELETE3DOT ),
       03287 1E8F     3     PAGE ( TABSTR_DELETE3DOT / 1024 ),
       03288 1177     2     CALL ( TABSTR_DELETE3DOT % 1024 ),
                      3  M  PAGE #( $ ),
       03289 1E8C     3     PAGE ( $ / 1024 ),
       0328A 16CC     1     JMP  VGASTRING_LOOP1 ,
   612 0328B      C        VgaString_048:
   613            C      M 	VGASTR	#(TABSTR_MUTE)
       0328B 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_MUTE 
                      3  M  PAGE #( TABSTR_MUTE ),
       0328C 1E8F     3     PAGE ( TABSTR_MUTE / 1024 ),
       0328D 10E3     2     CALL ( TABSTR_MUTE % 1024 ),
                      3  M  PAGE #( $ ),
       0328E 1E8C     3     PAGE ( $ / 1024 ),
       0328F 16CC     1     JMP  VGASTRING_LOOP1 ,
   614 03290      C        VgaString_049:
   615            C      M 	VGASTR	#(TABSTR_ALL)
       03290 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ALL 
                      3  M  PAGE #( TABSTR_ALL ),
       03291 1E8F     3     PAGE ( TABSTR_ALL / 1024 ),
       03292 1026     2     CALL ( TABSTR_ALL % 1024 ),
                      3  M  PAGE #( $ ),
       03293 1E8C     3     PAGE ( $ / 1024 ),
       03294 16CC     1     JMP  VGASTRING_LOOP1 ,
   616 03295      C        VgaString_050:
   617            C      M 	VGASTR	#(TABSTR_DEL)
       03295 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_DEL 
                      3  M  PAGE #( TABSTR_DEL ),
       03296 1E8F     3     PAGE ( TABSTR_DEL / 1024 ),
       03297 1050     2     CALL ( TABSTR_DEL % 1024 ),
                      3  M  PAGE #( $ ),
       03298 1E8C     3     PAGE ( $ / 1024 ),
       03299 16CC     1     JMP  VGASTRING_LOOP1 ,
   618 0329A      C        VgaString_051:
   619            C      M 	VGASTR	#(TABSTR_CALL)
       0329A 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_CALL 
                      3  M  PAGE #( TABSTR_CALL ),
       0329B 1E8F     3     PAGE ( TABSTR_CALL / 1024 ),
       0329C 1033     2     CALL ( TABSTR_CALL % 1024 ),
                      3  M  PAGE #( $ ),
       0329D 1E8C     3     PAGE ( $ / 1024 ),
       0329E 16CC     1     JMP  VGASTRING_LOOP1 ,
   620 0329F      C        VgaString_052:
   621            C      M 	VGASTR	#(TABSTR_INITIALIZATION)
       0329F 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_INITIALIZATION 
                      3  M  PAGE #( TABSTR_INITIALIZATION ),
       032A0 1E8F     3     PAGE ( TABSTR_INITIALIZATION / 1024 ),
       032A1 1097     2     CALL ( TABSTR_INITIALIZATION % 1024 ),
                      3  M  PAGE #( $ ),
       032A2 1E8C     3     PAGE ( $ / 1024 ),
       032A3 16CC     1     JMP  VGASTRING_LOOP1 ,
   622 032A4      C        VgaString_053:
   623            C      M 	VGASTR	#(TABSTR_ACCESS)
       032A4 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ACCESS 
                      3  M  PAGE #( TABSTR_ACCESS ),
       032A5 1E8F     3     PAGE ( TABSTR_ACCESS / 1024 ),
       032A6 1016     2     CALL ( TABSTR_ACCESS % 1024 ),
                      3  M  PAGE #( $ ),
       032A7 1E8C     3     PAGE ( $ / 1024 ),
       032A8 16CC     1     JMP  VGASTRING_LOOP1 ,
   624 032A9      C        VgaString_054:
   625            C      M 	VGASTR	#(TABSTR_ACCESS)
       032A9 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ACCESS 
                      3  M  PAGE #( TABSTR_ACCESS ),
       032AA 1E8F     3     PAGE ( TABSTR_ACCESS / 1024 ),
       032AB 1016     2     CALL ( TABSTR_ACCESS % 1024 ),
                      3  M  PAGE #( $ ),
       032AC 1E8C     3     PAGE ( $ / 1024 ),
       032AD 16CC     1     JMP  VGASTRING_LOOP1 ,
   626 032AE      C        VgaString_055:
   627            C      M 	VGASTR	#(TABSTR_ACCESS)
       032AE 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ACCESS 
                      3  M  PAGE #( TABSTR_ACCESS ),
       032AF 1E8F     3     PAGE ( TABSTR_ACCESS / 1024 ),
       032B0 1016     2     CALL ( TABSTR_ACCESS % 1024 ),
                      3  M  PAGE #( $ ),
       032B1 1E8C     3     PAGE ( $ / 1024 ),
       032B2 16CC     1     JMP  VGASTRING_LOOP1 ,
   628 032B3      C        VgaString_056:
   629            C      M 	VGASTR	#(TABSTR_ACCESS)
       032B3 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ACCESS 
                      3  M  PAGE #( TABSTR_ACCESS ),
       032B4 1E8F     3     PAGE ( TABSTR_ACCESS / 1024 ),
       032B5 1016     2     CALL ( TABSTR_ACCESS % 1024 ),
                      3  M  PAGE #( $ ),
       032B6 1E8C     3     PAGE ( $ / 1024 ),
       032B7 16CC     1     JMP  VGASTRING_LOOP1 ,
   630 032B8      C        VgaString_057:
   631            C      M 	VGASTR	#(TABSTR_ACCESS)
       032B8 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ACCESS 
                      3  M  PAGE #( TABSTR_ACCESS ),
       032B9 1E8F     3     PAGE ( TABSTR_ACCESS / 1024 ),
       032BA 1016     2     CALL ( TABSTR_ACCESS % 1024 ),
                      3  M  PAGE #( $ ),
       032BB 1E8C     3     PAGE ( $ / 1024 ),
       032BC 16CC     1     JMP  VGASTRING_LOOP1 ,
   632 032BD      C        VgaString_058:
   633            C      M 	VGASTR	#(TABSTR_ACCESS)
       032BD 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ACCESS 
                      3  M  PAGE #( TABSTR_ACCESS ),
       032BE 1E8F     3     PAGE ( TABSTR_ACCESS / 1024 ),
       032BF 1016     2     CALL ( TABSTR_ACCESS % 1024 ),
                      3  M  PAGE #( $ ),
       032C0 1E8C     3     PAGE ( $ / 1024 ),
       032C1 16CC     1     JMP  VGASTRING_LOOP1 ,
   634 032C2      C        VgaString_059:
   635            C      M 	VGASTR	#(TABSTR_ACCESS)
       032C2 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ACCESS 
                      3  M  PAGE #( TABSTR_ACCESS ),
       032C3 1E8F     3     PAGE ( TABSTR_ACCESS / 1024 ),
       032C4 1016     2     CALL ( TABSTR_ACCESS % 1024 ),
                      3  M  PAGE #( $ ),
       032C5 1E8C     3     PAGE ( $ / 1024 ),
       032C6 16CC     1     JMP  VGASTRING_LOOP1 ,
   636 032C7      C        VgaString_060:
   637            C      M 	VGASTR	#(TABSTR_ACCESS)
       032C7 040D     1     MOV A, _RD 
                      2  M  LCALL  TABSTR_ACCESS 
                      3  M  PAGE #( TABSTR_ACCESS ),
       032C8 1E8F     3     PAGE ( TABSTR_ACCESS / 1024 ),
       032C9 1016     2     CALL ( TABSTR_ACCESS % 1024 ),
                      3  M  PAGE #( $ ),
       032CA 1E8C     3     PAGE ( $ / 1024 ),
       032CB 16CC     1     JMP  VGASTRING_LOOP1 ,
   638            C        
   639 032CC      C        VGASTRING_LOOP1:
   640 032CC 0055 C        	MOV	TEMP0,A
   641 032CD 054D C        	INC	_RD		;counter +1
   642 032CE 0415 C        	MOV	A,TEMP0
   643 032CF 1BFF C        	XOR	A,@CH_END
   644            C      M 	JPZ	VGASTRING_RET
       032D0 0C83     1     JBC  _STATUS , Z 
       032D1 16D5     1     JMP  VGASTRING_RET ,
   645 032D2 0415 C        	MOV	A,TEMP0
   646 032D3 1026 C        	CALL	VGACHAR
   647 032D4 1557 C        	JMP	VGASTRING_LOOP
   648 032D5      C        VGASTRING_RET:
   649            C        
   650 032D5 0012 C        	RET
   651            C        ;###############################################################################
   652            C        ;	DISP_DATETIME
   653            C        ;
   654            C        ;	input : B1_MON_REG/B1_DAY_REG/B1_HOUR_REG/B1_MIN_rEG
   655            C        ;	output: 
   656            C        ;
   657            C        ;###############################################################################
   658 032D6      C        DISP_DATETIME:
   659            C        
   660            C        ;	MOV	A,@(STYLE_LEFT+STYLE_TOBCD)	;!!!
   661            C        ;	CALL	VGANUM1
   662            C        ;
   663            C        ;	MOV	A,B1_HOUR_REG
   664            C        ;	CALL	VGANUM1
   665            C        ;	MOV	A,B1_MIN_REG
   666            C        ;	CALL	VGANUM1
   667            C        ;	MOV	A,B1_DAY_REG
   668            C        ;	CALL	VGANUM1
   669            C        ;	MOV	A,B1_MON_REG
   670            C        ;	CALL	VGANUM1
   671            C        ;	MOV	A,@CH_END
   672            C        ;	CALL	VGANUM1
   673            C        ;	CALL	VGADRAWNUM1
   674            C      M 	BLOCK	0
       032D6 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       032D7 000A     1     IOW  _IOCA ,
   675            C        ;-Hour
   676            C      M 	MOV	_RC,@(LCD_1STLINE)
       032D8 1883     1     MOV A,@( LCD_1STLINE )
       032D9 004C     1     MOV  _RC ,A
   677 032DA 00CD C        	CLR	_RD
   678 032DB 0435 C        	MOV	A,B1_HOUR_REG
   679            C      M 	LCALL	HEX_DGT
                      2  M  PAGE #( HEX_DGT ),
       032DC 1E82     2     PAGE ( HEX_DGT / 1024 ),
       032DD 100F     1     CALL ( HEX_DGT % 1024 ),
                      2  M  PAGE #( $ ),
       032DE 1E8C     2     PAGE ( $ / 1024 ),
   680 032DF 0055 C        	MOV	TEMP0,A
   681 032E0 0715 C        	SWAPA	TEMP0
   682 032E1 1A0F C        	AND	A,@0X0F
   683            C      M 	JPZ	DISP_DATETIME_1		;如果为0就不显示
       032E2 0C83     1     JBC  _STATUS , Z 
       032E3 16E6     1     JMP  DISP_DATETIME_1 ,
   684 032E4 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   685 032E5 004D C        	MOV	_RD,A
   686 032E6      C        DISP_DATETIME_1:
   687 032E6 054C C        	INC	_RC
   688            C        	
   689 032E7 0415 C        	MOV	A,TEMP0
   690 032E8 1A0F C        	AND	A,@0X0F
   691 032E9 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   692 032EA 004D C        	MOV	_RD,A
   693 032EB 054C C        	INC	_RC
   694            C        ;-Minute
   695            C      M 	PAGE	#(HEX_DGT)	;!!!!
       032EC 1E82     1     PAGE ( HEX_DGT / 1024 ),
   696 032ED 0434 C        	MOV	A,B1_MIN_REG
   697 032EE 100F C        	CALL	HEX_DGT
   698 032EF 0055 C        	MOV	TEMP0,A
   699            C        
   700 032F0 0715 C        	SWAPA	TEMP0
   701 032F1 1A0F C        	AND	A,@0X0F
   702 032F2 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   703 032F3 004D C        	MOV	_RD,A
   704 032F4 054C C        	INC	_RC
   705            C        	
   706 032F5 0415 C        	MOV	A,TEMP0
   707 032F6 1A0F C        	AND	A,@0X0F
   708 032F7 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   709 032F8 004D C        	MOV	_RD,A
   710 032F9 054C C        	INC	_RC
   711            C        ;-Day
   712 032FA 0436 C        	MOV	A,B1_DAY_REG
   713 032FB 100F C        	CALL	HEX_DGT
   714 032FC 0055 C        	MOV	TEMP0,A
   715            C        	
   716 032FD 0715 C        	SWAPA	TEMP0
   717 032FE 1A0F C        	AND	A,@0X0F
   718 032FF 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   719 03300 004D C        	MOV	_RD,A
   720 03301 054C C        	INC	_RC
   721            C        	
   722 03302 0415 C        	MOV	A,TEMP0
   723 03303 1A0F C        	AND	A,@0X0F
   724 03304 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   725 03305 004D C        	MOV	_RD,A
   726 03306 054C C        	INC	_RC
   727            C        ;-Month
   728 03307 054C C        	INC	_RC
   729 03308 00CD C        	CLR	_RD	;!!!先清空低位
   730 03309 01CC C        	DEC	_RC
   731            C        
   732 0330A 0437 C        	MOV	A,B1_MON_REG
   733 0330B 100F C        	CALL	HEX_DGT
   734            C      M 	PAGE	#($)	;!!!!
       0330C 1E8C     1     PAGE ( $ / 1024 ),
   735 0330D 0055 C        	MOV	TEMP0,A
   736            C        
   737 0330E 0715 C        	SWAPA	TEMP0
   738 0330F 1A0F C        	AND	A,@0X0F
   739            C      M 	JPZ	DISP_DATETIME_2		;如果为0就不显示而且在当前位置显示低位数
       03310 0C83     1     JBC  _STATUS , Z 
       03311 1715     1     JMP  DISP_DATETIME_2 ,
   740 03312 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   741 03313 004D C        	MOV	_RD,A
   742 03314 054C C        	INC	_RC
   743 03315      C        DISP_DATETIME_2:
   744            C        
   745 03315 0415 C        	MOV	A,TEMP0
   746 03316 1A0F C        	AND	A,@0X0F
   747 03317 1F10 C        	ADD	A,@CNumDelta		;转换成机内码	
   748 03318 004D C        	MOV	_RD,A
   749            C        
   750            C        	;INC	_RC
   751            C        ;-
   752 03319 0012 C        	RET
   753            C        ;###############################################################################
   754            C        ;	DISP_TELNUM
   755            C        ;
   756            C        ;	input : 
   757            C        ;	output: 
   758            C        ;
   759            C        ;	the subroutine demand that the tel-message at specificed start address
   760            C        ;	and display only front 14(>15)/15(=15)byte or all number(<15)
   761            C        ;
   762            C        ;
   763            C        ;###############################################################################
   764 0331A      C        DISP_TELNUM:	
   765            C      M 	BLOCK	1
       0331A 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       0331B 000A     1     IOW  _IOCA ,
   766            C        	
   767            C      M 	MOV	BASE_ADDR,@0X10		;base
       0331C 1810     1     MOV A,@( 16 )
       0331D 005F     1     MOV  BASE_ADDR ,A
   768            C      M 	MOV	OFFSET_S,@NUM_START	;source
       0331E 1868     1     MOV A,@( NUM_START )
       0331F 005C     1     MOV  OFFSET_S ,A
   769            C      M 	MOV	OFFSET_D,@LCD_2NDLINE	;destination
       03320 188D     1     MOV A,@( LCD_2NDLINE )
       03321 005D     1     MOV  OFFSET_D ,A
   770            C        	
   771            C      M 	MOV	_RC,@NUM_FLAG
       03322 1862     1     MOV A,@( NUM_FLAG )
       03323 004C     1     MOV  _RC ,A
   772 03324 040D C        	MOV	A,_RD			;count
   773 03325 1A3F C        	AND	A,@0X3F			;Can't bigger than 15
   774 03326 005E C        	MOV	COUNT,A
   775            C        ;---Adjust offset_d	
   776 03327 1D0F C        	SUB	A,@LENGTH2NDL
   777            C      M 	JPNC	DISP_TELNUM_1
       03328 0E03     1     JBS  _STATUS , C 
       03329 172B     1     JMP  DISP_TELNUM_1 ,
   778            C        	
   779 0332A 03DD C        	ADD	OFFSET_D,A	;asign left
   780 0332B      C        DISP_TELNUM_1:
   781            C        ;---Adjust COUNT
   782 0332B 041E C        	MOV	A,COUNT
   783 0332C 1D0F C        	SUB	A,@LENGTH2NDL
   784            C      M 	JPC	DISP_TELNUM_2		;check length
       0332D 0C03     1     JBC  _STATUS , C 
       0332E 1731     1     JMP  DISP_TELNUM_2 ,
   785            C        	
   786            C      M 	MOV	COUNT,@14
       0332F 180E     1     MOV A,@( 14 )
       03330 005E     1     MOV  COUNT ,A
   787 03331      C        DISP_TELNUM_2:
   788            C      M 	LCALL	COPY_DATA
                      2  M  PAGE #( COPY_DATA ),
       03331 1E82     2     PAGE ( COPY_DATA / 1024 ),
       03332 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       03333 1E8C     2     PAGE ( $ / 1024 ),
   789            C        	
   790            C      M 	MOV	_RC,@NUM_FLAG
       03334 1862     1     MOV A,@( NUM_FLAG )
       03335 004C     1     MOV  _RC ,A
   791 03336 040D C        	MOV	A,_RD			;count
   792 03337 1A3F C        	AND	A,@0X3F			;Can't bigger than 15
   793 03338 1D0F C        	SUB	A,@LENGTH2NDL
   794            C      M 	JPC	DISP_TELNUM_END
       03339 0C03     1     JBC  _STATUS , C 
       0333A 1741     1     JMP  DISP_TELNUM_END ,
   795            C        ;---more than 15,display it in two time,the first end with "-",the second start with "-"	
   796            C      M 	BLOCK	0
       0333B 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0333C 000A     1     IOW  _IOCA ,
   797            C      M 	MOV	_RC,@(LCD_2NDLINE+LENGTH2NDL-1)
       0333D 189B     1     MOV A,@((( LCD_2NDLINE + LENGTH2NDL )- 1 ))
       0333E 004C     1     MOV  _RC ,A
   798            C      M 	MOV	_RD,@NUM_AMPERE
       0333F 180D     1     MOV A,@( NUM_AMPERE )
       03340 004D     1     MOV  _RD ,A
   799            C        	
   800 03341      C        DISP_TELNUM_END:
   801            C        
   802 03341 0012 C        	RET
   803            C        ;###############################################################################
   804            C        ;	DISP_TELNAME
   805            C        ;
   806            C        ;	input : 
   807            C        ;	output: 
   808            C        ;
   809            C        ;	the subroutine demand that the tel-message at specificed start address
   810            C        ;
   811            C        ;	the name length is no more than 15
   812            C        ;
   813            C        ;###############################################################################
   814 03342      C        DISP_TELNAME:	
   815            C      M 	BLOCK	1	
       03342 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       03343 000A     1     IOW  _IOCA ,
   816            C      M 	MOV	_RC,@NAME_FLAG
       03344 1863     1     MOV A,@( NAME_FLAG )
       03345 004C     1     MOV  _RC ,A
   817 03346 040D C        	MOV	A,_RD			;count
   818 03347 1A0F C        	AND	A,@0X0F			;Can't bigger than 15
   819 03348 005E C        	MOV	COUNT,A
   820            C        	
   821            C      M 	MOV	OFFSET_S,@NAME_START		;
       03349 1888     1     MOV A,@( NAME_START )
       0334A 005C     1     MOV  OFFSET_S ,A
   822            C      M 	MOV	OFFSET_D,@LCD_3RDLINE
       0334B 189C     1     MOV A,@( LCD_3RDLINE )
       0334C 005D     1     MOV  OFFSET_D ,A
   823            C      M 	LCALL	COPY_DATA
                      2  M  PAGE #( COPY_DATA ),
       0334D 1E82     2     PAGE ( COPY_DATA / 1024 ),
       0334E 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       0334F 1E8C     2     PAGE ( $ / 1024 ),
   824 03350      C        DISP_TELNAME_END:	
   825            C        
   826 03350 0012 C        	RET
   827            C        ;###############################################################################
   828            C        ;	DISP_TAILNUM
   829            C        ;
   830            C        ;	input : 
   831            C        ;	output: 
   832            C        ;
   833            C        ;	the subroutine demand that the tel-message at specificed start address
   834            C        ;and display only tail number
   835            C        ;
   836            C        ;
   837            C        ;###############################################################################
   838 03351      C        DISP_TAILNUM:	
   839            C        	
   840            C      M 	BLOCK	1
       03351 1802     1     MOV A,@((( 1 << 1 )+ VALUE_IOCA ))
       03352 000A     1     IOW  _IOCA ,
   841            C        	
   842            C      M 	MOV	_RC,@NUM_FLAG
       03353 1862     1     MOV A,@( NUM_FLAG )
       03354 004C     1     MOV  _RC ,A
   843 03355 040D C        	MOV	A,_RD			;count
   844 03356 1A3F C        	AND	A,@0X3F	
   845 03357 1D0F C        	SUB	A,@LENGTH2NDL
   846            C      M 	JPC	DISP_TAILNUM_END	;<=15 exit
       03358 0C03     1     JBC  _STATUS , C 
       03359 1773     1     JMP  DISP_TAILNUM_END ,
   847            C        
   848            C      M 	MOV	BASE_ADDR,@0X10				;base
       0335A 1810     1     MOV A,@( 16 )
       0335B 005F     1     MOV  BASE_ADDR ,A
   849            C      M 	MOV	OFFSET_S,@(NUM_START+LENGTH2NDL-1)	;source
       0335C 1876     1     MOV A,@((( NUM_START + LENGTH2NDL )- 1 ))
       0335D 005C     1     MOV  OFFSET_S ,A
   850            C      M 	MOV	OFFSET_D,@(LCD_2NDLINE+1)		;destination
       0335E 188E     1     MOV A,@(( LCD_2NDLINE + 1 ))
       0335F 005D     1     MOV  OFFSET_D ,A
   851            C        
   852            C      M 	MOV	_RC,@NUM_FLAG
       03360 1862     1     MOV A,@( NUM_FLAG )
       03361 004C     1     MOV  _RC ,A
   853 03362 040D C        	MOV	A,_RD			;count
   854 03363 1A3F C        	AND	A,@0X3F	
   855 03364 005E C        	MOV	COUNT,A
   856 03365 1D1C C        	SUB	A,@28			;Can't display the tel-number when the length over the 28
   857            C      M 	JPNC	DISP_TAILNUM_END	
       03366 0E03     1     JBS  _STATUS , C 
       03367 1773     1     JMP  DISP_TAILNUM_END ,
   858            C        
   859 03368 180E C        	MOV	A,@(LENGTH2NDL-1)
   860 03369 015E C        	SUB	COUNT,A
   861            C        	
   862            C        
   863            C      M 	LCALL	COPY_DATA
                      2  M  PAGE #( COPY_DATA ),
       0336A 1E82     2     PAGE ( COPY_DATA / 1024 ),
       0336B 1085     1     CALL ( COPY_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       0336C 1E8C     2     PAGE ( $ / 1024 ),
   864            C        ;---Start with"-"		
   865            C      M 	BLOCK	0
       0336D 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0336E 000A     1     IOW  _IOCA ,
   866            C      M 	MOV	_RC,@LCD_2NDLINE
       0336F 188D     1     MOV A,@( LCD_2NDLINE )
       03370 004C     1     MOV  _RC ,A
   867            C      M 	MOV	_RD,@NUM_AMPERE
       03371 180D     1     MOV A,@( NUM_AMPERE )
       03372 004D     1     MOV  _RD ,A
   868 03373      C        DISP_TAILNUM_END:
   869            C        
   870 03373 0012 C        	RET	
   871            C        ;###############################################################################
   872            C        ;	DISP_ID
   873            C        ;
   874            C        ;	input : acc = the ID(HEX - 0..0xC7)
   875            C        ;	output: no
   876            C        ;
   877            C        ;
   878            C        ;###############################################################################
   879 03374      C        DISP_ID:
   880 03374 0073 C        	MOV	B1_SEC_REG,A
   881 03375 1F38 C        	ADD	A,@(0X100-200)		;>=200,can't display
   882            C      M 	JPC	DISP_ID_5
       03376 0C03     1     JBC  _STATUS , C 
       03377 1798     1     JMP  DISP_ID_5 ,
   883            C        ;--- <200
   884            C      M 	CLRC
       03378 0803     1     BC  _STATUS , C 
   885 03379 0433 C        	MOV	A,B1_SEC_REG
   886 0337A 1F9C C        	ADD	A,@(0X100-100)		;>=100
   887            C      M 	JPNC	DISP_ID_1
       0337B 0E03     1     JBS  _STATUS , C 
       0337C 177E     1     JMP  DISP_ID_1 ,
   888 0337D 0073 C        	MOV	B1_SEC_REG,A
   889 0337E      C        DISP_ID_1:
   890            C      M 	JPC	DISP_ID_3	;Check STATUS.C=1 if need to display "1" or not
       0337E 0C03     1     JBC  _STATUS , C 
       0337F 1783     1     JMP  DISP_ID_3 ,
   891            C        ;DISP_ID_2:
   892            C        	
   893 03380 18EF C        	MOV	A,@~(1<<4)	;"1" off
   894 03381 1010 C        	CALL	CLRVGASTAMP2
   895            C        	
   896 03382 1785 C        	JMP	DISP_ID_4
   897 03383      C        DISP_ID_3:	
   898 03383 1810 C        	MOV	A,@(1<<4)	;"1" on
   899 03384 1004 C        	CALL	VGASTAMP2
   900 03385      C        DISP_ID_4:	
   901 03385 0433 C        	MOV	A,B1_SEC_REG
   902            C      M 	LCALL	HEX_DGT
                      2  M  PAGE #( HEX_DGT ),
       03386 1E82     2     PAGE ( HEX_DGT / 1024 ),
       03387 100F     1     CALL ( HEX_DGT % 1024 ),
                      2  M  PAGE #( $ ),
       03388 1E8C     2     PAGE ( $ / 1024 ),
   903 03389 0073 C        	MOV	B1_SEC_REG,A
   904            C        
   905            C        	;PAGE	#(VGA)
   906 0338A 1882 C        	MOV	A,@(STYLE_RIGHT)	;!!!
   907 0338B 1018 C        	CALL	VGANUM1
   908 0338C 0733 C        	SWAPA	B1_SEC_REG		;the index high nibble
   909 0338D 1A0F C        	AND	A,@0X0F
   910 0338E 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   911 0338F 1018 C        	CALL	VGANUM1
   912 03390 0433 C        	MOV	A,B1_SEC_REG		;the index low nibble
   913 03391 1A0F C        	AND	A,@0X0F
   914 03392 1F10 C        	ADD	A,@CNumDelta		;转换成机内码
   915 03393 1018 C        	CALL	VGANUM1
   916 03394 18FF C        	MOV	A,@(CH_END)
   917 03395 1018 C        	CALL	VGANUM1
   918 03396 109D C        	CALL	VGADRAWNUM1
   919            C        	;PAGE	#($)
   920            C        	
   921 03397 0012 C        	RET
   922            C        	
   923 03398      C        DISP_ID_5:
   924            C        
   925            C        	;PAGE	#(VGA)
   926 03398 18EF C        	MOV	A,@~(1<<4)	;"1" off
   927 03399 1010 C        	CALL	CLRVGASTAMP2
   928            C        
   929 0339A 1882 C        	MOV	A,@(STYLE_RIGHT)	;!!!
   930 0339B 1018 C        	CALL	VGANUM1
   931 0339C 1800 C        	MOV	A,@NUM_BLANK
   932 0339D 1018 C        	CALL	VGANUM1
   933 0339E 1800 C        	MOV	A,@NUM_BLANK	
   934 0339F 1018 C        	CALL	VGANUM1
   935 033A0 18FF C        	MOV	A,@(CH_END)
   936 033A1 1018 C        	CALL	VGANUM1
   937 033A2 109D C        	CALL	VGADRAWNUM1
   938            C        	;PAGE	#($)
   939            C        	
   940 033A3 0012 C        	RET
   941            C        ;-------------------------------------------------------------------------------
   942            C        ;	Disp the 2nd line(messages calls)(new/all)
   943            C        ;	use it in idle
   944            C        ;-------------------------------------------------------------------------------
   945 033A4      C        DISP_NEWVPCID:
   946            C      M 	BLOCK	0
       033A4 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       033A5 000A     1     IOW  _IOCA ,
   947            C      M 	BANK	1
       033A6 0B84     1     BS  _RSR , 6 
       033A7 09C4     1     BC  _RSR , 7 
   948            C        	
   949            C      M 	MOV	B1_DAY_REG,B1_MSG_N
       033A8 0431     1     MOV A, B1_MSG_N 
       033A9 0076     1     MOV  B1_DAY_REG ,A
   950            C      M 	MOV	B1_MON_REG,B1_CID_N
       033AA 042F     1     MOV A, B1_CID_N 
       033AB 0077     1     MOV  B1_MON_REG ,A
   951            C        	
   952 033AC 17B5 C        	JMP	VPCID_DISP
   953            C        ;-------------------------------------------------------------------------------
   954 033AD      C        DISP_ALLVPCID:
   955            C      M 	BLOCK	0
       033AD 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       033AE 000A     1     IOW  _IOCA ,
   956            C      M 	BANK	1
       033AF 0B84     1     BS  _RSR , 6 
       033B0 09C4     1     BC  _RSR , 7 
   957            C        ;---hour
   958            C      M 	MOV	B1_DAY_REG,B1_MSG_T
       033B1 0430     1     MOV A, B1_MSG_T 
       033B2 0076     1     MOV  B1_DAY_REG ,A
   959            C      M 	MOV	B1_MON_REG,B1_CID_T
       033B3 042E     1     MOV A, B1_CID_T 
       033B4 0077     1     MOV  B1_MON_REG ,A
   960 033B5      C        VPCID_DISP:
   961 033B5 1891 C        	MOV	A,@(LCD_CTRL+OFFSET2NDL+4)
   962 033B6 004C C        	MOV	_RC,A
   963            C        	
   964 033B7 0436 C        	MOV	A,B1_DAY_REG
   965            C      M 	PAGE	#(HEX_DGT)	;Note invoke this subroutine only(no other subroutine or jmp)
       033B8 1E82     1     PAGE ( HEX_DGT / 1024 ),
   966 033B9 100F C        	CALL	HEX_DGT
   967            C      M 	PAGE	#($)
       033BA 1E8C     1     PAGE ( $ / 1024 ),
   968 033BB 0055 C        	MOV	TEMP0,A
   969 033BC 1A0F C        	AND	A,@0X0F
   970 033BD 1F10 C        	ADD	A,@CNumDelta	;转换成机内码
   971 033BE 004D C        	MOV	_RD,A		;个位
   972 033BF 01CC C        	DEC	_RC
   973 033C0 0715 C        	SWAPA	TEMP0
   974 033C1 1A0F C        	AND	A,@0X0F
   975 033C2 1F10 C        	ADD	A,@CNumDelta	;转换成机内码
   976 033C3 004D C        	MOV	_RD,A		;十位
   977            C        ;---
   978 033C4 1898 C        	MOV	A,@(LCD_CTRL+OFFSET2NDL+11)
   979 033C5 004C C        	MOV	_RC,A
   980            C        
   981 033C6 0437 C        	MOV	A,B1_MON_REG
   982            C      M 	PAGE	#(HEX_DGT)	;Note invoke this subroutine only(no other subroutine or jmp)
       033C7 1E82     1     PAGE ( HEX_DGT / 1024 ),
   983 033C8 100F C        	CALL	HEX_DGT
   984            C      M 	PAGE	#($)
       033C9 1E8C     1     PAGE ( $ / 1024 ),
   985 033CA 0055 C        	MOV	TEMP0,A
   986 033CB 1A0F C        	AND	A,@0X0F
   987 033CC 1F10 C        	ADD	A,@CNumDelta	;转换成机内码
   988 033CD 004D C        	MOV	_RD,A		;个位
   989 033CE 01CC C        	DEC	_RC
   990 033CF 0715 C        	SWAPA	TEMP0
   991 033D0 1A0F C        	AND	A,@0X0F
   992 033D1 1F10 C        	ADD	A,@CNumDelta	;转换成机内码
   993 033D2 004D C        	MOV	_RD,A		;十位
   994            C        
   995 033D3 0012 C        	RET
   996            C        	
   997            C        	
   629                     
   630                     ;-------------------------------------------------------------------------------
   631                     ;page13
   632                     INCLUDE		"lcddisp.dt"
     1            C        ORG	(13<<10)	;the 11th page
     2            C        ;-------------------------------------------------------------------------------
     3            C        ;	第x个字符对应起始seg值(右起)
     4            C        ;-------------------------------------------------------------------------------
     5 03400      C        SEGSTAB_1NUM:
     6 03400 0020 C        	TBL
     7 03401 1C03 C        	RETL	3
     8 03402 1C05 C        	RETL	5
     9 03403 1C12 C        	RETL	18
    10 03404 1C14 C        	RETL	20
    11 03405 1C17 C        	RETL	23
    12 03406 1C19 C        	RETL	25
    13 03407 1C1C C        	RETL	28
    14 03408 1C1E C        	RETL	30
    15 03409 1C21 C        	RETL	33
    16 0340A 1C23 C        	RETL	35
    17            C        ;-------------------------------------------------------------------------------
    18            C        ;	第x个字符对应起始seg值(右起)
    19            C        ;-------------------------------------------------------------------------------
    20 0340B      C        SEGSTAB_2NUM:
    21 0340B 0020 C        	TBL
    22 0340C 1C00 C        	RETL	0
    23 0340D 1C03 C        	RETL	3
    24 0340E 1C05 C        	RETL	5
    25 0340F 1C08 C        	RETL	8
    26 03410 1C0A C        	RETL	10
    27 03411 1C0D C        	RETL	13
    28 03412 1C0F C        	RETL	15
    29 03413 1C12 C        	RETL	18
    30 03414 1C14 C        	RETL	20
    31 03415 1C17 C        	RETL	23
    32 03416 1C19 C        	RETL	25
    33 03417 1C1C C        	RETL	28
    34 03418 1C1E C        	RETL	30
    35 03419 1C21 C        	RETL	33
    36 0341A 1C23 C        	RETL	35
    37            C        ;-------------------------------------------------------------------------------
    38            C        ;	第x个字符对应起始seg值(右起)
    39            C        ;-------------------------------------------------------------------------------
    40 0341B      C        SEGSTAB_3MATRIX:
    41 0341B 0020 C        	TBL
    42 0341C 1C00 C        	RETL	0	;0
    43 0341D 1C07 C        	RETL	7	;1
    44 0341E 1C03 C        	RETL	3	;2
    45 0341F 1C0C C        	RETL	12	;3
    46 03420 1C08 C        	RETL	8	;4
    47 03421 1C11 C        	RETL	17	;5
    48 03422 1C0D C        	RETL	13	;6
    49 03423 1C16 C        	RETL	22	;7
    50 03424 1C12 C        	RETL	18	;8
    51 03425 1C1B C        	RETL	27	;9
    52 03426 1C17 C        	RETL	23	;10
    53 03427 1C20 C        	RETL	32	;11
    54 03428 1C1C C        	RETL	28	;12
    55 03429 1C25 C        	RETL	37	;13
    56 0342A 1C21 C        	RETL	33	;14
    57            C        ;-------------------------------------------------------------------------------
    58            C        ;	第x个字符对应起始seg值(右起)
    59            C        ;	将最高与最低信,次高与次低位对调
    60            C        ;-------------------------------------------------------------------------------
    61 0342B      C        SEGSTAB_3ADJ:	;0/1/2/3/4 <==> 4/3/2/1/0
    62 0342B 0020 C        	TBL
    63 0342C 1C00 C        	RETL	(0x00<<3)	;0 0000b
    64 0342D 1C80 C        	RETL	(0x10<<3)	;0 0001b
    65 0342E 1C40 C        	RETL	(0x08<<3)	;0 0010b
    66 0342F 1CC0 C        	RETL	(0x18<<3)	;0 0011b
    67 03430 1C20 C        	RETL	(0x04<<3)	;0 0100b
    68 03431 1CA0 C        	RETL	(0x14<<3)	;0 0101b
    69 03432 1C60 C        	RETL	(0x0C<<3)	;0 0110b
    70 03433 1CE0 C        	RETL	(0x1C<<3)	;0 0111b
    71 03434 1C10 C        	RETL	(0x02<<3)	;0 1000b
    72 03435 1C90 C        	RETL	(0x12<<3)	;0 1001b
    73 03436 1C50 C        	RETL	(0x0A<<3)	;0 1010b
    74 03437 1CD0 C        	RETL	(0x1A<<3)	;0 1011b
    75 03438 1C30 C        	RETL	(0x06<<3)	;0 1100b
    76 03439 1CB0 C        	RETL	(0x16<<3)	;0 1101b
    77 0343A 1C70 C        	RETL	(0x0E<<3)	;0 1110b
    78 0343B 1CF0 C        	RETL	(0x1E<<3)	;0 1111b
    79 0343C 1C08 C        	RETL	(0x01<<3)	;1 0000b
    80 0343D 1C88 C        	RETL	(0x11<<3)	;1 0001b
    81 0343E 1C48 C        	RETL	(0x09<<3)	;1 0010b
    82 0343F 1CC8 C        	RETL	(0x19<<3)	;1 0011b
    83 03440 1C28 C        	RETL	(0x05<<3)	;1 0100b
    84 03441 1CA8 C        	RETL	(0x15<<3)	;1 0101b
    85 03442 1C68 C        	RETL	(0x0D<<3)	;1 0110b
    86 03443 1CE8 C        	RETL	(0x1D<<3)	;1 0111b
    87 03444 1C18 C        	RETL	(0x03<<3)	;1 1000b
    88 03445 1C98 C        	RETL	(0x13<<3)	;1 1001b
    89 03446 1C58 C        	RETL	(0x0B<<3)	;1 1010b
    90 03447 1CD8 C        	RETL	(0x1B<<3)	;1 1011b
    91 03448 1C38 C        	RETL	(0x07<<3)	;1 1100b
    92 03449 1CB8 C        	RETL	(0x17<<3)	;1 1101b
    93 0344A 1C78 C        	RETL	(0x0F<<3)	;1 1110b
    94 0344B 1CF8 C        	RETL	(0x1F<<3)	;1 1111b
    95            C        ;-------------------------------------------------------------------------------
    96            C        ;	第x个字符对应起始seg值(右起)
    97            C        ;	寻找第一个5*5方阵中各列对应的Seg
    98            C        ;-------------------------------------------------------------------------------
    99 0344C      C        SEGSTAB_1STMATRIX:
   100 0344C 0020 C        	TBL
   101 0344D 1C40 C        	RETL	0x40+0	
   102 0344E 1C41 C        	RETL	0x40+1
   103 0344F 1C42 C        	RETL	0x40+2
   104 03450 1C01 C        	RETL	1
   105 03451 1C00 C        	RETL	0
   106            C        /***************************************
   107            C        显示第一行标志
   108            C        
   109            C        .0		handset
   110            C        .1		spk
   111            C        .2		sencond
   112            C        .3		AM
   113            C        .4		PM
   114            C        .5		/
   115            C        .6		battery-low
   116            C        .7		mute
   117            C        
   118            C        第二个寄存器标示8个标志
   119            C        .0		MSG
   120            C        .1		RPT
   121            C        .2		NEW
   122            C        .3		CALL
   123            C        .4		1
   124            C        .5		reserved
   125            C        .6		reserved
   126            C        .7		reserved
   127            C        ***************************************/
   128 03452      C        DISP_STAMP:
   129            C        ;---display the first line stamp in the first register
   130            C      M 	MOV	_RC,@(LCD_CTRL+OFFSETSTMP)
       03452 1881     1     MOV A,@(( LCD_CTRL + OFFSETSTMP ))
       03453 004C     1     MOV  _RC ,A
   131            C      M 	MOV	TEMP0,_RD
       03454 040D     1     MOV A, _RD 
       03455 0055     1     MOV  TEMP0 ,A
   132            C        
   133            C      M 	WR_STAMP	TEMP0,0,@(18+0X0),0,TEMP1	;handset	(seg-19th*comm-1th)
       03456 1812     1     MOV A,@(( 18 + 0 ))
       03457 000B     1     IOW  _IOCB ,
       03458 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       03459 040D     2     MOV A, _RD 
       0345A 0056     2     MOV  TEMP1 ,A
       0345B 0816     1     BC  TEMP1 , 0 
       0345C 0C15     1     JBC  TEMP0 , 0 
       0345D 0A16     1     BS  TEMP1 , 0 
       0345E 0416     1     MOV A, TEMP1 
       0345F 000C     1     IOW  _IOCC ,
       03460 004D     1     MOV  _RD ,A
   134            C      M 	WR_STAMP	TEMP0,1,@(18+0X40),0,TEMP1	;SPK		(seg-19th*comm-9st)
       03461 1852     1     MOV A,@(( 18 + 64 ))
       03462 000B     1     IOW  _IOCB ,
       03463 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       03464 040D     2     MOV A, _RD 
       03465 0056     2     MOV  TEMP1 ,A
       03466 0816     1     BC  TEMP1 , 0 
       03467 0C55     1     JBC  TEMP0 , 1 
       03468 0A16     1     BS  TEMP1 , 0 
       03469 0416     1     MOV A, TEMP1 
       0346A 000C     1     IOW  _IOCC ,
       0346B 004D     1     MOV  _RD ,A
   135            C      M 	WR_STAMP	TEMP0,2,@(33+0X0),0,TEMP1	;second		(seg-34th*comm-1th)
       0346C 1821     1     MOV A,@(( 33 + 0 ))
       0346D 000B     1     IOW  _IOCB ,
       0346E 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       0346F 040D     2     MOV A, _RD 
       03470 0056     2     MOV  TEMP1 ,A
       03471 0816     1     BC  TEMP1 , 0 
       03472 0C95     1     JBC  TEMP0 , 2 
       03473 0A16     1     BS  TEMP1 , 0 
       03474 0416     1     MOV A, TEMP1 
       03475 000C     1     IOW  _IOCC ,
       03476 004D     1     MOV  _RD ,A
   136            C      M 	WR_STAMP	TEMP0,3,@(28+0X40),0,TEMP1	;AM		(seg-29th*comm-9th)
       03477 185C     1     MOV A,@(( 28 + 64 ))
       03478 000B     1     IOW  _IOCB ,
       03479 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       0347A 040D     2     MOV A, _RD 
       0347B 0056     2     MOV  TEMP1 ,A
       0347C 0816     1     BC  TEMP1 , 0 
       0347D 0CD5     1     JBC  TEMP0 , 3 
       0347E 0A16     1     BS  TEMP1 , 0 
       0347F 0416     1     MOV A, TEMP1 
       03480 000C     1     IOW  _IOCC ,
       03481 004D     1     MOV  _RD ,A
   137            C      M 	WR_STAMP	TEMP0,4,@(28+0X0),0,TEMP1	;PM		(seg-29th*comm-1th)
       03482 181C     1     MOV A,@(( 28 + 0 ))
       03483 000B     1     IOW  _IOCB ,
       03484 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       03485 040D     2     MOV A, _RD 
       03486 0056     2     MOV  TEMP1 ,A
       03487 0816     1     BC  TEMP1 , 0 
       03488 0D15     1     JBC  TEMP0 , 4 
       03489 0A16     1     BS  TEMP1 , 0 
       0348A 0416     1     MOV A, TEMP1 
       0348B 000C     1     IOW  _IOCC ,
       0348C 004D     1     MOV  _RD ,A
   138            C      M 	WR_STAMP	TEMP0,5,@(23+0X0),0,TEMP1	;/		(seg-24th*comm-1th)
       0348D 1817     1     MOV A,@(( 23 + 0 ))
       0348E 000B     1     IOW  _IOCB ,
       0348F 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       03490 040D     2     MOV A, _RD 
       03491 0056     2     MOV  TEMP1 ,A
       03492 0816     1     BC  TEMP1 , 0 
       03493 0D55     1     JBC  TEMP0 , 5 
       03494 0A16     1     BS  TEMP1 , 0 
       03495 0416     1     MOV A, TEMP1 
       03496 000C     1     IOW  _IOCC ,
       03497 004D     1     MOV  _RD ,A
   139            C      M 	WR_STAMP	TEMP0,6,@(12+0X40),1,TEMP1	;battery-low	(seg-13th*comm-10th)
       03498 184C     1     MOV A,@(( 12 + 64 ))
       03499 000B     1     IOW  _IOCB ,
       0349A 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       0349B 040D     2     MOV A, _RD 
       0349C 0056     2     MOV  TEMP1 ,A
       0349D 0856     1     BC  TEMP1 , 1 
       0349E 0D95     1     JBC  TEMP0 , 6 
       0349F 0A56     1     BS  TEMP1 , 1 
       034A0 0416     1     MOV A, TEMP1 
       034A1 000C     1     IOW  _IOCC ,
       034A2 004D     1     MOV  _RD ,A
   140            C      M 	WR_STAMP	TEMP0,7,@(13+0X40),2,TEMP1	;mute		(seg-14th*comm-11th)
       034A3 184D     1     MOV A,@(( 13 + 64 ))
       034A4 000B     1     IOW  _IOCB ,
       034A5 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       034A6 040D     2     MOV A, _RD 
       034A7 0056     2     MOV  TEMP1 ,A
       034A8 0896     1     BC  TEMP1 , 2 
       034A9 0DD5     1     JBC  TEMP0 , 7 
       034AA 0A96     1     BS  TEMP1 , 2 
       034AB 0416     1     MOV A, TEMP1 
       034AC 000C     1     IOW  _IOCC ,
       034AD 004D     1     MOV  _RD ,A
   141            C        ;---display the first line stamp in the second register
   142            C      M 	MOV	_RC,@(LCD_CTRL+OFFSETSTMP+1)
       034AE 1882     1     MOV A,@((( LCD_CTRL + OFFSETSTMP )+ 1 ))
       034AF 004C     1     MOV  _RC ,A
   143            C        	;MOV	_RC,@(LCD_CTRL+OFFSETSTMP)
   144            C      M 	MOV	TEMP0,_RD
       034B0 040D     1     MOV A, _RD 
       034B1 0055     1     MOV  TEMP0 ,A
   145            C        	
   146            C      M 	WR_STAMP	TEMP0,0,@(11+0X40),1,TEMP1	;MSG	(seg-12th*comm-10th)
       034B2 184B     1     MOV A,@(( 11 + 64 ))
       034B3 000B     1     IOW  _IOCB ,
       034B4 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       034B5 040D     2     MOV A, _RD 
       034B6 0056     2     MOV  TEMP1 ,A
       034B7 0856     1     BC  TEMP1 , 1 
       034B8 0C15     1     JBC  TEMP0 , 0 
       034B9 0A56     1     BS  TEMP1 , 1 
       034BA 0416     1     MOV A, TEMP1 
       034BB 000C     1     IOW  _IOCC ,
       034BC 004D     1     MOV  _RD ,A
   147            C      M 	WR_STAMP	TEMP0,1,@(11+0X40),2,TEMP1	;RPT	(seg-12th*comm-11th)
       034BD 184B     1     MOV A,@(( 11 + 64 ))
       034BE 000B     1     IOW  _IOCB ,
       034BF 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       034C0 040D     2     MOV A, _RD 
       034C1 0056     2     MOV  TEMP1 ,A
       034C2 0896     1     BC  TEMP1 , 2 
       034C3 0C55     1     JBC  TEMP0 , 1 
       034C4 0A96     1     BS  TEMP1 , 2 
       034C5 0416     1     MOV A, TEMP1 
       034C6 000C     1     IOW  _IOCC ,
       034C7 004D     1     MOV  _RD ,A
   148            C      M 	WR_STAMP	TEMP0,2,@(10+0X40),1,TEMP1	;NEW	(seg-11th*comm-10th)
       034C8 184A     1     MOV A,@(( 10 + 64 ))
       034C9 000B     1     IOW  _IOCB ,
       034CA 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       034CB 040D     2     MOV A, _RD 
       034CC 0056     2     MOV  TEMP1 ,A
       034CD 0856     1     BC  TEMP1 , 1 
       034CE 0C95     1     JBC  TEMP0 , 2 
       034CF 0A56     1     BS  TEMP1 , 1 
       034D0 0416     1     MOV A, TEMP1 
       034D1 000C     1     IOW  _IOCC ,
       034D2 004D     1     MOV  _RD ,A
   149            C      M 	WR_STAMP	TEMP0,3,@(10+0X40),2,TEMP1	;CALL	(seg-11th*comm-11th)
       034D3 184A     1     MOV A,@(( 10 + 64 ))
       034D4 000B     1     IOW  _IOCB ,
       034D5 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       034D6 040D     2     MOV A, _RD 
       034D7 0056     2     MOV  TEMP1 ,A
       034D8 0896     1     BC  TEMP1 , 2 
       034D9 0CD5     1     JBC  TEMP0 , 3 
       034DA 0A96     1     BS  TEMP1 , 2 
       034DB 0416     1     MOV A, TEMP1 
       034DC 000C     1     IOW  _IOCC ,
       034DD 004D     1     MOV  _RD ,A
   150            C      M 	WR_STAMP	TEMP0,4,@(8+0X40),1,TEMP1	;1	(seg-9th*comm-10th)
       034DE 1848     1     MOV A,@(( 8 + 64 ))
       034DF 000B     1     IOW  _IOCB ,
       034E0 004C     1     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       034E1 040D     2     MOV A, _RD 
       034E2 0056     2     MOV  TEMP1 ,A
       034E3 0856     1     BC  TEMP1 , 1 
       034E4 0D15     1     JBC  TEMP0 , 4 
       034E5 0A56     1     BS  TEMP1 , 1 
       034E6 0416     1     MOV A, TEMP1 
       034E7 000C     1     IOW  _IOCC ,
       034E8 004D     1     MOV  _RD ,A
   151            C        	;WR_STAMP	TEMP0,5,@(31+0X0),1,TEMP1
   152            C        	;WR_STAMP	TEMP0,6,@(32+0X0),1,TEMP1
   153            C        	;WR_STAMP	TEMP0,7,@(33+0X0),1,TEMP1
   154            C        	
   155 034E9 0012 C        	RET
   156            C        ;-------------------------------------------------------------------------------
   157            C        ;	input : STAMP_REG(STAMP_BIT) - source-data
   158            C        ;		LCD_ADDR(LCD_BIT) - Seg(comm-bit)
   159            C        ;		STAMP_TEMP - temp memory
   160            C        ;-------------------------------------------------------------------------------	
   161            C        WR_STAMP	MACRO	STAMP_REG,STAMP_BIT,@LCD_ADDR,LCD_BIT,STAMP_TEMP
   162            C        	MOV	A,@LCD_ADDR
   163            C        	IOW	_IOCB
   164            C        	MOV	_RC,A
   165            C        	MOV	STAMP_TEMP,_RD
   166            C        
   167            C        	BC	STAMP_TEMP,LCD_BIT
   168            C        	JBC	STAMP_REG,STAMP_BIT
   169            C        	BS	STAMP_TEMP,LCD_BIT
   170            C        	
   171            C        	MOV	A,STAMP_TEMP
   172            C        	IOW	_IOCC
   173            C        	MOV	_RD,A
   174            C        	ENDM
   175            C        
   176            C        ;-------------------------------------------------------------------------------
   177            C        ;	对数字(0..0X12)进行合法性检查超出范围的视同空数字
   178            C        ;-------------------------------------------------------------------------------
   179 034EA      C        NUM_VERIFY:
   180            C        	;DISI
   181 034EA 005A C        	MOV	TEMP5,A
   182 034EB 1D62 C        	SUB	A,@0X62
   183            C      M 	JPC	NUM_VERIFY_RET
       034EC 0C03     1     JBC  _STATUS , C 
       034ED 14F0     1     JMP  NUM_VERIFY_RET ,
   184            C      M 	MOV	TEMP5,@NUM_BLANK
       034EE 1800     1     MOV A,@( NUM_BLANK )
       034EF 005A     1     MOV  TEMP5 ,A
   185 034F0      C        NUM_VERIFY_RET:
   186 034F0 041A C        	MOV	A,TEMP5
   187            C        	;ENI
   188 034F1 0012 C        	RET
   189            C        
   190            C        ;---对字符(0..0X2F)进行合法性检查超出范围的视同空字符
   191 034F2      C        STR_VERIFY:
   192            C        	;DISI
   193 034F2 005A C        	MOV	TEMP5,A
   194 034F3 1D62 C        	SUB	A,@0X62
   195            C      M 	JPC	STR_VERIFY_RET
       034F4 0C03     1     JBC  _STATUS , C 
       034F5 14F8     1     JMP  STR_VERIFY_RET ,
   196            C      M 	MOV	TEMP5,@CH_BLANK
       034F6 1800     1     MOV A,@( CH_BLANK )
       034F7 005A     1     MOV  TEMP5 ,A
   197 034F8      C        STR_VERIFY_RET:
   198 034F8 041A C        	MOV	A,TEMP5
   199            C        	;ENI
   200 034F9 0012 C        	RET
   201            C        
   202            C        	
   203            C        /***************************************
   204            C        显示第一行的数字
   205            C        数字信息按顺序列在10个数字寄存器中
   206            C        
   207            C        	TEMP0	;待显示数字的位置.从右往左(对应第一行上的数字的序号)
   208            C        	TEMP1	;待显示数字的位置所对应的起始Seg值
   209            C        	TEMP2	;正在处理的当前待显示数字的Seg序号(=实际机器Seg序号－起始Seg序号TEMP1)
   210            C        	TEMP3	;待显示的字符值,及转换成字符值对应的段码
   211            C        	TEMP4	;临时存放TEMP3的值
   212            C        ***************************************/
   213 034FA      C        DISP_NUM1:
   214 034FA 00D5 C        	CLR	TEMP0				;待显示的位置在LCD上的编号(左起)
   215 034FB      C        DISP_NUM1_LOOP:
   216 034FB 00D6 C        	CLR	TEMP1				;待显示的位置的seg起始地址
   217 034FC 00D7 C        	CLR	TEMP2				;待显示的位置的seg偏移
   218            C        ;---Get data
   219 034FD 0415 C        	MOV	A,TEMP0
   220 034FE 1D09 C        	SUB	A,@9
   221 034FF 1F83 C        	ADD	A,@(LCD_CTRL+OFFSETDATE)
   222 03500 004C C        	MOV	_RC,A
   223            C      M 	MOV	TEMP3,_RD			; 得到需要显示的字符值
       03501 040D     1     MOV A, _RD 
       03502 0058     1     MOV  TEMP3 ,A
   224            C        ;---Get display-code with specific data
   225            C      M 	ANDA	TEMP3,@0X7F
       03503 187F     1     MOV A,@( 127 )
       03504 0298     1     AND A, TEMP3 
   226            C      M 	LCALL	SECOND_LINE_TAB
                      2  M  PAGE #( SECOND_LINE_TAB ),
       03505 1E8E     2     PAGE ( SECOND_LINE_TAB / 1024 ),
       03506 1264     1     CALL ( SECOND_LINE_TAB % 1024 ),
                      2  M  PAGE #( $ ),
       03507 1E8D     2     PAGE ( $ / 1024 ),
   227 03508 0058 C        	MOV	TEMP3,A				; 查表得到字符值对应的段码
   228            C        
   229            C        ;---Get first Seg of data with specific site-offset
   230            C      M 	ADD	TEMP1,@0X40			; 字符在COM8~COM15，需要+40H的偏移地址
       03509 1840     1     MOV A,@( 64 )
       0350A 03D6     1     ADD  TEMP1 ,A
   231 0350B 0415 C        	MOV	A,TEMP0
   232 0350C 1000 C        	CALL	SEGSTAB_1NUM
   233 0350D 03D6 C        	ADD	TEMP1,A
   234 0350E      C        DISP_NUM1_LOOP_1:
   235            C      M 	MOV	TEMP4,TEMP3
       0350E 0418     1     MOV A, TEMP3 
       0350F 0059     1     MOV  TEMP4 ,A
   236            C      M 	JPB	TEMP0,0,DISP_NUM1_LOOP_ODD
       03510 0C15     1     JBC  TEMP0 , 0 
       03511 153A     1     JMP  DISP_NUM1_LOOP_ODD ,
   237 03512      C        DISP_NUM1_LOOP_EVEN:			; 显示偶数位的数字
   238            C        ;---偶数位排列同第一行的数字：232型排列: 0cbdgaef	cb0 dga ef0
   239            C      M 	ADDA	TEMP1,TEMP2
       03512 0417     1     MOV A, TEMP2 
       03513 0396     1     ADD A, TEMP1 
   240 03514 000B C        	IOW	_IOCB
   241 03515 004C C        	MOV	_RC,A
   242            C        	
   243 03516 0417 C        	MOV	A,TEMP2
   244            C      M 	JPZ	DISP_NUM1_LOOP_EVEN_1
       03517 0C83     1     JBC  _STATUS , Z 
       03518 1521     1     JMP  DISP_NUM1_LOOP_EVEN_1 ,
   245            C      M 	SUBA	TEMP2,@1
       03519 1801     1     MOV A,@( 1 )
       0351A 0117     1     SUB A, TEMP2 
   246            C      M 	JPZ	DISP_NUM1_LOOP_EVEN_2
       0351B 0C83     1     JBC  _STATUS , Z 
       0351C 152B     1     JMP  DISP_NUM1_LOOP_EVEN_2 ,
   247            C      M 	SUBA	TEMP2,@2
       0351D 1802     1     MOV A,@( 2 )
       0351E 0117     1     SUB A, TEMP2 
   248            C      M 	JPZ	DISP_NUM1_LOOP_EVEN_3
       0351F 0C83     1     JBC  _STATUS , Z 
       03520 1533     1     JMP  DISP_NUM1_LOOP_EVEN_3 ,
   249            C        	;JMP	VIEW_ERR
   250 03521      C        DISP_NUM1_LOOP_EVEN_1:
   251 03521 0659 C        	RRC	TEMP4
   252 03522 0659 C        	RRC	TEMP4
   253 03523 0659 C        	RRC	TEMP4
   254 03524 0659 C        	RRC	TEMP4
   255            C      M 	AND	TEMP4,@6
       03525 1806     1     MOV A,@( 6 )
       03526 02D9     1     AND  TEMP4 ,A
   256 03527 040D C        	MOV	A,_RD
   257 03528 1AF9 C        	AND	A,@0XF9
   258 03529 0219 C        	OR	A,TEMP4
   259 0352A 156C C        	JMP	DISP_NUM1_LOOP_2
   260 0352B      C        DISP_NUM1_LOOP_EVEN_2:
   261 0352B 0659 C        	RRC	TEMP4
   262 0352C 0659 C        	RRC	TEMP4
   263            C      M 	AND	TEMP4,@7
       0352D 1807     1     MOV A,@( 7 )
       0352E 02D9     1     AND  TEMP4 ,A
   264 0352F 040D C        	MOV	A,_RD
   265 03530 1AF8 C        	AND	A,@0XF8
   266 03531 0219 C        	OR	A,TEMP4
   267 03532 156C C        	JMP	DISP_NUM1_LOOP_2
   268 03533      C        DISP_NUM1_LOOP_EVEN_3:
   269 03533 06D9 C        	RLC	TEMP4
   270            C      M 	AND	TEMP4,@6
       03534 1806     1     MOV A,@( 6 )
       03535 02D9     1     AND  TEMP4 ,A
   271 03536 040D C        	MOV	A,_RD
   272 03537 1AF9 C        	AND	A,@0XF9
   273 03538 0219 C        	OR	A,TEMP4
   274 03539 156C C        	JMP	DISP_NUM1_LOOP_2
   275            C        
   276 0353A      C        DISP_NUM1_LOOP_ODD:
   277            C        ; 奇数位排列规则为：133型排列: 0cbdgaef 00b cga def
   278            C      M 	ADDA	TEMP1,TEMP2
       0353A 0417     1     MOV A, TEMP2 
       0353B 0396     1     ADD A, TEMP1 
   279 0353C 000B C        	IOW	_IOCB
   280 0353D 004C C        	MOV	_RC,A
   281            C        	
   282 0353E 0417 C        	MOV	A,TEMP2
   283            C      M 	JPZ	DISP_NUM1_LOOP_ODD_1
       0353F 0C83     1     JBC  _STATUS , Z 
       03540 1549     1     JMP  DISP_NUM1_LOOP_ODD_1 ,
   284            C      M 	SUBA	TEMP2,@1
       03541 1801     1     MOV A,@( 1 )
       03542 0117     1     SUB A, TEMP2 
   285            C      M 	JPZ	DISP_NUM1_LOOP_ODD_2
       03543 0C83     1     JBC  _STATUS , Z 
       03544 1554     1     JMP  DISP_NUM1_LOOP_ODD_2 ,
   286            C      M 	SUBA	TEMP2,@2
       03545 1802     1     MOV A,@( 2 )
       03546 0117     1     SUB A, TEMP2 
   287            C      M 	JPZ	DISP_NUM1_LOOP_ODD_3
       03547 0C83     1     JBC  _STATUS , Z 
       03548 1561     1     JMP  DISP_NUM1_LOOP_ODD_3 ,
   288            C        	;JMP	VIEW_ERR
   289 03549      C        DISP_NUM1_LOOP_ODD_1:
   290 03549 0659 C        	RRC	TEMP4
   291 0354A 0659 C        	RRC	TEMP4
   292 0354B 0659 C        	RRC	TEMP4
   293 0354C 0659 C        	RRC	TEMP4
   294 0354D 0659 C        	RRC	TEMP4
   295            C      M 	AND	TEMP4,@1
       0354E 1801     1     MOV A,@( 1 )
       0354F 02D9     1     AND  TEMP4 ,A
   296 03550 040D C        	MOV	A,_RD
   297 03551 1AFE C        	AND	A,@0XFE
   298 03552 0219 C        	OR	A,TEMP4
   299 03553 156C C        	JMP	DISP_NUM1_LOOP_2
   300 03554      C        DISP_NUM1_LOOP_ODD_2:
   301            C      M 	AND	_RD,@0XF8
       03554 18F8     1     MOV A,@( 248 )
       03555 02CD     1     AND  _RD ,A
   302 03556 0659 C        	RRC	TEMP4
   303 03557 0659 C        	RRC	TEMP4
   304 03558 0419 C        	MOV	A,TEMP4
   305 03559 1A03 C        	AND	A,@3
   306 0355A 024D C        	OR	_RD,A
   307 0355B 0659 C        	RRC	TEMP4
   308 0355C 0659 C        	RRC	TEMP4
   309 0355D 0419 C        	MOV	A,TEMP4
   310 0355E 1A04 C        	AND	A,@4
   311 0355F 020D C        	OR	A,_RD
   312 03560 156C C        	JMP	DISP_NUM1_LOOP_2
   313 03561      C        DISP_NUM1_LOOP_ODD_3:
   314            C      M 	AND	_RD,@0XF8
       03561 18F8     1     MOV A,@( 248 )
       03562 02CD     1     AND  _RD ,A
   315 03563 0419 C        	MOV	A,TEMP4
   316 03564 1A03 C        	AND	A,@3
   317 03565 024D C        	OR	_RD,A
   318 03566 0659 C        	RRC	TEMP4
   319 03567 0659 C        	RRC	TEMP4
   320 03568 0419 C        	MOV	A,TEMP4
   321 03569 1A04 C        	AND	A,@4
   322 0356A 020D C        	OR	A,_RD
   323 0356B 156C C        	JMP	DISP_NUM1_LOOP_2	
   324 0356C      C        DISP_NUM1_LOOP_2:
   325 0356C 004D C        	MOV	_RD,A
   326 0356D 000C C        	IOW	_IOCC
   327 0356E 0557 C        	INC	TEMP2
   328            C      M 	SUBA	TEMP2,@3
       0356F 1803     1     MOV A,@( 3 )
       03570 0117     1     SUB A, TEMP2 
   329            C      M 	JPNZ	DISP_NUM1_LOOP_1
       03571 0E83     1     JBS  _STATUS , Z 
       03572 150E     1     JMP  DISP_NUM1_LOOP_1 ,
   330 03573 0555 C        	INC	TEMP0
   331            C      M 	SUBA	TEMP0,@10
       03574 180A     1     MOV A,@( 10 )
       03575 0115     1     SUB A, TEMP0 
   332            C      M 	JPNZ	DISP_NUM1_LOOP
       03576 0E83     1     JBS  _STATUS , Z 
       03577 14FB     1     JMP  DISP_NUM1_LOOP ,
   333            C        	
   334 03578 0012 C        	RET
   335            C        
   336            C        
   337            C        /***************************************
   338            C        显示第二行的数字
   339            C        数字信息按顺序列在以(LCD_CTRL+12)开始的15个数字寄存器中
   340            C        ***************************************/
   341 03579      C        DISP_NUM2:
   342 03579 00D5 C        	CLR	TEMP0				; 显示的位数
   343 0357A      C        VIEW_NUM2_LOOP:
   344 0357A 00D6 C        	CLR	TEMP1				;待显示的位置的seg起始地址
   345 0357B 00D7 C        	CLR	TEMP2				;待显示的位置的seg偏移
   346            C        ;---Get data
   347 0357C 0415 C        	MOV	A,TEMP0
   348 0357D 1D0E C        	SUB	A,@14
   349 0357E 1F8D C        	ADD	A,@(LCD_CTRL+OFFSET2NDL)
   350 0357F 004C C        	MOV	_RC,A
   351            C      M 	MOV	TEMP3,_RD			; 得到需要显示的字符
       03580 040D     1     MOV A, _RD 
       03581 0058     1     MOV  TEMP3 ,A
   352            C        
   353            C      M 	ANDA	TEMP3,@0X7F			; 得到需要显示的数字
       03582 187F     1     MOV A,@( 127 )
       03583 0298     1     AND A, TEMP3 
   354            C      M 	LCALL	SECOND_LINE_TAB
                      2  M  PAGE #( SECOND_LINE_TAB ),
       03584 1E8E     2     PAGE ( SECOND_LINE_TAB / 1024 ),
       03585 1264     1     CALL ( SECOND_LINE_TAB % 1024 ),
                      2  M  PAGE #( $ ),
       03586 1E8D     2     PAGE ( $ / 1024 ),
   355 03587 0058 C        	MOV	TEMP3,A				; 查表得到字符对应的段码
   356            C        
   357 03588 0415 C        	MOV	A,TEMP0
   358 03589 100B C        	CALL	SEGSTAB_2NUM
   359 0358A 0056 C        	MOV	TEMP1,A
   360 0358B      C        VIEW_NUM2_LOOP_1:
   361            C      M 	MOV	TEMP4,TEMP3
       0358B 0418     1     MOV A, TEMP3 
       0358C 0059     1     MOV  TEMP4 ,A
   362            C      M 	JPNB	TEMP0,0,VIEW_NUM2_LOOP_EVEN
       0358D 0E15     1     JBS  TEMP0 , 0 
       0358E 15B7     1     JMP  VIEW_NUM2_LOOP_EVEN ,
   363 0358F      C        VIEW_NUM2_LOOP_ODD:				; 显示偶数位的数字
   364            C        ; 奇数数位排列同第一行的数字：232型排列: 0cbdgaef	cb0 dga ef0
   365            C      M 	ADDA	TEMP1,TEMP2
       0358F 0417     1     MOV A, TEMP2 
       03590 0396     1     ADD A, TEMP1 
   366 03591 000B C        	IOW	_IOCB
   367 03592 004C C        	MOV	_RC,A
   368            C        	
   369 03593 0417 C        	MOV	A,TEMP2
   370            C      M 	JPZ	VIEW_NUM2_LOOP_EVEN_1
       03594 0C83     1     JBC  _STATUS , Z 
       03595 159E     1     JMP  VIEW_NUM2_LOOP_EVEN_1 ,
   371            C      M 	SUBA	TEMP2,@1
       03596 1801     1     MOV A,@( 1 )
       03597 0117     1     SUB A, TEMP2 
   372            C      M 	JPZ	VIEW_NUM2_LOOP_EVEN_2
       03598 0C83     1     JBC  _STATUS , Z 
       03599 15A8     1     JMP  VIEW_NUM2_LOOP_EVEN_2 ,
   373            C      M 	SUBA	TEMP2,@2
       0359A 1802     1     MOV A,@( 2 )
       0359B 0117     1     SUB A, TEMP2 
   374            C      M 	JPZ	VIEW_NUM2_LOOP_EVEN_3
       0359C 0C83     1     JBC  _STATUS , Z 
       0359D 15B0     1     JMP  VIEW_NUM2_LOOP_EVEN_3 ,
   375            C        	;JMP	VIEW_ERR
   376 0359E      C        VIEW_NUM2_LOOP_EVEN_1:
   377 0359E 0659 C        	RRC	TEMP4
   378 0359F 0659 C        	RRC	TEMP4
   379 035A0 0659 C        	RRC	TEMP4
   380 035A1 0659 C        	RRC	TEMP4
   381            C      M 	AND	TEMP4,@6
       035A2 1806     1     MOV A,@( 6 )
       035A3 02D9     1     AND  TEMP4 ,A
   382 035A4 040D C        	MOV	A,_RD
   383 035A5 1AF9 C        	AND	A,@0XF9
   384 035A6 0219 C        	OR	A,TEMP4
   385 035A7 15E9 C        	JMP	VIEW_NUM2_LOOP_2
   386 035A8      C        VIEW_NUM2_LOOP_EVEN_2:
   387 035A8 0659 C        	RRC	TEMP4
   388 035A9 0659 C        	RRC	TEMP4
   389            C      M 	AND	TEMP4,@7
       035AA 1807     1     MOV A,@( 7 )
       035AB 02D9     1     AND  TEMP4 ,A
   390 035AC 040D C        	MOV	A,_RD
   391 035AD 1AF8 C        	AND	A,@0XF8
   392 035AE 0219 C        	OR	A,TEMP4
   393 035AF 15E9 C        	JMP	VIEW_NUM2_LOOP_2
   394 035B0      C        VIEW_NUM2_LOOP_EVEN_3:
   395 035B0 06D9 C        	RLC	TEMP4
   396            C      M 	AND	TEMP4,@6
       035B1 1806     1     MOV A,@( 6 )
       035B2 02D9     1     AND  TEMP4 ,A
   397 035B3 040D C        	MOV	A,_RD
   398 035B4 1AF9 C        	AND	A,@0XF9
   399 035B5 0219 C        	OR	A,TEMP4
   400 035B6 15E9 C        	JMP	VIEW_NUM2_LOOP_2
   401            C        ;-------------------------------------------------
   402 035B7      C        VIEW_NUM2_LOOP_EVEN:
   403            C        ;偶数位排列规则为：133型排列: 0cbdgaef 00b cga def
   404            C      M 	ADDA	TEMP1,TEMP2
       035B7 0417     1     MOV A, TEMP2 
       035B8 0396     1     ADD A, TEMP1 
   405 035B9 000B C        	IOW	_IOCB
   406 035BA 004C C        	MOV	_RC,A
   407            C        	
   408 035BB 0417 C        	MOV	A,TEMP2
   409            C      M 	JPZ	VIEW_NUM2_LOOP_ODD_1
       035BC 0C83     1     JBC  _STATUS , Z 
       035BD 15C6     1     JMP  VIEW_NUM2_LOOP_ODD_1 ,
   410            C      M 	SUBA	TEMP2,@1
       035BE 1801     1     MOV A,@( 1 )
       035BF 0117     1     SUB A, TEMP2 
   411            C      M 	JPZ	VIEW_NUM2_LOOP_ODD_2
       035C0 0C83     1     JBC  _STATUS , Z 
       035C1 15D1     1     JMP  VIEW_NUM2_LOOP_ODD_2 ,
   412            C      M 	SUBA	TEMP2,@2
       035C2 1802     1     MOV A,@( 2 )
       035C3 0117     1     SUB A, TEMP2 
   413            C      M 	JPZ	VIEW_NUM2_LOOP_ODD_3
       035C4 0C83     1     JBC  _STATUS , Z 
       035C5 15DE     1     JMP  VIEW_NUM2_LOOP_ODD_3 ,
   414            C        	;JMP	VIEW_ERR
   415 035C6      C        VIEW_NUM2_LOOP_ODD_1:
   416 035C6 0659 C        	RRC	TEMP4
   417 035C7 0659 C        	RRC	TEMP4
   418 035C8 0659 C        	RRC	TEMP4
   419 035C9 0659 C        	RRC	TEMP4
   420 035CA 0659 C        	RRC	TEMP4
   421            C      M 	AND	TEMP4,@1
       035CB 1801     1     MOV A,@( 1 )
       035CC 02D9     1     AND  TEMP4 ,A
   422 035CD 040D C        	MOV	A,_RD
   423 035CE 1AFE C        	AND	A,@0XFE
   424 035CF 0219 C        	OR	A,TEMP4
   425 035D0 15E9 C        	JMP	VIEW_NUM2_LOOP_2
   426 035D1      C        VIEW_NUM2_LOOP_ODD_2:
   427            C      M 	AND	_RD,@0XF8
       035D1 18F8     1     MOV A,@( 248 )
       035D2 02CD     1     AND  _RD ,A
   428 035D3 0659 C        	RRC	TEMP4
   429 035D4 0659 C        	RRC	TEMP4
   430 035D5 0419 C        	MOV	A,TEMP4
   431 035D6 1A03 C        	AND	A,@3
   432 035D7 024D C        	OR	_RD,A
   433 035D8 0659 C        	RRC	TEMP4
   434 035D9 0659 C        	RRC	TEMP4
   435 035DA 0419 C        	MOV	A,TEMP4
   436 035DB 1A04 C        	AND	A,@4
   437 035DC 020D C        	OR	A,_RD
   438 035DD 15E9 C        	JMP	VIEW_NUM2_LOOP_2
   439 035DE      C        VIEW_NUM2_LOOP_ODD_3:
   440            C      M 	AND	_RD,@0XF8
       035DE 18F8     1     MOV A,@( 248 )
       035DF 02CD     1     AND  _RD ,A
   441 035E0 0419 C        	MOV	A,TEMP4
   442 035E1 1A03 C        	AND	A,@3
   443 035E2 024D C        	OR	_RD,A
   444 035E3 0659 C        	RRC	TEMP4
   445 035E4 0659 C        	RRC	TEMP4
   446 035E5 0419 C        	MOV	A,TEMP4
   447 035E6 1A04 C        	AND	A,@4
   448 035E7 020D C        	OR	A,_RD
   449 035E8 15E9 C        	JMP	VIEW_NUM2_LOOP_2
   450            C        	
   451 035E9      C        VIEW_NUM2_LOOP_2:
   452 035E9 004D C        	MOV	_RD,A
   453 035EA 000C C        	IOW	_IOCC
   454 035EB 0557 C        	INC	TEMP2
   455            C      M 	SUBA	TEMP2,@3
       035EC 1803     1     MOV A,@( 3 )
       035ED 0117     1     SUB A, TEMP2 
   456            C      M 	JPNZ	VIEW_NUM2_LOOP_1
       035EE 0E83     1     JBS  _STATUS , Z 
       035EF 158B     1     JMP  VIEW_NUM2_LOOP_1 ,
   457 035F0 0555 C        	INC	TEMP0
   458            C      M 	SUBA	TEMP0,@15
       035F1 180F     1     MOV A,@( 15 )
       035F2 0115     1     SUB A, TEMP0 
   459            C      M 	JPNZ	VIEW_NUM2_LOOP
       035F3 0E83     1     JBS  _STATUS , Z 
       035F4 157A     1     JMP  VIEW_NUM2_LOOP ,
   460            C        	
   461 035F5 0012 C        	RET
   462            C        
   463            C        ;-------------------------------------------------------------------------------
   464            C        ;	刷新第三行的显示字符串
   465            C        ;	字符串信息按顺序列在以(LCD_3RDLINE)开始的15个字符寄存器中
   466            C        ;-------------------------------------------------------------------------------
   467 035F6      C        DISP_CHAR:
   468 035F6 00D5 C        	CLR	TEMP0				; 显示的位数序号(第三行有15位.从0开始,到14结束)
   469 035F7      C        DISP_CHAR_LOOP:
   470 035F7 00D6 C        	CLR	TEMP1				;待显示的位置的seg起始地址
   471 035F8 00D7 C        	CLR	TEMP2				;待显示的位置的seg偏移
   472            C        ;---Get data
   473 035F9 0415 C        	MOV	A,TEMP0
   474 035FA 1D0E C        	SUB	A,@14
   475 035FB 1F9C C        	ADD	A,@(LCD_CTRL+OFFSET3RDL)
   476 035FC 004C C        	MOV	_RC,A
   477 035FD 040D C        	MOV	A,_RD			; 得到需要显示的字符
   478 035FE 10F2 C        	CALL	STR_VERIFY
   479 035FF 0058 C        	MOV	TEMP3,A
   480            C        	
   481            C      M 	AND	TEMP3,@0X7F
       03600 187F     1     MOV A,@( 127 )
       03601 02D8     1     AND  TEMP3 ,A
   482            C        	
   483            C      M 	JPB	TEMP0,0,DISP_CHAR_LOOP_ODD
       03602 0C15     1     JBC  TEMP0 , 0 
       03603 1606     1     JMP  DISP_CHAR_LOOP_ODD ,
   484 03604      C        DISP_CHAR_LOOP_EVEN:				;0/2/4/6/8/10/12/14
   485            C      M 	ADD	TEMP1,@0X40			;+偏移
       03604 1840     1     MOV A,@( 64 )
       03605 03D6     1     ADD  TEMP1 ,A
   486 03606      C        DISP_CHAR_LOOP_ODD:				;1/3/5/7/9/11/13
   487 03606 0415 C        	MOV	A,TEMP0
   488 03607 101B C        	CALL	SEGSTAB_3MATRIX			;得到需要显示的seg起始偏移地址
   489 03608 03D6 C        	ADD	TEMP1,A
   490            C        ;---------------------------------------
   491 03609      C        DISP_CHAR_LOOP_2:
   492 03609 0415 C        	MOV	A,TEMP0
   493            C      M 	JPZ	DISP_CHAR_1MATRIX		;第一个5*5点阵单独处理
       0360A 0C83     1     JBC  _STATUS , Z 
       0360B 1650     1     JMP  DISP_CHAR_1MATRIX ,
   494            C        ;---------------------------------------
   495 0360C 0417 C        	MOV	A,TEMP2
   496            C      M 	JPB	TEMP0,0,DISP_CHAR_LOOP_2_ODD
       0360D 0C15     1     JBC  TEMP0 , 0 
       0360E 1611     1     JMP  DISP_CHAR_LOOP_2_ODD ,
   497 0360F      C        DISP_CHAR_LOOP_2_EVEN:
   498 0360F 0396 C        	ADD	A,TEMP1				;偏移TEMP2+起始列TEMP1 ＝ 实际地址
   499 03610 1612 C        	JMP	DISP_CHAR_LOOP_2_SETADDR
   500 03611      C        DISP_CHAR_LOOP_2_ODD:
   501 03611 0116 C        	SUB	A,TEMP1
   502 03612      C        DISP_CHAR_LOOP_2_SETADDR:
   503 03612 000B C        	IOW	_IOCB
   504 03613 004C C        	MOV	_RC,A
   505            C      M 	LINE_STR_TAB	TEMP3,TEMP2		;根据字符和所在点阵的列号得到在该列该字符的显示码。
       03614 0417     1     MOV A, TEMP2 
       03615 0020     1     TBL 
       03616 161B     1     JMP  LINE_STR_TAB_1 ,
       03617 1620     1     JMP  LINE_STR_TAB_2 ,
       03618 1625     1     JMP  LINE_STR_TAB_3 ,
       03619 162A     1     JMP  LINE_STR_TAB_4 ,
       0361A 162F     1     JMP  LINE_STR_TAB_5 ,
       0361B          1    LINE_STR_TAB_1:   
       0361B 0418     1     MOV A, TEMP3 
                      2  M  PAGE #( THIRD_LINE_TABA ),
       0361C 1E8E     2     PAGE ( THIRD_LINE_TABA / 1024 ),
       0361D 1200     1     CALL  THIRD_LINE_TABA ,
                      2  M  PAGE #( $ ),
       0361E 1E8D     2     PAGE ( $ / 1024 ),
       0361F 1634     1     JMP  LINE_STR_TAB_RET ,
       03620          1    LINE_STR_TAB_2:   
       03620 0418     1     MOV A, TEMP3 
                      2  M  PAGE #( THIRD_LINE_TABB ),
       03621 1E8E     2     PAGE ( THIRD_LINE_TABB / 1024 ),
       03622 1164     1     CALL  THIRD_LINE_TABB ,
                      2  M  PAGE #( $ ),
       03623 1E8D     2     PAGE ( $ / 1024 ),
       03624 1634     1     JMP  LINE_STR_TAB_RET ,
       03625          1    LINE_STR_TAB_3:   
       03625 0418     1     MOV A, TEMP3 
                      2  M  PAGE #( THIRD_LINE_TABC ),
       03626 1E8E     2     PAGE ( THIRD_LINE_TABC / 1024 ),
       03627 1100     1     CALL  THIRD_LINE_TABC ,
                      2  M  PAGE #( $ ),
       03628 1E8D     2     PAGE ( $ / 1024 ),
       03629 1634     1     JMP  LINE_STR_TAB_RET ,
       0362A          1    LINE_STR_TAB_4:   
       0362A 0418     1     MOV A, TEMP3 
                      2  M  PAGE #( THIRD_LINE_TABD ),
       0362B 1E8E     2     PAGE ( THIRD_LINE_TABD / 1024 ),
       0362C 1064     1     CALL  THIRD_LINE_TABD ,
                      2  M  PAGE #( $ ),
       0362D 1E8D     2     PAGE ( $ / 1024 ),
       0362E 1634     1     JMP  LINE_STR_TAB_RET ,
       0362F          1    LINE_STR_TAB_5:   
       0362F 0418     1     MOV A, TEMP3 
                      2  M  PAGE #( THIRD_LINE_TABE ),
       03630 1E8E     2     PAGE ( THIRD_LINE_TABE / 1024 ),
       03631 1000     1     CALL  THIRD_LINE_TABE ,
                      2  M  PAGE #( $ ),
       03632 1E8D     2     PAGE ( $ / 1024 ),
       03633 1634     1     JMP  LINE_STR_TAB_RET ,
       03634          1    LINE_STR_TAB_RET:   
   506 03634 0059 C        	MOV	TEMP4,A
   507            C        ;---------------------------------------
   508 03635 0415 C        	MOV	A,TEMP0
   509            C      M 	JPZ	DISP_CHAR_ODD		;第一个5*5点阵单独处理
       03636 0C83     1     JBC  _STATUS , Z 
       03637 163A     1     JMP  DISP_CHAR_ODD ,
   510            C        
   511            C      M 	JPNB	TEMP0,0,DISP_CHAR_EVEN
       03638 0E15     1     JBS  TEMP0 , 0 
       03639 1640     1     JMP  DISP_CHAR_EVEN ,
   512 0363A      C        DISP_CHAR_ODD:
   513            C        
   514 0363A 0659 C        	RRC	TEMP4
   515 0363B 0659 C        	RRC	TEMP4
   516 0363C 0619 C        	RRCA	TEMP4
   517 0363D 1A1F C        	AND	A,@0X1F
   518 0363E 102B C        	CALL	SEGSTAB_3ADJ
   519 0363F 0059 C        	MOV	TEMP4,A
   520 03640      C        DISP_CHAR_EVEN:
   521            C        
   522 03640 040D C        	MOV	A,_RD
   523 03641 1A07 C        	AND	A,@7
   524 03642 0219 C        	OR	A,TEMP4
   525 03643 000C C        	IOW	_IOCC
   526 03644 004D C        	MOV	_RD,A
   527            C        
   528 03645      C        DISP_CHAR_DONE:
   529 03645 0557 C        	INC	TEMP2
   530            C      M 	SUBA	TEMP2,@5
       03646 1805     1     MOV A,@( 5 )
       03647 0117     1     SUB A, TEMP2 
   531            C      M 	JPNZ	DISP_CHAR_LOOP_2
       03648 0E83     1     JBS  _STATUS , Z 
       03649 1609     1     JMP  DISP_CHAR_LOOP_2 ,
   532            C        	
   533 0364A 0555 C        	INC	TEMP0
   534            C      M 	SUBA	TEMP0,@15
       0364B 180F     1     MOV A,@( 15 )
       0364C 0115     1     SUB A, TEMP0 
   535            C      M 	JPNZ	DISP_CHAR_LOOP
       0364D 0E83     1     JBS  _STATUS , Z 
       0364E 15F7     1     JMP  DISP_CHAR_LOOP ,
   536            C        	
   537 0364F 0012 C        	RET
   538            C        ;---------------------------------------
   539 03650      C        DISP_CHAR_1MATRIX:	
   540            C        
   541 03650 0417 C        	MOV	A,TEMP2
   542 03651 104C C        	CALL	SEGSTAB_1STMATRIX
   543            C        	
   544 03652 1612 C        	JMP	DISP_CHAR_LOOP_2_SETADDR
   545            C        ;-------------------------------------------------------------------------------
   546            C        ;	input : STR - character(ASCII code)
   547            C        ;		STR_ROW - line number
   548            C        ;-------------------------------------------------------------------------------	
   549            C        LINE_STR_TAB	MACRO	STR,STR_ROW
   550            C        	MOV	A,STR_ROW
   551            C        	TBL
   552            C        	JMP	LINE_STR_TAB_1
   553            C        	JMP	LINE_STR_TAB_2
   554            C        	JMP	LINE_STR_TAB_3
   555            C        	JMP	LINE_STR_TAB_4
   556            C        	JMP	LINE_STR_TAB_5
   557            C        LINE_STR_TAB_1:
   558            C        	MOV	A,STR
   559            C        	PAGE	#(THIRD_LINE_TABA)
   560            C        	CALL	THIRD_LINE_TABA
   561            C        	PAGE	#($)
   562            C        	JMP	LINE_STR_TAB_RET
   563            C        LINE_STR_TAB_2:
   564            C        	MOV	A,STR
   565            C        	PAGE	#(THIRD_LINE_TABB)
   566            C        	CALL	THIRD_LINE_TABB
   567            C        	PAGE	#($)
   568            C        	JMP	LINE_STR_TAB_RET
   569            C        LINE_STR_TAB_3:
   570            C        	MOV	A,STR
   571            C        	PAGE	#(THIRD_LINE_TABC)
   572            C        	CALL	THIRD_LINE_TABC
   573            C        	PAGE	#($)
   574            C        	JMP	LINE_STR_TAB_RET
   575            C        LINE_STR_TAB_4:
   576            C        	MOV	A,STR
   577            C        	PAGE	#(THIRD_LINE_TABD)
   578            C        	CALL	THIRD_LINE_TABD
   579            C        	PAGE	#($)
   580            C        	JMP	LINE_STR_TAB_RET
   581            C        LINE_STR_TAB_5:
   582            C        	MOV	A,STR
   583            C        	PAGE	#(THIRD_LINE_TABE)
   584            C        	CALL	THIRD_LINE_TABE
   585            C        	PAGE	#($)
   586            C        	JMP	LINE_STR_TAB_RET
   587            C        LINE_STR_TAB_RET:
   588            C        	ENDM
   589            C        ;-------------------------------------------------------------------------------
   590 03653      C        LCD_DISP:
   591            C        	
   592            C        	;JPB	EVENT,7,LCD_DISP_RET	;???????????????????????????????????????
   593            C        	
   594            C      M 	BLOCK	0
       03653 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       03654 000A     1     IOW  _IOCA ,
   595            C      M 	BANK	1
       03655 0B84     1     BS  _RSR , 6 
       03656 09C4     1     BC  _RSR , 7 
   596            C      M 	MOV	_RC,@LCD_CTRL
       03657 1880     1     MOV A,@( LCD_CTRL )
       03658 004C     1     MOV  _RC ,A
   597            C        
   598            C      M 	JPB	_RD,4,LCD_DISP_STAMP
       03659 0D0D     1     JBC  _RD , 4 
       0365A 1662     1     JMP  LCD_DISP_STAMP ,
   599            C      M 	JPB	_RD,5,LCD_DISP_1STNUM
       0365B 0D4D     1     JBC  _RD , 5 
       0365C 1665     1     JMP  LCD_DISP_1STNUM ,
   600            C      M 	JPB	_RD,6,LCD_DISP_2NDNUM
       0365D 0D8D     1     JBC  _RD , 6 
       0365E 1668     1     JMP  LCD_DISP_2NDNUM ,
   601            C      M 	JPB	_RD,7,LCD_DISP_3RDCHR
       0365F 0DCD     1     JBC  _RD , 7 
       03660 166B     1     JMP  LCD_DISP_3RDCHR ,
   602            C        	
   603 03661      C        LCD_DISP_RET:
   604            C        
   605 03661 0012 C        	RET
   606 03662      C        LCD_DISP_STAMP:
   607 03662 090D C        	BC	_RD,4
   608            C      M 	LJMP	DISP_STAMP
                      2  M  PAGE #( DISP_STAMP ),
       03663 1E8D     2     PAGE ( DISP_STAMP / 1024 ),
       03664 1452     1     JMP ( DISP_STAMP % 1024 ),
   609 03665      C        LCD_DISP_1STNUM:
   610 03665 094D C        	BC	_RD,5
   611            C      M 	LJMP	DISP_NUM1
                      2  M  PAGE #( DISP_NUM1 ),
       03666 1E8D     2     PAGE ( DISP_NUM1 / 1024 ),
       03667 14FA     1     JMP ( DISP_NUM1 % 1024 ),
   612 03668      C        LCD_DISP_2NDNUM:
   613 03668 098D C        	BC	_RD,6
   614            C      M 	LJMP	DISP_NUM2
                      2  M  PAGE #( DISP_NUM2 ),
       03669 1E8D     2     PAGE ( DISP_NUM2 / 1024 ),
       0366A 1579     1     JMP ( DISP_NUM2 % 1024 ),
   615 0366B      C        LCD_DISP_3RDCHR:
   616 0366B 09CD C        	BC	_RD,7
   617            C      M 	LJMP	DISP_CHAR
                      2  M  PAGE #( DISP_CHAR ),
       0366C 1E8D     2     PAGE ( DISP_CHAR / 1024 ),
       0366D 15F6     1     JMP ( DISP_CHAR % 1024 ),
   618            C        
   619            C        ;-------------------------------------------------------------------------------
   620            C        
   621            C        
   633                     INCLUDE		"ring_det.dt"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;-------------------------------------------------------------------------------
     3            C        ;------ BELOWS ARE FOR RING CHECKING (FREQUENCY RANGE : 14 - 100 Hz===###change 1 2 3 4) ---------
     4 0366E      C        RING_CHK:
     5            C      M 	BANK	2
       0366E 0984     1     BC  _RSR , 6 
       0366F 0BC4     1     BS  _RSR , 7 
     6            C        ;---------------
     7 03670 043D C        	MOV	A,B2_RING_TMR
     8 03671 1BFF C        	XOR	A,@0XFF
     9            C      M 	JPZ	RING_CHK_1
       03672 0C83     1     JBC  _STATUS , Z 
       03673 1675     1     JMP  RING_CHK_1 ,
    10 03674 057D C        	INC	B2_RING_TMR
    11 03675      C        RING_CHK_1:
    12            C        ;---------------	
    13 03675 043C C        	MOV	A,B2_RING_ID
    14 03676 1A0F C        	AND	A,@0X0F
    15            C      M 	JPZ	RING_CHK_END
       03677 0C83     1     JBC  _STATUS , Z 
       03678 16EA     1     JMP  RING_CHK_END ,
    16            C      M 	JPB	B2_RING_FLAG,7,RING_LOW_CHK		;check if in ring low state ?
       03679 0DFB     1     JBC  B2_RING_FLAG , 7 
       0367A 1687     1     JMP  RING_LOW_CHK ,
    17            C      M 	JPB	B2_RING_FLAG,6,RING_HI_CHK		;check if in ring high state ?
       0367B 0DBB     1     JBC  B2_RING_FLAG , 6 
       0367C 1693     1     JMP  RING_HI_CHK ,
    18            C      M 	JPB	B2_RING_FLAG,5,RING_OFF_CHK		;check if in ring off state ?
       0367D 0D7B     1     JBC  B2_RING_FLAG , 5 
       0367E 16BF     1     JMP  RING_OFF_CHK ,
    19            C      M         JPB	B2_RING_FLAG,4,RING_WAIT		;check if in ring wait state ?
       0367F 0D3B     1     JBC  B2_RING_FLAG , 4 
       03680 16D6     1     JMP  RING_WAIT ,
    20            C        
    21            C      M 	JPB	_P9,1,RING_CHK_END			;check if the ring detector is low ?
       03681 0C49     1     JBC  _P9 , 1 
       03682 16EA     1     JMP  RING_CHK_END ,
    22            C        							;first check,only respond for low state
    23 03683 00FB C        	CLR	B2_RING_FLAG
    24 03684 0BFB C        	BS	B2_RING_FLAG,7				;set in ring low state
    25 03685 00FD C        	CLR	B2_RING_TMR
    26            C        	
    27 03686 00FE C        	CLR	B2_BUF
    28            C        ;-------------------------------------------------------------------------------
    29 03687      C        RING_LOW_CHK:
    30 03687 043D C        	MOV	A,B2_RING_TMR				;if B2_RING_TMR time out, the ring low time > 130ms
    31 03688 1D78 C        	SUB	A,@120
    32            C      M 	JPNC	RING_OFF_CHK3
       03689 0E03     1     JBS  _STATUS , C 
       0368A 16C9     1     JMP  RING_OFF_CHK3 ,
    33            C        	
    34            C      M 	JPNB	_P9,1,RING_CHK_END			;check if the ring detector is still low ? or the ring detector changes to high
       0368B 0E49     1     JBS  _P9 , 1 
       0368C 16EA     1     JMP  RING_CHK_END ,
    35            C        
    36 0368D 043D C        	MOV	A,B2_RING_TMR
    37 0368E 007F C        	MOV	B2_BUF1,A				 ;save ring low time in B2_BUF1	            	
    38 0368F 00FD C        	CLR	B2_RING_TMR
    39            C        
    40 03690 09FB C        	BC	B2_RING_FLAG,7
    41 03691 0BBB C        	BS	B2_RING_FLAG,6		    		;set in ring high state
    42            C        
    43 03692 16EA C                JMP	RING_CHK_END
    44            C        ;-------------------------------------------------------------------------------
    45 03693      C        RING_HI_CHK:
    46 03693 043D C        	MOV	A,B2_RING_TMR
    47 03694 1D78 C        	SUB	A,@120
    48            C      M 	JPNC	RING_FAIL_CHK				;check if B2_RING_TMR is timed out ?
       03695 0E03     1     JBS  _STATUS , C 
       03696 16DF     1     JMP  RING_FAIL_CHK ,
    49            C        	
    50            C      M 	JPB	_P9,1,RING_CHK_END	   		;check if the ring detector is still high		
       03697 0C49     1     JBC  _P9 , 1 
       03698 16EA     1     JMP  RING_CHK_END ,
    51            C        
    52 03699 043D C        	MOV	A,B2_RING_TMR
    53 0369A 03FF C        	ADD	B2_BUF1,A				;the (ring low time + ring high time)
    54 0369B 00FD C        	CLR	B2_RING_TMR
    55            C        
    56 0369C 043F C        	MOV	A,B2_BUF1
    57 0369D 1D64 C        	SUB	A,@100
    58            C      M 	JPNC	RING_OFF_CHK3				;be sure that the (ring low time + ring high time) < 100 ms
       0369E 0E03     1     JBS  _STATUS , C 
       0369F 16C9     1     JMP  RING_OFF_CHK3 ,
    59            C        
    60 036A0 043F C        	MOV	A,B2_BUF1
    61 036A1 1D0A C        	SUB	A,@10					;be sure that the (ring low time + ring high time) > 10 ms
    62            C      M 	JPC	RING_OFF_CHK3
       036A2 0C03     1     JBC  _STATUS , C 
       036A3 16C9     1     JMP  RING_OFF_CHK3 ,
    63            C        ;---ring pulse ok
    64 036A4 09BB C        	BC	B2_RING_FLAG,6
    65 036A5 0BFB C        	BS	B2_RING_FLAG,7  			;set in ring low state
    66            C        
    67 036A6 043B C        	MOV	A,B2_RING_FLAG
    68 036A7 1A0F C        	AND	A,@0X0F
    69 036A8 1D03 C        	SUB	A,@3 					;check if the ring pulse number=4 ?
    70            C      M 	JPZ	RING_HI_CHK_1
       036A9 0C83     1     JBC  _STATUS , Z 
       036AA 16AC     1     JMP  RING_HI_CHK_1 ,
    71            C        
    72 036AB 057B C        	INC	B2_RING_FLAG				;increase ring pulse ok
    73 036AC      C        RING_HI_CHK_1:
    74 036AC 043B C        	MOV	A,B2_RING_FLAG
    75 036AD 1A0F C        	AND	A,@0X0F
    76 036AE 1D03 C        	SUB	A,@3 					;check if the ring pulse number=4 ?
    77            C      M 	JPNZ	RING_CHK_END
       036AF 0E83     1     JBS  _STATUS , Z 
       036B0 16EA     1     JMP  RING_CHK_END ,
    78            C        
    79 036B1 043F C        	MOV	A,B2_BUF1				;the pulse(low + high)time
    80 036B2 03FE C        	ADD	B2_BUF,A				;the total time length of base ring pulse
    81            C      M 	JPC	RING_HI_CHK_GOTOOFF			;>255ms
       036B3 0C03     1     JBC  _STATUS , C 
       036B4 16B9     1     JMP  RING_HI_CHK_GOTOOFF ,
    82            C        
    83 036B5 043E C        	MOV	A,B2_BUF
    84 036B6 1F55 C        	ADD	A,@(255-170)					;the ring pulse time length > 170(ms) ? (!!!误差10ms)
    85            C      M 	JPNC	RING_CHK_END
       036B7 0E03     1     JBS  _STATUS , C 
       036B8 16EA     1     JMP  RING_CHK_END ,
    86            C        
    87 036B9      C        RING_HI_CHK_GOTOOFF:
    88            C        ;---change to the ring off state
    89 036B9 00FE C        	CLR	B2_BUF
    90            C        	
    91 036BA 00FB C        	CLR	B2_RING_FLAG
    92 036BB 0B7B C        	BS	B2_RING_FLAG,5	;set in ring off state
    93            C      M 	MOV	B2_RING_TMR2,@10 	;500 ms for min. ring off time
       036BC 180A     1     MOV A,@( 10 )
       036BD 0064     1     MOV  B2_RING_TMR2 ,A
    94            C        
    95            C        	;MOV	A,@CRING_IN
    96            C        	;LCALL	INT_STOR_MSG
    97            C        
    98 036BE 16EB C                JMP	RING_CHK_END1
    99            C        ;-------------------------------------------------------------------------------
   100 036BF      C        RING_OFF_CHK:
   101            C      M 	JPB	_P9,1,RING_OFF_CHK2
       036BF 0C49     1     JBC  _P9 , 1 
       036C0 16C4     1     JMP  RING_OFF_CHK2 ,
   102            C        
   103 036C1 180A C        	MOV	A,@10
   104 036C2 0064 C        	MOV	B2_RING_TMR2,A  	;500 ms for min. ring off time
   105            C        					;if ring detector changes to low, restore and count again
   106 036C3 16EA C        	JMP	RING_CHK_END
   107 036C4      C        RING_OFF_CHK2:
   108 036C4 0424 C        	MOV	A,B2_RING_TMR2
   109            C      M 	JPNZ	RING_CHK_END
       036C5 0E83     1     JBS  _STATUS , Z 
       036C6 16EA     1     JMP  RING_CHK_END ,
   110            C        
   111 036C7 1810 C        	MOV	A,@0X10
   112 036C8 03FC C        	ADD	B2_RING_ID,A
   113            C        
   114 036C9      C        RING_OFF_CHK3:				;ring off is finished
   115            C      M         MOV	B2_RING_TMR2,@128	;B2_RING_TMR=8.0 sec for max. ring wait time	
       036C9 1880     1     MOV A,@( 128 )
       036CA 0064     1     MOV  B2_RING_TMR2 ,A
   116            C        
   117 036CB 097B C                BC	B2_RING_FLAG,5
   118 036CC 0B3B C        	BS	B2_RING_FLAG,4   	;set in ring wait state
   119            C               			            	;one ring ok
   120 036CD 043C C        	MOV	A,B2_RING_ID           	;check if the accumulated ring number is
   121 036CE 1A0F C        	AND	A,@0X0F              	;equal to the target ring number ?
   122 036CF 0055 C        	MOV	TEMP0,A
   123            C        
   124 036D0 073C C        	SWAPA	B2_RING_ID		;check if the accumulated ring number is
   125 036D1 1A0F C        	AND	A,@0X0F
   126 036D2 0155 C        	SUB     TEMP0,A
   127            C      M 	JPZ	RING_CHK_END2
       036D3 0C83     1     JBC  _STATUS , Z 
       036D4 16EC     1     JMP  RING_CHK_END2 ,
   128            C        
   129 036D5 16EE C                JMP	RING_CHK_END4
   130            C        ;-------------------------------------------------------------------------------
   131 036D6      C        RING_WAIT:
   132            C      M 	JPB	_P9,1,RING_WAIT1
       036D6 0C49     1     JBC  _P9 , 1 
       036D7 16DC     1     JMP  RING_WAIT1 ,
   133            C        			                     	;next ring starts
   134 036D8 093B C        	BC	B2_RING_FLAG,4
   135 036D9 0BFB C        	BS	B2_RING_FLAG,7		   	;set in ring low state
   136            C        
   137 036DA 00FD C        	CLR	B2_RING_TMR
   138 036DB 1687 C        	JMP	RING_LOW_CHK
   139 036DC      C        RING_WAIT1:
   140 036DC 0424 C        	MOV	A,B2_RING_TMR2
   141            C      M 	JPNZ	RING_CHK_END	 		;if ring wait time > 8.0 sec, ring in fail
       036DD 0E83     1     JBS  _STATUS , Z 
       036DE 16EA     1     JMP  RING_CHK_END ,
   142            C        ;-------------------------------------------------------------------------------
   143 036DF      C        RING_FAIL_CHK:				;ring in fail check
   144 036DF 00FE C        	CLR	B2_BUF
   145 036E0 00FB C        	CLR	B2_RING_FLAG
   146            C        
   147 036E1 043C C        	MOV	A,B2_RING_ID
   148 036E2 0055 C        	MOV	TEMP0,A
   149            C        	
   150 036E3 043C C        	MOV	A,B2_RING_ID         	;reset all flags of RING_ID
   151 036E4 1A0F C                AND	A,@0X0F
   152 036E5 007C C        	MOV	B2_RING_ID,A
   153            C        	
   154 036E6 0715 C        	SWAPA	TEMP0
   155 036E7 1A0F C        	AND	A,@0X0F
   156            C      M 	JPNZ	RING_CHK_END3
       036E8 0E83     1     JBS  _STATUS , Z 
       036E9 16ED     1     JMP  RING_CHK_END3 ,
   157            C        	
   158 036EA      C        RING_CHK_END:                       	;not ring in ok
   159 036EA 1C00 C        	RETL	@0	;no
   160            C        
   161 036EB      C        RING_CHK_END1:
   162 036EB 1C01 C        	RETL	@1	;ring on
   163            C        
   164 036EC      C        RING_CHK_END2:
   165 036EC 1C02 C        	RETL	@2	;ring ok
   166            C        
   167 036ED      C        RING_CHK_END3:
   168 036ED 1C03 C        	RETL	@3	;ring fial	;从有铃流到8秒外无铃流
   169 036EE      C        RING_CHK_END4:
   170 036EE 1C04 C        	RETL	@4	;ring stop	;从有铃流到无铃流
   171            C        ;-------------------------------------------------------------------------------
   634                     INCLUDE		"kernel.dt"
     1            C        ;-------------------------------------------------------------------------------
     2            C        ;	约定中断程序用,不能影响到BANK
     3            C        ;-------------------------------------------------------------------------------
     4 036EF      C        INT_STOR_MSG:
     5 036EF      C        KINT_STOR_MSG:
     6 036EF 0055 C        	MOV 	TEMP0,A
     7            C        ;---	
     8            C      M 	BLOCK	0
       036F0 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       036F1 000A     1     IOW  _IOCA ,
     9            C        
    10            C      M 	MOV 	_RC,@MSG_QUEUE
       036F2 18F3     1     MOV A,@( MSG_QUEUE )
       036F3 004C     1     MOV  _RC ,A
    11 036F4 040D C        	MOV	A,_RD
    12 036F5 1A07 C        	AND 	A,@0X07
    13 036F6 1FF4 C        	ADD 	A,@MSG_QUEUE_START
    14 036F7 004C C        	MOV	_RC,A
    15 036F8 0415 C        	MOV	A,TEMP0
    16 036F9 004D C        	MOV	_RD,A
    17            C        ;---ADJUST msg_queue pointer
    18            C      M 	MOV 	_RC,@MSG_QUEUE
       036FA 18F3     1     MOV A,@( MSG_QUEUE )
       036FB 004C     1     MOV  _RC ,A
    19 036FC 050D C        	INCA 	_RD
    20 036FD 1A77 C        	AND 	A,@0X77
    21 036FE 004D C        	MOV 	_RD,A
    22            C        ;---	
    23 036FF 0012 C        	RET
    24            C        ;-------------------------------------------------------------------------------
    25            C        ;	约定主程序用,不能影响到BANK
    26            C        ;-------------------------------------------------------------------------------
    27 03700      C        KCLR_MSG:
    28 03700 0011 C        	DISI
    29            C        
    30            C      M 	BLOCK	0
       03701 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       03702 000A     1     IOW  _IOCA ,
    31            C      M 	MOV 	_RC,@MSG_QUEUE
       03703 18F3     1     MOV A,@( MSG_QUEUE )
       03704 004C     1     MOV  _RC ,A
    32 03705 00CD C        	CLR	_RD
    33            C        	
    34 03706 0010 C        	ENI
    35 03707 0012 C        	RET
    36            C        ;-------------------------------------------------------------------------------
    37 03708      C        STOR_MSG:
    38 03708      C        KSTOR_MSG:
    39 03708 0011 C        	DISI
    40            C        ;---
    41 03709 0055 C        	MOV 	TEMP0,A
    42            C        ;---	
    43            C      M 	BLOCK	0
       0370A 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0370B 000A     1     IOW  _IOCA ,
    44            C        
    45            C      M 	MOV 	_RC,@MSG_QUEUE
       0370C 18F3     1     MOV A,@( MSG_QUEUE )
       0370D 004C     1     MOV  _RC ,A
    46 0370E 040D C        	MOV	A,_RD
    47 0370F 1A07 C        	AND 	A,@0X07
    48 03710 1FF4 C        	ADD 	A,@MSG_QUEUE_START
    49 03711 004C C        	MOV	_RC,A
    50 03712 0415 C        	MOV	A,TEMP0
    51 03713 004D C        	MOV	_RD,A
    52            C        ;---ADJUST msg_queue pointer
    53            C      M 	MOV 	_RC,@MSG_QUEUE
       03714 18F3     1     MOV A,@( MSG_QUEUE )
       03715 004C     1     MOV  _RC ,A
    54 03716 050D C        	INCA 	_RD
    55 03717 1A77 C        	AND 	A,@0X77
    56 03718 004D C        	MOV 	_RD,A
    57            C        ;---	
    58 03719 0010 C        	ENI
    59 0371A 0012 C        	RET
    60            C        
    61            C        ;-------------------------------------------------------------------------------
    62            C        ;	约定主程序用,回到BANK1
    63            C        ;-------------------------------------------------------------------------------
    64 0371B      C        GET_MSG:
    65 0371B      C        KGET_MSG:
    66 0371B 0011 C        	DISI
    67            C        
    68            C      M 	BANK	1	;because the B1_MSG in the bank	1
       0371C 0B84     1     BS  _RSR , 6 
       0371D 09C4     1     BC  _RSR , 7 
    69            C      M 	BLOCK	0
       0371E 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0371F 000A     1     IOW  _IOCA ,
    70            C        ;---
    71            C      M 	MOV 	_RC,@MSG_QUEUE
       03720 18F3     1     MOV A,@( MSG_QUEUE )
       03721 004C     1     MOV  _RC ,A
    72 03722 070D C        	SWAPA 	_RD
    73 03723 1A07 C        	AND 	A,@0X07
    74 03724 0055 C        	MOV 	TEMP0,A		;GET ADDRESS
    75 03725 040D C        	MOV 	A,_RD
    76 03726 1A07 C        	AND 	A,@0X07
    77 03727 0115 C        	SUB 	A,TEMP0
    78            C      M 	JPZ 	GET_MSG_EMPTY
       03728 0C83     1     JBC  _STATUS , Z 
       03729 1736     1     JMP  GET_MSG_EMPTY ,
    79            C        
    80            C        ;---ADJUST msg_queue pointer	
    81 0372A 040D C        	MOV 	A,_RD
    82 0372B 1F10 C        	ADD 	A,@0X10
    83 0372C 1A77 C        	AND 	A,@0X77
    84 0372D 004D C        	MOV 	_RD,A
    85            C        	
    86 0372E 0415 C        	MOV 	A,TEMP0		;GET DATA IN SPECIFIC ADDRESS
    87 0372F 1FF4 C        	ADD 	A,@MSG_QUEUE_START
    88 03730 004C C        	MOV 	_RC,A
    89 03731 040D C        	MOV 	A,_RD
    90 03732 0055 C        	MOV 	TEMP0,A		;SAVE THE DATA
    91 03733      C        GET_MSG_END:
    92            C        
    93 03733 0415 C        	MOV	A, TEMP0
    94            C        ;---
    95 03734 0010 C        	ENI
    96 03735 0012 C        	RET
    97 03736      C        GET_MSG_EMPTY:
    98 03736 00D5 C        	CLR	TEMP0	
    99 03737 1733 C        	JMP	GET_MSG_END
   100            C        
   101            C        ;-------------------------------------------------------------------------------
   102            C        ;	约定主程序用,不能影响到BANK
   103            C        ;-------------------------------------------------------------------------------
   104 03738      C        PUSH_PRO:
   105 03738      C        KPUSH_PRO:
   106 03738 0055 C        	MOV	TEMP0,A
   107            C        ;---
   108            C      M 	BLOCK	0
       03739 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       0373A 000A     1     IOW  _IOCA ,
   109            C        ;-	
   110            C      M 	MOV	_RC,@PRO_STACK
       0373B 18EB     1     MOV A,@( PRO_STACK )
       0373C 004C     1     MOV  _RC ,A
   111 0373D 050D C        	INCA	_RD
   112 0373E 1A07 C        	AND	A,@0X07
   113 0373F 004D C        	MOV	_RD,A	;整理
   114            C        ;-
   115 03740 1FEB C        	ADD	A,@PRO_STACK
   116 03741 004C C        	MOV	_RC,A
   117 03742 0415 C        	MOV	A,TEMP0
   118 03743 004D C        	MOV	_RD,A
   119            C        ;---
   120 03744 0012 C        	RET
   121            C        
   122            C        ;-------------------------------------------------------------------------------
   123            C        ;	约定主程序用,不能影响到BANK
   124            C        ;-------------------------------------------------------------------------------
   125            C        /*
   126            C        POP_PRO:
   127            C        KPOP_PRO:
   128            C        	BLOCK	0
   129            C        	
   130            C        	MOV	_RC,@PRO_STACK
   131            C        	MOV	A,_RD
   132            C        	JPZ	PRO_STACK_END
   133            C        	DEC	_RD
   134            C        	
   135            C        	MOV	A,_RD
   136            C        	JPZ	PRO_STACK_END
   137            C        
   138            C        	ADD	A,@PRO_STACK
   139            C        	MOV	_RC,A
   140            C        	MOV	A,_RD
   141            C        	MOV	TEMP0,A
   142            C        PRO_STACK_END:
   143            C        
   144            C        	MOV	A,TEMP0
   145            C        
   146            C        	RET
   147            C        */
   148            C        ;-------------------------------------------------------------------------------
   149            C        ;	约定主程序用,回到BANK1
   150            C        ;-------------------------------------------------------------------------------
   151 03745      C        GET_PRO:
   152 03745      C        KGET_PRO:
   153            C      M 	BANK	1	;?????????????????????????
       03745 0B84     1     BS  _RSR , 6 
       03746 09C4     1     BC  _RSR , 7 
   154            C      M 	BLOCK	0
       03747 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       03748 000A     1     IOW  _IOCA ,
   155            C        	
   156            C      M 	MOV	_RC,@PRO_STACK
       03749 18EB     1     MOV A,@( PRO_STACK )
       0374A 004C     1     MOV  _RC ,A
   157 0374B 040D C        	MOV	A,_RD
   158            C      M 	JPZ	GET_PRO_END
       0374C 0C83     1     JBC  _STATUS , Z 
       0374D 1751     1     JMP  GET_PRO_END ,
   159 0374E 1FEB C        	ADD	A,@PRO_STACK
   160 0374F 004C C        	MOV	_RC,A
   161 03750 040D C        	MOV	A,_RD
   162            C        
   163 03751      C        GET_PRO_END:
   164            C        	
   165 03751 0012 C        	RET
   166            C        ;-------------------------------------------------------------------------------
   167            C        ;	约定主程序用,不能影响到BANK
   168            C        ;-------------------------------------------------------------------------------
   169 03752      C        CLR_PRO_STACK:
   170 03752      C        KCLR_PRO_STACK:
   171            C      M 	BLOCK	0
       03752 1800     1     MOV A,@((( 0 << 1 )+ VALUE_IOCA ))
       03753 000A     1     IOW  _IOCA ,
   172            C        	
   173            C      M 	MOV	_RC,@PRO_STACK
       03754 18EB     1     MOV A,@( PRO_STACK )
       03755 004C     1     MOV  _RC ,A
   174 03756 00CD C        	CLR	_RD
   175            C        
   176 03757 0012 C        	RET
   177            C        ;-------------------------------------------------------------------------------
   178            C        ;	约定主程序用,不能影响到BANK
   179            C        ;-------------------------------------------------------------------------------
   180 03758      C        CLR_TIMER:
   181 03758      C        KCLR_TIMER:
   182 03758 0080 C        	CLRA
   183 03759      C        SET_TIMER:
   184 03759      C        KSET_TIMER:
   185 03759 0055 C        	MOV	TEMP0,A
   186            C        
   187 0375A 0404 C        	MOV	A,_R4
   188 0375B 005B C        	MOV	OLD_RAM,A		;PUSH _R4
   189            C        
   190            C      M 	BANK	0
       0375C 0984     1     BC  _RSR , 6 
       0375D 09C4     1     BC  _RSR , 7 
   191            C        	
   192 0375E 0415 C        	MOV	A,TEMP0
   193 0375F 0070 C        	MOV	B0_TMR_TIMER,A
   194 03760 0071 C        	MOV	B0_TMR_TIMER_BAK,A
   195            C        	
   196 03761 041B C        	MOV	A,OLD_RAM
   197 03762 0044 C        	MOV	_R4,A
   198            C        
   199 03763 0012 C        	RET
   200            C        /*
   201            C        GET_TIMER:
   202            C        	MOV	A,_R4
   203            C        	MOV	OLD_RAM,A		;PUSH _R4
   204            C        
   205            C        	BANK	0
   206            C        
   207            C        	MOV	A,B0_TMR_TIMER_BAK
   208            C        	MOV	TEMP0,A
   209            C        	
   210            C        	MOV	A,OLD_RAM
   211            C        	MOV	_R4,A
   212            C        	
   213            C        	MOV	A,TEMP0
   214            C        	
   215            C        	RET
   216            C        */
   217            C        ;-------------------------------------------------------------------------------
   218            C        ;	约定主程序用,不能影响到BANK
   219            C        ;-------------------------------------------------------------------------------
   220 03764      C        CLR_2TIMER:
   221 03764      C        KCLR_2TIMER:
   222 03764 0080 C        	CLRA
   223 03765      C        SET_2TIMER:
   224 03765      C        KSET_2TIMER:
   225 03765 0055 C        	MOV	TEMP0,A
   226            C        
   227 03766 0404 C        	MOV	A,_R4
   228 03767 005B C        	MOV	OLD_RAM,A		;PUSH _R4
   229            C        
   230            C      M 	BANK	2
       03768 0984     1     BC  _RSR , 6 
       03769 0BC4     1     BS  _RSR , 7 
   231            C        	
   232 0376A 0415 C        	MOV	A,TEMP0
   233 0376B 0065 C        	MOV	B2_TMR_TIMER,A
   234 0376C 0066 C        	MOV	B2_TMR_TIMER_BAK,A
   235            C        	
   236 0376D 041B C        	MOV	A,OLD_RAM
   237 0376E 0044 C        	MOV	_R4,A
   238            C        
   239 0376F 0012 C        	RET
   240            C        
   241            C        ;-------------------------------------------------------------------------------
   242            C        ;	约定主程序用,不能影响到BANK
   243            C        ;-------------------------------------------------------------------------------
   244 03770      C        CLR_PTIMER:
   245 03770      C        KCLR_PTIMER:
   246 03770 0080 C        	CLRA
   247 03771      C        SET_PTIMER:
   248 03771      C        KSET_PTIMER:
   249 03771 0011 C        	DISI
   250            C        	
   251 03772 0055 C        	MOV	TEMP0,A
   252            C        
   253 03773 0404 C        	MOV	A,_R4
   254 03774 005B C        	MOV	OLD_RAM,A		;PUSH _R4
   255            C        
   256            C      M 	BANK	2
       03775 0984     1     BC  _RSR , 6 
       03776 0BC4     1     BS  _RSR , 7 
   257            C        	
   258 03777 0415 C        	MOV	A,TEMP0
   259 03778 0079 C        	MOV	B2_TMR_PLUSE,A
   260 03779 0078 C        	MOV	B2_TMR_PLUSE_BAK,A
   261            C        	
   262 0377A 041B C        	MOV	A,OLD_RAM		;POP _R4
   263 0377B 0044 C        	MOV	_R4,A
   264            C        
   265 0377C 0013 C        	RETI
   266            C        
   267            C        ;-------------------------------------------------------------------------------
   268            C        
   269            C        ;-------------------------------------------------------------------------------
   270            C        ;	CALC_WEEK
   271            C        ;	input: B1_YEAR_REG/B1_MON_REG/B1_DAY_REG
   272            C        ;-------------------------------------------------------------------------------
   273 0377D      C        CALC_WEEK:
   274 0377D      C        KCALC_WEEK:
   275            C        ;---合法性检查
   276 0377D 0437 C        	MOV	A,B1_MON_REG
   277            C      M 	LCALL	DAYINMONTHTABLE_0
                      2  M  PAGE #( DAYINMONTHTABLE_0 ),
       0377E 1E80     2     PAGE ( DAYINMONTHTABLE_0 / 1024 ),
       0377F 117F     1     CALL ( DAYINMONTHTABLE_0 % 1024 ),
                      2  M  PAGE #( $ ),
       03780 1E8D     2     PAGE ( $ / 1024 ),
   278 03781 0055 C        	MOV	TEMP0,A		;平年月份对应的日期
   279            C        	
   280 03782 0438 C        	MOV	A,B1_YEAR_REG
   281 03783 1A03 C        	AND	A,@0X03
   282            C      M 	JPNZ	GET_WEEK_0
       03784 0E83     1     JBS  _STATUS , Z 
       03785 178B     1     JMP  GET_WEEK_0 ,
   283            C        	
   284 03786 0437 C        	MOV	A,B1_MON_REG
   285            C      M 	LCALL	DAYINMONTHTABLE_1
                      2  M  PAGE #( DAYINMONTHTABLE_1 ),
       03787 1E80     2     PAGE ( DAYINMONTHTABLE_1 / 1024 ),
       03788 118D     1     CALL ( DAYINMONTHTABLE_1 % 1024 ),
                      2  M  PAGE #( $ ),
       03789 1E8D     2     PAGE ( $ / 1024 ),
   286 0378A 0055 C        	MOV	TEMP0,A		;闰年月份对应的日期
   287 0378B      C        GET_WEEK_0:
   288 0378B 0436 C        	MOV	A,B1_DAY_REG
   289 0378C 0115 C        	SUB	A,TEMP0
   290            C      M 	JPNC	GET_WEEK_FAIL	;一个不存在的年/月/日组合
       0378D 0E03     1     JBS  _STATUS , C 
       0378E 17B4     1     JMP  GET_WEEK_FAIL ,
   291            C        ;-------------------合法日期	
   292            C        ;---取闰年数
   293            C      M 	MOV	TEMP0,B1_YEAR_REG
       0378F 0438     1     MOV A, B1_YEAR_REG 
       03790 0055     1     MOV  TEMP0 ,A
   294 03791 0655 C        	RRC	TEMP0
   295 03792 0655 C        	RRC	TEMP0
   296 03793 0415 C        	MOV	A,TEMP0	
   297 03794 1A1F C        	AND	A,@0X1F
   298 03795 0055 C        	MOV	TEMP0,A
   299            C        ;---查月表
   300 03796 01B7 C        	DECA	B1_MON_REG	;没有0月
   301            C      M 	LCALL	DATE_TAB
                      2  M  PAGE #( DATE_TAB ),
       03797 1E89     2     PAGE ( DATE_TAB / 1024 ),
       03798 1017     1     CALL ( DATE_TAB % 1024 ),
                      2  M  PAGE #( $ ),
       03799 1E8D     2     PAGE ( $ / 1024 ),
   302 0379A 0056 C        	MOV	TEMP1,A
   303            C        ;---具体日
   304 0379B 0438 C        	MOV	A,B1_YEAR_REG	;年
   305 0379C 0396 C        	ADD     A,TEMP1		;about 月
   306 0379D 03B6 C        	ADD	A,B1_DAY_REG	;日
   307 0379E 1F05 C        	ADD	A,@5		;2000年1月1日的(星期六)前一天
   308 0379F 03D5 C        	ADD	TEMP0,A		;闰年数
   309            C        ;---修正--------
   310 037A0 0438 C        	MOV	A,B1_YEAR_REG
   311 037A1 1A03 C        	AND	A,@0X03
   312            C      M 	JPNZ	GET_WEEK_2
       037A2 0E83     1     JBS  _STATUS , Z 
       037A3 17A8     1     JMP  GET_WEEK_2 ,
   313            C        ;---闰年
   314            C        ;GET_WEEK_1:
   315 037A4 0437 C        	MOV	A,B1_MON_REG
   316 037A5 1D02 C        	SUB	A,@2
   317            C      M 	JPC	GET_WEEK_3	;只有闰年的小于3月的日期不加1修正
       037A6 0C03     1     JBC  _STATUS , C 
       037A7 17A9     1     JMP  GET_WEEK_3 ,
   318            C        ;---当前年份是(闰年)(月份大于2)或平年
   319 037A8      C        GET_WEEK_2:
   320 037A8 0555 C        	INC	TEMP0
   321            C        ;---取星期数(对7取余)
   322 037A9      C        GET_WEEK_3:
   323 037A9 1807 C        	MOV	A,@7
   324 037AA 0115 C        	SUB	A,TEMP0
   325            C      M 	JPNC	GET_WEEK_4	;小于7
       037AB 0E03     1     JBS  _STATUS , C 
       037AC 17B1     1     JMP  GET_WEEK_4 ,
   326            C        
   327 037AD 1807 C        	MOV	A,@7
   328 037AE 0115 C        	SUB	A,TEMP0
   329 037AF 0055 C        	MOV	TEMP0,A
   330 037B0 17A9 C        	JMP	GET_WEEK_3
   331 037B1      C        GET_WEEK_4:
   332            C      M 	SETC
       037B1 0A03     1     BS  _STATUS , C 
   333 037B2 0415 C        	MOV	A,TEMP0
   334            C        ;---
   335 037B3 0012 C        	RET
   336 037B4      C        GET_WEEK_FAIL:		;非法日期
   337            C        
   338            C      M 	CLRC
       037B4 0803     1     BC  _STATUS , C 
   339            C        
   340 037B5 0012 C        	RET
   341            C        
   342            C        ;-------------------------------------------------------------------------------
   635                     ;-------------------------------------------------------------------------------
   636                     ;page14
   637                     INCLUDE		"table.dt"
     1            C        
     2            C        ORG	(14<<10)	;the 14th page
     3            C        ;-------------------------------------------------------------------------------
     4            C        ;	5×5点阵用到高5bit,低3bit全0
     5            C        ;	5×5点阵的下部对应返回值的高位,上部对应低位
     6            C        ;-------------------------------------------------------------------------------
     7            C        ;TabAsciiChar1:
     8 03800      C        THIRD_LINE_TABE:
     9            C      M 	MTBL
       03800 0020     1     TBL 
             3800     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    10 03801 1C00 C        	RETL	@0		;0x00 SPACE
    11 03802 1C00 C        	RETL	@00000000b	;0x01 !
    12 03803 1C00 C        	RETL	@00000000b	;0x02 "
    13 03804 1C50 C        	RETL	@01010000b	;0x03 #
    14 03805 1C90 C        	RETL	@10010000b	;0x04 $
    15 03806 1C98 C        	RETL	@10011000b	;0x05 %
    16 03807 1C50 C        	RETL	@01010000b	;0x06 &
    17 03808 1C00 C        	RETL	@00000000b	;0x07 '
    18 03809 1C70 C        	RETL	@01110000b	;0x08 (
    19 0380A 1C00 C        	RETL	@00000000b	;0x09 )
    20 0380B 1CA8 C        	RETL	@10101000b	;0x0A *
    21 0380C 1C20 C        	RETL	@00100000b	;0x0B +
    22 0380D 1C00 C        	RETL	@00000000b	;0x0C ,
    23 0380E 1C20 C        	RETL	@00100000b	;0x0D -
    24 0380F 1C00 C        	RETL	@00000000b	;0x0E .
    25 03810 1C80 C        	RETL	@10000000b	;0x0F /
    26 03811 1C70 C        	RETL	@01110000b	;0x10 0 - 0X70
    27 03812 1C00 C        	RETL	@00000000b	;0x11 1 - 0X00
    28 03813 1CC0 C        	RETL	@11000000b	;0x12 2 - 0XC0
    29 03814 1C88 C        	RETL	@10001000b	;0x13 3 - 0X88
    30 03815 1C60 C        	RETL	@01100000b	;0x14 4 - 0X60
    31 03816 1CB8 C        	RETL	@10111000b	;0x15 5 - 0XB8
    32 03817 1C70 C        	RETL	@01110000b	;0x16 6 - 0X70
    33 03818 1C08 C        	RETL	@00001000b	;0x17 7 - 0X08
    34 03819 1C50 C        	RETL	@01010000b	;0x18 8 - 0XA0
    35 0381A 1C10 C        	RETL	@00010000b	;0x19 9 - 0X10
    36 0381B 1C00 C        	RETL	@00000000b	;0x1A :
    37 0381C 1C00 C        	RETL	@00000000b	;0x1B ;
    38 0381D 1C00 C        	RETL	@00000000b	;0x1C <
    39 0381E 1C50 C        	RETL	@01010000b	;0x1D =
    40 0381F 1C00 C        	RETL	@00000000b	;0x1E >
    41 03820 1C10 C        	RETL	@00010000b	;0x1F ?
    42 03821 1CF0 C        	RETL	@11110000b	;0x20 @
    43 03822 1CF0 C        	RETL	@11110000b	;0x21 A
    44 03823 1CF8 C        	RETL	@11111000b	;0x22 B
    45 03824 1C70 C        	RETL	@01110000b	;0x23 C
    46 03825 1CF8 C        	RETL	@11111000b	;0x24 D
    47 03826 1CF8 C        	RETL	@11111000b	;0x25 E
    48 03827 1CF8 C        	RETL	@11111000b	;0x26 F
    49 03828 1C70 C        	RETL	@01110000b	;0x27 G
    50 03829 1CF8 C        	RETL	@11111000b	;0x28 H
    51 0382A 1C00 C        	RETL	@00000000b	;0x29 I
    52 0382B 1C40 C        	RETL	@01000000b	;0x2A J
    53 0382C 1CF8 C        	RETL	@11111000b	;0x2B K
    54 0382D 1C00 C        	RETL	@00000000b	;0x2C L
    55 0382E 1CF8 C        	RETL	@11111000b	;0x2D M
    56 0382F 1CF8 C        	RETL	@11111000b	;0x2E N
    57 03830 1C70 C        	RETL	@01110000b	;0x2F O
    58 03831 1CF8 C        	RETL	@11111000b	;0x30 P
    59 03832 1C70 C        	RETL	@01110000b	;0x31 Q
    60 03833 1CF8 C        	RETL	@11111000b	;0x32 R
    61 03834 1C90 C        	RETL	@10010000b	;0x33 S
    62 03835 1C08 C        	RETL	@00001000b	;0x34 T
    63 03836 1C78 C        	RETL	@01111000b	;0x35 U
    64 03837 1C38 C        	RETL	@00111000b	;0x36 V
    65 03838 1C78 C        	RETL	@01111000b	;0x37 W
    66 03839 1C88 C        	RETL	@10001000b	;0x38 X
    67 0383A 1C08 C        	RETL	@00001000b	;0x39 Y
    68 0383B 1C88 C        	RETL	@10001000b	;0x3A Z
    69 0383C 1C70 C        	RETL	@01110000b	;0x3B [
    70 0383D 1C08 C        	RETL	@00001000b	;0x3C \
    71 0383E 1C00 C        	RETL	@00000000b	;0x3D ]
    72 0383F 1C00 C        	RETL	@00000000b	;0x3E ^
    73 03840 1C80 C        	RETL	@10000000b	;0x3F _
    74 03841 1C00 C        	RETL	@00000000b	;0x40 `
    75 03842 1CF0 C        	RETL	@11110000b	;0x41 a
    76 03843 1CF8 C        	RETL	@11111000b	;0x42 b
    77 03844 1C70 C        	RETL	@01110000b	;0x43 c
    78 03845 1CF8 C        	RETL	@11111000b	;0x44 d
    79 03846 1CF8 C        	RETL	@11111000b	;0x45 e
    80 03847 1CF8 C        	RETL	@11111000b	;0x46 f
    81 03848 1C70 C        	RETL	@01110000b	;0x47 g
    82 03849 1CF8 C        	RETL	@11111000b	;0x48 h
    83 0384A 1C00 C        	RETL	@00000000b	;0x49 i
    84 0384B 1C40 C        	RETL	@01000000b	;0x4A j
    85 0384C 1CF8 C        	RETL	@11111000b	;0x4B k
    86 0384D 1C00 C        	RETL	@00000000b	;0x4C l
    87 0384E 1CF8 C        	RETL	@11111000b	;0x4D m
    88 0384F 1CF8 C        	RETL	@11111000b	;0x4E n
    89 03850 1C70 C        	RETL	@01110000b	;0x4F o
    90 03851 1CF8 C        	RETL	@11111000b	;0x50 p
    91 03852 1C70 C        	RETL	@01110000b	;0x51 q
    92 03853 1CF8 C        	RETL	@11111000b	;0x52 r
    93 03854 1C90 C        	RETL	@10010000b	;0x53 s
    94 03855 1C08 C        	RETL	@00001000b	;0x54 t
    95 03856 1C78 C        	RETL	@01111000b	;0x55 u
    96 03857 1C38 C        	RETL	@00111000b	;0x56 v
    97 03858 1C78 C        	RETL	@01111000b	;0x57 w
    98 03859 1C88 C        	RETL	@10001000b	;0x58 x
    99 0385A 1C08 C        	RETL	@00001000b	;0x59 y
   100 0385B 1C88 C        	RETL	@10001000b	;0x5A z
   101 0385C 1C70 C        	RETL	@01110000b	;0x5B {
   102 0385D 1C00 C        	RETL	@00000000B	;0x5C |
   103 0385E 1C00 C        	RETL	@00000000b	;0x5D }
   104 0385F 1C10 C        	RETL	@00010000b	;0x5E ~
   105 03860 1C00 C        	RETL	@0		;0x5F DEL
   106 03861 1CF8 C        	RETL	@11111000b	;0x60 PAUSE
   107 03862 1CC0 C        	RETL	@11000000b	;0x61 UP
   108 03863 1C18 C        	RETL	@00011000b	;0x62 DOWN
   109            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   110            C        ;TabAsciiChar2:
   111 03864      C        THIRD_LINE_TABD:
   112            C      M 	MTBL
       03864 0020     1     TBL 
             3864     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   113 03865 1C00 C        	RETL	@0		;0x00 SPACE
   114 03866 1C00 C        	RETL	@00000000b	;0x01 !
   115 03867 1C18 C        	RETL	@00011000b	;0x02 "
   116 03868 1CF8 C        	RETL	@11111000b	;0x03 #
   117 03869 1CA8 C        	RETL	@10101000b	;0x04 $
   118 0386A 1C58 C        	RETL	@01011000b	;0x05 %
   119 0386B 1CA8 C        	RETL	@10101000b	;0x06 &
   120 0386C 1C00 C        	RETL	@00000000b	;0x07 '
   121 0386D 1C88 C        	RETL	@10001000b	;0x08 (
   122 0386E 1C00 C        	RETL	@00000000b	;0x09 )
   123 0386F 1C70 C        	RETL	@01110000b	;0x0A *
   124 03870 1C20 C        	RETL	@00100000b	;0x0B +
   125 03871 1C80 C        	RETL	@10000000b	;0x0C ,
   126 03872 1C20 C        	RETL	@00100000b	;0x0D -
   127 03873 1C80 C        	RETL	@10000000b	;0x0E .
   128 03874 1C40 C        	RETL	@01000000b	;0x0F /
   129 03875 1CC8 C        	RETL	@11001000b	;0x10 0 - 0XC8
   130 03876 1C90 C        	RETL	@10010000b	;0x11 1 - 0X90
   131 03877 1CA8 C        	RETL	@10101000b	;0x12 2 - 0XA8
   132 03878 1CA8 C        	RETL	@10101000b	;0x13 3 - 0XA8
   133 03879 1C50 C        	RETL	@01010000b	;0x14 4 - 0X50
   134 0387A 1CA8 C        	RETL	@10101000b	;0x15 5 - 0XA8
   135 0387B 1CA8 C        	RETL	@10101000b	;0x16 6 - 0XA8
   136 0387C 1C08 C        	RETL	@00001000b	;0x17 7 - 0X08
   137 0387D 1CA8 C        	RETL	@10101000b	;0x18 8 - 0XA8
   138 0387E 1CA8 C        	RETL	@10101000b	;0x19 9 - 0XA8
   139 0387F 1C00 C        	RETL	@00000000b	;0x1A :
   140 03880 1C80 C        	RETL	@10000000b	;0x1B ;
   141 03881 1C20 C        	RETL	@00100000b	;0x1C <
   142 03882 1C50 C        	RETL	@01010000b	;0x1D =
   143 03883 1C88 C        	RETL	@10001000b	;0x1E >
   144 03884 1C08 C        	RETL	@00001000b	;0x1F ?
   145 03885 1C08 C        	RETL	@00001000b	;0x20 @
   146 03886 1C28 C        	RETL	@00101000b	;0x21 A
   147 03887 1CA8 C        	RETL	@10101000b	;0x22 B
   148 03888 1C88 C        	RETL	@10001000b	;0x23 C
   149 03889 1C88 C        	RETL	@10001000b	;0x24 D
   150 0388A 1CA8 C        	RETL	@10101000b	;0x25 E
   151 0388B 1C28 C        	RETL	@00101000b	;0x26 F
   152 0388C 1C88 C        	RETL	@10001000b	;0x27 G
   153 0388D 1C20 C        	RETL	@00100000b	;0x28 H
   154 0388E 1C88 C        	RETL	@10001000b	;0x29 I
   155 0388F 1C80 C        	RETL	@10000000b	;0x2A J
   156 03890 1C20 C        	RETL	@00100000b	;0x2B K
   157 03891 1CF8 C        	RETL	@11111000b	;0x2C L
   158 03892 1C10 C        	RETL	@00010000b	;0x2D M
   159 03893 1C10 C        	RETL	@00010000b	;0x2E N
   160 03894 1C88 C        	RETL	@10001000b	;0x2F O
   161 03895 1C28 C        	RETL	@00101000b	;0x30 P
   162 03896 1C88 C        	RETL	@10001000b	;0x31 Q
   163 03897 1C28 C        	RETL	@00101000b	;0x32 R
   164 03898 1CA8 C        	RETL	@10101000b	;0x33 S
   165 03899 1C08 C        	RETL	@00001000b	;0x34 T
   166 0389A 1C80 C        	RETL	@10000000b	;0x35 U
   167 0389B 1C40 C        	RETL	@01000000b	;0x36 V
   168 0389C 1C80 C        	RETL	@10000000b	;0x37 W
   169 0389D 1C50 C        	RETL	@01010000b	;0x38 X
   170 0389E 1C10 C        	RETL	@00010000b	;0x39 Y
   171 0389F 1CC8 C        	RETL	@11001000b	;0x3A Z
   172 038A0 1C88 C        	RETL	@10001000b	;0x3B [
   173 038A1 1C10 C        	RETL	@00010000b	;0x3C \
   174 038A2 1C00 C        	RETL	@00000000b	;0x3D ]
   175 038A3 1C10 C        	RETL	@00010000b	;0x3E ^
   176 038A4 1C80 C        	RETL	@10000000b	;0x3F _
   177 038A5 1C00 C        	RETL	@00000000b	;0x40 `
   178 038A6 1C28 C        	RETL	@00101000b	;0x41 a
   179 038A7 1CA8 C        	RETL	@10101000b	;0x42 b
   180 038A8 1C88 C        	RETL	@10001000b	;0x43 c
   181 038A9 1C88 C        	RETL	@10001000b	;0x44 d
   182 038AA 1CA8 C        	RETL	@10101000b	;0x45 e
   183 038AB 1C28 C        	RETL	@00101000b	;0x46 f
   184 038AC 1C88 C        	RETL	@10001000b	;0x47 g
   185 038AD 1C20 C        	RETL	@00100000b	;0x48 h
   186 038AE 1C88 C        	RETL	@10001000b	;0x49 i
   187 038AF 1C80 C        	RETL	@10000000b	;0x4A j
   188 038B0 1C20 C        	RETL	@00100000b	;0x4B k
   189 038B1 1CF8 C        	RETL	@11111000b	;0x4C l
   190 038B2 1C10 C        	RETL	@00010000b	;0x4D m
   191 038B3 1C10 C        	RETL	@00010000b	;0x4E n
   192 038B4 1C88 C        	RETL	@10001000b	;0x4F o
   193 038B5 1C28 C        	RETL	@00101000b	;0x50 p
   194 038B6 1C88 C        	RETL	@10001000b	;0x51 q
   195 038B7 1C28 C        	RETL	@00101000b	;0x52 r
   196 038B8 1CA8 C        	RETL	@10101000b	;0x53 s
   197 038B9 1C08 C        	RETL	@00001000b	;0x54 t
   198 038BA 1C80 C        	RETL	@10000000b	;0x55 u
   199 038BB 1C40 C        	RETL	@01000000b	;0x56 v
   200 038BC 1C80 C        	RETL	@10000000b	;0x57 w
   201 038BD 1C50 C        	RETL	@01010000b	;0x58 x
   202 038BE 1C10 C        	RETL	@00010000b	;0x59 y
   203 038BF 1CC8 C        	RETL	@11001000b	;0x5A z
   204 038C0 1C88 C        	RETL	@10001000b	;0x5B {
   205 038C1 1C00 C        	RETL	@00000000b	;0x5C |
   206 038C2 1C00 C        	RETL	@00000000b	;0x5D }
   207 038C3 1C08 C        	RETL	@00001000b	;0x5E ~
   208 038C4 1C00 C        	RETL	@0		;0x5F DEL
   209 038C5 1C28 C        	RETL	@00101000b	;0x60 PAUSE
   210 038C6 1CF0 C        	RETL	@0B11110000	;0x61 UP
   211 038C7 1C78 C        	RETL	@0B01111000	;0x62 DOWN
   212            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   213            C        ;-------------------------------------------------------------------------------
   214 038C8      C        DTMFO_TAB:		;for send(用机内码拔号)
   215            C      M 	MTBL
       038C8 0020     1     TBL 
             38C8     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   216 038C9 1CFF C        	RETL	@0xFF		;0x00 SPACE
   217 038CA 1CFF C        	RETL	@0xFF		;0x01 !
   218 038CB 1CFF C        	RETL	@0xFF		;0x02 "
   219 038CC 1CB7 C        	RETL	@0xB7		;0x03 #
   220 038CD 1CFF C        	RETL	@0xFF		;0x04 $
   221 038CE 1CFF C        	RETL	@0xFF		;0x05 %
   222 038CF 1CFF C        	RETL	@0xFF		;0x06 &
   223 038D0 1CFF C        	RETL	@0xFF		;0x07 '
   224 038D1 1CFF C        	RETL	@0xFF		;0x08 (
   225 038D2 1CFF C        	RETL	@0xFF		;0x09 )
   226 038D3 1CE7 C        	RETL	@0xE7		;0x0A *
   227 038D4 1CFF C        	RETL	@0xFF		;0x0B +
   228 038D5 1CFF C        	RETL	@0xFF		;0x0C ,
   229 038D6 1CFF C        	RETL	@0xFF		;0x0D - 中划线
   230 038D7 1CFF C        	RETL	@0xFF		;0x0E .
   231 038D8 1CFF C        	RETL	@0xFF		;0x0F /
   232 038D9 1CD7 C        	RETL	@0xD7		;0x10 0
   233 038DA 1CEE C        	RETL	@0xEE		;0x11 1
   234 038DB 1CDE C        	RETL	@0xDE		;0x12 2
   235 038DC 1CBE C        	RETL	@0xBE		;0x13 3
   236 038DD 1CED C        	RETL	@0xED		;0x14 4
   237 038DE 1CDD C        	RETL	@0xDD		;0x15 5
   238 038DF 1CBD C        	RETL	@0xBD		;0x16 6
   239 038E0 1CEB C        	RETL	@0xEB		;0x17 7
   240 038E1 1CDB C        	RETL	@0xDB		;0x18 8
   241 038E2 1CBB C        	RETL	@0xBB		;0x19 9
   242 038E3 1CFF C        	RETL	@0xFF		;0x1A :
   243 038E4 1CFF C        	RETL	@0xFF		;0x1B ;
   244 038E5 1CFF C        	RETL	@0xFF		;0x1C <
   245 038E6 1CFF C        	RETL	@0xFF		;0x1D =
   246 038E7 1CFF C        	RETL	@0xFF		;0x1E >
   247 038E8 1CFF C        	RETL	@0xFF		;0x1F ?
   248 038E9 1CFF C        	RETL	@0xFF		;0x20 @
   249 038EA 1C7E C        	RETL	@0x7E		;0x21 A
   250 038EB 1C7D C        	RETL	@0x7D		;0x22 B
   251 038EC 1C7B C        	RETL	@0x7B		;0x23 C
   252 038ED 1C77 C        	RETL	@0x77		;0x24 D
   253            C        
   254            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   255            C        ;-------------------------------------------------------------------------------
   256            C        ORG	(14<<10)|(1<<8)
   257            C        ;TabAsciiChar3:
   258 03900      C        THIRD_LINE_TABC:
   259            C      M 	MTBL
       03900 0020     1     TBL 
             3900     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   260 03901 1C00 C        	RETL	@0		;0x00 SPACE
   261 03902 1CB8 C        	RETL	@10111000b	;0x01 !
   262 03903 1C00 C        	RETL	@00000000b	;0x02 "
   263 03904 1C50 C        	RETL	@01010000b	;0x03 #
   264 03905 1CF8 C        	RETL	@11111000b	;0x04 $
   265 03906 1C20 C        	RETL	@00100000b	;0x05 %
   266 03907 1C50 C        	RETL	@01010000b	;0x06 &
   267 03908 1C18 C        	RETL	@00011000b	;0x07 '
   268 03909 1C00 C        	RETL	@00000000b	;0x08 (
   269 0390A 1C00 C        	RETL	@00000000b	;0x09 )
   270 0390B 1CF8 C        	RETL	@11111000b	;0x0A *
   271 0390C 1CF8 C        	RETL	@11111000b	;0x0B +
   272 0390D 1C60 C        	RETL	@01100000b	;0x0C ,
   273 0390E 1C20 C        	RETL	@00100000b	;0x0D -
   274 0390F 1C00 C        	RETL	@00000000b	;0x0E .
   275 03910 1C20 C        	RETL	@00100000b	;0x0F /
   276 03911 1CA8 C        	RETL	@10101000b	;0x10 0 - 0XA8
   277 03912 1CF8 C        	RETL	@11111000b	;0x11 1 - 0XF8
   278 03913 1CA8 C        	RETL	@10101000b	;0x12 2 - 0XA8
   279 03914 1CA8 C        	RETL	@10101000b	;0x13 3 - 0XA8
   280 03915 1C48 C        	RETL	@01001000b	;0x14 4 - 0X48
   281 03916 1CA8 C        	RETL	@10101000b	;0x15 5 - 0XA8
   282 03917 1CA8 C        	RETL	@10101000b	;0x16 6 - 0XA8
   283 03918 1CC8 C        	RETL	@11001000b	;0x17 7 - 0XC8
   284 03919 1CA8 C        	RETL	@10101000b	;0x18 8 - 0XA8
   285 0391A 1CA8 C        	RETL	@10101000b	;0x19 9 - 0XA8
   286 0391B 1C50 C        	RETL	@01010000b	;0x1A :
   287 0391C 1C60 C        	RETL	@01100000b	;0x1B ;
   288 0391D 1C50 C        	RETL	@01010000b	;0x1C <
   289 0391E 1C50 C        	RETL	@01010000b	;0x1D =
   290 0391F 1C50 C        	RETL	@01010000b	;0x1E >
   291 03920 1CA8 C        	RETL	@10101000b	;0x1F ?
   292 03921 1C68 C        	RETL	@01101000b	;0x20 @
   293 03922 1C28 C        	RETL	@00101000b	;0x21 A
   294 03923 1CA8 C         	RETL	@10101000b	;0x22 B
   295 03924 1C88 C         	RETL	@10001000b	;0x23 C
   296 03925 1C88 C         	RETL	@10001000b	;0x24 D
   297 03926 1CA8 C         	RETL	@10101000b	;0x25 E
   298 03927 1C28 C         	RETL	@00101000b	;0x26 F
   299 03928 1C88 C         	RETL	@10001000b	;0x27 G
   300 03929 1C20 C         	RETL	@00100000b	;0x28 H
   301 0392A 1CF8 C         	RETL	@11111000b	;0x29 I
   302 0392B 1C88 C         	RETL	@10001000b	;0x2A J
   303 0392C 1C20 C         	RETL	@00100000b	;0x2B K
   304 0392D 1C80 C                RETL	@10000000b	;0x2C L
   305 0392E 1C60 C        	RETL	@01100000b	;0x2D M
   306 0392F 1C20 C        	RETL	@00100000b	;0x2E N
   307 03930 1C88 C        	RETL	@10001000b	;0x2F O
   308 03931 1C28 C        	RETL	@00101000b	;0x30 P
   309 03932 1CA8 C        	RETL	@10101000b	;0x31 Q
   310 03933 1C28 C        	RETL	@00101000b	;0x32 R
   311 03934 1CA8 C        	RETL	@10101000b	;0x33 S        
   312 03935 1CF8 C        	RETL	@11111000b	;0x34 T
   313 03936 1C80 C        	RETL	@10000000b	;0x35 U
   314 03937 1C80 C        	RETL	@10000000b	;0x36 V
   315 03938 1C60 C        	RETL	@01100000b	;0x37 W
   316 03939 1C20 C        	RETL	@00100000b	;0x38 X
   317 0393A 1CE0 C        	RETL	@11100000b	;0x39 Y
   318 0393B 1CA8 C        	RETL	@10101000b	;0x3A Z
   319 0393C 1C00 C        	RETL	@00000000b	;0x3B [
   320 0393D 1C20 C        	RETL	@00100000b	;0x3C \
   321 0393E 1C00 C        	RETL	@00000000b	;0x3D ]
   322 0393F 1C08 C        	RETL	@00001000b	;0x3E ^
   323 03940 1C80 C        	RETL	@10000000b	;0x3F _
   324 03941 1C18 C        	RETL	@00011000b	;0x40 `
   325 03942 1C28 C        	RETL	@00101000b	;0x41 a
   326 03943 1CA8 C         	RETL	@10101000b	;0x42 b
   327 03944 1C88 C         	RETL	@10001000b	;0x43 c
   328 03945 1C88 C         	RETL	@10001000b	;0x44 d
   329 03946 1CA8 C         	RETL	@10101000b	;0x45 e
   330 03947 1C28 C         	RETL	@00101000b	;0x46 f
   331 03948 1C88 C         	RETL	@10001000b	;0x47 g
   332 03949 1C20 C         	RETL	@00100000b	;0x48 h
   333 0394A 1CF8 C         	RETL	@11111000b	;0x49 i
   334 0394B 1C88 C         	RETL	@10001000b	;0x4A j
   335 0394C 1C20 C         	RETL	@00100000b	;0x4B k
   336 0394D 1C80 C                RETL	@10000000b	;0x4C l
   337 0394E 1C60 C        	RETL	@01100000b	;0x4D m
   338 0394F 1C20 C        	RETL	@00100000b	;0x4E n
   339 03950 1C88 C        	RETL	@10001000b	;0x4F o
   340 03951 1C28 C        	RETL	@00101000b	;0x50 p
   341 03952 1CA8 C        	RETL	@10101000b	;0x51 q
   342 03953 1C28 C        	RETL	@00101000b	;0x52 r
   343 03954 1CA8 C        	RETL	@10101000b	;0x53 s        
   344 03955 1CF8 C        	RETL	@11111000b	;0x54 t
   345 03956 1C80 C        	RETL	@10000000b	;0x55 u
   346 03957 1C80 C        	RETL	@10000000b	;0x56 v
   347 03958 1C60 C        	RETL	@01100000b	;0x57 w
   348 03959 1C20 C        	RETL	@00100000b	;0x58 x
   349 0395A 1CE0 C        	RETL	@11100000b	;0x59 y
   350 0395B 1CA8 C        	RETL	@10101000b	;0x5A z
   351 0395C 1C00 C        	RETL	@00000000b	;0x5B {
   352 0395D 1CF8 C        	RETL	@11111000b	;0x5C |
   353 0395E 1C00 C        	RETL	@00000000b	;0x5D }
   354 0395F 1C08 C        	RETL	@00001000b	;0x5E ~
   355 03960 1C00 C        	RETL	@0		;0x5F DEL
   356 03961 1C28 C        	RETL	@00101000b	;0x60 PAUSE
   357 03962 1CF8 C        	RETL	@11111000b	;0x61 UP
   358 03963 1CF8 C        	RETL	@11111000b	;0x62 DOWN
   359            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   360            C        ;-------------------------------------------------------------------------------
   361            C        ;TabAsciiChar4:
   362 03964      C        THIRD_LINE_TABB:
   363            C      M 	MTBL
       03964 0020     1     TBL 
             3964     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   364 03965 1C00 C        	RETL	@0		;0x00 SPACE
   365 03966 1C00 C        	RETL	@00000000b	;0x01 !
   366 03967 1C18 C        	RETL	@00011000b	;0x02 "
   367 03968 1CF8 C        	RETL	@11111000b	;0x03 #
   368 03969 1CA8 C        	RETL	@10101000b	;0x04 $
   369 0396A 1CD0 C        	RETL	@11010000b	;0x05 %
   370 0396B 1CA0 C        	RETL	@10100000b	;0x06 &
   371 0396C 1C00 C        	RETL	@00000000b	;0x07 '
   372 0396D 1C00 C        	RETL	@00000000b	;0x08 (
   373 0396E 1C88 C        	RETL	@10001000b	;0x09 )
   374 0396F 1C70 C        	RETL	@01110000b	;0x0A *
   375 03970 1C20 C        	RETL	@00100000b	;0x0B +
   376 03971 1C00 C        	RETL	@00000000b	;0x0C ,
   377 03972 1C20 C        	RETL	@00100000b	;0x0D -
   378 03973 1C00 C        	RETL	@00000000b	;0x0E .
   379 03974 1C10 C        	RETL	@00010000b	;0x0F /
   380 03975 1C98 C        	RETL	@10011000b	;0x10 0 - 0X98
   381 03976 1C80 C        	RETL	@10000000b	;0x11 1 - 0X80
   382 03977 1CA8 C        	RETL	@10101000b	;0x12 2 - 0XA8
   383 03978 1CA8 C        	RETL	@10101000b	;0x13 3 - 0XA8
   384 03979 1CF8 C        	RETL	@11111000b	;0x14 4 - 0XF8
   385 0397A 1CA8 C        	RETL	@10101000b	;0x15 5 - 0XA8
   386 0397B 1CA8 C        	RETL	@10101000b	;0x16 6 - 0XA8
   387 0397C 1C28 C        	RETL	@00101000b	;0x17 7 - 0X28
   388 0397D 1CA8 C        	RETL	@10101000b	;0x18 8 - 0XA8
   389 0397E 1CA8 C        	RETL	@10101000b	;0x19 9 - 0XA8
   390 0397F 1C00 C        	RETL	@00000000b	;0x1A :
   391 03980 1C00 C        	RETL	@00000000b	;0x1B ;
   392 03981 1C88 C        	RETL	@10001000b	;0x1C <
   393 03982 1C50 C        	RETL	@01010000b	;0x1D =
   394 03983 1C20 C        	RETL	@00100000b	;0x1E >
   395 03984 1C10 C        	RETL	@00010000b	;0x1F ?
   396 03985 1C88 C        	RETL	@10001000b	;0x20 @
   397 03986 1C28 C        	RETL	@00101000b	;0x21 A
   398 03987 1CA8 C        	RETL	@10101000b	;0x22 B
   399 03988 1C88 C        	RETL	@10001000b	;0x23 C
   400 03989 1C88 C        	RETL	@10001000b	;0x24 D
   401 0398A 1CA8 C        	RETL	@10101000b	;0x25 E
   402 0398B 1C28 C        	RETL	@00101000b	;0x26 F
   403 0398C 1CA8 C        	RETL	@10101000b	;0x27 G
   404 0398D 1C20 C        	RETL	@00100000b	;0x28 H
   405 0398E 1C88 C        	RETL	@10001000b	;0x29 I
   406 0398F 1C78 C        	RETL	@01111000b	;0x2A J
   407 03990 1C50 C        	RETL	@01010000b	;0x2B K
   408 03991 1C80 C                RETL	@10000000b	;0x2C L
   409 03992 1C10 C         	RETL	@00010000b	;0x2D M
   410 03993 1C40 C         	RETL	@01000000b	;0x2E N
   411 03994 1C88 C         	RETL	@10001000b	;0x2F O
   412 03995 1C28 C         	RETL	@00101000b	;0x30 P
   413 03996 1C48 C         	RETL	@01001000b	;0x31 Q
   414 03997 1C68 C         	RETL	@01101000b	;0x32 R
   415 03998 1CA8 C         	RETL	@10101000b	;0x33 S
   416 03999 1C08 C         	RETL	@00001000b	;0x34 T
   417 0399A 1C80 C         	RETL	@10000000b	;0x35 U
   418 0399B 1C40 C         	RETL	@01000000b	;0x36 V
   419 0399C 1C80 C         	RETL	@10000000b	;0x37 W
   420 0399D 1C50 C         	RETL	@01010000b	;0x38 X
   421 0399E 1C10 C         	RETL	@00010000b	;0x39 Y
   422 0399F 1C98 C         	RETL	@10011000b	;0x3A Z
   423 039A0 1C00 C        	RETL	@00000000b	;0x3B [
   424 039A1 1C40 C        	RETL	@01000000b	;0x3C \
   425 039A2 1C88 C        	RETL	@10001000b	;0x3D ]
   426 039A3 1C10 C        	RETL	@00010000b	;0x3E ^
   427 039A4 1C80 C        	RETL	@10000000b	;0x3F _
   428 039A5 1C00 C        	RETL	@00000000b	;0x40 `
   429 039A6 1C28 C         	RETL	@00101000b	;0x41 a
   430 039A7 1CA8 C        	RETL	@10101000b	;0x42 b
   431 039A8 1C88 C        	RETL	@10001000b	;0x43 c
   432 039A9 1C88 C        	RETL	@10001000b	;0x44 d
   433 039AA 1CA8 C        	RETL	@10101000b	;0x45 e
   434 039AB 1C28 C        	RETL	@00101000b	;0x46 f
   435 039AC 1CA8 C        	RETL	@10101000b	;0x47 g
   436 039AD 1C20 C        	RETL	@00100000b	;0x48 h
   437 039AE 1C88 C        	RETL	@10001000b	;0x49 i
   438 039AF 1C78 C        	RETL	@01111000b	;0x4A j
   439 039B0 1C50 C        	RETL	@01010000b	;0x4B k
   440 039B1 1C80 C                RETL	@10000000b	;0x4C l
   441 039B2 1C10 C         	RETL	@00010000b	;0x4D m
   442 039B3 1C40 C         	RETL	@01000000b	;0x4E n
   443 039B4 1C88 C         	RETL	@10001000b	;0x4F o
   444 039B5 1C28 C         	RETL	@00101000b	;0x50 p
   445 039B6 1C48 C         	RETL	@01001000b	;0x51 q
   446 039B7 1C68 C         	RETL	@01101000b	;0x52 r
   447 039B8 1CA8 C         	RETL	@10101000b	;0x53 s
   448 039B9 1C08 C         	RETL	@00001000b	;0x54 t
   449 039BA 1C80 C         	RETL	@10000000b	;0x55 u
   450 039BB 1C40 C         	RETL	@01000000b	;0x56 v
   451 039BC 1C80 C         	RETL	@10000000b	;0x57 w
   452 039BD 1C50 C         	RETL	@01010000b	;0x58 x
   453 039BE 1C10 C         	RETL	@00010000b	;0x59 y
   454 039BF 1C98 C         	RETL	@10011000b	;0x5A z
   455 039C0 1C00 C        	RETL	@00000000b	;0x5B {
   456 039C1 1C00 C        	RETL	@00000000b	;0x5C |
   457 039C2 1C88 C        	RETL	@10001000b	;0x5D }
   458 039C3 1C10 C        	RETL	@00010000b	;0x5E ~
   459 039C4 1C00 C        	RETL	@0		;0x5F DEL
   460 039C5 1C28 C        	RETL	@00101000b	;0x60 PAUSE
   461 039C6 1CF0 C        	RETL	@11110000b	;0x61 UP
   462 039C7 1C78 C        	RETL	@01111000b	;0x62 DOWN
   463            C         
   464            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   465            C        ;-------------------------------------------------------------------------------
   466 039C8      C        DTMF_TABLE:		;for receive(转换成机内码)
   467            C      M 	MTBL
       039C8 0020     1     TBL 
             39C8     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   468 039C9 1CFF C        	RETL	@0XFF	; 0
   469 039CA 1C11 C        	RETL	@NUM_1	; 1
   470 039CB 1C12 C        	RETL	@NUM_2	; 2
   471 039CC 1C13 C        	RETL	@NUM_3	; 3
   472 039CD 1C14 C        	RETL	@NUM_4	; 4
   473 039CE 1C15 C        	RETL	@NUM_5	; 5
   474 039CF 1C16 C        	RETL	@NUM_6	; 6
   475 039D0 1C17 C        	RETL	@NUM_7	; 7
   476 039D1 1C18 C        	RETL	@NUM_8	; 8
   477 039D2 1C19 C        	RETL	@NUM_9	; 9
   478 039D3 1C0A C        	RETL	@NUM_XIN	; *
   479 039D4 1C10 C        	RETL	@NUM_0	; 0
   480 039D5 1C03 C        	RETL	@NUM_JIN	; #
   481 039D6 1C21 C        	RETL	@NUM_A	; A
   482 039D7 1C22 C        	RETL	@NUM_B	; B
   483 039D8 1C23 C        	RETL	@NUM_C	; C
   484 039D9 1C24 C        	RETL	@NUM_D	; D
   485            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   486            C        ;-------------------------------------------------------------------------------
   487            C        ;	RMT_VOP_TAB
   488            C        ;-------------------------------------------------------------------------------
   489 039DA      C        RMT_VOP_TAB:
   490            C      M 	MTBL
       039DA 0020     1     TBL 
             39DA     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   491 039DB 1C41 C        	RETL	@VOPID_PRESS		; press
   492 039DC 1C02 C        	RETL	@VOPID_ONE		; 1
   493 039DD 1C43 C        	RETL	@VOPID_TOREPTYMSG	; to repeat message
   494 039DE 1C41 C        	RETL	@VOPID_PRESS		; press
   495 039DF 1C03 C        	RETL	@VOPID_TWO		; 2
   496 039E0 1C42 C        	RETL	@VOPID_TOPLYMSG		; to play message
   497 039E1 1C41 C        	RETL	@VOPID_PRESS		; press
   498 039E2 1C04 C        	RETL	@VOPID_THREE		; 3
   499 039E3 1C44 C        	RETL	@VOPID_TOSKPMSG		; to skip message
   500 039E4 1C41 C        	RETL	@VOPID_PRESS		; press
   501 039E5 1C05 C        	RETL	@VOPID_FOUR		; 4
   502 039E6 1C45 C        	RETL	@VOPID_TOPLYANNOUNCE		; to play announcement
   503 039E7 1C41 C        	RETL	@VOPID_PRESS		; press
   504 039E8 1C06 C        	RETL	@VOPID_FIVE		; 5
   505 039E9 1C46 C        	RETL	@VOPID_TORECANNOUNCE	; to record announcement
   506 039EA 1C41 C        	RETL	@VOPID_PRESS		; press
   507 039EB 1C07 C        	RETL	@VOPID_SIX		; 6
   508 039EC 1C47 C        	RETL	@VOPID_TOSTOP		; to stop
   509 039ED 1C41 C        	RETL	@VOPID_PRESS		; press
   510 039EE 1C08 C        	RETL	@VOPID_SEVEN		; 7
   511 039EF 1C48 C        	RETL	@VOPID_TOERASEMSG	; to erase message
   512 039F0 1C41 C        	RETL	@VOPID_PRESS		; press
   513 039F1 1C09 C        	RETL	@VOPID_EIGHT		; 8
   514 039F2 1C49 C        	RETL	@VOPID_TOSETANSONOFF	; to set answering off
   515 039F3 1C41 C        	RETL	@VOPID_PRESS		; press
   516 039F4 1C0A C        	RETL	@VOPID_NINE		; 9
   517 039F5 1C49 C        	RETL	@VOPID_TOSETANSONOFF	; to set answering on
   518 039F6 1C41 C        	RETL	@VOPID_PRESS		; press
   519 039F7 1C01 C        	RETL	@VOPID_OH		; 0
   520 039F8 1C4A C        	RETL	@VOPID_TOERASEALLMSG	; to erase all messages
   521 039F9 1C00 C        	RETL	@0		; end of list(the VOP-id can't be 0)	
   522            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   523            C        ;-------------------------------------------------------------------------------
   524            C        ORG	(14<<10)|(2<<8)
   525            C        ;TabAsciiChar5:
   526 03A00      C        THIRD_LINE_TABA:
   527            C      M 	MTBL
       03A00 0020     1     TBL 
             3A00     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   528 03A01 1C00 C        	RETL	@0		;0x00 SPACE
   529 03A02 1C00 C        	RETL	@00000000b	;0x01 !
   530 03A03 1C00 C        	RETL	@00000000b	;0x02 "
   531 03A04 1C50 C        	RETL	@01010000b	;0x03 #
   532 03A05 1C48 C        	RETL	@01001000b	;0x04 $
   533 03A06 1CC8 C        	RETL	@11001000b	;0x05 %
   534 03A07 1C00 C        	RETL	@00000000b	;0x06 &
   535 03A08 1C00 C        	RETL	@00000000b	;0x07 '
   536 03A09 1C00 C        	RETL	@00000000b	;0x08 (
   537 03A0A 1C70 C        	RETL	@01110000b	;0x09 )
   538 03A0B 1CA8 C        	RETL	@10101000b	;0x0A *
   539 03A0C 1C20 C        	RETL	@00100000b	;0x0B +
   540 03A0D 1C00 C        	RETL	@00000000b	;0x0C ,
   541 03A0E 1C20 C        	RETL	@00100000b	;0x0D -
   542 03A0F 1C00 C        	RETL	@00000000b	;0x0E .
   543 03A10 1C08 C        	RETL	@00001000b	;0x0F /
   544 03A11 1C70 C        	RETL	@01110000b	;0x10 0 - 0X70
   545 03A12 1C00 C        	RETL	@00000000b	;0x11 1 - 0X00
   546 03A13 1C90 C        	RETL	@10010000b	;0x12 2 - 0X90
   547 03A14 1C50 C        	RETL	@01010000b	;0x13 3 - 0X50
   548 03A15 1C40 C        	RETL	@01000000b	;0x14 4 - 0X40
   549 03A16 1C40 C        	RETL	@01000000b	;0x15 5 - 0X40
   550 03A17 1C40 C        	RETL	@01000000b	;0x16 6 - 0X40
   551 03A18 1C18 C        	RETL	@00011000b	;0x17 7 - 0X18
   552 03A19 1C50 C        	RETL	@01010000b	;0x18 8 - 0X50
   553 03A1A 1C70 C        	RETL	@01110000b	;0x19 9 - 0X70
   554 03A1B 1C00 C        	RETL	@00000000b	;0x1A :
   555 03A1C 1C00 C        	RETL	@00000000b	;0x1B ;
   556 03A1D 1C00 C        	RETL	@00000000b	;0x1C <
   557 03A1E 1C50 C        	RETL	@01010000b	;0x1D =
   558 03A1F 1C00 C        	RETL	@00000000b	;0x1E >
   559 03A20 1C00 C        	RETL	@00000000b	;0x1F ?
   560 03A21 1CF0 C        	RETL	@11110000b	;0x20 @
   561 03A22 1CF0 C        	RETL	@11110000b	;0x21 A
   562 03A23 1C50 C        	RETL	@01010000b	;0x22 B
   563 03A24 1C88 C        	RETL	@10001000b	;0x23 C
   564 03A25 1C70 C        	RETL	@01110000b	;0x24 D
   565 03A26 1C88 C        	RETL	@10001000b	;0x25 E
   566 03A27 1C08 C        	RETL	@00001000b	;0x26 F
   567 03A28 1CE8 C        	RETL	@11101000b	;0x27 G
   568 03A29 1CF8 C        	RETL	@11111000b	;0x28 H
   569 03A2A 1C00 C        	RETL	@00000000b	;0x29 I
   570 03A2B 1C08 C        	RETL	@00001000b	;0x2A J
   571 03A2C 1C88 C        	RETL	@10001000b	;0x2B K
   572 03A2D 1C80 C        	RETL	@10000000b	;0x2C L
   573 03A2E 1CF8 C        	RETL	@11111000b	;0x2D M
   574 03A2F 1CF8 C        	RETL	@11111000b	;0x2E N
   575 03A30 1C70 C        	RETL	@01110000b	;0x2F O
   576 03A31 1C10 C        	RETL	@00010000b	;0x30 P
   577 03A32 1CB0 C        	RETL	@10110000b	;0x31 Q
   578 03A33 1C90 C        	RETL	@10010000b	;0x32 R
   579 03A34 1C48 C        	RETL	@01001000b	;0x33 S
   580 03A35 1C08 C                RETL	@00001000b	;0x34 T
   581 03A36 1C78 C        	RETL	@01111000b	;0x35 U
   582 03A37 1C38 C        	RETL	@00111000b	;0x36 V
   583 03A38 1C78 C        	RETL	@01111000b	;0x37 W
   584 03A39 1C88 C        	RETL	@10001000b	;0x38 X
   585 03A3A 1C08 C        	RETL	@00001000b	;0x39 Y
   586 03A3B 1C88 C        	RETL	@10001000b	;0x3A Z
   587 03A3C 1C00 C        	RETL	@00000000b	;0x3B [
   588 03A3D 1C80 C        	RETL	@10000000b	;0x3C \
   589 03A3E 1C70 C        	RETL	@01110000b	;0x3D ]
   590 03A3F 1C00 C        	RETL	@00000000b	;0x3E ^
   591 03A40 1C80 C        	RETL	@10000000b	;0x3F _
   592 03A41 1C00 C        	RETL	@00000000b	;0x40 `
   593 03A42 1CF0 C        	RETL	@11110000b	;0x41 a
   594 03A43 1C50 C        	RETL	@01010000b	;0x42 b
   595 03A44 1C88 C        	RETL	@10001000b	;0x43 c
   596 03A45 1C70 C        	RETL	@01110000b	;0x44 d
   597 03A46 1C88 C        	RETL	@10001000b	;0x45 e
   598 03A47 1C08 C        	RETL	@00001000b	;0x46 f
   599 03A48 1CE8 C        	RETL	@11101000b	;0x47 g
   600 03A49 1CF8 C        	RETL	@11111000b	;0x48 h
   601 03A4A 1C00 C        	RETL	@00000000b	;0x49 i
   602 03A4B 1C08 C        	RETL	@00001000b	;0x4A j
   603 03A4C 1C88 C        	RETL	@10001000b	;0x4B k
   604 03A4D 1C80 C        	RETL	@10000000b	;0x4C l
   605 03A4E 1CF8 C        	RETL	@11111000b	;0x4D m
   606 03A4F 1CF8 C        	RETL	@11111000b	;0x4E n
   607 03A50 1C70 C        	RETL	@01110000b	;0x4F o
   608 03A51 1C10 C        	RETL	@00010000b	;0x50 p
   609 03A52 1CB0 C        	RETL	@10110000b	;0x51 q
   610 03A53 1C90 C        	RETL	@10010000b	;0x52 r
   611 03A54 1C48 C        	RETL	@01001000b	;0x53 s
   612 03A55 1C08 C                RETL	@00001000b	;0x54 t
   613 03A56 1C78 C        	RETL	@01111000b	;0x55 u
   614 03A57 1C38 C        	RETL	@00111000b	;0x56 v
   615 03A58 1C78 C        	RETL	@01111000b	;0x57 w
   616 03A59 1C88 C        	RETL	@10001000b	;0x58 x
   617 03A5A 1C08 C        	RETL	@00001000b	;0x59 y
   618 03A5B 1C88 C        	RETL	@10001000b	;0x5A z
   619 03A5C 1C00 C        	RETL	@00000000b	;0x5B {
   620 03A5D 1C00 C        	RETL	@00000000b	;0x5C |
   621 03A5E 1C70 C        	RETL	@01110000b	;0x5D }
   622 03A5F 1C08 C        	RETL	@00001000b	;0x5E ~
   623 03A60 1C00 C        	RETL	@0		;0x5F DEL
   624 03A61 1C10 C        	RETL	@00010000b	;0x60 PAUSE
   625 03A62 1CC0 C        	RETL	@11000000b	;0x61 UP
   626 03A63 1C18 C        	RETL	@00011000b	;0x62 DOWN
   627            C        
   628            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   629            C        ;-------------------------------------------------------------------------------
   630            C        /***************************************
   631            C           a
   632            C         f   b
   633            C           g
   634            C         e   c
   635            C           d
   636            C        ***************************************/
   637 03A64      C        TabAsciiLed:		;!!!second line (0cbdgaef)!!!
   638 03A64      C        SECOND_LINE_TAB:	;!!!second line (0cbdgaef)!!!
   639            C      M 	MTBL
       03A64 0020     1     TBL 
             3A64     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   640 03A65 1C00 C        	RETL	@0		;0x00 SPACE
   641 03A66 1C00 C        	RETL	@0		;0x01 !
   642 03A67 1C00 C        	RETL	@0		;0x02 "
   643 03A68 1C50 C        	RETL	@01010000b	;0x03 #
   644 03A69 1C00 C        	RETL	@0		;0x04 $
   645 03A6A 1C00 C        	RETL	@0		;0x05 %
   646 03A6B 1C00 C        	RETL	@0		;0x06 &
   647 03A6C 1C00 C        	RETL	@0		;0x07 '
   648 03A6D 1C00 C        	RETL	@0		;0x08 (
   649 03A6E 1C00 C        	RETL	@0		;0x09 )
   650 03A6F 1C12 C        	RETL	@00010010b	;0x0A *
   651 03A70 1C00 C        	RETL	@0		;0x0B +
   652 03A71 1C00 C        	RETL	@0		;0x0C ,
   653 03A72 1C08 C        	RETL	@0b00001000	;0x0D - 中划线
   654 03A73 1C00 C        	RETL	@0		;0x0E .
   655 03A74 1C00 C        	RETL	@0		;0x0F /
   656 03A75 1C77 C        	RETL	@01110111b	;0x10 0	- 0x77
   657 03A76 1C60 C        	RETL	@01100000b	;0x11 1 - 0x60
   658 03A77 1C3E C        	RETL	@00111110b	;0x12 2 - 0x3E
   659 03A78 1C7C C        	RETL	@01111100b	;0x13 3 - 0x7C
   660 03A79 1C69 C        	RETL	@01101001b	;0x14 4 - 0x69
   661 03A7A 1C5D C        	RETL	@01011101b	;0x15 5 - 0x5D
   662 03A7B 1C5F C        	RETL	@01011111b	;0x16 6 - 0x5F
   663 03A7C 1C64 C        	RETL	@01100100b	;0x17 7 - 0x64
   664 03A7D 1C7F C        	RETL	@01111111b	;0x18 8 - 0x7F
   665 03A7E 1C7D C        	RETL	@01111101b	;0x19 9 - 0x7D
   666 03A7F 1C00 C        	RETL	@0		;0x1A :
   667 03A80 1C00 C        	RETL	@0		;0x1B ;
   668 03A81 1C00 C        	RETL	@0		;0x1C <
   669 03A82 1C00 C        	RETL	@0		;0x1D =
   670 03A83 1C00 C        	RETL	@0		;0x1E >
   671 03A84 1C00 C        	RETL	@0		;0x1F ?
   672 03A85 1C00 C        	RETL	@0		;0x20 @
   673 03A86 1C6F C        	RETL	@01101111b	;0x21 A - 0x6F
   674 03A87 1C5B C        	RETL	@01011011b	;0x22 B - 0x5B
   675 03A88 1C17 C        	RETL	@00010111b	;0x23 C - 0x17
   676 03A89 1C7A C        	RETL	@01111010b	;0x24 D - 0x7A
   677 03A8A 1C1F C        	RETL	@00011111b	;0x25 E - 0x12
   678 03A8B 1C0F C        	RETL	@00001111b	;0x26 F - 0x50
   679 03A8C 1C00 C        	RETL	@0		;0x27 G
   680 03A8D 1C00 C        	RETL	@0		;0x28 H 
   681 03A8E 1C00 C        	RETL	@0		;0x29 I
   682 03A8F 1C00 C        	RETL	@0		;0x2A J
   683 03A90 1C00 C        	RETL	@0		;0x2B K
   684 03A91 1C00 C        	RETL	@0		;0x2C L
   685 03A92 1C00 C        	RETL	@0		;0x2D M
   686 03A93 1C00 C        	RETL	@0		;0x2E N
   687 03A94 1C00 C        	RETL	@0		;0x2F O
   688 03A95 1C2F C        	RETL	@00101111b	;0x30 P
   689 03A96 1C00 C        	RETL	@0		;0x31 Q
   690 03A97 1C00 C        	RETL	@0		;0x32 R
   691 03A98 1C00 C        	RETL	@0		;0x33 S
   692 03A99 1C00 C        	RETL	@0		;0x34 T
   693 03A9A 1C00 C        	RETL	@0		;0x35 U
   694 03A9B 1C00 C        	RETL	@0		;0x36 V
   695 03A9C 1C00 C        	RETL	@0		;0x37 W
   696 03A9D 1C00 C        	RETL	@0		;0x38 X
   697 03A9E 1C00 C        	RETL	@0		;0x39 Y
   698 03A9F 1C00 C        	RETL	@0		;0x3A Z
   699 03AA0 1C00 C        	RETL	@0		;0x3B [
   700 03AA1 1C00 C        	RETL	@0		;0x3C \
   701 03AA2 1C00 C        	RETL	@0		;0x3D ]
   702 03AA3 1C00 C        	RETL	@0		;0x3E ^
   703 03AA4 1C10 C        	RETL	@0X10		;0x3F _ 下划线
   704 03AA5 1C00 C        	RETL	@0		;0x40 `
   705 03AA6 1C6F C        	RETL	@01101111b	;0x41 a - 0x6F
   706 03AA7 1C5B C        	RETL	@01011011b	;0x42 b - 0x5B
   707 03AA8 1C17 C        	RETL	@00010111b	;0x43 c - 0x17
   708 03AA9 1C7A C        	RETL	@01111010b	;0x44 d - 0x7A
   709 03AAA 1C1F C        	RETL	@00011111b	;0x45 e - 0x12
   710 03AAB 1C0F C        	RETL	@00001111b	;0x46 f - 0x50
   711 03AAC 1C00 C        	RETL	@0		;0x47 g
   712 03AAD 1C00 C        	RETL	@0		;0x48 h 
   713 03AAE 1C00 C        	RETL	@0		;0x49 i
   714 03AAF 1C00 C        	RETL	@0		;0x4A j
   715 03AB0 1C00 C        	RETL	@0		;0x4B k
   716 03AB1 1C00 C        	RETL	@0		;0x4C l
   717 03AB2 1C00 C        	RETL	@0		;0x4D m
   718 03AB3 1C00 C        	RETL	@0		;0x4E n
   719 03AB4 1C00 C        	RETL	@0		;0x4F o
   720 03AB5 1C2F C        	RETL	@00101111b	;0x50 p
   721 03AB6 1C00 C        	RETL	@0		;0x51 q
   722 03AB7 1C00 C        	RETL	@0		;0x52 r
   723 03AB8 1C00 C        	RETL	@0		;0x53 s
   724 03AB9 1C00 C        	RETL	@0		;0x54 t
   725 03ABA 1C00 C        	RETL	@0		;0x55 u
   726 03ABB 1C00 C        	RETL	@0		;0x56 v
   727 03ABC 1C00 C        	RETL	@0		;0x57 w
   728 03ABD 1C00 C        	RETL	@0		;0x58 x
   729 03ABE 1C00 C        	RETL	@0		;0x59 y
   730 03ABF 1C00 C        	RETL	@0		;0x5A z
   731 03AC0 1C00 C        	RETL	@0		;0x5B {
   732 03AC1 1C00 C        	RETL	@0		;0x5C	
   733 03AC2 1C00 C        	RETL	@0		;0x5D }
   734 03AC3 1C00 C        	RETL	@0		;0x5E ~
   735 03AC4 1C00 C        	RETL	@0		;0x5F DEL
   736 03AC5 1C2F C        	RETL	@00101111b	;0x60 PAUSE
   737 03AC6 1C00 C        	RETL	@0		;0x61 UP
   738 03AC7 1C00 C        	RETL	@0		;0x62 DOWN
   739            C        
   740            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   741            C        ;-------------------------------------------------------------------------------
   742            C        
   743            C        ;-------------------------------------------------------------------------------
   744            C        
   638                     INCLUDE		"l_book.dt"
     1            C        ;###############################################################################
     2            C        ;       Function : TRSLTE_TABTODSP
     3            C        ;	translate table-index to DSP-index
     4            C        ;
     5            C        ;	input  : acc
     6            C        ;	output : acc
     7            C        ;
     8            C        ;	Change into block 3
     9            C        ;###############################################################################
    10 03AC8      C        TRSLATE_TABTODSP:
    11 03AC8 1F00 C        	ADD	A,@IDXTAB_START
    12 03AC9 004C C        	MOV	_RC,A
    13            C      M 	BLOCK	3
       03ACA 1806     1     MOV A,@((( 3 << 1 )+ VALUE_IOCA ))
       03ACB 000A     1     IOW  _IOCA ,
    14            C        
    15 03ACC 040D C        	MOV	A,_RD
    16            C        	
    17 03ACD 0012 C        	RET
    18            C        ;###############################################################################
    19            C        ;       Function : COMP_ONETELNAME
    20            C        ;	Compare the data at (OFFSET_S/OFFSET_D)equal or not
    21            C        ;
    22            C        ;	input  : OFFSET_S = 参与比较号码所在起始偏移地址(CID)
    23            C        ;		 OFFSET_D = 参与比较号码所在起始偏移地址(PBOOK)
    24            C        ;
    25            C        ;	OUTPUT : ACCH = 0xff/0/1 ---小于/相等/大于
    26            C        ;
    27            C        ;	variable : TEMP0,TEMP1,TEMP2
    28            C        ;
    29            C        ;	用于PBOOK(按姓名)排序
    30            C        ;###############################################################################
    31 03ACE      C        COMP_ONETELNAME:
    32            C        ;---Get length(s-name)
    33 03ACE 041C C        	MOV	A,OFFSET_S
    34 03ACF 1F03 C        	ADD	A,@NAME_FGOFFSET
    35 03AD0 004C C        	MOV	_RC,A
    36 03AD1 040D C        	MOV	A,_RD
    37 03AD2 005E C        	MOV	COUNT,A
    38 03AD3 0057 C        	MOV	TEMP2,A
    39            C      M 	JPZ	COMP_ONETELNAME_END0XFF	;the length(source) <> 0
       03AD4 0C83     1     JBC  _STATUS , Z 
       03AD5 1703     1     JMP  COMP_ONETELNAME_END0XFF ,
    40            C        ;---Get length(d-name)	
    41 03AD6 041D C        	MOV	A,OFFSET_D
    42 03AD7 1F03 C        	ADD	A,@NAME_FGOFFSET
    43 03AD8 004C C        	MOV	_RC,A
    44 03AD9 040D C        	MOV	A,_RD
    45            C      M 	JPZ	COMP_ONETELNAME_END0X01	;the length(dest) <> 0
       03ADA 0C83     1     JBC  _STATUS , Z 
       03ADB 1702     1     JMP  COMP_ONETELNAME_END0X01 ,
    46 03ADC 0056 C        	MOV	TEMP1,A
    47            C        
    48 03ADD 0416 C        	MOV	A,TEMP1
    49 03ADE 011E C        	SUB	A,COUNT
    50            C      M 	JPNC	COMP_ONETELNAME_0
       03ADF 0E03     1     JBS  _STATUS , C 
       03AE0 16E3     1     JMP  COMP_ONETELNAME_0 ,
    51            C        ;---Get the shorter(两长取短)	
    52 03AE1 0416 C        	MOV	A,TEMP1
    53 03AE2 005E C        	MOV	COUNT,A
    54 03AE3      C        COMP_ONETELNAME_0:
    55 03AE3 1828 C        	MOV	A,@NAME_OFFSET
    56 03AE4 03DC C        	ADD	OFFSET_S,A
    57 03AE5 1828 C        	MOV	A,@NAME_OFFSET
    58 03AE6 03DD C        	ADD	OFFSET_D,A
    59 03AE7      C        COMP_ONETELNAME_LOOP:
    60 03AE7 041C C        	MOV	A,OFFSET_S
    61 03AE8 004C C        	MOV	_RC,A
    62 03AE9 040D C        	MOV	A,_RD
    63 03AEA 0055 C        	MOV	TEMP0,A
    64            C        	
    65 03AEB 041D C        	MOV	A,OFFSET_D
    66 03AEC 004C C        	MOV	_RC,A
    67 03AED 040D C        	MOV	A,_RD
    68 03AEE 0115 C        	SUB	A,TEMP0
    69            C      M 	JPZ	COMP_ONETELNAME_LOOP_1	;等于,继续下一步
       03AEF 0C83     1     JBC  _STATUS , Z 
       03AF0 16F4     1     JMP  COMP_ONETELNAME_LOOP_1 ,
    70            C      M 	JPNC	COMP_ONETELNAME_END0XFF	;小于,退出
       03AF1 0E03     1     JBS  _STATUS , C 
       03AF2 1703     1     JMP  COMP_ONETELNAME_END0XFF ,
    71 03AF3 1702 C        	JMP	COMP_ONETELNAME_END0X01	;大于,退出
    72 03AF4      C        COMP_ONETELNAME_LOOP_1:
    73 03AF4 055D C        	INC	OFFSET_D
    74 03AF5 055C C        	INC	OFFSET_S
    75 03AF6 01DE C        	DEC	COUNT
    76            C        
    77 03AF7 041E C        	MOV	A,COUNT
    78            C      M 	JPNZ	COMP_ONETELNAME_LOOP
       03AF8 0E83     1     JBS  _STATUS , Z 
       03AF9 16E7     1     JMP  COMP_ONETELNAME_LOOP ,
    79            C        ;---Compare end(shorter length) 	
    80 03AFA 0416 C        	MOV	A,TEMP1	
    81 03AFB 0117 C        	SUB	A,TEMP2
    82            C      M 	JPZ	COMP_ONETELNAME_END0X00	;等于,退出
       03AFC 0C83     1     JBC  _STATUS , Z 
       03AFD 1701     1     JMP  COMP_ONETELNAME_END0X00 ,
    83            C      M 	JPNC	COMP_ONETELNAME_END0XFF	;小于,退出
       03AFE 0E03     1     JBS  _STATUS , C 
       03AFF 1703     1     JMP  COMP_ONETELNAME_END0XFF ,
    84 03B00 1702 C        	JMP	COMP_ONETELNAME_END0X01	;大于,退出
    85            C        
    86            C        ;---Compare end(longer length) 
    87 03B01      C        COMP_ONETELNAME_END0X00:	;等于
    88            C        
    89 03B01 1C00 C        	RETL	@0
    90            C        	
    91 03B02      C        COMP_ONETELNAME_END0X01:	;大于
    92            C        
    93 03B02 1C01 C        	RETL	@1
    94            C        
    95 03B03      C        COMP_ONETELNAME_END0XFF:	;小于
    96            C        
    97 03B03 1CFF C        	RETL	@0xff
    98            C        
    99            C        ;############################################################################
   100            C        ;	IDXTAB_READ
   101            C        ;	Read index-table from flash and store into block 2(0..119)
   102            C        ;
   103            C        ;	input : 
   104            C        ;	output: 
   105            C        ;
   106            C        ;############################################################################
   107 03B04      C        IDXTAB_READ:
   108            C        ;---New phonebook ok,then update the index-table	
   109 03B04 1813 C        	MOV	A,@CGROUP_BOOKIDX
   110            C      M 	PAGE	#(SET_GROUP)
       03B05 1E83     1     PAGE ( SET_GROUP / 1024 ),
   111 03B06 1241 C        	CALL	SET_GROUP
   112            C        ;---Read the 1-index	Read index-table start
   113            C      M 	MOV	OFFSET_D,@IDXTAB_START
       03B07 1800     1     MOV A,@( IDXTAB_START )
       03B08 005D     1     MOV  OFFSET_D ,A
   114 03B09      C        IDXTAB_READ_1LOOP:
   115 03B09 1801 C        	MOV	A,@1
   116            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       03B0A 1E83     2     PAGE ( DAT_READ / 1024 ),
       03B0B 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       03B0C 1E8E     2     PAGE ( $ / 1024 ),
   117            C        	
   118            C      M 	BLOCK	3
       03B0D 1806     1     MOV A,@((( 3 << 1 )+ VALUE_IOCA ))
       03B0E 000A     1     IOW  _IOCA ,
   119            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       03B0F 041D     1     MOV A, OFFSET_D 
       03B10 004C     1     MOV  _RC ,A
   120            C      M 	MOV	_RD,TEMP0	;the data
       03B11 0415     1     MOV A, TEMP0 
       03B12 004D     1     MOV  _RD ,A
   121            C        	
   122 03B13 055D C        	INC	OFFSET_D	;next address
   123            C        	
   124 03B14 0416 C        	MOV	A,TEMP1		;Error code
   125            C      M 	JPZ	IDXTAB_READ_1LOOP
       03B15 0C83     1     JBC  _STATUS , Z 
       03B16 1709     1     JMP  IDXTAB_READ_1LOOP ,
   126            C      M 	PAGE	#(DAT_READ_STOP)
       03B17 1E83     1     PAGE ( DAT_READ_STOP / 1024 ),
   127 03B18 125B C        	CALL	DAT_READ_STOP
   128            C        ;---Read the 2-index
   129            C      M 	MOV	OFFSET_D,@(IDXTAB_START+60)
       03B19 183C     1     MOV A,@(( IDXTAB_START + 60 ))
       03B1A 005D     1     MOV  OFFSET_D ,A
   130 03B1B      C        IDXTAB_READ_2LOOP:
   131 03B1B 1802 C        	MOV	A,@2
   132            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       03B1C 1E83     2     PAGE ( DAT_READ / 1024 ),
       03B1D 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       03B1E 1E8E     2     PAGE ( $ / 1024 ),
   133            C        	
   134            C      M 	BLOCK	3
       03B1F 1806     1     MOV A,@((( 3 << 1 )+ VALUE_IOCA ))
       03B20 000A     1     IOW  _IOCA ,
   135            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       03B21 041D     1     MOV A, OFFSET_D 
       03B22 004C     1     MOV  _RC ,A
   136            C      M 	MOV	_RD,TEMP0	;the data
       03B23 0415     1     MOV A, TEMP0 
       03B24 004D     1     MOV  _RD ,A
   137            C        	
   138 03B25 055D C        	INC	OFFSET_D	;next address
   139            C        	
   140 03B26 0416 C        	MOV	A,TEMP1		;Error code
   141            C      M 	JPZ	IDXTAB_READ_2LOOP
       03B27 0C83     1     JBC  _STATUS , Z 
       03B28 171B     1     JMP  IDXTAB_READ_2LOOP ,
   142            C        	
   143            C      M 	LCALL	DAT_READ_STOP
                      2  M  PAGE #( DAT_READ_STOP ),
       03B29 1E83     2     PAGE ( DAT_READ_STOP / 1024 ),
       03B2A 125B     1     CALL ( DAT_READ_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       03B2B 1E8E     2     PAGE ( $ / 1024 ),
   144            C        ;Read index-table end
   145            C        	
   146 03B2C 0012 C        	RET
   147            C        	
   148            C        ;############################################################################
   149            C        ;	IDXTAB_WRITE
   150            C        ;	Write index-table into flash and store into block 3(0..119)
   151            C        ;
   152            C        ;	input : 
   153            C        ;	output: 
   154            C        ;
   155            C        ;############################################################################
   156 03B2D      C        IDXTAB_WRITE:
   157            C        ;---Index updated then write it into flash
   158 03B2D 1813 C        	MOV	A,@CGROUP_BOOKIDX
   159            C      M 	PAGE	#(SET_GROUP)
       03B2E 1E83     1     PAGE ( SET_GROUP / 1024 ),
   160 03B2F 1241 C        	CALL	SET_GROUP
   161 03B30      C        IDXTAB_WRITE_1:
   162 03B30 1801 C        	MOV	A,@1
   163            C      M 	PAGE	#(DEL_TEL)
       03B31 1E83     1     PAGE ( DEL_TEL / 1024 ),
   164 03B32 124B C        	CALL	DEL_TEL
   165            C        	
   166            C      M 	PAGE	#(GET_TELT)
       03B33 1E83     1     PAGE ( GET_TELT / 1024 ),
   167 03B34 1246 C        	CALL	GET_TELT
   168            C      M 	PAGE	#($)
       03B35 1E8E     1     PAGE ( $ / 1024 ),
   169 03B36 0415 C        	MOV	A,TEMP0
   170            C      M 	JPNZ	IDXTAB_WRITE_1		;Delete all old index
       03B37 0E83     1     JBS  _STATUS , Z 
       03B38 1730     1     JMP  IDXTAB_WRITE_1 ,
   171            C        	
   172            C        	;PAGE	#(TEL_GC_CHK)
   173            C        	;CALL	TEL_GC_CHK
   174            C        	
   175            C      M 	MOV	OFFSET_S,@IDXTAB_START
       03B39 1800     1     MOV A,@( IDXTAB_START )
       03B3A 005C     1     MOV  OFFSET_S ,A
   176            C      M 	MOV	COUNT,@(60)
       03B3B 183C     1     MOV A,@( 60 )
       03B3C 005E     1     MOV  COUNT ,A
   177 03B3D      C        IDXTAB_WRITE_1INTOFLASH:
   178            C      M 	BLOCK	3
       03B3D 1806     1     MOV A,@((( 3 << 1 )+ VALUE_IOCA ))
       03B3E 000A     1     IOW  _IOCA ,
   179            C      M 	MOV	_RC,OFFSET_S
       03B3F 041C     1     MOV A, OFFSET_S 
       03B40 004C     1     MOV  _RC ,A
   180 03B41 040D C        	MOV	A,_RD
   181            C      M 	LCALL	DAT_WRITE
                      2  M  PAGE #( DAT_WRITE ),
       03B42 1E83     2     PAGE ( DAT_WRITE / 1024 ),
       03B43 124F     1     CALL ( DAT_WRITE % 1024 ),
                      2  M  PAGE #( $ ),
       03B44 1E8E     2     PAGE ( $ / 1024 ),
   182            C        	
   183 03B45 055C C        	INC	OFFSET_S
   184            C        	
   185 03B46 01DE C        	DEC	COUNT
   186 03B47 041E C        	MOV	A,COUNT
   187            C      M 	JPNZ	IDXTAB_WRITE_1INTOFLASH
       03B48 0E83     1     JBS  _STATUS , Z 
       03B49 173D     1     JMP  IDXTAB_WRITE_1INTOFLASH ,
   188            C      M 	PAGE	#(DAT_WRITE_STOP)
       03B4A 1E83     1     PAGE ( DAT_WRITE_STOP / 1024 ),
   189 03B4B 1253 C        	CALL	DAT_WRITE_STOP
   190            C        ;---
   191            C      M 	MOV	OFFSET_S,@(IDXTAB_START+60)
       03B4C 183C     1     MOV A,@(( IDXTAB_START + 60 ))
       03B4D 005C     1     MOV  OFFSET_S ,A
   192            C      M 	MOV	COUNT,@(60)
       03B4E 183C     1     MOV A,@( 60 )
       03B4F 005E     1     MOV  COUNT ,A
   193 03B50      C        IDXTAB_WRITE_2INTOFLASH:
   194            C      M 	BLOCK	3
       03B50 1806     1     MOV A,@((( 3 << 1 )+ VALUE_IOCA ))
       03B51 000A     1     IOW  _IOCA ,
   195            C      M 	MOV	_RC,OFFSET_S
       03B52 041C     1     MOV A, OFFSET_S 
       03B53 004C     1     MOV  _RC ,A
   196 03B54 040D C        	MOV	A,_RD
   197            C      M 	LCALL	DAT_WRITE
                      2  M  PAGE #( DAT_WRITE ),
       03B55 1E83     2     PAGE ( DAT_WRITE / 1024 ),
       03B56 124F     1     CALL ( DAT_WRITE % 1024 ),
                      2  M  PAGE #( $ ),
       03B57 1E8E     2     PAGE ( $ / 1024 ),
   198            C        	
   199 03B58 055C C        	INC	OFFSET_S
   200            C        	
   201 03B59 01DE C        	DEC	COUNT
   202 03B5A 041E C        	MOV	A,COUNT
   203            C      M 	JPNZ	IDXTAB_WRITE_2INTOFLASH
       03B5B 0E83     1     JBS  _STATUS , Z 
       03B5C 1750     1     JMP  IDXTAB_WRITE_2INTOFLASH ,
   204            C        
   205            C      M 	LCALL	DAT_WRITE_STOP
                      2  M  PAGE #( DAT_WRITE_STOP ),
       03B5D 1E83     2     PAGE ( DAT_WRITE_STOP / 1024 ),
       03B5E 1253     1     CALL ( DAT_WRITE_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       03B5F 1E8E     2     PAGE ( $ / 1024 ),
   206            C        	
   207 03B60 0012 C        	RET
   208            C        ;###############################################################################
   209            C        ;	IDXTAB_ADD
   210            C        ;
   211            C        ;	input : 
   212            C        ;	output:
   213            C        ;
   214            C        ;###############################################################################
   215 03B61      C        IDXTAB_ADD:
   216            C        	;MOV	A,@GROUP_BOOK
   217            C        	;PAGE	#(SET_GROUP)
   218            C        	;CALL	SET_GROUP
   219            C        
   220            C      M 	PAGE	#(GET_TELT)
       03B61 1E83     1     PAGE ( GET_TELT / 1024 ),
   221 03B62 1246 C        	CALL	GET_TELT
   222            C      M 	PAGE	#($)
       03B63 1E8E     1     PAGE ( $ / 1024 ),
   223 03B64 0415 C        	MOV	A,TEMP0
   224 03B65 006E C        	MOV	B1_CID_T,A	;the .MAX index
   225            C        	;ADD	A,@1		;!!!The newest one index is not in table
   226 03B66 0072 C        	MOV	B1_MSG_ID,A
   227 03B67      C        IDXTAB_ADD_COMP:	;!!!!开始比较,此步骤较费时O(N^2)
   228            C      M 	MOV	OFFSET_D,@M123_BUF_START	;
       03B67 18B0     1     MOV A,@( M123_BUF_START )
       03B68 005D     1     MOV  OFFSET_D ,A
   229            C        	
   230 03B69 01F2 C        	DEC	B1_MSG_ID
   231 03B6A 0432 C        	MOV	A,B1_MSG_ID
   232            C      M 	JPZ	IDXTAB_ADD_COMPOVER	;没找到更大的
       03B6B 0C83     1     JBC  _STATUS , Z 
       03B6C 1789     1     JMP  IDXTAB_ADD_COMPOVER ,
   233            C        ;-----find tel-index
   234 03B6D 0432 C        	MOV	A,B1_MSG_ID
   235            C      M 	PAGE	#(TRSLATE_TABTODSP)
       03B6E 1E8E     1     PAGE ( TRSLATE_TABTODSP / 1024 ),
   236 03B6F 12C8 C        	CALL	TRSLATE_TABTODSP
   237 03B70 0078 C        	MOV	B1_YEAR_REG,A		;TEL-ID
   238            C        ;---tel-index ok,then read the pbook	
   239 03B71      C        IDXTAB_ADD_READPBOOK_LOOP:
   240 03B71 0438 C        	MOV	A,B1_YEAR_REG
   241            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       03B72 1E83     2     PAGE ( DAT_READ / 1024 ),
       03B73 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       03B74 1E8E     2     PAGE ( $ / 1024 ),
   242            C        	
   243            C      M 	MOV	_RC,OFFSET_D	;the address will be store into
       03B75 041D     1     MOV A, OFFSET_D 
       03B76 004C     1     MOV  _RC ,A
   244            C      M 	MOV	_RD,TEMP0	;the data
       03B77 0415     1     MOV A, TEMP0 
       03B78 004D     1     MOV  _RD ,A
   245            C        	
   246 03B79 055D C        	INC	OFFSET_D	;next address
   247            C        	
   248 03B7A 0416 C        	MOV	A,TEMP1		;Error code
   249            C      M 	JPZ	IDXTAB_ADD_READPBOOK_LOOP
       03B7B 0C83     1     JBC  _STATUS , Z 
       03B7C 1771     1     JMP  IDXTAB_ADD_READPBOOK_LOOP ,
   250            C        	
   251            C      M 	PAGE	#(DAT_READ_STOP)
       03B7D 1E83     1     PAGE ( DAT_READ_STOP / 1024 ),
   252 03B7E 125B C        	CALL	DAT_READ_STOP
   253            C        ;-----read the pbook then comprate with new pbook
   254            C      M 	MOV	OFFSET_D,@M123_BUF_START	;
       03B7F 18B0     1     MOV A,@( M123_BUF_START )
       03B80 005D     1     MOV  OFFSET_D ,A
   255            C      M 	MOV	OFFSET_S,@TEL_FLAG	;
       03B81 1860     1     MOV A,@( TEL_FLAG )
       03B82 005C     1     MOV  OFFSET_S ,A
   256            C      M 	PAGE	#(COMP_ONETELNAME)
       03B83 1E8E     1     PAGE ( COMP_ONETELNAME / 1024 ),
   257 03B84 12CE C        	CALL	COMP_ONETELNAME
   258            C      M 	PAGE	#($)
       03B85 1E8E     1     PAGE ( $ / 1024 ),
   259            C        	
   260 03B86 1F01 C        	ADD	A,@1
   261            C      M 	JPC	IDXTAB_ADD_COMP		;小于(0XFF),就找下一个(大于或等于为止)
       03B87 0C03     1     JBC  _STATUS , C 
       03B88 1767     1     JMP  IDXTAB_ADD_COMP ,
   262            C        
   263 03B89      C        IDXTAB_ADD_COMPOVER:		;!!!!比较,结束
   264            C        ;---fund the index(-1),(about to index table)
   265 03B89 0572 C        	INC	B1_MSG_ID
   266 03B8A      C        IDXTAB_ADD_IDOK:
   267            C        ;---Index ok then adjust the index-table	
   268            C      M 	BLOCK	3
       03B8A 1806     1     MOV A,@((( 3 << 1 )+ VALUE_IOCA ))
       03B8B 000A     1     IOW  _IOCA ,
   269 03B8C 1800 C        	MOV	A,@IDXTAB_START
   270 03B8D 03B2 C        	ADD	A,B1_MSG_ID
   271 03B8E 005C C        	MOV	OFFSET_S,A	;Source
   272 03B8F 0078 C        	MOV	B1_YEAR_REG,A	;Save it(temporary)
   273            C        ;-
   274 03B90 051C C        	INCA	OFFSET_S
   275 03B91 005D C        	MOV	OFFSET_D,A	;Dest
   276            C        ;-
   277 03B92 0432 C        	MOV	A,B1_MSG_ID
   278 03B93 012E C        	SUB	A,B1_CID_T
   279            C      M 	JPZ	IDXTAB_ADD_ADJUST_OK
       03B94 0C83     1     JBC  _STATUS , Z 
       03B95 179A     1     JMP  IDXTAB_ADD_ADJUST_OK ,
   280 03B96 005E C        	MOV	COUNT,A		;Counter
   281            C        
   282            C      M 	LCALL	MOVE_DATA
                      2  M  PAGE #( MOVE_DATA ),
       03B97 1E82     2     PAGE ( MOVE_DATA / 1024 ),
       03B98 1056     1     CALL ( MOVE_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       03B99 1E8E     2     PAGE ( $ / 1024 ),
   283 03B9A      C        IDXTAB_ADD_ADJUST_OK:
   284            C        ;---
   285 03B9A 0432 C        	MOV	A,B1_MSG_ID
   286 03B9B 004C C        	MOV	_RC,A
   287 03B9C 042E C        	MOV	A,B1_CID_T
   288 03B9D 004D C        	MOV	_RD,A
   289            C        
   290 03B9E 0012 C        	RET
   291            C        
   292            C        ;###############################################################################
   293            C        ;	IDXTAB_DEL
   294            C        ;
   295            C        ;	input : B1_MSG_ID = the specific TEL_ID
   296            C        ;		B1_CID_T = The total number of pbook
   297            C        ;	output:	
   298            C        ;
   299            C        ;###############################################################################
   300 03B9F      C        IDXTAB_DEL:
   301 03B9F 0432 C        	MOV	A,B1_MSG_ID
   302 03BA0 1F00 C        	ADD	A,@IDXTAB_START
   303 03BA1 005D C        	MOV	OFFSET_D,A	;Dest
   304 03BA2 051D C        	INCA	OFFSET_D
   305 03BA3 005C C        	MOV	OFFSET_S,A	;Source
   306            C        
   307 03BA4 041D C        	MOV	A,OFFSET_D	;!!!Current index
   308 03BA5 12C8 C        	CALL	TRSLATE_TABTODSP	;translate the table-index to DSP-index	
   309 03BA6 0073 C        	MOV	B1_SEC_REG,A
   310            C        ;-
   311 03BA7 052E C        	INCA	B1_CID_T
   312 03BA8 0078 C        	MOV	B1_YEAR_REG,A
   313            C        	
   314 03BA9 0432 C        	MOV	A,B1_MSG_ID
   315 03BAA 0138 C        	SUB	A,B1_YEAR_REG	;!!!Note: B1_MSG_ID must comparate with the number of total tel-message before delete operation
   316            C      M 	JPZ	IDXTAB_DEL_MOVEOK
       03BAB 0C83     1     JBC  _STATUS , Z 
       03BAC 17B1     1     JMP  IDXTAB_DEL_MOVEOK ,
   317 03BAD 005E C        	MOV	COUNT,A		;Counter
   318            C        
   319            C      M 	LCALL	MOVE_DATA
                      2  M  PAGE #( MOVE_DATA ),
       03BAE 1E82     2     PAGE ( MOVE_DATA / 1024 ),
       03BAF 1056     1     CALL ( MOVE_DATA % 1024 ),
                      2  M  PAGE #( $ ),
       03BB0 1E8E     2     PAGE ( $ / 1024 ),
   320 03BB1      C        IDXTAB_DEL_MOVEOK:	
   321            C        ;-
   322 03BB1      C        IDXTAB_DEL_LOOP:
   323 03BB1 01F8 C        	DEC	B1_YEAR_REG
   324            C        
   325 03BB2 0438 C        	MOV	A,B1_YEAR_REG
   326            C      M 	JPZ	IDXTAB_DEL_END
       03BB3 0C83     1     JBC  _STATUS , Z 
       03BB4 17BC     1     JMP  IDXTAB_DEL_END ,
   327 03BB5 004C C        	MOV	_RC,A
   328 03BB6 040D C        	MOV	A,_RD
   329 03BB7 0133 C        	SUB	A,B1_SEC_REG
   330            C        	
   331            C      M 	JPC	IDXTAB_DEL_ADJUST_OK
       03BB8 0C03     1     JBC  _STATUS , C 
       03BB9 17BB     1     JMP  IDXTAB_DEL_ADJUST_OK ,
   332 03BBA 01CD C        	DEC	_RD
   333 03BBB      C        IDXTAB_DEL_ADJUST_OK:
   334 03BBB 17B1 C        	JMP	IDXTAB_DEL_LOOP
   335 03BBC      C        IDXTAB_DEL_END:
   336            C        
   337 03BBC 0012 C        	RET
   338            C        ;-------------------------------------------------------------------------------
   339            C        
   340            C        ;-------------------------------------------------------------------------------
   639                     ;-------------------------------------------------------------------------------
   640                     ;page15
   641                     INCLUDE		"string.dt"
     1            C        ORG	(15<<10)	;the 15th page()
     2            C        ;-------------------------------------------------------------------------------
     3 03C00      C        TABSTR_3DOT:		;...
     4            C      M 	MTBL
       03C00 0020     1     TBL 
             3C00     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
     5 03C01 1C00 C        	RETL	CH_BLANK
     6 03C02 1C0E C        	RETL	CH_DOT
     7 03C03 1C0E C        	RETL	CH_DOT
     8 03C04 1C0E C        	RETL	CH_DOT
     9 03C05 1C00 C        	RETL	CH_BLANK
    10 03C06 1CFF C        	RETL	CH_END
    11            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    12 03C07      C        TABSTR_4BLANK:
    13            C      M 	MTBL
       03C07 0020     1     TBL 
             3C07     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    14 03C08 1C00 C        	RETL	CH_BLANK
    15 03C09 1C00 C        	RETL	CH_BLANK
    16 03C0A 1C00 C        	RETL	CH_BLANK
    17 03C0B 1C00 C        	RETL	CH_BLANK
    18 03C0C 1CFF C        	RETL	CH_END
    19            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    20 03C0D      C        TABSTR_7BLANK:
    21            C      M 	MTBL
       03C0D 0020     1     TBL 
             3C0D     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    22 03C0E 1C00 C        	RETL	CH_BLANK
    23 03C0F 1C00 C        	RETL	CH_BLANK
    24 03C10 1C00 C        	RETL	CH_BLANK
    25 03C11 1C00 C        	RETL	CH_BLANK
    26 03C12 1C00 C        	RETL	CH_BLANK
    27 03C13 1C00 C        	RETL	CH_BLANK
    28 03C14 1C00 C        	RETL	CH_BLANK
    29 03C15 1CFF C        	RETL	CH_END
    30            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    31 03C16      C        TABSTR_ACCESS:
    32            C      M 	MTBL
       03C16 0020     1     TBL 
             3C16     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    33 03C17 1C21 C        	RETL	CH_A
    34 03C18 1C23 C        	RETL	CH_C
    35 03C19 1C23 C        	RETL	CH_C
    36 03C1A 1C25 C        	RETL	CH_E
    37 03C1B 1C33 C        	RETL	CH_S
    38 03C1C 1C33 C        	RETL	CH_S
    39 03C1D 1CFF C        	RETL	CH_END
    40            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    41 03C1E      C        TABSTR_ADD:
    42            C      M 	MTBL
       03C1E 0020     1     TBL 
             3C1E     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    43 03C1F 1C00 C        	RETL	CH_BLANK
    44 03C20 1C00 C        	RETL	CH_BLANK
    45 03C21 1C21 C        	RETL	CH_A
    46 03C22 1C24 C        	RETL	CH_D
    47 03C23 1C24 C        	RETL	CH_D
    48 03C24 1C00 C        	RETL	CH_BLANK	;加入空格与SEARCH长度一致
    49 03C25 1CFF C        	RETL	CH_END
    50            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    51 03C26      C        TABSTR_ALL:
    52            C      M 	MTBL
       03C26 0020     1     TBL 
             3C26     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    53 03C27 1C21 C        	RETL	CH_A
    54 03C28 1C2C C        	RETL	CH_L
    55 03C29 1C2C C        	RETL	CH_L
    56 03C2A 1CFF C        	RETL	CH_END
    57            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    58 03C2B      C        TABSTR_ANSWER:
    59            C      M 	MTBL
       03C2B 0020     1     TBL 
             3C2B     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    60 03C2C 1C21 C        	RETL	CH_A
    61 03C2D 1C2E C        	RETL	CH_N
    62 03C2E 1C33 C        	RETL	CH_S
    63 03C2F 1C37 C        	RETL	CH_W
    64 03C30 1C25 C        	RETL	CH_E
    65 03C31 1C32 C        	RETL	CH_R
    66 03C32 1CFF C        	RETL	CH_END
    67            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    68 03C33      C        TABSTR_CALL:
    69            C      M 	MTBL
       03C33 0020     1     TBL 
             3C33     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    70 03C34 1C23 C        	RETL	CH_C
    71 03C35 1C21 C        	RETL	CH_A
    72 03C36 1C2C C        	RETL	CH_L
    73 03C37 1C2C C        	RETL	CH_L
    74 03C38 1CFF C        	RETL	CH_END
    75            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    76 03C39      C        TABSTR_CALLS:
    77            C      M 	MTBL
       03C39 0020     1     TBL 
             3C39     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    78 03C3A 1C23 C        	RETL	CH_C
    79 03C3B 1C21 C        	RETL	CH_A
    80 03C3C 1C2C C        	RETL	CH_L
    81 03C3D 1C2C C        	RETL	CH_L
    82 03C3E 1C33 C        	RETL	CH_S
    83 03C3F 1CFF C        	RETL	CH_END
    84            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    85 03C40      C        TABSTR_CONTRAST:
    86            C      M 	MTBL
       03C40 0020     1     TBL 
             3C40     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
    87 03C41 1C23 C        	RETL	CH_C
    88 03C42 1C2F C        	RETL	CH_O
    89 03C43 1C2E C        	RETL	CH_N
    90 03C44 1C34 C        	RETL	CH_T
    91 03C45 1C32 C        	RETL	CH_R
    92 03C46 1C21 C        	RETL	CH_A
    93 03C47 1C33 C        	RETL	CH_S
    94 03C48 1C34 C        	RETL	CH_T
    95 03C49 1CFF C        	RETL	CH_END
    96            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
    97            C        
    98 03C4A      C        TABSTR_DATE:
    99            C      M 	MTBL
       03C4A 0020     1     TBL 
             3C4A     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   100 03C4B 1C24 C        	RETL	CH_D
   101 03C4C 1C21 C        	RETL	CH_A
   102 03C4D 1C34 C        	RETL	CH_T
   103 03C4E 1C25 C        	RETL	CH_E
   104 03C4F 1CFF C        	RETL	CH_END
   105            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   106 03C50      C        TABSTR_DEL:
   107            C      M 	MTBL
       03C50 0020     1     TBL 
             3C50     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   108 03C51 1C24 C        	RETL	CH_D
   109 03C52 1C25 C        	RETL	CH_E
   110 03C53 1C2C C        	RETL	CH_L
   111 03C54 1CFF C        	RETL	CH_END
   112            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   113 03C55      C        TABSTR_DELETE:
   114            C      M 	MTBL
       03C55 0020     1     TBL 
             3C55     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   115 03C56 1C24 C        	RETL	CH_D
   116 03C57 1C25 C        	RETL	CH_E
   117 03C58 1C2C C        	RETL	CH_L
   118 03C59 1C25 C        	RETL	CH_E
   119 03C5A 1C34 C        	RETL	CH_T
   120 03C5B 1C25 C        	RETL	CH_E
   121 03C5C 1CFF C        	RETL	CH_END
   122            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   123 03C5D      C        TABSTR_DEUTSCH:
   124            C      M 	MTBL
       03C5D 0020     1     TBL 
             3C5D     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   125 03C5E 1C24 C        	RETL	CH_D
   126 03C5F 1C25 C        	RETL	CH_E
   127 03C60 1C35 C        	RETL	CH_U
   128 03C61 1C34 C        	RETL	CH_T
   129 03C62 1C33 C        	RETL	CH_S
   130 03C63 1C23 C        	RETL	CH_C
   131 03C64 1C28 C        	RETL	CH_H
   132 03C65 1CFF C        	RETL	CH_END
   133            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   134 03C66      C        TABSTR_EMPTY:
   135            C      M 	MTBL
       03C66 0020     1     TBL 
             3C66     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   136 03C67 1C25 C        	RETL	CH_E
   137 03C68 1C2D C        	RETL	CH_M
   138 03C69 1C30 C        	RETL	CH_P
   139 03C6A 1C34 C        	RETL	CH_T
   140 03C6B 1C39 C        	RETL	CH_Y
   141 03C6C 1CFF C        	RETL	CH_END
   142            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   143 03C6D      C        TABSTR_END:
   144            C      M 	MTBL
       03C6D 0020     1     TBL 
             3C6D     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   145 03C6E 1C25 C        	RETL	CH_E
   146 03C6F 1C2E C        	RETL	CH_N
   147 03C70 1C24 C        	RETL	CH_D
   148 03C71 1CFF C        	RETL	CH_END
   149            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   150 03C72      C        TABSTR_ENGLISH:
   151            C      M 	MTBL
       03C72 0020     1     TBL 
             3C72     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   152 03C73 1C25 C        	RETL	CH_E
   153 03C74 1C2E C        	RETL	CH_N
   154 03C75 1C27 C        	RETL	CH_G
   155 03C76 1C2C C        	RETL	CH_L
   156 03C77 1C29 C        	RETL	CH_I
   157 03C78 1C33 C        	RETL	CH_S
   158 03C79 1C28 C        	RETL	CH_H
   159 03C7A 1CFF C        	RETL	CH_END
   160            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   161 03C7B      C        TABSTR_EXIT:
   162            C      M 	MTBL
       03C7B 0020     1     TBL 
             3C7B     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   163 03C7C 1C25 C        	RETL	CH_E
   164 03C7D 1C38 C        	RETL	CH_X
   165 03C7E 1C29 C        	RETL	CH_I
   166 03C7F 1C34 C        	RETL	CH_T
   167 03C80 1CFF C        	RETL	CH_END
   168            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   169 03C81      C        TABSTR_FLASH:
   170            C      M 	MTBL
       03C81 0020     1     TBL 
             3C81     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   171 03C82 1C26 C        	RETL	CH_F
   172 03C83 1C2C C        	RETL	CH_L
   173 03C84 1C21 C        	RETL	CH_A
   174 03C85 1C33 C        	RETL	CH_S
   175 03C86 1C28 C        	RETL	CH_H
   176 03C87 1CFF C        	RETL	CH_END
   177            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   178 03C88      C        TABSTR_FRANCAIS:
   179            C      M 	MTBL
       03C88 0020     1     TBL 
             3C88     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   180 03C89 1C26 C        	RETL	CH_F
   181 03C8A 1C32 C        	RETL	CH_R
   182 03C8B 1C21 C        	RETL	CH_A
   183 03C8C 1C2E C        	RETL	CH_N
   184 03C8D 1C23 C        	RETL	CH_C
   185 03C8E 1C21 C        	RETL	CH_A
   186 03C8F 1C29 C        	RETL	CH_I
   187 03C90 1C33 C        	RETL	CH_S
   188 03C91 1CFF C        	RETL	CH_END
   189            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   190 03C92      C        TABSTR_ICM:
   191            C      M 	MTBL
       03C92 0020     1     TBL 
             3C92     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   192 03C93 1C29 C        	RETL	CH_I
   193 03C94 1C23 C        	RETL	CH_C
   194 03C95 1C2D C        	RETL	CH_M
   195 03C96 1CFF C        	RETL	CH_END	
   196            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   197 03C97      C        TABSTR_INITIALIZATION:
   198            C      M 	MTBL
       03C97 0020     1     TBL 
             3C97     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   199 03C98 1C29 C        	RETL	CH_I
   200 03C99 1C2E C        	RETL	CH_N
   201 03C9A 1C29 C        	RETL	CH_I
   202 03C9B 1C34 C        	RETL	CH_T
   203 03C9C 1C29 C        	RETL	CH_I
   204 03C9D 1C21 C        	RETL	CH_A
   205 03C9E 1C2C C        	RETL	CH_L
   206 03C9F 1C29 C        	RETL	CH_I
   207 03CA0 1C3A C        	RETL	CH_Z
   208 03CA1 1C21 C        	RETL	CH_A
   209 03CA2 1C34 C        	RETL	CH_T
   210 03CA3 1C29 C        	RETL	CH_I
   211 03CA4 1C2F C        	RETL	CH_O
   212 03CA5 1C2E C        	RETL	CH_N
   213 03CA6 1CFF C        	RETL	CH_END	
   214            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   215 03CA7      C        TABSTR_LANGUAGE:
   216            C      M 	MTBL
       03CA7 0020     1     TBL 
             3CA7     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   217 03CA8 1C2C C        	RETL	CH_L
   218 03CA9 1C21 C        	RETL	CH_A
   219 03CAA 1C2E C        	RETL	CH_N
   220 03CAB 1C27 C        	RETL	CH_G
   221 03CAC 1C35 C        	RETL	CH_U
   222 03CAD 1C21 C        	RETL	CH_A
   223 03CAE 1C27 C        	RETL	CH_G
   224 03CAF 1C25 C        	RETL	CH_E
   225 03CB0 1CFF C        	RETL	CH_END
   226            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   227            C        	
   228 03CB1      C        TABSTR_LENGTH:
   229            C      M 	MTBL
       03CB1 0020     1     TBL 
             3CB1     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   230 03CB2 1C2C C        	RETL	CH_L
   231 03CB3 1C25 C        	RETL	CH_E
   232 03CB4 1C2E C        	RETL	CH_N
   233 03CB5 1C27 C        	RETL	CH_G
   234 03CB6 1C34 C        	RETL	CH_T
   235 03CB7 1C28 C        	RETL	CH_H
   236 03CB8 1CFF C        	RETL	CH_END
   237            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   238 03CB9      C        TABSTR_LCD:
   239            C      M 	MTBL
       03CB9 0020     1     TBL 
             3CB9     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   240 03CBA 1C2C C        	RETL	CH_L
   241 03CBB 1C23 C        	RETL	CH_C
   242 03CBC 1C24 C        	RETL	CH_D
   243 03CBD 1CFF C        	RETL	CH_END
   244            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   245 03CBE      C        TABSTR_LIST:
   246            C      M 	MTBL
       03CBE 0020     1     TBL 
             3CBE     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   247 03CBF 1C2C C        	RETL	CH_L
   248 03CC0 1C29 C        	RETL	CH_I
   249 03CC1 1C33 C        	RETL	CH_S
   250 03CC2 1C34 C        	RETL	CH_T
   251 03CC3 1CFF C        	RETL	CH_END
   252            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   253            C        	
   254 03CC4      C        TABSTR_MEMO:
   255            C      M 	MTBL
       03CC4 0020     1     TBL 
             3CC4     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   256 03CC5 1C2D C        	RETL	CH_M
   257 03CC6 1C25 C        	RETL	CH_E
   258 03CC7 1C2D C        	RETL	CH_M
   259 03CC8 1C2F C        	RETL	CH_O
   260 03CC9 1CFF C        	RETL	CH_END	
   261            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   262 03CCA      C        TABSTR_MENU:
   263            C      M 	MTBL
       03CCA 0020     1     TBL 
             3CCA     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   264 03CCB 1C2D C        	RETL	CH_M
   265 03CCC 1C25 C        	RETL	CH_E
   266 03CCD 1C2E C        	RETL	CH_N
   267 03CCE 1C35 C        	RETL	CH_U
   268 03CCF 1CFF C        	RETL	CH_END	
   269            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   270 03CD0      C        TABSTR_MESSAGE:
   271            C      M 	MTBL
       03CD0 0020     1     TBL 
             3CD0     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   272 03CD1 1C2D C        	RETL	CH_M
   273 03CD2 1C25 C        	RETL	CH_E
   274 03CD3 1C33 C        	RETL	CH_S
   275 03CD4 1C33 C        	RETL	CH_S
   276 03CD5 1C21 C        	RETL	CH_A
   277 03CD6 1C27 C        	RETL	CH_G
   278 03CD7 1C25 C        	RETL	CH_E
   279 03CD8 1CFF C        	RETL	CH_END
   280            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   281 03CD9      C        TABSTR_MESSAGES:
   282            C      M 	MTBL
       03CD9 0020     1     TBL 
             3CD9     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   283 03CDA 1C2D C        	RETL	CH_M
   284 03CDB 1C25 C        	RETL	CH_E
   285 03CDC 1C33 C        	RETL	CH_S
   286 03CDD 1C33 C        	RETL	CH_S
   287 03CDE 1C21 C        	RETL	CH_A
   288 03CDF 1C27 C        	RETL	CH_G
   289 03CE0 1C25 C        	RETL	CH_E
   290 03CE1 1C33 C        	RETL	CH_S
   291 03CE2 1CFF C        	RETL	CH_END
   292            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   293            C        	
   294 03CE3      C        TABSTR_MUTE:
   295            C      M 	MTBL
       03CE3 0020     1     TBL 
             3CE3     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   296 03CE4 1C2D C        	RETL	CH_M
   297 03CE5 1C35 C        	RETL	CH_U
   298 03CE6 1C34 C        	RETL	CH_T
   299 03CE7 1C25 C        	RETL	CH_E
   300 03CE8 1CFF C        	RETL	CH_END	
   301            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   302 03CE9      C        TABSTR_NEW:
   303            C      M 	MTBL
       03CE9 0020     1     TBL 
             3CE9     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   304 03CEA 1C2E C        	RETL	CH_N
   305 03CEB 1C25 C        	RETL	CH_E
   306 03CEC 1C37 C        	RETL	CH_W
   307 03CED 1CFF C        	RETL	CH_END
   308            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   309 03CEE      C        TABSTR_NO:
   310            C      M 	MTBL
       03CEE 0020     1     TBL 
             3CEE     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   311 03CEF 1C2E C        	RETL	CH_N
   312 03CF0 1C2F C        	RETL	CH_O
   313 03CF1 1CFF C        	RETL	CH_END
   314            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   315 03CF2      C        TABSTR_NUMBER:
   316            C      M 	MTBL
       03CF2 0020     1     TBL 
             3CF2     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   317 03CF3 1C2E C        	RETL	CH_N
   318 03CF4 1C35 C        	RETL	CH_U
   319 03CF5 1C2D C        	RETL	CH_M
   320 03CF6 1C22 C        	RETL	CH_B
   321 03CF7 1C25 C        	RETL	CH_E
   322 03CF8 1C32 C        	RETL	CH_R
   323 03CF9 1CFF C        	RETL	CH_END
   324            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   325            C        
   326 03CFA      C        TABSTR_OGM:
   327            C      M 	MTBL
       03CFA 0020     1     TBL 
             3CFA     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   328 03CFB 1C2F C        	RETL	CH_O
   329 03CFC 1C27 C        	RETL	CH_G
   330 03CFD 1C2D C        	RETL	CH_M
   331 03CFE 1CFF C        	RETL	CH_END
   332            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   333            C        
   334            C        ORG	(15<<10)|(1<<8)	;the 13th page()
   335 03D00      C        TABSTR_OFF:
   336            C      M 	MTBL
       03D00 0020     1     TBL 
             3D00     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   337 03D01 1C2F C        	RETL	CH_O
   338 03D02 1C26 C        	RETL	CH_F
   339 03D03 1C26 C        	RETL	CH_F
   340 03D04 1CFF C        	RETL	CH_END
   341            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   342 03D05      C        TABSTR_OF:
   343            C      M 	MTBL
       03D05 0020     1     TBL 
             3D05     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   344 03D06 1C2F C        	RETL	CH_O
   345 03D07 1C26 C        	RETL	CH_F
   346 03D08 1CFF C        	RETL	CH_END
   347            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   348 03D09      C        TABSTR_ON:
   349            C      M 	MTBL
       03D09 0020     1     TBL 
             3D09     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   350 03D0A 1C2F C        	RETL	CH_O
   351 03D0B 1C2E C        	RETL	CH_N
   352 03D0C 1C00 C        	RETL	CH_BLANK	;为了与off长度一致
   353 03D0D 1CFF C        	RETL	CH_END
   354            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   355            C        
   356 03D0E      C        TABSTR_OPTIONS:
   357            C      M 	MTBL
       03D0E 0020     1     TBL 
             3D0E     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   358 03D0F 1C2F C        	RETL	CH_O
   359 03D10 1C30 C        	RETL	CH_P
   360 03D11 1C34 C        	RETL	CH_T
   361 03D12 1C29 C        	RETL	CH_I
   362 03D13 1C2F C        	RETL	CH_O
   363 03D14 1C2E C        	RETL	CH_N
   364 03D15 1C33 C        	RETL	CH_S
   365 03D16 1CFF C        	RETL	CH_END
   366            C      M 	ENDT	
             0001     1     Y_TBL  VAR  1 
   367 03D17      C        TABSTR_PLAY:
   368            C      M 	MTBL
       03D17 0020     1     TBL 
             3D17     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   369 03D18 1C30 C        	RETL	CH_P
   370 03D19 1C2C C        	RETL	CH_L
   371 03D1A 1C21 C        	RETL	CH_A
   372 03D1B 1C39 C        	RETL	CH_Y
   373 03D1C 1CFF C        	RETL	CH_END
   374            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   375 03D1D      C        TABSTR_RECORDING:
   376            C      M 	MTBL
       03D1D 0020     1     TBL 
             3D1D     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   377 03D1E 1C32 C        	RETL	CH_R
   378 03D1F 1C25 C        	RETL	CH_E
   379 03D20 1C23 C        	RETL	CH_C
   380 03D21 1C2F C        	RETL	CH_O
   381 03D22 1C32 C        	RETL	CH_R
   382 03D23 1C24 C        	RETL	CH_D
   383 03D24 1C29 C        	RETL	CH_I
   384 03D25 1C2E C        	RETL	CH_N
   385 03D26 1C27 C        	RETL	CH_G
   386 03D27 1CFF C        	RETL	CH_END
   387            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   388            C        
   389 03D28      C        TABSTR_REMOTE:
   390            C      M 	MTBL
       03D28 0020     1     TBL 
             3D28     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   391 03D29 1C32 C        	RETL	CH_R
   392 03D2A 1C25 C        	RETL	CH_E
   393 03D2B 1C2D C        	RETL	CH_M
   394 03D2C 1C2F C        	RETL	CH_O
   395 03D2D 1C34 C        	RETL	CH_T
   396 03D2E 1C25 C        	RETL	CH_E
   397 03D2F 1CFF C        	RETL	CH_END
   398            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   399            C        
   400 03D30      C        TABSTR_RINGS:
   401            C      M 	MTBL
       03D30 0020     1     TBL 
             3D30     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   402 03D31 1C32 C        	RETL	CH_R
   403 03D32 1C29 C        	RETL	CH_I
   404 03D33 1C2E C        	RETL	CH_N
   405 03D34 1C27 C        	RETL	CH_G
   406 03D35 1C33 C        	RETL	CH_S
   407 03D36 1CFF C        	RETL	CH_END
   408            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   409            C        
   410 03D37      C        TABSTR_SEARCH:
   411            C      M 	MTBL
       03D37 0020     1     TBL 
             3D37     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   412 03D38 1C33 C        	RETL	CH_S
   413 03D39 1C25 C        	RETL	CH_E
   414 03D3A 1C21 C        	RETL	CH_A
   415 03D3B 1C32 C        	RETL	CH_R
   416 03D3C 1C23 C        	RETL	CH_C
   417 03D3D 1C28 C        	RETL	CH_H
   418 03D3E 1CFF C        	RETL	CH_END
   419            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   420            C        
   421 03D3F      C        TABSTR_SET:
   422            C      M 	MTBL
       03D3F 0020     1     TBL 
             3D3F     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   423 03D40 1C33 C        	RETL	CH_S
   424 03D41 1C25 C        	RETL	CH_E
   425 03D42 1C34 C        	RETL	CH_T
   426 03D43 1CFF C        	RETL	CH_END
   427            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   428 03D44      C        TABSTR_STORE:
   429            C      M 	MTBL
       03D44 0020     1     TBL 
             3D44     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   430 03D45 1C33 C        	RETL	CH_S
   431 03D46 1C34 C        	RETL	CH_T
   432 03D47 1C2F C        	RETL	CH_O
   433 03D48 1C32 C        	RETL	CH_R
   434 03D49 1CFF C        	RETL	CH_END
   435            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   436            C        
   437 03D4A      C        TABSTR_TAM_HD:		;中间空格用下划线表示
   438            C      M 	MTBL
       03D4A 0020     1     TBL 
             3D4A     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   439 03D4B 1C34 C        	RETL	CH_T
   440 03D4C 1C21 C        	RETL	CH_A
   441 03D4D 1C2D C        	RETL	CH_M
   442 03D4E 1C00 C        	RETL	CH_BLANK
   443 03D4F 1C28 C        	RETL	CH_H
   444 03D50 1C24 C        	RETL	CH_D
   445 03D51 1CFF C        	RETL	CH_END
   446            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   447            C        
   448            C        
   449 03D52      C        TABSTR_TIME:
   450            C      M 	MTBL
       03D52 0020     1     TBL 
             3D52     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   451 03D53 1C34 C        	RETL	CH_T
   452 03D54 1C29 C        	RETL	CH_I
   453 03D55 1C2D C        	RETL	CH_M
   454 03D56 1C25 C        	RETL	CH_E
   455 03D57 1CFF C        	RETL	CH_END
   456            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   457 03D58      C        TABSTR_TO:
   458            C      M 	MTBL
       03D58 0020     1     TBL 
             3D58     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   459 03D59 1C34 C        	RETL	CH_T
   460 03D5A 1C2F C        	RETL	CH_O
   461 03D5B 1CFF C        	RETL	CH_END	
   462            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   463 03D5C      C        TABSTR_TOLL_SAVE:
   464            C      M 	MTBL
       03D5C 0020     1     TBL 
             3D5C     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   465 03D5D 1C34 C        	RETL	CH_T
   466 03D5E 1C2F C        	RETL	CH_O
   467 03D5F 1C2C C        	RETL	CH_L
   468 03D60 1C2C C        	RETL	CH_L
   469 03D61 1C00 C        	RETL	CH_BLANK
   470 03D62 1C33 C        	RETL	CH_S
   471 03D63 1C21 C        	RETL	CH_A
   472 03D64 1C36 C        	RETL	CH_V
   473 03D65 1C25 C        	RETL	CH_E
   474 03D66 1CFF C        	RETL	CH_END	
   475            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   476 03D67      C        TABSTR_WITHHELD:
   477            C      M 	MTBL
       03D67 0020     1     TBL 
             3D67     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   478 03D68 1C37 C        	RETL	CH_W
   479 03D69 1C29 C        	RETL	CH_I
   480 03D6A 1C34 C        	RETL	CH_T
   481 03D6B 1C28 C        	RETL	CH_H
   482 03D6C 1C28 C        	RETL	CH_H
   483 03D6D 1C25 C        	RETL	CH_E
   484 03D6E 1C2C C        	RETL	CH_L
   485 03D6F 1C24 C        	RETL	CH_D
   486 03D70 1CFF C        	RETL	CH_END
   487            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   488 03D71      C        TABSTR_YEAR:
   489            C      M 	MTBL
       03D71 0020     1     TBL 
             3D71     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   490 03D72 1C39 C        	RETL	CH_Y
   491 03D73 1C25 C        	RETL	CH_E
   492 03D74 1C21 C        	RETL	CH_A
   493 03D75 1C32 C        	RETL	CH_R
   494 03D76 1CFF C        	RETL	CH_END
   495            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   496 03D77      C        TABSTR_DELETE3DOT:
   497            C      M 	MTBL
       03D77 0020     1     TBL 
             3D77     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   498 03D78 1C24 C        	RETL	CH_D
   499 03D79 1C25 C        	RETL	CH_E
   500 03D7A 1C2C C        	RETL	CH_L
   501 03D7B 1C25 C        	RETL	CH_E
   502 03D7C 1C34 C        	RETL	CH_T
   503 03D7D 1C25 C        	RETL	CH_E
   504 03D7E 1C0E C        	RETL	CH_DOT
   505 03D7F 1C0E C        	RETL	CH_DOT
   506 03D80 1C0E C        	RETL	CH_DOT
   507 03D81 1CFF C        	RETL	CH_END
   508            C      M 	ENDT	
             0001     1     Y_TBL  VAR  1 
   509            C        ;---------------------------------------
   510            C        
   511            C        ;-------------------------------------------------------------------------------
   512       0001 C        IDSTR_ACCESS	==	1
   513       0002 C        IDSTR_ANSWER	==	2
   514       0003 C        IDSTR_CALLS	==	3
   515       0004 C        IDSTR_CONTRAST	==	4
   516       0005 C        IDSTR_DELETE	==	5
   517       0006 C        IDSTR_EXIT	==	6
   518       0007 C        IDSTR_FLASH	==	7
   519       0008 C        IDSTR_LANGUAGE	==	8
   520       0009 C        IDSTR_LENGTH	==	9
   521       000A C        IDSTR_LCD	==	10
   522       000B C        IDSTR_MEMO	==	11
   523       000C C        IDSTR_MESSAGES	==	12
   524       000D C        IDSTR_NO	==	13
   525       000E C        IDSTR_OGM	==	14
   526       000F C        IDSTR_OPTIONS	==	15
   527       0010 C        IDSTR_PLAY	==	16
   528       0011 C        IDSTR_RECORDING	==	17
   529       0012 C        IDSTR_REMOTE	==	18
   530       0013 C        IDSTR_RINGS	==	19
   531       0014 C        IDSTR_SET	==	20
   532       0015 C        IDSTR_TIME	==	21
   533       0016 C        IDSTR_TO	==	22
   534       0017 C        IDSTR_WITHHELD	==	23
   535            C        ;-------------------------------------------------------------------------------
   536            C        ;ORG	(13<<10)+(1<<8)	;the 13th page()
   537            C        ;-------------------------------------------------------------------------------
   538            C        
   539            C        ;-------------------------------------------------------------------------------
   540            C        ;ORG	(13<<10)+(2<<8)	;the 13th page()
   541            C        ;-------------------------------------------------------------------------------
   542            C        
   543            C        ;-------------------------------------------------------------------------------
   544            C        ;ORG	(13<<10)+(3<<8)	;the 13th page()
   545            C        ;-------------------------------------------------------------------------------
   546            C        
   547            C        
   548            C        
   642                     INCLUDE		"CidCook.dt"
     1            C        ;-------------------------------------------------------------------------------
     2 03D82      C        DTMF_DECODE:
     3            C        ;---先加入本地时间
     4            C      M 	BLOCK	2
       03D82 1804     1     MOV A,@((( 2 << 1 )+ VALUE_IOCA ))
       03D83 000A     1     IOW  _IOCA ,
     5            C        
     6 03D84 18C1 C        	MOV	A,@CIDTIME_FLAG
     7 03D85 004C C        	MOV	_RC,A
     8            C      M 	MOV	_RD,@4		;Default TIME-length = 4
       03D86 1804     1     MOV A,@( 4 )
       03D87 004D     1     MOV  _RD ,A
     9            C        	
    10 03D88 18C2 C        	MOV	A,@CIDNUM_FLAG
    11 03D89 004C C        	MOV	_RC,A
    12 03D8A 00CD C        	CLR	_RD		;Default NUM-length = 0
    13            C        
    14 03D8B 18C3 C        	MOV	A,@CIDNAME_FLAG
    15 03D8C 004C C        	MOV	_RC,A
    16 03D8D 00CD C        	CLR	_RD		;Default NAME-length = 0(Unknow/Secret)
    17            C        
    18            C      M 	BANK	0
       03D8E 0984     1     BC  _RSR , 6 
       03D8F 09C4     1     BC  _RSR , 7 
    19            C        	
    20 03D90 18C4 C        	MOV	A,@CIDTIME_START
    21 03D91 004C C        	MOV	_RC,A		;TIME-start
    22            C        
    23 03D92 0436 C        	MOV	A,B0_MON_REG	;month
    24 03D93 004D C        	MOV	_RD,A
    25 03D94 054C C        	INC	_RC
    26            C        
    27 03D95 0435 C        	MOV	A,B0_DAY_REG	;day
    28 03D96 004D C        	MOV	_RD,A	
    29 03D97 054C C        	INC	_RC
    30            C        	
    31 03D98 0434 C        	MOV	A,B0_HOUR_REG	;hour
    32 03D99 004D C        	MOV	_RD,A
    33 03D9A 054C C        	INC	_RC
    34            C        
    35 03D9B 0433 C        	MOV	A,B0_MIN_REG	;minute
    36 03D9C 004D C        	MOV	_RD,A	
    37            C        ;---
    38            C      M 	LCALL	GetCidData
                      2  M  PAGE #( GETCIDDATA ),
       03D9D 1E81     2     PAGE ( GETCIDDATA / 1024 ),
       03D9E 1263     1     CALL ( GETCIDDATA % 1024 ),
                      2  M  PAGE #( $ ),
       03D9F 1E8F     2     PAGE ( $ / 1024 ),
    39 03DA0 0055 C        	MOV	TEMP0,A
    40 03DA1 1D21 C        	SUB	A,@NUM_A
    41            C      M 	JPZ	DTMF_DECODE0X0A		;"A"
       03DA2 0C83     1     JBC  _STATUS , Z 
       03DA3 15AD     1     JMP  DTMF_DECODE0X0A ,
    42            C        	
    43 03DA4 0415 C        	MOV	A,TEMP0
    44 03DA5 1D22 C        	SUB	A,@NUM_B
    45            C      M 	JPZ	DTMF_DECODE0X0B		;"B"
       03DA6 0C83     1     JBC  _STATUS , Z 
       03DA7 15C7     1     JMP  DTMF_DECODE0X0B ,
    46            C        	
    47 03DA8 0415 C        	MOV	A,TEMP0
    48 03DA9 1D24 C        	SUB	A,@NUM_D
    49            C      M 	JPZ	DTMF_DECODE0X0D		;"D"
       03DAA 0C83     1     JBC  _STATUS , Z 
       03DAB 15DE     1     JMP  DTMF_DECODE0X0D ,
    50            C        
    51 03DAC 1CFF C        	RETL	@0xFF		;error
    52            C        
    53 03DAD      C        DTMF_DECODE0X0A:	;正常解码
    54 03DAD 18C8 C        	MOV	A,@CIDNUM_START
    55 03DAE 005D C        	MOV	OFFSET_D,A
    56 03DAF 00DE C        	CLR	COUNT
    57 03DB0      C        DTMF_DECODE0X0A_LOOP:
    58            C        ;---Decode TelNum
    59            C      M 	LCALL	GetCidData
                      2  M  PAGE #( GETCIDDATA ),
       03DB0 1E81     2     PAGE ( GETCIDDATA / 1024 ),
       03DB1 1263     1     CALL ( GETCIDDATA % 1024 ),
                      2  M  PAGE #( $ ),
       03DB2 1E8F     2     PAGE ( $ / 1024 ),
    60            C      M 	JPNC	DTMF_DECODE0X0A_END	;No data
       03DB3 0E03     1     JBS  _STATUS , C 
       03DB4 15C0     1     JMP  DTMF_DECODE0X0A_END ,
    61 03DB5 0055 C        	MOV	TEMP0,A
    62            C        	
    63 03DB6 1D19 C        	SUB	A,@CH_9
    64            C      M 	JPNC	DTMF_DECODE0X0A_LOOP	;比9大,丢掉
       03DB7 0E03     1     JBS  _STATUS , C 
       03DB8 15B0     1     JMP  DTMF_DECODE0X0A_LOOP ,
    65            C        	
    66 03DB9 041D C        	MOV	A,OFFSET_D
    67 03DBA 004C C        	MOV	_RC,A
    68 03DBB 0415 C        	MOV	A,TEMP0
    69            C        	
    70 03DBC 004D C        	MOV	_RD,A
    71            C        	
    72 03DBD 055E C        	INC	COUNT		;The length counter
    73 03DBE 055D C        	INC	OFFSET_D
    74 03DBF 15B0 C        	JMP	DTMF_DECODE0X0A_LOOP
    75 03DC0      C        DTMF_DECODE0X0A_END:
    76            C        
    77 03DC0 18C2 C        	MOV	A,@CIDNUM_FLAG
    78 03DC1 004C C        	MOV	_RC,A
    79            C      M 	MOV	_RD,COUNT	;Save NUM-length
       03DC2 041E     1     MOV A, COUNT 
       03DC3 004D     1     MOV  _RD ,A
    80            C        	
    81 03DC4 1800 C        	MOV	A,@0
    82 03DC5 13A5 C        	CALL	SET_CIDTYPE
    83            C        	
    84 03DC6 1C00 C        	RETL	@0
    85            C        ;-------------------------------------------------------------------------------		
    86 03DC7      C        DTMF_DECODE0X0B:
    87            C        
    88            C      M 	LCALL	GetCidData
                      2  M  PAGE #( GETCIDDATA ),
       03DC7 1E81     2     PAGE ( GETCIDDATA / 1024 ),
       03DC8 1263     1     CALL ( GETCIDDATA % 1024 ),
                      2  M  PAGE #( $ ),
       03DC9 1E8F     2     PAGE ( $ / 1024 ),
    89 03DCA 0055 C        	MOV	TEMP0,A
    90 03DCB 1D10 C        	SUB	A,@NUM_0
    91            C      M 	JPZ	DTMF_DECODE0X0B_Unknow	;B0(BOOC)
       03DCC 0C83     1     JBC  _STATUS , Z 
       03DCD 15D2     1     JMP  DTMF_DECODE0X0B_UNKNOW ,
    92 03DCE 0415 C        	MOV	A,TEMP0
    93 03DCF 1D11 C        	SUB	A,@NUM_1
    94            C      M 	JPZ	DTMF_DECODE0X0B_Secret	;B1(B1OC)
       03DD0 0C83     1     JBC  _STATUS , Z 
       03DD1 15D8     1     JMP  DTMF_DECODE0X0B_SECRET ,
    95 03DD2      C        DTMF_DECODE0X0B_Unknow:
    96 03DD2 18C2 C        	MOV	A,@CIDNUM_FLAG
    97 03DD3 004C C        	MOV	_RC,A
    98 03DD4 00CD C        	CLR	_RD		;NUM-length = 0(Unknow)
    99            C        	
   100 03DD5 1802 C        	MOV	A,@2
   101 03DD6 13A5 C        	CALL	SET_CIDTYPE
   102            C        	
   103 03DD7 1C02 C        	RETL	@2
   104 03DD8      C        DTMF_DECODE0X0B_Secret:
   105 03DD8 18C2 C        	MOV	A,@CIDNUM_FLAG
   106 03DD9 004C C        	MOV	_RC,A
   107 03DDA 00CD C        	CLR	_RD		;NUM-length = 0(Secret)
   108            C        	
   109 03DDB 1801 C        	MOV	A,@1
   110 03DDC 13A5 C        	CALL	SET_CIDTYPE
   111            C        	
   112 03DDD 1C01 C        	RETL	@1
   113            C        ;------------------------------------------
   114 03DDE      C        DTMF_DECODE0X0D:
   115            C        
   116            C      M 	LCALL	GetCidData
                      2  M  PAGE #( GETCIDDATA ),
       03DDE 1E81     2     PAGE ( GETCIDDATA / 1024 ),
       03DDF 1263     1     CALL ( GETCIDDATA % 1024 ),
                      2  M  PAGE #( $ ),
       03DE0 1E8F     2     PAGE ( $ / 1024 ),
   117 03DE1 0055 C        	MOV	TEMP0,A
   118            C      M 	LCALL	GetCidData
                      2  M  PAGE #( GETCIDDATA ),
       03DE2 1E81     2     PAGE ( GETCIDDATA / 1024 ),
       03DE3 1263     1     CALL ( GETCIDDATA % 1024 ),
                      2  M  PAGE #( $ ),
       03DE4 1E8F     2     PAGE ( $ / 1024 ),
   119 03DE5 1D03 C        	SUB	A,@NUM_JIN
   120            C      M 	JPNZ	DTMF_DECODE0X0A
       03DE6 0E83     1     JBS  _STATUS , Z 
       03DE7 15AD     1     JMP  DTMF_DECODE0X0A ,
   121            C        
   122 03DE8      C        DTMF_DECODE0X0DF:	;Dx#
   123 03DE8 0415 C        	MOV	A,TEMP0
   124 03DE9 1D11 C        	SUB	A,@NUM_1
   125 03DEA 15D8 C        	JMP	DTMF_DECODE0X0B_Secret	;D1#(Secret)
   126            C        	
   127 03DEB 0415 C        	MOV	A,TEMP0
   128 03DEC 1D12 C        	SUB	A,@NUM_2
   129 03DED 15EF C        	JMP	DTMF_DECODE0X0B_Intern	;D2#(international number)
   130            C        
   131 03DEE 15D2 C        	JMP	DTMF_DECODE0X0B_Unknow	;Dx#(Unknown number)
   132            C        ;---	
   133 03DEF      C        DTMF_DECODE0X0B_Intern:
   134 03DEF 18C2 C        	MOV	A,@CIDNUM_FLAG
   135 03DF0 004C C        	MOV	_RC,A
   136 03DF1 00CD C        	CLR	_RD		;NUM-length = 0(Intern)	
   137            C        
   138 03DF2 1805 C        	MOV	A,@5
   139 03DF3 13A5 C        	CALL	SET_CIDTYPE
   140            C        
   141 03DF4 1C05 C        	RETL	@5
   142            C        ;-------------------------------------------------------------------------------
   143            C        ;	将原始的CID格式数据转换成自定义的格式(format convert)
   144            C        ;	解码后的数据存放在以CIDTEL_FLAG开始的区域
   145            C        ;-------------------------------------------------------------------------------
   146 03DF5      C        FSK_DECODE:
   147            C      M 	LCALL	GetCidData
                      2  M  PAGE #( GETCIDDATA ),
       03DF5 1E81     2     PAGE ( GETCIDDATA / 1024 ),
       03DF6 1263     1     CALL ( GETCIDDATA % 1024 ),
                      2  M  PAGE #( $ ),
       03DF7 1E8F     2     PAGE ( $ / 1024 ),
   148 03DF8 0055 C        	MOV	TEMP0,A		;the CID-type
   149 03DF9 1D04 C        	SUB	A,@0X04
   150            C      M 	JPZ	FSK_DECODE0X04
       03DFA 0C83     1     JBC  _STATUS , Z 
       03DFB 1609     1     JMP  FSK_DECODE0X04 ,
   151 03DFC 0415 C        	MOV	A,TEMP0
   152 03DFD 1D06 C        	SUB	A,@0X06
   153            C      M 	JPZ	FSK_DECODE0X06
       03DFE 0C83     1     JBC  _STATUS , Z 
       03DFF 1637     1     JMP  FSK_DECODE0X06 ,
   154            C        	
   155 03E00 0415 C        	MOV	A,TEMP0
   156 03E01 1D80 C        	SUB	A,@0X80
   157            C      M 	JPZ	FSK_DECODE0X8X
       03E02 0C83     1     JBC  _STATUS , Z 
       03E03 164A     1     JMP  FSK_DECODE0X8X ,
   158 03E04 0415 C        	MOV	A,TEMP0
   159 03E05 1D82 C        	SUB	A,@0X82
   160            C      M 	JPZ	FSK_DECODE0X8X
       03E06 0C83     1     JBC  _STATUS , Z 
       03E07 164A     1     JMP  FSK_DECODE0X8X ,
   161            C        	
   162 03E08 16D0 C        	JMP	FSK_DECODE_ERROREND
   163            C        ;---------------------------------------
   164 03E09      C        FSK_DECODE0X04:
   165            C        ;---Get lenght
   166            C      M 	LCALL	GetCidData
                      2  M  PAGE #( GETCIDDATA ),
       03E09 1E81     2     PAGE ( GETCIDDATA / 1024 ),
       03E0A 1263     1     CALL ( GETCIDDATA % 1024 ),
                      2  M  PAGE #( $ ),
       03E0B 1E8F     2     PAGE ( $ / 1024 ),
   167 03E0C 0055 C        	MOV	TEMP0,A		;the length
   168            C        	
   169 03E0D 1808 C        	MOV	A,@8
   170 03E0E 0155 C        	SUB	TEMP0,A
   171            C        	
   172 03E0F 18C2 C        	MOV	A,@CIDNUM_FLAG
   173 03E10 004C C        	MOV	_RC,A
   174            C      M 	MOV	_RD,TEMP0	;NUM-length
       03E11 0415     1     MOV A, TEMP0 
       03E12 004D     1     MOV  _RD ,A
   175            C        ;---Decode time	
   176 03E13 18C1 C        	MOV	A,@CIDTIME_FLAG
   177 03E14 004C C        	MOV	_RC,A
   178            C      M 	MOV	_RD,@4		;TIME-length
       03E15 1804     1     MOV A,@( 4 )
       03E16 004D     1     MOV  _RD ,A
   179            C        
   180 03E17 1812 C        	MOV	A,@(CID_TYPE+2)
   181 03E18 005C C        	MOV	OFFSET_S,A	
   182 03E19 18C4 C        	MOV	A,@CIDTIME_START
   183 03E1A 005D C        	MOV	OFFSET_D,A
   184 03E1B 12D3 C        	CALL	TIME_DECODE
   185            C        ;---Decode TelNum
   186 03E1C 18C8 C        	MOV	A,@CIDNUM_START
   187 03E1D 005D C        	MOV	OFFSET_D,A
   188            C        ;---Note change pointer 
   189            C      M 	BLOCK	2
       03E1E 1804     1     MOV A,@((( 2 << 1 )+ VALUE_IOCA ))
       03E1F 000A     1     IOW  _IOCA ,
   190 03E20 1801 C        	MOV	A,@(CID_ZONE_START+1)
   191 03E21 004C C        	MOV	_RC,A
   192            C      M 	ADD	_RD,@8
       03E22 1808     1     MOV A,@( 8 )
       03E23 03CD     1     ADD  _RD ,A
   193 03E24      C        FSK_DECODE0X04_LOOP:
   194            C      M 	LCALL	GetCidData
                      2  M  PAGE #( GETCIDDATA ),
       03E24 1E81     2     PAGE ( GETCIDDATA / 1024 ),
       03E25 1263     1     CALL ( GETCIDDATA % 1024 ),
                      2  M  PAGE #( $ ),
       03E26 1E8F     2     PAGE ( $ / 1024 ),
   195            C      M 	JPNC	FSK_DECODE0X04_OVER
       03E27 0E03     1     JBS  _STATUS , C 
       03E28 1636     1     JMP  FSK_DECODE0X04_OVER ,
   196            C      M 	LCALL	CIDNUM_VERIFY	;检查并转化成机内码
                      2  M  PAGE #( CIDNUM_VERIFY ),
       03E29 1E8F     2     PAGE ( CIDNUM_VERIFY / 1024 ),
       03E2A 12EF     1     CALL ( CIDNUM_VERIFY % 1024 ),
                      2  M  PAGE #( $ ),
       03E2B 1E8F     2     PAGE ( $ / 1024 ),
   197 03E2C 0055 C        	MOV	TEMP0,A
   198            C        	
   199 03E2D 041D C        	MOV	A,OFFSET_D
   200 03E2E 004C C        	MOV	_RC,A
   201 03E2F 0415 C        	MOV	A,TEMP0
   202 03E30 004D C        	MOV	_RD,A
   203            C        	
   204 03E31 055D C        	INC	OFFSET_D
   205 03E32 1624 C        	JMP	FSK_DECODE0X04_LOOP
   206            C        ;---the length of name(no name)
   207 03E33 18E8 C        	MOV	A,@CIDNAME_START
   208 03E34 004C C        	MOV	_RC,A
   209 03E35 00CD C        	CLR	_RD
   210 03E36      C        FSK_DECODE0X04_OVER:
   211 03E36 16C7 C        	JMP	FSK_DECODE0X04_END
   212            C        ;---------------------------------------
   213 03E37      C        FSK_DECODE0X06:		;Message waiting(06-03-42-42-42-31/06-03-6F-6F-6F-AA)
   214            C      M 	LCALL	GetCidData
                      2  M  PAGE #( GETCIDDATA ),
       03E37 1E81     2     PAGE ( GETCIDDATA / 1024 ),
       03E38 1263     1     CALL ( GETCIDDATA % 1024 ),
                      2  M  PAGE #( $ ),
       03E39 1E8F     2     PAGE ( $ / 1024 ),
   215 03E3A 1B03 C        	XOR	A,@0X03
   216            C      M 	JPNZ	FSK_DECODE_ERROREND
       03E3B 0E83     1     JBS  _STATUS , Z 
       03E3C 16D0     1     JMP  FSK_DECODE_ERROREND ,
   217            C      M 	LCALL	GetCidData
                      2  M  PAGE #( GETCIDDATA ),
       03E3D 1E81     2     PAGE ( GETCIDDATA / 1024 ),
       03E3E 1263     1     CALL ( GETCIDDATA % 1024 ),
                      2  M  PAGE #( $ ),
       03E3F 1E8F     2     PAGE ( $ / 1024 ),
   218 03E40 0055 C        	MOV	TEMP0,A
   219 03E41 1B42 C        	XOR	A,@0X42
   220            C      M 	JPNZ	FSK_DECODE0X06_OFF
       03E42 0E83     1     JBS  _STATUS , Z 
       03E43 1645     1     JMP  FSK_DECODE0X06_OFF ,
   221            C        	;LCALL	GetCidData
   222            C        	;XOR	A,@0X42
   223            C        	;JPNZ	FSK_DECODE0X06_OFF
   224            C        	;LCALL	GetCidData
   225            C        	;XOR	A,@0X42
   226            C        	;JPNZ	FSK_DECODE0X06_OFF
   227            C        	;LCALL	GetCidData
   228            C        	;XOR	A,@0X31
   229            C        	;JPNZ	FSK_DECODE0X06_OFF
   230            C        ;Message waiting(06-03-42----42-42-31)				
   231 03E44 16CA C        	JMP	FSK_DECODE_0X82ON	;VisualIndicator:Activate
   232 03E45      C        FSK_DECODE0X06_OFF:
   233 03E45 0415 C        	MOV	A,TEMP0
   234 03E46 1B6F C        	XOR	A,@0X6F
   235            C      M 	JPNZ	FSK_DECODE_ERROREND
       03E47 0E83     1     JBS  _STATUS , Z 
       03E48 16D0     1     JMP  FSK_DECODE_ERROREND ,
   236            C        ;(06-03-6F----6F-6F-AA)	
   237 03E49 16CD C        	JMP	FSK_DECODE_0X82OFF	;VisualIndicator:Deactivate
   238            C        
   239            C        ;---------------------------------------
   240 03E4A      C        FSK_DECODE0X82:		;Message waiting(82-03-0B-01-FF-70/82-03-0B-01-00-6F)
   241 03E4A      C        FSK_DECODE0X80:	
   242 03E4A      C        FSK_DECODE0X8X:
   243 03E4A 1307 C        	CALL	GET_OFFSET
   244 03E4B      C        FSK_DECODE0X8X_DETIME:	;-------------------------------------------------------
   245            C        ;---Time
   246 03E4B 18C1 C        	MOV	A,@CIDTIME_FLAG		;Set length of time
   247 03E4C 004C C        	MOV	_RC,A
   248 03E4D 1804 C        	MOV	A,@4
   249 03E4E 004D C        	MOV	_RD,A
   250            C        ;---
   251            C      M 	MOV	_RC,@TIMETYPE
       03E4F 1802     1     MOV A,@( TIMETYPE )
       03E50 004C     1     MOV  _RC ,A
   252 03E51 040D C        	MOV	A,_RD
   253            C      M 	JPZ	FSK_DECODE0X8X_NOTIME	;Time exist?
       03E52 0C83     1     JBC  _STATUS , Z 
       03E53 1669     1     JMP  FSK_DECODE0X8X_NOTIME ,
   254 03E54 1F02 C        	ADD	A,@2
   255 03E55 005C C        	MOV	OFFSET_S,A
   256            C      M 	MOV	OFFSET_D,@CIDTIME_START
       03E56 18C4     1     MOV A,@( CIDTIME_START )
       03E57 005D     1     MOV  OFFSET_D ,A
   257 03E58 12D3 C        	CALL	TIME_DECODE
   258            C        ;---Update the RTC
   259            C      M 	BANK	0
       03E59 0984     1     BC  _RSR , 6 
       03E5A 09C4     1     BC  _RSR , 7 
   260            C      M 	MOV	_RC,@CIDTIME_START
       03E5B 18C4     1     MOV A,@( CIDTIME_START )
       03E5C 004C     1     MOV  _RC ,A
   261 03E5D 040D C        	MOV	A,_RD
   262 03E5E 0076 C        	MOV	B0_MON_REG,A	;month
   263 03E5F 054C C        	INC	_RC
   264            C        	
   265 03E60 040D C        	MOV	A,_RD
   266 03E61 0075 C        	MOV	B0_DAY_REG,A	;day
   267 03E62 054C C        	INC	_RC
   268            C        
   269 03E63 040D C        	MOV	A,_RD
   270 03E64 0074 C        	MOV	B0_HOUR_REG,A	;hour
   271 03E65 054C C        	INC	_RC
   272            C        
   273 03E66 040D C        	MOV	A,_RD
   274 03E67 0073 C        	MOV	B0_MIN_REG,A	;minute
   275 03E68 1678 C        	JMP	FSK_DECODE0X8X_DENUM
   276 03E69      C        FSK_DECODE0X8X_NOTIME:
   277            C      M 	BANK	0
       03E69 0984     1     BC  _RSR , 6 
       03E6A 09C4     1     BC  _RSR , 7 
   278            C        	
   279            C      M 	MOV	_RC,@CIDTIME_START
       03E6B 18C4     1     MOV A,@( CIDTIME_START )
       03E6C 004C     1     MOV  _RC ,A
   280            C        
   281 03E6D 0436 C        	MOV	A,B0_MON_REG	;month
   282 03E6E 004D C        	MOV	_RD,A
   283 03E6F 054C C        	INC	_RC
   284            C        	
   285 03E70 0435 C        	MOV	A,B0_DAY_REG	;day
   286 03E71 004D C        	MOV	_RD,A
   287 03E72 054C C        	INC	_RC
   288            C        
   289 03E73 0434 C        	MOV	A,B0_HOUR_REG	;hour
   290 03E74 004D C        	MOV	_RD,A
   291 03E75 054C C        	INC	_RC
   292            C        	
   293 03E76 0433 C        	MOV	A,B0_MIN_REG	;minute
   294 03E77 004D C        	MOV	_RD,A
   295 03E78      C        FSK_DECODE0X8X_DENUM:	;-------------------------------------------------------
   296            C        ;---Num
   297            C      M 	MOV	_RC,@CIDNUM_FLAG
       03E78 18C2     1     MOV A,@( CIDNUM_FLAG )
       03E79 004C     1     MOV  _RC ,A
   298 03E7A 00CD C        	CLR	_RD			;Clean length of num first
   299            C        
   300            C      M 	MOV	_RC,@NUMTYPE
       03E7B 1804     1     MOV A,@( NUMTYPE )
       03E7C 004C     1     MOV  _RC ,A
   301 03E7D 040D C        	MOV	A,_RD
   302            C      M 	JPZ	FSK_DECODE0X8X_DENAME	;Number exist?
       03E7E 0C83     1     JBC  _STATUS , Z 
       03E7F 169D     1     JMP  FSK_DECODE0X8X_DENAME ,
   303 03E80 1F01 C        	ADD	A,@1
   304 03E81 004C C        	MOV	_RC,A
   305 03E82 040D C        	MOV	A,_RD
   306 03E83 005E C        	MOV	COUNT,A			;the count
   307            C        	
   308 03E84 050C C        	INCA	_RC
   309 03E85 005C C        	MOV	OFFSET_S,A		;source address
   310            C      M 	MOV	OFFSET_D,@CIDNUM_START	;destin address
       03E86 18C8     1     MOV A,@( CIDNUM_START )
       03E87 005D     1     MOV  OFFSET_D ,A
   311            C        
   312 03E88 18C2 C        	MOV	A,@CIDNUM_FLAG		;Set length of num
   313 03E89 004C C        	MOV	_RC,A
   314 03E8A 041E C        	MOV	A,COUNT
   315 03E8B 004D C        	MOV	_RD,A
   316 03E8C      C        FSK_DECODE0X8X_NUMLOOP:
   317 03E8C 041C C        	MOV	A,OFFSET_S
   318 03E8D 004C C        	MOV	_RC,A
   319 03E8E 040D C        	MOV	A,_RD
   320            C      M 	LCALL	CIDNUM_VERIFY	;检查并转化成机内码
                      2  M  PAGE #( CIDNUM_VERIFY ),
       03E8F 1E8F     2     PAGE ( CIDNUM_VERIFY / 1024 ),
       03E90 12EF     1     CALL ( CIDNUM_VERIFY % 1024 ),
                      2  M  PAGE #( $ ),
       03E91 1E8F     2     PAGE ( $ / 1024 ),
   321 03E92 0055 C        	MOV	TEMP0,A
   322            C        	
   323 03E93 041D C        	MOV	A,OFFSET_D
   324 03E94 004C C        	MOV	_RC,A
   325 03E95 0415 C        	MOV	A,TEMP0
   326 03E96 004D C        	MOV	_RD,A
   327            C        	
   328 03E97 055C C        	INC	OFFSET_S
   329 03E98 055D C        	INC	OFFSET_D
   330            C        	
   331 03E99 01DE C        	DEC	COUNT
   332 03E9A 041E C        	MOV	A,COUNT
   333            C      M 	JPNZ	FSK_DECODE0X8X_NUMLOOP
       03E9B 0E83     1     JBS  _STATUS , Z 
       03E9C 168C     1     JMP  FSK_DECODE0X8X_NUMLOOP ,
   334 03E9D      C        FSK_DECODE0X8X_DENAME:	;-------------------------------------------------------
   335            C        ;---Name
   336            C      M 	MOV	_RC,@CIDNAME_FLAG
       03E9D 18C3     1     MOV A,@( CIDNAME_FLAG )
       03E9E 004C     1     MOV  _RC ,A
   337 03E9F 00CD C        	CLR	_RD			;Clean length of name first
   338            C        ;---
   339            C      M 	MOV	_RC,@NAMETYPE
       03EA0 1806     1     MOV A,@( NAMETYPE )
       03EA1 004C     1     MOV  _RC ,A
   340 03EA2 040D C        	MOV	A,_RD
   341            C      M 	JPZ	FSK_DECODE0X8X_END	;Name exist?
       03EA3 0C83     1     JBC  _STATUS , Z 
       03EA4 16C7     1     JMP  FSK_DECODE0X8X_END ,
   342 03EA5 1F01 C        	ADD	A,@1
   343 03EA6 004C C        	MOV	_RC,A
   344 03EA7 040D C        	MOV	A,_RD
   345 03EA8 005E C        	MOV	COUNT,A
   346 03EA9 1D0F C        	SUB	A,@15
   347            C      M 	JPC	FSK_DECODE0X8X_DENAME_LENCHK
       03EAA 0C03     1     JBC  _STATUS , C 
       03EAB 16AE     1     JMP  FSK_DECODE0X8X_DENAME_LENCHK ,
   348            C        	
   349            C      M 	MOV	COUNT,@15	;长度大于15,取15位
       03EAC 180F     1     MOV A,@( 15 )
       03EAD 005E     1     MOV  COUNT ,A
   350 03EAE      C        FSK_DECODE0X8X_DENAME_LENCHK:	
   351            C        	
   352 03EAE 050C C        	INCA	_RC
   353 03EAF 005C C        	MOV	OFFSET_S,A
   354            C      M 	MOV	OFFSET_D,@CIDNAME_START
       03EB0 18E8     1     MOV A,@( CIDNAME_START )
       03EB1 005D     1     MOV  OFFSET_D ,A
   355            C        	
   356 03EB2 18C3 C        	MOV	A,@CIDNAME_FLAG		;Set length of name
   357 03EB3 004C C        	MOV	_RC,A
   358 03EB4 041E C        	MOV	A,COUNT
   359 03EB5 004D C        	MOV	_RD,A
   360 03EB6      C        FSK_DECODE0X8X_NAMELOOP:
   361 03EB6 041C C        	MOV	A,OFFSET_S
   362 03EB7 004C C        	MOV	_RC,A
   363 03EB8 040D C        	MOV	A,_RD
   364            C      M 	LCALL	CIDCHAR_VERIFY	;检查并转化成机内码
                      2  M  PAGE #( CIDCHAR_VERIFY ),
       03EB9 1E8F     2     PAGE ( CIDCHAR_VERIFY / 1024 ),
       03EBA 12FD     1     CALL ( CIDCHAR_VERIFY % 1024 ),
                      2  M  PAGE #( $ ),
       03EBB 1E8F     2     PAGE ( $ / 1024 ),
   365 03EBC 0055 C        	MOV	TEMP0,A
   366            C        	
   367 03EBD 041D C        	MOV	A,OFFSET_D
   368 03EBE 004C C        	MOV	_RC,A
   369 03EBF 0415 C        	MOV	A,TEMP0
   370 03EC0 004D C        	MOV	_RD,A
   371            C        	
   372 03EC1 055C C        	INC	OFFSET_S
   373 03EC2 055D C        	INC	OFFSET_D
   374            C        	
   375 03EC3 01DE C        	DEC	COUNT
   376            C        	
   377 03EC4 041E C        	MOV	A,COUNT
   378            C      M 	JPNZ	FSK_DECODE0X8X_NAMELOOP
       03EC5 0E83     1     JBS  _STATUS , Z 
       03EC6 16B6     1     JMP  FSK_DECODE0X8X_NAMELOOP ,
   379 03EC7      C        FSK_DECODE0X8X_END:	;-------------------------------------------------------
   380 03EC7      C        FSK_DECODE0X04_END:
   381            C        	
   382 03EC7 1800 C        	MOV	A,@0
   383 03EC8 13A5 C        	CALL	SET_CIDTYPE
   384            C        
   385 03EC9 1C00 C        	RETL	@0	;Normal CID
   386            C        ;------	
   387 03ECA      C        FSK_DECODE_0X82ON:	;0x06/0x82
   388 03ECA 1803 C        	MOV	A,@3
   389 03ECB 13A5 C        	CALL	SET_CIDTYPE
   390            C        	
   391 03ECC 1C03 C        	RETL	@3
   392            C        ;------
   393 03ECD      C        FSK_DECODE_0X82OFF:	;0x06/0x82
   394 03ECD 1804 C        	MOV	A,@4
   395 03ECE 13A5 C        	CALL	SET_CIDTYPE
   396            C        	
   397 03ECF 1C04 C        	RETL	@4
   398            C        ;------
   399 03ED0      C        FSK_DECODE_ERROREND:	;error
   400 03ED0 1802 C        	MOV	A,@2
   401 03ED1 13A5 C        	CALL	SET_CIDTYPE
   402            C        	
   403 03ED2 1C02 C        	RETL	@2
   404            C        
   405            C        ;-------------------------------------------------------------------------------
   406            C        ;	TIME_DECODE
   407            C        ;	input : OFFSET_S = the source offset
   408            C        ;		OFFSET_D = the destination offset
   409            C        ;-------------------------------------------------------------------------------
   410 03ED3      C        TIME_DECODE:
   411            C        
   412 03ED3 00DE C        	CLR	COUNT
   413 03ED4      C        TIME_DECODE_LOOP:
   414            C      M 	CLRC
       03ED4 0803     1     BC  _STATUS , C 
   415 03ED5 069E C        	RLCA	COUNT
   416 03ED6 039C C        	ADD	A,OFFSET_S
   417 03ED7 004C C        	MOV	_RC,A
   418 03ED8 040D C        	MOV	A,_RD
   419 03ED9 1A0F C        	AND	A,@0X0F
   420 03EDA 0055 C        	MOV	TEMP0,A
   421 03EDB 0755 C        	SWAP	TEMP0
   422 03EDC 054C C        	INC	_RC
   423            C        
   424 03EDD 040D C        	MOV	A,_RD
   425 03EDE 1A0F C        	AND	A,@0X0F
   426 03EDF 0215 C        	OR	A,TEMP0
   427            C      M 	LCALL	DGT_HEX
                      2  M  PAGE #( DGT_HEX ),
       03EE0 1E82     2     PAGE ( DGT_HEX / 1024 ),
       03EE1 1000     1     CALL ( DGT_HEX % 1024 ),
                      2  M  PAGE #( $ ),
       03EE2 1E8F     2     PAGE ( $ / 1024 ),
   428 03EE3 0055 C        	MOV	TEMP0,A
   429            C        ;---	
   430 03EE4 041E C        	MOV	A,COUNT
   431 03EE5 039D C        	ADD	A,OFFSET_D
   432 03EE6 004C C        	MOV	_RC,A
   433 03EE7 0415 C        	MOV	A,TEMP0
   434 03EE8 004D C        	MOV	_RD,A
   435            C        	
   436 03EE9 055E C        	INC	COUNT
   437 03EEA 041E C        	MOV	A,COUNT
   438 03EEB 1D04 C        	SUB	A,@4
   439            C      M 	JPNZ	TIME_DECODE_LOOP	;loop 4 times
       03EEC 0E83     1     JBS  _STATUS , Z 
       03EED 16D4     1     JMP  TIME_DECODE_LOOP ,
   440            C        
   441 03EEE 0012 C        	RET
   442            C        ;-------------------------------------------------------------------------------
   443            C        ;	对ASCII数字(0x30..0X0x39)进行合法性检查并转化成机内码,超出范围的视同空数字
   444            C        ;-------------------------------------------------------------------------------
   445 03EEF      C        CIDNUM_VERIFY:
   446 03EEF 1A7F C        	AND	A,@0X7F
   447 03EF0 0055 C        	MOV	TEMP0,A
   448            C        	
   449            C        	;MOV	A,TEMP0	
   450 03EF1 1D2F C        	SUB	A,@(0X30-1)
   451            C      M 	JPC	CIDNUM_VERIFY_NO
       03EF2 0C03     1     JBC  _STATUS , C 
       03EF3 16FB     1     JMP  CIDNUM_VERIFY_NO ,
   452 03EF4 0415 C        	MOV	A,TEMP0
   453 03EF5 1D39 C        	SUB	A,@0X39
   454            C      M 	JPNC	CIDNUM_VERIFY_NO
       03EF6 0E03     1     JBS  _STATUS , C 
       03EF7 16FB     1     JMP  CIDNUM_VERIFY_NO ,
   455            C        ;---0X30..0X39	
   456 03EF8 1820 C        	MOV	A,@CASCDelta		;转换成机内码
   457 03EF9 0115 C        	SUB	A,TEMP0
   458            C        	
   459 03EFA 0012 C        	RET
   460 03EFB      C        CIDNUM_VERIFY_NO:
   461 03EFB 1800 C        	MOV	A,@NUM_BLANK
   462 03EFC 0012 C        	RET
   463            C        ;-------------------------------------------------------------------------------
   464            C        ;	对ASCII字符进行合法性检查并转化成机内码,超出范围(0x20..0X0x7f)的视同空字符
   465            C        ;-------------------------------------------------------------------------------
   466 03EFD      C        CIDCHAR_VERIFY:
   467 03EFD 1A7F C        	AND	A,@0X7F
   468 03EFE 0055 C        	MOV	TEMP0,A
   469            C        
   470            C        	;MOV	A,TEMP0	
   471 03EFF 1D20 C        	SUB	A,@0X20	;(0X20-空格)
   472            C      M 	JPC	CIDCHAR_VERIFY_NO
       03F00 0C03     1     JBC  _STATUS , C 
       03F01 1705     1     JMP  CIDCHAR_VERIFY_NO ,
   473            C        
   474 03F02 1820 C        	MOV	A,@CASCDelta		;转换成机内码
   475 03F03 0115 C        	SUB	A,TEMP0
   476            C        	
   477            C        	
   478 03F04 0012 C        	RET
   479 03F05      C        CIDCHAR_VERIFY_NO:
   480 03F05 1800 C        	MOV	A,@NUM_BLANK
   481            C        	
   482 03F06 0012 C        	RET
   483            C        ;-------------------------------------------------------------------------------
   484            C        
   485            C        ;-------------------------------------------------------------------------------
   486            C        ;	GET_OFFSET
   487            C        ;	input : 
   488            C        ;		1-Time/2-3-4-Num/7-8-Name
   489            C        ;		OFFSET_S = the first source offset
   490            C        ;		OFFSET_D = the first destin offset
   491            C        ;	for 
   492            C        ;-------------------------------------------------------------------------------
   493 03F07      C        GET_OFFSET:
   494            C        ;---Clean first
   495            C      M 	MOV	_RC,@TIMETYPE
       03F07 1802     1     MOV A,@( TIMETYPE )
       03F08 004C     1     MOV  _RC ,A
   496 03F09 00CD C        	CLR	_RD
   497            C      M 	MOV	_RC,@NUMTYPE
       03F0A 1804     1     MOV A,@( NUMTYPE )
       03F0B 004C     1     MOV  _RC ,A
   498 03F0C 00CD C        	CLR	_RD
   499            C      M 	MOV	_RC,@NAMETYPE
       03F0D 1806     1     MOV A,@( NAMETYPE )
       03F0E 004C     1     MOV  _RC ,A
   500 03F0F 00CD C        	CLR	_RD
   501            C        ;---	
   502 03F10 1812 C        	MOV	A,@(CID_TYPE+2)
   503 03F11 005C C        	MOV	OFFSET_S,A
   504 03F12      C        GET_OFFSET_LOOP:
   505            C      M 	MOV	_RC,@CID_LEN
       03F12 1811     1     MOV A,@( CID_LEN )
       03F13 004C     1     MOV  _RC ,A
   506 03F14 040D C        	MOV	A,_RD		;length
   507 03F15 1F10 C        	ADD	A,@CID_TYPE	;起始offset
   508 03F16 011C C        	SUB	A,OFFSET_S
   509            C      M 	JPC	GET_OFFSET_END
       03F17 0C03     1     JBC  _STATUS , C 
       03F18 1745     1     JMP  GET_OFFSET_END ,
   510            C        
   511            C      M 	MOV	_RC,OFFSET_S
       03F19 041C     1     MOV A, OFFSET_S 
       03F1A 004C     1     MOV  _RC ,A
   512 03F1B 040D C        	MOV	A,_RD
   513 03F1C 1A0F C        	AND	A,@0X0F
   514            C      M 	MTBL
       03F1D 0020     1     TBL 
             3F1D     1     X_TBL  VAR  $ 
             0000     1     Y_TBL  VAR  0 
   515 03F1E 1745 C        	JMP	GET_OFFSET_END	;0 - Error
   516 03F1F 172E C        	JMP	GET_OFFSET_1	;1 - Time
   517 03F20 1734 C        	JMP	GET_OFFSET_2	;2 - Num
   518 03F21 1734 C        	JMP	GET_OFFSET_3	;3 - Num
   519 03F22 1734 C        	JMP	GET_OFFSET_4	;4 - Num
   520 03F23 1745 C        	JMP	GET_OFFSET_END	;5 - Error
   521 03F24 1745 C        	JMP	GET_OFFSET_END	;6 - Error
   522 03F25 173A C        	JMP	GET_OFFSET_7	;7 - Name
   523 03F26 173A C        	JMP	GET_OFFSET_8	;8 - Name
   524 03F27 1745 C        	JMP	GET_OFFSET_END	;9 - Error
   525 03F28 1745 C        	JMP	GET_OFFSET_END	;A - Error
   526 03F29 1740 C        	JMP	GET_OFFSET_NEXT	;B - MessageWaiting
   527 03F2A 1745 C        	JMP	GET_OFFSET_END	;C - Error
   528 03F2B 1745 C        	JMP	GET_OFFSET_END	;D - Error
   529 03F2C 1745 C        	JMP	GET_OFFSET_END	;E - Error
   530 03F2D 1745 C        	JMP	GET_OFFSET_END	;F - Error
   531            C      M 	ENDT
             0001     1     Y_TBL  VAR  1 
   532            C        
   533 03F2E      C        GET_OFFSET_1:
   534            C      M 	MOV	_RC,@TIMETYPE
       03F2E 1802     1     MOV A,@( TIMETYPE )
       03F2F 004C     1     MOV  _RC ,A
   535 03F30 041C C        	MOV	A,OFFSET_S
   536 03F31 004D C        	MOV	_RD,A
   537            C        
   538 03F32 004C C        	MOV	_RC,A
   539 03F33 1740 C        	JMP	GET_OFFSET_NEXT
   540 03F34      C        GET_OFFSET_2:
   541 03F34      C        GET_OFFSET_3:
   542 03F34      C        GET_OFFSET_4:
   543            C      M 	MOV	_RC,@NUMTYPE
       03F34 1804     1     MOV A,@( NUMTYPE )
       03F35 004C     1     MOV  _RC ,A
   544 03F36 041C C        	MOV	A,OFFSET_S
   545 03F37 004D C        	MOV	_RD,A
   546            C        
   547 03F38 004C C        	MOV	_RC,A
   548 03F39 1740 C        	JMP	GET_OFFSET_NEXT
   549 03F3A      C        GET_OFFSET_7:
   550 03F3A      C        GET_OFFSET_8:
   551            C      M 	MOV	_RC,@NAMETYPE
       03F3A 1806     1     MOV A,@( NAMETYPE )
       03F3B 004C     1     MOV  _RC ,A
   552 03F3C 041C C        	MOV	A,OFFSET_S
   553 03F3D 004D C        	MOV	_RD,A
   554            C        
   555 03F3E 004C C        	MOV	_RC,A
   556 03F3F 1740 C        	JMP	GET_OFFSET_NEXT
   557 03F40      C        GET_OFFSET_NEXT:
   558 03F40 054C C        	INC	_RC
   559 03F41 040D C        	MOV	A,_RD			;the length of the type
   560 03F42 1F02 C        	ADD	A,@2
   561 03F43 03DC C        	ADD	OFFSET_S,A
   562 03F44 1712 C        	JMP	GET_OFFSET_LOOP	
   563 03F45      C        GET_OFFSET_END:	
   564            C        	
   565 03F45 0012 C        	RET
   566            C        
   567            C        ;###############################################################################
   568            C        ;       Function : COMP_ONETELNUM
   569            C        ;将放在地址(OFFSET_S/OFFSET_D)处的数据进行比较
   570            C        ;
   571            C        ;	input  : OFFSET_S = 参与比较号码所在起始偏移地址(CID)
   572            C        ;		 OFFSET_D = 参与比较号码所在起始偏移地址(PBOOK)
   573            C        ;	OUTPUT : ACCH = 0/1 ---不相等/相等
   574            C        ;
   575            C        ;	variable : TEMP0,TEMP1,TEMP2
   576            C        ;###############################################################################
   577 03F46      C        COMP_ONETELNUM:
   578            C        ;---Get length(CID)
   579 03F46 041C C        	MOV	A,OFFSET_S
   580 03F47 1F02 C        	ADD	A,@NUM_FGOFFSET
   581 03F48 004C C        	MOV	_RC,A
   582 03F49 040D C        	MOV	A,_RD
   583            C      M 	JPZ	COMP_ONETELNUM_ENDNO	;the length <> 0
       03F4A 0C83     1     JBC  _STATUS , Z 
       03F4B 176B     1     JMP  COMP_ONETELNUM_ENDNO ,
   584 03F4C 005E C        	MOV	COUNT,A
   585            C        
   586            C        ;---Get length(BOOK)	
   587 03F4D 041D C        	MOV	A,OFFSET_D
   588 03F4E 1F02 C        	ADD	A,@NUM_FGOFFSET
   589 03F4F 004C C        	MOV	_RC,A
   590 03F50 040D C        	MOV	A,_RD
   591            C      M 	JPZ	COMP_ONETELNUM_ENDNO	;the length <> 0
       03F51 0C83     1     JBC  _STATUS , Z 
       03F52 176B     1     JMP  COMP_ONETELNUM_ENDNO ,
   592 03F53 011E C        	SUB	A,COUNT
   593            C      M 	JPNZ	COMP_ONETELNUM_ENDNO
       03F54 0E83     1     JBS  _STATUS , Z 
       03F55 176B     1     JMP  COMP_ONETELNUM_ENDNO ,
   594            C        ;---the length is equal	
   595 03F56      C        COMP_ONETELNUM_0:
   596            C        ;-
   597 03F56 1808 C        	MOV	A,@NUM_OFFSET
   598 03F57 03DC C        	ADD	OFFSET_S,A
   599 03F58 1808 C        	MOV	A,@NUM_OFFSET
   600 03F59 03DD C        	ADD	OFFSET_D,A
   601 03F5A      C        COMP_ONETELNUM_LOOP:
   602 03F5A 041C C        	MOV	A,OFFSET_S
   603 03F5B 004C C        	MOV	_RC,A
   604 03F5C 040D C        	MOV	A,_RD
   605 03F5D 0055 C        	MOV	TEMP0,A
   606            C        	
   607 03F5E 041D C        	MOV	A,OFFSET_D
   608 03F5F 004C C        	MOV	_RC,A
   609 03F60 040D C        	MOV	A,_RD
   610 03F61 0115 C        	SUB	A,TEMP0
   611            C      M 	JPNZ	COMP_ONETELNUM_ENDNO	;有一个不相等,退出
       03F62 0E83     1     JBS  _STATUS , Z 
       03F63 176B     1     JMP  COMP_ONETELNUM_ENDNO ,
   612            C        
   613 03F64 055D C        	INC	OFFSET_D
   614 03F65 055C C        	INC	OFFSET_S
   615 03F66 01DE C        	DEC	COUNT
   616            C        
   617 03F67 041E C        	MOV	A,COUNT
   618            C      M 	JPNZ	COMP_ONETELNUM_LOOP	
       03F68 0E83     1     JBS  _STATUS , Z 
       03F69 175A     1     JMP  COMP_ONETELNUM_LOOP ,
   619            C        
   620 03F6A      C        COMP_ONETELNUM_ENDYES:		;比较完毕,没找到不相等的数据
   621            C        	
   622 03F6A 1C01 C        	RETL	1
   623            C        	
   624 03F6B      C        COMP_ONETELNUM_ENDNO:
   625            C        
   626 03F6B 1C00 C        	RETL	0
   627            C        
   628            C        ;############################################################################
   629            C        ;       Function : COMP_ALLTELNUM
   630            C        ;
   631            C        ;Read the pbook from current group and compare it with CID.Return the TEL_ID/0
   632            C        ;
   633            C        ;	input  : ADDR_S = 参与比较号码的所在地址的基地址
   634            C        ;	OUTPUT : ACCH = 0/!0 --没找到/找到的号码的序号
   635            C        ;
   636            C        ;!!!----Note : Num
   637            C        ;
   638            C        ;	variable:
   639            C        ;############################################################################
   640 03F6C      C        COMP_ALLTELNUM:
   641 03F6C 1811 C        	MOV	A,@GROUP_BOOK
   642            C      M 	PAGE	#(SET_GROUP)
       03F6D 1E83     1     PAGE ( SET_GROUP / 1024 ),
   643 03F6E 1241 C        	CALL	SET_GROUP
   644            C      M 	PAGE	#(GET_TELT)
       03F6F 1E83     1     PAGE ( GET_TELT / 1024 ),
   645 03F70 1246 C        	CALL	GET_TELT
   646            C      M 	PAGE	#($)
       03F71 1E8F     1     PAGE ( $ / 1024 ),
   647            C        
   648 03F72 0415 C        	MOV	A,TEMP0
   649 03F73 006E C        	MOV	B1_CID_T,A
   650 03F74 00F2 C        	CLR	B1_MSG_ID
   651            C        
   652 03F75 18B0 C        	MOV	A,@M123_BUF_START
   653 03F76 005D C        	MOV	OFFSET_D,A	
   654 03F77 1860 C        	MOV	A,@TEL_FLAG
   655 03F78 005C C        	MOV	OFFSET_S,A
   656            C        	
   657 03F79 004C C        	MOV	_RC,A
   658 03F7A 040D C        	MOV	A,_RD
   659            C      M 	JPNZ	COMP_ALLTELNUM_END	;TEL-flag normal CID ?
       03F7B 0E83     1     JBS  _STATUS , Z 
       03F7C 17A3     1     JMP  COMP_ALLTELNUM_END ,
   660 03F7D 1862 C        	MOV	A,@NUM_FLAG	
   661 03F7E 004C C        	MOV	_RC,A
   662 03F7F 040D C        	MOV	A,_RD
   663            C      M 	JPZ	COMP_ALLTELNUM_END	;NUM-flag length ?
       03F80 0C83     1     JBC  _STATUS , Z 
       03F81 17A3     1     JMP  COMP_ALLTELNUM_END ,
   664            C        	
   665 03F82 042E C        	MOV	A,B1_CID_T
   666 03F83 0072 C        	MOV	B1_MSG_ID,A
   667 03F84      C        COMP_ALLTELNUM_LOOP:		;先比较号码长度
   668 03F84 0432 C        	MOV	A,B1_MSG_ID
   669            C      M 	JPZ	COMP_ALLTELNUM_END	;find fail
       03F85 0C83     1     JBC  _STATUS , Z 
       03F86 17A3     1     JMP  COMP_ALLTELNUM_END ,
   670            C      M 	LCALL	DAT_READ
                      2  M  PAGE #( DAT_READ ),
       03F87 1E83     2     PAGE ( DAT_READ / 1024 ),
       03F88 1257     1     CALL ( DAT_READ % 1024 ),
                      2  M  PAGE #( $ ),
       03F89 1E8F     2     PAGE ( $ / 1024 ),
   671            C        	
   672            C      M 	MOV	_RC,OFFSET_D	;the address will be store
       03F8A 041D     1     MOV A, OFFSET_D 
       03F8B 004C     1     MOV  _RC ,A
   673            C      M 	MOV	_RD,TEMP0	;the data
       03F8C 0415     1     MOV A, TEMP0 
       03F8D 004D     1     MOV  _RD ,A
   674 03F8E 055D C        	INC	OFFSET_D
   675            C        
   676 03F8F 0416 C        	MOV	A,TEMP1		;Error code
   677            C      M 	JPZ	COMP_ALLTELNUM_LOOP
       03F90 0C83     1     JBC  _STATUS , Z 
       03F91 1784     1     JMP  COMP_ALLTELNUM_LOOP ,
   678            C      M 	LCALL	DAT_READ_STOP
                      2  M  PAGE #( DAT_READ_STOP ),
       03F92 1E83     2     PAGE ( DAT_READ_STOP / 1024 ),
       03F93 125B     1     CALL ( DAT_READ_STOP % 1024 ),
                      2  M  PAGE #( $ ),
       03F94 1E8F     2     PAGE ( $ / 1024 ),
   679            C        ;---Read ok,then compare
   680 03F95 1860 C        	MOV	A,@TEL_FLAG
   681 03F96 005C C        	MOV	OFFSET_S,A
   682 03F97 18B0 C        	MOV	A,@M123_BUF_START
   683 03F98 005D C        	MOV	OFFSET_D,A
   684            C        ;---Do compare
   685 03F99 1346 C        	CALL	COMP_ONETELNUM
   686 03F9A 1900 C        	OR	A,@0
   687            C      M 	JPNZ	COMP_ALLTELNUM_END
       03F9B 0E83     1     JBS  _STATUS , Z 
       03F9C 17A3     1     JMP  COMP_ALLTELNUM_END ,
   688            C        ;---Compared end but not equal,then next one
   689 03F9D 1860 C        	MOV	A,@TEL_FLAG
   690 03F9E 005C C        	MOV	OFFSET_S,A
   691 03F9F 18B0 C        	MOV	A,@M123_BUF_START
   692 03FA0 005D C        	MOV	OFFSET_D,A
   693            C        
   694 03FA1 01F2 C        	DEC	B1_MSG_ID
   695 03FA2 1784 C        	JMP	COMP_ALLTELNUM_LOOP	;号码内容不相等(查下一条)
   696            C        
   697 03FA3      C        COMP_ALLTELNUM_END:
   698 03FA3 0432 C        	MOV	A,B1_MSG_ID
   699            C        
   700 03FA4 0012 C        	RET
   701            C        ;############################################################################
   702            C        ;       Function : SET_CIDTYPE
   703            C        ;
   704            C        ;	input : acc
   705            C        ;	output:	no
   706            C        ;
   707            C        ;############################################################################
   708 03FA5      C        SET_CIDTYPE:
   709 03FA5 0055 C        	MOV	TEMP0,A
   710            C        	
   711 03FA6 18C0 C        	MOV	A,@CIDTEL_FLAG
   712 03FA7 004C C        	MOV	_RC,A
   713 03FA8 0415 C        	MOV	A,TEMP0
   714 03FA9 004D C        	MOV	_RD,A
   715            C        	
   716 03FAA 0012 C        	RET
   717            C        
   718            C        ;-------------------------------------------------------------------------------
   719            C        
   643                     ;-------------------------------------------------------------------------------
   644                     
   645                     
  0 Error(s), 0 Warning(s), 0 User Message(s)