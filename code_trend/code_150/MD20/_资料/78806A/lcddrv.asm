

org 0x1C28

/***************************************
   a
 f   b
   g
 e   c
   d
***************************************/

second_line_tab:	;second line 0cbdgaef
	tbl
	RETL	@0X77		; 0
	RETL	@0X60		; 1
	RETL	@0X3E		; 2
	RETL	@0X7C		; 3
	RETL	@0X69		; 4
	RETL	@0X5D		; 5
	RETL	@0X5F		; 6
	RETL	@0X64		; 7
	RETL	@0X7F		; 8
	RETL	@0X7D		; 9
;--------------------------------------------------------------
	RETL	@0X6F		; A
	RETL	@0X5B		; b
	RETL	@0X17		; C
	RETL	@0X7A		; d
	RETL	@0X1F		; E
	RETL	@0X0F		; F
	RETL	@0X0		; BLANK
	RETL	@0X08		; -
	RETL	@0X1B		; T

;ORG	0X1F00
third_line_taba: 
	TBL
        RETL	@0b01110000	; 0
	RETL	@0b00000000	; 1
	RETL	@0b11000000	; 2
	RETL	@0b10001000	; 3
	RETL	@0b01100000	; 4
	RETL	@0b10111000	; 5
	RETL	@0b01110000	; 6
	RETL	@0b00001000	; 7
	RETL	@0b01010000	; 8
	RETL	@0b00010000	; 9
	
	RETL	@0b11110000	; A
	RETL	@0b11111000	; B
	RETL	@0b01110000	; C
	RETL	@0b11111000	; D
	RETL	@0b11111000	; E
	RETL	@0b11111000	; F
	RETL	@0b01110000	; G
	RETL	@0b11111000	; H
	RETL	@0b00000000	; I
	RETL	@0b01000000	; J
	RETL	@0b11111000	; K
	RETL	@0		; L
	RETL	@0xf8		; M
	RETL	@0b11111000	; N
	RETL	@0b01110000	; O
	RETL	@0b11111000	; P
	RETL	@0b01110000	; Q
	RETL	@0b11111000	; R
	RETL	@0b10010000	; S
	RETL	@0b00001000	; T
	RETL	@0b01111000	; U
	RETL	@0b00111000	; V
	RETL	@0b01111000	; W
	RETL	@0b10001000	; X
	RETL	@0b00001000	; Y
	RETL	@0b10001000	; Z
	
        RETL	@0		; BLANK
        
	RETL	@0B11111000	; ■
	
	RETL	@0b00010000	; ?
	RETL	@0b0		; !
	RETL	@0b0		; :
	RETL	@0B00000000	; .
	
	RETL	@0B11111000	; START
	RETL	@0B11111000	; PAUSE
	RETL	@0B10001000	; DEL
	RETL	@0B10000000	; /
	RETL	@0B00001000	; \
	RETL	@0B10000000	; _


third_line_tabb:
	TBL
	RETL	@0b11001000	; 0
	RETL	@0b10010000	; 1
	RETL	@0b10101000	; 2
	RETL	@0b10101000	; 3
	RETL	@0b01010000	; 4
	RETL	@0b10101000	; 5
	RETL	@0b10101000	; 6
	RETL	@0b00001000	; 7
	RETL	@0b10101000	; 8
	RETL	@0b10101000	; 9
	
	RETL	@0b00101000	; A
	RETL	@0b10101000	; B
	RETL	@0b10001000	; C
	RETL	@0b10001000	; D
	RETL	@0b10101000	; E
	RETL	@0b00101000	; F
	RETL	@0b10001000	; G
	RETL	@0b00100000	; H
	RETL	@0b10001000	; I
	RETL	@0b10000000	; J
	RETL	@0b00100000	; K
	RETL	@0xf8		; L
	RETL	@0x10		; M
	RETL	@0b00010000	; N
	RETL	@0b10001000	; O
	RETL	@0b00101000	; P
	RETL	@0b10001000	; Q
	RETL	@0b00101000	; R
	RETL	@0b10101000	; S
	RETL	@0b00001000	; T
	RETL	@0b10000000	; U
	RETL	@0b01000000	; V
	RETL	@0b10000000	; W
	RETL	@0b01010000	; X
	RETL	@0b00010000	; Y
	RETL	@0b11001000	; Z
	
	RETL	@0		; BLANK
	
	RETL	@0B11111000	; ■
	
	RETL	@0b00001000	; ?
	RETL	@0b0		; !
	RETL	@0b0		; :
	RETL	@0B00000000	; .
	
	RETL	@0B11111000	; START
	RETL	@0B11111000	; PAUSE
	RETL	@0B10001000	; DEL
	RETL	@0B01000000	; /
	RETL	@0B00010000	; \
	RETL	@0B10000000	; _

	
third_line_tabc:
	TBL
	RETL	@0b10101000	; 0
 	RETL	@0b11111000	; 1
 	RETL	@0b10101000	; 2
 	RETL	@0b10101000	; 3
 	RETL	@0b01001000	; 4
 	RETL	@0b10101000	; 5
 	RETL	@0b10101000	; 6
 	RETL	@0b11001000	; 7
 	RETL	@0b10101000	; 8
 	RETL	@0b10101000	; 9
	
	RETL	@0b00101000	; A
 	RETL	@0b10101000	; B
 	RETL	@0b10001000	; C
 	RETL	@0b10001000	; D
 	RETL	@0b10101000	; E
 	RETL	@0b00101000	; F
 	RETL	@0b10001000	; G
 	RETL	@0b00100000	; H
 	RETL	@0b11111000	; I
 	RETL	@0b10001000	; J
 	RETL	@0b00100000	; K
        RETL	@0b10000000	; L
	RETL	@0x60		; M
	RETL	@0b00100000	; N
	RETL	@0b10001000	; O
	RETL	@0b00101000	; P
	RETL	@0b10101000	; Q
	RETL	@0b00101000	; R
	RETL	@0b10101000	; S        
	RETL	@0b11111000	; T
	RETL	@0b10000000	; U
	RETL	@0b10000000	; V
	RETL	@0b01100000	; W
	RETL	@0b00100000	; X
	RETL	@0b11100000	; Y
	RETL	@0b10101000	; Z
	
	RETL	@0		; BLANK
	
	RETL	@0B11111000	; ■
	
	RETL	@0b11001000	; ?
	RETL	@0b10111000	; !
	RETL	@0b01010000	; :
	RETL	@0B00000000	; .
	
	RETL	@0B01110000	; START
	RETL	@0B00000000	; PAUSE
	RETL	@0B01010000	; DEL
	RETL	@0B00100000	; /
	RETL	@0B00100000	; \
	RETL	@0B10000000	; _


third_line_tabd:
	TBL
 	RETL	@0b10011000	; 0
	RETL	@0b10000000	; 1
	RETL	@0b10101000	; 2
	RETL	@0b10101000	; 3
	RETL	@0b11111000	; 4
	RETL	@0b10101000	; 5
	RETL	@0b10101000	; 6
	RETL	@0b00101000	; 7
	RETL	@0b10101000	; 8
	RETL	@0b10101000	; 9
	
	RETL	@0b00101000	; A
	RETL	@0b10101000	; B
	RETL	@0b10001000	; C
	RETL	@0b10001000	; D
	RETL	@0b10101000	; E
	RETL	@0b00101000	; F
	RETL	@0b10101000	; G
	RETL	@0b00100000	; H
	RETL	@0b10001000	; I
	RETL	@0b01111000	; J
	RETL	@0b01010000	; K
        RETL	@0b10000000	; L              
 	RETL	@0b00010000	; M       
 	RETL	@0b01000000	; N        
 	RETL	@0b10001000	; O          
 	RETL	@0b00101000	; P          
 	RETL	@0b01001000	; Q          
 	RETL	@0b01101000	; R          
 	RETL	@0b10101000	; S          
 	RETL	@0b00001000	; T          
 	RETL	@0b10000000	; U          
 	RETL	@0b01000000	; V          
 	RETL	@0b10000000	; W          
 	RETL	@0b01010000	; X          
 	RETL	@0b00010000	; Y          
 	RETL	@0b10011000	; Z
	
	RETL	@0		; BLANK
	
	RETL	@0B11111000	; ■
 	
	RETL	@0b00101000	; ?
	RETL	@0b0		; !                             
	RETL	@0b0		; :
	RETL	@0B01000000	; .
	
	RETL	@0B01110000	; START
	RETL	@0B11111000	; PAUSE
	RETL	@0B00100000	; DEL
	RETL	@0B00010000	; /
	RETL	@0B01000000	; \
	RETL	@0B10000000	; _


ORG	0X1D00
third_line_tabe:
	TBL
	RETL	@0b01110000	; 0
	RETL	@0b00000000	; 1
	RETL	@0b10010000	; 2
	RETL	@0b01010000	; 3
	RETL	@0b01000000	; 4
	RETL	@0b01000000	; 5
	RETL	@0b01000000	; 6
	RETL	@0b00011000	; 7
	RETL	@0b01010000	; 8
	RETL	@0b01110000	; 9

	RETL	@0b11110000	; A
	RETL	@0b01010000	; B
	RETL	@0b10001000	; C
	RETL	@0b01110000	; D
	RETL	@0b10001000	; E
	RETL	@0b00001000	; F
	RETL	@0b11101000	; G
	RETL	@0b11111000	; H
	RETL	@0b00000000	; I
	RETL	@0b00001000	; J
	RETL	@0b10001000	; K
	RETL	@0b10000000	; L
	RETL	@0xf8		; M
	RETL	@0b11111000	; N
	RETL	@0b01110000	; O
	RETL	@0b00010000	; P
	RETL	@0b10110000	; Q
	RETL	@0b10010000	; R
	RETL	@0b01001000	; S
        RETL	@0b00001000	; T
	RETL	@0b01111000	; U
	RETL	@0b00111000	; V
	RETL	@0b01111000	; W
	RETL	@0b10001000	; X
	RETL	@0b00001000	; Y
	RETL	@0b10001000	; Z
	
	RETL	@0		; BLANK

	RETL	@0B11111000	; ■

	RETL	@0b00010000	; ?
	RETL	@0b0		; !
	RETL	@0b0		; :
	RETL	@0B00000000	; .
	
	RETL	@0B00100000	; START
	RETL	@0B11111000	; PAUSE
	RETL	@0B11011000	; DEL
	RETL	@0B00001000	; /
	RETL	@0B10000000	; \
	RETL	@0B10000000	; _




;ORG	0X1A44
NUM_VERIFY:
	DISI
	MOV	INT_TEMP0,A
	SUB	A,@0X12
	JPC	NUM_VERIFY_RET
	MOV	INT_TEMP0,@NUM_BLANK
NUM_VERIFY_RET:
	MOV	A,INT_TEMP0
	ENI
	RET

STR_VERIFY:
	DISI
	MOV	INT_TEMP0,A
	SUB	A,@0X2F
	JPC	STR_VERIFY_RET
	MOV	INT_TEMP0,@CH_BLANK
STR_VERIFY_RET:
	MOV	A,INT_TEMP0
	ENI
	RET

/***************************************
显示第一行标志
用一个寄存器标示8个标志
.0		REPEAT
.1		NEW
.2		battery
.3		MEMO
.4		sencond
.5		/
.6		spk
.7		CALL
***************************************/
VIEW_STAMP:
	;MOV	_RC,@LCD_CTRL
	;CRAM	_RD,3
	MOV	_RC,@(LCD_CTRL+1)
	;NOP
	MOV	TEMP0,_RD
	
	WR_STAMP	TEMP0,7,@(2+0X40),0,TEMP1
	WR_STAMP	TEMP0,6,@(6+0X40),1,TEMP1
	WR_STAMP	TEMP0,5,@(11+0X40),0,TEMP1
	WR_STAMP	TEMP0,4,@(28+0X40),0,TEMP1
	WR_STAMP	TEMP0,3,@(35+0X40),2,TEMP1
	WR_STAMP	TEMP0,2,@(35+0X40),1,TEMP1
	WR_STAMP	TEMP0,1,@(36+0X40),1,TEMP1
	WR_STAMP	TEMP0,0,@(37+0X40),1,TEMP1
	RET
	

WR_STAMP	MACRO	STAMP_REG,STAMP_BIT,@LCD_ADDR,LCD_BIT,STAMP_TEMP
	IOW	_IOCB,@LCD_ADDR
	MOV	_RC,@LCD_ADDR
	;NOP
	MOV	STAMP_TEMP,_RD
	;IOR	STAMP_TEMP,_IOCC
	CRAM	STAMP_TEMP,LCD_BIT
	JPNB	STAMP_REG,STAMP_BIT,$+2
	SRAM	STAMP_TEMP,LCD_BIT
	IOW	_IOCC,STAMP_TEMP
	MOV	_RD,STAMP_TEMP
	ENDM
	
/***************************************
显示第一行的数字
数字信息按顺序列在10个数字寄存器中
***************************************/
VIEW_NUM1:
	;MOV	_RC,@LCD_CTRL
	;CRAM	_RD,4
	CLR	TEMP0				; 显示的位数
VIEW_NUM1_LOOP:
	CLR	TEMP1				; 显示的地址
	CLR	TEMP2				; 显示的列
	MOV	A,TEMP0
	SUB	A,@9
	ADD	A,@(LCD_CTRL+2)
	MOV	_RC,A
	MOV	TEMP3,_RD			; 得到需要显示的字符
	JPNB	TEMP3,7,VIEW_NUM1_NOTFLASH
	MOV	_RC,@LCD_CTRL
	JPNB	_RD,6,VIEW_NUM1_NOTFLASH
	MOV	TEMP3,@NUM_BLANK
VIEW_NUM1_NOTFLASH:
	ANDA	TEMP3,@0X7F
	CALL	NUM_VERIFY
	CALL	#second_line_tab
	MOV	TEMP3,A				; 查表得到字符对应的段码
	ADD	TEMP1,@0X40			; 字符在COM8~COM15，需要+40H的偏移地址
	MOV	A,TEMP0
	CALL	VIEW_NUM1_ROW
	ADD	TEMP1,A
VIEW_NUM1_LOOP_1:
	MOV	TEMP4,TEMP3
	ADDA	TEMP1,TEMP2			; 再+列 得到实际地址
	IOW	_IOCB
	MOV	_RC,A
	
	MOV	A,TEMP2
	JPZ	VIEW_NUM1_LOOP1
	SUBA	TEMP2,@1
	JPZ	VIEW_NUM1_LOOP2
	SUBA	TEMP2,@2
	JPZ	VIEW_NUM1_LOOP3
	;JMP	SHOW_ERR
VIEW_NUM1_LOOP1:
	RRC	TEMP4
	RRC	TEMP4
	RRC	TEMP4
	RRC	TEMP4
	AND	TEMP4,@6
	MOV	A,_RD
	AND	A,@0XF9
	OR	A,TEMP4
	JMP	VIEW_NUM1_LOOP_2
VIEW_NUM1_LOOP2:
	RRC	TEMP4
	RRC	TEMP4
	AND	TEMP4,@7
	MOV	A,_RD
	AND	A,@0XF8
	OR	A,TEMP4
	JMP	VIEW_NUM1_LOOP_2
VIEW_NUM1_LOOP3:
	RLC	TEMP4
	AND	TEMP4,@6
	MOV	A,_RD
	AND	A,@0XF9
	OR	A,TEMP4
	JMP	VIEW_NUM1_LOOP_2
	
VIEW_NUM1_LOOP_2:
	MOV	_RD,A
	IOW	_IOCC
	SUBA	TEMP0,@3
	JPNZ	VIEW_NUM1_LOOP_21
	MOV	A,TEMP2
	JPZ	VIEW_NUM1_LOOP_22
VIEW_NUM1_LOOP_21:
	INC	TEMP2
	SUBA	TEMP2,@3
	JPNZ	VIEW_NUM1_LOOP_1
VIEW_NUM1_LOOP_22:
	INC	TEMP0
	SUBA	TEMP0,@10
	JPNZ	VIEW_NUM1_LOOP
	
	RET


/***************************************
显示第二行的数字
数字信息按顺序列在16个数字寄存器中
***************************************/
VIEW_NUM2:
	;MOV	_RC,@LCD_CTRL
	;CRAM	_RD,5
	CLR	TEMP0				; 显示的位数
VIEW_NUM2_LOOP:
	CLR	TEMP1				; 显示地址
	CLR	TEMP2				; 显示的列
	MOV	A,TEMP0
	SUB	A,@15
	ADD	A,@(LCD_CTRL+12)
	MOV	_RC,A
	MOV	TEMP3,_RD			; 得到需要显示的字符
	JPNB	TEMP3,7,VIEW_NUM2_NOTFLASH
	MOV	_RC,@LCD_CTRL
	JPNB	_RD,6,VIEW_NUM2_NOTFLASH
	MOV	TEMP3,@NUM_BLANK
VIEW_NUM2_NOTFLASH:
	ANDA	TEMP3,@0X7F			; 得到需要显示的数字
	CALL	NUM_VERIFY
	CALL	#second_line_tab
	MOV	TEMP3,A				; 查表得到字符对应的段码
	
	CLRC
	RRCA	TEMP0
	MOV	TEMP4,A
	ADD	A,TEMP4
	ADD	A,TEMP4
	ADD	A,TEMP4
	ADD	A,TEMP4				; (TEMP0>>1)*5
	ADD	TEMP1,A
VIEW_NUM2_LOOP_1:
	MOV	TEMP4,TEMP3
	JPB	TEMP0,0,VIEW_NUM2_LOOP_ODD
VIEW_NUM2_LOOP_EVEN:				; 显示偶数位的数字
; 偶数位排列同第一行的数字：232型排列: 0cbdgaef	cb0 dga ef0
	ADDA	TEMP1,TEMP2
	IOW	_IOCB
	MOV	_RC,A
	
	MOV	A,TEMP2
	JPZ	VIEW_NUM2_LOOP_EVEN_1
	SUBA	TEMP2,@1
	JPZ	VIEW_NUM2_LOOP_EVEN_2
	SUBA	TEMP2,@2
	JPZ	VIEW_NUM2_LOOP_EVEN_3
	;JMP	VIEW_ERR
VIEW_NUM2_LOOP_EVEN_1:
	RRC	TEMP4
	RRC	TEMP4
	RRC	TEMP4
	RRC	TEMP4
	AND	TEMP4,@6
	MOV	A,_RD
	AND	A,@0XF9
	OR	A,TEMP4
	JMP	VIEW_NUM2_LOOP_2
VIEW_NUM2_LOOP_EVEN_2:
	RRC	TEMP4
	RRC	TEMP4
	AND	TEMP4,@7
	MOV	A,_RD
	AND	A,@0XF8
	OR	A,TEMP4
	JMP	VIEW_NUM2_LOOP_2
VIEW_NUM2_LOOP_EVEN_3:
	RLC	TEMP4
	AND	TEMP4,@6
	MOV	A,_RD
	AND	A,@0XF9
	OR	A,TEMP4
	JMP	VIEW_NUM2_LOOP_2

VIEW_NUM2_LOOP_ODD:
; 奇数位排列规则为：133型排列: 0cbdgaef 00b cga def
	ADDA	TEMP1,TEMP2
	ADD	A,@2				; +2
	IOW	_IOCB
	MOV	_RC,A
	
	MOV	A,TEMP2
	JPZ	VIEW_NUM2_LOOP_ODD_1
	SUBA	TEMP2,@1
	JPZ	VIEW_NUM2_LOOP_ODD_2
	SUBA	TEMP2,@2
	JPZ	VIEW_NUM2_LOOP_ODD_3
	;JMP	VIEW_ERR
VIEW_NUM2_LOOP_ODD_1:
	RRC	TEMP4
	RRC	TEMP4
	RRC	TEMP4
	RRC	TEMP4
	RRC	TEMP4
	AND	TEMP4,@1
	MOV	A,_RD
	AND	A,@0XFE
	OR	A,TEMP4
	JMP	VIEW_NUM2_LOOP_2
VIEW_NUM2_LOOP_ODD_2:
	AND	_RD,@0XF8
	RRC	TEMP4
	RRC	TEMP4
	MOV	A,TEMP4
	AND	A,@3
	OR	_RD,A
	RRC	TEMP4
	RRC	TEMP4
	MOV	A,TEMP4
	AND	A,@4
	OR	A,_RD
	JMP	VIEW_NUM2_LOOP_2
VIEW_NUM2_LOOP_ODD_3:
	AND	_RD,@0XF8
	MOV	A,TEMP4
	AND	A,@3
	OR	_RD,A
	RRC	TEMP4
	RRC	TEMP4
	MOV	A,TEMP4
	AND	A,@4
	OR	A,_RD
	JMP	VIEW_NUM2_LOOP_2
	
VIEW_NUM2_LOOP_2:
	MOV	_RD,A
	IOW	_IOCC
	INC	TEMP2
	SUBA	TEMP2,@3
	JPNZ	VIEW_NUM2_LOOP_1
	INC	TEMP0
	SUBA	TEMP0,@16
	JPNZ	VIEW_NUM2_LOOP
	
	RET
	

/***************************************
显示第三行的字符串
字符串信息按顺序列在16个字符寄存器中
***************************************/
VIEW_STR:
	;MOV	_RC,@LCD_CTRL
	;CRAM	_RD,6
	CLR	TEMP0				; 显示的位数
VIEW_STR_LOOP:
	CLR	TEMP1				; 显示地址
	CLR	TEMP2				; 显示的列
	MOV	A,TEMP0
	SUB	A,@15
	ADD	A,@(LCD_CTRL+28)
	MOV	_RC,A
	MOV	TEMP3,_RD			; 得到需要显示的字符
	JPNB	TEMP3,7,VIEW_STR_NOTFLASH
	MOV	_RC,@LCD_CTRL
	JPNB	_RD,6,VIEW_STR_NOTFLASH
	MOV	TEMP3,@CH_BLANK
VIEW_STR_NOTFLASH:
	AND	TEMP3,@0X7F
	;MOV	TEMP3,_RD			; 得到需要显示的字符
	JPB	TEMP0,0,VIEW_STR_LOOP_ODD
VIEW_STR_LOOP_EVEN:				; 0 2 4 6
	ADD	TEMP1,@0X40			; +偏移
VIEW_STR_LOOP_ODD:				; 1 3 5 7
	CLRC
	RRCA	TEMP0
	MOV	TEMP4,A
	ADD	A,TEMP4
	ADD	A,TEMP4
	ADD	A,TEMP4
	ADD	A,TEMP4				; (TEMP0>>1)*5 得到需要显示的偏移地址
	ADD	TEMP1,A
VIEW_STR_LOOP_2:
	MOV	A,TEMP2
	JPB	TEMP0,0,VIEW_STR_LOOP_2_ODD
VIEW_STR_LOOP_2_EVEN:
	SUB	A,@4				; 偶数字符需要倒向
VIEW_STR_LOOP_2_ODD:
	ADD	A,TEMP1				; 偏移+列 得到实际地址
	;MOV	TEMP4,A
	;IOW	_IOCB,TEMP4
	;MOV	_RC,TEMP4
	IOW	_IOCB
	MOV	_RC,A
	VIEW_STR_TAB	TEMP3,TEMP2		; 根据字符和列得到在该列该字符的显示值。
	MOV	TEMP4,A
	;IOW	_IOCB,TEMP1
	;NOP
	MOV	A,_RD
	;IOR	_IOCC
	AND	A,@7
	OR	A,TEMP4
	IOW	_IOCC
	MOV	_RD,A
	INC	TEMP2
	SUBA	TEMP2,@5
	JPNZ	VIEW_STR_LOOP_2
	INC	TEMP0
	SUBA	TEMP0,@16
	JPNZ	VIEW_STR_LOOP
	
	RET
	
VIEW_STR_TAB	MACRO	STR,STR_ROW
	MOV	A,STR_ROW
	TBL
	JMP	VIEW_STR_1
	JMP	VIEW_STR_2
	JMP	VIEW_STR_3
	JMP	VIEW_STR_4
	JMP	VIEW_STR_5
VIEW_STR_1:
	MOV	A,STR
	CALL	STR_VERIFY
	CALL	#THIRD_LINE_TABA
	JMP	VIEW_STR_TAB_RET
VIEW_STR_2:
	MOV	A,STR
	CALL	STR_VERIFY
	CALL	#THIRD_LINE_TABB
	JMP	VIEW_STR_TAB_RET
VIEW_STR_3:
	MOV	A,STR
	CALL	STR_VERIFY
	CALL	#THIRD_LINE_TABC
	JMP	VIEW_STR_TAB_RET
VIEW_STR_4:
	MOV	A,STR
	CALL	STR_VERIFY
	CALL	#THIRD_LINE_TABD
	JMP	VIEW_STR_TAB_RET
VIEW_STR_5:
	MOV	A,STR
	CALL	STR_VERIFY
	CALL	#THIRD_LINE_TABE
	JMP	VIEW_STR_TAB_RET
VIEW_STR_TAB_RET:
	ENDM


VIEW_NUM1_ROW:
	TBL
	RETL	0
	RETL	3
	RETL	7
	RETL	10
	RETL	11
	RETL	14
	RETL	23
	RETL	26
	RETL	29
	RETL	32


/***************************************
外部可调用VIEW_LCD
LCD显示
LCD_CTRL	LCD显示控制器
.0~.1		显示区块计数
.2		闪烁
.3		显示第一行标志控制		0/1 不需要显示/需要显示
.4		显示第一行字符控制		0/1 不需要显示/需要显示
.5		显示第二行字符控制		0/1 不需要显示/需要显示
.6		显示第三行字符控制		0/1 不需要显示/需要显示
.7		全局显示控制			0/1 全体不需要显示/全体需要显示
全部使用CID RAM的BANK0
0~127为LCD RAM的映射
128为LCD显示控制器
其后寄存器说明：
128+1		第一行印花寄存器
128+2~11	第一行数字寄存器
128+12~27	第二行数字寄存器
128+28~43	第三行字符寄存器
***************************************/
;ORG	0X1E80
LCD_VIEW:
	CIDBANK	0
	BANK	0
	MOV	_RC,@LCD_CTRL
	;NOP
	;MOV	TEMP0,_RD
	MOV	A,TMR_FLASH
	JPNZ	$+8
	BINVRAM	_RD,6
	MOV	TMR_FLASH,@50
	
	JPNB	_RD,7,LCD_VIEW_RET
	MOV	A,_RD
	ADD	A,@1
	AND	A,@3
	MOV	TEMP1,A
	ANDA	_RD,@0XFC
	ADD	A,TEMP1
	MOV	_RD,A
	
	SUBA	TEMP1,@0
	JPZ	LCD_VIEW_STAMP
	SUBA	TEMP1,@1
	JPZ	LCD_VIEW_NUM1
	SUBA	TEMP1,@2
	JPZ	LCD_VIEW_NUM2
	SUBA	TEMP1,@3
	JPZ	LCD_VIEW_STR
	JMP	LCD_VIEW_RET
LCD_VIEW_STAMP:
	;JPNB	TEMP0,3,LCD_VIEW_RET
	JMP	#VIEW_STAMP
LCD_VIEW_NUM1:
	;JPNB	TEMP0,4,LCD_VIEW_RET
	JMP	#VIEW_NUM1
LCD_VIEW_NUM2:
	;JPNB	TEMP0,5,LCD_VIEW_RET
	JMP	#VIEW_NUM2
LCD_VIEW_STR:
	;JPNB	TEMP0,6,LCD_VIEW_RET
	JMP	#VIEW_STR
LCD_VIEW_RET:
	RET

	