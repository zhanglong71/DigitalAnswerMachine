
/***************************************
24C32 I2C Smart Serial EEPROM 读写程序

从CID RAM中向24C08读/写数据
@EEP_CTRL	读写控制器
.7	0/1	-- 写/读
.6~.0	1~127	-- 读写数据的个数。
@EEP_CTRL+1	地址寄存器1
@EEP_CTRL+2	地址寄存器0
@EEP_CTRL+n	数据寄存器

在CID RAM中数据存储方式为
(EEP_CTRL) (ADDR1) (ADDR0) (DATAn)...(DATA1)
在EEPROM中数据的存储方式为
(ADDR1 ADDR0) (DATA1) (DATA2)...(DATAn)
***************************************/
include	"24c32.inc"


MCU_WR_EEP:
	RET
/*
	CIDBANK	CIDBANK_EEP
	MOV	_RC,@EEP_CTRL
	MOV	TEMP2,_RD
	ANDA	TEMP2,@0X7F
	MOV	TEMP3,A
	JPB	TEMP2,7,MCU_READ
MCU_WRITE:
	CALL	IIC_START
	MOV	A,@0XA0
	CALL	SEND_BYTE
	CALL	EEP_ACK
	MOV	_RC,@(EEP_CTRL+1)
	MOV	A,_RD
	CALL	SEND_BYTE
	CALL	EEP_ACK
	MOV	_RC,@(EEP_CTRL+2)
	MOV	A,_RD
	CALL	SEND_BYTE
	CALL	EEP_ACK
MCD_WRITE_LOOP:
	ADDA	TEMP3,@(EEP_CTRL+2)
	MOV	_RC,A
	MOV	A,_RD
	CALL	SEND_BYTE
	CALL	EEP_ACK
	
	DEC	TEMP3
	JPNZ	MCD_WRITE_LOOP
	CALL	IIC_STOP
	CALL	DELAY_1US
	RET

MCU_READ:
	CALL	IIC_START
	MOV	A,@0XA0
	CALL	SEND_BYTE
	CALL	EEP_ACK
	MOV	_RC,@(EEP_CTRL+1)
	MOV	A,_RD
	CALL	SEND_BYTE
	CALL	EEP_ACK
	MOV	_RC,@(EEP_CTRL+2)
	MOV	A,_RD
	CALL	SEND_BYTE
	CALL	EEP_ACK
	CALL	IIC_START
	MOV	A,@0XA1
	CALL	SEND_BYTE
	CALL	EEP_ACK
MCU_READ_LOOP:
	ADDA	TEMP3,@(EEP_CTRL+2)
	MOV	_RC,A
	CALL	RECEIVE_BYTE
	MOV	_RD,A
	
	DEC	TEMP3
	JPZ	MCU_READ_END
	CALL	MCU_ACK
	JMP	MCU_READ_LOOP
MCU_READ_END:
	CALL	IIC_STOP
	CALL	DELAY_1US
	RET
	
	

IIC_START:
	SRAM	IIC_IO,SDA
	SRAM	IIC_IO,SCL
	CALL	DELAY_1US		; 起始条件的建立时间
	CRAM	IIC_IO,SDA
	CALL	DELAY_1US		; 起始条件的保持时间
	CRAM	IIC_IO,SCL
	RET

IIC_STOP:
	CRAM	IIC_IO,SDA
	SRAM	IIC_IO,SCL
	CALL	DELAY_1US		; 停止条件的建立时间
	SRAM	IIC_IO,SDA
	CALL	DELAY_1US		; 停止之后总线空闲时间
	RET

DELAY_1US:
	NOP
	NOP
	NOP
	RET

SDA_OUT:
	CIO	IIC_IO,SDA
	RET

SDA_IN:
	SIO	IIC_IO,SDA
	RET

SEND_BYTE:
	MOV	TEMP0,A
	MOV	TEMP1,@8
SEND_BYTE_LOOP:
	CALL	DELAY_1US
	RLC	TEMP0
	JPC	SEND_BYTE_LOOP_H
	CRAM	IIC_IO,SDA
	JMP	SEND_BYTE_LOOP_1
SEND_BYTE_LOOP_H:
	SRAM	IIC_IO,SDA
SEND_BYTE_LOOP_1:
	SRAM	IIC_IO,SCL
	CALL	DELAY_1US
	CRAM	IIC_IO,SCL
	DEC	TEMP1
	JPNZ	SEND_BYTE_LOOP
	RET

RECEIVE_BYTE:
	CALL	SDA_IN
	MOV	TEMP0,@0
	MOV	TEMP1,@8
RECEIVE_BYTE_LOOP:
	SRAM	IIC_IO,SCL
	CALL	DELAY_1US
	CLRC
	JPNB	IIC_IO,SDA,RECEIVE_LOOP_L
	SETC
RECEIVE_LOOP_L:
	RLC	TEMP0
	CRAM	IIC_IO,SCL
	CALL	DELAY_1US
	DEC	TEMP1
	JPNZ	RECEIVE_BYTE_LOOP
	CALL	SDA_OUT
	MOV	A,TEMP0
	RET

; 从EEPROM收ACK
; A==0 ACK OK
; A!=0 NO ACK
EEP_ACK:
	MOV	TEMP0,@0
	CALL	SDA_IN
	SRAM	IIC_IO,SCL
	CALL	DELAY_1US
	JPNB	IIC_IO,SDA,EEP_ACK_1
	MOV	TEMP0,@1
EEP_ACK_1:
	CRAM	IIC_IO,SCL
	CALL	SDA_OUT
	MOV	A,TEMP0
	RET

; MCU发送ACK
MCU_ACK:
	CRAM	IIC_IO,SDA
	SRAM	IIC_IO,SCL
	CALL	DELAY_1US
	CRAM	IIC_IO,SCL
	RET


*/