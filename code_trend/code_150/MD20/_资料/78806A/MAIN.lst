     1                     
     2                     /***************************************
     3                                  项目主程序
     4                     功能：
     5                     	程序调用
     6                     	程序分配
     7                     
     8                     ***************************************/
     9                     
    10                     include	"emc806.inc"	; emc806定义文件
     1            C        ; 寄存器定义
     2       0000 C        _IAR	==	0
     3       0001 C        _TCC	==	1
     4       0002 C        _PC	==	2
     5       0003 C        _STATUS	==	3
     6       0004 C        _RSR	==	4
     7       0005 C        _PPSR	==	5
     8       000A C        _FSR	==	10
     9       000F C        _ISR	==	15
    10            C        
    11       0000 C        _R0	==	0
    12       0001 C        _R1	==	1
    13       0002 C        _R2	==	2
    14       0003 C        _R3	==	3
    15       0004 C        _R4	==	4
    16       0005 C        _R5	==	5
    17       0006 C        _R6	==	6
    18       0007 C        _R7	==	7
    19       0008 C        _R8	==	8
    20       0009 C        _R9	==	9
    21       000A C        _RA	==	10
    22       000B C        _RB	==	11
    23       000C C        _RC	==	12
    24       000D C        _RD	==	13
    25       000E C        _RE	==	14
    26       000F C        _RF	==	15
    27            C        
    28       0005 C        _P5	==	5
    29       0006 C        _P6	==	6
    30       0007 C        _P7	==	7
    31       0008 C        _P8	==	8
    32       0009 C        _P9	==	9
    33            C        
    34       0005 C        _IOC5	==	5
    35       0006 C        _IOC6	==	6
    36       0007 C        _IOC7	==	7
    37       0008 C        _IOC8	==	8
    38       0009 C        _IOC9	==	9
    39       000A C        _IOCA	==	10
    40       000B C        _IOCB	==	11
    41       000C C        _IOCC	==	12
    42       000D C        _IOCD	==	13
    43       000E C        _IOCE	==	14
    44       000F C        _IOCF	==	15
    45            C        
    46       0000 C        R0	==	0
    47       0001 C        R1	==	1
    48       0002 C        R2	==	2
    49       0003 C        R3	==	3
    50       0004 C        R4	==	4
    51       0005 C        R5	==	5
    52       0006 C        R6	==	6
    53       0007 C        R7	==	7
    54       0008 C        R8	==	8
    55       0009 C        R9	==	9
    56       000A C        RA	==	10
    57       000B C        RB	==	11
    58       000C C        RC	==	12
    59       000D C        RD	==	13
    60       000E C        RE	==	14
    61       000F C        RF	==	15
    62            C        
    63            C        ; 位定义
    64       0000 C        C	==	0
    65       0001 C        DC	==	1
    66       0002 C        Z	==	2
    67       0003 C        P	==	3
    68       0004 C        T	==	4
    69       0000 C        PS0	==	0
    70       0001 C        PS1	==	1
    71       0002 C        PS2	==	2
    72            C        
    73            C        ; 常数定义
    74       0000 C        NULL	==	0
    75            C        
    76            C        
    77            C        ; 指令定义
    78            C        
    79            C        ; ---------------------------------------
    80            C        ; 寻址指令
    81            C        
    82            C        BANK	MACRO	NUM		; C2
    83            C        	IF	NUM == 0
    84            C        		BC	_RSR,6
    85            C        		BC	_RSR,7
    86            C        	ELSEIF	NUM == 1
    87            C        		BS	_RSR,6
    88            C        		BC	_RSR,7
    89            C        	ELSEIF	NUM == 2
    90            C        		BC	_RSR,6
    91            C        		BS	_RSR,7
    92            C        	ELSEIF	NUM == 3
    93            C        		BS	_RSR,6
    94            C        		BS	_RSR,7
    95            C        	ELSE
    96            C        		MESSAGE "WARRING: DON'T HAVE SPECIFY BANK!"
    97            C        	ENDIF
    98            C        	ENDM
    99            C        
   100            C        CIDBANK	MACRO	NUM
   101            C        	IF	NUM == 0
   102            C        		CRAM	_RB,0
   103            C        		CRAM	_RB,2
   104            C        	ELSEIF	NUM == 1
   105            C        		SRAM	_RB,0
   106            C        		CRAM	_RB,2
   107            C        	ELSEIF	NUM == 2
   108            C        		CRAM	_RB,0
   109            C        		SRAM	_RB,2
   110            C        	ELSEIF	NUM == 3
   111            C        		SRAM	_RB,0
   112            C        		SRAM	_RB,2
   113            C        	ELSE
   114            C        		MESSAGE "WARRING: DON'T HAVE SPECIFY BANK!"
   115            C        	ENDIF
   116            C        	ENDM
   117            C        
   118            C        PAGE	MACRO	#ADDR		; C1
   119            C        	IF	ADDR < 0X2000
   120            C        		PAGE	(ADDR/0X400)
   121            C        	ELSE
   122            C        		MESSAGE "OUT OF PROGRAM MEMORY !"
   123            C        	ENDIF
   124            C        	ENDM
   125            C        
   126            C        PAGEIO	MACRO	NUM
   127            C        	IF	NUM == 0
   128            C        		CRAM	_STATUS,7
   129            C        	ELSEIF	NUM == 1
   130            C        		SRAM	_STATUS,7
   131            C        	ELSE
   132            C        		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
   133            C        	ENDIF
   134            C        	ENDM
   135            C        
   136            C        CALL	MACRO	#ADDR		; C1/C3
   137            C        	IF	ADDR < 0X2000
   138            C        	IF	($/0X400) == (ADDR/0X400)
   139            C        		CALL	(ADDR%0X400)
   140            C        	ELSE
   141            C        		LCALL	ADDR
   142            C        	ENDIF
   143            C        	ELSE
   144            C        		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
   145            C        	ENDIF
   146            C        	ENDM
   147            C        
   148            C        LCALL	MACRO	ADDR		; C3
   149            C        	IF	ADDR < 0X2000
   150            C        		PAGE	#ADDR
   151            C        		CALL	(ADDR%0X400)
   152            C        		PAGE	#$
   153            C        	ELSE
   154            C        		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
   155            C        	ENDIF
   156            C        	ENDM
   157            C        
   158            C        JMP	MACRO	#ADDR		; C1/C2
   159            C        	IF	ADDR < 0X2000
   160            C        	IF	($/0X400) == (ADDR/0X400)
   161            C        		JMP	(ADDR%0X400)
   162            C        	ELSE
   163            C        		LJMP	ADDR
   164            C        	ENDIF
   165            C        	ELSE
   166            C        		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
   167            C        	ENDIF
   168            C        	ENDM
   169            C        
   170            C        LJMP	MACRO	ADDR		; C2
   171            C        	IF	ADDR < 0X2000
   172            C        		PAGE	#ADDR
   173            C        		JMP	(ADDR%0X400)
   174            C        	ELSE
   175            C        		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
   176            C        	ENDIF
   177            C        	ENDM
   178            C        
   179            C        JPZ	MACRO	ADDR		; C2
   180            C        	JBC	_STATUS,Z
   181            C        	JMP	ADDR
   182            C        	ENDM
   183            C        
   184            C        JPNZ	MACRO	ADDR		; C2
   185            C        	JBS	_STATUS,Z
   186            C        	JMP	ADDR
   187            C        	ENDM
   188            C        
   189            C        JPC	MACRO	ADDR		; C2
   190            C        	JBC	_STATUS,C
   191            C        	JMP	ADDR
   192            C        	ENDM
   193            C        
   194            C        JPNC	MACRO	ADDR		; C2
   195            C        	JBS	_STATUS,C
   196            C        	JMP	ADDR
   197            C        	ENDM
   198            C        
   199            C        JPB	MACRO	REG,BIT,ADDR	; C2
   200            C        	JBC	REG,BIT
   201            C        	JMP	ADDR
   202            C        	ENDM
   203            C        
   204            C        JPNB	MACRO	REG,BIT,ADDR	; C2
   205            C        	JBS	REG,BIT
   206            C        	JMP	ADDR
   207            C        	ENDM
   208            C        
   209            C        JPOB	MACRO	IO_REG,BIT,ADDR	; C4
   210            C        	IOR	IO_REG
   211            C        	GA	BIT
   212            C        	JPNZ	ADDR
   213            C        	ENDM
   214            C        
   215            C        JPONB	MACRO	IO_REG,BIT,ADDR	; C4
   216            C        	IOR	IO_REG
   217            C        	GA	BIT
   218            C        	JPZ	ADDR
   219            C        	ENDM
   220            C        
   221            C        JPS	MACRO	REG1,REG2,ADDR	;	if REG1 < REG2, than jump to ADDR
   222            C        	SUBA	REG1,REG2
   223            C        	JPNC	ADDR
   224            C        	ENDM
   225            C        
   226            C        JPNS	MACRO	REG1,REG2,ADDR
   227            C        	SUBA	REG1,REG2
   228            C        	JPC	ADDR
   229            C        	ENDM
   230            C        
   231            C        
   232            C        ; --------------------------------------
   233            C        ; 位操作指令
   234            C        
   235            C        SA	MACRO	BIT		; C1
   236            C        	IF	BIT == 0
   237            C        		OR	A,@0X1
   238            C        	ELSEIF	BIT == 1
   239            C        		OR	A,@0X2
   240            C        	ELSEIF	BIT == 2
   241            C        		OR	A,@0X4
   242            C        	ELSEIF	BIT == 3
   243            C        		OR	A,@0X8
   244            C        	ELSEIF	BIT == 4
   245            C        		OR	A,@0X10
   246            C        	ELSEIF	BIT == 5
   247            C        		OR	A,@0X20
   248            C        	ELSEIF	BIT == 6
   249            C        		OR	A,@0X40
   250            C        	ELSEIF	BIT == 7
   251            C        		OR	A,@0X80
   252            C        	ENDIF
   253            C        	ENDM
   254            C        
   255            C        CA	MACRO	BIT		; C1
   256            C        	IF	BIT == 0
   257            C        		AND	A,@0XFE
   258            C        	ELSEIF	BIT == 1
   259            C        		AND	A,@0XFD
   260            C        	ELSEIF	BIT == 2
   261            C        		AND	A,@0XFB
   262            C        	ELSEIF	BIT == 3
   263            C        		AND	A,@0XF7
   264            C        	ELSEIF	BIT == 4
   265            C        		AND	A,@0XEF
   266            C        	ELSEIF	BIT == 5
   267            C        		AND	A,@0XDF
   268            C        	ELSEIF	BIT == 6
   269            C        		AND	A,@0XBF
   270            C        	ELSEIF	BIT == 7
   271            C        		AND	A,@0X7F
   272            C        	ENDIF
   273            C        	ENDM
   274            C        
   275            C        GA	MACRO	BIT		; C1
   276            C        	IF	BIT == 0
   277            C        		AND	A,@0X01
   278            C        	ELSEIF	BIT == 1
   279            C        		AND	A,@0X02
   280            C        	ELSEIF	BIT == 2
   281            C        		AND	A,@0X04
   282            C        	ELSEIF	BIT == 3
   283            C        		AND	A,@0X08
   284            C        	ELSEIF	BIT == 4
   285            C        		AND	A,@0X10
   286            C        	ELSEIF	BIT == 5
   287            C        		AND	A,@0X20
   288            C        	ELSEIF	BIT == 6
   289            C        		AND	A,@0X40
   290            C        	ELSEIF	BIT == 7
   291            C        		AND	A,@0X80
   292            C        	ENDIF
   293            C        	ENDM
   294            C        
   295            C        SRAM	MACRO	REG,BIT		; C1
   296            C        	;MOV	A,REG
   297            C        	;SA	BIT
   298            C        	;MOV	REG,A
   299            C        	BS	REG,BIT
   300            C        	ENDM
   301            C        
   302            C        CRAM	MACRO	REG,BIT		; C1
   303            C        	;MOV	A,REG
   304            C        	;CA	BIT
   305            C        	;MOV	REG,A
   306            C        	BC	REG,BIT
   307            C        	ENDM
   308            C        
   309            C        GRAM	MACRO	REG,BIT		; C2
   310            C        	MOV	A,REG
   311            C        	GA	BIT
   312            C        	ENDM
   313            C        
   314            C        BINVRAM	MACRO	REG,BIT		; C5
   315            C        	JPB	REG,BIT,$+3
   316            C        	SRAM	REG,BIT
   317            C        	JMP	$+2
   318            C        	CRAM	REG,BIT
   319            C        	ENDM
   320            C        
   321            C        SIO	MACRO	IO_REG,BIT	; C3
   322            C        	IOR	IO_REG
   323            C        	SA	BIT
   324            C        	IOW	IO_REG
   325            C        	ENDM
   326            C        
   327            C        CIO	MACRO	IO_REG,BIT	; C3
   328            C        	IOR	IO_REG
   329            C        	CA	BIT
   330            C        	IOW	IO_REG
   331            C        	ENDM
   332            C        
   333            C        GIO	MACRO	IO_REG,BIT	; C2
   334            C        	IOR	IO_REG
   335            C        	GA	BIT
   336            C        	ENDM
   337            C        
   338            C        BINVIO	MACRO	IO_REG,BIT
   339            C        	GIO	IO_REG,BIT
   340            C        	JPNZ	$+5
   341            C        	SIO	IO_REG,BIT
   342            C        	JMP	$+4
   343            C        	CIO	IO_REG,BIT
   344            C        	ENDM
   345            C        
   346            C        CLRC	MACRO
   347            C        	BC	_STATUS,C
   348            C        	ENDM
   349            C        
   350            C        SETC	MACRO
   351            C        	BS	_STATUS,C
   352            C        	ENDM
   353            C        
   354            C        CLRZ	MACRO
   355            C        	BC	_STATUS,Z
   356            C        	ENDM
   357            C        
   358            C        SETZ	MACRO
   359            C        	BS	_STATUS,Z
   360            C        	ENDM
   361            C        
   362            C        ; --------------------------------------
   363            C        ; 数据移动指令
   364            C        
   365            C        MOV	MACRO	REG1,@VALUE	; C2
   366            C        	MOV	A,@VALUE
   367            C        	MOV	REG1,A
   368            C        	ENDM
   369            C        
   370            C        MOV	MACRO	REG1,REG2	; C2
   371            C        	IF	REG1 != REG2
   372            C        	MOV	A,REG2
   373            C        	MOV	REG1,A
   374            C        	ENDIF
   375            C        	ENDM
   376            C        
   377            C        IOR	MACRO	REG,IO_REG	; C2
   378            C        	IOR	IO_REG
   379            C        	MOV	REG,A
   380            C        	ENDM
   381            C        
   382            C        IOW	MACRO	IO_REG,@VALUE	; C2
   383            C        	MOV	A,@VALUE
   384            C        	IOW	IO_REG
   385            C        	ENDM
   386            C        
   387            C        IOW	MACRO	IO_REG,REG	; C2
   388            C        	MOV	A,REG
   389            C        	IOW	IO_REG
   390            C        	ENDM
   391            C        	
   392            C        
   393            C        ; --------------------------------------
   394            C        ; 算术运算指令
   395            C        
   396            C        DECZ	MACRO	REG		; 自减至0停止
   397            C        	MOV	A,REG
   398            C        	JPZ	$+2
   399            C        	DEC	REG
   400            C        	ENDM
   401            C        
   402            C        ADD	MACRO	REG1,@VALUE	; C2
   403            C        	MOV	A,@VALUE
   404            C        	ADD	REG1,A
   405            C        	ENDM
   406            C        
   407            C        ADD	MACRO	REG1,REG2	; C2
   408            C        	MOV	A,REG2
   409            C        	ADD	REG1,A
   410            C        	ENDM
   411            C        
   412            C        ADDA	MACRO	REG1,@VALUE	; C2
   413            C        	MOV	A,@VALUE
   414            C        	ADD	A,REG1
   415            C        	ENDM
   416            C        
   417            C        ADDA	MACRO	REG1,REG2	; C2
   418            C        	MOV	A,REG2
   419            C        	ADD	A,REG1
   420            C        	ENDM
   421            C        
   422            C        SUB	MACRO	REG1,@VALUE	; C2
   423            C        	MOV	A,@VALUE
   424            C        	SUB	REG1,A
   425            C        	ENDM
   426            C        
   427            C        SUB	MACRO	REG1,REG2	; C2
   428            C        	MOV	A,REG2
   429            C        	SUB	REG1,A
   430            C        	ENDM
   431            C        
   432            C        SUBA	MACRO	REG1,@VALUE	; C2
   433            C        	MOV	A,@VALUE
   434            C        	SUB	A,REG1
   435            C        	ENDM
   436            C        
   437            C        SUBA	MACRO	@VALUE,REG1	; C2
   438            C        	MOV	A,REG1
   439            C        	SUB	A,@VALUE
   440            C        	ENDM
   441            C        
   442            C        SUBA	MACRO	REG1,REG2	; C2
   443            C        	MOV	A,REG2
   444            C        	SUB	A,REG1
   445            C        	ENDM
   446            C        
   447            C        FADD	MACRO	A,REG		; C3
   448            C        	IF	REG < 0x40
   449            C        		BANK	0
   450            C        		ADD	A,REG
   451            C        	ELSEIF	REG < 0X60
   452            C        		BANK	1
   453            C        		ADD	A,REG - 0X20
   454            C        	ELSEIF	REG < 0X80
   455            C        		BANK	2
   456            C        		ADD	A,REG - 0X40
   457            C        	ELSEIF	REG < 0XA0
   458            C        		BANK	3
   459            C        		ADD	A,REG - 0X60
   460            C        	ELSE
   461            C        		MESSAGE "WARRING: OUT OF BANK !"
   462            C        	ENDIF
   463            C        	ENDM
   464            C        
   465            C        FADD	MACRO	REG,A		;C3
   466            C        	IF	REG < 0x40
   467            C        		BANK	0
   468            C        		ADD	REG,A
   469            C        	ELSEIF	REG < 0X60
   470            C        		BANK	1
   471            C        		ADD	REG - 0X20,A
   472            C        	ELSEIF	REG < 0X80
   473            C        		BANK	2
   474            C        		ADD	REG - 0X40,A
   475            C        	ELSEIF	REG < 0XA0
   476            C        		BANK	3
   477            C        		ADD	REG - 0X60,A
   478            C        	ELSE
   479            C        		MESSAGE "WARRING: OUT OF BANK !"
   480            C        	ENDIF
   481            C        	ENDM
   482            C        
   483            C        FADD	MACRO	REG1,@VALUE	; C4
   484            C        	IF	REG1 < 0x40
   485            C        		BANK	0
   486            C        		MOV	A,@VALUE
   487            C        		ADD	REG1,A
   488            C        	ELSEIF	REG1 < 0X60
   489            C        		BANK	1
   490            C        		MOV	A,@VALUE
   491            C        		ADD	REG1 - 0X20,A
   492            C        	ELSEIF	REG1 < 0X80
   493            C        		BANK	2
   494            C        		MOV	A,@VALUE
   495            C        		ADD	REG1 - 0X40,A
   496            C        	ELSEIF	REG1 < 0XA0
   497            C        		BANK	3
   498            C        		MOV	A,@VALUE
   499            C        		ADD	REG1 - 0X60,A
   500            C        	ELSE
   501            C        		MESSAGE "WARRING: OUT OF BANK !"
   502            C        	ENDIF
   503            C        	ENDM
   504            C        
   505            C        FADD	MACRO	REG1,REG2	; C6
   506            C        	IF	REG2 < 0x40
   507            C        		BANK	0
   508            C        		MOV	A, REG2
   509            C        		FADD	REG1,A
   510            C        	ELSEIF	REG2 < 0X60
   511            C        		BANK	1
   512            C        		MOV	A, REG2 - 0X20
   513            C        		FADD 	REG1,A
   514            C        	ELSEIF	REG2 < 0X80
   515            C        		BANK	2
   516            C        		MOV	A, REG2 - 0X40
   517            C        		FADD	REG1,A
   518            C        	ELSEIF	REG2 < 0XA0
   519            C        		BANK	3
   520            C        		MOV	A, REG2 - 0X60
   521            C        		FADD	REG1,A
   522            C        	ELSE
   523            C        		MESSAGE "WARRING: OUT OF BANK !"
   524            C        	ENDIF
   525            C        	ENDM
   526            C        
   527            C        FADDA	MACRO	REG1,@VALUE	; C4
   528            C        	IF	REG1 < 0x40
   529            C        		BANK	0
   530            C        		MOV	A,@VALUE
   531            C        		ADD	A,REG1
   532            C        	ELSEIF	REG1 < 0X60
   533            C        		BANK	1
   534            C        		MOV	A,@VALUE
   535            C        		ADD	A,REG1 - 0X20
   536            C        	ELSEIF	REG1 < 0X80
   537            C        		BANK	2
   538            C        		MOV	A,@VALUE
   539            C        		ADD	A,REG1 - 0X40
   540            C        	ELSEIF	REG1 < 0XA0
   541            C        		BANK	3
   542            C        		MOV	A,@VALUE
   543            C        		ADD	A,REG1 - 0X60
   544            C        	ELSE
   545            C        		MESSAGE "WARRING: OUT OF BANK !"
   546            C        	ENDIF
   547            C        	ENDM
   548            C        
   549            C        FADDA	MACRO	REG1,REG2	; C6
   550            C        	IF	REG2 < 0x40
   551            C        		BANK	0
   552            C        		MOV	A, REG2
   553            C        		FADD	A,REG1
   554            C        	ELSEIF	REG2 < 0X60
   555            C        		BANK	1
   556            C        		MOV	A, REG2 - 0X20
   557            C        		FADD 	A,REG1
   558            C        	ELSEIF	REG2 < 0X80
   559            C        		BANK	2
   560            C        		MOV	A, REG2 - 0X40
   561            C        		FADD	A,REG1
   562            C        	ELSEIF	REG2 < 0XA0
   563            C        		BANK	3
   564            C        		MOV	A, REG2 - 0X60
   565            C        		FADD	A,REG1
   566            C        	ELSE
   567            C        		MESSAGE "WARRING: OUT OF BANK !"
   568            C        	ENDIF
   569            C        	ENDM
   570            C        
   571            C        FSUB	MACRO	A,REG		; C3
   572            C        	IF	REG < 0x40
   573            C        		BANK	0
   574            C        		SUB	A,REG
   575            C        	ELSEIF	REG < 0X60
   576            C        		BANK	1
   577            C        		SUB	A,REG - 0X20
   578            C        	ELSEIF	REG < 0X80
   579            C        		BANK	2
   580            C        		SUB	A,REG - 0X40
   581            C        	ELSEIF	REG < 0XA0
   582            C        		BANK	3
   583            C        		SUB	A,REG - 0X60
   584            C        	ELSE
   585            C        		MESSAGE "WARRING: OUT OF BANK !"
   586            C        	ENDIF
   587            C        	ENDM
   588            C        
   589            C        FSUB	MACRO	REG,A		;C3
   590            C        	IF	REG < 0x40
   591            C        		BANK	0
   592            C        		SUB	REG,A
   593            C        	ELSEIF	REG < 0X60
   594            C        		BANK	1
   595            C        		SUB	REG - 0X20,A
   596            C        	ELSEIF	REG < 0X80
   597            C        		BANK	2
   598            C        		SUB	REG - 0X40,A
   599            C        	ELSEIF	REG < 0XA0
   600            C        		BANK	3
   601            C        		SUB	REG - 0X60,A
   602            C        	ELSE
   603            C        		MESSAGE "WARRING: OUT OF BANK !"
   604            C        	ENDIF
   605            C        	ENDM
   606            C        
   607            C        FSUB	MACRO	REG1,@VALUE	; C4
   608            C        	IF	REG1 < 0x40
   609            C        		BANK	0
   610            C        		MOV	A,@VALUE
   611            C        		SUB	REG1,A
   612            C        	ELSEIF	REG1 < 0X60
   613            C        		BANK	1
   614            C        		MOV	A,@VALUE
   615            C        		SUB	REG1 - 0X20,A
   616            C        	ELSEIF	REG1 < 0X80
   617            C        		BANK	2
   618            C        		MOV	A,@VALUE
   619            C        		SUB	REG1 - 0X40,A
   620            C        	ELSEIF	REG1 < 0XA0
   621            C        		BANK	3
   622            C        		MOV	A,@VALUE
   623            C        		SUB	REG1 - 0X60,A
   624            C        	ELSE
   625            C        		MESSAGE "WARRING: OUT OF BANK !"
   626            C        	ENDIF
   627            C        	ENDM
   628            C        
   629            C        FSUB	MACRO	REG1,REG2	; C6
   630            C        	IF	REG2 < 0x40
   631            C        		BANK	0
   632            C        		MOV	A, REG2
   633            C        		FSUB	REG1,A
   634            C        	ELSEIF	REG2 < 0X60
   635            C        		BANK	1
   636            C        		MOV	A, REG2 - 0X20
   637            C        		FSUB 	REG1,A
   638            C        	ELSEIF	REG2 < 0X80
   639            C        		BANK	2
   640            C        		MOV	A, REG2 - 0X40
   641            C        		FSUB	REG1,A
   642            C        	ELSEIF	REG2 < 0XA0
   643            C        		BANK	3
   644            C        		MOV	A, REG2 - 0X60
   645            C        		FSUB	REG1,A
   646            C        	ELSE
   647            C        		MESSAGE "WARRING: OUT OF BANK !"
   648            C        	ENDIF
   649            C        	ENDM
   650            C        
   651            C        FSUBA	MACRO	REG1,@VALUE	; C4
   652            C        	IF	REG1 < 0x40
   653            C        		BANK	0
   654            C        		MOV	A,@VALUE
   655            C        		SUB	A,REG1
   656            C        	ELSEIF	REG1 < 0X60
   657            C        		BANK	1
   658            C        		MOV	A,@VALUE
   659            C        		SUB	A,REG1 - 0X20
   660            C        	ELSEIF	REG1 < 0X80
   661            C        		BANK	2
   662            C        		MOV	A,@VALUE
   663            C        		SUB	A,REG1 - 0X40
   664            C        	ELSEIF	REG1 < 0XA0
   665            C        		BANK	3
   666            C        		MOV	A,@VALUE
   667            C        		SUB	A,REG1 - 0X60
   668            C        	ELSE
   669            C        		MESSAGE "WARRING: OUT OF BANK !"
   670            C        	ENDIF
   671            C        	ENDM
   672            C        
   673            C        FSUBA	MACRO	REG1,REG2	; C6
   674            C        	IF	REG2 < 0x40
   675            C        		BANK	0
   676            C        		MOV	A, REG2
   677            C        		FSUB	A,REG1
   678            C        	ELSEIF	REG2 < 0X60
   679            C        		BANK	1
   680            C        		MOV	A, REG2 - 0X20
   681            C        		FSUB 	A,REG1
   682            C        	ELSEIF	REG2 < 0X80
   683            C        		BANK	2
   684            C        		MOV	A, REG2 - 0X40
   685            C        		FSUB	A,REG1
   686            C        	ELSEIF	REG2 < 0XA0
   687            C        		BANK	3
   688            C        		MOV	A, REG2 - 0X60
   689            C        		FSUB	A,REG1
   690            C        	ELSE
   691            C        		MESSAGE "WARRING: OUT OF BANK !"
   692            C        	ENDIF
   693            C        	ENDM
   694            C        
   695            C        ; --------------------------------------
   696            C        ; 逻辑运算指令
   697            C        
   698            C        AND	MACRO	REG1,@VALUE	; C2
   699            C        	MOV	A,@VALUE
   700            C        	AND	REG1,A
   701            C        	ENDM
   702            C        
   703            C        AND	MACRO	REG1,REG2	; C2
   704            C        	MOV	A,REG2
   705            C        	AND	REG1,A
   706            C        	ENDM
   707            C        
   708            C        ANDA	MACRO	REG1,@VALUE	; C2
   709            C        	MOV	A,@VALUE
   710            C        	AND	A,REG1
   711            C        	ENDM
   712            C        
   713            C        ANDA	MACRO	REG1,REG2	; C2
   714            C        	MOV	A,REG2
   715            C        	AND	A,REG1
   716            C        	ENDM
   717            C        
   718            C        OR	MACRO	REG1,@VALUE	; C2
   719            C        	MOV	A,@VALUE
   720            C        	OR	REG1,A
   721            C        	ENDM
   722            C        
   723            C        OR	MACRO	REG1,REG2	; C2
   724            C        	MOV	A,REG2
   725            C        	OR	REG1,A
   726            C        	ENDM
   727            C        
   728            C        ORA	MACRO	REG1,@VALUE	; C2
   729            C        	MOV	A,@VALUE
   730            C        	OR	A,REG1
   731            C        	ENDM
   732            C        
   733            C        ORA	MACRO	REG1,REG2	; C2
   734            C        	MOV	A,REG2
   735            C        	OR	A,REG1
   736            C        	ENDM
   737            C        
   738            C        XOR	MACRO	REG1,@VALUE	; C2
   739            C        	MOV	A,@VALUE
   740            C        	XOR	REG1,A
   741            C        	ENDM
   742            C        
   743            C        XOR	MACRO	REG1,REG2	; C2
   744            C        	MOV	A,REG2
   745            C        	XOR	REG1,A
   746            C        	ENDM
   747            C        
   748            C        XORA	MACRO	REG1,@VALUE	; C2
   749            C        	MOV	A,@VALUE
   750            C        	XOR	A,REG1
   751            C        	ENDM
   752            C        
   753            C        XORA	MACRO	REG1,REG2	; C2
   754            C        	MOV	A,REG2
   755            C        	XOR	A,REG1
   756            C        	ENDM
   757            C        
   758            C        FAND	MACRO	A,REG		; C3
   759            C        	IF	REG < 0x40
   760            C        		BANK	0
   761            C        		AND	A,REG
   762            C        	ELSEIF	REG < 0X60
   763            C        		BANK	1
   764            C        		AND	A,REG - 0X20
   765            C        	ELSEIF	REG < 0X80
   766            C        		BANK	2
   767            C        		AND	A,REG - 0X40
   768            C        	ELSEIF	REG < 0XA0
   769            C        		BANK	3
   770            C        		AND	A,REG - 0X60
   771            C        	ELSE
   772            C        		MESSAGE "WARRING: OUT OF BANK !"
   773            C        	ENDIF
   774            C        	ENDM
   775            C        
   776            C        FAND	MACRO	REG,A		;C3
   777            C        	IF	REG < 0x40
   778            C        		BANK	0
   779            C        		AND	REG,A
   780            C        	ELSEIF	REG < 0X60
   781            C        		BANK	1
   782            C        		AND	REG - 0X20,A
   783            C        	ELSEIF	REG < 0X80
   784            C        		BANK	2
   785            C        		AND	REG - 0X40,A
   786            C        	ELSEIF	REG < 0XA0
   787            C        		BANK	3
   788            C        		AND	REG - 0X60,A
   789            C        	ELSE
   790            C        		MESSAGE "WARRING: OUT OF BANK !"
   791            C        	ENDIF
   792            C        	ENDM
   793            C        
   794            C        FAND	MACRO	REG1,@VALUE	; C4
   795            C        	IF	REG1 < 0x40
   796            C        		BANK	0
   797            C        		MOV	A,@VALUE
   798            C        		AND	REG1,A
   799            C        	ELSEIF	REG1 < 0X60
   800            C        		BANK	1
   801            C        		MOV	A,@VALUE
   802            C        		AND	REG1 - 0X20,A
   803            C        	ELSEIF	REG1 < 0X80
   804            C        		BANK	2
   805            C        		MOV	A,@VALUE
   806            C        		AND	REG1 - 0X40,A
   807            C        	ELSEIF	REG1 < 0XA0
   808            C        		BANK	3
   809            C        		MOV	A,@VALUE
   810            C        		AND	REG1 - 0X60,A
   811            C        	ELSE
   812            C        		MESSAGE "WARRING: OUT OF BANK !"
   813            C        	ENDIF
   814            C        	ENDM
   815            C        
   816            C        FAND	MACRO	REG1,REG2	; C6
   817            C        	IF	REG2 < 0x40
   818            C        		BANK	0
   819            C        		MOV	A, REG2
   820            C        		FAND	REG1,A
   821            C        	ELSEIF	REG2 < 0X60
   822            C        		BANK	1
   823            C        		MOV	A, REG2 - 0X20
   824            C        		FAND 	REG1,A
   825            C        	ELSEIF	REG2 < 0X80
   826            C        		BANK	2
   827            C        		MOV	A, REG2 - 0X40
   828            C        		FAND	REG1,A
   829            C        	ELSEIF	REG2 < 0XA0
   830            C        		BANK	3
   831            C        		MOV	A, REG2 - 0X60
   832            C        		FAND	REG1,A
   833            C        	ELSE
   834            C        		MESSAGE "WARRING: OUT OF BANK !"
   835            C        	ENDIF
   836            C        	ENDM
   837            C        
   838            C        FANDA	MACRO	REG1,@VALUE	; C4
   839            C        	IF	REG1 < 0x40
   840            C        		BANK	0
   841            C        		MOV	A,@VALUE
   842            C        		AND	A,REG1
   843            C        	ELSEIF	REG1 < 0X60
   844            C        		BANK	1
   845            C        		MOV	A,@VALUE
   846            C        		AND	A,REG1 - 0X20
   847            C        	ELSEIF	REG1 < 0X80
   848            C        		BANK	2
   849            C        		MOV	A,@VALUE
   850            C        		AND	A,REG1 - 0X40
   851            C        	ELSEIF	REG1 < 0XA0
   852            C        		BANK	3
   853            C        		MOV	A,@VALUE
   854            C        		AND	A,REG1 - 0X60
   855            C        	ELSE
   856            C        		MESSAGE "WARRING: OUT OF BANK !"
   857            C        	ENDIF
   858            C        	ENDM
   859            C        
   860            C        FANDA	MACRO	REG1,REG2	; C6
   861            C        	IF	REG2 < 0x40
   862            C        		BANK	0
   863            C        		MOV	A, REG2
   864            C        		FAND	A,REG1
   865            C        	ELSEIF	REG2 < 0X60
   866            C        		BANK	1
   867            C        		MOV	A, REG2 - 0X20
   868            C        		FAND 	A,REG1
   869            C        	ELSEIF	REG2 < 0X80
   870            C        		BANK	2
   871            C        		MOV	A, REG2 - 0X40
   872            C        		FAND	A,REG1
   873            C        	ELSEIF	REG2 < 0XA0
   874            C        		BANK	3
   875            C        		MOV	A, REG2 - 0X60
   876            C        		FAND	A,REG1
   877            C        	ELSE
   878            C        		MESSAGE "WARRING: OUT OF BANK !"
   879            C        	ENDIF
   880            C        	ENDM
   881            C        
   882            C        FOR	MACRO	A,REG		; C3
   883            C        	IF	REG < 0x40
   884            C        		BANK	0
   885            C        		OR	A,REG
   886            C        	ELSEIF	REG < 0X60
   887            C        		BANK	1
   888            C        		OR	A,REG - 0X20
   889            C        	ELSEIF	REG < 0X80
   890            C        		BANK	2
   891            C        		OR	A,REG - 0X40
   892            C        	ELSEIF	REG < 0XA0
   893            C        		BANK	3
   894            C        		OR	A,REG - 0X60
   895            C        	ELSE
   896            C        		MESSAGE "WARRING: OUT OF BANK !"
   897            C        	ENDIF
   898            C        	ENDM
   899            C        
   900            C        FOR	MACRO	REG,A		;C3
   901            C        	IF	REG < 0x40
   902            C        		BANK	0
   903            C        		OR	REG,A
   904            C        	ELSEIF	REG < 0X60
   905            C        		BANK	1
   906            C        		OR	REG - 0X20,A
   907            C        	ELSEIF	REG < 0X80
   908            C        		BANK	2
   909            C        		OR	REG - 0X40,A
   910            C        	ELSEIF	REG < 0XA0
   911            C        		BANK	3
   912            C        		OR	REG - 0X60,A
   913            C        	ELSE
   914            C        		MESSAGE "WARRING: OUT OF BANK !"
   915            C        	ENDIF
   916            C        	ENDM
   917            C        
   918            C        FOR	MACRO	REG1,@VALUE	; C4
   919            C        	IF	REG1 < 0x40
   920            C        		BANK	0
   921            C        		MOV	A,@VALUE
   922            C        		OR	REG1,A
   923            C        	ELSEIF	REG1 < 0X60
   924            C        		BANK	1
   925            C        		MOV	A,@VALUE
   926            C        		OR	REG1 - 0X20,A
   927            C        	ELSEIF	REG1 < 0X80
   928            C        		BANK	2
   929            C        		MOV	A,@VALUE
   930            C        		OR	REG1 - 0X40,A
   931            C        	ELSEIF	REG1 < 0XA0
   932            C        		BANK	3
   933            C        		MOV	A,@VALUE
   934            C        		OR	REG1 - 0X60,A
   935            C        	ELSE
   936            C        		MESSAGE "WARRING: OUT OF BANK !"
   937            C        	ENDIF
   938            C        	ENDM
   939            C        
   940            C        FOR	MACRO	REG1,REG2	; C6
   941            C        	IF	REG2 < 0x40
   942            C        		BANK	0
   943            C        		MOV	A, REG2
   944            C        		FOR	REG1,A
   945            C        	ELSEIF	REG2 < 0X60
   946            C        		BANK	1
   947            C        		MOV	A, REG2 - 0X20
   948            C        		FOR 	REG1,A
   949            C        	ELSEIF	REG2 < 0X80
   950            C        		BANK	2
   951            C        		MOV	A, REG2 - 0X40
   952            C        		FOR	REG1,A
   953            C        	ELSEIF	REG2 < 0XA0
   954            C        		BANK	3
   955            C        		MOV	A, REG2 - 0X60
   956            C        		FOR	REG1,A
   957            C        	ELSE
   958            C        		MESSAGE "WARRING: OUT OF BANK !"
   959            C        	ENDIF
   960            C        	ENDM
   961            C        
   962            C        FORA	MACRO	REG1,@VALUE	; C4
   963            C        	IF	REG1 < 0x40
   964            C        		BANK	0
   965            C        		MOV	A,@VALUE
   966            C        		OR	A,REG1
   967            C        	ELSEIF	REG1 < 0X60
   968            C        		BANK	1
   969            C        		MOV	A,@VALUE
   970            C        		OR	A,REG1 - 0X20
   971            C        	ELSEIF	REG1 < 0X80
   972            C        		BANK	2
   973            C        		MOV	A,@VALUE
   974            C        		OR	A,REG1 - 0X40
   975            C        	ELSEIF	REG1 < 0XA0
   976            C        		BANK	3
   977            C        		MOV	A,@VALUE
   978            C        		OR	A,REG1 - 0X60
   979            C        	ELSE
   980            C        		MESSAGE "WARRING: OUT OF BANK !"
   981            C        	ENDIF
   982            C        	ENDM
   983            C        
   984            C        FORA	MACRO	REG1,REG2	; C6
   985            C        	IF	REG2 < 0x40
   986            C        		BANK	0
   987            C        		MOV	A, REG2
   988            C        		FOR	A,REG1
   989            C        	ELSEIF	REG2 < 0X60
   990            C        		BANK	1
   991            C        		MOV	A, REG2 - 0X20
   992            C        		FOR 	A,REG1
   993            C        	ELSEIF	REG2 < 0X80
   994            C        		BANK	2
   995            C        		MOV	A, REG2 - 0X40
   996            C        		FOR	A,REG1
   997            C        	ELSEIF	REG2 < 0XA0
   998            C        		BANK	3
   999            C        		MOV	A, REG2 - 0X60
  1000            C        		FOR	A,REG1
  1001            C        	ELSE
  1002            C        		MESSAGE "WARRING: OUT OF BANK !"
  1003            C        	ENDIF
  1004            C        	ENDM
  1005            C        
  1006            C        FXOR	MACRO	A,REG		; C3
  1007            C        	IF	REG < 0x40
  1008            C        		BANK	0
  1009            C        		XOR	A,REG
  1010            C        	ELSEIF	REG < 0X60
  1011            C        		BANK	1
  1012            C        		XOR	A,REG - 0X20
  1013            C        	ELSEIF	REG < 0X80
  1014            C        		BANK	2
  1015            C        		XOR	A,REG - 0X40
  1016            C        	ELSEIF	REG < 0XA0
  1017            C        		BANK	3
  1018            C        		XOR	A,REG - 0X60
  1019            C        	ELSE
  1020            C        		MESSAGE "WARRING: OUT OF BANK !"
  1021            C        	ENDIF
  1022            C        	ENDM
  1023            C        
  1024            C        FXOR	MACRO	REG,A		;C3
  1025            C        	IF	REG < 0x40
  1026            C        		BANK	0
  1027            C        		XOR	REG,A
  1028            C        	ELSEIF	REG < 0X60
  1029            C        		BANK	1
  1030            C        		XOR	REG - 0X20,A
  1031            C        	ELSEIF	REG < 0X80
  1032            C        		BANK	2
  1033            C        		XOR	REG - 0X40,A
  1034            C        	ELSEIF	REG < 0XA0
  1035            C        		BANK	3
  1036            C        		XOR	REG - 0X60,A
  1037            C        	ELSE
  1038            C        		MESSAGE "WARRING: OUT OF BANK !"
  1039            C        	ENDIF
  1040            C        	ENDM
  1041            C        
  1042            C        FXOR	MACRO	REG1,@VALUE	; C4
  1043            C        	IF	REG1 < 0x40
  1044            C        		BANK	0
  1045            C        		MOV	A,@VALUE
  1046            C        		XOR	REG1,A
  1047            C        	ELSEIF	REG1 < 0X60
  1048            C        		BANK	1
  1049            C        		MOV	A,@VALUE
  1050            C        		XOR	REG1 - 0X20,A
  1051            C        	ELSEIF	REG1 < 0X80
  1052            C        		BANK	2
  1053            C        		MOV	A,@VALUE
  1054            C        		XOR	REG1 - 0X40,A
  1055            C        	ELSEIF	REG1 < 0XA0
  1056            C        		BANK	3
  1057            C        		MOV	A,@VALUE
  1058            C        		XOR	REG1 - 0X60,A
  1059            C        	ELSE
  1060            C        		MESSAGE "WARRING: OUT OF BANK !"
  1061            C        	ENDIF
  1062            C        	ENDM
  1063            C        
  1064            C        FXOR	MACRO	REG1,REG2	; C6
  1065            C        	IF	REG2 < 0x40
  1066            C        		BANK	0
  1067            C        		MOV	A, REG2
  1068            C        		FXOR	REG1,A
  1069            C        	ELSEIF	REG2 < 0X60
  1070            C        		BANK	1
  1071            C        		MOV	A, REG2 - 0X20
  1072            C        		FXOR 	REG1,A
  1073            C        	ELSEIF	REG2 < 0X80
  1074            C        		BANK	2
  1075            C        		MOV	A, REG2 - 0X40
  1076            C        		FXOR	REG1,A
  1077            C        	ELSEIF	REG2 < 0XA0
  1078            C        		BANK	3
  1079            C        		MOV	A, REG2 - 0X60
  1080            C        		FXOR	REG1,A
  1081            C        	ELSE
  1082            C        		MESSAGE "WARRING: OUT OF BANK !"
  1083            C        	ENDIF
  1084            C        	ENDM
  1085            C        
  1086            C        FXORA	MACRO	REG1,@VALUE	; C4
  1087            C        	IF	REG1 < 0x40
  1088            C        		BANK	0
  1089            C        		MOV	A,@VALUE
  1090            C        		XOR	A,REG1
  1091            C        	ELSEIF	REG1 < 0X60
  1092            C        		BANK	1
  1093            C        		MOV	A,@VALUE
  1094            C        		XOR	A,REG1 - 0X20
  1095            C        	ELSEIF	REG1 < 0X80
  1096            C        		BANK	2
  1097            C        		MOV	A,@VALUE
  1098            C        		XOR	A,REG1 - 0X40
  1099            C        	ELSEIF	REG1 < 0XA0
  1100            C        		BANK	3
  1101            C        		MOV	A,@VALUE
  1102            C        		XOR	A,REG1 - 0X60
  1103            C        	ELSE
  1104            C        		MESSAGE "WARRING: OUT OF BANK !"
  1105            C        	ENDIF
  1106            C        	ENDM
  1107            C        
  1108            C        FXORA	MACRO	REG1,REG2	; C6
  1109            C        	IF	REG2 < 0x40
  1110            C        		BANK	0
  1111            C        		MOV	A, REG2
  1112            C        		FXOR	A,REG1
  1113            C        	ELSEIF	REG2 < 0X60
  1114            C        		BANK	1
  1115            C        		MOV	A, REG2 - 0X20
  1116            C        		FXOR 	A,REG1
  1117            C        	ELSEIF	REG2 < 0X80
  1118            C        		BANK	2
  1119            C        		MOV	A, REG2 - 0X40
  1120            C        		FXOR	A,REG1
  1121            C        	ELSEIF	REG2 < 0XA0
  1122            C        		BANK	3
  1123            C        		MOV	A, REG2 - 0X60
  1124            C        		FXOR	A,REG1
  1125            C        	ELSE
  1126            C        		MESSAGE "WARRING: OUT OF BANK !"
  1127            C        	ENDIF
  1128            C        	ENDM
  1129            C        
  1130            C        
    11                     include "main.inc"
     1            C        
     2            C        /*****************寄存器定义*********************/
     3            C        
     4       0010 C        int_temp0	==	0x10
     5       0011 C        int_temp1	==	0x11
     6       0012 C        int_temp2	==	0x12
     7       0013 C        int_temp3	==	0x13
     8       0014 C        int_temp4	==	0x14
     9       0015 C        int_temp5	==	0x15
    10       0016 C        temp0		==	0x16
    11       0017 C        temp1		==	0x17
    12       0018 C        temp2		==	0x18
    13       0019 C        temp3		==	0x19
    14       001A C        temp4		==	0x1a
    15       001B C        TEMP5		==	0X1b
    16       001C C        FSK_FG		==	0X1c
    17       001D C        STAMP_FG	==	0X1d			; 印花标志寄存器
    18       001E C        SYS_FG		==	0X1e
    19       001F C        EVENT		==	0X1F
    20            C        
    21            C        ;BANK 0
    22       0020 C        BANK0_TEMP0	==	0X20
    23       0021 C        BANK0_TEMP1	==	0X21
    24       0022 C        BANK0_TEMP2	==	0X22
    25       0023 C        BANK0_TEMP3	==	0X23
    26       0024 C        YEAR_REG	==	0X24
    27       0025 C        MONTH_REG	==	0X25
    28       0026 C        DAY_REG		==	0X26
    29       0027 C        WEEK_REG	==	0X27
    30       0028 C        HOUR_REG	==	0X28
    31       0029 C        MIN_REG		==	0X29
    32       002A C        SEC_REG		==	0X2A
    33            C        
    34       002B C        TOTAL_CALL	==	0X2B
    35       002C C        NEW_CALL	==	0X2C
    36       002D C        TOTAL_MSG	==	0X2D
    37       002E C        NEW_MSG		==	0X2E
    38       002F C        TOTAL_BOOK	==	0X2F
    39            C        
    40            C        ;LCD_CONTRAST	==	0X30			; 低4位为对比度
    41            C        ;CODE1		==	0X30			; 高4位为密码1
    42            C        ;CODE23		==	0X31
    43            C        
    44       0030 C        LCALL12		==	0X30
    45       0031 C        LCALL34		==	0X31
    46       0032 C        LCALL5		==	0X32
    47            C        
    48       0034 C        TMR		==	0X34
    49       0035 C        TMR_DELAY	==	0X35
    50       0036 C        TMR_FLASH	==	0X36
    51       0037 C        TMR_SER		==	0X37
    52       0038 C        TMR_NAME	==	0X38
    53       0039 C        MENU_STATE	==	0X39
    54            C        
    55       003A C        CONT		==	0X3A
    56       003B C        STR_REG		==	0X3B
    57            C        ;SER_FLAG	==	0X3C
    58            C        ;SER_FLAG	==	0X3D
    59            C        ;SER_FLAG	==	0X3E
    60            C        ;SER_DATA	==	0X3F
    61            C        
    62            C        
    63            C        ;BANK 1
    64       0020 C        BANK1_TEMP0	==	0X20
    65       0021 C        BANK1_TEMP1	==	0X21
    66       0022 C        BANK1_TEMP2	==	0X22
    67       0023 C        BANK1_TEMP3	==	0X23
    68       0024 C        FSK_BYTE	==	0X24
    69       0025 C        FSK_SUM		==	0X25
    70       0026 C        FSK_LENGTH	==	0X26
    71       0027 C        FSK_COUNT	==	0X27
    72       0028 C        FSK_TMP		==	0X28
    73       0029 C        FSK_ADR		==	0X29
    74       002A C        DTMF_ADR	==	0X2A
    75            C        
    76       002B C        TIME_MS		==	0X2B
    77       002C C        TIME_SEC	==	0X2C
    78       002D C        TIME_MIN	==	0X2D
    79       002E C        TIME_HOUR	==	0X2E
    80       002F C        TMR_LINEDET	==	0X2F
    81            C        
    82       0030 C        TMR_PROTOCOL	==	0X30
    83            C        
    84       0031 C        R1_TEST_L111	==	0X31
    85            C        
    86       0032 C        R1_SYS_FG	==	0X32
    87            C        
    88       0033 C        R1_CD		==	0X33
    89       0034 C        R1_TMR_DTMF	==	0X34
    90            C        
    91       0035 C        R1_LCD_CONTRAST	==	0X35
    92       0035 C        R1_CODE1	==	0X35
    93       0036 C        R1_CODE23	==	0X36
    94            C        
    95            C        
    96            C        
    97            C        
    98            C        /*****************常数定义***********************/
    99            C        
   100       0080 C        LCD_CTRL	==	128
   101       00AC C        VGA_ADDR	==	172
   102            C        
   103       0000 C        FSK_ADDR	==	0
   104       0000 C        DTMF_ADDR	==	0
   105       003C C        CID_ADDR	==	60
   106       005E C        EDIT_ADDR	==	94
   107            C        
   108       0084 C        DIAL_ADDR	==	132
   109            C        
   110       0099 C        TCP_ADDR	==	153
   111            C        
   112            C        /*****************标志位定义*********************/
   113            C        
   114            C        ; SYS_FG
   115       0000 C        LANGUAGE	==	0			; 语言标志
   116       0001 C        NEWCALL		==	1			; 
   117       0002 C        STAMP		==	2			; 印花被改变
   118       0003 C        SYS_CLOCK	==	3			; 第一行数字被改变
   119       0004 C        LEEP_YEAR	==	4
   120       0005 C        LOCK_TOPLINE	==	5
   121       0006 C        LOCK_STR	==	6
   122       0007 C        TIME		==	7			; 计时
   123            C        
   124            C        ; R1_SYS_FG
   125       0000 C        TIMEFORMAT	==	0			; 时间制式
   126       0001 C        HOOKSTATUS	==	1			; hook状态
   127            C        
   128            C        
   129            C        ; EVENT
   130       0007 C        TEST		==	7
   131            C        ; STAMP_FG
   132            C        ;.0		REPEAT
   133            C        ;.1		NEW
   134            C        ;.2		battery
   135            C        ;.3		MEMO
   136            C        ;.4		second
   137            C        ;.5		/
   138            C        ;.6		spk
   139            C        ;.7		CALL
   140       0000 C        STAMP_REPEAT	==	0
   141       0001 C        STAMP_NEW	==	1
   142       0002 C        STAMP_BAT	==	2
   143       0003 C        STAMP_MEMO	==	3
   144       0004 C        STAMP_SEC	==	4
   145       0005 C        STAMP_SLASH	==	5
   146       0006 C        STAMP_SPK	==	6
   147       0007 C        STAMP_CALL	==	7
   148            C        
   149            C        ; FSK_FG
   150            C        ;TCC_400U	==	0
   151       0000 C        FSK_VALID	==	0
   152       0001 C        FSK_SUC		==	1			; FSK接收完毕
   153       0002 C        FSK_ERR		==	2			; FSK接收错误
   154       0003 C        DTMF_START	==	3
   155       0004 C        DTMF_SUC	==	4			; DTMF接收完毕
   156       0005 C        ERR_NUM		==	5			; 号码错误
   157       0006 C        ERR_NAME	==	6			; 姓名错误
   158       0007 C        CALLIN		==	7			; 有来电
   159            C        
   160            C        
   161            C        /***************************************
   162            C        CID BANK 规划
   163            C        
   164            C        BANK0:
   165            C        0~127	LCD RAM映射
   166            C        LCD_CTRL == 128
   167            C        0	显示控制
   168            C        1	印花寄存器
   169            C        2~11	第一行数字寄存器
   170            C        12~27	第二行数字寄存器
   171            C        28~43	第三行字符寄存器
   172            C        VGA_ADDR == 172
   173            C        0	印花控制器			; 暂时不用
   174            C        1	显示数据印花缓冲器		; 不用
   175            C        2	第一行控制器			; 不用
   176            C        3~12	显示数据第一行数字缓冲器	; 不用
   177            C        13	第二行控制器
   178            C        14~45	显示数据第二行数字缓冲器	缓冲器大小设为32个，但显示前16个
   179            C        46	第三行控制器
   180            C        47~78	显示数据第三行字符缓冲器	缓冲器大小设为32个，但显示前16个
   181            C        ; ------------------------------------------------
   182            C        BANK1:
   183            C        FSK_ADDR == 0
   184            C        0~59	FSK 接收数据区。（消息类型-消息长度-消息字/消息类型-消息长度-参数类型-参数长度-参数字）
   185            C        DTMF_ADDR == 0
   186            C        0~19	DTMF 接收数据区。
   187            C        
   188            C        CID_ADDR == 60
   189            C        从交换机接收到的信息解码之后得到的信息：
   190            C        从93L111接收到的号码信息：
   191            C        预发送给93L111的号码信息：
   192            C        0	CID_CTRL
   193            C        	.7	是否要屏蔽第一行
   194            C        	.6~.5	显示模式
   195            C        1	信息标志位
   196            C        	.7	备用（0）
   197            C        	.1	是否新来电
   198            C        	.0	是否REPEAT
   199            C        2	号码长度 1~16;0x00未解码/没有号码;0x43('C')投币电话呼叫;0x49('I')不带号码的国际呼叫;0x4F('O')不带号码;0x50('P')私密;0xFF解码错误;祈
   200            C        3~10	电话号码，一个字节存放两位，不够部分为F。
   201            C        11	姓名长度 1~16;0x00未解码/没有号码;0x4F('O')不带姓名;0x50('P')私密;0xFF解码错误;其它保留。
   202            C        12~27	姓名，不够部分为FF。
   203            C        28	时间长度 4;0X00/0XFF没有时间信息。
   204            C        29~32	时间信息（月日时分）
   205            C        33	OGM号/序号。
   206            C        
   207            C        COMMAND_ADDR == 94
   208            C        0	控制器
   209            C        1~20	提供20个接收处理命令区。
   210            C        
   211            C        EDIT_ADDR == 94
   212            C        编辑区
   213            C        0	印花
   214            C        1~5	第一行
   215            C        6~21	第二行
   216            C        22~37	第三行
   217            C        
   218            C        DIAL_ADDR == 132
   219            C        0	拨号控制器
   220            C        .7	1
   221            C        .6	0/1	START/CONTINUE
   222            C        .5	0/1	PAUSE/DIAL
   223            C        .4~.0	->
   224            C        1~20	号码缓冲区
   225            C        
   226            C        TCP_ADDR == 153
   227            C        0	TCP控制器
   228            C        .7	0
   229            C        
   230            C        1~70
   231            C        153由发送 和接收 共用缓冲区。
   232            C        
   233            C        224~255	通讯使用
   234            C        ****************************************/
   235            C        
    12                     include	"math.inc"
     1       0016 C        GENE_A		==	TEMP0
     2       0017 C        GENE_B		==	TEMP1
     3       0018 C        RESULT		==	TEMP2
     4       0019 C        EXT_RESULT	==	TEMP3
     5       001A C        MATH_CONT	==	TEMP4
     6            C        
     7       0016 C        MOD_MIN		==	TEMP0
     8       0017 C        MOD_MAX		==	TEMP1
     9       0018 C        CURRENT_VALUE	==	TEMP2
    10       0019 C        INCREMENT	==	TEMP3
    11       001A C        MOD_TEMP	==	TEMP4
    13                     
    14                     ORG	0X0000
    15 00000 0000          	NOP
    16 00001 0000          	NOP
    17 00002 0000          	NOP
    18 00003 0000          	NOP
    19 00004 0000          	NOP
    20 00005 1594          	JMP	MAIN
    21 00006 0000          	NOP
    22 00007 0000          	NOP
    23                     
    24                     ORG	0X0008
    25 00008               INT_BEGIN:
    26 00008 0011          	DISI
    27 00009 0050          	MOV	INT_TEMP0,A
    28 0000A 0750          	SWAP	INT_TEMP0
    29                   M 	MOV	INT_TEMP1,_STATUS
       0000B 0403     1     MOV A, _STATUS 
       0000C 0051     1     MOV  INT_TEMP1 ,A
    30                   M 	MOV	INT_TEMP2,_RSR
       0000D 0404     1     MOV A, _RSR 
       0000E 0052     1     MOV  INT_TEMP2 ,A
    31                   M 	MOV	INT_TEMP3,_PPSR
       0000F 0405     1     MOV A, _PPSR 
       00010 0053     1     MOV  INT_TEMP3 ,A
    32                   M 	MOV	INT_TEMP4,_RC
       00011 040C     1     MOV A, _RC 
       00012 0054     1     MOV  INT_TEMP4 ,A
    33 00013 040B          	MOV	A,_RB			; 保存CID体
    34 00014 1A05          	AND	A,@0X05
    35 00015 0055          	MOV	INT_TEMP5,A
    36                     	
    37 00016 1E80          	PAGE	0
    38                   M 	BANK	0
       00017 0984     1     BC  _RSR , 6 
       00018 09C4     1     BC  _RSR , 7 
    39                     	
    40                     	;-------------------------------
    41                     ;	JPB	_FSR,2,INT_BEGIN_1
    42                     ;	CRAM	_R7,1
    43                     ;	JMP	INT_BEGIN_2
    44                     ;INT_BEGIN_1:
    45                     ;	SRAM	_R7,1
    46                     ;INT_BEGIN_2:
    47                     	;-------------------------------
    48                     	
    49                   M 	JPB	_ISR,6,INT_FSK
       00019 0D8F     1     JBC  _ISR , 6 
       0001A 1535     1     JMP  INT_FSK ,
    50                   M 	JPB	_ISR,0,INT_TCC
       0001B 0C0F     1     JBC  _ISR , 0 
       0001C 143A     1     JMP  INT_TCC ,
    51                   M 	JPB	_ISR,1,INT_0
       0001D 0C4F     1     JBC  _ISR , 1 
       0001E 148F     1     JMP  INT_0 ,
    52                   M 	JPB	_ISR,2,INT_1
       0001F 0C8F     1     JBC  _ISR , 2 
       00020 1492     1     JMP  INT_1 ,
    53                   M 	JPB	_ISR,3,INT_2
       00021 0CCF     1     JBC  _ISR , 3 
       00022 1495     1     JMP  INT_2 ,
    54                   M 	JPB	_ISR,4,INT_CNT1
       00023 0D0F     1     JBC  _ISR , 4 
       00024 1498     1     JMP  INT_CNT1 ,
    55                   M 	JPB	_ISR,5,INT_CNT2
       00025 0D4F     1     JBC  _ISR , 5 
       00026 14B9     1     JMP  INT_CNT2 ,
    56                   M 	JPB	_ISR,7,INT_STD
       00027 0DCF     1     JBC  _ISR , 7 
       00028 154D     1     JMP  INT_STD ,
    57 00029 1593          	JMP	INT_ERR
    58                     
    59 0002A               INT_END:
    60 0002A 040B          	MOV	A,_RB
    61 0002B 1AFA          	AND	A,@0XFA
    62 0002C 0395          	ADD	A,INT_TEMP5
    63 0002D 004B          	MOV	_RB,A
    64                   M 	MOV	_RC,INT_TEMP4
       0002E 0414     1     MOV A, INT_TEMP4 
       0002F 004C     1     MOV  _RC ,A
    65                   M 	MOV	_PPSR,INT_TEMP3
       00030 0413     1     MOV A, INT_TEMP3 
       00031 0045     1     MOV  _PPSR ,A
    66                   M 	MOV	_RSR,INT_TEMP2
       00032 0412     1     MOV A, INT_TEMP2 
       00033 0044     1     MOV  _RSR ,A
    67                   M 	MOV	_STATUS,INT_TEMP1
       00034 0411     1     MOV A, INT_TEMP1 
       00035 0043     1     MOV  _STATUS ,A
    68 00036 0710          	SWAPA	INT_TEMP0
    69 00037 0013          	RETI
    70                     
    71 00038               INT_TCC_END:
    72 00038 0567          	INC	FSK_COUNT
    73 00039 142A          	JMP	INT_END
    74                     
    75 0003A               INT_TCC:
    76                   M 	MOV	_ISR,@0XFE
       0003A 18FE     1     MOV A,@( 254 )
       0003B 004F     1     MOV  _ISR ,A
    77                     	;CRAM	_ISR,0
    78                     	
    79                     	;-------------------------------
    80                     ;	JPB	_R7,0,INT_TCC_1
    81                     ;	SRAM	_R7,0
    82                     ;	JMP	INT_TCC_2
    83                     ;INT_TCC_1:
    84                     ;	CRAM	_R7,0
    85                     ;INT_TCC_2:
    86                     	;-------------------------------
    87                   M 	BANK	1
       0003C 0B84     1     BS  _RSR , 6 
       0003D 09C4     1     BC  _RSR , 7 
    88                   M 	JPB	_FSR,1,INT_CHKCD_HI
       0003E 0C4A     1     JBC  _FSR , 1 
       0003F 152A     1     JMP  INT_CHKCD_HI ,
    89                   M 	ADD	_TCC,@(256-185)
       00040 1847     1     MOV A,@(( 256 - 185 ))
       00041 03C1     1     ADD  _TCC ,A
    90                     	
    91 00042 0427          	MOV	A,FSK_COUNT
    92                   M 	JPZ	INT_TCC_END
       00043 0C83     1     JBC  _STATUS , Z 
       00044 1438     1     JMP  INT_TCC_END ,
    93 00045               INT_TCC_FSK_DATA:
    94                   M 	SRAM	_STATUS,C
       00045 0A03     1     BS  _STATUS , C 
    95 00046 0E8A          	JBS	_FSR,2
    96                   M 	CRAM	_STATUS,C
       00047 0803     1     BC  _STATUS , C 
    97 00048 0668          	RRC	FSK_TMP
    98                     	
    99                   M 	SUBA	FSK_COUNT,@8
       00049 1808     1     MOV A,@( 8 )
       0004A 0127     1     SUB A, FSK_COUNT 
   100                   M 	JPNZ	INT_TCC_END
       0004B 0E83     1     JBS  _STATUS , Z 
       0004C 1438     1     JMP  INT_TCC_END ,
   101                     	
   102 0004D 00E7          	CLR	FSK_COUNT
   103                   M 	CRAM	FSK_FG,FSK_VALID
       0004E 081C     1     BC  FSK_FG , FSK_VALID 
   104                     	
   105 0004F 001F          	IOR	_IOCF
   106 00050 1AFE          	AND	A,@0XFE		; close TCC int
   107 00051 000F          	IOW	_IOCF
   108                     	
   109                     
   110                     	
   111 00052 0424          	MOV	A,FSK_BYTE
   112                   M 	JPZ	INT_RECOVER_TYPE
       00053 0C83     1     JBC  _STATUS , Z 
       00054 1459     1     JMP  INT_RECOVER_TYPE ,
   113 00055 1D01          	SUB	A,@1
   114                   M 	JPZ	INT_RECOVER_LENTH
       00056 0C83     1     JBC  _STATUS , Z 
       00057 146D     1     JMP  INT_RECOVER_LENTH ,
   115 00058 1470          	JMP	INT_RECOVER_OTHER
   116                     
   117 00059               INT_RECOVER_TYPE:
   118                   M 	SUBA	FSK_TMP,@0X80
       00059 1880     1     MOV A,@( 128 )
       0005A 0128     1     SUB A, FSK_TMP 
   119                   M 	JPZ	INT_RECOVER_TYPE_VALID
       0005B 0C83     1     JBC  _STATUS , Z 
       0005C 146A     1     JMP  INT_RECOVER_TYPE_VALID ,
   120                     	
   121                   M 	SUBA	FSK_TMP,@0X81
       0005D 1881     1     MOV A,@( 129 )
       0005E 0128     1     SUB A, FSK_TMP 
   122                   M 	JPZ	INT_RECOVER_TYPE_VALID
       0005F 0C83     1     JBC  _STATUS , Z 
       00060 146A     1     JMP  INT_RECOVER_TYPE_VALID ,
   123                     	
   124                   M 	SUBA	FSK_TMP,@0X82
       00061 1882     1     MOV A,@( 130 )
       00062 0128     1     SUB A, FSK_TMP 
   125                   M 	JPZ	INT_RECOVER_TYPE_VALID
       00063 0C83     1     JBC  _STATUS , Z 
       00064 146A     1     JMP  INT_RECOVER_TYPE_VALID ,
   126                     	
   127                   M 	SUBA	FSK_TMP,@0X04
       00065 1804     1     MOV A,@( 4 )
       00066 0128     1     SUB A, FSK_TMP 
   128                   M 	JPZ	INT_RECOVER_TYPE_VALID
       00067 0C83     1     JBC  _STATUS , Z 
       00068 146A     1     JMP  INT_RECOVER_TYPE_VALID ,
   129 00069 148D          	JMP	INT_RECOVER_TYPE_INVALID
   130 0006A               INT_RECOVER_TYPE_VALID:
   131                   M 	MOV	FSK_ADR,@FSK_ADDR	; 传送的第一个字节为消息类型
       0006A 1800     1     MOV A,@( FSK_ADDR )
       0006B 0069     1     MOV  FSK_ADR ,A
   132 0006C 1470          	JMP	INT_RECOVER_OTHER
   133                     
   134 0006D               INT_RECOVER_LENTH:
   135                   M 	MOV	FSK_LENGTH,FSK_TMP	; 消息类型之后的第一个字节是消息长度字
       0006D 0428     1     MOV A, FSK_TMP 
       0006E 0066     1     MOV  FSK_LENGTH ,A
   136 0006F 1470          	JMP	INT_RECOVER_OTHER
   137                     ;INT_RECOVER:
   138                     ;	MOV	FSK_ADR,@FSK_ADDR	; 传送的第一个字节为消息类型
   139                     ;	CLR	FSK_BYTE		; 初始化FSK_BYTE
   140                     
   141                     ;INT_RECOVERD:
   142                     ;	SUBA	FSK_BYTE,@1	; 消息类型之后的第一个字节是消息长度字
   143                     ;	JPNZ	INT_RECOVERD_OTHER
   144                     ;	MOV	FSK_LENGTH,FSK_TMP
   145                     	;SUB	A,@58
   146                     	;JPNC	INT_RECOVERD_ERR
   147                     	;SUBA	FSK_TMP,@2
   148                     	;JPNC	INT_RECOVERD_ERR
   149 00070               INT_RECOVER_OTHER:
   150 00070 0429          	MOV	A,FSK_ADR
   151 00071 1D3C          	SUB	A,@60
   152                   M 	JPNC	INT_END
       00072 0E03     1     JBS  _STATUS , C 
       00073 142A     1     JMP  INT_END ,
   153                   M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00074 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00075 088B     2     BC  _RB , 2 
   154                   M 	MOV	_RC,FSK_ADR
       00076 0429     1     MOV A, FSK_ADR 
       00077 004C     1     MOV  _RC ,A
   155                   M 	MOV	_RD,FSK_TMP
       00078 0428     1     MOV A, FSK_TMP 
       00079 004D     1     MOV  _RD ,A
   156 0007A 0569          	INC	FSK_ADR
   157 0007B 0564          	INC	FSK_BYTE
   158                     	;MOV	A,FSK_BYTE
   159                     	;SUB	A,@34
   160                     	;JBC	_STATUS,Z
   161                     	;NOP
   162                   M 	ADDA	FSK_LENGTH,@3
       0007C 1803     1     MOV A,@( 3 )
       0007D 03A6     1     ADD A, FSK_LENGTH 
   163 0007E 0124          	SUB	A,FSK_BYTE
   164                   M 	JPNZ	INT_END
       0007F 0E83     1     JBS  _STATUS , Z 
       00080 142A     1     JMP  INT_END ,
   165                     	
   166 00081 00E5          	CLR	FSK_SUM
   167 00082 054C          	INC	_RC
   168 00083               INT_CHECKSUM:			; 校验
   169 00083 01CC          	DEC	_RC
   170 00084 040D          	MOV	A,_RD
   171 00085 03E5          	ADD	FSK_SUM,A
   172 00086 01E4          	DEC	FSK_BYTE
   173                   M 	JPNZ	INT_CHECKSUM
       00087 0E83     1     JBS  _STATUS , Z 
       00088 1483     1     JMP  INT_CHECKSUM ,
   174                     	
   175 00089 0425          	MOV	A,FSK_SUM
   176                   M 	JPNZ	INT_CHECKSUM_ERR
       0008A 0E83     1     JBS  _STATUS , Z 
       0008B 148D     1     JMP  INT_CHECKSUM_ERR ,
   177                   M 	SRAM	FSK_FG,FSK_SUC
       0008C 0A5C     1     BS  FSK_FG , FSK_SUC 
   178                     	;JMP	INT_END
   179                     
   180 0008D               INT_RECOVER_TYPE_INVALID:
   181                     ; --------------
   182 0008D               INT_CHECKSUM_ERR:
   183 0008D 00E4          	CLR	FSK_BYTE
   184 0008E               INT_RECOVERD_ERR:
   185 0008E 152A          	JMP	INT_CHKCD_HI
   186                     ; --------------
   187                     
   188 0008F               INT_0:
   189                   M 	MOV	_ISR,@0XFD
       0008F 18FD     1     MOV A,@( 253 )
       00090 004F     1     MOV  _ISR ,A
   190                     	;CRAM	_ISR,1
   191 00091 142A          	JMP	INT_END
   192                     
   193 00092               INT_1:
   194                   M 	MOV	_ISR,@0XFB
       00092 18FB     1     MOV A,@( 251 )
       00093 004F     1     MOV  _ISR ,A
   195                     	;CRAM	_ISR,2
   196 00094 142A          	JMP	INT_END
   197                     
   198 00095               INT_2:
   199                   M 	MOV	_ISR,@0XF7
       00095 18F7     1     MOV A,@( 247 )
       00096 004F     1     MOV  _ISR ,A
   200                     	;CRAM	_ISR,3
   201 00097 142A          	JMP	INT_END
   202                     
   203 00098               INT_CNT1:			; 0.5S
   204                   M 	MOV	_ISR,@0XEF
       00098 18EF     1     MOV A,@( 239 )
       00099 004F     1     MOV  _ISR ,A
   205                     	;CRAM	_ISR,4
   206                     	
   207 0009A 056A          	INC	SEC_REG
   208                   M 	CLRC
       0009B 0803     1     BC  _STATUS , C 
   209 0009C 062A          	RRCA	SEC_REG
   210 0009D 1D3C          	SUB	A,@60
   211                   M 	JPNZ	INT_CNT1_1
       0009E 0E83     1     JBS  _STATUS , Z 
       0009F 14B4     1     JMP  INT_CNT1_1 ,
   212 000A0 00EA          	CLR	SEC_REG
   213 000A1 0569          	INC	MIN_REG
   214                   M 	SUBA	MIN_REG,@60
       000A2 183C     1     MOV A,@( 60 )
       000A3 0129     1     SUB A, MIN_REG 
   215                   M 	JPNZ	INT_CNT1_1
       000A4 0E83     1     JBS  _STATUS , Z 
       000A5 14B4     1     JMP  INT_CNT1_1 ,
   216 000A6 00E9          	CLR	MIN_REG
   217 000A7 0568          	INC	HOUR_REG
   218                   M 	SUBA	HOUR_REG,@24
       000A8 1818     1     MOV A,@( 24 )
       000A9 0128     1     SUB A, HOUR_REG 
   219                   M 	JPNZ	INT_CNT1_1
       000AA 0E83     1     JBS  _STATUS , Z 
       000AB 14B4     1     JMP  INT_CNT1_1 ,
   220 000AC 00E8          	CLR	HOUR_REG
   221 000AD 0566          	INC	DAY_REG
   222 000AE 0567          	INC	WEEK_REG
   223                   M 	SUBA	WEEK_REG,@7
       000AF 1807     1     MOV A,@( 7 )
       000B0 0127     1     SUB A, WEEK_REG 
   224                   M 	JPNZ	INT_CNT1_1
       000B1 0E83     1     JBS  _STATUS , Z 
       000B2 14B4     1     JMP  INT_CNT1_1 ,
   225 000B3 00E7          	CLR	WEEK_REG
   226 000B4               INT_CNT1_1:
   227                     	
   228                   M 	DECZ	TMR_NAME
       000B4 0438     1     MOV A, TMR_NAME 
                      2  M  JPZ ( $ + 2 )
       000B5 0C83     2     JBC  _STATUS , Z 
       000B6 14B8     2     JMP ( $ + 2 ),
       000B7 01F8     1     DEC  TMR_NAME ,
   229 000B8 142A          	JMP	INT_END
   230                     
   231 000B9               INT_CNT2:
   232                     	;CRAM	_ISR,5
   233                   M 	MOV	_ISR,@0XDF
       000B9 18DF     1     MOV A,@( 223 )
       000BA 004F     1     MOV  _ISR ,A
   234                     	
   235                   M 	PAGEIO	1
                      2  M  SRAM  _STATUS , 7 
       000BB 0BC3     2     BS  _STATUS , 7 
   236                     	;IOW	_IOCE,@0X0E
   237                   M 	IOW	_IOCC,@0XEF			;0.5MS
       000BC 18EF     1     MOV A,@( 239 )
       000BD 000C     1     IOW  _IOCC ,
   238                   M 	PAGEIO	0
                      2  M  CRAM  _STATUS , 7 
       000BE 09C3     2     BC  _STATUS , 7 
   239                     	
   240                     	;SRAM	_FSR,4
   241                     	;SRAM	_FSR,5
   242                     	;SRAM	_FSR,6
   243                     	
   244                   M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       000BF 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       000C0 088B     2     BC  _RB , 2 
   245                   M 	BANK	0
       000C1 0984     1     BC  _RSR , 6 
       000C2 09C4     1     BC  _RSR , 7 
   246                     	;SER_COMM				; 通讯
   247                     	;SAVECOMMAND
   248 000C3 043E          	MOV	A,SER_SEND
   249                   M 	JPZ	$+3
       000C4 0C83     1     JBC  _STATUS , Z 
       000C5 14C8     1     JMP ( $ + 3 ),
   250                   M 	MOV	TMR_SER,@16
       000C6 1810     1     MOV A,@( 16 )
       000C7 0077     1     MOV  TMR_SER ,A
   251                   M 	DECZ	TMR_SER
       000C8 0437     1     MOV A, TMR_SER 
                      2  M  JPZ ( $ + 2 )
       000C9 0C83     2     JBC  _STATUS , Z 
       000CA 14CC     2     JMP ( $ + 2 ),
       000CB 01F7     1     DEC  TMR_SER ,
   252                     	
   253 000CC 0574          	INC	TMR
   254                   M 	ANDA	TMR,@7
       000CD 1807     1     MOV A,@( 7 )
       000CE 02B4     1     AND A, TMR 
   255                   M 	JPNZ	INT_CNT2_1
       000CF 0E83     1     JBS  _STATUS , Z 
       000D0 1504     1     JMP  INT_CNT2_1 ,
   256 000D1               INT_CNT_4MS:
   257                   M 	DECZ	TMR_DELAY
       000D1 0435     1     MOV A, TMR_DELAY 
                      2  M  JPZ ( $ + 2 )
       000D2 0C83     2     JBC  _STATUS , Z 
       000D3 14D5     2     JMP ( $ + 2 ),
       000D4 01F5     1     DEC  TMR_DELAY ,
   258                   M 	DECZ	TMR_FLASH
       000D5 0436     1     MOV A, TMR_FLASH 
                      2  M  JPZ ( $ + 2 )
       000D6 0C83     2     JBC  _STATUS , Z 
       000D7 14D9     2     JMP ( $ + 2 ),
       000D8 01F6     1     DEC  TMR_FLASH ,
   259                     
   260                   M 	BANK	1
       000D9 0B84     1     BS  _RSR , 6 
       000DA 09C4     1     BC  _RSR , 7 
   261                     
   262                     
   263 000DB               INT_CNT2_CHKDTMF:
   264                   M 	JPNB	FSK_FG,DTMF_START,INT_CNT2_CHKDTMF_END
       000DB 0EDC     1     JBS  FSK_FG , DTMF_START 
       000DC 14E7     1     JMP  INT_CNT2_CHKDTMF_END ,
   265 000DD 01F4          	DEC	R1_TMR_DTMF
   266 000DE 0434          	MOV	A,R1_TMR_DTMF
   267                   M 	JPNZ	INT_CNT2_CHKDTMF_END
       000DF 0E83     1     JBS  _STATUS , Z 
       000E0 14E7     1     JMP  INT_CNT2_CHKDTMF_END ,
   268                   M 	MOV	_RC,DTMF_ADR
       000E1 042A     1     MOV A, DTMF_ADR 
       000E2 004C     1     MOV  _RC ,A
   269                   M 	MOV	_RD,@0X0F
       000E3 180F     1     MOV A,@( 15 )
       000E4 004D     1     MOV  _RD ,A
   270                   M 	CRAM	FSK_FG,DTMF_START
       000E5 08DC     1     BC  FSK_FG , DTMF_START 
   271                   M 	SRAM	FSK_FG,DTMF_SUC
       000E6 0B1C     1     BS  FSK_FG , DTMF_SUC 
   272                     
   273 000E7               INT_CNT2_CHKDTMF_END:
   274                     
   275                     
   276                   M 	JPNB	SYS_FG,TIME,INT_CNT2_1
       000E7 0FDE     1     JBS  SYS_FG , TIME 
       000E8 1504     1     JMP  INT_CNT2_1 ,
   277                   M 	DECZ	TIME_MS
       000E9 042B     1     MOV A, TIME_MS 
                      2  M  JPZ ( $ + 2 )
       000EA 0C83     2     JBC  _STATUS , Z 
       000EB 14ED     2     JMP ( $ + 2 ),
       000EC 01EB     1     DEC  TIME_MS ,
   278 000ED 042B          	MOV	A,TIME_MS
   279                   M 	JPNZ	INT_CNT2_1
       000EE 0E83     1     JBS  _STATUS , Z 
       000EF 1504     1     JMP  INT_CNT2_1 ,
   280                   M 	MOV	TIME_MS,@250
       000F0 18FA     1     MOV A,@( 250 )
       000F1 006B     1     MOV  TIME_MS ,A
   281 000F2 056C          	INC	TIME_SEC
   282                   M 	SUBA	TIME_SEC,@60
       000F3 183C     1     MOV A,@( 60 )
       000F4 012C     1     SUB A, TIME_SEC 
   283                   M 	JPNZ	INT_CNT2_1
       000F5 0E83     1     JBS  _STATUS , Z 
       000F6 1504     1     JMP  INT_CNT2_1 ,
   284 000F7 00EC          	CLR	TIME_SEC
   285 000F8 056D          	INC	TIME_MIN
   286                   M 	SUBA	TIME_SEC,@60
       000F9 183C     1     MOV A,@( 60 )
       000FA 012C     1     SUB A, TIME_SEC 
   287                   M 	JPNZ	INT_CNT2_1
       000FB 0E83     1     JBS  _STATUS , Z 
       000FC 1504     1     JMP  INT_CNT2_1 ,
   288 000FD 00ED          	CLR	TIME_MIN
   289 000FE 056E          	INC	TIME_HOUR
   290                   M 	SUBA	TIME_HOUR,@100
       000FF 1864     1     MOV A,@( 100 )
       00100 012E     1     SUB A, TIME_HOUR 
   291                   M 	JPNZ	INT_CNT2_1
       00101 0E83     1     JBS  _STATUS , Z 
       00102 1504     1     JMP  INT_CNT2_1 ,
   292 00103 00EE          	CLR	TIME_HOUR
   293                     
   294 00104               INT_CNT2_1:
   295                   M 	BANK	1
       00104 0B84     1     BS  _RSR , 6 
       00105 09C4     1     BC  _RSR , 7 
   296                     	
   297                   M 	DECZ	TMR_PROTOCOL
       00106 0430     1     MOV A, TMR_PROTOCOL 
                      2  M  JPZ ( $ + 2 )
       00107 0C83     2     JBC  _STATUS , Z 
       00108 150A     2     JMP ( $ + 2 ),
       00109 01F0     1     DEC  TMR_PROTOCOL ,
   298                     
   299 0010A               INT_CHKCD:
   300                   M 	JPB	R1_SYS_FG,HOOKSTATUS,INT_CHKCD_HI_1
       0010A 0C72     1     JBC  R1_SYS_FG , HOOKSTATUS 
       0010B 1532     1     JMP  INT_CHKCD_HI_1 ,
   301                   M 	JPB	FSK_FG,FSK_SUC,INT_CHKCD_HI
       0010C 0C5C     1     JBC  FSK_FG , FSK_SUC 
       0010D 152A     1     JMP  INT_CHKCD_HI ,
   302                   M 	JPB	_FSR,1,INT_CHKCD_HI
       0010E 0C4A     1     JBC  _FSR , 1 
       0010F 152A     1     JMP  INT_CHKCD_HI ,
   303 00110               INT_CHKCD_LO:
   304                     	
   305 00110 0433          	MOV	A,R1_CD
   306                   M 	JPZ	INT_END
       00111 0C83     1     JBC  _STATUS , Z 
       00112 142A     1     JMP  INT_END ,
   307 00113 01F3          	DEC	R1_CD
   308 00114 0000          	NOP
   309 00115 0433          	MOV	A,R1_CD
   310                   M 	JPNZ	INT_END
       00116 0E83     1     JBS  _STATUS , Z 
       00117 142A     1     JMP  INT_END ,
   311                     	
   312                     	
   313                   M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00118 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00119 088B     2     BC  _RB , 2 
   314 0011A 1800          	MOV	A,@FSK_ADDR
   315 0011B 004C          	MOV	_RC,A
   316 0011C 0069          	MOV	FSK_ADR,A
   317 0011D               INT_CHKCD_CLRBUF:
   318 0011D 00CD          	CLR	_RD
   319 0011E 054C          	INC	_RC
   320                   M 	SUBA	_RC,@(FSK_ADDR+60)
       0011F 183C     1     MOV A,@(( FSK_ADDR + 60 ))
       00120 010C     1     SUB A, _RC 
   321                   M 	JPNZ	INT_CHKCD_CLRBUF
       00121 0E83     1     JBS  _STATUS , Z 
       00122 151D     1     JMP  INT_CHKCD_CLRBUF ,
   322                     	
   323 00123 00E7          	CLR	FSK_COUNT
   324 00124 00E4          	CLR	FSK_BYTE
   325                   M 	CRAM	FSK_FG,FSK_VALID
       00125 081C     1     BC  FSK_FG , FSK_VALID 
   326                     	;CLR	R1_FSK_STATUS
   327                     	
   328 00126 001F          	IOR	_IOCF
   329                     	;AND	A,@0x7f				; close dtmf
   330 00127 1940          	OR	A,@0X40				; open fsk
   331 00128 000F          	IOW	_IOCF
   332                     	;CRAM	_PPSR,3
   333 00129 142A          	JMP	INT_END
   334 0012A               INT_CHKCD_HI:
   335 0012A 0433          	MOV	A,R1_CD
   336                   M 	JPNZ	INT_CHKCD_HI_1
       0012B 0E83     1     JBS  _STATUS , Z 
       0012C 1532     1     JMP  INT_CHKCD_HI_1 ,
   337                   M 	SRAM	_PPSR,3				; dtmf power
       0012D 0AC5     1     BS  _PPSR , 3 
   338 0012E 001F          	IOR	_IOCF
   339 0012F 1ABE          	AND	A,@0XBE				; close fsk, tcc
   340 00130 1980          	OR	A,@0X80				; open dtmf
   341 00131 000F          	IOW	_IOCF
   342 00132               INT_CHKCD_HI_1:
   343                   M 	MOV	R1_CD,@10
       00132 180A     1     MOV A,@( 10 )
       00133 0073     1     MOV  R1_CD ,A
   344 00134               INT_CHKCD_END:
   345 00134 142A          	JMP	INT_END
   346                     
   347                     ; --------------------------------------
   348                     ; FSK接收
   349 00135               INT_FSK:
   350                   M 	MOV	_ISR,@0XBE
       00135 18BE     1     MOV A,@( 190 )
       00136 004F     1     MOV  _ISR ,A
   351                     	
   352                   M 	BANK	1
       00137 0B84     1     BS  _RSR , 6 
       00138 09C4     1     BC  _RSR , 7 
   353                     	
   354                   M 	JPB	_FSR,1,INT_CHKCD_HI
       00139 0C4A     1     JBC  _FSR , 1 
       0013A 152A     1     JMP  INT_CHKCD_HI ,
   355                   M 	JPB	FSK_FG,FSK_VALID,INT_FSK_0
       0013B 0C1C     1     JBC  FSK_FG , FSK_VALID 
       0013C 1540     1     JMP  INT_FSK_0 ,
   356                   M 	JPB	_FSR,2,INT_CHKCD_HI
       0013D 0C8A     1     JBC  _FSR , 2 
       0013E 152A     1     JMP  INT_CHKCD_HI ,
   357                   M 	SRAM	FSK_FG,FSK_VALID
       0013F 0A1C     1     BS  FSK_FG , FSK_VALID 
   358 00140               INT_FSK_0:
   359 00140 0427          	MOV	A,FSK_COUNT
   360                   M 	JPNZ	INT_FSK_1
       00141 0E83     1     JBS  _STATUS , Z 
       00142 1545     1     JMP  INT_FSK_1 ,
   361                   M 	JPB	_FSR,2,INT_END
       00143 0C8A     1     JBC  _FSR , 2 
       00144 142A     1     JMP  INT_END ,
   362 00145               INT_FSK_1:
   363                     	
   364                   M 	MOV	_TCC,@(256-92)
       00145 18A4     1     MOV A,@(( 256 - 92 ))
       00146 0041     1     MOV  _TCC ,A
   365 00147 001F          	IOR	_IOCF
   366 00148 1A7F          	AND	A,@0X7F				; close dtmf
   367 00149 1901          	OR	A,@1				; open TCC
   368 0014A 000F          	IOW	_IOCF
   369                   M 	CRAM	_PPSR,3
       0014B 08C5     1     BC  _PPSR , 3 
   370                     	
   371 0014C 142A          	JMP	INT_END
   372                     
   373 0014D               INT_STD:
   374                     	;CRAM	_ISR,7
   375                   M 	MOV	_ISR,@0X7F
       0014D 187F     1     MOV A,@( 127 )
       0014E 004F     1     MOV  _ISR ,A
   376                     	
   377                   M 	JPNB	_RE,7,INT_END
       0014F 0FCE     1     JBS  _RE , 7 
       00150 142A     1     JMP  INT_END ,
   378                     	
   379                   M 	BANK	1
       00151 0B84     1     BS  _RSR , 6 
       00152 09C4     1     BC  _RSR , 7 
   380                     
   381                   M 	MOV	R1_TMR_DTMF,@50
       00153 1832     1     MOV A,@( 50 )
       00154 0074     1     MOV  R1_TMR_DTMF ,A
   382                     
   383                   M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00155 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00156 088B     2     BC  _RB , 2 
   384                     	
   385 00157 0015          	IOR	_IOC5
   386 00158 1A0F          	AND	A,@0X0F
   387                   M 	JPZ	INT_STD_BEGIN			; 'D'
       00159 0C83     1     JBC  _STATUS , Z 
       0015A 156E     1     JMP  INT_STD_BEGIN ,
   388 0015B 1D0D          	SUB	A,@0X0D				; 'A'
   389                   M 	JPZ	INT_STD_BEGIN
       0015C 0C83     1     JBC  _STATUS , Z 
       0015D 156E     1     JMP  INT_STD_BEGIN ,
   390 0015E 1D0E          	SUB	A,@0X0E				; 'B'
   391                   M 	JPZ	INT_STD_BEGIN
       0015F 0C83     1     JBC  _STATUS , Z 
       00160 156E     1     JMP  INT_STD_BEGIN ,
   392                   M 	JPNB	FSK_FG,DTMF_START,INT_END	; 没有起始符'A/B/D'不接收任何号码
       00161 0EDC     1     JBS  FSK_FG , DTMF_START 
       00162 142A     1     JMP  INT_END ,
   393 00163 0015          	IOR	_IOC5
   394 00164 1A0F          	AND	A,@0X0F
   395 00165 1D0F          	SUB	A,@0X0F				; 'C'
   396                   M 	JPZ	INT_STD_STOP
       00166 0C83     1     JBC  _STATUS , Z 
       00167 158C     1     JMP  INT_STD_STOP ,
   397 00168 0015          	IOR	_IOC5
   398 00169 1A0F          	AND	A,@0X0F
   399 0016A 1D0C          	SUB	A,@12
   400                   M 	JPNC	INT_END				; >12 退出
       0016B 0E03     1     JBS  _STATUS , C 
       0016C 142A     1     JMP  INT_END ,
   401 0016D 157C          	JMP	INT_STD_STORE
   402                     	
   403                     
   404 0016E               INT_STD_BEGIN:
   405                   M 	JPB	FSK_FG,DTMF_START,INT_STD_STORE
       0016E 0CDC     1     JBC  FSK_FG , DTMF_START 
       0016F 157C     1     JMP  INT_STD_STORE ,
   406                   M 	SRAM	FSK_FG,DTMF_START
       00170 0ADC     1     BS  FSK_FG , DTMF_START 
   407                   M 	MOV	_RC,@DTMF_ADDR
       00171 1800     1     MOV A,@( DTMF_ADDR )
       00172 004C     1     MOV  _RC ,A
   408                     	;IOR	_IOCF
   409                     	;AND	A,@0XBF				; close fsk
   410                     	;IOW	_IOCF
   411                   M 	CRAM	_FSR,3
       00173 08CA     1     BC  _FSR , 3 
   412 00174               INT_STD_CL:
   413 00174 00CD          	CLR	_RD
   414 00175 054C          	INC	_RC
   415                   M 	SUBA	_RC,@(DTMF_ADDR+20)
       00176 1814     1     MOV A,@(( DTMF_ADDR + 20 ))
       00177 010C     1     SUB A, _RC 
   416                   M 	JPNZ	INT_STD_CL
       00178 0E83     1     JBS  _STATUS , Z 
       00179 1574     1     JMP  INT_STD_CL ,
   417                   M 	MOV	DTMF_ADR,@DTMF_ADDR
       0017A 1800     1     MOV A,@( DTMF_ADDR )
       0017B 006A     1     MOV  DTMF_ADR ,A
   418                     
   419 0017C               INT_STD_STORE:
   420                   M 	SUBA	DTMF_ADR,@(DTMF_ADDR+20)
       0017C 1814     1     MOV A,@(( DTMF_ADDR + 20 ))
       0017D 012A     1     SUB A, DTMF_ADR 
   421                   M 	JPZ	INT_STD_STORE_FULL
       0017E 0C83     1     JBC  _STATUS , Z 
       0017F 1587     1     JMP  INT_STD_STORE_FULL ,
   422                   M 	MOV	_RC,DTMF_ADR
       00180 042A     1     MOV A, DTMF_ADR 
       00181 004C     1     MOV  _RC ,A
   423 00182 0015          	IOR	_IOC5
   424 00183 1A0F          	AND	A,@0X0F
   425 00184 004D          	MOV	_RD,A
   426 00185 056A          	INC	DTMF_ADR
   427 00186 142A          	JMP	INT_END
   428 00187               INT_STD_STORE_FULL:
   429                   M 	MOV	_RC,DTMF_ADR
       00187 042A     1     MOV A, DTMF_ADR 
       00188 004C     1     MOV  _RC ,A
   430                   M 	MOV	_RD,@0X0F
       00189 180F     1     MOV A,@( 15 )
       0018A 004D     1     MOV  _RD ,A
   431 0018B 142A          	JMP	INT_END
   432                     	
   433 0018C               INT_STD_STOP:
   434                   M 	MOV	_RC,DTMF_ADR
       0018C 042A     1     MOV A, DTMF_ADR 
       0018D 004C     1     MOV  _RC ,A
   435 0018E 0015          	IOR	_IOC5
   436 0018F 1A0F          	AND	A,@0X0F
   437 00190 004D          	MOV	_RD,A
   438                   M 	CRAM	FSK_FG,DTMF_START
       00191 08DC     1     BC  FSK_FG , DTMF_START 
   439                   M 	SRAM	FSK_FG,DTMF_SUC
       00192 0B1C     1     BS  FSK_FG , DTMF_SUC 
   440                     
   441 00193               INT_ERR:
   442 00193 142A          	JMP	INT_END
   443                     
   444                     
   445                     /***************************************
   446                     主程序
   447                     ***************************************/
   448 00194               MAIN:
   449                   M 	CALL	#INITIAL				; 初始化
       00194 11B3     1     CALL ( INITIAL % 1024 ),
   450 00195 0000          	NOP
   451 00196 00FC          	CLR	SER_FLAG
   452                     
   453                     	
   454                     	
   455 00197               LOOP:
   456                   M 	PAGE	#SerIic
       00197 1E80     1     PAGE ( SERIIC / 1024 ),
   457 00198 1353          	CALL	SerIic
   458                   M 	PAGE	#STOR_COMMAND
       00199 1E84     1     PAGE ( STOR_COMMAND / 1024 ),
   459 0019A 13BF          	CALL	STOR_COMMAND
   460                     	
   461                   M 	PAGE	#CID_DECODE
       0019B 1E81     1     PAGE ( CID_DECODE / 1024 ),
   462 0019C 1371          	CALL	CID_DECODE
   463                     	;PAGE	#SER_BUF_CHK
   464                     	;CALL	SER_BUF_CHK
   465                     	
   466                   M 	PAGE	#CID_DECODE
       0019D 1E81     1     PAGE ( CID_DECODE / 1024 ),
   467 0019E 1371          	CALL	CID_DECODE
   468                   M 	PAGE	#TIMER_DRV
       0019F 1E80     1     PAGE ( TIMER_DRV / 1024 ),
   469 001A0 12AF          	CALL	TIMER_DRV			; 时间程序
   470                     	
   471                   M 	PAGE	#CID_DECODE
       001A1 1E81     1     PAGE ( CID_DECODE / 1024 ),
   472 001A2 1371          	CALL	CID_DECODE
   473                   M 	PAGE	#VGA_UPDATE
       001A3 1E84     1     PAGE ( VGA_UPDATE / 1024 ),
   474 001A4 1000          	CALL	VGA_UPDATE
   475                     	
   476                   M 	PAGE	#CID_DECODE
       001A5 1E81     1     PAGE ( CID_DECODE / 1024 ),
   477 001A6 1371          	CALL	CID_DECODE
   478                   M 	PAGE	#LCD_VIEW
       001A7 1E87     1     PAGE ( LCD_VIEW / 1024 ),
   479 001A8 12FA          	CALL	LCD_VIEW
   480                     	
   481                   M 	PAGE	#CID_DECODE
       001A9 1E81     1     PAGE ( CID_DECODE / 1024 ),
   482 001AA 1371          	CALL	CID_DECODE
   483                   M 	PAGE	#STCP_CHK
       001AB 1E83     1     PAGE ( STCP_CHK / 1024 ),
   484 001AC 1000          	CALL	STCP_CHK
   485                     	
   486                   M 	PAGE	#CID_DECODE
       001AD 1E81     1     PAGE ( CID_DECODE / 1024 ),
   487 001AE 1371          	CALL	CID_DECODE
   488                   M 	PAGE	#DIAL_NUM
       001AF 1E84     1     PAGE ( DIAL_NUM / 1024 ),
   489 001B0 1280          	CALL	DIAL_NUM
   490                     	
   491                   M 	PAGE	#($)
       001B1 1E80     1     PAGE ( $ / 1024 ),
   492 001B2 1597          	JMP	LOOP
   493                     
   494                     /***************************************
   495                     副程序区
   496                     ***************************************/
   497                     
   498                     ; PAGE 0
   499                     include	"initial.asm"
     1            C        
     2 001B3      C        INITIAL:
     3            C      M 	MOV	_FSR,@0X70			; 3.5826MHz
       001B3 1870     1     MOV A,@( 112 )
       001B4 004A     1     MOV  _FSR ,A
     4 001B5 0011 C        	DISI
     5 001B6 0004 C        	WDTC
     6            C      M 	PAGEIO	0
                      2  M  CRAM  _STATUS , 7 
       001B7 09C3     2     BC  _STATUS , 7 
     7            C      M 	BANK	0
       001B8 0984     1     BC  _RSR , 6 
       001B9 09C4     1     BC  _RSR , 7 
     8            C        	
     9            C      M 	MOV	_RE,@0X01			; set lcd 1/8 duty 1/4 bias
       001BA 1801     1     MOV A,@( 1 )
       001BB 004E     1     MOV  _RE ,A
    10            C      M 	MOV	_RE,@0X06			; set lcd display enable
       001BC 1806     1     MOV A,@( 6 )
       001BD 004E     1     MOV  _RE ,A
    11            C        
    12            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       001BE 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       001BF 088B     2     BC  _RB , 2 
    13 001C0 1231 C        	CALL	CLR_LCD_RAM
    14            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       001C1 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       001C2 088B     2     BC  _RB , 2 
    15 001C3 1231 C        	CALL	CLR_LCD_RAM
    16            C      M 	CIDBANK	2
                      2  M  CRAM  _RB , 0 
       001C4 080B     2     BC  _RB , 0 
                      2  M  SRAM  _RB , 2 
       001C5 0A8B     2     BS  _RB , 2 
    17 001C6 1231 C        	CALL	CLR_LCD_RAM
    18            C      M 	CIDBANK	3
                      2  M  SRAM  _RB , 0 
       001C7 0A0B     2     BS  _RB , 0 
                      2  M  SRAM  _RB , 2 
       001C8 0A8B     2     BS  _RB , 2 
    19 001C9 1231 C        	CALL	CLR_LCD_RAM
    20            C      M 	BANK	0
       001CA 0984     1     BC  _RSR , 6 
       001CB 09C4     1     BC  _RSR , 7 
    21 001CC 123E C        	CALL	CLR_REG
    22            C      M 	BANK	1
       001CD 0B84     1     BS  _RSR , 6 
       001CE 09C4     1     BC  _RSR , 7 
    23 001CF 123E C        	CALL	CLR_REG
    24            C      M 	BANK	2
       001D0 0984     1     BC  _RSR , 6 
       001D1 0BC4     1     BS  _RSR , 7 
    25 001D2 123E C        	CALL	CLR_REG
    26            C      M 	BANK	3
       001D3 0B84     1     BS  _RSR , 6 
       001D4 0BC4     1     BS  _RSR , 7 
    27 001D5 123E C        	CALL	CLR_REG
    28            C      M 	BANK	0
       001D6 0984     1     BC  _RSR , 6 
       001D7 09C4     1     BC  _RSR , 7 
    29            C        	
    30            C        
    31            C        ; --------------------
    32            C        	
    33            C      M 	IOW	_IOC5,@0X0F
       001D8 180F     1     MOV A,@( 15 )
       001D9 0005     1     IOW  _IOC5 ,
    34 001DA 1800 C        	MOV	A,@(0X00)
    35 001DB 0006 C        	IOW	_IOC6
    36 001DC 0008 C        	IOW	_IOC8
    37 001DD 0009 C        	IOW	_IOC9
    38            C        ;	
    39            C        	;IOW	_IOCA,@0XF0			; port7 as normal port, set p5,p6,p9 for lcd
    40            C      M 	IOW	_IOCA,@0XFA
       001DE 18FA     1     MOV A,@( 250 )
       001DF 000A     1     IOW  _IOCA ,
    41            C      M 	SRAM	_RB,6
       001E0 0B8B     1     BS  _RB , 6 
    42            C      M 	SRAM	_RB,7				; set p8 for lcd
       001E1 0BCB     1     BS  _RB , 7 
    43            C        	
    44            C      M 	IOW	_IOC7,@0XF9
       001E2 18F9     1     MOV A,@( 249 )
       001E3 0007     1     IOW  _IOC7 ,
    45            C      M 	MOV	_R7,@0XFF			; p7.5 = 1
       001E4 18FF     1     MOV A,@( 255 )
       001E5 0047     1     MOV  _R7 ,A
    46            C        	
    47            C      M 	SRAM	_RE,3				; set /WURING enable
       001E6 0ACE     1     BS  _RE , 3 
    48            C        	
    49            C      M 	PAGEIO	1
                      2  M  SRAM  _STATUS , 7 
       001E7 0BC3     2     BS  _STATUS , 7 
    50            C      M 	IOW	_IOCE,@0X0C
       001E8 180C     1     MOV A,@( 12 )
       001E9 000E     1     IOW  _IOCE ,
    51            C      M 	IOW	_IOCB,@0X80			; count1
       001EA 1880     1     MOV A,@( 128 )
       001EB 000B     1     IOW  _IOCB ,
    52            C      M 	IOW	_IOCC,@0XEF			; count2
       001EC 18EF     1     MOV A,@( 239 )
       001ED 000C     1     IOW  _IOCC ,
    53            C        	;IOW	_IOCD,@0XFF
    54            C      M 	PAGEIO	0
                      2  M  CRAM  _STATUS , 7 
       001EE 09C3     2     BC  _STATUS , 7 
    55            C        
    56            C        ; ---------- dtmf open -----------
    57            C      M 	SRAM	_PPSR,3				; open the PWDN to receive the dtmf data
       001EF 0AC5     1     BS  _PPSR , 3 
    58            C      M 	CRAM	_RB,4
       001F0 090B     1     BC  _RB , 4 
    59            C      M 	CRAM	_RB,5				; tone detection present time 5ms
       001F1 094B     1     BC  _RB , 5 
    60            C        	
    61            C      M 	CRAM	_STATUS,5			; close the tone genarater1
       001F2 0943     1     BC  _STATUS , 5 
    62            C      M 	CRAM	_STATUS,6			; close the tone genarater2
       001F3 0983     1     BC  _STATUS , 6 
    63            C        
    64            C        ; ---------- fsk open ------------
    65            C      M 	SRAM	_FSR,3				; /FSKPWR = 1
       001F4 0ACA     1     BS  _FSR , 3 
    66            C        	
    67            C      M 	IOW	_IOCF,@0XB0			; DTMF,CONT2,CONT1  ENABLE. fsk disable
       001F5 18B0     1     MOV A,@( 176 )
       001F6 000F     1     IOW  _IOCF ,
    68 001F7 00CF C        	CLR	_ISR
    69 001F8 00DC C        	CLR	FSK_FG
    70 001F9 00DE C        	CLR	SYS_FG
    71 001FA 00DD C        	CLR	STAMP_FG
    72            C        	
    73 001FB 1802 C        	MOV	A,@2
    74 001FC 0002 C        	CONTW
    75            C        
    76            C        ; ---------- INFO INIT ------------
    77            C      M 	BANK	1
       001FD 0B84     1     BS  _RSR , 6 
       001FE 09C4     1     BC  _RSR , 7 
    78            C      M 	MOV	R1_LCD_CONTRAST,@0X03		; LCD对比度3，
       001FF 1803     1     MOV A,@( 3 )
       00200 0075     1     MOV  R1_LCD_CONTRAST ,A
    79            C      M 	MOV	R1_CODE23,@0X0			; CODE=000
       00201 1800     1     MOV A,@( 0 )
       00202 0076     1     MOV  R1_CODE23 ,A
    80            C      M 	ANDA	R1_LCD_CONTRAST,@0X0F
       00203 180F     1     MOV A,@( 15 )
       00204 02B5     1     AND A, R1_LCD_CONTRAST 
    81 00205 125C C        	CALL	LCD_CONTRAST_APPLY
    82            C      M 	BANK	0
       00206 0984     1     BC  _RSR , 6 
       00207 09C4     1     BC  _RSR , 7 
    83 00208 18FF C        	MOV	A,@(0xff)			; 区域码：无
    84 00209 0070 C        	MOV	LCALL12,A
    85 0020A 0071 C        	MOV	LCALL34,A
    86 0020B 0072 C        	MOV	LCALL5,A
    87            C        
    88            C        ; ---------- time init ------------
    89 0020C 00EA C        	CLR	SEC_REG
    90 0020D 00E9 C        	CLR	MIN_REG
    91 0020E 00E8 C        	CLR	HOUR_REG
    92 0020F 00E7 C        	CLR	WEEK_REG
    93            C      M 	MOV	DAY_REG,@1
       00210 1801     1     MOV A,@( 1 )
       00211 0066     1     MOV  DAY_REG ,A
    94            C      M 	MOV	MONTH_REG,@1
       00212 1801     1     MOV A,@( 1 )
       00213 0065     1     MOV  MONTH_REG ,A
    95 00214 00E4 C        	CLR	YEAR_REG
    96            C        
    97            C      M 	CALL	#BLANK_LCD
       00215 124A     1     CALL ( BLANK_LCD % 1024 ),
    98            C      M 	CRAM	SYS_FG,LANGUAGE
       00216 081E     1     BC  SYS_FG , LANGUAGE 
    99            C        	
   100            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       00217 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00218 088B     2     BC  _RB , 2 
   101            C      M 	MOV	_RC,@LCD_CTRL
       00219 1880     1     MOV A,@( LCD_CTRL )
       0021A 004C     1     MOV  _RC ,A
   102            C      M 	MOV	_RD,@0X80
       0021B 1880     1     MOV A,@( 128 )
       0021C 004D     1     MOV  _RD ,A
   103            C      M 	PAGE	#VGA_STAMP
       0021D 1E85     1     PAGE ( VGA_STAMP / 1024 ),
   104            C        	
   105 0021E 1072 C        	CALL	CLR_STAMP
   106 0021F 1078 C        	CALL	CLR_NUM1
   107 00220 107E C        	CALL	CLR_NUM2
   108 00221 1084 C        	CALL	CLR_STR
   109            C        	/*
   110            C        	MOV	A,@STYLE_CENTER			; 居中显示
   111            C        	CALL	VGA_STR
   112            C        	MOV	A,@(WD_INITIAL)
   113            C        	CALL	VGA_STRING
   114            C        	MOV	A,@CH_END
   115            C        	CALL	VGA_STR
   116            C        	*/
   117            C      M 	PAGE	#($)
       00222 1E80     1     PAGE ( $ / 1024 ),
   118            C      M 	CALL	#VIEW_STR
                      2  M  LCALL  VIEW_STR 
                      3  M  PAGE #( VIEW_STR ),
       00223 1E87     3     PAGE ( VIEW_STR / 1024 ),
       00224 129D     2     CALL ( VIEW_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00225 1E80     3     PAGE ( $ / 1024 ),
   119            C        	
   120            C      M 	SRAM	STAMP_FG,STAMP_SLASH		; 日期之间的斜杠，固定亮。
       00226 0B5D     1     BS  STAMP_FG , STAMP_SLASH 
   121            C      M 	SRAM	SYS_FG,STAMP
       00227 0A9E     1     BS  SYS_FG , STAMP 
   122            C      M 	SRAM	SYS_FG,SYS_CLOCK
       00228 0ADE     1     BS  SYS_FG , SYS_CLOCK 
   123            C      M 	CRAM	SYS_FG,LOCK_TOPLINE
       00229 095E     1     BC  SYS_FG , LOCK_TOPLINE 
   124            C        	
   125 0022A 0010 C        	ENI
   126            C      M 	MOV	TMR_DELAY,@250
       0022B 18FA     1     MOV A,@( 250 )
       0022C 0075     1     MOV  TMR_DELAY ,A
   127 0022D 1266 C        	CALL	WAIT_FLASH
   128            C        	
   129            C        	
   130            C      M 	BANK	1
       0022E 0B84     1     BS  _RSR , 6 
       0022F 09C4     1     BC  _RSR , 7 
   131 00230 0012 C        	RET
   132            C        
   133 00231      C        CLR_LCD_RAM:
   134 00231 00D6 C        	CLR	TEMP0
   135 00232      C        CLR_LCD_RAM_LOOP:
   136            C      M 	MOV	_RC,TEMP0
       00232 0416     1     MOV A, TEMP0 
       00233 004C     1     MOV  _RC ,A
   137 00234 00CD C        	CLR	_RD
   138 00235 0556 C        	INC	TEMP0
   139            C      M 	SUBA	TEMP0,@0XFF
       00236 18FF     1     MOV A,@( 255 )
       00237 0116     1     SUB A, TEMP0 
   140            C      M 	JPNZ	CLR_LCD_RAM_LOOP
       00238 0E83     1     JBS  _STATUS , Z 
       00239 1632     1     JMP  CLR_LCD_RAM_LOOP ,
   141            C      M 	MOV	_RC,TEMP0
       0023A 0416     1     MOV A, TEMP0 
       0023B 004C     1     MOV  _RC ,A
   142 0023C 00CD C        	CLR	_RD
   143 0023D 0012 C        	RET
   144            C        
   145 0023E      C        CLR_REG:
   146            C      M 	AND	_RSR,@0XC0
       0023E 18C0     1     MOV A,@( 192 )
       0023F 02C4     1     AND  _RSR ,A
   147            C      M 	ADD	_RSR,@0X0F
       00240 180F     1     MOV A,@( 15 )
       00241 03C4     1     ADD  _RSR ,A
   148 00242      C        CLR_REG_LOOP:
   149 00242 0544 C        	INC	_RSR
   150 00243 00C0 C        	CLR	_R0
   151            C      M 	ANDA	_RSR,@0X3F
       00244 183F     1     MOV A,@( 63 )
       00245 0284     1     AND A, _RSR 
   152 00246 1D3F C        	SUB	A,@0X3F
   153            C      M 	JPNZ	CLR_REG_LOOP
       00247 0E83     1     JBS  _STATUS , Z 
       00248 1642     1     JMP  CLR_REG_LOOP ,
   154 00249 0012 C        	RET
   155            C        
   156 0024A      C        BLANK_LCD:
   157            C      M 	MOV	TEMP0,@0
       0024A 1800     1     MOV A,@( 0 )
       0024B 0056     1     MOV  TEMP0 ,A
   158 0024C      C        BLANK_LCD_LOOP:
   159 0024C 0416 C        	MOV	A,TEMP0
   160 0024D 000B C        	IOW	_IOCB
   161 0024E 1800 C        	MOV	A,@0
   162 0024F 000C C        	IOW	_IOCC
   163 00250 0556 C        	INC	TEMP0
   164            C      M 	SUBA	TEMP0,@0X28
       00251 1828     1     MOV A,@( 40 )
       00252 0116     1     SUB A, TEMP0 
   165            C      M 	JPNZ	BLANK_LCD_LOOP1
       00253 0E83     1     JBS  _STATUS , Z 
       00254 1657     1     JMP  BLANK_LCD_LOOP1 ,
   166            C      M 	MOV	TEMP0,@0X40
       00255 1840     1     MOV A,@( 64 )
       00256 0056     1     MOV  TEMP0 ,A
   167 00257      C        BLANK_LCD_LOOP1:
   168            C      M 	SUBA	TEMP0,@0X68
       00257 1868     1     MOV A,@( 104 )
       00258 0116     1     SUB A, TEMP0 
   169            C      M 	JPNZ	BLANK_LCD_LOOP
       00259 0E83     1     JBS  _STATUS , Z 
       0025A 164C     1     JMP  BLANK_LCD_LOOP ,
   170            C        	
   171 0025B 0012 C        	RET
   172            C        
   173            C        /*****************************
   174            C        LCD对比度
   175            C        *****************************/
   176 0025C      C        LCD_CONTRAST_APPLY:
   177            C        	
   178 0025C 1A0F C        	AND	A,@0X0F
   179            C        ;	ADD	A,@2				; OTP
   180 0025D 1FFF C        	ADD	A,@0XFF				; 仿真
   181 0025E 0056 C        	MOV	TEMP0,A
   182            C      M 	CLRC
       0025F 0803     1     BC  _STATUS , C 
   183 00260 06D6 C        	RLC	TEMP0
   184 00261 001A C        	IOR	_IOCA
   185 00262 1AF1 C        	AND	A,@0XF1
   186 00263 0396 C        	ADD	A,TEMP0
   187 00264 000A C        	IOW	_IOCA
   188            C        	
   189 00265 0012 C        	RET
   190            C        
   191            C        
   192            C        /*****************************
   193            C        等待FLASH初始化
   194            C        *****************************/
   195 00266      C        WAIT_FLASH:
   196            C        	;CALL	#LCD_VIEW
   197            C        	
   198            C      M 	BANK	0
       00266 0984     1     BC  _RSR , 6 
       00267 09C4     1     BC  _RSR , 7 
   199            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00268 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00269 088B     2     BC  _RB , 2 
   200            C        	
   201            C        	;MOV	TMR_NAME,@40			; 等待初始化20秒
   202            C      M 	MOV	TMR_NAME,@20
       0026A 1814     1     MOV A,@( 20 )
       0026B 0078     1     MOV  TMR_NAME ,A
   203 0026C      C        WAIT_FLASH_LOOP:
   204            C        	
   205            C      M 	PAGE	#SerIic
       0026C 1E80     1     PAGE ( SERIIC / 1024 ),
   206 0026D 1353 C        	CALL	SerIic
   207            C      M 	PAGE	#STOR_COMMAND
       0026E 1E84     1     PAGE ( STOR_COMMAND / 1024 ),
   208 0026F 13BF C        	CALL	STOR_COMMAND
   209            C        	
   210            C      M 	JPB	SER_FLAG,7,WAIT_FLASH_OK
       00270 0DFC     1     JBC  SER_FLAG , 7 
       00271 1698     1     JMP  WAIT_FLASH_OK ,
   211            C        	;MOV	A,SER_FLAG
   212            C        	;JPNZ	WAIT_FLASH_OK
   213 00272 0438 C        	MOV	A,TMR_NAME
   214            C      M 	JPNZ	WAIT_FLASH_LOOP
       00273 0E83     1     JBS  _STATUS , Z 
       00274 166C     1     JMP  WAIT_FLASH_LOOP ,
   215 00275      C        WAIT_FLASH_TIMEOUT:
   216            C      M 	PAGE	#VGA_STR
       00275 1E85     1     PAGE ( VGA_STR / 1024 ),
   217 00276 1860 C        	MOV	A,@(STYLE_CENTER)
   218 00277 104B C        	CALL	VGA_STR
   219 00278 1806 C        	MOV	A,@WD_INITIAL
   220 00279 11BF C        	CALL	VGA_STRING
   221 0027A 1824 C        	MOV	A,@CH_BLANK
   222 0027B 104B C        	CALL	VGA_STR
   223 0027C 181D C        	MOV	A,@CH_T
   224 0027D 104B C        	CALL	VGA_STR
   225 0027E 1812 C        	MOV	A,@CH_I
   226 0027F 104B C        	CALL	VGA_STR
   227 00280 1816 C        	MOV	A,@CH_M
   228 00281 104B C        	CALL	VGA_STR
   229 00282 180E C        	MOV	A,@CH_E
   230 00283 104B C        	CALL	VGA_STR
   231 00284 1818 C        	MOV	A,@CH_O
   232 00285 104B C        	CALL	VGA_STR
   233 00286 181E C        	MOV	A,@CH_U
   234 00287 104B C        	CALL	VGA_STR
   235 00288 181D C        	MOV	A,@CH_T
   236 00289 104B C        	CALL	VGA_STR
   237 0028A 18FF C        	MOV	A,@CH_END
   238 0028B 104B C        	CALL	VGA_STR
   239            C      M 	PAGE	#($)
       0028C 1E80     1     PAGE ( $ / 1024 ),
   240            C      M 	CALL	#VIEW_STR
                      2  M  LCALL  VIEW_STR 
                      3  M  PAGE #( VIEW_STR ),
       0028D 1E87     3     PAGE ( VIEW_STR / 1024 ),
       0028E 129D     2     CALL ( VIEW_STR % 1024 ),
                      3  M  PAGE #( $ ),
       0028F 1E80     3     PAGE ( $ / 1024 ),
   241            C      M 	BANK	0
       00290 0984     1     BC  _RSR , 6 
       00291 09C4     1     BC  _RSR , 7 
   242            C      M 	MOV	TMR_DELAY,@250
       00292 18FA     1     MOV A,@( 250 )
       00293 0075     1     MOV  TMR_DELAY ,A
   243 00294 0435 C        	MOV	A,TMR_DELAY
   244            C      M 	JPNZ	$-2
       00295 0E83     1     JBS  _STATUS , Z 
       00296 1694     1     JMP ( $ - 2 ),
   245 00297 16AE C        	JMP	WAIT_FLASH_RET
   246 00298      C        WAIT_FLASH_OK:
   247 00298 00EA C        	CLR	SEC_REG
   248            C      M 	MOV	TMR_NAME,@4
       00299 1804     1     MOV A,@( 4 )
       0029A 0078     1     MOV  TMR_NAME ,A
   249 0029B      C        WAIT_FLASH_OK_LOOP:
   250            C      M 	CALL	#STCP_CHK
                      2  M  LCALL  STCP_CHK 
                      3  M  PAGE #( STCP_CHK ),
       0029B 1E83     3     PAGE ( STCP_CHK / 1024 ),
       0029C 1000     2     CALL ( STCP_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       0029D 1E80     3     PAGE ( $ / 1024 ),
   251            C        	
   252            C      M 	PAGE	#(VGA_STR)
       0029E 1E85     1     PAGE ( VGA_STR / 1024 ),
   253 0029F 1860 C        	MOV	A,@STYLE_CENTER			; 居中显示
   254 002A0 104B C        	CALL	VGA_STR
   255 002A1 1806 C        	MOV	A,@(WD_INITIAL)
   256 002A2 11BF C        	CALL	VGA_STRING
   257 002A3 18FF C        	MOV	A,@CH_END
   258 002A4 104B C        	CALL	VGA_STR
   259            C      M 	PAGE	#($)
       002A5 1E80     1     PAGE ( $ / 1024 ),
   260            C        	
   261            C      M 	CALL	#VIEW_STR
                      2  M  LCALL  VIEW_STR 
                      3  M  PAGE #( VIEW_STR ),
       002A6 1E87     3     PAGE ( VIEW_STR / 1024 ),
       002A7 129D     2     CALL ( VIEW_STR % 1024 ),
                      3  M  PAGE #( $ ),
       002A8 1E80     3     PAGE ( $ / 1024 ),
   262            C        	
   263            C      M 	BANK	0
       002A9 0984     1     BC  _RSR , 6 
       002AA 09C4     1     BC  _RSR , 7 
   264 002AB 0438 C        	MOV	A,TMR_NAME
   265            C      M 	JPNZ	WAIT_FLASH_OK_LOOP
       002AC 0E83     1     JBS  _STATUS , Z 
       002AD 169B     1     JMP  WAIT_FLASH_OK_LOOP ,
   266 002AE      C        WAIT_FLASH_RET:
   267 002AE 0012 C        	RET
   268            C        
   269            C        /*
   270            C        WAIT_FLASH:
   271            C        	CALL	#LCD_VIEW
   272            C        	
   273            C        	CIDBANK	1
   274            C        	BANK	0
   275            C        	MOV	TMR_NAME,@4
   276            C        	JPB	SER_FLAG,7,WAIT_FLASH_OK
   277            C        	JPB	SER_FLAG,4,WAIT_FLASH_OK
   278            C        	MOV	_RC,@(TCP_ADDR+0)
   279            C        	JPB	_RD,7,WAIT_FLASH_OK
   280            C        	;JPB	SER_FLAG,7,WAIT_FLASH_OK
   281            C        	
   282            C        	MOV	A,TMR_DELAY
   283            C        	JPNZ	WAIT_FLASH
   284            C        	INC	BANK0_TEMP0
   285            C        	SUBA	BANK0_TEMP0,@10
   286            C        	JPZ	WAIT_FLASH_TIMEOUT		; 等待FLASH超时
   287            C        	CALL	#SEND_DESIRE
   288            C        	JPNZ	WAIT_FLASH_RET
   289            C        	MOV	A,@0X88
   290            C        	CALL	#STORE_SER
   291            C        	MOV	A,@0X88				; 初始化请求
   292            C        	CALL	#STORE_SER
   293            C        	MOV	A,@CH_END
   294            C        	CALL	#STORE_SER
   295            C        	CALL	#SER_BUF_CHK
   296            C        	MOV	TMR_DELAY,@250
   297            C        	JMP	WAIT_FLASH
   298            C        WAIT_FLASH_TIMEOUT:
   299            C        	PAGE	#VGA_STR
   300            C        	MOV	A,@(STYLE_CENTER)
   301            C        	CALL	VGA_STR
   302            C        	MOV	A,@WD_INITIAL
   303            C        	CALL	VGA_STRING
   304            C        	MOV	A,@CH_BLANK
   305            C        	CALL	VGA_STR
   306            C        	MOV	A,@CH_T
   307            C        	CALL	VGA_STR
   308            C        	MOV	A,@CH_I
   309            C        	CALL	VGA_STR
   310            C        	MOV	A,@CH_M
   311            C        	CALL	VGA_STR
   312            C        	MOV	A,@CH_E
   313            C        	CALL	VGA_STR
   314            C        	MOV	A,@CH_O
   315            C        	CALL	VGA_STR
   316            C        	MOV	A,@CH_U
   317            C        	CALL	VGA_STR
   318            C        	MOV	A,@CH_T
   319            C        	CALL	VGA_STR
   320            C        	MOV	A,@CH_END
   321            C        	CALL	VGA_STR
   322            C        	PAGE	#($)
   323            C        	JMP	WAIT_FLASH_RET
   324            C        WAIT_FLASH_OK:
   325            C        WAIT_FLASH_OK_LOOP:
   326            C        	CALL	#STCP_CHK
   327            C        	;CALL	#DEL_FINISHED
   328            C        	BANK	0
   329            C        	MOV	A,TMR_NAME
   330            C        	JPNZ	WAIT_FLASH_OK_LOOP
   331            C        WAIT_FLASH_RET:
   332            C        	RET
   333            C        */
   500                     include	"timer.asm"
     1            C        
     2 002AF      C        TIMER_DRV:
     3            C      M 	BANK	0
       002AF 0984     1     BC  _RSR , 6 
       002B0 09C4     1     BC  _RSR , 7 
     4            C        	;CALL	CHECK_WEEK
     5 002B1 12CE C        	CALL	CHECK_DAY
     6 002B2 0126 C        	SUB	A,DAY_REG
     7            C      M 	JPNZ	TIMER_DRV_RET
       002B3 0E83     1     JBS  _STATUS , Z 
       002B4 16BF     1     JMP  TIMER_DRV_RET ,
     8            C      M 	MOV	DAY_REG,@1
       002B5 1801     1     MOV A,@( 1 )
       002B6 0066     1     MOV  DAY_REG ,A
     9 002B7 0565 C        	INC	MONTH_REG
    10            C      M 	SUBA	MONTH_REG,@13
       002B8 180D     1     MOV A,@( 13 )
       002B9 0125     1     SUB A, MONTH_REG 
    11            C      M 	JPNZ	TIMER_DRV_RET
       002BA 0E83     1     JBS  _STATUS , Z 
       002BB 16BF     1     JMP  TIMER_DRV_RET ,
    12            C      M 	MOV	MONTH_REG,@1
       002BC 1801     1     MOV A,@( 1 )
       002BD 0065     1     MOV  MONTH_REG ,A
    13 002BE 0564 C        	INC	YEAR_REG
    14            C        
    15 002BF      C        TIMER_DRV_RET:
    16 002BF 0012 C        	RET
    17            C        
    18 002C0      C        CHECK_WEEK:
    19            C      M 	SUBA	WEEK_REG,@0
       002C0 1800     1     MOV A,@( 0 )
       002C1 0127     1     SUB A, WEEK_REG 
    20            C      M 	JPNZ	CHECK_REG_1
       002C2 0E83     1     JBS  _STATUS , Z 
       002C3 16C7     1     JMP  CHECK_REG_1 ,
    21            C      M 	MOV	WEEK_REG,@7
       002C4 1807     1     MOV A,@( 7 )
       002C5 0067     1     MOV  WEEK_REG ,A
    22 002C6 16CD C        	JMP	CHECK_REG_RET
    23 002C7      C        CHECK_REG_1:
    24            C      M 	SUBA	WEEK_REG,@8
       002C7 1808     1     MOV A,@( 8 )
       002C8 0127     1     SUB A, WEEK_REG 
    25            C      M 	JPNZ	CHECK_REG_RET
       002C9 0E83     1     JBS  _STATUS , Z 
       002CA 16CD     1     JMP  CHECK_REG_RET ,
    26            C      M 	MOV	WEEK_REG,@1
       002CB 1801     1     MOV A,@( 1 )
       002CC 0067     1     MOV  WEEK_REG ,A
    27 002CD      C        CHECK_REG_RET:
    28 002CD 0012 C        	RET
    29            C        
    30 002CE      C        CHECK_DAY:
    31 002CE 0425 C        	MOV	A,MONTH_REG
    32 002CF 12DB C        	CALL	MONTH_TAB
    33 002D0 0056 C        	MOV	TEMP0,A
    34            C      M 	JPB	SYS_FG,LEEP_YEAR,CHECK_DAY_RET
       002D1 0D1E     1     JBC  SYS_FG , LEEP_YEAR 
       002D2 16D9     1     JMP  CHECK_DAY_RET ,
    35            C      M 	SUBA	MONTH_REG,@2
       002D3 1802     1     MOV A,@( 2 )
       002D4 0125     1     SUB A, MONTH_REG 
    36            C      M 	JPNZ	CHECK_DAY_RET
       002D5 0E83     1     JBS  _STATUS , Z 
       002D6 16D9     1     JMP  CHECK_DAY_RET ,
    37            C      M 	ADD	TEMP0,@1
       002D7 1801     1     MOV A,@( 1 )
       002D8 03D6     1     ADD  TEMP0 ,A
    38 002D9      C        CHECK_DAY_RET:
    39 002D9 0416 C        	MOV	A,TEMP0
    40 002DA 0012 C        	RET
    41            C        
    42 002DB      C        MONTH_TAB:
    43 002DB 0020 C        	TBL
    44 002DC 1C00 C        	RETL	@0
    45 002DD 1C20 C        	RETL	@(31+1)
    46 002DE 1C1D C        	RETL	@(28+1)
    47 002DF 1C20 C        	RETL	@(31+1)
    48 002E0 1C1F C        	RETL	@(30+1)
    49 002E1 1C20 C        	RETL	@(31+1)
    50 002E2 1C1F C        	RETL	@(30+1)
    51 002E3 1C20 C        	RETL	@(31+1)
    52 002E4 1C20 C        	RETL	@(31+1)
    53 002E5 1C1F C        	RETL	@(30+1)
    54 002E6 1C20 C        	RETL	@(31+1)
    55 002E7 1C1F C        	RETL	@(30+1)
    56 002E8 1C20 C        	RETL	@(31+1)
    57            C        
   501                     include	"ASCII.asm"
     1            C        /***************************************
     2            C        解释ASCII
     3            C        ***************************************/
     4       0010 C        ASC_REG	==	INT_TEMP0
     5            C        
     6 002E9      C        ASCII_NUM:
     7 002E9 0011 C        	DISI
     8 002EA 0050 C        	MOV	ASC_REG,A
     9 002EB 1D20 C        	SUB	A,@32
    10            C      M 	JPZ	ASCII_NUM_SPACE
       002EC 0C83     1     JBC  _STATUS , Z 
       002ED 16FB     1     JMP  ASCII_NUM_SPACE ,
    11            C      M 	SUBA	ASC_REG,@45
       002EE 182D     1     MOV A,@( 45 )
       002EF 0110     1     SUB A, ASC_REG 
    12            C      M 	JPZ	ASCII_NUM_LINE
       002F0 0C83     1     JBC  _STATUS , Z 
       002F1 16FD     1     JMP  ASCII_NUM_LINE ,
    13            C      M 	SUBA	ASC_REG,@48
       002F2 1830     1     MOV A,@( 48 )
       002F3 0110     1     SUB A, ASC_REG 
    14            C      M 	JPNC	ASCII_NUM_ERROR
       002F4 0E03     1     JBS  _STATUS , C 
       002F5 16FB     1     JMP  ASCII_NUM_ERROR ,
    15            C      M 	SUBA	ASC_REG,@58
       002F6 183A     1     MOV A,@( 58 )
       002F7 0110     1     SUB A, ASC_REG 
    16            C      M 	JPNC	ASCII_NUM_NUM
       002F8 0E03     1     JBS  _STATUS , C 
       002F9 16FF     1     JMP  ASCII_NUM_NUM ,
    17 002FA 16FB C        	JMP	ASCII_NUM_ERROR
    18 002FB      C        ASCII_NUM_SPACE:
    19 002FB      C        ASCII_NUM_ERROR:
    20 002FB 1810 C        	MOV	A,@(0X10)
    21 002FC 1751 C        	JMP	ASCII_RET
    22 002FD      C        ASCII_NUM_LINE:
    23 002FD 1811 C        	MOV	A,@(0X11)
    24 002FE 1751 C        	JMP	ASCII_RET
    25 002FF      C        ASCII_NUM_NUM:
    26            C      M 	SUBA	ASC_REG,@48
       002FF 1830     1     MOV A,@( 48 )
       00300 0110     1     SUB A, ASC_REG 
    27 00301 1751 C        	JMP	ASCII_RET
    28            C        
    29 00302      C        ASCII_CH:
    30 00302 0011 C        	DISI
    31 00303 0050 C        	MOV	ASC_REG,A
    32 00304 1D20 C        	SUB	A,@32
    33            C      M 	JPZ	ASCII_CH_SPACE
       00305 0C83     1     JBC  _STATUS , Z 
       00306 1737     1     JMP  ASCII_CH_SPACE ,
    34 00307 1F01 C        	ADD	A,@(33-32)
    35            C      M 	JPZ	ASCII_CH_EXC
       00308 0C83     1     JBC  _STATUS , Z 
       00309 1739     1     JMP  ASCII_CH_EXC ,
    36 0030A 1F0D C        	ADD	A,@(46-33)
    37            C      M 	JPZ	ASCII_CH_POINT
       0030B 0C83     1     JBC  _STATUS , Z 
       0030C 173D     1     JMP  ASCII_CH_POINT ,
    38 0030D 1F01 C        	ADD	A,@(47-46)
    39            C      M 	JPZ	ASCII_CH_SCH1
       0030E 0C83     1     JBC  _STATUS , Z 
       0030F 173B     1     JMP  ASCII_CH_SCH1 ,
    40            C      M 	SUBA	ASC_REG,@48
       00310 1830     1     MOV A,@( 48 )
       00311 0110     1     SUB A, ASC_REG 
    41            C      M 	JPNC	ASCII_CH_ERROR
       00312 0E03     1     JBS  _STATUS , C 
       00313 1737     1     JMP  ASCII_CH_ERROR ,
    42            C      M 	SUBA	ASC_REG,@58
       00314 183A     1     MOV A,@( 58 )
       00315 0110     1     SUB A, ASC_REG 
    43            C      M 	JPNC	ASCII_CH_NUM
       00316 0E03     1     JBS  _STATUS , C 
       00317 173F     1     JMP  ASCII_CH_NUM ,
    44            C      M 	JPZ	ASCII_CH_COLON
       00318 0C83     1     JBC  _STATUS , Z 
       00319 1742     1     JMP  ASCII_CH_COLON ,
    45            C      M 	SUBA	ASC_REG,@63
       0031A 183F     1     MOV A,@( 63 )
       0031B 0110     1     SUB A, ASC_REG 
    46            C      M 	JPZ	ASCII_CH_INTE
       0031C 0C83     1     JBC  _STATUS , Z 
       0031D 1744     1     JMP  ASCII_CH_INTE ,
    47            C      M 	SUBA	ASC_REG,@65
       0031E 1841     1     MOV A,@( 65 )
       0031F 0110     1     SUB A, ASC_REG 
    48            C      M 	JPNC	ASCII_CH_ERROR
       00320 0E03     1     JBS  _STATUS , C 
       00321 1737     1     JMP  ASCII_CH_ERROR ,
    49            C      M 	SUBA	ASC_REG,@91
       00322 185B     1     MOV A,@( 91 )
       00323 0110     1     SUB A, ASC_REG 
    50            C      M 	JPNC	ASCII_CH_CLETTER
       00324 0E03     1     JBS  _STATUS , C 
       00325 1746     1     JMP  ASCII_CH_CLETTER ,
    51            C      M 	SUBA	ASC_REG,@92
       00326 185C     1     MOV A,@( 92 )
       00327 0110     1     SUB A, ASC_REG 
    52            C      M 	JPZ	ASCII_CH_SCH2
       00328 0C83     1     JBC  _STATUS , Z 
       00329 174A     1     JMP  ASCII_CH_SCH2 ,
    53            C      M 	SUBA	ASC_REG,@95
       0032A 185F     1     MOV A,@( 95 )
       0032B 0110     1     SUB A, ASC_REG 
    54            C      M 	JPZ	ASCII_CH__
       0032C 0C83     1     JBC  _STATUS , Z 
       0032D 174C     1     JMP  ASCII_CH__ ,
    55            C      M 	SUBA	ASC_REG,@97
       0032E 1861     1     MOV A,@( 97 )
       0032F 0110     1     SUB A, ASC_REG 
    56            C      M 	JPNC	ASCII_CH_ERROR
       00330 0E03     1     JBS  _STATUS , C 
       00331 1737     1     JMP  ASCII_CH_ERROR ,
    57            C      M 	SUBA	ASC_REG,@123
       00332 187B     1     MOV A,@( 123 )
       00333 0110     1     SUB A, ASC_REG 
    58            C      M 	JPNC	ASCII_CH_SLETTER
       00334 0E03     1     JBS  _STATUS , C 
       00335 174E     1     JMP  ASCII_CH_SLETTER ,
    59 00336 1737 C        	JMP	ASCII_CH_ERROR			; ERROR
    60 00337      C        ASCII_CH_SPACE:
    61 00337      C        ASCII_CH_ERROR:
    62 00337 1824 C        	MOV	A,@CH_BLANK
    63 00338 1751 C        	JMP	ASCII_RET
    64 00339      C        ASCII_CH_EXC:
    65 00339 1827 C        	MOV	A,@CH_EXC
    66 0033A 1751 C        	JMP	ASCII_RET
    67 0033B      C        ASCII_CH_SCH1:
    68 0033B 182D C        	MOV	A,@CH_SCH1
    69 0033C 1751 C        	JMP	ASCII_RET
    70 0033D      C        ASCII_CH_POINT:
    71 0033D 1829 C        	MOV	A,@CH_POINT
    72 0033E 1751 C        	JMP	ASCII_RET
    73 0033F      C        ASCII_CH_NUM:
    74            C      M 	SUBA	ASC_REG,@48
       0033F 1830     1     MOV A,@( 48 )
       00340 0110     1     SUB A, ASC_REG 
    75 00341 1751 C        	JMP	ASCII_RET
    76 00342      C        ASCII_CH_COLON:
    77 00342 1828 C        	MOV	A,@CH_COLON
    78 00343 1751 C        	JMP	ASCII_RET
    79 00344      C        ASCII_CH_INTE:
    80 00344 1826 C        	MOV	A,@CH_INTE
    81 00345 1751 C        	JMP	ASCII_RET
    82 00346      C        ASCII_CH_CLETTER:
    83            C      M 	SUBA	ASC_REG,@65
       00346 1841     1     MOV A,@( 65 )
       00347 0110     1     SUB A, ASC_REG 
    84 00348 1F0A C        	ADD	A,@CH_A
    85 00349 1751 C        	JMP	ASCII_RET
    86 0034A      C        ASCII_CH_SCH2:
    87 0034A 182E C        	MOV	A,@CH_SCH2
    88 0034B 1751 C        	JMP	ASCII_RET
    89 0034C      C        ASCII_CH__:
    90 0034C 182F C        	MOV	A,@CH__
    91 0034D 1751 C        	JMP	ASCII_RET
    92 0034E      C        ASCII_CH_SLETTER:
    93            C      M 	SUBA	ASC_REG,@97
       0034E 1861     1     MOV A,@( 97 )
       0034F 0110     1     SUB A, ASC_REG 
    94 00350 1F0A C        	ADD	A,@CH_A
    95            C        
    96 00351      C        ASCII_RET:
    97 00351 0010 C        	ENI
    98 00352 0012 C        	RET
    99            C        
   502                     include	"iic.asm"
     1            C        
     2            C        /*****************************
     3            C        由SPI通讯方式改过。
     4            C        尽量不改变接口。
     5            C        由原来在中断0.5ms中执行改到程序循环中
     6            C        一次接收/发送start--stop的一组命令。
     7            C        *****************************/
     8            C        
     9       00E0 C        SER_BASE	EQU	0XE0	; call id ram
    10       003F C        SER_DATA	EQU	0X3F
    11       003C C        SER_FLAG	EQU	0X3C
    12            C        ;	.7 收到一串数据(1)
    13            C        ;	.6 请求发送(1)
    14       003D C        SER_CONT	EQU	0X3D
    15       003E C        SER_SEND	EQU	0X3E
    16            C        
    17            C        
    18       0000 C        P_REQ		EQU	0
    19       0000 C        P_WR		EQU	0
    20            C        
    21       0001 C        SDA		EQU	1
    22       0002 C        SCL		EQU	2
    23            C        
    24       0010 C        ax		EQU	int_temp0
    25       0011 C        exa		EQU	int_temp1
    26       0012 C        cnt		EQU	int_temp2
    27       0013 C        bx		EQU	int_temp3
    28       0014 C        exb		EQU	int_temp4
    29            C        
    30       0041 C        SLAVE_ADDR	EQU	0x41
    31            C        
    32            C        
    33 00353      C        SerIic:
    34 00353 0011 C        	DISI
    35 00354 00D1 C        	CLR	exa
    36 00355 0DFC C        	JBC	SER_FLAG,7
    37 00356 175B C        	JMP	SerIic_ret			; 收到的数据没有被处理，不启动接收/发送
    38 00357 0DBC C        	JBC	SER_FLAG,6
    39 00358 1779 C        	JMP	SerIicSend			; 有发送请求，转发送
    40 00359 0E07 C        	JBS	_P7,P_REQ
    41 0035A 175E C        	JMP	SerIicReceive			; 请求线为低，DSP有数据需要发送，转接收
    42 0035B      C        SerIic_ret:
    43 0035B 0013 C        	RETI
    44            C        
    45 0035C      C        SerIic_fail:
    46 0035C 139E C        	CALL	IicStop
    47 0035D 0013 C        	RETI
    48            C        
    49 0035E      C        SerIicReceive:					; 接收
    50 0035E 1399 C        	CALL	IicStart			; 首先产生一个起始条件
    51 0035F 1883 C        	MOV	A,@((SLAVE_ADDR<<1)+1)		; 读从机
    52 00360 13A8 C        	CALL	IicSendByte			; 发送一个字节的数据
    53 00361 13D8 C        	CALL	IicGetAck			; 读ACK
    54            C      M 	JPNZ	SerIic_fail			; 没有收到ACK，传输失败
       00362 0E83     1     JBS  _STATUS , Z 
       00363 175C     1     JMP  SERIIC_FAIL ,
    55 00364      C        SerIicReceive_loop:
    56 00364 13BB C        	CALL	IicGetByte			; 读一个字节的数据
    57 00365 0053 C        	MOV	bx,A
    58 00366 1BFF C        	XOR	A,@(0xff)
    59            C      M 	JPZ	SerIicReceiveStop		; 收到0xff，停止信号
       00367 0C83     1     JBC  _STATUS , Z 
       00368 1773     1     JMP  SERIICRECEIVESTOP ,
    60 00369 0413 C        	MOV	A,bx
    61            C      M 	IIC_STORE_DATA				; 保存数据
       0036A 0050     1     MOV  AX ,A
                      2  M  ADDA  EXA ,@( SER_BASE )
       0036B 18E0     2     MOV A,@( SER_BASE )
       0036C 0391     2     ADD A, EXA 
       0036D 004C     1     MOV  _RC ,A
       0036E 0551     1     INC  EXA ,
                      2  M  MOV  _RD , AX 
       0036F 0410     2     MOV A, AX 
       00370 004D     2     MOV  _RD ,A
    62 00371 13CD C        	CALL	IicSendAck			; 发送ACK
    63 00372 1764 C        	JMP	SerIicReceive_loop
    64 00373      C        SerIicReceiveStop:
    65 00373 13CF C        	CALL	IicSendNoAck			; 发送/ACK
    66 00374 139E C        	CALL	IicStop				; 停止
    67 00375 0BFC C        	BS	SER_FLAG,7			; 置收到数据标志位
    68            C      M 	MOV	SER_CONT,exa			; 数据有效长度
       00376 0411     1     MOV A, EXA 
       00377 007D     1     MOV  SER_CONT ,A
    69 00378 175B C        	JMP	SerIic_ret
    70            C        
    71 00379      C        SerIicSend:					; 发送
    72 00379 1399 C        	CALL	IicStart			; 产生一个起始条件
    73 0037A 1882 C        	MOV	A,@((SLAVE_ADDR<<1)+0)		; 写从机
    74 0037B 13A8 C        	CALL	IicSendByte			; 发送地址
    75 0037C 13D8 C        	CALL	IicGetAck			; 读ACK
    76            C      M 	JPNZ	SerIic_fail			; 没有收到ACK，传输失败
       0037D 0E83     1     JBS  _STATUS , Z 
       0037E 175C     1     JMP  SERIIC_FAIL ,
    77 0037F 00D1 C        	CLR	exa
    78 00380      C        SerIicSend_loop:
    79            C      M 	IIC_GET_DATA				; 从缓冲区中取出数据
                      2  M  SUBA  EXA , SER_CONT 
       00380 043D     2     MOV A, SER_CONT 
       00381 0111     2     SUB A, EXA 
                      2  M  JPC  IIC_GET_DATA_END 
       00382 0C03     2     JBC  _STATUS , C 
       00383 178A     2     JMP  IIC_GET_DATA_END ,
                      2  M  ADDA  EXA ,@( SER_BASE )
       00384 18E0     2     MOV A,@( SER_BASE )
       00385 0391     2     ADD A, EXA 
       00386 004C     1     MOV  _RC ,A
       00387 0551     1     INC  EXA ,
       00388 040D     1     MOV A, _RD 
       00389 178B     1     JMP ( $ + 2 ),
       0038A          1    IIC_GET_DATA_END:   
       0038A 18FF     1     MOV A,@( 255 )
    80 0038B 0053 C        	MOV	bx,A
    81 0038C 1BFF C        	XOR	A,@(0xff)
    82            C      M 	JPZ	SerIicSendStop			; 0xff，停止信号
       0038D 0C83     1     JBC  _STATUS , Z 
       0038E 1795     1     JMP  SERIICSENDSTOP ,
    83 0038F 0413 C        	MOV	A,bx
    84 00390 13A8 C        	CALL	IicSendByte			; 发送数据
    85 00391 13D8 C        	CALL	IicGetAck
    86            C      M 	JPNZ	SerIic_fail			; 没有收到ACK，传输失败
       00392 0E83     1     JBS  _STATUS , Z 
       00393 175C     1     JMP  SERIIC_FAIL ,
    87 00394 1780 C        	JMP	SerIicSend_loop
    88 00395      C        SerIicSendStop:
    89 00395 139E C        	CALL	IicStop				; 停止
    90 00396 00FD C        	CLR	SER_CONT			; 复位缓冲区
    91 00397 09BC C        	BC	SER_FLAG,6		 	; 发送完毕，复位请求发送
    92 00398 175B C        	JMP	SerIic_ret
    93            C        	
    94            C        
    95            C        
    96 00399      C        IicStart:
    97 00399 0847 C        	BC	_P7,SDA				; 拉低SDA线，产生一个start条件
    98 0039A 13E2 C        	CALL	IicDelay			; 延时5us
    99 0039B 0887 C        	BC	_P7,SCL				; SCL变低
   100 0039C 13E2 C        	CALL	IicDelay
   101 0039D 0012 C        	RET
   102            C        
   103 0039E      C        IicStop:
   104 0039E 0887 C        	BC	_P7,SCL
   105 0039F 0017 C        	IOR	_IOC7
   106 003A0 1AFD C        	AND	A,@((1<<SDA)^0xff)		; 将SDA改为输出状态
   107 003A1 0007 C        	IOW	_IOC7
   108 003A2 0847 C        	BC	_P7,SDA				; SDA输出低
   109 003A3 13E2 C        	CALL	IicDelay
   110 003A4 13E7 C        	CALL	IicHighScl
   111 003A5 13E2 C        	CALL	IicDelay
   112 003A6 0A47 C        	BS	_P7,SDA				; SDA输出高
   113 003A7 0012 C        	RET
   114            C        	
   115            C        
   116 003A8      C        IicSendByte:
   117 003A8 0050 C        	MOV	ax,A
   118            C      M 	MOV	cnt,@(8)			; 一次发送8位
       003A9 1808     1     MOV A,@( 8 )
       003AA 0052     1     MOV  CNT ,A
   119 003AB      C        IicSendByte_loop:
   120            C      M 	JPB	ax,7,$+3			; 数据从最高位开始发送
       003AB 0DD0     1     JBC  AX , 7 
       003AC 17AF     1     JMP ( $ + 3 ),
   121 003AD 0847 C        	BC	_P7,SDA				; 改变SDA线的状态
   122 003AE 17B0 C        	JMP	$+2
   123 003AF 0A47 C        	BS	_P7,SDA				; 改变SDA线的状态
   124 003B0 0017 C        	IOR	_IOC7
   125 003B1 1AFD C        	AND	A,@((1<<SDA)^0xff)		; 将SDA线改为输出
   126 003B2 0007 C        	IOW	_IOC7
   127 003B3 06D0 C        	RLC	ax
   128 003B4 13E2 C        	CALL	IicDelay			; 延时5us
   129 003B5 13E7 C        	CALL	IicHighScl			; 拉高SCL线
   130 003B6 13E2 C        	CALL	IicDelay			; 延时5us
   131 003B7 0887 C        	BC	_P7,SCL				; 拉低SCL线
   132 003B8 05D2 C        	DJZ	cnt
   133 003B9 17AB C        	JMP	IicSendByte_loop
   134 003BA 0012 C        	RET
   135            C        
   136            C        
   137 003BB      C        IicGetByte:
   138 003BB 0017 C        	IOR	_IOC7
   139 003BC 1902 C        	OR	A,@(1<<SDA)			; 将SDA线改为输入状态
   140 003BD 0007 C        	IOW	_IOC7
   141            C      M 	MOV	cnt,@(8)
       003BE 1808     1     MOV A,@( 8 )
       003BF 0052     1     MOV  CNT ,A
   142 003C0 00D0 C        	CLR	ax
   143 003C1      C        IicGetByte_loop:
   144 003C1 13E2 C        	CALL	IicDelay			; 低SCL延时
   145 003C2 13E7 C        	CALL	IicHighScl			; 等待SCL变高
   146 003C3 13E2 C        	CALL	IicDelay			; 延时
   147 003C4 0803 C        	BC	_STATUS,C
   148 003C5 0C47 C        	JBC	_P7,SDA				; 读SDA的状态
   149 003C6 0A03 C        	BS	_STATUS,C
   150 003C7 06D0 C        	RLC	ax				; 保存在ax中
   151 003C8 0887 C        	BC	_P7,SCL				; SCL变低
   152 003C9 05D2 C        	DJZ	cnt
   153 003CA 17C1 C        	JMP	IicGetByte_loop
   154 003CB 0410 C        	MOV	A,ax
   155 003CC 0012 C        	RET
   156            C        	
   157            C        
   158 003CD      C        IicSendAck:
   159 003CD 0847 C        	BC	_P7,SDA				; ACK = 0
   160 003CE 17D0 C        	JMP	IicAck
   161            C        
   162 003CF      C        IicSendNoAck:
   163 003CF 0A47 C        	BS	_P7,SDA				; ACK = 1
   164 003D0      C        IicAck:
   165 003D0 0017 C        	IOR	_IOC7
   166 003D1 1AFD C        	AND	A,@((1<<SDA)^0xff)		; 将SDA线改为输出
   167 003D2 0007 C        	IOW	_IOC7
   168 003D3 13E2 C        	CALL	IicDelay			; 延时
   169 003D4 13E7 C        	CALL	IicHighScl
   170 003D5 13E2 C        	CALL	IicDelay
   171 003D6 0887 C        	BC	_P7,SCL
   172 003D7 0012 C        	RET
   173            C        
   174 003D8      C        IicGetAck:
   175 003D8 0017 C        	IOR	_IOC7
   176 003D9 1902 C        	OR	A,@(1<<SDA)			; 将SDA线改为输入状态
   177 003DA 0007 C        	IOW	_IOC7
   178 003DB 13E2 C        	CALL	IicDelay			; 延时5us
   179 003DC 13E7 C        	CALL	IicHighScl			; 拉高SCL线
   180 003DD 13E2 C        	CALL	IicDelay			; 延时5us
   181            C      M 	ANDA	_P7,@(1<<SDA)			; 得到ACK状态,(z)
       003DE 1802     1     MOV A,@(( 1 << SDA ))
       003DF 0287     1     AND A, _P7 
   182 003E0 0887 C        	BC	_P7,SCL				; 拉低SCL线
   183 003E1 0012 C        	RET
   184            C        
   185            C        
   186            C        
   187            C        ; 每条单周期指令0.6us
   188            C        ; 延时(2+2*X)*0.6us, X=4，延时6us。
   189 003E2      C        IicDelay:
   190            C      M 	MOV	exb,@(0x4)
       003E2 1804     1     MOV A,@( 4 )
       003E3 0054     1     MOV  EXB ,A
   191 003E4 05D4 C        	DJZ	exb
   192 003E5 17E4 C        	JMP	$-1
   193 003E6 0012 C        	RET
   194            C        
   195            C        ; 将SCL线拉高，拉高之前必须检查SCL线是否为低，为低时则需要等待其变高。
   196 003E7      C        IicHighScl:
   197 003E7 0017 C        	IOR	_IOC7
   198 003E8 1904 C        	OR	A,@(1<<SCL)			; 将SCL改为输入状态
   199 003E9 0007 C        	IOW	_IOC7
   200 003EA 0E87 C        	JBS	_P7,SCL
   201 003EB 17EA C        	JMP	$-1				; 等待SCL线变高
   202 003EC 0A87 C        	BS	_P7,SCL				; 拉高SCL线
   203 003ED 0017 C        	IOR	_IOC7
   204 003EE 1AFB C        	AND	A,@((1<<SCL)^0xff)		; 将SCL改为输出状态
   205 003EF 0007 C        	IOW	_IOC7
   206 003F0 0012 C        	RET
   207            C        
   208            C        
   209            C        IIC_STORE_DATA	MACRO
   210            C        	MOV	ax,A
   211            C        	ADDA	exa,@SER_BASE
   212            C        	MOV	_RC,A
   213            C        	INC	exa
   214            C        	
   215            C        	MOV	_RD,ax
   216            C        	ENDM
   217            C        	
   218            C        
   219            C        IIC_GET_DATA	MACRO
   220            C        	SUBA	exa,SER_CONT
   221            C        	JPC	IIC_GET_DATA_end
   222            C        	ADDA	exa,@SER_BASE
   223            C        	MOV	_RC,A
   224            C        	INC	exa
   225            C        	
   226            C        	MOV	A,_RD
   227            C        	JMP	$+2
   228            C        IIC_GET_DATA_end:
   229            C        	MOV	A,@(0xff)
   230            C        	ENDM
   231            C        
   232            C        ;---------------------------------------
   233            C        ; SER_STOR_DATA: 将要发送的数据存入缓冲区
   234            C        ; SER_BASE: 缓冲区的基地址
   235            C        ; SER_SEND: 缓冲区的变址
   236            C        ;---------------------------------------
   237 003F1      C        SER_STOR_DATA:
   238 003F1 0056 C        	MOV	TEMP0,A
   239            C        	
   240            C      M 	ADDA	SER_SEND,@SER_BASE
       003F2 18E0     1     MOV A,@( SER_BASE )
       003F3 03BE     1     ADD A, SER_SEND 
   241 003F4 004C C        	MOV	_RC,A
   242            C        	
   243 003F5 057E C        	INC	SER_SEND
   244            C        	
   245            C      M 	MOV	_RD,TEMP0
       003F6 0416     1     MOV A, TEMP0 
       003F7 004D     1     MOV  _RD ,A
   246 003F8 0012 C        	RET
   247            C        
   248            C        ;---------------------------------------
   249            C        ; SER_GETRECED_DATA: 从缓冲区中取出收到的数据
   250            C        ; SER_BASE: 缓冲区的基地址
   251            C        ; INPUT: ACC-->缓冲区的变址
   252            C        ; OUTPUT: ACC-->缓冲区的变址对应的数据
   253 003F9      C        SER_GETRECED_DATA:
   254 003F9 1FE0 C        	ADD	A,@SER_BASE
   255 003FA 004C C        	MOV	_RC,A
   256 003FB 040D C        	MOV	A,_RD
   257 003FC 0012 C        	RET
   258            C        
   259            C        
   503                     
   504                     include	"CID.asm"		; 400
     1            C        /***************************************
     2            C        Caller ID处理，包括：
     3            C        FSK_DECODE	FSK 解码
     4            C        CID_STORE	号码保存
     5            C        ***************************************/
     6       0020 C        CID_LENGTH	==	BANK1_TEMP0
     7            C        ORG	0X0400
     8            C        
     9 00400      C        FSK_DECODE:
    10            C      M 	JPNB	FSK_FG,FSK_SUC,FSK_DECODE_RET1
       00400 0E5C     1     JBS  FSK_FG , FSK_SUC 
       00401 1475     1     JMP  FSK_DECODE_RET1 ,
    11            C        
    12 00402      C        FSK_DECODE_TEL_SEAT:
    13            C      M 	BANK	1
       00402 0B84     1     BS  _RSR , 6 
       00403 09C4     1     BC  _RSR , 7 
    14            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00404 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00405 088B     2     BC  _RB , 2 
    15            C        	
    16 00406 118C C        	CALL	CLR_DECODE_RAM
    17            C        	
    18            C      M 	MOV	_RC,@(FSK_ADDR+1)	; 长度
       00407 1801     1     MOV A,@(( FSK_ADDR + 1 ))
       00408 004C     1     MOV  _RC ,A
    19            C      M 	MOV	CID_LENGTH,_RD
       00409 040D     1     MOV A, _RD 
       0040A 0060     1     MOV  CID_LENGTH ,A
    20            C      M 	MOV	_RC,@FSK_ADDR
       0040B 1800     1     MOV A,@( FSK_ADDR )
       0040C 004C     1     MOV  _RC ,A
    21            C      M 	SUBA	_RD,@4
       0040D 1804     1     MOV A,@( 4 )
       0040E 010D     1     SUB A, _RD 
    22            C      M 	JPZ	FSK_DECODE_SDMF
       0040F 0C83     1     JBC  _STATUS , Z 
       00410 141E     1     JMP  FSK_DECODE_SDMF ,
    23            C      M 	SUBA	_RD,@0X80
       00411 1880     1     MOV A,@( 128 )
       00412 010D     1     SUB A, _RD 
    24            C      M 	JPZ	FSK_DECODE_MDMF
       00413 0C83     1     JBC  _STATUS , Z 
       00414 1437     1     JMP  FSK_DECODE_MDMF ,
    25            C      M 	SUBA	_RD,@0X81
       00415 1881     1     MOV A,@( 129 )
       00416 010D     1     SUB A, _RD 
    26            C      M 	JPZ	FSK_DECODE_MDMF
       00417 0C83     1     JBC  _STATUS , Z 
       00418 1437     1     JMP  FSK_DECODE_MDMF ,
    27            C      M 	SUBA	_RD,@0X82
       00419 1882     1     MOV A,@( 130 )
       0041A 010D     1     SUB A, _RD 
    28            C      M 	JPZ	FSK_DECODE_MDMF
       0041B 0C83     1     JBC  _STATUS , Z 
       0041C 1437     1     JMP  FSK_DECODE_MDMF ,
    29 0041D 1474 C        	JMP	FSK_DECODE_RET
    30            C        
    31 0041E      C        FSK_DECODE_SDMF:			; 单制式
    32            C      M 	MOV	_RC,@(FSK_ADDR+1)
       0041E 1801     1     MOV A,@(( FSK_ADDR + 1 ))
       0041F 004C     1     MOV  _RC ,A
    33 00420      C        FSK_DECODE_SDMF_LOOP:
    34 00420 0420 C        	MOV	A,CID_LENGTH
    35            C      M 	JPZ	FSK_DECODE_RET
       00421 0C83     1     JBC  _STATUS , Z 
       00422 1474     1     JMP  FSK_DECODE_RET ,
    36 00423 142E C        	JMP	FSK_DECODE_SDMF_TIME
    37 00424 054C C        	INC	_RC
    38            C      M 	SUBA	_RD,@1
       00425 1801     1     MOV A,@( 1 )
       00426 010D     1     SUB A, _RD 
    39            C      M 	JPZ	FSK_DECODE_SDMF_TIME	; 有时间的单制式
       00427 0C83     1     JBC  _STATUS , Z 
       00428 142E     1     JMP  FSK_DECODE_SDMF_TIME ,
    40            C      M 	SUBA	_RD,@0X02
       00429 1802     1     MOV A,@( 2 )
       0042A 010D     1     SUB A, _RD 
    41            C      M 	JPZ	FSK_DECODE_SDMF_NUM	; 号码
       0042B 0C83     1     JBC  _STATUS , Z 
       0042C 1432     1     JMP  FSK_DECODE_SDMF_NUM ,
    42 0042D 1420 C        	JMP	FSK_DECODE_SDMF_LOOP
    43            C        
    44 0042E      C        FSK_DECODE_SDMF_TIME:
    45 0042E 1808 C        	MOV	A,@8
    46 0042F 1077 C        	CALL	FSK_DECODE_TIME		; 解时间并储存起来，更新当前时间
    47            C      M 	BANK	1
       00430 0B84     1     BS  _RSR , 6 
       00431 09C4     1     BC  _RSR , 7 
    48            C        	;JMP	FSK_DECODE_SDMF_LOOP
    49 00432      C        FSK_DECODE_SDMF_NUM:
    50            C      M 	SUBA	CID_LENGTH,@8
       00432 1808     1     MOV A,@( 8 )
       00433 0120     1     SUB A, CID_LENGTH 
    51 00434 10D1 C        	CALL	FSK_DECODE_NUM		; 解号码
    52            C      M 	SRAM	FSK_FG,CALLIN
       00435 0BDC     1     BS  FSK_FG , CALLIN 
    53            C        	;JMP	FSK_DECODE_SDMF_LOOP
    54 00436 1474 C        	JMP	FSK_DECODE_RET
    55            C        
    56 00437      C        FSK_DECODE_MDMF:			; 复合制式的解码
    57            C      M 	MOV	_RC,@(FSK_ADDR+1)
       00437 1801     1     MOV A,@(( FSK_ADDR + 1 ))
       00438 004C     1     MOV  _RC ,A
    58 00439      C        FSK_DECODE_MDMF_LOOP:
    59 00439 0420 C        	MOV	A,CID_LENGTH
    60            C      M 	JPZ	FSK_DECODE_RET
       0043A 0C83     1     JBC  _STATUS , Z 
       0043B 1474     1     JMP  FSK_DECODE_RET ,
    61 0043C 054C C        	INC	_RC
    62            C      M 	SUBA	_RD,@0X01
       0043D 1801     1     MOV A,@( 1 )
       0043E 010D     1     SUB A, _RD 
    63            C      M 	JPZ	FSK_DECODE_MDMF_TIME	; 01 时间
       0043F 0C83     1     JBC  _STATUS , Z 
       00440 1452     1     JMP  FSK_DECODE_MDMF_TIME ,
    64            C      M 	SUBA	_RD,@0X02
       00441 1802     1     MOV A,@( 2 )
       00442 010D     1     SUB A, _RD 
    65            C      M 	JPZ	FSK_DECODE_MDMF_NUM	; 02 号码
       00443 0C83     1     JBC  _STATUS , Z 
       00444 145C     1     JMP  FSK_DECODE_MDMF_NUM ,
    66            C      M 	SUBA	_RD,@0X04
       00445 1804     1     MOV A,@( 4 )
       00446 010D     1     SUB A, _RD 
    67            C      M 	JPZ	FSK_DECODE_MDMF_NONUM	; 04 无号码
       00447 0C83     1     JBC  _STATUS , Z 
       00448 1465     1     JMP  FSK_DECODE_MDMF_NONUM ,
    68            C      M 	SUBA	_RD,@0X07
       00449 1807     1     MOV A,@( 7 )
       0044A 010D     1     SUB A, _RD 
    69            C      M 	JPZ	FSK_DECODE_MDMF_NAME	; 07 姓名
       0044B 0C83     1     JBC  _STATUS , Z 
       0044C 146A     1     JMP  FSK_DECODE_MDMF_NAME ,
    70            C      M 	SUBA	_RD,@0X08
       0044D 1808     1     MOV A,@( 8 )
       0044E 010D     1     SUB A, _RD 
    71            C      M 	JPZ	FSK_DECODE_MDMF_NONAME	; 08 无姓名
       0044F 0C83     1     JBC  _STATUS , Z 
       00450 1473     1     JMP  FSK_DECODE_MDMF_NONAME ,
    72 00451 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
    73 00452      C        FSK_DECODE_MDMF_TIME:
    74 00452 054C C        	INC	_RC
    75            C      M 	SUB	CID_LENGTH,_RD
       00453 040D     1     MOV A, _RD 
       00454 0160     1     SUB  CID_LENGTH ,A
    76            C      M 	SUB	CID_LENGTH,@2
       00455 1802     1     MOV A,@( 2 )
       00456 0160     1     SUB  CID_LENGTH ,A
    77 00457 040D C        	MOV	A,_RD
    78 00458 1077 C        	CALL	FSK_DECODE_TIME		; 解时间并储存起来，更新当前时间
    79            C      M 	BANK	1
       00459 0B84     1     BS  _RSR , 6 
       0045A 09C4     1     BC  _RSR , 7 
    80 0045B 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
    81 0045C      C        FSK_DECODE_MDMF_NUM:
    82 0045C 054C C        	INC	_RC
    83            C      M 	SUB	CID_LENGTH,_RD
       0045D 040D     1     MOV A, _RD 
       0045E 0160     1     SUB  CID_LENGTH ,A
    84            C      M 	SUB	CID_LENGTH,@2
       0045F 1802     1     MOV A,@( 2 )
       00460 0160     1     SUB  CID_LENGTH ,A
    85 00461 040D C        	MOV	A,_RD
    86 00462 10D1 C        	CALL	FSK_DECODE_NUM		; 解号码
    87            C      M 	SRAM	FSK_FG,CALLIN
       00463 0BDC     1     BS  FSK_FG , CALLIN 
    88 00464 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
    89 00465      C        FSK_DECODE_MDMF_NONUM:
    90            C      M 	SUB	CID_LENGTH,@3
       00465 1803     1     MOV A,@( 3 )
       00466 0160     1     SUB  CID_LENGTH ,A
    91            C        	;CALL	FSK_DECODE_NUM		; 解号码
    92            C      M 	SRAM	FSK_FG,CALLIN
       00467 0BDC     1     BS  FSK_FG , CALLIN 
    93            C      M 	SRAM	FSK_FG,ERR_NUM
       00468 0B5C     1     BS  FSK_FG , ERR_NUM 
    94 00469 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
    95 0046A      C        FSK_DECODE_MDMF_NAME:
    96 0046A 054C C        	INC	_RC
    97            C      M 	SUB	CID_LENGTH,_RD
       0046B 040D     1     MOV A, _RD 
       0046C 0160     1     SUB  CID_LENGTH ,A
    98            C      M 	SUB	CID_LENGTH,@2
       0046D 1802     1     MOV A,@( 2 )
       0046E 0160     1     SUB  CID_LENGTH ,A
    99 0046F 040D C        	MOV	A,_RD
   100 00470 1116 C        	CALL	FSK_DECODE_NAME
   101            C      M 	SRAM	FSK_FG,CALLIN
       00471 0BDC     1     BS  FSK_FG , CALLIN 
   102 00472 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
   103 00473      C        FSK_DECODE_MDMF_NONAME:
   104 00473 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
   105            C        	
   106            C        
   107            C        
   108            C        
   109 00474      C        FSK_DECODE_RET:
   110            C      M 	CRAM	FSK_FG,FSK_SUC
       00474 085C     1     BC  FSK_FG , FSK_SUC 
   111 00475      C        FSK_DECODE_RET1:
   112 00475 1197 C        	CALL	SEND_CALL
   113 00476 0012 C        	RET
   114            C        
   115            C        
   116            C        /***************************************
   117            C        从FSK数据中解时间
   118            C        时间8位，不够8位则错误
   119            C        ***************************************/
   120 00477      C        FSK_DECODE_TIME:
   121            C        	;INC	_RC
   122            C        	;SUB	CID_LENGTH,_RD
   123            C        	;SUB	CID_LENGTH,@2
   124 00477 0056 C        	MOV	TEMP0,A
   125            C      M 	JPZ	FSK_DECODE_TIME_NOTIME
       00478 0C83     1     JBC  _STATUS , Z 
       00479 14BA     1     JMP  FSK_DECODE_TIME_NOTIME ,
   126 0047A 1D08 C        	SUB	A,@8
   127            C      M 	JPNZ	FSK_DECODE_TIME_ERR
       0047B 0E83     1     JBS  _STATUS , Z 
       0047C 14BA     1     JMP  FSK_DECODE_TIME_ERR ,
   128            C      M 	BANK	0
       0047D 0984     1     BC  _RSR , 6 
       0047E 09C4     1     BC  _RSR , 7 
   129            C      M 	MOV	TEMP1,_RC
       0047F 040C     1     MOV A, _RC 
       00480 0057     1     MOV  TEMP1 ,A
   130            C      M 	MOV	_RC,@(CID_ADDR+28)
       00481 1858     1     MOV A,@(( CID_ADDR + 28 ))
       00482 004C     1     MOV  _RC ,A
   131            C      M 	MOV	_RD,@4
       00483 1804     1     MOV A,@( 4 )
       00484 004D     1     MOV  _RD ,A
   132            C      M 	MOV	_RC,TEMP1
       00485 0417     1     MOV A, TEMP1 
       00486 004C     1     MOV  _RC ,A
   133            C        	
   134 00487 00EA C        	CLR	SEC_REG
   135 00488 054C C        	INC	_RC
   136 00489 10BD C        	CALL	GET_TIME
   137            C      M 	MOV	MONTH_REG,TEMP0
       0048A 0416     1     MOV A, TEMP0 
       0048B 0065     1     MOV  MONTH_REG ,A
   138            C      M 	MOV	TEMP1,_RC
       0048C 040C     1     MOV A, _RC 
       0048D 0057     1     MOV  TEMP1 ,A
   139            C      M 	MOV	_RC,@(CID_ADDR+29)
       0048E 1859     1     MOV A,@(( CID_ADDR + 29 ))
       0048F 004C     1     MOV  _RC ,A
   140            C      M 	MOV	_RD,TEMP0
       00490 0416     1     MOV A, TEMP0 
       00491 004D     1     MOV  _RD ,A
   141            C      M 	MOV	_RC,TEMP1
       00492 0417     1     MOV A, TEMP1 
       00493 004C     1     MOV  _RC ,A
   142 00494 054C C        	INC	_RC
   143 00495 10BD C        	CALL	GET_TIME
   144            C      M 	MOV	DAY_REG,TEMP0
       00496 0416     1     MOV A, TEMP0 
       00497 0066     1     MOV  DAY_REG ,A
   145            C      M 	MOV	TEMP1,_RC
       00498 040C     1     MOV A, _RC 
       00499 0057     1     MOV  TEMP1 ,A
   146            C      M 	MOV	_RC,@(CID_ADDR+30)
       0049A 185A     1     MOV A,@(( CID_ADDR + 30 ))
       0049B 004C     1     MOV  _RC ,A
   147            C      M 	MOV	_RD,TEMP0
       0049C 0416     1     MOV A, TEMP0 
       0049D 004D     1     MOV  _RD ,A
   148            C      M 	MOV	_RC,TEMP1
       0049E 0417     1     MOV A, TEMP1 
       0049F 004C     1     MOV  _RC ,A
   149 004A0 054C C        	INC	_RC
   150 004A1 10BD C        	CALL	GET_TIME
   151            C      M 	MOV	HOUR_REG,TEMP0
       004A2 0416     1     MOV A, TEMP0 
       004A3 0068     1     MOV  HOUR_REG ,A
   152            C      M 	MOV	TEMP1,_RC
       004A4 040C     1     MOV A, _RC 
       004A5 0057     1     MOV  TEMP1 ,A
   153            C      M 	MOV	_RC,@(CID_ADDR+31)
       004A6 185B     1     MOV A,@(( CID_ADDR + 31 ))
       004A7 004C     1     MOV  _RC ,A
   154            C      M 	MOV	_RD,TEMP0
       004A8 0416     1     MOV A, TEMP0 
       004A9 004D     1     MOV  _RD ,A
   155            C      M 	MOV	_RC,TEMP1
       004AA 0417     1     MOV A, TEMP1 
       004AB 004C     1     MOV  _RC ,A
   156 004AC 054C C        	INC	_RC
   157 004AD 10BD C        	CALL	GET_TIME
   158            C      M 	MOV	MIN_REG,TEMP0
       004AE 0416     1     MOV A, TEMP0 
       004AF 0069     1     MOV  MIN_REG ,A
   159            C      M 	MOV	TEMP1,_RC
       004B0 040C     1     MOV A, _RC 
       004B1 0057     1     MOV  TEMP1 ,A
   160            C      M 	MOV	_RC,@(CID_ADDR+32)
       004B2 185C     1     MOV A,@(( CID_ADDR + 32 ))
       004B3 004C     1     MOV  _RC ,A
   161            C      M 	MOV	_RD,TEMP0
       004B4 0416     1     MOV A, TEMP0 
       004B5 004D     1     MOV  _RD ,A
   162            C      M 	MOV	_RC,TEMP1
       004B6 0417     1     MOV A, TEMP1 
       004B7 004C     1     MOV  _RC ,A
   163            C      M 	SRAM	SYS_FG,SYS_CLOCK		; 通知系统时钟改变，要求更新显示
       004B8 0ADE     1     BS  SYS_FG , SYS_CLOCK 
   164 004B9 0012 C        	RET
   165 004BA      C        FSK_DECODE_TIME_ERR:
   166 004BA      C        FSK_DECODE_TIME_NOTIME:
   167 004BA 0416 C        	MOV	A,TEMP0
   168 004BB 03CC C        	ADD	_RC,A
   169 004BC 0012 C        	RET
   170            C        
   171 004BD      C        GET_TIME:
   172 004BD 040D C        	MOV	A,_RD
   173 004BE 1A7F C        	AND	A,@0X7F
   174            C      M 	CALL	#ASCII_NUM
                      2  M  LCALL  ASCII_NUM 
                      3  M  PAGE #( ASCII_NUM ),
       004BF 1E80     3     PAGE ( ASCII_NUM / 1024 ),
       004C0 12E9     2     CALL ( ASCII_NUM % 1024 ),
                      3  M  PAGE #( $ ),
       004C1 1E81     3     PAGE ( $ / 1024 ),
   175 004C2 0057 C        	MOV	TEMP1,A
   176            C      M 	MOV	TEMP0,@0
       004C3 1800     1     MOV A,@( 0 )
       004C4 0056     1     MOV  TEMP0 ,A
   177 004C5      C        GET_TIME_1:
   178 004C5 0417 C        	MOV	A,TEMP1
   179            C      M 	JPZ	GET_TIME_2
       004C6 0C83     1     JBC  _STATUS , Z 
       004C7 14CC     1     JMP  GET_TIME_2 ,
   180 004C8 01D7 C        	DEC	TEMP1
   181            C      M 	ADD	TEMP0,@10
       004C9 180A     1     MOV A,@( 10 )
       004CA 03D6     1     ADD  TEMP0 ,A
   182 004CB 14C5 C        	JMP	GET_TIME_1
   183 004CC      C        GET_TIME_2:
   184 004CC 054C C        	INC	_RC
   185 004CD 040D C        	MOV	A,_RD
   186 004CE 1A0F C        	AND	A,@0X0F
   187 004CF 03D6 C        	ADD	TEMP0,A
   188 004D0 0012 C        	RET
   189            C        
   190            C        /***************************************
   191            C        从FSK数据中解电话号码
   192            C        最多16个号码，超过不计。不足补F
   193            C        ***************************************/
   194 004D1      C        FSK_DECODE_NUM:
   195 004D1 0056 C        	MOV	TEMP0,A				; 号码位数
   196            C      M 	MOV	TEMP1,_RC
       004D2 040C     1     MOV A, _RC 
       004D3 0057     1     MOV  TEMP1 ,A
   197            C      M 	MOV	_RC,@(CID_ADDR+2)
       004D4 183E     1     MOV A,@(( CID_ADDR + 2 ))
       004D5 004C     1     MOV  _RC ,A
   198            C      M 	MOV	_RD,TEMP0
       004D6 0416     1     MOV A, TEMP0 
       004D7 004D     1     MOV  _RD ,A
   199            C      M 	MOV	TEMP2,@0
       004D8 1800     1     MOV A,@( 0 )
       004D9 0058     1     MOV  TEMP2 ,A
   200 004DA      C        FSK_DECODE_NUM_LOOP:
   201 004DA 0416 C        	MOV	A,TEMP0
   202            C      M 	JPZ	FSK_DECODE_NUM_2
       004DB 0C83     1     JBC  _STATUS , Z 
       004DC 1500     1     JMP  FSK_DECODE_NUM_2 ,
   203            C      M 	ADDA	TEMP2,TEMP1
       004DD 0417     1     MOV A, TEMP1 
       004DE 0398     1     ADD A, TEMP2 
   204 004DF 1F01 C        	ADD	A,@1
   205 004E0 004C C        	MOV	_RC,A
   206 004E1 040D C        	MOV	A,_RD
   207 004E2 1A7F C        	AND	A,@0X7F
   208            C      M 	CALL	#ASCII_NUM
                      2  M  LCALL  ASCII_NUM 
                      3  M  PAGE #( ASCII_NUM ),
       004E3 1E80     3     PAGE ( ASCII_NUM / 1024 ),
       004E4 12E9     2     CALL ( ASCII_NUM % 1024 ),
                      3  M  PAGE #( $ ),
       004E5 1E81     3     PAGE ( $ / 1024 ),
   209 004E6 0059 C        	MOV	TEMP3,A
   210            C      M 	CLRC
       004E7 0803     1     BC  _STATUS , C 
   211 004E8 0618 C        	RRCA	TEMP2
   212 004E9 1F3F C        	ADD	A,@(CID_ADDR+3)
   213 004EA 004C C        	MOV	_RC,A
   214            C      M 	JPB	TEMP2,0,FSK_DECODE_NUM_LOOP_L
       004EB 0C18     1     JBC  TEMP2 , 0 
       004EC 14F1     1     JMP  FSK_DECODE_NUM_LOOP_L ,
   215 004ED      C        FSK_DECODE_NUM_LOOP_H:
   216 004ED 0719 C        	SWAPA	TEMP3
   217 004EE 1AF0 C        	AND	A,@0XF0
   218 004EF 004D C        	MOV	_RD,A
   219 004F0 14F4 C        	JMP	FSK_DECODE_NUM_LOOP_1
   220 004F1      C        FSK_DECODE_NUM_LOOP_L:
   221            C      M 	ANDA	TEMP3,@0X0F
       004F1 180F     1     MOV A,@( 15 )
       004F2 0299     1     AND A, TEMP3 
   222 004F3 03CD C        	ADD	_RD,A
   223 004F4      C        FSK_DECODE_NUM_LOOP_1:
   224 004F4 0558 C        	INC	TEMP2
   225 004F5 01D6 C        	DEC	TEMP0
   226            C      M 	SUBA	TEMP2,@16
       004F6 1810     1     MOV A,@( 16 )
       004F7 0118     1     SUB A, TEMP2 
   227            C      M 	JPZ	FSK_DECODE_NUM_1		; 号码位数到16
       004F8 0C83     1     JBC  _STATUS , Z 
       004F9 14FB     1     JMP  FSK_DECODE_NUM_1 ,
   228 004FA 14DA C        	JMP	FSK_DECODE_NUM_LOOP
   229            C        
   230 004FB      C        FSK_DECODE_NUM_1:				; 16以后的号码丢弃
   231            C      M 	ADDA	TEMP1,TEMP2
       004FB 0418     1     MOV A, TEMP2 
       004FC 0397     1     ADD A, TEMP1 
   232 004FD 0396 C        	ADD	A,TEMP0
   233 004FE 004C C        	MOV	_RC,A
   234 004FF 0012 C        	RET
   235            C        
   236 00500      C        FSK_DECODE_NUM_2:
   237            C      M 	ADD	TEMP1,TEMP2
       00500 0418     1     MOV A, TEMP2 
       00501 03D7     1     ADD  TEMP1 ,A
   238 00502      C        FSK_DECODE_NUM_2_1:
   239            C      M 	SUBA	TEMP2,@16			; 检查号码是否够16位，不够补F
       00502 1810     1     MOV A,@( 16 )
       00503 0118     1     SUB A, TEMP2 
   240            C      M 	JPZ	FSK_DECODE_NUM_RET
       00504 0C83     1     JBC  _STATUS , Z 
       00505 1513     1     JMP  FSK_DECODE_NUM_RET ,
   241            C      M 	CLRC
       00506 0803     1     BC  _STATUS , C 
   242 00507 0618 C        	RRCA	TEMP2
   243 00508 1F3F C        	ADD	A,@(CID_ADDR+3)
   244 00509 004C C        	MOV	_RC,A
   245            C      M 	JPB	TEMP2,0,FSK_DECODE_NUM_2_L
       0050A 0C18     1     JBC  TEMP2 , 0 
       0050B 150F     1     JMP  FSK_DECODE_NUM_2_L ,
   246 0050C      C        FSK_DECODE_NUM_2_H:
   247            C      M 	MOV	_RD,@0XF0
       0050C 18F0     1     MOV A,@( 240 )
       0050D 004D     1     MOV  _RD ,A
   248 0050E 1511 C        	JMP	FSK_DECODE_NUM_3
   249 0050F      C        FSK_DECODE_NUM_2_L:
   250            C      M 	ADD	_RD,@0X0F
       0050F 180F     1     MOV A,@( 15 )
       00510 03CD     1     ADD  _RD ,A
   251 00511      C        FSK_DECODE_NUM_3:
   252 00511 0558 C        	INC	TEMP2
   253 00512 1502 C        	JMP	FSK_DECODE_NUM_2_1
   254            C        	
   255 00513      C        FSK_DECODE_NUM_RET:
   256            C      M 	MOV	_RC,TEMP1
       00513 0417     1     MOV A, TEMP1 
       00514 004C     1     MOV  _RC ,A
   257 00515 0012 C        	RET
   258            C        
   259 00516      C        FSK_DECODE_NAME:
   260            C        	;INC	_RC
   261            C        	;SUB	CID_LENGTH,_RD
   262            C        	;SUB	CID_LENGTH,@2
   263            C        	;MOV	TEMP0,_RD			; 姓名的位数
   264 00516 0056 C        	MOV	TEMP0,A
   265            C      M 	MOV	TEMP1,_RC
       00517 040C     1     MOV A, _RC 
       00518 0057     1     MOV  TEMP1 ,A
   266            C      M 	MOV	_RC,@(CID_ADDR+11)
       00519 1847     1     MOV A,@(( CID_ADDR + 11 ))
       0051A 004C     1     MOV  _RC ,A
   267            C      M 	MOV	_RD,TEMP0
       0051B 0416     1     MOV A, TEMP0 
       0051C 004D     1     MOV  _RD ,A
   268            C      M 	MOV	TEMP2,@0
       0051D 1800     1     MOV A,@( 0 )
       0051E 0058     1     MOV  TEMP2 ,A
   269 0051F      C        FSK_DECODE_NAME_LOOP:
   270 0051F 0416 C        	MOV	A,TEMP0
   271            C      M 	JPZ	FSK_DECODE_NAME_2
       00520 0C83     1     JBC  _STATUS , Z 
       00521 153D     1     JMP  FSK_DECODE_NAME_2 ,
   272            C      M 	ADDA	TEMP2,TEMP1
       00522 0417     1     MOV A, TEMP1 
       00523 0398     1     ADD A, TEMP2 
   273 00524 1F01 C        	ADD	A,@1
   274 00525 004C C        	MOV	_RC,A
   275 00526 040D C        	MOV	A,_RD
   276 00527 1A7F C        	AND	A,@0X7F
   277            C      M 	CALL	#ASCII_CH
                      2  M  LCALL  ASCII_CH 
                      3  M  PAGE #( ASCII_CH ),
       00528 1E80     3     PAGE ( ASCII_CH / 1024 ),
       00529 1302     2     CALL ( ASCII_CH % 1024 ),
                      3  M  PAGE #( $ ),
       0052A 1E81     3     PAGE ( $ / 1024 ),
   278 0052B 0059 C        	MOV	TEMP3,A
   279            C      M 	ADDA	TEMP2,@(CID_ADDR+12)
       0052C 1848     1     MOV A,@(( CID_ADDR + 12 ))
       0052D 0398     1     ADD A, TEMP2 
   280 0052E 004C C        	MOV	_RC,A
   281            C      M 	MOV	_RD,TEMP3
       0052F 0419     1     MOV A, TEMP3 
       00530 004D     1     MOV  _RD ,A
   282 00531 0558 C        	INC	TEMP2
   283 00532 01D6 C        	DEC	TEMP0
   284            C      M 	SUBA	TEMP2,@16
       00533 1810     1     MOV A,@( 16 )
       00534 0118     1     SUB A, TEMP2 
   285            C      M 	JPZ	FSK_DECODE_NAME_1
       00535 0C83     1     JBC  _STATUS , Z 
       00536 1538     1     JMP  FSK_DECODE_NAME_1 ,
   286 00537 151F C        	JMP	FSK_DECODE_NAME_LOOP
   287 00538      C        FSK_DECODE_NAME_1:				; 16以后的姓名丢弃
   288            C      M 	ADDA	TEMP1,TEMP2
       00538 0418     1     MOV A, TEMP2 
       00539 0397     1     ADD A, TEMP1 
   289 0053A 0396 C        	ADD	A,TEMP0
   290 0053B 004C C        	MOV	_RC,A
   291 0053C 0012 C        	RET
   292 0053D      C        FSK_DECODE_NAME_2:
   293            C      M 	ADD	TEMP1,TEMP2
       0053D 0418     1     MOV A, TEMP2 
       0053E 03D7     1     ADD  TEMP1 ,A
   294 0053F      C        FSK_DECODE_NAME_2_1:
   295            C      M 	SUBA	TEMP2,@16
       0053F 1810     1     MOV A,@( 16 )
       00540 0118     1     SUB A, TEMP2 
   296            C      M 	JPZ	FSK_DECODE_NAME_RET
       00541 0C83     1     JBC  _STATUS , Z 
       00542 154A     1     JMP  FSK_DECODE_NAME_RET ,
   297            C      M 	ADDA	TEMP2,@(CID_ADDR+12)
       00543 1848     1     MOV A,@(( CID_ADDR + 12 ))
       00544 0398     1     ADD A, TEMP2 
   298 00545 004C C        	MOV	_RC,A
   299            C      M 	MOV	_RD,@0XFF
       00546 18FF     1     MOV A,@( 255 )
       00547 004D     1     MOV  _RD ,A
   300 00548 0558 C        	INC	TEMP2
   301 00549 153F C        	JMP	FSK_DECODE_NAME_2_1
   302            C        	
   303 0054A      C        FSK_DECODE_NAME_RET:
   304            C      M 	MOV	_RC,TEMP1
       0054A 0417     1     MOV A, TEMP1 
       0054B 004C     1     MOV  _RC ,A
   305 0054C 0012 C        	RET
   306            C        
   307 0054D      C        DTMF_DECODE:
   308            C      M 	JPNB	FSK_FG,DTMF_SUC,DTMF_DECODE_RET1
       0054D 0F1C     1     JBS  FSK_FG , DTMF_SUC 
       0054E 158A     1     JMP  DTMF_DECODE_RET1 ,
   309            C        	
   310            C      M 	BANK	1
       0054F 0B84     1     BS  _RSR , 6 
       00550 09C4     1     BC  _RSR , 7 
   311            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00551 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00552 088B     2     BC  _RB , 2 
   312            C        	
   313 00553 118C C        	CALL	CLR_DECODE_RAM
   314            C        	
   315            C      M 	MOV	TEMP0,@0
       00554 1800     1     MOV A,@( 0 )
       00555 0056     1     MOV  TEMP0 ,A
   316            C      M 	MOV	TEMP1,@0
       00556 1800     1     MOV A,@( 0 )
       00557 0057     1     MOV  TEMP1 ,A
   317 00558      C        DTMF_DECODE_LOOP:
   318            C      M 	ADDA	TEMP0,@DTMF_ADDR
       00558 1800     1     MOV A,@( DTMF_ADDR )
       00559 0396     1     ADD A, TEMP0 
   319 0055A 004C C        	MOV	_RC,A
   320            C      M 	SUBA	_RD,@0X0			; 'D'
       0055B 1800     1     MOV A,@( 0 )
       0055C 010D     1     SUB A, _RD 
   321            C      M 	JPZ	DTMF_DECODE_1
       0055D 0C83     1     JBC  _STATUS , Z 
       0055E 1581     1     JMP  DTMF_DECODE_1 ,
   322            C      M 	SUBA	_RD,@0X0D			; 'A'
       0055F 180D     1     MOV A,@( 13 )
       00560 010D     1     SUB A, _RD 
   323            C      M 	JPZ	DTMF_DECODE_1
       00561 0C83     1     JBC  _STATUS , Z 
       00562 1581     1     JMP  DTMF_DECODE_1 ,
   324            C      M 	SUBA	_RD,@0X0F			; 'C'
       00563 180F     1     MOV A,@( 15 )
       00564 010D     1     SUB A, _RD 
   325            C      M 	JPZ	DTMF_DECODE_END
       00565 0C83     1     JBC  _STATUS , Z 
       00566 1583     1     JMP  DTMF_DECODE_END ,
   326            C      M 	SUBA	_RD,@0X0A			; '0'
       00567 180A     1     MOV A,@( 10 )
       00568 010D     1     SUB A, _RD 
   327            C      M 	JPNZ	DTMF_DECODE_LOOP_1
       00569 0E83     1     JBS  _STATUS , Z 
       0056A 156E     1     JMP  DTMF_DECODE_LOOP_1 ,
   328            C      M 	MOV	TEMP2,@0
       0056B 1800     1     MOV A,@( 0 )
       0056C 0058     1     MOV  TEMP2 ,A
   329 0056D 1570 C        	JMP	DTMF_DECODE_LOOP_2
   330 0056E      C        DTMF_DECODE_LOOP_1:
   331            C      M 	MOV	TEMP2,_RD
       0056E 040D     1     MOV A, _RD 
       0056F 0058     1     MOV  TEMP2 ,A
   332 00570      C        DTMF_DECODE_LOOP_2:
   333            C      M 	CLRC
       00570 0803     1     BC  _STATUS , C 
   334 00571 0617 C        	RRCA	TEMP1
   335 00572 1F3F C        	ADD	A,@(CID_ADDR+3)
   336 00573 004C C        	MOV	_RC,A
   337            C      M 	JPB	TEMP1,0,DTMF_DECODE_NUM_L
       00574 0C17     1     JBC  TEMP1 , 0 
       00575 157A     1     JMP  DTMF_DECODE_NUM_L ,
   338 00576      C        DTMF_DECODE_NUM_H:
   339 00576 0718 C        	SWAPA	TEMP2
   340 00577 190F C        	OR	A,@0X0F
   341 00578 004D C        	MOV	_RD,A
   342 00579 157E C        	JMP	DTMF_DECODE_LOOP_3
   343 0057A      C        DTMF_DECODE_NUM_L:
   344            C      M 	ANDA	TEMP2,@0X0F
       0057A 180F     1     MOV A,@( 15 )
       0057B 0298     1     AND A, TEMP2 
   345 0057C 19F0 C        	OR	A,@0XF0
   346 0057D 02CD C        	AND	_RD,A
   347 0057E      C        DTMF_DECODE_LOOP_3:
   348 0057E 0556 C        	INC	TEMP0
   349 0057F 0557 C        	INC	TEMP1
   350 00580 1558 C        	JMP	DTMF_DECODE_LOOP
   351 00581      C        DTMF_DECODE_1:
   352 00581 0556 C        	INC	TEMP0
   353 00582 1558 C        	JMP	DTMF_DECODE_LOOP
   354 00583      C        DTMF_DECODE_END:
   355            C      M 	MOV	_RC,@(CID_ADDR+2)
       00583 183E     1     MOV A,@(( CID_ADDR + 2 ))
       00584 004C     1     MOV  _RC ,A
   356            C      M 	MOV	_RD,TEMP1
       00585 0417     1     MOV A, TEMP1 
       00586 004D     1     MOV  _RD ,A
   357            C      M 	SRAM	FSK_FG,CALLIN
       00587 0BDC     1     BS  FSK_FG , CALLIN 
   358            C        	;JMP	DTMF_DECODE_RET
   359            C        
   360 00588      C        DTMF_DECODE_RET:
   361            C      M 	CRAM	FSK_FG,DTMF_SUC
       00588 091C     1     BC  FSK_FG , DTMF_SUC 
   362            C      M 	SRAM	_FSR,3				; fsk power
       00589 0ACA     1     BS  _FSR , 3 
   363 0058A      C        DTMF_DECODE_RET1:
   364 0058A 1197 C        	CALL	SEND_CALL
   365 0058B 0012 C        	RET
   366            C        
   367            C        
   368 0058C      C        CLR_DECODE_RAM:
   369            C      M 	MOV	_RC,@CID_ADDR
       0058C 183C     1     MOV A,@( CID_ADDR )
       0058D 004C     1     MOV  _RC ,A
   370 0058E 00CD C        	CLR	_RD
   371 0058F      C        CLR_DECODE_RAM_LOOP:
   372 0058F 054C C        	INC	_RC
   373            C      M 	MOV	_RD,@0XFF
       00590 18FF     1     MOV A,@( 255 )
       00591 004D     1     MOV  _RD ,A
   374            C      M 	SUBA	_RC,@(CID_ADDR+33)
       00592 185D     1     MOV A,@(( CID_ADDR + 33 ))
       00593 010C     1     SUB A, _RC 
   375            C      M 	JPNZ	CLR_DECODE_RAM_LOOP
       00594 0E83     1     JBS  _STATUS , Z 
       00595 158F     1     JMP  CLR_DECODE_RAM_LOOP ,
   376 00596 0012 C        	RET
   377            C        
   378            C        /****************************************
   379            C        发送来电
   380            C        将解码之后的来电信息发送给111
   381            C        ****************************************/
   382 00597      C        SEND_CALL:
   383            C      M 	JPNB	FSK_FG,CALLIN,SEND_CALL_RET
       00597 0FDC     1     JBS  FSK_FG , CALLIN 
       00598 164B     1     JMP  SEND_CALL_RET ,
   384            C        	
   385 00599 1E84 C        	PAGE	4
   386 0059A 137A C        	CALL	CIDNUM_MODIFY			; 号码修改，将与区域码相同的部分去掉。
   387            C        	
   388 0059B 1354 C        	CALL	SEND_DESIRE
   389            C        	
   390 0059C 1251 C        	CALL	INIT_SER
   391 0059D 1E81 C        	PAGE	1
   392            C        	
   393            C      M 	BANK	0
       0059E 0984     1     BC  _RSR , 6 
       0059F 09C4     1     BC  _RSR , 7 
   394            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       005A0 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       005A1 088B     2     BC  _RB , 2 
   395            C        	
   396 005A2 1880 C        	MOV	A,@0X80
   397 005A3 124C C        	CALL	SEND_CALL_DATA
   398            C      M 	MOV	_RC,@(CID_ADDR+1)
       005A4 183D     1     MOV A,@(( CID_ADDR + 1 ))
       005A5 004C     1     MOV  _RC ,A
   399            C      M 	MOV	_RD,@0X02
       005A6 1802     1     MOV A,@( 2 )
       005A7 004D     1     MOV  _RD ,A
   400            C      M 	SA	7
       005A8 1980     1     OR A,@( 128 )
   401 005A9 124C C        	CALL	SEND_CALL_DATA
   402            C      M 	MOV	_RC,@(CID_ADDR+2)
       005AA 183E     1     MOV A,@(( CID_ADDR + 2 ))
       005AB 004C     1     MOV  _RC ,A
   403            C      M 	SUBA	_RD,@0
       005AC 1800     1     MOV A,@( 0 )
       005AD 010D     1     SUB A, _RD 
   404            C      M 	JPZ	SEND_CALL_INFO_NONUM
       005AE 0C83     1     JBC  _STATUS , Z 
       005AF 15B7     1     JMP  SEND_CALL_INFO_NONUM ,
   405            C      M 	SUBA	_RD,@17
       005B0 1811     1     MOV A,@( 17 )
       005B1 010D     1     SUB A, _RD 
   406            C      M 	JPC	SEND_CALL_INFO_NONUM
       005B2 0C03     1     JBC  _STATUS , C 
       005B3 15B7     1     JMP  SEND_CALL_INFO_NONUM ,
   407 005B4 040D C        	MOV	A,_RD
   408            C      M 	SA	7
       005B5 1980     1     OR A,@( 128 )
   409 005B6 15B9 C        	JMP	SEND_CALL_INFO_NUM
   410 005B7      C        SEND_CALL_INFO_NONUM:
   411 005B7 040D C        	MOV	A,_RD
   412            C      M 	CA	7
       005B8 1A7F     1     AND A,@( 127 )
   413 005B9      C        SEND_CALL_INFO_NUM:
   414 005B9 124C C        	CALL	SEND_CALL_DATA
   415            C        	
   416            C      M 	MOV	_RC,@(CID_ADDR+11)
       005BA 1847     1     MOV A,@(( CID_ADDR + 11 ))
       005BB 004C     1     MOV  _RC ,A
   417            C      M 	SUBA	_RD,@0
       005BC 1800     1     MOV A,@( 0 )
       005BD 010D     1     SUB A, _RD 
   418            C      M 	JPZ	SEND_CALL_INFO_NONAME
       005BE 0C83     1     JBC  _STATUS , Z 
       005BF 15C7     1     JMP  SEND_CALL_INFO_NONAME ,
   419            C      M 	SUBA	_RD,@17
       005C0 1811     1     MOV A,@( 17 )
       005C1 010D     1     SUB A, _RD 
   420            C      M 	JPC	SEND_CALL_INFO_NONAME
       005C2 0C03     1     JBC  _STATUS , C 
       005C3 15C7     1     JMP  SEND_CALL_INFO_NONAME ,
   421 005C4 040D C        	MOV	A,_RD
   422            C      M 	SA	7
       005C5 1980     1     OR A,@( 128 )
   423 005C6 15C9 C        	JMP	SEND_CALL_INFO_NAME
   424 005C7      C        SEND_CALL_INFO_NONAME:
   425 005C7 040D C        	MOV	A,_RD
   426            C      M 	CA	7
       005C8 1A7F     1     AND A,@( 127 )
   427 005C9      C        SEND_CALL_INFO_NAME:
   428 005C9 124C C        	CALL	SEND_CALL_DATA
   429            C        	
   430            C      M 	MOV	_RC,@(CID_ADDR+28)
       005CA 1858     1     MOV A,@(( CID_ADDR + 28 ))
       005CB 004C     1     MOV  _RC ,A
   431            C      M 	SUBA	_RD,@0
       005CC 1800     1     MOV A,@( 0 )
       005CD 010D     1     SUB A, _RD 
   432            C      M 	JPZ	SEND_CALL_INFO_NOTIME
       005CE 0C83     1     JBC  _STATUS , Z 
       005CF 15D7     1     JMP  SEND_CALL_INFO_NOTIME ,
   433            C      M 	SUBA	_RD,@5
       005D0 1805     1     MOV A,@( 5 )
       005D1 010D     1     SUB A, _RD 
   434            C      M 	JPC	SEND_CALL_INFO_NOTIME
       005D2 0C03     1     JBC  _STATUS , C 
       005D3 15D7     1     JMP  SEND_CALL_INFO_NOTIME ,
   435 005D4 040D C        	MOV	A,_RD
   436            C      M 	SA	7
       005D5 1980     1     OR A,@( 128 )
   437 005D6 15D9 C        	JMP	SEND_CALL_INFO_TIME
   438 005D7      C        SEND_CALL_INFO_NOTIME:
   439 005D7 040D C        	MOV	A,_RD
   440            C      M 	CA	7
       005D8 1A7F     1     AND A,@( 127 )
   441 005D9      C        SEND_CALL_INFO_TIME:
   442 005D9 124C C        	CALL	SEND_CALL_DATA
   443            C        	
   444 005DA 1800 C        	MOV	A,@0				; OGM .
   445 005DB 124C C        	CALL	SEND_CALL_DATA
   446            C        	
   447 005DC 18FF C        	MOV	A,@0XFF
   448 005DD 124C C        	CALL	SEND_CALL_DATA
   449 005DE 1250 C        	CALL	SEND_CALL_DATA1
   450 005DF 0000 C        	NOP
   451            C        	
   452            C        
   453 005E0      C        SEND_CALL_NUM:
   454            C      M 	MOV	_RC,@(CID_ADDR+2)
       005E0 183E     1     MOV A,@(( CID_ADDR + 2 ))
       005E1 004C     1     MOV  _RC ,A
   455            C      M 	SUBA	_RD,@0
       005E2 1800     1     MOV A,@( 0 )
       005E3 010D     1     SUB A, _RD 
   456            C      M 	JPZ	SEND_CALL_NUM_END
       005E4 0C83     1     JBC  _STATUS , Z 
       005E5 1607     1     JMP  SEND_CALL_NUM_END ,
   457            C      M 	SUBA	_RD,@17
       005E6 1811     1     MOV A,@( 17 )
       005E7 010D     1     SUB A, _RD 
   458            C      M 	JPC	SEND_CALL_NUM_END
       005E8 0C03     1     JBC  _STATUS , C 
       005E9 1607     1     JMP  SEND_CALL_NUM_END ,
   459 005EA 1880 C        	MOV	A,@0X80
   460 005EB 124C C        	CALL	SEND_CALL_DATA
   461            C      M 	MOV	_RC,@(CID_ADDR+2)
       005EC 183E     1     MOV A,@(( CID_ADDR + 2 ))
       005ED 004C     1     MOV  _RC ,A
   462            C      M 	MOV	TEMP0,_RD
       005EE 040D     1     MOV A, _RD 
       005EF 0056     1     MOV  TEMP0 ,A
   463 005F0 0556 C        	INC	TEMP0
   464            C      M 	CLRC
       005F1 0803     1     BC  _STATUS , C 
   465 005F2 0656 C        	RRC	TEMP0
   466 005F3 0416 C        	MOV	A,TEMP0
   467 005F4 124C C        	CALL	SEND_CALL_DATA
   468 005F5 00E0 C        	CLR	BANK0_TEMP0
   469 005F6      C        SEND_CALL_NUM_LOOP:
   470            C      M 	ADDA	BANK0_TEMP0,@(CID_ADDR+3)
       005F6 183F     1     MOV A,@(( CID_ADDR + 3 ))
       005F7 03A0     1     ADD A, BANK0_TEMP0 
   471 005F8 004C C        	MOV	_RC,A
   472            C      M 	SUBA	_RD,@0XFF
       005F9 18FF     1     MOV A,@( 255 )
       005FA 010D     1     SUB A, _RD 
   473            C      M 	JPZ	SEND_CALL_NUM_END1
       005FB 0C83     1     JBC  _STATUS , Z 
       005FC 1604     1     JMP  SEND_CALL_NUM_END1 ,
   474 005FD 040D C        	MOV	A,_RD
   475 005FE 124C C        	CALL	SEND_CALL_DATA
   476 005FF 0560 C        	INC	BANK0_TEMP0
   477            C      M 	SUBA	BANK0_TEMP0,@8
       00600 1808     1     MOV A,@( 8 )
       00601 0120     1     SUB A, BANK0_TEMP0 
   478            C      M 	JPNZ	SEND_CALL_NUM_LOOP
       00602 0E83     1     JBS  _STATUS , Z 
       00603 15F6     1     JMP  SEND_CALL_NUM_LOOP ,
   479 00604      C        SEND_CALL_NUM_END1:
   480 00604 18FF C        	MOV	A,@0XFF
   481 00605 124C C        	CALL	SEND_CALL_DATA
   482 00606 1250 C        	CALL	SEND_CALL_DATA1
   483            C        	
   484            C        
   485 00607      C        SEND_CALL_NUM_END:
   486            C        
   487 00607      C        SEND_CALL_TIME:
   488            C      M 	MOV	_RC,@(CID_ADDR+28)
       00607 1858     1     MOV A,@(( CID_ADDR + 28 ))
       00608 004C     1     MOV  _RC ,A
   489            C      M 	SUBA	_RD,@0
       00609 1800     1     MOV A,@( 0 )
       0060A 010D     1     SUB A, _RD 
   490            C      M 	JPZ	SEND_CALL_TIME_END
       0060B 0C83     1     JBC  _STATUS , Z 
       0060C 1626     1     JMP  SEND_CALL_TIME_END ,
   491            C      M 	SUBA	_RD,@0XFF
       0060D 18FF     1     MOV A,@( 255 )
       0060E 010D     1     SUB A, _RD 
   492            C      M 	JPZ	SEND_CALL_TIME_END
       0060F 0C83     1     JBC  _STATUS , Z 
       00610 1626     1     JMP  SEND_CALL_TIME_END ,
   493            C        	
   494 00611 1880 C        	MOV	A,@0X80
   495 00612 124C C        	CALL	SEND_CALL_DATA
   496            C      M 	MOV	_RC,@(CID_ADDR+28)
       00613 1858     1     MOV A,@(( CID_ADDR + 28 ))
       00614 004C     1     MOV  _RC ,A
   497            C      M 	ADDA	_RD,@0X40
       00615 1840     1     MOV A,@( 64 )
       00616 038D     1     ADD A, _RD 
   498 00617 124C C        	CALL	SEND_CALL_DATA
   499 00618 00E0 C        	CLR	BANK0_TEMP0
   500 00619      C        SEND_CALL_TIME_LOOP:
   501            C      M 	ADDA	BANK0_TEMP0,@(CID_ADDR+29)
       00619 1859     1     MOV A,@(( CID_ADDR + 29 ))
       0061A 03A0     1     ADD A, BANK0_TEMP0 
   502 0061B 004C C        	MOV	_RC,A
   503 0061C 040D C        	MOV	A,_RD
   504 0061D 124C C        	CALL	SEND_CALL_DATA
   505 0061E 0560 C        	INC	BANK0_TEMP0
   506            C      M 	SUBA	BANK0_TEMP0,@4
       0061F 1804     1     MOV A,@( 4 )
       00620 0120     1     SUB A, BANK0_TEMP0 
   507            C      M 	JPNZ	SEND_CALL_TIME_LOOP
       00621 0E83     1     JBS  _STATUS , Z 
       00622 1619     1     JMP  SEND_CALL_TIME_LOOP ,
   508 00623      C        SEND_CALL_TIME_END1:
   509 00623 18FF C        	MOV	A,@0XFF
   510 00624 124C C        	CALL	SEND_CALL_DATA
   511 00625 1250 C        	CALL	SEND_CALL_DATA1
   512            C        	
   513            C        
   514 00626      C        SEND_CALL_TIME_END:
   515            C        
   516 00626      C        SEND_CALL_NAME:
   517            C      M 	MOV	_RC,@(CID_ADDR+11)
       00626 1847     1     MOV A,@(( CID_ADDR + 11 ))
       00627 004C     1     MOV  _RC ,A
   518            C      M 	SUBA	_RD,@0
       00628 1800     1     MOV A,@( 0 )
       00629 010D     1     SUB A, _RD 
   519            C      M 	JPZ	SEND_CALL_NAME_END
       0062A 0C83     1     JBC  _STATUS , Z 
       0062B 1649     1     JMP  SEND_CALL_NAME_END ,
   520            C      M 	SUBA	_RD,@17
       0062C 1811     1     MOV A,@( 17 )
       0062D 010D     1     SUB A, _RD 
   521            C      M 	JPC	SEND_CALL_NAME_END
       0062E 0C03     1     JBC  _STATUS , C 
       0062F 1649     1     JMP  SEND_CALL_NAME_END ,
   522            C        	
   523 00630 1880 C        	MOV	A,@0X80
   524 00631 124C C        	CALL	SEND_CALL_DATA
   525            C      M 	MOV	_RC,@(CID_ADDR+11)
       00632 1847     1     MOV A,@(( CID_ADDR + 11 ))
       00633 004C     1     MOV  _RC ,A
   526            C      M 	ADDA	_RD,@0X20
       00634 1820     1     MOV A,@( 32 )
       00635 038D     1     ADD A, _RD 
   527 00636 124C C        	CALL	SEND_CALL_DATA
   528 00637 00E0 C        	CLR	BANK0_TEMP0
   529 00638      C        SEND_CALL_NAME_LOOP:
   530            C      M 	ADDA	BANK0_TEMP0,@(CID_ADDR+12)
       00638 1848     1     MOV A,@(( CID_ADDR + 12 ))
       00639 03A0     1     ADD A, BANK0_TEMP0 
   531 0063A 004C C        	MOV	_RC,A
   532            C      M 	SUBA	_RD,@0XFF
       0063B 18FF     1     MOV A,@( 255 )
       0063C 010D     1     SUB A, _RD 
   533            C      M 	JPZ	SEND_CALL_NAME_END1
       0063D 0C83     1     JBC  _STATUS , Z 
       0063E 1646     1     JMP  SEND_CALL_NAME_END1 ,
   534 0063F 040D C        	MOV	A,_RD
   535 00640 124C C        	CALL	SEND_CALL_DATA
   536 00641 0560 C        	INC	BANK0_TEMP0
   537            C      M 	SUBA	BANK0_TEMP0,@16
       00642 1810     1     MOV A,@( 16 )
       00643 0120     1     SUB A, BANK0_TEMP0 
   538            C      M 	JPNZ	SEND_CALL_NAME_LOOP
       00644 0E83     1     JBS  _STATUS , Z 
       00645 1638     1     JMP  SEND_CALL_NAME_LOOP ,
   539 00646      C        SEND_CALL_NAME_END1:
   540 00646 18FF C        	MOV	A,@0XFF
   541 00647 124C C        	CALL	SEND_CALL_DATA
   542 00648 1250 C        	CALL	SEND_CALL_DATA1
   543            C        
   544 00649      C        SEND_CALL_NAME_END:
   545            C      M 	MOV	TMR_DELAY,@25
       00649 1819     1     MOV A,@( 25 )
       0064A 0075     1     MOV  TMR_DELAY ,A
   546            C        
   547 0064B      C        SEND_CALL_RET:
   548 0064B 0012 C        	RET
   549 0064C      C        SEND_CALL_DATA:
   550            C      M 	CALL	#SER_STOR_DATA
                      2  M  LCALL  SER_STOR_DATA 
                      3  M  PAGE #( SER_STOR_DATA ),
       0064C 1E80     3     PAGE ( SER_STOR_DATA / 1024 ),
       0064D 13F1     2     CALL ( SER_STOR_DATA % 1024 ),
                      3  M  PAGE #( $ ),
       0064E 1E81     3     PAGE ( $ / 1024 ),
   551            C        	;CALL	#STORE_SER
   552 0064F 0012 C        	RET
   553            C        
   554 00650      C        SEND_CALL_DATA1:
   555 00650 0BBC C        	BS	SER_FLAG,6
   556            C      M 	MOV	SER_CONT,SER_SEND
       00651 043E     1     MOV A, SER_SEND 
       00652 007D     1     MOV  SER_CONT ,A
   557            C        		
   558            C      M 	CALL	#SerIic
                      2  M  LCALL  SERIIC 
                      3  M  PAGE #( SERIIC ),
       00653 1E80     3     PAGE ( SERIIC / 1024 ),
       00654 1353     2     CALL ( SERIIC % 1024 ),
                      3  M  PAGE #( $ ),
       00655 1E81     3     PAGE ( $ / 1024 ),
   559 00656 00FE C        	CLR	SER_SEND
   560 00657 00FD C        	CLR	SER_CONT
   561            C        
   562 00658      C        SEND_DELAY:
   563            C      M 	MOV	TMR_DELAY,@10
       00658 180A     1     MOV A,@( 10 )
       00659 0075     1     MOV  TMR_DELAY ,A
   564 0065A      C        SEND_DELAY_1:
   565 0065A 0435 C        	MOV	A,TMR_DELAY
   566            C      M 	JPNZ	SEND_DELAY_1
       0065B 0E83     1     JBS  _STATUS , Z 
       0065C 165A     1     JMP  SEND_DELAY_1 ,
   567 0065D 0012 C        	RET
   568            C        
   569            C        /****************************************
   570            C        保存来电，
   571            C        主程序检查FSK_FG.CALLIN
   572            C        如果被置位，检查CID存放区的信息：
   573            C        1、在LCD上显示号码和姓名。
   574            C        2、向DSP发送与之相关的OGM。
   575            C        3、
   576            C        *****************************************/
   577 0065E      C        CID_STORE:
   578            C      M 	BANK	0
       0065E 0984     1     BC  _RSR , 6 
       0065F 09C4     1     BC  _RSR , 7 
   579            C      M 	JPNB	FSK_FG,CALLIN,CID_STORE_RET
       00660 0FDC     1     JBS  FSK_FG , CALLIN 
       00661 1674     1     JMP  CID_STORE_RET ,
   580            C      M 	JPNB	SYS_FG,NEWCALL,CID_STORE_1
       00662 0E5E     1     JBS  SYS_FG , NEWCALL 
       00663 1667     1     JMP  CID_STORE_1 ,
   581 00664 0435 C        	MOV	A,TMR_DELAY
   582            C      M 	JPNZ	CID_STORE_RET
       00665 0E83     1     JBS  _STATUS , Z 
       00666 1674     1     JMP  CID_STORE_RET ,
   583 00667      C        CID_STORE_1:
   584 00667 0000 C        	NOP
   585            C      M 	CRAM	FSK_FG,CALLIN
       00668 09DC     1     BC  FSK_FG , CALLIN 
   586            C      M 	CRAM	SYS_FG,LOCK_TOPLINE
       00669 095E     1     BC  SYS_FG , LOCK_TOPLINE 
   587            C        
   588            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0066A 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0066B 088B     2     BC  _RB , 2 
   589            C      M 	MOV	_RC,@(CID_ADDR+0)
       0066C 183C     1     MOV A,@(( CID_ADDR + 0 ))
       0066D 004C     1     MOV  _RC ,A
   590            C      M 	MOV	_RD,@(STYLE_CENTER+0)		; 居中显示，不屏蔽第一行	
       0066E 1860     1     MOV A,@(( STYLE_CENTER + 0 ))
       0066F 004D     1     MOV  _RD ,A
   591 00670 1275 C        	CALL	DISP_CID			; 显示来电
   592            C      M 	MOV	TMR_NAME,@16
       00671 1810     1     MOV A,@( 16 )
       00672 0078     1     MOV  TMR_NAME ,A
   593            C      M 	SRAM	EVENT,0
       00673 0A1F     1     BS  EVENT , 0 
   594            C        	;CALL	STORE_CALL			; 保存号码
   595            C        	
   596            C        	;CALL	COMPARE_NOTE			; 比较记录
   597            C        
   598            C        
   599 00674      C        CID_STORE_RET:
   600 00674 0012 C        	RET
   601            C        
   602            C        /***************************************
   603            C        显示Caller ID信息
   604            C        ***************************************/
   605            C        
   606 00675      C        DISP_CID:
   607            C      M 	BANK	0
       00675 0984     1     BC  _RSR , 6 
       00676 09C4     1     BC  _RSR , 7 
   608            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00677 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00678 088B     2     BC  _RB , 2 
   609            C      M 	MOV	_RC,@(CID_ADDR+0)
       00679 183C     1     MOV A,@(( CID_ADDR + 0 ))
       0067A 004C     1     MOV  _RC ,A
   610            C      M 	MOV	BANK0_TEMP1,_RD
       0067B 040D     1     MOV A, _RD 
       0067C 0061     1     MOV  BANK0_TEMP1 ,A
   611            C      M 	JPNB	BANK0_TEMP1,7,DISP_CID_NUM
       0067D 0FE1     1     JBS  BANK0_TEMP1 , 7 
       0067E 16F0     1     JMP  DISP_CID_NUM ,
   612            C        	;JMP	DISP_CID_NUM
   613 0067F      C        DISP_CID_TIME:
   614            C      M 	CALL	#MENU_LOCK			; 屏蔽第一行的更新
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       0067F 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00680 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00681 1E81     3     PAGE ( $ / 1024 ),
   615            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00682 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00683 088B     2     BC  _RB , 2 
   616            C      M 	MOV	_RC,@(CID_ADDR+28)
       00684 1858     1     MOV A,@(( CID_ADDR + 28 ))
       00685 004C     1     MOV  _RC ,A
   617            C      M 	SUBA	_RD,@0				; 没有时间信息
       00686 1800     1     MOV A,@( 0 )
       00687 010D     1     SUB A, _RD 
   618            C      M 	JPZ	DISP_CID_TIME_1
       00688 0C83     1     JBC  _STATUS , Z 
       00689 16CB     1     JMP  DISP_CID_TIME_1 ,
   619            C      M 	SUBA	_RD,@0X7F
       0068A 187F     1     MOV A,@( 127 )
       0068B 010D     1     SUB A, _RD 
   620            C      M 	JPC	DISP_CID_TIME_1
       0068C 0C03     1     JBC  _STATUS , C 
       0068D 16CB     1     JMP  DISP_CID_TIME_1 ,
   621            C      M 	MOV	_RC,@(CID_ADDR+1)
       0068E 183D     1     MOV A,@(( CID_ADDR + 1 ))
       0068F 004C     1     MOV  _RC ,A
   622            C      M 	ANDA	_RD,@0X03
       00690 1803     1     MOV A,@( 3 )
       00691 028D     1     AND A, _RD 
   623 00692 1F30 C        	ADD	A,@0X30				; 有时间信息则亮秒和斜线
   624            C      M 	CALL	#VGA_STAMP
                      2  M  LCALL  VGA_STAMP 
                      3  M  PAGE #( VGA_STAMP ),
       00693 1E85     3     PAGE ( VGA_STAMP / 1024 ),
       00694 1000     2     CALL ( VGA_STAMP % 1024 ),
                      3  M  PAGE #( $ ),
       00695 1E81     3     PAGE ( $ / 1024 ),
   625 00696 0421 C        	MOV	A,BANK0_TEMP1
   626            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       00697 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       00698 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       00699 1E81     3     PAGE ( $ / 1024 ),
   627            C        	
   628            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0069A 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0069B 088B     2     BC  _RB , 2 
   629            C      M 	MOV	_RC,@(CID_ADDR+31)		; 小时
       0069C 185B     1     MOV A,@(( CID_ADDR + 31 ))
       0069D 004C     1     MOV  _RC ,A
   630 0069E 040D C        	MOV	A,_RD
   631            C      M 	CALL	#VGA_HOUR
                      2  M  LCALL  VGA_HOUR 
                      3  M  PAGE #( VGA_HOUR ),
       0069F 1E84     3     PAGE ( VGA_HOUR / 1024 ),
       006A0 1040     2     CALL ( VGA_HOUR % 1024 ),
                      3  M  PAGE #( $ ),
       006A1 1E81     3     PAGE ( $ / 1024 ),
   632            C        	
   633            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       006A2 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006A3 088B     2     BC  _RB , 2 
   634            C      M 	MOV	_RC,@(CID_ADDR+32)		; 分钟
       006A4 185C     1     MOV A,@(( CID_ADDR + 32 ))
       006A5 004C     1     MOV  _RC ,A
   635 006A6 040D C        	MOV	A,_RD
   636            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       006A7 1E84     3     PAGE ( VGA_TIME / 1024 ),
       006A8 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       006A9 1E81     3     PAGE ( $ / 1024 ),
   637            C        	
   638            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       006AA 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006AB 088B     2     BC  _RB , 2 
   639            C      M 	MOV	_RC,@(CID_ADDR+30)		; 日期
       006AC 185A     1     MOV A,@(( CID_ADDR + 30 ))
       006AD 004C     1     MOV  _RC ,A
   640 006AE 040D C        	MOV	A,_RD
   641            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       006AF 1E84     3     PAGE ( VGA_TIME / 1024 ),
       006B0 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       006B1 1E81     3     PAGE ( $ / 1024 ),
   642            C        	
   643            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       006B2 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006B3 088B     2     BC  _RB , 2 
   644            C      M 	MOV	_RC,@(CID_ADDR+29)		; 月份
       006B4 1859     1     MOV A,@(( CID_ADDR + 29 ))
       006B5 004C     1     MOV  _RC ,A
   645            C      M 	MOV	GENE_A,_RD
       006B6 040D     1     MOV A, _RD 
       006B7 0056     1     MOV  GENE_A ,A
   646            C      M 	CALL	#MATH_HTD
                      2  M  LCALL  MATH_HTD 
                      3  M  PAGE #( MATH_HTD ),
       006B8 1E84     3     PAGE ( MATH_HTD / 1024 ),
       006B9 1100     2     CALL ( MATH_HTD % 1024 ),
                      3  M  PAGE #( $ ),
       006BA 1E81     3     PAGE ( $ / 1024 ),
   647            C      M 	MOV	TEMP5,RESULT
       006BB 0418     1     MOV A, RESULT 
       006BC 005B     1     MOV  TEMP5 ,A
   648 006BD 071B C        	SWAPA	TEMP5
   649 006BE 1A0F C        	AND	A,@(0X0F)
   650            C      M 	JPNZ	$+2
       006BF 0E83     1     JBS  _STATUS , Z 
       006C0 16C2     1     JMP ( $ + 2 ),
   651 006C1 1810 C        	MOV	A,@0X10
   652            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       006C2 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       006C3 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       006C4 1E81     3     PAGE ( $ / 1024 ),
   653            C      M 	ANDA	TEMP5,@(0X0F)
       006C5 180F     1     MOV A,@( 15 )
       006C6 029B     1     AND A, TEMP5 
   654            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       006C7 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       006C8 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       006C9 1E81     3     PAGE ( $ / 1024 ),
   655 006CA 16E0 C        	JMP	DISP_CID_TIME_2
   656 006CB      C        DISP_CID_TIME_1:
   657            C      M 	MOV	_RC,@(CID_ADDR+1)
       006CB 183D     1     MOV A,@(( CID_ADDR + 1 ))
       006CC 004C     1     MOV  _RC ,A
   658            C      M 	ANDA	_RD,@0X03			; 没有时间信息不亮秒和斜线
       006CD 1803     1     MOV A,@( 3 )
       006CE 028D     1     AND A, _RD 
   659            C      M 	CALL	#VGA_STAMP
                      2  M  LCALL  VGA_STAMP 
                      3  M  PAGE #( VGA_STAMP ),
       006CF 1E85     3     PAGE ( VGA_STAMP / 1024 ),
       006D0 1000     2     CALL ( VGA_STAMP % 1024 ),
                      3  M  PAGE #( $ ),
       006D1 1E81     3     PAGE ( $ / 1024 ),
   660 006D2 0421 C        	MOV	A,BANK0_TEMP1
   661            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       006D3 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       006D4 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       006D5 1E81     3     PAGE ( $ / 1024 ),
   662 006D6 00E0 C        	CLR	BANK0_TEMP0
   663 006D7      C        DISP_CID_TIME_1_LOOP:
   664 006D7 1810 C        	MOV	A,@NUM_BLANK
   665            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       006D8 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       006D9 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       006DA 1E81     3     PAGE ( $ / 1024 ),
   666 006DB 0560 C        	INC	BANK0_TEMP0
   667            C      M 	SUBA	BANK0_TEMP0,@8
       006DC 1808     1     MOV A,@( 8 )
       006DD 0120     1     SUB A, BANK0_TEMP0 
   668            C      M 	JPNZ	DISP_CID_TIME_1_LOOP
       006DE 0E83     1     JBS  _STATUS , Z 
       006DF 16D7     1     JMP  DISP_CID_TIME_1_LOOP ,
   669            C        	
   670 006E0      C        DISP_CID_TIME_2:
   671            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       006E0 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006E1 088B     2     BC  _RB , 2 
   672            C      M 	MOV	_RC,@(CID_ADDR+33)		; NUM
       006E2 185D     1     MOV A,@(( CID_ADDR + 33 ))
       006E3 004C     1     MOV  _RC ,A
   673            C      M 	SUBA	_RD,@0XFF
       006E4 18FF     1     MOV A,@( 255 )
       006E5 010D     1     SUB A, _RD 
   674            C      M 	JPZ	DISP_CID_TIME_3
       006E6 0C83     1     JBC  _STATUS , Z 
       006E7 16EC     1     JMP  DISP_CID_TIME_3 ,
   675 006E8 040D C        	MOV	A,_RD
   676            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       006E9 1E84     3     PAGE ( VGA_TIME / 1024 ),
       006EA 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       006EB 1E81     3     PAGE ( $ / 1024 ),
   677 006EC      C        DISP_CID_TIME_3:
   678 006EC 18FF C        	MOV	A,@CH_END
   679            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       006ED 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       006EE 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       006EF 1E81     3     PAGE ( $ / 1024 ),
   680            C        	
   681            C        	
   682            C        	
   683 006F0      C        DISP_CID_NUM:
   684            C      M 	CALL	#CLR_NUM2
                      2  M  LCALL  CLR_NUM2 
                      3  M  PAGE #( CLR_NUM2 ),
       006F0 1E85     3     PAGE ( CLR_NUM2 / 1024 ),
       006F1 107E     2     CALL ( CLR_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       006F2 1E81     3     PAGE ( $ / 1024 ),
   685            C        	
   686            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       006F3 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006F4 088B     2     BC  _RB , 2 
   687            C      M 	BANK	0
       006F5 0984     1     BC  _RSR , 6 
       006F6 09C4     1     BC  _RSR , 7 
   688 006F7 00E0 C        	CLR	BANK0_TEMP0
   689 006F8 0421 C        	MOV	A,BANK0_TEMP1			; 居中显示，初始化显示区
   690            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       006F9 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       006FA 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       006FB 1E81     3     PAGE ( $ / 1024 ),
   691            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       006FC 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006FD 088B     2     BC  _RB , 2 
   692            C      M 	MOV	_RC,@(CID_ADDR+2)
       006FE 183E     1     MOV A,@(( CID_ADDR + 2 ))
       006FF 004C     1     MOV  _RC ,A
   693            C      M 	SUBA	_RD,@0X00
       00700 1800     1     MOV A,@( 0 )
       00701 010D     1     SUB A, _RD 
   694            C      M 	JPZ	DISP_CID_NUM_NONUM
       00702 0C83     1     JBC  _STATUS , Z 
       00703 1733     1     JMP  DISP_CID_NUM_NONUM ,
   695            C      M 	SUBA	_RD,@0X4F			; 'O'
       00704 184F     1     MOV A,@( 79 )
       00705 010D     1     SUB A, _RD 
   696            C      M 	JPZ	DISP_CID_NUM_NONUM
       00706 0C83     1     JBC  _STATUS , Z 
       00707 1733     1     JMP  DISP_CID_NUM_NONUM ,
   697            C      M 	SUBA	_RD,@0X50			; 'P'
       00708 1850     1     MOV A,@( 80 )
       00709 010D     1     SUB A, _RD 
   698            C      M 	JPZ	DISP_CID_NUM_PRIVATE
       0070A 0C83     1     JBC  _STATUS , Z 
       0070B 1734     1     JMP  DISP_CID_NUM_PRIVATE ,
   699            C      M 	SUBA	_RD,@0X17
       0070C 1817     1     MOV A,@( 23 )
       0070D 010D     1     SUB A, _RD 
   700            C      M 	JPC	DISP_CID_NUM_NONUM
       0070E 0C03     1     JBC  _STATUS , C 
       0070F 1733     1     JMP  DISP_CID_NUM_NONUM ,
   701 00710      C        DISP_CID_NUM_LOOP:
   702            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00710 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00711 088B     2     BC  _RB , 2 
   703            C      M 	CLRC
       00712 0803     1     BC  _STATUS , C 
   704 00713 0620 C        	RRCA	BANK0_TEMP0
   705 00714 1F3F C        	ADD	A,@(CID_ADDR+3)
   706 00715 004C C        	MOV	_RC,A
   707            C      M 	JPB	BANK0_TEMP0,0,DISP_CID_NUM_LOOP_L
       00716 0C20     1     JBC  BANK0_TEMP0 , 0 
       00717 1723     1     JMP  DISP_CID_NUM_LOOP_L ,
   708 00718      C        DISP_CID_NUM_LOOP_H:
   709 00718 070D C        	SWAPA	_RD
   710 00719 1A0F C        	AND	A,@0X0F
   711 0071A 0056 C        	MOV	TEMP0,A
   712 0071B 1D0F C        	SUB	A,@0X0F
   713            C      M 	JPZ	DISP_CID_NUM_END
       0071C 0C83     1     JBC  _STATUS , Z 
       0071D 1735     1     JMP  DISP_CID_NUM_END ,
   714 0071E 0416 C        	MOV	A,TEMP0
   715            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       0071F 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00720 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00721 1E81     3     PAGE ( $ / 1024 ),
   716 00722 172D C        	JMP	DISP_CID_NUM_LOOP1
   717 00723      C        DISP_CID_NUM_LOOP_L:
   718            C      M 	ANDA	_RD,@0X0F
       00723 180F     1     MOV A,@( 15 )
       00724 028D     1     AND A, _RD 
   719 00725 0056 C        	MOV	TEMP0,A
   720 00726 1D0F C        	SUB	A,@0X0F
   721            C      M 	JPZ	DISP_CID_NUM_END
       00727 0C83     1     JBC  _STATUS , Z 
       00728 1735     1     JMP  DISP_CID_NUM_END ,
   722 00729 0416 C        	MOV	A,TEMP0
   723            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       0072A 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       0072B 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       0072C 1E81     3     PAGE ( $ / 1024 ),
   724 0072D      C        DISP_CID_NUM_LOOP1:
   725 0072D 0560 C        	INC	BANK0_TEMP0
   726            C      M 	SUBA	BANK0_TEMP0,@16
       0072E 1810     1     MOV A,@( 16 )
       0072F 0120     1     SUB A, BANK0_TEMP0 
   727            C      M 	JPNZ	DISP_CID_NUM_LOOP
       00730 0E83     1     JBS  _STATUS , Z 
       00731 1710     1     JMP  DISP_CID_NUM_LOOP ,
   728 00732 1735 C        	JMP	DISP_CID_NUM_END
   729 00733      C        DISP_CID_NUM_NONUM:
   730 00733 1735 C        	JMP	DISP_CID_NUM_END
   731 00734      C        DISP_CID_NUM_PRIVATE:
   732 00734 1735 C        	JMP	DISP_CID_NUM_END
   733 00735      C        DISP_CID_NUM_END:
   734 00735 18FF C        	MOV	A,@CH_END
   735            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00736 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00737 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00738 1E81     3     PAGE ( $ / 1024 ),
   736            C        
   737 00739      C        DISP_CID_NAME:
   738            C      M 	CALL	#CLR_STR
                      2  M  LCALL  CLR_STR 
                      3  M  PAGE #( CLR_STR ),
       00739 1E85     3     PAGE ( CLR_STR / 1024 ),
       0073A 1084     2     CALL ( CLR_STR % 1024 ),
                      3  M  PAGE #( $ ),
       0073B 1E81     3     PAGE ( $ / 1024 ),
   739            C        	
   740            C      M 	BANK	0
       0073C 0984     1     BC  _RSR , 6 
       0073D 09C4     1     BC  _RSR , 7 
   741 0073E 00E0 C        	CLR	BANK0_TEMP0
   742 0073F 0421 C        	MOV	A,BANK0_TEMP1			; 居中显示
   743            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00740 1E85     3     PAGE ( VGA_STR / 1024 ),
       00741 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00742 1E81     3     PAGE ( $ / 1024 ),
   744            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00743 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00744 088B     2     BC  _RB , 2 
   745            C      M 	MOV	_RC,@(CID_ADDR+11)
       00745 1847     1     MOV A,@(( CID_ADDR + 11 ))
       00746 004C     1     MOV  _RC ,A
   746            C      M 	SUBA	_RD,@0X00
       00747 1800     1     MOV A,@( 0 )
       00748 010D     1     SUB A, _RD 
   747            C      M 	JPZ	DISP_CID_NAME_NONAME
       00749 0C83     1     JBC  _STATUS , Z 
       0074A 176A     1     JMP  DISP_CID_NAME_NONAME ,
   748            C      M 	SUBA	_RD,@0X4F			; 'O'
       0074B 184F     1     MOV A,@( 79 )
       0074C 010D     1     SUB A, _RD 
   749            C      M 	JPZ	DISP_CID_NAME_NONAME
       0074D 0C83     1     JBC  _STATUS , Z 
       0074E 176A     1     JMP  DISP_CID_NAME_NONAME ,
   750            C      M 	SUBA	_RD,@0X50			; 'P'
       0074F 1850     1     MOV A,@( 80 )
       00750 010D     1     SUB A, _RD 
   751            C      M 	JPZ	DISP_CID_NAME_PRIVATE
       00751 0C83     1     JBC  _STATUS , Z 
       00752 176B     1     JMP  DISP_CID_NAME_PRIVATE ,
   752            C      M 	SUBA	_RD,@17
       00753 1811     1     MOV A,@( 17 )
       00754 010D     1     SUB A, _RD 
   753            C      M 	JPC	DISP_CID_NAME_NONAME
       00755 0C03     1     JBC  _STATUS , C 
       00756 176A     1     JMP  DISP_CID_NAME_NONAME ,
   754 00757      C        DISP_CID_NAME_LOOP:
   755            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00757 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00758 088B     2     BC  _RB , 2 
   756            C      M 	ADDA	BANK0_TEMP0,@(CID_ADDR+12)
       00759 1848     1     MOV A,@(( CID_ADDR + 12 ))
       0075A 03A0     1     ADD A, BANK0_TEMP0 
   757 0075B 004C C        	MOV	_RC,A
   758            C      M 	SUBA	_RD,@0XFF
       0075C 18FF     1     MOV A,@( 255 )
       0075D 010D     1     SUB A, _RD 
   759            C      M 	JPZ	DISP_CID_NAME_END
       0075E 0C83     1     JBC  _STATUS , Z 
       0075F 176C     1     JMP  DISP_CID_NAME_END ,
   760 00760 040D C        	MOV	A,_RD
   761            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00761 1E85     3     PAGE ( VGA_STR / 1024 ),
       00762 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00763 1E81     3     PAGE ( $ / 1024 ),
   762 00764 0560 C        	INC	BANK0_TEMP0
   763            C      M 	SUBA	BANK0_TEMP0,@16
       00765 1810     1     MOV A,@( 16 )
       00766 0120     1     SUB A, BANK0_TEMP0 
   764            C      M 	JPNZ	DISP_CID_NAME_LOOP
       00767 0E83     1     JBS  _STATUS , Z 
       00768 1757     1     JMP  DISP_CID_NAME_LOOP ,
   765 00769 176C C        	JMP	DISP_CID_NAME_END
   766 0076A      C        DISP_CID_NAME_NONAME:
   767 0076A 176C C        	JMP	DISP_CID_NAME_END
   768 0076B      C        DISP_CID_NAME_PRIVATE:
   769 0076B 176C C        	JMP	DISP_CID_NAME_END
   770 0076C      C        DISP_CID_NAME_END:
   771 0076C 18FF C        	MOV	A,@CH_END
   772            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       0076D 1E85     3     PAGE ( VGA_STR / 1024 ),
       0076E 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       0076F 1E81     3     PAGE ( $ / 1024 ),
   773            C        	
   774 00770 0012 C        	RET
   775            C        
   776            C        
   777 00771      C        CID_DECODE:
   778 00771 1000 C        	CALL	FSK_DECODE
   779 00772 114D C        	CALL	DTMF_DECODE
   780 00773 125E C        	CALL	CID_STORE
   781 00774 0012 C        	RET
   782            C        
   783            C        
   505                     include	"stcp.asm"
     1            C        ORG	0X0800
     2            C        
     3            C        
     4 00800      C        RESET_REC_TIMER:
     5            C      M 	BANK	1
       00800 0B84     1     BS  _RSR , 6 
       00801 09C4     1     BC  _RSR , 7 
     6 00802 0011 C        	DISI
     7            C      M 	MOV	TIME_MS,@250
       00803 18FA     1     MOV A,@( 250 )
       00804 006B     1     MOV  TIME_MS ,A
     8 00805 00EC C        	CLR	TIME_SEC
     9 00806 00ED C        	CLR	TIME_MIN
    10 00807 00EE C        	CLR	TIME_HOUR
    11            C      M 	SRAM	SYS_FG,TIME
       00808 0BDE     1     BS  SYS_FG , TIME 
    12 00809 0010 C        	ENI
    13            C      M 	BANK	0
       0080A 0984     1     BC  _RSR , 6 
       0080B 09C4     1     BC  _RSR , 7 
    14 0080C 0012 C        	RET
    15            C        
    16            C        /*****************************
    17            C        显示屏锁定，
    18            C        显示更新不起作用
    19            C        *****************************/
    20 0080D      C        MENU_LOCK:
    21            C      M 	SRAM	SYS_FG,LOCK_TOPLINE
       0080D 0B5E     1     BS  SYS_FG , LOCK_TOPLINE 
    22            C      M 	PAGE	#(CLR_LCD)
       0080E 1E85     1     PAGE ( CLR_LCD / 1024 ),
    23 0080F 1072 C        	CALL	CLR_STAMP
    24 00810 1078 C        	CALL	CLR_NUM1
    25 00811 107E C        	CALL	CLR_NUM2
    26 00812 1084 C        	CALL	CLR_STR
    27            C      M 	PAGE	#($)
       00813 1E82     1     PAGE ( $ / 1024 ),
    28 00814 0012 C        	RET
    29            C        
    30 00815      C        MENU_CHK:
    31 00815 0056 C        	MOV	TEMP0,A
    32            C      M 	XORA	TEMP0,MENU_STATE
       00816 0439     1     MOV A, MENU_STATE 
       00817 0316     1     XOR A, TEMP0 
    33            C      M 	JPZ	MENU_CHK_RET
       00818 0C83     1     JBC  _STATUS , Z 
       00819 147A     1     JMP  MENU_CHK_RET ,
    34            C      M 	MOV	MENU_STATE,TEMP0
       0081A 0416     1     MOV A, TEMP0 
       0081B 0079     1     MOV  MENU_STATE ,A
    35            C      M 	CALL	#MENU_LOCK
       0081C 100D     1     CALL ( MENU_LOCK % 1024 ),
    36            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0081D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0081E 088B     2     BC  _RB , 2 
    37 0081F 0439 C        	MOV	A,MENU_STATE
    38 00820 0020 C        	TBL
    39 00821 147A C        	JMP	MENU_CHK_IDLE
    40 00822 147A C        	JMP	MENU_CHK_LANGUAGE
    41 00823 1428 C        	JMP	MENU_CHK_TIME
    42 00824 147A C        	JMP	MENU_CHK_LCD
    43 00825 143D C        	JMP	MENU_CHK_CODE
    44 00826 1455 C        	JMP	MENU_CHK_LCALL
    45 00827 147A C        	JMP	MENU_CHK_RING
    46 00828      C        MENU_CHK_TIME:
    47            C      M 	MOV	_RC,@(EDIT_ADDR+1)
       00828 185F     1     MOV A,@(( EDIT_ADDR + 1 ))
       00829 004C     1     MOV  _RC ,A
    48            C      M 	MOV	_RD,HOUR_REG
       0082A 0428     1     MOV A, HOUR_REG 
       0082B 004D     1     MOV  _RD ,A
    49 0082C 054C C        	INC	_RC
    50            C      M 	MOV	_RD,MIN_REG
       0082D 0429     1     MOV A, MIN_REG 
       0082E 004D     1     MOV  _RD ,A
    51 0082F 054C C        	INC	_RC
    52            C      M 	MOV	_RD,MONTH_REG
       00830 0425     1     MOV A, MONTH_REG 
       00831 004D     1     MOV  _RD ,A
    53 00832 054C C        	INC	_RC
    54            C      M 	MOV	_RD,DAY_REG
       00833 0426     1     MOV A, DAY_REG 
       00834 004D     1     MOV  _RD ,A
    55 00835 054C C        	INC	_RC
    56            C      M 	MOV	_RD,WEEK_REG
       00836 0427     1     MOV A, WEEK_REG 
       00837 004D     1     MOV  _RD ,A
    57 00838 1830 C        	MOV	A,@0X30
    58            C      M 	CALL	#VGA_STAMP
                      2  M  LCALL  VGA_STAMP 
                      3  M  PAGE #( VGA_STAMP ),
       00839 1E85     3     PAGE ( VGA_STAMP / 1024 ),
       0083A 1000     2     CALL ( VGA_STAMP % 1024 ),
                      3  M  PAGE #( $ ),
       0083B 1E82     3     PAGE ( $ / 1024 ),
    59 0083C 147A C        	JMP	MENU_CHK_RET
    60 0083D      C        MENU_CHK_CODE:
    61            C      M 	BANK	1
       0083D 0B84     1     BS  _RSR , 6 
       0083E 09C4     1     BC  _RSR , 7 
    62            C      M 	MOV	_RC,@(EDIT_ADDR+6)
       0083F 1864     1     MOV A,@(( EDIT_ADDR + 6 ))
       00840 004C     1     MOV  _RC ,A
    63 00841 0735 C        	SWAPA	R1_CODE1
    64 00842 1A0F C        	AND	A,@0X0F
    65 00843 004D C        	MOV	_RD,A
    66 00844 054C C        	INC	_RC
    67 00845 0736 C        	SWAPA	R1_CODE23
    68 00846 1A0F C        	AND	A,@0X0F
    69 00847 004D C        	MOV	_RD,A
    70 00848 054C C        	INC	_RC
    71            C      M 	ANDA	R1_CODE23,@0X0F
       00849 180F     1     MOV A,@( 15 )
       0084A 02B6     1     AND A, R1_CODE23 
    72 0084B 004D C        	MOV	_RD,A
    73            C      M 	PAGE	#(VGA_STR)
       0084C 1E85     1     PAGE ( VGA_STR / 1024 ),
    74 0084D 1860 C        	MOV	A,@(STYLE_CENTER)
    75 0084E 104B C        	CALL	VGA_STR
    76 0084F 1812 C        	MOV	A,@(WD_SET_REMOTE_CODE)
    77 00850 11BF C        	CALL	VGA_STRING
    78 00851 18FF C        	MOV	A,@CH_END
    79 00852 104B C        	CALL	VGA_STR
    80            C      M 	PAGE	#($)
       00853 1E82     1     PAGE ( $ / 1024 ),
    81 00854 147A C        	JMP	MENU_CHK_RET
    82 00855      C        MENU_CHK_LCALL:
    83            C      M 	MOV	_RC,@(EDIT_ADDR+6)
       00855 1864     1     MOV A,@(( EDIT_ADDR + 6 ))
       00856 004C     1     MOV  _RC ,A
    84 00857 0730 C        	SWAPA	LCALL12
    85 00858 1A0F C        	AND	A,@0X0F
    86 00859 004D C        	MOV	_RD,A
    87 0085A 054C C        	INC	_RC
    88            C      M 	ANDA	LCALL12,@0X0F
       0085B 180F     1     MOV A,@( 15 )
       0085C 02B0     1     AND A, LCALL12 
    89 0085D 004D C        	MOV	_RD,A
    90 0085E 054C C        	INC	_RC
    91 0085F 0731 C        	SWAPA	LCALL34
    92 00860 1A0F C        	AND	A,@0X0F
    93 00861 004D C        	MOV	_RD,A
    94 00862 054C C        	INC	_RC
    95            C      M 	ANDA	LCALL34,@0X0F
       00863 180F     1     MOV A,@( 15 )
       00864 02B1     1     AND A, LCALL34 
    96 00865 004D C        	MOV	_RD,A
    97 00866 054C C        	INC	_RC
    98 00867 0732 C        	SWAPA	LCALL5
    99 00868 1A0F C        	AND	A,@0X0F
   100 00869 004D C        	MOV	_RD,A
   101            C        	
   102 0086A 054C C        	INC	_RC
   103            C      M 	MOV	_RD,@0X0F
       0086B 180F     1     MOV A,@( 15 )
       0086C 004D     1     MOV  _RD ,A
   104            C      M 	SUBA	_RC,@(EDIT_ADDR+21)
       0086D 1873     1     MOV A,@(( EDIT_ADDR + 21 ))
       0086E 010C     1     SUB A, _RC 
   105            C      M 	JPNZ	$-6
       0086F 0E83     1     JBS  _STATUS , Z 
       00870 146A     1     JMP ( $ - 6 ),
   106            C        	
   107            C      M 	PAGE	#(VGA_STR)
       00871 1E85     1     PAGE ( VGA_STR / 1024 ),
   108 00872 1860 C        	MOV	A,@(STYLE_CENTER)
   109 00873 104B C        	CALL	VGA_STR
   110 00874 1813 C        	MOV	A,@(WD_SET_LONG_CODE)
   111 00875 11BF C        	CALL	VGA_STRING
   112 00876 18FF C        	MOV	A,@CH_END
   113 00877 104B C        	CALL	VGA_STR
   114            C      M 	PAGE	#($)
       00878 1E82     1     PAGE ( $ / 1024 ),
   115 00879 147A C        	JMP	MENU_CHK_RET
   116 0087A      C        MENU_CHK_IDLE:
   117 0087A      C        MENU_CHK_LANGUAGE:
   118 0087A      C        MENU_CHK_LCD:
   119 0087A      C        MENU_CHK_RING:
   120 0087A      C        MENU_CHK_RET:
   121            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0087A 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0087B 088B     2     BC  _RB , 2 
   122 0087C 0012 C        	RET
   123            C        
   124            C        /***************************************
   125            C        初始化编辑区
   126            C        将CID区的电话号码复制到编辑区
   127            C        或将编辑区清空
   128            C        ***************************************/
   129 0087D      C        INIT_EDIT:
   130            C        ; -----------------------	将CID区的电话号码信息复制到编辑区
   131            C        	;CIDBANK	1
   132 0087D 1081 C        	CALL	INIT_EDIT_NUM1
   133 0087E 10AA C        	CALL	INIT_EDIT_NUM2
   134 0087F 10C2 C        	CALL	INIT_EDIT_STR
   135 00880 0012 C        	RET
   136            C        
   137 00881      C        INIT_EDIT_NUM1:
   138            C      M 	MOV	_RC,@(CID_ADDR+31)
       00881 185B     1     MOV A,@(( CID_ADDR + 31 ))
       00882 004C     1     MOV  _RC ,A
   139            C      M 	MOV	TEMP0,_RD
       00883 040D     1     MOV A, _RD 
       00884 0056     1     MOV  TEMP0 ,A
   140            C      M 	MOV	_RC,@(EDIT_ADDR+1)
       00885 185F     1     MOV A,@(( EDIT_ADDR + 1 ))
       00886 004C     1     MOV  _RC ,A
   141            C      M 	MOV	_RD,TEMP0
       00887 0416     1     MOV A, TEMP0 
       00888 004D     1     MOV  _RD ,A
   142            C      M 	MOV	_RC,@(CID_ADDR+32)
       00889 185C     1     MOV A,@(( CID_ADDR + 32 ))
       0088A 004C     1     MOV  _RC ,A
   143            C      M 	MOV	TEMP0,_RD
       0088B 040D     1     MOV A, _RD 
       0088C 0056     1     MOV  TEMP0 ,A
   144            C      M 	MOV	_RC,@(EDIT_ADDR+2)
       0088D 1860     1     MOV A,@(( EDIT_ADDR + 2 ))
       0088E 004C     1     MOV  _RC ,A
   145            C      M 	MOV	_RD,TEMP0
       0088F 0416     1     MOV A, TEMP0 
       00890 004D     1     MOV  _RD ,A
   146            C      M 	MOV	_RC,@(CID_ADDR+30)
       00891 185A     1     MOV A,@(( CID_ADDR + 30 ))
       00892 004C     1     MOV  _RC ,A
   147            C      M 	MOV	TEMP0,_RD
       00893 040D     1     MOV A, _RD 
       00894 0056     1     MOV  TEMP0 ,A
   148            C      M 	MOV	_RC,@(EDIT_ADDR+3)
       00895 1861     1     MOV A,@(( EDIT_ADDR + 3 ))
       00896 004C     1     MOV  _RC ,A
   149            C      M 	MOV	_RD,TEMP0
       00897 0416     1     MOV A, TEMP0 
       00898 004D     1     MOV  _RD ,A
   150            C      M 	MOV	_RC,@(CID_ADDR+29)
       00899 1859     1     MOV A,@(( CID_ADDR + 29 ))
       0089A 004C     1     MOV  _RC ,A
   151            C      M 	MOV	TEMP0,_RD
       0089B 040D     1     MOV A, _RD 
       0089C 0056     1     MOV  TEMP0 ,A
   152            C      M 	MOV	_RC,@(EDIT_ADDR+4)
       0089D 1862     1     MOV A,@(( EDIT_ADDR + 4 ))
       0089E 004C     1     MOV  _RC ,A
   153            C      M 	MOV	_RD,TEMP0
       0089F 0416     1     MOV A, TEMP0 
       008A0 004D     1     MOV  _RD ,A
   154            C      M 	MOV	_RC,@(CID_ADDR+33)
       008A1 185D     1     MOV A,@(( CID_ADDR + 33 ))
       008A2 004C     1     MOV  _RC ,A
   155            C      M 	MOV	TEMP0,_RD
       008A3 040D     1     MOV A, _RD 
       008A4 0056     1     MOV  TEMP0 ,A
   156            C      M 	MOV	_RC,@(EDIT_ADDR+5)
       008A5 1863     1     MOV A,@(( EDIT_ADDR + 5 ))
       008A6 004C     1     MOV  _RC ,A
   157            C      M 	MOV	_RD,TEMP0
       008A7 0416     1     MOV A, TEMP0 
       008A8 004D     1     MOV  _RD ,A
   158 008A9 0012 C        	RET
   159            C        
   160 008AA      C        INIT_EDIT_NUM2:
   161 008AA 00D6 C        	CLR	TEMP0
   162 008AB      C        INIT_EDIT_NUM2_LOOP:
   163            C      M 	CLRC
       008AB 0803     1     BC  _STATUS , C 
   164 008AC 0616 C        	RRCA	TEMP0
   165 008AD 1F3F C        	ADD	A,@(CID_ADDR+3)
   166 008AE 004C C        	MOV	_RC,A
   167            C      M 	MOV	TEMP1,_RD
       008AF 040D     1     MOV A, _RD 
       008B0 0057     1     MOV  TEMP1 ,A
   168            C      M 	ADDA	TEMP0,@(EDIT_ADDR+6)
       008B1 1864     1     MOV A,@(( EDIT_ADDR + 6 ))
       008B2 0396     1     ADD A, TEMP0 
   169 008B3 004C C        	MOV	_RC,A
   170 008B4 0717 C        	SWAPA	TEMP1
   171 008B5 1A0F C        	AND	A,@0X0F
   172 008B6 004D C        	MOV	_RD,A
   173 008B7 0556 C        	INC	TEMP0
   174 008B8 054C C        	INC	_RC
   175            C      M 	ANDA	TEMP1,@0X0F
       008B9 180F     1     MOV A,@( 15 )
       008BA 0297     1     AND A, TEMP1 
   176 008BB 004D C        	MOV	_RD,A
   177 008BC 0556 C        	INC	TEMP0
   178            C      M 	SUBA	TEMP0,@16
       008BD 1810     1     MOV A,@( 16 )
       008BE 0116     1     SUB A, TEMP0 
   179            C      M 	JPNZ	INIT_EDIT_NUM2_LOOP
       008BF 0E83     1     JBS  _STATUS , Z 
       008C0 14AB     1     JMP  INIT_EDIT_NUM2_LOOP ,
   180 008C1 0012 C        	RET
   181            C        
   182 008C2      C        INIT_EDIT_STR:
   183 008C2 00D6 C        	CLR	TEMP0
   184 008C3      C        INIT_EDIT_STR_LOOP:
   185            C      M 	ADDA	TEMP0,@(CID_ADDR+12)
       008C3 1848     1     MOV A,@(( CID_ADDR + 12 ))
       008C4 0396     1     ADD A, TEMP0 
   186 008C5 004C C        	MOV	_RC,A
   187            C      M 	MOV	TEMP1,_RD
       008C6 040D     1     MOV A, _RD 
       008C7 0057     1     MOV  TEMP1 ,A
   188            C      M 	ADDA	TEMP0,@(EDIT_ADDR+22)
       008C8 1874     1     MOV A,@(( EDIT_ADDR + 22 ))
       008C9 0396     1     ADD A, TEMP0 
   189 008CA 004C C        	MOV	_RC,A
   190            C      M 	MOV	_RD,TEMP1
       008CB 0417     1     MOV A, TEMP1 
       008CC 004D     1     MOV  _RD ,A
   191 008CD 0556 C        	INC	TEMP0
   192            C      M 	SUBA	TEMP0,@16
       008CE 1810     1     MOV A,@( 16 )
       008CF 0116     1     SUB A, TEMP0 
   193            C      M 	JPNZ	INIT_EDIT_STR_LOOP
       008D0 0E83     1     JBS  _STATUS , Z 
       008D1 14C3     1     JMP  INIT_EDIT_STR_LOOP ,
   194 008D2 0012 C        	RET
   195            C        
   196            C        
   197 008D3      C        CLR_EDIT:
   198 008D3 10D7 C        	CALL	CLR_EDIT_NUM1
   199 008D4 10E3 C        	CALL	CLR_EDIT_NUM2
   200 008D5 10ED C        	CALL	CLR_EDIT_STR
   201 008D6 0012 C        	RET
   202            C        
   203 008D7      C        CLR_EDIT_NUM1:
   204            C      M 	MOV	_RC,@(EDIT_ADDR+0)
       008D7 185E     1     MOV A,@(( EDIT_ADDR + 0 ))
       008D8 004C     1     MOV  _RC ,A
   205 008D9 054C C        	INC	_RC
   206            C      M 	MOV	_RD,@0XFF
       008DA 18FF     1     MOV A,@( 255 )
       008DB 004D     1     MOV  _RD ,A
   207            C      M 	SUBA	_RC,@(EDIT_ADDR+4)
       008DC 1862     1     MOV A,@(( EDIT_ADDR + 4 ))
       008DD 010C     1     SUB A, _RC 
   208            C      M 	JPNZ	$-6
       008DE 0E83     1     JBS  _STATUS , Z 
       008DF 14D9     1     JMP ( $ - 6 ),
   209 008E0 054C C        	INC	_RC
   210 008E1 00CD C        	CLR	_RD
   211 008E2 0012 C        	RET
   212            C        
   213 008E3      C        CLR_EDIT_NUM2:
   214            C      M 	MOV	_RC,@(EDIT_ADDR+5)
       008E3 1863     1     MOV A,@(( EDIT_ADDR + 5 ))
       008E4 004C     1     MOV  _RC ,A
   215 008E5 054C C        	INC	_RC
   216            C      M 	MOV	_RD,@0X0F
       008E6 180F     1     MOV A,@( 15 )
       008E7 004D     1     MOV  _RD ,A
   217            C      M 	SUBA	_RC,@(EDIT_ADDR+21)
       008E8 1873     1     MOV A,@(( EDIT_ADDR + 21 ))
       008E9 010C     1     SUB A, _RC 
   218            C      M 	JPNZ	$-6
       008EA 0E83     1     JBS  _STATUS , Z 
       008EB 14E5     1     JMP ( $ - 6 ),
   219 008EC 0012 C        	RET
   220            C        
   221 008ED      C        CLR_EDIT_STR:
   222            C      M 	MOV	_RC,@(EDIT_ADDR+21)
       008ED 1873     1     MOV A,@(( EDIT_ADDR + 21 ))
       008EE 004C     1     MOV  _RC ,A
   223 008EF 054C C        	INC	_RC
   224            C      M 	MOV	_RD,@0XFF
       008F0 18FF     1     MOV A,@( 255 )
       008F1 004D     1     MOV  _RD ,A
   225            C      M 	SUBA	_RC,@(EDIT_ADDR+37)
       008F2 1883     1     MOV A,@(( EDIT_ADDR + 37 ))
       008F3 010C     1     SUB A, _RC 
   226            C      M 	JPNZ	$-6
       008F4 0E83     1     JBS  _STATUS , Z 
       008F5 14EF     1     JMP ( $ - 6 ),
   227 008F6 0012 C        	RET
   228            C        /*****************************
   229            C        对编辑区的内容作修改。
   230            C        输入 -- A	编辑的位置
   231            C        RC   -- 	编辑的内容的地址
   232            C        当输入0时，显示正常号码，第一行和第三行遇FF不显示，第二行遇F不显示
   233            C        当输入1~16时，闪烁相应位置的数字，
   234            C        *****************************/
   235 008F7      C        EDIT_NUM1:
   236            C      M 	BANK	0
       008F7 0984     1     BC  _RSR , 6 
       008F8 09C4     1     BC  _RSR , 7 
   237 008F9 0060 C        	MOV	BANK0_TEMP0,A
   238            C      M 	MOV	TEMP0,@(EDIT_ADDR+5)
       008FA 1863     1     MOV A,@(( EDIT_ADDR + 5 ))
       008FB 0056     1     MOV  TEMP0 ,A
   239 008FC 185F C        	MOV	A,@(EDIT_ADDR+1)
   240 008FD 150C C        	JMP	EDIT_INFO
   241 008FE      C        EDIT_NUM2:
   242            C      M 	BANK	0
       008FE 0984     1     BC  _RSR , 6 
       008FF 09C4     1     BC  _RSR , 7 
   243 00900 0060 C        	MOV	BANK0_TEMP0,A
   244            C      M 	MOV	TEMP0,@(EDIT_ADDR+21)
       00901 1873     1     MOV A,@(( EDIT_ADDR + 21 ))
       00902 0056     1     MOV  TEMP0 ,A
   245 00903 1864 C        	MOV	A,@(EDIT_ADDR+6)
   246 00904 150C C        	JMP	EDIT_INFO
   247 00905      C        EDIT_STR:
   248            C      M 	BANK	0
       00905 0984     1     BC  _RSR , 6 
       00906 09C4     1     BC  _RSR , 7 
   249 00907 0060 C        	MOV	BANK0_TEMP0,A
   250            C      M 	MOV	TEMP0,@(EDIT_ADDR+37)
       00908 1883     1     MOV A,@(( EDIT_ADDR + 37 ))
       00909 0056     1     MOV  TEMP0 ,A
   251 0090A 1874 C        	MOV	A,@(EDIT_ADDR+22)
   252 0090B 150C C        	JMP	EDIT_INFO
   253 0090C      C        EDIT_INFO:
   254 0090C 0061 C        	MOV	BANK0_TEMP1,A
   255 0090D 0420 C        	MOV	A,BANK0_TEMP0
   256            C      M 	JPZ	EDIT_INFO_RET
       0090E 0C83     1     JBC  _STATUS , Z 
       0090F 1530     1     JMP  EDIT_INFO_RET ,
   257            C      M 	MOV	BANK0_TEMP2,_RD
       00910 040D     1     MOV A, _RD 
       00911 0062     1     MOV  BANK0_TEMP2 ,A
   258            C      M 	SUBA	BANK0_TEMP2,@0X80
       00912 1880     1     MOV A,@( 128 )
       00913 0122     1     SUB A, BANK0_TEMP2 
   259            C      M 	JPZ	EDIT_INFO_DEL
       00914 0C83     1     JBC  _STATUS , Z 
       00915 151D     1     JMP  EDIT_INFO_DEL ,
   260            C      M 	ADDA	BANK0_TEMP0,BANK0_TEMP1
       00916 0421     1     MOV A, BANK0_TEMP1 
       00917 03A0     1     ADD A, BANK0_TEMP0 
   261 00918 004C C        	MOV	_RC,A
   262 00919 01CC C        	DEC	_RC
   263            C      M 	MOV	_RD,BANK0_TEMP2
       0091A 0422     1     MOV A, BANK0_TEMP2 
       0091B 004D     1     MOV  _RD ,A
   264 0091C 1530 C        	JMP	EDIT_INFO_RET
   265 0091D      C        EDIT_INFO_DEL:
   266            C      M 	SUBA	BANK0_TEMP1,@1
       0091D 1801     1     MOV A,@( 1 )
       0091E 0121     1     SUB A, BANK0_TEMP1 
   267 0091F 03A0 C        	ADD	A,BANK0_TEMP0
   268 00920 004C C        	MOV	_RC,A
   269 00921      C        EDIT_INFO_DEL_LOOP:
   270            C      M 	SUBA	_RC,TEMP0
       00921 0416     1     MOV A, TEMP0 
       00922 010C     1     SUB A, _RC 
   271            C      M 	JPZ	EDIT_INFO_DEL_END
       00923 0C83     1     JBC  _STATUS , Z 
       00924 152D     1     JMP  EDIT_INFO_DEL_END ,
   272 00925 054C C        	INC	_RC
   273            C      M 	MOV	TEMP1,_RD
       00926 040D     1     MOV A, _RD 
       00927 0057     1     MOV  TEMP1 ,A
   274 00928 01CC C        	DEC	_RC
   275            C      M 	MOV	_RD,TEMP1
       00929 0417     1     MOV A, TEMP1 
       0092A 004D     1     MOV  _RD ,A
   276 0092B 054C C        	INC	_RC
   277 0092C 1521 C        	JMP	EDIT_INFO_DEL_LOOP
   278 0092D      C        EDIT_INFO_DEL_END:
   279            C      M 	MOV	_RD,@0XFF
       0092D 18FF     1     MOV A,@( 255 )
       0092E 004D     1     MOV  _RD ,A
   280 0092F 1530 C        	JMP	EDIT_INFO_RET
   281 00930      C        EDIT_INFO_RET:
   282            C      M 	SUBA	BANK0_TEMP1,@(EDIT_ADDR+1)
       00930 185F     1     MOV A,@(( EDIT_ADDR + 1 ))
       00931 0121     1     SUB A, BANK0_TEMP1 
   283            C      M 	JPNZ	$+3
       00932 0E83     1     JBS  _STATUS , Z 
       00933 1536     1     JMP ( $ + 3 ),
   284 00934 0420 C        	MOV	A,BANK0_TEMP0
   285 00935 1543 C        	JMP	DISP_NUM1
   286            C      M 	SUBA	BANK0_TEMP1,@(EDIT_ADDR+6)
       00936 1864     1     MOV A,@(( EDIT_ADDR + 6 ))
       00937 0121     1     SUB A, BANK0_TEMP1 
   287            C      M 	JPNZ	$+3
       00938 0E83     1     JBS  _STATUS , Z 
       00939 153C     1     JMP ( $ + 3 ),
   288 0093A 0420 C        	MOV	A,BANK0_TEMP0
   289 0093B 158A C        	JMP	DISP_NUM2
   290            C      M 	SUBA	BANK0_TEMP1,@(EDIT_ADDR+22)
       0093C 1874     1     MOV A,@(( EDIT_ADDR + 22 ))
       0093D 0121     1     SUB A, BANK0_TEMP1 
   291            C      M 	JPNZ	$+3
       0093E 0E83     1     JBS  _STATUS , Z 
       0093F 1542     1     JMP ( $ + 3 ),
   292 00940 0420 C        	MOV	A,BANK0_TEMP0
   293 00941 15BA C        	JMP	DISP_STR
   294 00942 0012 C        	RET
   295            C        
   296 00943      C        DISP_NUM1:
   297            C      M 	BANK	0
       00943 0984     1     BC  _RSR , 6 
       00944 09C4     1     BC  _RSR , 7 
   298 00945 0060 C        	MOV	BANK0_TEMP0,A
   299 00946 00E1 C        	CLR	BANK0_TEMP1
   300 00947 1800 C        	MOV	A,@STYLE_NORMAL
   301            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       00948 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       00949 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0094A 1E82     3     PAGE ( $ / 1024 ),
   302 0094B      C        DISP_NUM1_LOOP:
   303 0094B 00E3 C        	CLR	BANK0_TEMP3
   304 0094C 0561 C        	INC	BANK0_TEMP1
   305            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0094D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0094E 088B     2     BC  _RB , 2 
   306            C      M 	ADDA	BANK0_TEMP1,@(EDIT_ADDR+1-1)
       0094F 185E     1     MOV A,@((( EDIT_ADDR + 1 )- 1 ))
       00950 03A1     1     ADD A, BANK0_TEMP1 
   307 00951 004C C        	MOV	_RC,A
   308            C      M 	MOV	BANK0_TEMP2,_RD
       00952 040D     1     MOV A, _RD 
       00953 0062     1     MOV  BANK0_TEMP2 ,A
   309            C      M 	SUBA	BANK0_TEMP0,BANK0_TEMP1
       00954 0421     1     MOV A, BANK0_TEMP1 
       00955 0120     1     SUB A, BANK0_TEMP0 
   310            C      M 	JPNZ	$+3
       00956 0E83     1     JBS  _STATUS , Z 
       00957 155A     1     JMP ( $ + 3 ),
   311            C      M 	MOV	BANK0_TEMP3,@0X80
       00958 1880     1     MOV A,@( 128 )
       00959 0063     1     MOV  BANK0_TEMP3 ,A
   312            C      M 	SUBA	BANK0_TEMP2,@0XFF
       0095A 18FF     1     MOV A,@( 255 )
       0095B 0122     1     SUB A, BANK0_TEMP2 
   313            C      M 	JPZ	DISP_NUM1_LOOP_1
       0095C 0C83     1     JBC  _STATUS , Z 
       0095D 157B     1     JMP  DISP_NUM1_LOOP_1 ,
   314            C      M 	MOV	GENE_A,BANK0_TEMP2
       0095E 0422     1     MOV A, BANK0_TEMP2 
       0095F 0056     1     MOV  GENE_A ,A
   315            C      M 	CALL	#MATH_HTD
                      2  M  LCALL  MATH_HTD 
                      3  M  PAGE #( MATH_HTD ),
       00960 1E84     3     PAGE ( MATH_HTD / 1024 ),
       00961 1100     2     CALL ( MATH_HTD % 1024 ),
                      3  M  PAGE #( $ ),
       00962 1E82     3     PAGE ( $ / 1024 ),
   316            C      M 	MOV	BANK0_TEMP2,RESULT
       00963 0418     1     MOV A, RESULT 
       00964 0062     1     MOV  BANK0_TEMP2 ,A
   317 00965 0722 C        	SWAPA	BANK0_TEMP2
   318 00966 1A0F C        	AND	A,@0X0F
   319 00967 0056 C        	MOV	TEMP0,A
   320            C      M 	SUBA	BANK0_TEMP1,@4
       00968 1804     1     MOV A,@( 4 )
       00969 0121     1     SUB A, BANK0_TEMP1 
   321            C      M 	JPNZ	$+6
       0096A 0E83     1     JBS  _STATUS , Z 
       0096B 1571     1     JMP ( $ + 6 ),
   322 0096C 0416 C        	MOV	A,TEMP0
   323            C      M 	JPNZ	$+3
       0096D 0E83     1     JBS  _STATUS , Z 
       0096E 1571     1     JMP ( $ + 3 ),
   324            C      M 	MOV	TEMP0,@NUM_BLANK
       0096F 1810     1     MOV A,@( NUM_BLANK )
       00970 0056     1     MOV  TEMP0 ,A
   325 00971 0416 C        	MOV	A,TEMP0
   326 00972 03A3 C        	ADD	A,BANK0_TEMP3
   327            C      M 	PAGE	#VGA_NUM1
       00973 1E85     1     PAGE ( VGA_NUM1 / 1024 ),
   328 00974 1008 C        	CALL	VGA_NUM1
   329            C      M 	ANDA	BANK0_TEMP2,@0X0F
       00975 180F     1     MOV A,@( 15 )
       00976 02A2     1     AND A, BANK0_TEMP2 
   330 00977 03A3 C        	ADD	A,BANK0_TEMP3
   331 00978 1008 C        	CALL	VGA_NUM1
   332            C      M 	PAGE	#($)
       00979 1E82     1     PAGE ( $ / 1024 ),
   333 0097A 1581 C        	JMP	DISP_NUM1_LOOP_2
   334 0097B      C        DISP_NUM1_LOOP_1:
   335            C      M 	PAGE	#VGA_NUM1
       0097B 1E85     1     PAGE ( VGA_NUM1 / 1024 ),
   336 0097C 1810 C        	MOV	A,@NUM_BLANK
   337 0097D 1008 C        	CALL	VGA_NUM1
   338 0097E 1810 C        	MOV	A,@NUM_BLANK
   339 0097F 1008 C        	CALL	VGA_NUM1
   340            C      M 	PAGE	#($)
       00980 1E82     1     PAGE ( $ / 1024 ),
   341 00981      C        DISP_NUM1_LOOP_2:
   342            C      M 	SUBA	BANK0_TEMP1,@5
       00981 1805     1     MOV A,@( 5 )
       00982 0121     1     SUB A, BANK0_TEMP1 
   343            C      M 	JPNZ	DISP_NUM1_LOOP
       00983 0E83     1     JBS  _STATUS , Z 
       00984 154B     1     JMP  DISP_NUM1_LOOP ,
   344 00985 18FF C        	MOV	A,@CH_END
   345            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       00986 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       00987 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       00988 1E82     3     PAGE ( $ / 1024 ),
   346 00989 0012 C        	RET
   347            C        
   348 0098A      C        DISP_NUM2:
   349            C      M 	BANK	0
       0098A 0984     1     BC  _RSR , 6 
       0098B 09C4     1     BC  _RSR , 7 
   350 0098C 0060 C        	MOV	BANK0_TEMP0,A
   351 0098D 00E1 C        	CLR	BANK0_TEMP1
   352 0098E 1800 C        	MOV	A,@STYLE_NORMAL
   353            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       0098F 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00990 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00991 1E82     3     PAGE ( $ / 1024 ),
   354 00992      C        DISP_NUM2_LOOP:
   355 00992 00E3 C        	CLR	BANK0_TEMP3
   356 00993 0561 C        	INC	BANK0_TEMP1
   357            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00994 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00995 088B     2     BC  _RB , 2 
   358            C      M 	ADDA	BANK0_TEMP1,@(EDIT_ADDR+6-1)
       00996 1863     1     MOV A,@((( EDIT_ADDR + 6 )- 1 ))
       00997 03A1     1     ADD A, BANK0_TEMP1 
   359 00998 004C C        	MOV	_RC,A
   360            C      M 	MOV	BANK0_TEMP2,_RD
       00999 040D     1     MOV A, _RD 
       0099A 0062     1     MOV  BANK0_TEMP2 ,A
   361            C      M 	SUBA	BANK0_TEMP0,BANK0_TEMP1
       0099B 0421     1     MOV A, BANK0_TEMP1 
       0099C 0120     1     SUB A, BANK0_TEMP0 
   362            C      M 	JPNZ	$+3
       0099D 0E83     1     JBS  _STATUS , Z 
       0099E 15A1     1     JMP ( $ + 3 ),
   363            C      M 	MOV	BANK0_TEMP3,@0X80
       0099F 1880     1     MOV A,@( 128 )
       009A0 0063     1     MOV  BANK0_TEMP3 ,A
   364            C      M 	SUBA	BANK0_TEMP2,@0X0A
       009A1 180A     1     MOV A,@( 10 )
       009A2 0122     1     SUB A, BANK0_TEMP2 
   365            C      M 	JPNC	$+8
       009A3 0E03     1     JBS  _STATUS , C 
       009A4 15AC     1     JMP ( $ + 8 ),
   366            C      M 	JPB	BANK0_TEMP3,7,$+4
       009A5 0DE3     1     JBC  BANK0_TEMP3 , 7 
       009A6 15AA     1     JMP ( $ + 4 ),
   367            C      M 	MOV	BANK0_TEMP2,@NUM_BLANK
       009A7 1810     1     MOV A,@( NUM_BLANK )
       009A8 0062     1     MOV  BANK0_TEMP2 ,A
   368 009A9 15AC C        	JMP	$+3
   369            C      M 	MOV	BANK0_TEMP2,@0X11
       009AA 1811     1     MOV A,@( 17 )
       009AB 0062     1     MOV  BANK0_TEMP2 ,A
   370            C      M 	ADDA	BANK0_TEMP2,BANK0_TEMP3
       009AC 0423     1     MOV A, BANK0_TEMP3 
       009AD 03A2     1     ADD A, BANK0_TEMP2 
   371            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       009AE 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       009AF 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       009B0 1E82     3     PAGE ( $ / 1024 ),
   372            C      M 	SUBA	BANK0_TEMP1,@16
       009B1 1810     1     MOV A,@( 16 )
       009B2 0121     1     SUB A, BANK0_TEMP1 
   373            C      M 	JPNZ	DISP_NUM2_LOOP
       009B3 0E83     1     JBS  _STATUS , Z 
       009B4 1592     1     JMP  DISP_NUM2_LOOP ,
   374 009B5 18FF C        	MOV	A,@CH_END
   375            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       009B6 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       009B7 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       009B8 1E82     3     PAGE ( $ / 1024 ),
   376 009B9 0012 C        	RET
   377            C        
   378 009BA      C        DISP_STR:
   379            C        	;BANK	0
   380 009BA 0060 C        	MOV	BANK0_TEMP0,A
   381 009BB 00E1 C        	CLR	BANK0_TEMP1
   382 009BC 1800 C        	MOV	A,@STYLE_NORMAL
   383            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       009BD 1E85     3     PAGE ( VGA_STR / 1024 ),
       009BE 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       009BF 1E82     3     PAGE ( $ / 1024 ),
   384 009C0      C        DISP_STR_LOOP:
   385 009C0 00E3 C        	CLR	BANK0_TEMP3
   386 009C1 0561 C        	INC	BANK0_TEMP1
   387            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       009C2 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       009C3 088B     2     BC  _RB , 2 
   388            C      M 	ADDA	BANK0_TEMP1,@(EDIT_ADDR+22-1)
       009C4 1873     1     MOV A,@((( EDIT_ADDR + 22 )- 1 ))
       009C5 03A1     1     ADD A, BANK0_TEMP1 
   389 009C6 004C C        	MOV	_RC,A
   390            C      M 	MOV	BANK0_TEMP2,_RD
       009C7 040D     1     MOV A, _RD 
       009C8 0062     1     MOV  BANK0_TEMP2 ,A
   391            C      M 	SUBA	BANK0_TEMP0,BANK0_TEMP1
       009C9 0421     1     MOV A, BANK0_TEMP1 
       009CA 0120     1     SUB A, BANK0_TEMP0 
   392            C      M 	JPNZ	DISP_STR_LOOP_1
       009CB 0E83     1     JBS  _STATUS , Z 
       009CC 15E0     1     JMP  DISP_STR_LOOP_1 ,
   393            C      M 	MOV	BANK0_TEMP3,@0X80
       009CD 1880     1     MOV A,@( 128 )
       009CE 0063     1     MOV  BANK0_TEMP3 ,A
   394            C      M 	SUBA	BANK0_TEMP2,@0X7F
       009CF 187F     1     MOV A,@( 127 )
       009D0 0122     1     SUB A, BANK0_TEMP2 
   395            C      M 	JPZ	$+5
       009D1 0C83     1     JBC  _STATUS , Z 
       009D2 15D7     1     JMP ( $ + 5 ),
   396            C      M 	SUBA	BANK0_TEMP2,@0XFF
       009D3 18FF     1     MOV A,@( 255 )
       009D4 0122     1     SUB A, BANK0_TEMP2 
   397            C      M 	JPNZ	$+3
       009D5 0E83     1     JBS  _STATUS , Z 
       009D6 15D9     1     JMP ( $ + 3 ),
   398            C      M 	MOV	BANK0_TEMP2,@CH__
       009D7 182F     1     MOV A,@( CH__ )
       009D8 0062     1     MOV  BANK0_TEMP2 ,A
   399            C      M 	SUBA	BANK0_TEMP2,@CH_BLANK
       009D9 1824     1     MOV A,@( CH_BLANK )
       009DA 0122     1     SUB A, BANK0_TEMP2 
   400            C      M 	JPNZ	$+3
       009DB 0E83     1     JBS  _STATUS , Z 
       009DC 15DF     1     JMP ( $ + 3 ),
   401            C      M 	MOV	BANK0_TEMP2,@CH_BLACK
       009DD 1825     1     MOV A,@( CH_BLACK )
       009DE 0062     1     MOV  BANK0_TEMP2 ,A
   402 009DF 15EA C        	JMP	DISP_STR_LOOP_2
   403 009E0      C        DISP_STR_LOOP_1:
   404            C      M 	SUBA	BANK0_TEMP2,@0X7F
       009E0 187F     1     MOV A,@( 127 )
       009E1 0122     1     SUB A, BANK0_TEMP2 
   405            C      M 	JPZ	$+5
       009E2 0C83     1     JBC  _STATUS , Z 
       009E3 15E8     1     JMP ( $ + 5 ),
   406            C      M 	SUBA	BANK0_TEMP2,@0XFF
       009E4 18FF     1     MOV A,@( 255 )
       009E5 0122     1     SUB A, BANK0_TEMP2 
   407            C      M 	JPNZ	$+3
       009E6 0E83     1     JBS  _STATUS , Z 
       009E7 15EA     1     JMP ( $ + 3 ),
   408            C      M 	MOV	BANK0_TEMP2,@CH_BLANK
       009E8 1824     1     MOV A,@( CH_BLANK )
       009E9 0062     1     MOV  BANK0_TEMP2 ,A
   409 009EA      C        DISP_STR_LOOP_2:
   410            C        	
   411            C      M 	ADDA	BANK0_TEMP2,BANK0_TEMP3
       009EA 0423     1     MOV A, BANK0_TEMP3 
       009EB 03A2     1     ADD A, BANK0_TEMP2 
   412            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       009EC 1E85     3     PAGE ( VGA_STR / 1024 ),
       009ED 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       009EE 1E82     3     PAGE ( $ / 1024 ),
   413            C      M 	SUBA	BANK0_TEMP1,@16
       009EF 1810     1     MOV A,@( 16 )
       009F0 0121     1     SUB A, BANK0_TEMP1 
   414            C      M 	JPNZ	DISP_STR_LOOP
       009F1 0E83     1     JBS  _STATUS , Z 
       009F2 15C0     1     JMP  DISP_STR_LOOP ,
   415 009F3 18FF C        	MOV	A,@CH_END
   416            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       009F4 1E85     3     PAGE ( VGA_STR / 1024 ),
       009F5 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       009F6 1E82     3     PAGE ( $ / 1024 ),
   417 009F7 0012 C        	RET
   418            C        
   419            C        /*****************************
   420            C        菜单操作显示时间
   421            C        *****************************/
   422 009F8      C        MENU_TIME:
   423 009F8 0056 C        	MOV	TEMP0,A
   424            C        	;INC	_RC
   425            C      M 	MOV	TEMP1,_RD
       009F9 040D     1     MOV A, _RD 
       009FA 0057     1     MOV  TEMP1 ,A
   426 009FB 00D8 C        	CLR	TEMP2
   427 009FC      C        MENU_TIME_0:
   428            C      M 	ADDA	TEMP2,@(EDIT_ADDR+1)
       009FC 185F     1     MOV A,@(( EDIT_ADDR + 1 ))
       009FD 0398     1     ADD A, TEMP2 
   429 009FE 004C C        	MOV	_RC,A
   430            C      M 	SUBA	TEMP0,TEMP2
       009FF 0418     1     MOV A, TEMP2 
       00A00 0116     1     SUB A, TEMP0 
   431            C      M 	JPNZ	MENU_TIME_1
       00A01 0E83     1     JBS  _STATUS , Z 
       00A02 1607     1     JMP  MENU_TIME_1 ,
   432            C      M 	ADDA	TEMP1,@0X80
       00A03 1880     1     MOV A,@( 128 )
       00A04 0397     1     ADD A, TEMP1 
   433 00A05 004D C        	MOV	_RD,A
   434 00A06 1609 C        	JMP	MENU_TIME_2
   435 00A07      C        MENU_TIME_1:
   436            C      M 	AND	_RD,@0X7F
       00A07 187F     1     MOV A,@( 127 )
       00A08 02CD     1     AND  _RD ,A
   437 00A09      C        MENU_TIME_2:
   438 00A09 0558 C        	INC	TEMP2
   439            C      M 	SUBA	TEMP2,@5
       00A0A 1805     1     MOV A,@( 5 )
       00A0B 0118     1     SUB A, TEMP2 
   440            C      M 	JPNZ	MENU_TIME_0
       00A0C 0E83     1     JBS  _STATUS , Z 
       00A0D 15FC     1     JMP  MENU_TIME_0 ,
   441 00A0E 0012 C        	RET
   442            C        
   443 00A0F      C        DISP_MENU_TIME:
   444 00A0F 1800 C        	MOV	A,@0
   445            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       00A10 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       00A11 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       00A12 1E82     3     PAGE ( $ / 1024 ),
   446            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A13 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A14 088B     2     BC  _RB , 2 
   447            C      M 	MOV	_RC,@(EDIT_ADDR+1)
       00A15 185F     1     MOV A,@(( EDIT_ADDR + 1 ))
       00A16 004C     1     MOV  _RC ,A
   448            C      M 	JPNB	_RD,7,$+4
       00A17 0FCD     1     JBS  _RD , 7 
       00A18 161C     1     JMP ( $ + 4 ),
   449 00A19 040D C        	MOV	A,_RD
   450 00A1A 125B C        	CALL	FLASH_TIME
   451 00A1B 1620 C        	JMP	$+5
   452 00A1C 040D C        	MOV	A,_RD
   453            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       00A1D 1E84     3     PAGE ( VGA_TIME / 1024 ),
       00A1E 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00A1F 1E82     3     PAGE ( $ / 1024 ),
   454            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A20 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A21 088B     2     BC  _RB , 2 
   455            C      M 	MOV	_RC,@(EDIT_ADDR+2)
       00A22 1860     1     MOV A,@(( EDIT_ADDR + 2 ))
       00A23 004C     1     MOV  _RC ,A
   456            C      M 	JPNB	_RD,7,$+4
       00A24 0FCD     1     JBS  _RD , 7 
       00A25 1629     1     JMP ( $ + 4 ),
   457 00A26 040D C        	MOV	A,_RD
   458 00A27 125B C        	CALL	FLASH_TIME
   459 00A28 162D C        	JMP	$+5
   460 00A29 040D C        	MOV	A,_RD
   461            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       00A2A 1E84     3     PAGE ( VGA_TIME / 1024 ),
       00A2B 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00A2C 1E82     3     PAGE ( $ / 1024 ),
   462            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A2D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A2E 088B     2     BC  _RB , 2 
   463            C      M 	MOV	_RC,@(EDIT_ADDR+4)
       00A2F 1862     1     MOV A,@(( EDIT_ADDR + 4 ))
       00A30 004C     1     MOV  _RC ,A
   464            C      M 	JPNB	_RD,7,$+4
       00A31 0FCD     1     JBS  _RD , 7 
       00A32 1636     1     JMP ( $ + 4 ),
   465 00A33 040D C        	MOV	A,_RD
   466 00A34 125B C        	CALL	FLASH_TIME
   467 00A35 163A C        	JMP	$+5
   468 00A36 040D C        	MOV	A,_RD
   469            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       00A37 1E84     3     PAGE ( VGA_TIME / 1024 ),
       00A38 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00A39 1E82     3     PAGE ( $ / 1024 ),
   470            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A3A 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A3B 088B     2     BC  _RB , 2 
   471            C      M 	MOV	_RC,@(EDIT_ADDR+3)
       00A3C 1861     1     MOV A,@(( EDIT_ADDR + 3 ))
       00A3D 004C     1     MOV  _RC ,A
   472            C      M 	JPNB	_RD,7,$+4
       00A3E 0FCD     1     JBS  _RD , 7 
       00A3F 1643     1     JMP ( $ + 4 ),
   473 00A40 040D C        	MOV	A,_RD
   474 00A41 126C C        	CALL	FLASH_MONTH
   475 00A42 1647 C        	JMP	$+5
   476 00A43 040D C        	MOV	A,_RD
   477            C      M 	CALL	#VGA_MONTH
                      2  M  LCALL  VGA_MONTH 
                      3  M  PAGE #( VGA_MONTH ),
       00A44 1E84     3     PAGE ( VGA_MONTH / 1024 ),
       00A45 1061     2     CALL ( VGA_MONTH % 1024 ),
                      3  M  PAGE #( $ ),
       00A46 1E82     3     PAGE ( $ / 1024 ),
   478            C        	
   479            C      M 	PAGE	#VGA_NUM1
       00A47 1E85     1     PAGE ( VGA_NUM1 / 1024 ),
   480 00A48 1810 C        	MOV	A,@NUM_BLANK
   481 00A49 1008 C        	CALL	VGA_NUM1
   482 00A4A 1810 C        	MOV	A,@NUM_BLANK
   483 00A4B 1008 C        	CALL	VGA_NUM1
   484 00A4C 18FF C        	MOV	A,@CH_END
   485 00A4D 1008 C        	CALL	VGA_NUM1
   486            C        	
   487            C        	;PAGE	#VGA_STR
   488 00A4E 1860 C        	MOV	A,@STYLE_CENTER
   489 00A4F 104B C        	CALL	VGA_STR
   490            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A50 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A51 088B     2     BC  _RB , 2 
   491            C      M 	MOV	_RC,@(EDIT_ADDR+5)
       00A52 1863     1     MOV A,@(( EDIT_ADDR + 5 ))
       00A53 004C     1     MOV  _RC ,A
   492            C      M 	ADDA	_RD,@(WD_SUNDAY)
       00A54 1817     1     MOV A,@( WD_SUNDAY )
       00A55 038D     1     ADD A, _RD 
   493 00A56 11BF C        	CALL	VGA_STRING
   494 00A57 18FF C        	MOV	A,@CH_END
   495 00A58 104B C        	CALL	VGA_STR
   496            C      M 	PAGE	#($)
       00A59 1E82     1     PAGE ( $ / 1024 ),
   497 00A5A 0012 C        	RET
   498            C        
   499 00A5B      C        FLASH_TIME:
   500 00A5B 1A7F C        	AND	A,@0X7F
   501 00A5C 0056 C        	MOV	GENE_A,A
   502            C      M 	CALL	#MATH_HTD
                      2  M  LCALL  MATH_HTD 
                      3  M  PAGE #( MATH_HTD ),
       00A5D 1E84     3     PAGE ( MATH_HTD / 1024 ),
       00A5E 1100     2     CALL ( MATH_HTD % 1024 ),
                      3  M  PAGE #( $ ),
       00A5F 1E82     3     PAGE ( $ / 1024 ),
   503 00A60 0060 C        	MOV	BANK0_TEMP0,A			; RESULT = A
   504 00A61 0720 C        	SWAPA	BANK0_TEMP0
   505 00A62 1A0F C        	AND	A,@(0X0F)
   506 00A63 1F80 C        	ADD	A,@(0X80)
   507            C      M 	PAGE	#VGA_NUM1
       00A64 1E85     1     PAGE ( VGA_NUM1 / 1024 ),
   508 00A65 1008 C        	CALL	VGA_NUM1
   509            C      M 	ANDA	BANK0_TEMP0,@(0X0F)
       00A66 180F     1     MOV A,@( 15 )
       00A67 02A0     1     AND A, BANK0_TEMP0 
   510 00A68 1F80 C        	ADD	A,@(0X80)
   511 00A69 1008 C        	CALL	VGA_NUM1
   512            C      M 	PAGE	#($)
       00A6A 1E82     1     PAGE ( $ / 1024 ),
   513 00A6B 0012 C        	RET
   514            C        
   515 00A6C      C        FLASH_MONTH:
   516 00A6C 1A7F C        	AND	A,@0X7F
   517 00A6D 0056 C        	MOV	GENE_A,A
   518            C      M 	CALL	#MATH_HTD
                      2  M  LCALL  MATH_HTD 
                      3  M  PAGE #( MATH_HTD ),
       00A6E 1E84     3     PAGE ( MATH_HTD / 1024 ),
       00A6F 1100     2     CALL ( MATH_HTD % 1024 ),
                      3  M  PAGE #( $ ),
       00A70 1E82     3     PAGE ( $ / 1024 ),
   519 00A71 005B C        	MOV	TEMP5,A				; RESULT = A
   520 00A72 071B C        	SWAPA	TEMP5
   521 00A73 1A0F C        	AND	A,@(0X0F)
   522            C      M 	JPNZ	$+2
       00A74 0E83     1     JBS  _STATUS , Z 
       00A75 1677     1     JMP ( $ + 2 ),
   523 00A76 1810 C        	MOV	A,@NUM_BLANK
   524 00A77 1F80 C        	ADD	A,@(0X80)
   525            C      M 	PAGE	#VGA_NUM1
       00A78 1E85     1     PAGE ( VGA_NUM1 / 1024 ),
   526 00A79 1008 C        	CALL	VGA_NUM1
   527            C      M 	ANDA	TEMP5,@(0X0F)
       00A7A 180F     1     MOV A,@( 15 )
       00A7B 029B     1     AND A, TEMP5 
   528 00A7C 1F80 C        	ADD	A,@(0X80)
   529 00A7D 1008 C        	CALL	VGA_NUM1
   530            C      M 	PAGE	#($)
       00A7E 1E82     1     PAGE ( $ / 1024 ),
   531 00A7F 0012 C        	RET
   532            C        
   533            C        /*****************************
   534            C        操作菜单显示对比度
   535            C        *****************************/
   536 00A80      C        DISP_MENU_LCD:
   537 00A80 0060 C        	MOV	BANK0_TEMP0,A
   538            C      M 	PAGE	#VGA_NUM2
       00A81 1E85     1     PAGE ( VGA_NUM2 / 1024 ),
   539 00A82 1860 C        	MOV	A,@STYLE_CENTER
   540 00A83 1024 C        	CALL	VGA_NUM2
   541 00A84 0420 C        	MOV	A,BANK0_TEMP0
   542 00A85 1024 C        	CALL	VGA_NUM2
   543 00A86 18FF C        	MOV	A,@CH_END
   544 00A87 1024 C        	CALL	VGA_NUM2
   545            C      M 	PAGE	#($)
       00A88 1E82     1     PAGE ( $ / 1024 ),
   546 00A89 0420 C        	MOV	A,BANK0_TEMP0
   547            C      M 	CALL	#LCD_CONTRAST_APPLY
                      2  M  LCALL  LCD_CONTRAST_APPLY 
                      3  M  PAGE #( LCD_CONTRAST_APPLY ),
       00A8A 1E80     3     PAGE ( LCD_CONTRAST_APPLY / 1024 ),
       00A8B 125C     2     CALL ( LCD_CONTRAST_APPLY % 1024 ),
                      3  M  PAGE #( $ ),
       00A8C 1E82     3     PAGE ( $ / 1024 ),
   548 00A8D 0012 C        	RET
   549            C        
   550            C        /*****************************
   551            C        操作菜单密码显示
   552            C        *****************************/
   553 00A8E      C        DISP_MENU_CODE:
   554            C        	;BANK	0
   555 00A8E 0060 C        	MOV	BANK0_TEMP0,A
   556            C      M 	JPZ	DISP_MENU_CODE_1
       00A8F 0C83     1     JBC  _STATUS , Z 
       00A90 1698     1     JMP  DISP_MENU_CODE_1 ,
   557            C        	;INC	_RC
   558            C      M 	MOV	BANK0_TEMP2,_RD
       00A91 040D     1     MOV A, _RD 
       00A92 0062     1     MOV  BANK0_TEMP2 ,A
   559            C      M 	ADDA	BANK0_TEMP0,@(EDIT_ADDR+6-1)
       00A93 1863     1     MOV A,@((( EDIT_ADDR + 6 )- 1 ))
       00A94 03A0     1     ADD A, BANK0_TEMP0 
   560 00A95 004C C        	MOV	_RC,A
   561            C      M 	MOV	_RD,BANK0_TEMP2
       00A96 0422     1     MOV A, BANK0_TEMP2 
       00A97 004D     1     MOV  _RD ,A
   562 00A98      C        DISP_MENU_CODE_1:
   563 00A98 1860 C        	MOV	A,@STYLE_CENTER
   564            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00A99 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00A9A 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00A9B 1E82     3     PAGE ( $ / 1024 ),
   565 00A9C 00E1 C        	CLR	BANK0_TEMP1
   566 00A9D      C        DISP_MENU_CODE_LOOP:
   567            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A9D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A9E 088B     2     BC  _RB , 2 
   568            C      M 	ADDA	BANK0_TEMP1,@(EDIT_ADDR+6)
       00A9F 1864     1     MOV A,@(( EDIT_ADDR + 6 ))
       00AA0 03A1     1     ADD A, BANK0_TEMP1 
   569 00AA1 004C C        	MOV	_RC,A
   570            C      M 	MOV	BANK0_TEMP2,_RD
       00AA2 040D     1     MOV A, _RD 
       00AA3 0062     1     MOV  BANK0_TEMP2 ,A
   571 00AA4 0561 C        	INC	BANK0_TEMP1
   572            C      M 	SUBA	BANK0_TEMP0,BANK0_TEMP1
       00AA5 0421     1     MOV A, BANK0_TEMP1 
       00AA6 0120     1     SUB A, BANK0_TEMP0 
   573            C      M 	JPNZ	$+2
       00AA7 0E83     1     JBS  _STATUS , Z 
       00AA8 16AA     1     JMP ( $ + 2 ),
   574            C      M 	SRAM	BANK0_TEMP2,7
       00AA9 0BE2     1     BS  BANK0_TEMP2 , 7 
   575 00AAA 0422 C        	MOV	A,BANK0_TEMP2
   576            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00AAB 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00AAC 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00AAD 1E82     3     PAGE ( $ / 1024 ),
   577            C      M 	SUBA	BANK0_TEMP1,@3
       00AAE 1803     1     MOV A,@( 3 )
       00AAF 0121     1     SUB A, BANK0_TEMP1 
   578            C      M 	JPNZ	DISP_MENU_CODE_LOOP
       00AB0 0E83     1     JBS  _STATUS , Z 
       00AB1 169D     1     JMP  DISP_MENU_CODE_LOOP ,
   579 00AB2 18FF C        	MOV	A,@CH_END
   580            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00AB3 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00AB4 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00AB5 1E82     3     PAGE ( $ / 1024 ),
   581 00AB6 0012 C        	RET
   582            C        
   583            C        
   584            C        
   585            C        ORG	0X0C00
   586            C        
   587 00C00      C        STCP_CHK:
   588            C      M 	BANK	0
       00C00 0984     1     BC  _RSR , 6 
       00C01 09C4     1     BC  _RSR , 7 
   589            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00C02 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00C03 088B     2     BC  _RB , 2 
   590            C      M 	MOV	_RC,@(TCP_ADDR+0)
       00C04 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       00C05 004C     1     MOV  _RC ,A
   591            C      M 	JPB	_RD,7,STCP_CHK_1
       00C06 0DCD     1     JBC  _RD , 7 
       00C07 1409     1     JMP  STCP_CHK_1 ,
   592            C        	;CALL	#AUDIO_SEND
   593 00C08 0012 C        	RET
   594 00C09      C        STCP_CHK_1:
   595            C      M 	MOV	_RC,@(TCP_ADDR+1)
       00C09 189A     1     MOV A,@(( TCP_ADDR + 1 ))
       00C0A 004C     1     MOV  _RC ,A
   596            C      M 	SUBA	_RD,@0X80
       00C0B 1880     1     MOV A,@( 128 )
       00C0C 010D     1     SUB A, _RD 
   597            C      M 	JPNC	STCP_INVALID			; 命令<0X80，无效命令
       00C0D 0E03     1     JBS  _STATUS , C 
       00C0E 1467     1     JMP  STCP_INVALID ,
   598 00C0F 0056 C        	MOV	TEMP0,A
   599 00C10 1D50 C        	SUB	A,@(0XD0-0X80)			; 命令>0XCE，无效命令
   600            C      M 	JPNC	STCP_INVALID
       00C11 0E03     1     JBS  _STATUS , C 
       00C12 1467     1     JMP  STCP_INVALID ,
   601 00C13 054C C        	INC	_RC
   602 00C14 0416 C        	MOV	A,TEMP0
   603 00C15 0020 C        	TBL
   604 00C16 146E C        	JMP	STCP_INFO			; 0X80
   605 00C17 14B7 C        	JMP	STCP_INIT_TIME			; 0X81
   606 00C18 14C7 C        	JMP	STCP_INIT_CALL			; 0X82
   607 00C19 14CD C        	JMP	STCP_INIT_MSG			; 0X83
   608 00C1A 14D3 C        	JMP	STCP_INIT_BOOK			; 0X84
   609 00C1B 14D6 C        	JMP	STCP_INIT_CODE			; 0X85
   610 00C1C 14E6 C        	JMP	STCP_INIT_LCALL			; 0X86
   611 00C1D 14FA C        	JMP	STCP_INIT_LCDCONTRAST		; 0X87
   612 00C1E 1507 C        	JMP	STCP_INIT_TIMEFORMAT		; 0X88
   613 00C1F 1508 C        	JMP	STCP_INIT_LANGUAGE		; 0X89
   614 00C20 150E C        	JMP	STCP_INIT_INVALID		; 0X8A
   615 00C21 150E C        	JMP	STCP_INIT_INVALID		; 0X8B
   616 00C22 150E C        	JMP	STCP_INIT_INVALID		; 0X8C
   617 00C23 150E C        	JMP	STCP_INIT_INVALID		; 0X8D
   618 00C24 150E C        	JMP	STCP_INIT_INVALID		; 0X8E
   619 00C25 150E C        	JMP	STCP_INIT_INVALID		; 0X8F
   620 00C26 150F C        	JMP	STCP_MENU_LANGUANGE		; 0X90
   621 00C27 152E C        	JMP	STCP_MENU_HOUR			; 0X91
   622 00C28 1530 C        	JMP	STCP_MENU_MINUTE		; 0X92
   623 00C29 1532 C        	JMP	STCP_MENU_MONTH			; 0X93
   624 00C2A 1534 C        	JMP	STCP_MENU_DAY			; 0X94
   625 00C2B 1536 C        	JMP	STCP_MENU_WEEK			; 0X95
   626 00C2C 1551 C        	JMP	STCP_MENU_LCDCONTRAST		; 0X96
   627 00C2D 156A C        	JMP	STCP_MENU_CODE1			; 0X97
   628 00C2E 156C C        	JMP	STCP_MENU_CODE2			; 0X98
   629 00C2F 156E C        	JMP	STCP_MENU_CODE3			; 0X99
   630 00C30 1580 C        	JMP	STCP_MENU_LCALL1		; 0X9A
   631 00C31 1582 C        	JMP	STCP_MENU_LCALL2		; 0X9B
   632 00C32 1584 C        	JMP	STCP_MENU_LCALL3		; 0X9C
   633 00C33 1586 C        	JMP	STCP_MENU_LCALL4		; 0X9D
   634 00C34 15C2 C        	JMP	STCP_EXTOP			; 0X9E
   635 00C35 1637 C        	JMP	STCP_BOOK			; 0X9F
   636 00C36 165B C        	JMP	STCP_CHANGE_NUM2		; 0XA0
   637 00C37 165B C        	JMP	STCP_CHANGE_NUM2		; 0XA1
   638 00C38 165B C        	JMP	STCP_CHANGE_NUM2		; 0XA2
   639 00C39 165B C        	JMP	STCP_CHANGE_NUM2		; 0XA3
   640 00C3A 165B C        	JMP	STCP_CHANGE_NUM2		; 0XA4
   641 00C3B 165B C        	JMP	STCP_CHANGE_NUM2		; 0XA5
   642 00C3C 165B C        	JMP	STCP_CHANGE_NUM2		; 0XA6
   643 00C3D 165B C        	JMP	STCP_CHANGE_NUM2		; 0XA7
   644 00C3E 165B C        	JMP	STCP_CHANGE_NUM2		; 0XA8
   645 00C3F 165B C        	JMP	STCP_CHANGE_NUM2		; 0XA9
   646 00C40 165B C        	JMP	STCP_CHANGE_NUM2		; 0XAA
   647 00C41 165B C        	JMP	STCP_CHANGE_NUM2		; 0XAB
   648 00C42 165B C        	JMP	STCP_CHANGE_NUM2		; 0XAC
   649 00C43 165B C        	JMP	STCP_CHANGE_NUM2		; 0XAD
   650 00C44 165B C        	JMP	STCP_CHANGE_NUM2		; 0XAE
   651 00C45 165B C        	JMP	STCP_CHANGE_NUM2		; 0XAF
   652 00C46 166E C        	JMP	STCP_CHANGE_STR			; 0XB0
   653 00C47 166E C        	JMP	STCP_CHANGE_STR			; 0XB1
   654 00C48 166E C        	JMP	STCP_CHANGE_STR			; 0XB2
   655 00C49 166E C        	JMP	STCP_CHANGE_STR			; 0XB3
   656 00C4A 166E C        	JMP	STCP_CHANGE_STR			; 0XB4
   657 00C4B 166E C        	JMP	STCP_CHANGE_STR			; 0XB5
   658 00C4C 166E C        	JMP	STCP_CHANGE_STR			; 0XB6
   659 00C4D 166E C        	JMP	STCP_CHANGE_STR			; 0XB7
   660 00C4E 166E C        	JMP	STCP_CHANGE_STR			; 0XB8
   661 00C4F 166E C        	JMP	STCP_CHANGE_STR			; 0XB9
   662 00C50 166E C        	JMP	STCP_CHANGE_STR			; 0XBA
   663 00C51 166E C        	JMP	STCP_CHANGE_STR			; 0XBB
   664 00C52 166E C        	JMP	STCP_CHANGE_STR			; 0XBC
   665 00C53 166E C        	JMP	STCP_CHANGE_STR			; 0XBD
   666 00C54 166E C        	JMP	STCP_CHANGE_STR			; 0XBE
   667 00C55 166E C        	JMP	STCP_CHANGE_STR			; 0XBF
   668 00C56 1681 C        	JMP	STCP_CHOICE_OGMX		; 0XC0
   669 00C57 1693 C        	JMP	STCP_REC_OGMX			; 0XC1
   670 00C58 1698 C        	JMP	STCP_STOPREC_OGMX		; 0XC2
   671 00C59 169A C        	JMP	STCP_PLAY_OGMX			; 0XC3
   672 00C5A 169D C        	JMP	STCP_STOPPLAY_OGMX		; 0XC4
   673 00C5B 16B3 C        	JMP	STCP_RECORD			; 0XC5
   674 00C5C 16C5 C        	JMP	STCP_STOPRECORD			; 0XC6
   675 00C5D 16C7 C        	JMP	STCP_PLAYMSG			; 0XC7
   676 00C5E 16DF C        	JMP	STCP_PAUSEMSG			; 0XC8
   677 00C5F 16E1 C        	JMP	STCP_STOPMSG			; 0XC9
   678 00C60 1700 C        	JMP	STCP_CALL			; 0XCA
   679 00C61 1727 C        	JMP	STCP_VOLUME			; 0XCB
   680 00C62 1740 C        	JMP	STCP_DELETE			; 0XCC
   681 00C63 174D C        	JMP	STCP_RING			; 0XCD
   682 00C64 1597 C        	JMP	STCP_MENU_RING			; 0XCE
   683 00C65 1588 C        	JMP	STCP_MENU_LCALL5		; 0XCF
   684 00C66 1755 C        	JMP	STCP_HOOK			; 0XD0
   685 00C67      C        STCP_INVALID:
   686            C        
   687 00C67      C        STCP_RET:
   688            C      M 	PAGE	#(0X1200)
       00C67 1E84     1     PAGE ( 4608 / 1024 ),
   689 00C68 131C C        	CALL	DEL_FINISHED
   690 00C69 120D C        	CALL	SER_BUF_CHK
   691            C      M 	PAGE	#CID_DECODE
       00C6A 1E81     1     PAGE ( CID_DECODE / 1024 ),
   692 00C6B 1371 C        	CALL	CID_DECODE
   693            C      M 	PAGE	#($)
       00C6C 1E83     1     PAGE ( $ / 1024 ),
   694 00C6D 1400 C        	JMP	STCP_CHK
   695            C        	;RET
   696            C        
   697            C        
   698 00C6E      C        STCP_INFO:			; 0X80
   699            C        	;INC	_RC
   700            C      M 	JPB	_RD,7,STCP_TEL_INFO
       00C6E 0DCD     1     JBC  _RD , 7 
       00C6F 1483     1     JMP  STCP_TEL_INFO ,
   701            C      M 	ANDA	_RD,@0X60
       00C70 1860     1     MOV A,@( 96 )
       00C71 028D     1     AND A, _RD 
   702 00C72 0056 C        	MOV	TEMP0,A
   703            C        	;SUBA	TEMP0,@0
   704 00C73 0416 C        	MOV	A,TEMP0
   705            C      M 	JPZ	STCP_INFO_NUM
       00C74 0C83     1     JBC  _STATUS , Z 
       00C75 14A3     1     JMP  STCP_INFO_NUM ,
   706            C      M 	SUBA	TEMP0,@0X20
       00C76 1820     1     MOV A,@( 32 )
       00C77 0116     1     SUB A, TEMP0 
   707            C      M 	JPZ	STCP_INFO_NAME
       00C78 0C83     1     JBC  _STATUS , Z 
       00C79 14A5     1     JMP  STCP_INFO_NAME ,
   708            C      M 	SUBA	TEMP0,@0X40
       00C7A 1840     1     MOV A,@( 64 )
       00C7B 0116     1     SUB A, TEMP0 
   709            C      M 	JPZ	STCP_INFO_TIME
       00C7C 0C83     1     JBC  _STATUS , Z 
       00C7D 14A7     1     JMP  STCP_INFO_TIME ,
   710            C      M 	SUBA	TEMP0,@0X60
       00C7E 1860     1     MOV A,@( 96 )
       00C7F 0116     1     SUB A, TEMP0 
   711            C      M 	JPZ	STCP_INFO_OGM
       00C80 0C83     1     JBC  _STATUS , Z 
       00C81 14A9     1     JMP  STCP_INFO_OGM ,
   712 00C82      C        STCP_INFO_RET:
   713            C        	;RET
   714 00C82 1467 C        	JMP	STCP_RET
   715 00C83      C        STCP_TEL_INFO:
   716            C      M 	MOV	BANK0_TEMP0,_RC
       00C83 040C     1     MOV A, _RC 
       00C84 0060     1     MOV  BANK0_TEMP0 ,A
   717            C      M 	CLRCIDRAM	@(CID_ADDR+1),@33,@0XFF
                      2  M  MOV  TEMP0 ,@(( CID_ADDR + 1 ))
       00C85 183D     2     MOV A,@(( CID_ADDR + 1 ))
       00C86 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 33 )
       00C87 1821     2     MOV A,@( 33 )
       00C88 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( 255 )
       00C89 18FF     2     MOV A,@( 255 )
       00C8A 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CLR_CIDRAM ),
                      3  M  LCALL  CLR_CIDRAM 
                      4  M  PAGE #( CLR_CIDRAM ),
       00C8B 1E84     4     PAGE ( CLR_CIDRAM / 1024 ),
       00C8C 1178     3     CALL ( CLR_CIDRAM % 1024 ),
                      4  M  PAGE #( $ ),
       00C8D 1E83     4     PAGE ( $ / 1024 ),
   718            C        	
   719 00C8E 183D C        	MOV	A,@(CID_ADDR+1)
   720 00C8F 1097 C        	CALL	TEL_INFO
   721 00C90 183E C        	MOV	A,@(CID_ADDR+2)
   722 00C91 1097 C        	CALL	TEL_INFO
   723 00C92 1847 C        	MOV	A,@(CID_ADDR+11)
   724 00C93 1097 C        	CALL	TEL_INFO
   725 00C94 1858 C        	MOV	A,@(CID_ADDR+28)
   726 00C95 1097 C        	CALL	TEL_INFO
   727 00C96 1482 C        	JMP	STCP_INFO_RET
   728            C        
   729 00C97      C        TEL_INFO:
   730 00C97 0061 C        	MOV	BANK0_TEMP1,A
   731            C      M 	MOV	_RC,BANK0_TEMP0
       00C98 0420     1     MOV A, BANK0_TEMP0 
       00C99 004C     1     MOV  _RC ,A
   732            C      M 	MOV	TEMP0,_RD
       00C9A 040D     1     MOV A, _RD 
       00C9B 0056     1     MOV  TEMP0 ,A
   733            C      M 	MOV	_RC,BANK0_TEMP1
       00C9C 0421     1     MOV A, BANK0_TEMP1 
       00C9D 004C     1     MOV  _RC ,A
   734            C      M 	MOV	_RD,TEMP0
       00C9E 0416     1     MOV A, TEMP0 
       00C9F 004D     1     MOV  _RD ,A
   735            C      M 	CRAM	_RD,7
       00CA0 09CD     1     BC  _RD , 7 
   736 00CA1 0560 C        	INC	BANK0_TEMP0
   737 00CA2 0012 C        	RET
   738            C        	
   739 00CA3      C        STCP_INFO_NUM:
   740 00CA3 183F C        	MOV	A,@(CID_ADDR+3)
   741 00CA4 14AB C        	JMP	STCP_INFO_1
   742 00CA5      C        STCP_INFO_NAME:
   743 00CA5 1848 C        	MOV	A,@(CID_ADDR+12)
   744 00CA6 14AB C        	JMP	STCP_INFO_1
   745 00CA7      C        STCP_INFO_TIME:
   746 00CA7 1859 C        	MOV	A,@(CID_ADDR+29)
   747 00CA8 14AB C        	JMP	STCP_INFO_1
   748 00CA9      C        STCP_INFO_OGM:
   749 00CA9 185D C        	MOV	A,@(CID_ADDR+33)
   750 00CAA 14AB C        	JMP	STCP_INFO_1
   751 00CAB      C        STCP_INFO_1:
   752 00CAB 0057 C        	MOV	TEMP1,A
   753            C      M 	MOV	TEMP0,_RC
       00CAC 040C     1     MOV A, _RC 
       00CAD 0056     1     MOV  TEMP0 ,A
   754 00CAE 0556 C        	INC	TEMP0
   755            C      M 	ANDA	_RD,@0X1F
       00CAF 181F     1     MOV A,@( 31 )
       00CB0 028D     1     AND A, _RD 
   756 00CB1 0397 C        	ADD	A,TEMP1
   757 00CB2 0058 C        	MOV	TEMP2,A
   758            C      M 	CALL	#COPY_CIDRAM
                      2  M  LCALL  COPY_CIDRAM 
                      3  M  PAGE #( COPY_CIDRAM ),
       00CB3 1E84     3     PAGE ( COPY_CIDRAM / 1024 ),
       00CB4 1164     2     CALL ( COPY_CIDRAM % 1024 ),
                      3  M  PAGE #( $ ),
       00CB5 1E83     3     PAGE ( $ / 1024 ),
   759            C        	;RET
   760 00CB6 1467 C        	JMP	STCP_RET
   761            C        
   762            C        
   763 00CB7      C        STCP_INIT_TIME:			; 0X81
   764 00CB7 00EA C        	CLR	SEC_REG
   765            C        	;INC	_RC
   766            C      M 	MOV	MONTH_REG,_RD
       00CB8 040D     1     MOV A, _RD 
       00CB9 0065     1     MOV  MONTH_REG ,A
   767 00CBA 054C C        	INC	_RC
   768            C      M 	MOV	DAY_REG,_RD
       00CBB 040D     1     MOV A, _RD 
       00CBC 0066     1     MOV  DAY_REG ,A
   769 00CBD 054C C        	INC	_RC
   770            C      M 	MOV	HOUR_REG,_RD
       00CBE 040D     1     MOV A, _RD 
       00CBF 0068     1     MOV  HOUR_REG ,A
   771 00CC0 054C C        	INC	_RC
   772            C      M 	MOV	MIN_REG,_RD
       00CC1 040D     1     MOV A, _RD 
       00CC2 0069     1     MOV  MIN_REG ,A
   773 00CC3 054C C        	INC	_RC
   774            C      M 	MOV	WEEK_REG,_RD
       00CC4 040D     1     MOV A, _RD 
       00CC5 0067     1     MOV  WEEK_REG ,A
   775            C        	;RET
   776 00CC6 1467 C        	JMP	STCP_RET
   777            C        
   778            C        
   779 00CC7      C        STCP_INIT_CALL:			; 0X82
   780            C        	;INC	_RC
   781            C      M 	MOV	NEW_CALL,_RD
       00CC7 040D     1     MOV A, _RD 
       00CC8 006C     1     MOV  NEW_CALL ,A
   782 00CC9 054C C        	INC	_RC
   783            C      M 	MOV	TOTAL_CALL,_RD
       00CCA 040D     1     MOV A, _RD 
       00CCB 006B     1     MOV  TOTAL_CALL ,A
   784            C        	;RET
   785 00CCC 1467 C        	JMP	STCP_RET
   786            C        
   787            C        
   788 00CCD      C        STCP_INIT_MSG:			; 0X83
   789            C        	;INC	_RC
   790            C      M 	MOV	NEW_MSG,_RD
       00CCD 040D     1     MOV A, _RD 
       00CCE 006E     1     MOV  NEW_MSG ,A
   791 00CCF 054C C        	INC	_RC
   792            C      M 	MOV	TOTAL_MSG,_RD
       00CD0 040D     1     MOV A, _RD 
       00CD1 006D     1     MOV  TOTAL_MSG ,A
   793            C        	;RET
   794 00CD2 1467 C        	JMP	STCP_RET
   795            C        
   796            C        
   797 00CD3      C        STCP_INIT_BOOK:			; 0X84
   798            C        	;INC	_RC
   799            C      M 	MOV	TOTAL_BOOK,_RD
       00CD3 040D     1     MOV A, _RD 
       00CD4 006F     1     MOV  TOTAL_BOOK ,A
   800            C        	;RET
   801 00CD5 1467 C        	JMP	STCP_RET
   802            C        
   803            C        
   804 00CD6      C        STCP_INIT_CODE:			; 0X85
   805            C      M 	BANK	1
       00CD6 0B84     1     BS  _RSR , 6 
       00CD7 09C4     1     BC  _RSR , 7 
   806            C        	;INC	_RC
   807            C      M 	AND	R1_CODE1,@0X0F
       00CD8 180F     1     MOV A,@( 15 )
       00CD9 02F5     1     AND  R1_CODE1 ,A
   808 00CDA 070D C        	SWAPA	_RD
   809 00CDB 1AF0 C        	AND	A,@0XF0
   810 00CDC 03F5 C        	ADD	R1_CODE1,A
   811 00CDD 054C C        	INC	_RC
   812 00CDE 070D C        	SWAPA	_RD
   813 00CDF 1AF0 C        	AND	A,@0XF0
   814 00CE0 0076 C        	MOV	R1_CODE23,A
   815 00CE1 054C C        	INC	_RC
   816            C      M 	ANDA	_RD,@0X0F
       00CE2 180F     1     MOV A,@( 15 )
       00CE3 028D     1     AND A, _RD 
   817 00CE4 03F6 C        	ADD	R1_CODE23,A
   818            C        	;RET
   819 00CE5 1467 C        	JMP	STCP_RET
   820            C        
   821            C        
   822 00CE6      C        STCP_INIT_LCALL:		; 0X86
   823            C        	;INC	_RC
   824 00CE6 070D C        	SWAPA	_RD
   825 00CE7 1AF0 C        	AND	A,@0XF0
   826 00CE8 0070 C        	MOV	LCALL12,A
   827 00CE9 054C C        	INC	_RC
   828            C      M 	ANDA	_RD,@0X0F
       00CEA 180F     1     MOV A,@( 15 )
       00CEB 028D     1     AND A, _RD 
   829 00CEC 03F0 C        	ADD	LCALL12,A
   830 00CED 054C C        	INC	_RC
   831 00CEE 070D C        	SWAPA	_RD
   832 00CEF 1AF0 C        	AND	A,@0XF0
   833 00CF0 0071 C        	MOV	LCALL34,A
   834 00CF1 054C C        	INC	_RC
   835            C      M 	ANDA	_RD,@0X0F
       00CF2 180F     1     MOV A,@( 15 )
       00CF3 028D     1     AND A, _RD 
   836 00CF4 03F1 C        	ADD	LCALL34,A
   837 00CF5 054C C        	INC	_RC
   838 00CF6 070D C        	SWAPA	_RD
   839 00CF7 190F C        	OR	A,@0X0F
   840 00CF8 0072 C        	MOV	LCALL5,A
   841            C        	;RET
   842 00CF9 1467 C        	JMP	STCP_RET
   843            C        
   844            C        
   845 00CFA      C        STCP_INIT_LCDCONTRAST:		; 0X87
   846            C      M 	BANK	1
       00CFA 0B84     1     BS  _RSR , 6 
       00CFB 09C4     1     BC  _RSR , 7 
   847            C        	;INC	_RC
   848            C      M 	AND	R1_LCD_CONTRAST,@0XF0
       00CFC 18F0     1     MOV A,@( 240 )
       00CFD 02F5     1     AND  R1_LCD_CONTRAST ,A
   849            C      M 	ANDA	_RD,@0X0F
       00CFE 180F     1     MOV A,@( 15 )
       00CFF 028D     1     AND A, _RD 
   850 00D00 03F5 C        	ADD	R1_LCD_CONTRAST,A
   851            C      M 	ANDA	R1_LCD_CONTRAST,@0X0F
       00D01 180F     1     MOV A,@( 15 )
       00D02 02B5     1     AND A, R1_LCD_CONTRAST 
   852            C      M 	CALL	#LCD_CONTRAST_APPLY
                      2  M  LCALL  LCD_CONTRAST_APPLY 
                      3  M  PAGE #( LCD_CONTRAST_APPLY ),
       00D03 1E80     3     PAGE ( LCD_CONTRAST_APPLY / 1024 ),
       00D04 125C     2     CALL ( LCD_CONTRAST_APPLY % 1024 ),
                      3  M  PAGE #( $ ),
       00D05 1E83     3     PAGE ( $ / 1024 ),
   853            C        	;RET
   854 00D06 1467 C        	JMP	STCP_RET
   855            C        
   856            C        
   857 00D07      C        STCP_INIT_TIMEFORMAT:		; 0X88
   858            C        	;BANK	1
   859            C        	;CRAM	R1_SYS_FG,TIMEFORMAT
   860            C        	;MOV	A,_RD
   861            C        	;JPZ	STCP_RET
   862            C        	;SRAM	R1_SYS_FG,TIMEFORMAT
   863 00D07 1467 C        	JMP	STCP_RET
   864            C        
   865            C        
   866 00D08      C        STCP_INIT_LANGUAGE:		; 0X89
   867            C      M 	CRAM	SYS_FG,LANGUAGE
       00D08 081E     1     BC  SYS_FG , LANGUAGE 
   868 00D09 040D C        	MOV	A,_RD
   869            C      M 	JPZ	$+2
       00D0A 0C83     1     JBC  _STATUS , Z 
       00D0B 150D     1     JMP ( $ + 2 ),
   870            C      M 	SRAM	SYS_FG,LANGUAGE
       00D0C 0A1E     1     BS  SYS_FG , LANGUAGE 
   871            C        	;RET
   872 00D0D 1467 C        	JMP	STCP_RET
   873            C        
   874            C        
   875 00D0E      C        STCP_INIT_INVALID:		; 0X8A/0X8B/0X8C/0X8D/0X8E/0X8F
   876            C        	;RET
   877 00D0E 1467 C        	JMP	STCP_RET
   878            C        
   879            C        
   880 00D0F      C        STCP_MENU_LANGUANGE:		; 0X90
   881            C      M 	MOV	MENU_STATE,@1
       00D0F 1801     1     MOV A,@( 1 )
       00D10 0079     1     MOV  MENU_STATE ,A
   882            C        	
   883            C      M 	MOV	BANK0_TEMP0,@0X80
       00D11 1880     1     MOV A,@( 128 )
       00D12 0060     1     MOV  BANK0_TEMP0 ,A
   884 00D13 00E1 C        	CLR	BANK0_TEMP1
   885 00D14 040D C        	MOV	A,_RD
   886            C      M 	JPZ	$+4
       00D15 0C83     1     JBC  _STATUS , Z 
       00D16 151A     1     JMP ( $ + 4 ),
   887 00D17 00E0 C        	CLR	BANK0_TEMP0
   888            C      M 	MOV	BANK0_TEMP1,@0X80
       00D18 1880     1     MOV A,@( 128 )
       00D19 0061     1     MOV  BANK0_TEMP1 ,A
   889            C        	
   890            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00D1A 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00D1B 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00D1C 1E83     3     PAGE ( $ / 1024 ),
   891            C        	
   892            C      M 	PAGE	#(VGA_STR)
       00D1D 1E85     1     PAGE ( VGA_STR / 1024 ),
   893 00D1E 1820 C        	MOV	A,@(STYLE_LEFT)
   894 00D1F 104B C        	CALL	VGA_STR
   895            C      M 	ADDA	BANK0_TEMP0,@(WD_ENGLISH)
       00D20 1820     1     MOV A,@( WD_ENGLISH )
       00D21 03A0     1     ADD A, BANK0_TEMP0 
   896 00D22 11BF C        	CALL	VGA_STRING
   897 00D23 18FF C        	MOV	A,@CH_END
   898 00D24 104B C        	CALL	VGA_STR
   899            C        	
   900 00D25 1840 C        	MOV	A,@(STYLE_RIGHT)
   901 00D26 104B C        	CALL	VGA_STR
   902            C      M 	ADDA	BANK0_TEMP1,@(WD_GERMAN)
       00D27 1821     1     MOV A,@( WD_GERMAN )
       00D28 03A1     1     ADD A, BANK0_TEMP1 
   903 00D29 11BF C        	CALL	VGA_STRING
   904 00D2A 18FF C        	MOV	A,@CH_END
   905 00D2B 104B C        	CALL	VGA_STR
   906            C      M 	PAGE	#($)
       00D2C 1E83     1     PAGE ( $ / 1024 ),
   907            C        	;RET
   908 00D2D 1467 C        	JMP	STCP_RET
   909            C        
   910            C        
   911 00D2E      C        STCP_MENU_HOUR:			; 0X91
   912 00D2E 1800 C        	MOV	A,@0
   913 00D2F 1537 C        	JMP	STCP_MENU_TIME
   914 00D30      C        STCP_MENU_MINUTE:		; 0X92
   915 00D30 1801 C        	MOV	A,@1
   916 00D31 1537 C        	JMP	STCP_MENU_TIME
   917 00D32      C        STCP_MENU_MONTH:		; 0X93
   918 00D32 1802 C        	MOV	A,@2
   919 00D33 1537 C        	JMP	STCP_MENU_TIME
   920 00D34      C        STCP_MENU_DAY:			; 0X94
   921 00D34 1803 C        	MOV	A,@3
   922 00D35 1537 C        	JMP	STCP_MENU_TIME
   923 00D36      C        STCP_MENU_WEEK:			; 0X95
   924 00D36 1804 C        	MOV	A,@4
   925            C        	;JMP	STCP_MENU_TIME
   926 00D37      C        STCP_MENU_TIME:
   927 00D37 0060 C        	MOV	BANK0_TEMP0,A
   928            C      M 	MOV	BANK0_TEMP1,_RC
       00D38 040C     1     MOV A, _RC 
       00D39 0061     1     MOV  BANK0_TEMP1 ,A
   929 00D3A 1802 C        	MOV	A,@2
   930            C      M 	CALL	#MENU_CHK
                      2  M  LCALL  MENU_CHK 
                      3  M  PAGE #( MENU_CHK ),
       00D3B 1E82     3     PAGE ( MENU_CHK / 1024 ),
       00D3C 1015     2     CALL ( MENU_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       00D3D 1E83     3     PAGE ( $ / 1024 ),
   931            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00D3E 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00D3F 088B     2     BC  _RB , 2 
   932            C      M 	MOV	_RC,BANK0_TEMP1
       00D40 0421     1     MOV A, BANK0_TEMP1 
       00D41 004C     1     MOV  _RC ,A
   933 00D42 0420 C        	MOV	A,BANK0_TEMP0
   934            C      M 	CALL	#MENU_TIME
                      2  M  LCALL  MENU_TIME 
                      3  M  PAGE #( MENU_TIME ),
       00D43 1E82     3     PAGE ( MENU_TIME / 1024 ),
       00D44 11F8     2     CALL ( MENU_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00D45 1E83     3     PAGE ( $ / 1024 ),
   935            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00D46 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00D47 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00D48 1E83     3     PAGE ( $ / 1024 ),
   936            C      M 	CALL	#DISP_MENU_TIME
                      2  M  LCALL  DISP_MENU_TIME 
                      3  M  PAGE #( DISP_MENU_TIME ),
       00D49 1E82     3     PAGE ( DISP_MENU_TIME / 1024 ),
       00D4A 120F     2     CALL ( DISP_MENU_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00D4B 1E83     3     PAGE ( $ / 1024 ),
   937 00D4C 1830 C        	MOV	A,@0X30
   938            C      M 	CALL	#VGA_STAMP
                      2  M  LCALL  VGA_STAMP 
                      3  M  PAGE #( VGA_STAMP ),
       00D4D 1E85     3     PAGE ( VGA_STAMP / 1024 ),
       00D4E 1000     2     CALL ( VGA_STAMP % 1024 ),
                      3  M  PAGE #( $ ),
       00D4F 1E83     3     PAGE ( $ / 1024 ),
   939            C        	;RET
   940 00D50 1467 C        	JMP	STCP_RET
   941            C        
   942            C        
   943 00D51      C        STCP_MENU_LCDCONTRAST:		; 0X96
   944            C      M 	MOV	MENU_STATE,@3
       00D51 1803     1     MOV A,@( 3 )
       00D52 0079     1     MOV  MENU_STATE ,A
   945            C      M 	MOV	BANK0_TEMP0,_RD
       00D53 040D     1     MOV A, _RD 
       00D54 0060     1     MOV  BANK0_TEMP0 ,A
   946            C      M 	CALL	#LCD_CONTRAST_APPLY
                      2  M  LCALL  LCD_CONTRAST_APPLY 
                      3  M  PAGE #( LCD_CONTRAST_APPLY ),
       00D55 1E80     3     PAGE ( LCD_CONTRAST_APPLY / 1024 ),
       00D56 125C     2     CALL ( LCD_CONTRAST_APPLY % 1024 ),
                      3  M  PAGE #( $ ),
       00D57 1E83     3     PAGE ( $ / 1024 ),
   947            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00D58 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00D59 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00D5A 1E83     3     PAGE ( $ / 1024 ),
   948            C        	
   949            C      M 	PAGE	#(VGA_STR)
       00D5B 1E85     1     PAGE ( VGA_STR / 1024 ),
   950 00D5C 1860 C        	MOV	A,@(STYLE_CENTER)
   951 00D5D 1024 C        	CALL	VGA_NUM2
   952 00D5E 0420 C        	MOV	A,BANK0_TEMP0
   953 00D5F 1024 C        	CALL	VGA_NUM2
   954 00D60 18FF C        	MOV	A,@CH_END
   955 00D61 1024 C        	CALL	VGA_NUM2
   956            C        	
   957 00D62 1860 C        	MOV	A,@(STYLE_CENTER)
   958 00D63 104B C        	CALL	VGA_STR
   959 00D64 1810 C        	MOV	A,@(WD_LCD_CONTRAST)
   960 00D65 11BF C        	CALL	VGA_STRING
   961 00D66 18FF C        	MOV	A,@CH_END
   962 00D67 104B C        	CALL	VGA_STR
   963            C        	
   964            C      M 	PAGE	#($)
       00D68 1E83     1     PAGE ( $ / 1024 ),
   965            C        	
   966            C        	;RET
   967 00D69 1467 C        	JMP	STCP_RET
   968            C        
   969            C        
   970 00D6A      C        STCP_MENU_CODE1:		; 0X97
   971 00D6A 1801 C        	MOV	A,@1
   972 00D6B 1570 C        	JMP	STCP_MENU_CODE
   973 00D6C      C        STCP_MENU_CODE2:		; 0X98
   974 00D6C 1802 C        	MOV	A,@2
   975 00D6D 1570 C        	JMP	STCP_MENU_CODE
   976 00D6E      C        STCP_MENU_CODE3:		; 0X99
   977 00D6E 1803 C        	MOV	A,@3
   978 00D6F 1570 C        	JMP	STCP_MENU_CODE
   979 00D70      C        STCP_MENU_CODE:
   980 00D70 0060 C        	MOV	BANK0_TEMP0,A
   981            C      M 	MOV	BANK0_TEMP1,_RC
       00D71 040C     1     MOV A, _RC 
       00D72 0061     1     MOV  BANK0_TEMP1 ,A
   982 00D73 1804 C        	MOV	A,@4
   983            C      M 	CALL	#MENU_CHK
                      2  M  LCALL  MENU_CHK 
                      3  M  PAGE #( MENU_CHK ),
       00D74 1E82     3     PAGE ( MENU_CHK / 1024 ),
       00D75 1015     2     CALL ( MENU_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       00D76 1E83     3     PAGE ( $ / 1024 ),
   984            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00D77 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00D78 088B     2     BC  _RB , 2 
   985            C      M 	MOV	_RC,BANK0_TEMP1
       00D79 0421     1     MOV A, BANK0_TEMP1 
       00D7A 004C     1     MOV  _RC ,A
   986 00D7B 0420 C        	MOV	A,BANK0_TEMP0
   987            C      M 	CALL	#DISP_MENU_CODE
                      2  M  LCALL  DISP_MENU_CODE 
                      3  M  PAGE #( DISP_MENU_CODE ),
       00D7C 1E82     3     PAGE ( DISP_MENU_CODE / 1024 ),
       00D7D 128E     2     CALL ( DISP_MENU_CODE % 1024 ),
                      3  M  PAGE #( $ ),
       00D7E 1E83     3     PAGE ( $ / 1024 ),
   988            C        	;RET
   989 00D7F 1467 C        	JMP	STCP_RET
   990            C        
   991            C        
   992 00D80      C        STCP_MENU_LCALL1:		; 0X9A
   993 00D80 1801 C        	MOV	A,@1
   994 00D81 1589 C        	JMP	STCP_MENU_LCALL
   995 00D82      C        STCP_MENU_LCALL2:		; 0X9B
   996 00D82 1802 C        	MOV	A,@2
   997 00D83 1589 C        	JMP	STCP_MENU_LCALL
   998 00D84      C        STCP_MENU_LCALL3:		; 0X9C
   999 00D84 1803 C        	MOV	A,@3
  1000 00D85 1589 C        	JMP	STCP_MENU_LCALL
  1001 00D86      C        STCP_MENU_LCALL4:		; 0X9D
  1002 00D86 1804 C        	MOV	A,@4
  1003 00D87 1589 C        	JMP	STCP_MENU_LCALL
  1004 00D88      C        STCP_MENU_LCALL5:
  1005 00D88 1805 C        	MOV	A,@5
  1006 00D89      C        STCP_MENU_LCALL:
  1007 00D89 0060 C        	MOV	BANK0_TEMP0,A
  1008            C      M 	MOV	BANK0_TEMP1,_RC
       00D8A 040C     1     MOV A, _RC 
       00D8B 0061     1     MOV  BANK0_TEMP1 ,A
  1009 00D8C 1805 C        	MOV	A,@5
  1010            C      M 	CALL	#MENU_CHK
                      2  M  LCALL  MENU_CHK 
                      3  M  PAGE #( MENU_CHK ),
       00D8D 1E82     3     PAGE ( MENU_CHK / 1024 ),
       00D8E 1015     2     CALL ( MENU_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       00D8F 1E83     3     PAGE ( $ / 1024 ),
  1011            C      M 	MOV	_RC,BANK0_TEMP1
       00D90 0421     1     MOV A, BANK0_TEMP1 
       00D91 004C     1     MOV  _RC ,A
  1012 00D92 0420 C        	MOV	A,BANK0_TEMP0
  1013            C      M 	CALL	#EDIT_NUM2
                      2  M  LCALL  EDIT_NUM2 
                      3  M  PAGE #( EDIT_NUM2 ),
       00D93 1E82     3     PAGE ( EDIT_NUM2 / 1024 ),
       00D94 10FE     2     CALL ( EDIT_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00D95 1E83     3     PAGE ( $ / 1024 ),
  1014            C        	;RET
  1015 00D96 1467 C        	JMP	STCP_RET
  1016            C        
  1017 00D97      C        STCP_MENU_RING:
  1018            C      M 	MOV	MENU_STATE,@6
       00D97 1806     1     MOV A,@( 6 )
       00D98 0079     1     MOV  MENU_STATE ,A
  1019            C      M 	MOV	BANK0_TEMP0,_RD
       00D99 040D     1     MOV A, _RD 
       00D9A 0060     1     MOV  BANK0_TEMP0 ,A
  1020            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00D9B 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00D9C 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00D9D 1E83     3     PAGE ( $ / 1024 ),
  1021            C        	
  1022 00D9E 1860 C        	MOV	A,@(STYLE_CENTER)
  1023            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00D9F 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00DA0 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00DA1 1E83     3     PAGE ( $ / 1024 ),
  1024            C      M 	SUBA	BANK0_TEMP0,@2
       00DA2 1802     1     MOV A,@( 2 )
       00DA3 0120     1     SUB A, BANK0_TEMP0 
  1025            C      M 	JPC	STCP_MENU_RING_1
       00DA4 0C03     1     JBC  _STATUS , C 
       00DA5 15AC     1     JMP  STCP_MENU_RING_1 ,
  1026 00DA6 1812 C        	MOV	A,@NUM_EX2
  1027            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00DA7 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00DA8 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00DA9 1E83     3     PAGE ( $ / 1024 ),
  1028 00DAA 1805 C        	MOV	A,@NUM_5
  1029 00DAB 15AE C        	JMP	STCP_MENU_RING_2
  1030 00DAC      C        STCP_MENU_RING_1:
  1031            C      M 	ANDA	BANK0_TEMP0,@(0X0F)
       00DAC 180F     1     MOV A,@( 15 )
       00DAD 02A0     1     AND A, BANK0_TEMP0 
  1032 00DAE      C        STCP_MENU_RING_2:
  1033            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00DAE 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00DAF 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00DB0 1E83     3     PAGE ( $ / 1024 ),
  1034 00DB1 18FF C        	MOV	A,@CH_END
  1035            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00DB2 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00DB3 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00DB4 1E83     3     PAGE ( $ / 1024 ),
  1036            C        	
  1037 00DB5 1860 C        	MOV	A,@(STYLE_CENTER)
  1038            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00DB6 1E85     3     PAGE ( VGA_STR / 1024 ),
       00DB7 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00DB8 1E83     3     PAGE ( $ / 1024 ),
  1039 00DB9 1811 C        	MOV	A,@(WD_SET_RING)
  1040            C      M 	CALL	#VGA_STRING
                      2  M  LCALL  VGA_STRING 
                      3  M  PAGE #( VGA_STRING ),
       00DBA 1E85     3     PAGE ( VGA_STRING / 1024 ),
       00DBB 11BF     2     CALL ( VGA_STRING % 1024 ),
                      3  M  PAGE #( $ ),
       00DBC 1E83     3     PAGE ( $ / 1024 ),
  1041 00DBD 18FF C        	MOV	A,@CH_END
  1042            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00DBE 1E85     3     PAGE ( VGA_STR / 1024 ),
       00DBF 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00DC0 1E83     3     PAGE ( $ / 1024 ),
  1043            C        	
  1044            C        	
  1045            C        	;RET
  1046 00DC1 1467 C        	JMP	STCP_RET
  1047            C        	
  1048            C        
  1049            C        
  1050 00DC2      C        STCP_EXTOP:			; 0X9E
  1051            C      M 	SUBA	_RD,@7
       00DC2 1807     1     MOV A,@( 7 )
       00DC3 010D     1     SUB A, _RD 
  1052            C      M 	JPC	STCP_INVALID
       00DC4 0C03     1     JBC  _STATUS , C 
       00DC5 1467     1     JMP  STCP_INVALID ,
  1053 00DC6 040D C        	MOV	A,_RD
  1054 00DC7 0020 C        	TBL
  1055 00DC8 15CF C        	JMP	STCP_EXT_EDITBOOK
  1056 00DC9 15D4 C        	JMP	STCP_EXT_SEARCHBOOK
  1057 00DCA 15ED C        	JMP	STCP_EXT_COPYBOOK
  1058 00DCB 15FF C        	JMP	STCP_EXT_DIAL
  1059 00DCC 161A C        	JMP	STCP_EXT_LDIAL
  1060 00DCD 1622 C        	JMP	STCP_EXT_REMOTE
  1061 00DCE 162E C        	JMP	STCP_EXT_RETURN
  1062 00DCF      C        STCP_EXT_EDITBOOK:
  1063            C      M 	MOV	BANK0_TEMP0,@(WD_EDIT+0X80)
       00DCF 18A2     1     MOV A,@(( WD_EDIT + 128 ))
       00DD0 0060     1     MOV  BANK0_TEMP0 ,A
  1064            C      M 	MOV	BANK0_TEMP1,@(WD_SEARCH)
       00DD1 1823     1     MOV A,@( WD_SEARCH )
       00DD2 0061     1     MOV  BANK0_TEMP1 ,A
  1065 00DD3 15D8 C        	JMP	STCP_EXT_EDITSEARCH
  1066 00DD4      C        STCP_EXT_SEARCHBOOK:
  1067            C      M 	MOV	BANK0_TEMP0,@(WD_EDIT)
       00DD4 1822     1     MOV A,@( WD_EDIT )
       00DD5 0060     1     MOV  BANK0_TEMP0 ,A
  1068            C      M 	MOV	BANK0_TEMP1,@(WD_SEARCH+0X80)
       00DD6 18A3     1     MOV A,@(( WD_SEARCH + 128 ))
       00DD7 0061     1     MOV  BANK0_TEMP1 ,A
  1069 00DD8      C        STCP_EXT_EDITSEARCH:
  1070            C      M 	CALL	#CLR_EDIT
                      2  M  LCALL  CLR_EDIT 
                      3  M  PAGE #( CLR_EDIT ),
       00DD8 1E82     3     PAGE ( CLR_EDIT / 1024 ),
       00DD9 10D3     2     CALL ( CLR_EDIT % 1024 ),
                      3  M  PAGE #( $ ),
       00DDA 1E83     3     PAGE ( $ / 1024 ),
  1071            C        	
  1072            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00DDB 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00DDC 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00DDD 1E83     3     PAGE ( $ / 1024 ),
  1073            C      M 	PAGE	#(VGA_STR)
       00DDE 1E85     1     PAGE ( VGA_STR / 1024 ),
  1074 00DDF 1820 C        	MOV	A,@(STYLE_LEFT)
  1075 00DE0 104B C        	CALL	VGA_STR
  1076 00DE1 0420 C        	MOV	A,BANK0_TEMP0
  1077 00DE2 11BF C        	CALL	VGA_STRING
  1078 00DE3 18FF C        	MOV	A,@CH_END
  1079 00DE4 104B C        	CALL	VGA_STR
  1080            C        	
  1081 00DE5 1840 C        	MOV	A,@(STYLE_RIGHT)
  1082 00DE6 104B C        	CALL	VGA_STR
  1083 00DE7 0421 C        	MOV	A,BANK0_TEMP1
  1084 00DE8 11BF C        	CALL	VGA_STRING
  1085 00DE9 18FF C        	MOV	A,@CH_END
  1086 00DEA 104B C        	CALL	VGA_STR
  1087            C      M 	PAGE	#($)
       00DEB 1E83     1     PAGE ( $ / 1024 ),
  1088            C        	
  1089            C        	;RET
  1090 00DEC 1467 C        	JMP	STCP_RET
  1091 00DED      C        STCP_EXT_COPYBOOK:
  1092            C      M 	CALL	#CLR_EDIT
                      2  M  LCALL  CLR_EDIT 
                      3  M  PAGE #( CLR_EDIT ),
       00DED 1E82     3     PAGE ( CLR_EDIT / 1024 ),
       00DEE 10D3     2     CALL ( CLR_EDIT % 1024 ),
                      3  M  PAGE #( $ ),
       00DEF 1E83     3     PAGE ( $ / 1024 ),
  1093            C      M 	CALL	#INIT_EDIT_NUM2
                      2  M  LCALL  INIT_EDIT_NUM2 
                      3  M  PAGE #( INIT_EDIT_NUM2 ),
       00DF0 1E82     3     PAGE ( INIT_EDIT_NUM2 / 1024 ),
       00DF1 10AA     2     CALL ( INIT_EDIT_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00DF2 1E83     3     PAGE ( $ / 1024 ),
  1094            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00DF3 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00DF4 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00DF5 1E83     3     PAGE ( $ / 1024 ),
  1095            C        	
  1096            C      M 	PAGE	#(VGA_STR)
       00DF6 1E85     1     PAGE ( VGA_STR / 1024 ),
  1097 00DF7 1860 C        	MOV	A,@(STYLE_CENTER)
  1098 00DF8 104B C        	CALL	VGA_STR
  1099 00DF9 1827 C        	MOV	A,@(WD_COPIED_INTO_BOOK)
  1100 00DFA 11BF C        	CALL	VGA_STRING
  1101 00DFB 18FF C        	MOV	A,@CH_END
  1102 00DFC 104B C        	CALL	VGA_STR
  1103            C      M 	PAGE	#($)
       00DFD 1E83     1     PAGE ( $ / 1024 ),
  1104            C        	;RET
  1105 00DFE 1467 C        	JMP	STCP_RET
  1106 00DFF      C        STCP_EXT_DIAL:
  1107            C      M 	CALL	#INIT_DIAL
                      2  M  LCALL  INIT_DIAL 
                      3  M  PAGE #( INIT_DIAL ),
       00DFF 1E84     3     PAGE ( INIT_DIAL / 1024 ),
       00E00 130F     2     CALL ( INIT_DIAL % 1024 ),
                      3  M  PAGE #( $ ),
       00E01 1E83     3     PAGE ( $ / 1024 ),
  1108 00E02      C        STCP_EXT_DIAL_1:
  1109 00E02 00E0 C        	CLR	BANK0_TEMP0
  1110 00E03      C        STCP_EXT_DIAL_LOOP:
  1111            C      M 	CLRC
       00E03 0803     1     BC  _STATUS , C 
  1112 00E04 0620 C        	RRCA	BANK0_TEMP0
  1113 00E05 1F3F C        	ADD	A,@(CID_ADDR+3)
  1114 00E06 004C C        	MOV	_RC,A
  1115            C      M 	JPB	BANK0_TEMP0,0,$+3
       00E07 0C20     1     JBC  BANK0_TEMP0 , 0 
       00E08 160B     1     JMP ( $ + 3 ),
  1116 00E09 070D C        	SWAPA	_RD
  1117 00E0A 160C C        	JMP	$+2
  1118 00E0B 040D C        	MOV	A,_RD
  1119 00E0C 1A0F C        	AND	A,@0X0F
  1120            C      M 	CALL	#STORE_DIALNUM
                      2  M  LCALL  STORE_DIALNUM 
                      3  M  PAGE #( STORE_DIALNUM ),
       00E0D 1E84     3     PAGE ( STORE_DIALNUM / 1024 ),
       00E0E 12E3     2     CALL ( STORE_DIALNUM % 1024 ),
                      3  M  PAGE #( $ ),
       00E0F 1E83     3     PAGE ( $ / 1024 ),
  1121 00E10 0560 C        	INC	BANK0_TEMP0
  1122            C      M 	SUBA	BANK0_TEMP0,@16
       00E11 1810     1     MOV A,@( 16 )
       00E12 0120     1     SUB A, BANK0_TEMP0 
  1123            C      M 	JPNZ	STCP_EXT_DIAL_LOOP
       00E13 0E83     1     JBS  _STATUS , Z 
       00E14 1603     1     JMP  STCP_EXT_DIAL_LOOP ,
  1124 00E15 18FF C        	MOV	A,@CH_END
  1125            C      M 	CALL	#STORE_DIALNUM
                      2  M  LCALL  STORE_DIALNUM 
                      3  M  PAGE #( STORE_DIALNUM ),
       00E16 1E84     3     PAGE ( STORE_DIALNUM / 1024 ),
       00E17 12E3     2     CALL ( STORE_DIALNUM % 1024 ),
                      3  M  PAGE #( $ ),
       00E18 1E83     3     PAGE ( $ / 1024 ),
  1126            C        	;RET
  1127 00E19 1467 C        	JMP	STCP_RET
  1128 00E1A      C        STCP_EXT_LDIAL:
  1129            C      M 	CALL	#INIT_DIAL
                      2  M  LCALL  INIT_DIAL 
                      3  M  PAGE #( INIT_DIAL ),
       00E1A 1E84     3     PAGE ( INIT_DIAL / 1024 ),
       00E1B 130F     2     CALL ( INIT_DIAL % 1024 ),
                      3  M  PAGE #( $ ),
       00E1C 1E83     3     PAGE ( $ / 1024 ),
  1130            C        	;SWAPA	LCALL12
  1131            C        	;AND	A,@0X0F
  1132            C        	;MOV	TEMP0,A
  1133            C        	;SUB	A,@9
  1134            C        	;JPNC	$+5
  1135            C        	;MOV	A,TEMP0
  1136            C        	;CALL	#STORE_DIALNUM
  1137            C        	;ANDA	LCALL12,@0X0F
  1138            C        	;MOV	TEMP0,A
  1139            C        	;SUB	A,@9
  1140            C        	;JPNC	$+5
  1141            C        	;MOV	A,TEMP0
  1142            C        	;CALL	#STORE_DIALNUM
  1143            C        	;SWAPA	LCALL34
  1144            C        	;AND	A,@0X0F
  1145            C        	;MOV	TEMP0,A
  1146            C        	;SUB	A,@9
  1147            C        	;JPNC	$+5
  1148            C        	;MOV	A,TEMP0
  1149            C        	;CALL	#STORE_DIALNUM
  1150            C        	;ANDA	LCALL34,@0X0F
  1151            C        	;MOV	TEMP0,A
  1152            C        	;SUB	A,@9
  1153            C        	;JPNC	$+5
  1154            C        	;MOV	A,TEMP0
  1155            C        	;CALL	#STORE_DIALNUM
  1156            C        	;SWAPA	LCALL5
  1157            C        	;AND	A,@0X0F
  1158            C        	;MOV	TEMP0,A
  1159            C        	;SUB	A,@9
  1160            C        	;JPNC	$+5
  1161            C        	;MOV	A,TEMP0
  1162            C        	;CALL	#STORE_DIALNUM
  1163 00E1D 1800 C        	MOV	A,@0
  1164            C      M 	CALL	#STORE_DIALNUM
                      2  M  LCALL  STORE_DIALNUM 
                      3  M  PAGE #( STORE_DIALNUM ),
       00E1E 1E84     3     PAGE ( STORE_DIALNUM / 1024 ),
       00E1F 12E3     2     CALL ( STORE_DIALNUM % 1024 ),
                      3  M  PAGE #( $ ),
       00E20 1E83     3     PAGE ( $ / 1024 ),
  1165 00E21 1602 C        	JMP	STCP_EXT_DIAL_1
  1166 00E22      C        STCP_EXT_REMOTE:
  1167            C        	;SRAM	EVENT,1				; 不允许电话线检测
  1168            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00E22 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00E23 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00E24 1E83     3     PAGE ( $ / 1024 ),
  1169            C        	
  1170            C      M 	PAGE	#(VGA_STR)
       00E25 1E85     1     PAGE ( VGA_STR / 1024 ),
  1171 00E26 1860 C        	MOV	A,@(STYLE_CENTER)
  1172 00E27 104B C        	CALL	VGA_STR
  1173 00E28 1816 C        	MOV	A,@(WD_IN_REMOTE)
  1174 00E29 11BF C        	CALL	VGA_STRING
  1175 00E2A 18FF C        	MOV	A,@CH_END
  1176 00E2B 104B C        	CALL	VGA_STR
  1177            C      M 	PAGE	#($)
       00E2C 1E83     1     PAGE ( $ / 1024 ),
  1178            C        	;RET
  1179 00E2D 1467 C        	JMP	STCP_RET
  1180            C        
  1181 00E2E      C        STCP_EXT_RETURN:
  1182            C        ;	JPNB	EVENT,TEST,STCP_EXT_RETURN_1
  1183            C        ;	MOV	A,@CH_END
  1184            C        ;	CALL	#VGA_NUM2
  1185            C        ;STCP_EXT_RETURN_1:
  1186            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00E2E 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00E2F 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00E30 1E83     3     PAGE ( $ / 1024 ),
  1187            C      M 	CRAM	SYS_FG,LOCK_TOPLINE
       00E31 095E     1     BC  SYS_FG , LOCK_TOPLINE 
  1188            C      M 	SRAM	SYS_FG,SYS_CLOCK
       00E32 0ADE     1     BS  SYS_FG , SYS_CLOCK 
  1189            C      M 	SRAM	SYS_FG,STAMP
       00E33 0A9E     1     BS  SYS_FG , STAMP 
  1190            C      M 	CRAM	SYS_FG,TIME
       00E34 09DE     1     BC  SYS_FG , TIME 
  1191 00E35 00F8 C        	CLR	TMR_NAME
  1192            C        	;CRAM	EVENT,TEST			; 停止TEST L111
  1193            C        	;RET
  1194 00E36 1467 C        	JMP	STCP_RET
  1195            C        	
  1196            C        
  1197 00E37      C        STCP_BOOK:			; 0X9F
  1198 00E37 040D C        	MOV	A,_RD
  1199            C      M 	JPZ	STCP_BOOK_END
       00E38 0C83     1     JBC  _STATUS , Z 
       00E39 164F     1     JMP  STCP_BOOK_END ,
  1200 00E3A 0060 C        	MOV	BANK0_TEMP0,A
  1201            C      M 	CALL	#INIT_EDIT
                      2  M  LCALL  INIT_EDIT 
                      3  M  PAGE #( INIT_EDIT ),
       00E3B 1E82     3     PAGE ( INIT_EDIT / 1024 ),
       00E3C 107D     2     CALL ( INIT_EDIT % 1024 ),
                      3  M  PAGE #( $ ),
       00E3D 1E83     3     PAGE ( $ / 1024 ),
  1202            C      M 	CALL	#MENU_LOCK			; 屏蔽第一行的更新
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00E3E 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00E3F 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00E40 1E83     3     PAGE ( $ / 1024 ),
  1203            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00E41 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00E42 088B     2     BC  _RB , 2 
  1204            C      M 	MOV	_RC,@(CID_ADDR+33)
       00E43 185D     1     MOV A,@(( CID_ADDR + 33 ))
       00E44 004C     1     MOV  _RC ,A
  1205            C      M 	MOV	_RD,BANK0_TEMP0
       00E45 0420     1     MOV A, BANK0_TEMP0 
       00E46 004D     1     MOV  _RD ,A
  1206            C      M 	MOV	_RC,@(CID_ADDR+0)
       00E47 183C     1     MOV A,@(( CID_ADDR + 0 ))
       00E48 004C     1     MOV  _RC ,A
  1207            C      M 	MOV	_RD,@(STYLE_CENTER+0X80)		; 不显示第一行
       00E49 18E0     1     MOV A,@(( STYLE_CENTER + 128 ))
       00E4A 004D     1     MOV  _RD ,A
  1208            C      M 	CALL	#DISP_CID
                      2  M  LCALL  DISP_CID 
                      3  M  PAGE #( DISP_CID ),
       00E4B 1E81     3     PAGE ( DISP_CID / 1024 ),
       00E4C 1275     2     CALL ( DISP_CID % 1024 ),
                      3  M  PAGE #( $ ),
       00E4D 1E83     3     PAGE ( $ / 1024 ),
  1209            C        	;RET
  1210 00E4E 1467 C        	JMP	STCP_RET
  1211 00E4F      C        STCP_BOOK_END:
  1212            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00E4F 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00E50 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00E51 1E83     3     PAGE ( $ / 1024 ),
  1213            C      M 	PAGE	#(VGA_STR)
       00E52 1E85     1     PAGE ( VGA_STR / 1024 ),
  1214 00E53 1860 C        	MOV	A,@(STYLE_CENTER)
  1215 00E54 104B C        	CALL	VGA_STR
  1216 00E55 1829 C        	MOV	A,@(WD_END_OF_NAMES_BOOK)
  1217 00E56 11BF C        	CALL	VGA_STRING
  1218 00E57 18FF C        	MOV	A,@CH_END
  1219 00E58 104B C        	CALL	VGA_STR
  1220            C      M 	PAGE	#($)
       00E59 1E83     1     PAGE ( $ / 1024 ),
  1221            C        	;RET
  1222 00E5A 1467 C        	JMP	STCP_RET
  1223            C        
  1224            C        
  1225 00E5B      C        STCP_CHANGE_NUM2:		; 0XA0~0XAF
  1226 00E5B 01CC C        	DEC	_RC
  1227            C      M 	ANDA	_RD,@0X0F
       00E5C 180F     1     MOV A,@( 15 )
       00E5D 028D     1     AND A, _RD 
  1228 00E5E 1F01 C        	ADD	A,@1
  1229 00E5F 0056 C        	MOV	TEMP0,A
  1230 00E60 054C C        	INC	_RC
  1231 00E61 0416 C        	MOV	A,TEMP0
  1232            C      M 	CALL	#EDIT_NUM2
                      2  M  LCALL  EDIT_NUM2 
                      3  M  PAGE #( EDIT_NUM2 ),
       00E62 1E82     3     PAGE ( EDIT_NUM2 / 1024 ),
       00E63 10FE     2     CALL ( EDIT_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00E64 1E83     3     PAGE ( $ / 1024 ),
  1233 00E65 1800 C        	MOV	A,@0
  1234            C      M 	CALL	#DISP_NUM1
                      2  M  LCALL  DISP_NUM1 
                      3  M  PAGE #( DISP_NUM1 ),
       00E66 1E82     3     PAGE ( DISP_NUM1 / 1024 ),
       00E67 1143     2     CALL ( DISP_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       00E68 1E83     3     PAGE ( $ / 1024 ),
  1235 00E69 1800 C        	MOV	A,@0
  1236            C      M 	CALL	#DISP_STR
                      2  M  LCALL  DISP_STR 
                      3  M  PAGE #( DISP_STR ),
       00E6A 1E82     3     PAGE ( DISP_STR / 1024 ),
       00E6B 11BA     2     CALL ( DISP_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00E6C 1E83     3     PAGE ( $ / 1024 ),
  1237            C        	;RET
  1238 00E6D 1467 C        	JMP	STCP_RET
  1239            C        
  1240            C        
  1241 00E6E      C        STCP_CHANGE_STR:		; 0XB0~0XBF
  1242 00E6E 01CC C        	DEC	_RC
  1243            C      M 	ANDA	_RD,@0X0F
       00E6F 180F     1     MOV A,@( 15 )
       00E70 028D     1     AND A, _RD 
  1244 00E71 1F01 C        	ADD	A,@1
  1245 00E72 0056 C        	MOV	TEMP0,A
  1246 00E73 054C C        	INC	_RC
  1247 00E74 0416 C        	MOV	A,TEMP0
  1248            C      M 	CALL	#EDIT_STR
                      2  M  LCALL  EDIT_STR 
                      3  M  PAGE #( EDIT_STR ),
       00E75 1E82     3     PAGE ( EDIT_STR / 1024 ),
       00E76 1105     2     CALL ( EDIT_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00E77 1E83     3     PAGE ( $ / 1024 ),
  1249 00E78 1800 C        	MOV	A,@0
  1250            C      M 	CALL	#DISP_NUM1
                      2  M  LCALL  DISP_NUM1 
                      3  M  PAGE #( DISP_NUM1 ),
       00E79 1E82     3     PAGE ( DISP_NUM1 / 1024 ),
       00E7A 1143     2     CALL ( DISP_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       00E7B 1E83     3     PAGE ( $ / 1024 ),
  1251 00E7C 1800 C        	MOV	A,@0
  1252            C      M 	CALL	#DISP_NUM2
                      2  M  LCALL  DISP_NUM2 
                      3  M  PAGE #( DISP_NUM2 ),
       00E7D 1E82     3     PAGE ( DISP_NUM2 / 1024 ),
       00E7E 118A     2     CALL ( DISP_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00E7F 1E83     3     PAGE ( $ / 1024 ),
  1253            C        	;RET
  1254 00E80 1467 C        	JMP	STCP_RET
  1255            C        
  1256            C        
  1257 00E81      C        STCP_CHOICE_OGMX:		; 0XC0
  1258            C      M 	MOV	BANK0_TEMP0,_RD
       00E81 040D     1     MOV A, _RD 
       00E82 0060     1     MOV  BANK0_TEMP0 ,A
  1259            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00E83 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00E84 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00E85 1E83     3     PAGE ( $ / 1024 ),
  1260            C      M 	PAGE	#VGA_STR
       00E86 1E85     1     PAGE ( VGA_STR / 1024 ),
  1261 00E87 1860 C        	MOV	A,@(STYLE_CENTER)
  1262 00E88 104B C        	CALL	VGA_STR
  1263 00E89 1828 C        	MOV	A,@(WD_OGM)
  1264 00E8A 11BF C        	CALL	VGA_STRING
  1265 00E8B 1824 C        	MOV	A,@CH_BLANK
  1266 00E8C 104B C        	CALL	VGA_STR
  1267 00E8D 0420 C        	MOV	A,BANK0_TEMP0
  1268 00E8E 104B C        	CALL	VGA_STR
  1269 00E8F 18FF C        	MOV	A,@CH_END
  1270 00E90 104B C        	CALL	VGA_STR
  1271            C      M 	PAGE	#($)
       00E91 1E83     1     PAGE ( $ / 1024 ),
  1272 00E92 1467 C        	JMP	STCP_RET
  1273            C        
  1274 00E93      C        STCP_REC_OGMX:			; 0XC1
  1275            C        	
  1276            C      M 	CALL	#RESET_REC_TIMER
                      2  M  LCALL  RESET_REC_TIMER 
                      3  M  PAGE #( RESET_REC_TIMER ),
       00E93 1E82     3     PAGE ( RESET_REC_TIMER / 1024 ),
       00E94 1000     2     CALL ( RESET_REC_TIMER % 1024 ),
                      3  M  PAGE #( $ ),
       00E95 1E83     3     PAGE ( $ / 1024 ),
  1277            C        	
  1278 00E96 1814 C        	MOV	A,@(WD_OGM_RECORDING)
  1279 00E97 169E C        	JMP	STCP_OGMX
  1280 00E98      C        STCP_STOPREC_OGMX:		; 0XC2
  1281            C      M 	CRAM	SYS_FG,TIME
       00E98 09DE     1     BC  SYS_FG , TIME 
  1282            C        	;RET
  1283 00E99 1467 C        	JMP	STCP_RET
  1284 00E9A      C        STCP_PLAY_OGMX:			; 0XC3
  1285            C      M 	CRAM	SYS_FG,TIME
       00E9A 09DE     1     BC  SYS_FG , TIME 
  1286 00E9B 1815 C        	MOV	A,@(WD_OGM_PLAYBACK)
  1287 00E9C 169E C        	JMP	STCP_OGMX
  1288 00E9D      C        STCP_STOPPLAY_OGMX:		; 0XC4
  1289            C        	;RET
  1290 00E9D 1467 C        	JMP	STCP_RET
  1291 00E9E      C        STCP_OGMX:
  1292 00E9E 0060 C        	MOV	BANK0_TEMP0,A
  1293            C      M 	MOV	BANK0_TEMP1,_RD
       00E9F 040D     1     MOV A, _RD 
       00EA0 0061     1     MOV  BANK0_TEMP1 ,A
  1294            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00EA1 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00EA2 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00EA3 1E83     3     PAGE ( $ / 1024 ),
  1295            C        	
  1296            C      M 	PAGE	#VGA_STR
       00EA4 1E85     1     PAGE ( VGA_STR / 1024 ),
  1297 00EA5 1860 C        	MOV	A,@(STYLE_CENTER)
  1298 00EA6 104B C        	CALL	VGA_STR
  1299 00EA7 182A C        	MOV	A,@(WD_OGM_)
  1300 00EA8 11BF C        	CALL	VGA_STRING
  1301 00EA9 0421 C        	MOV	A,BANK0_TEMP1
  1302 00EAA 104B C        	CALL	VGA_STR
  1303 00EAB 1824 C        	MOV	A,@CH_BLANK
  1304 00EAC 104B C        	CALL	VGA_STR
  1305 00EAD 0420 C        	MOV	A,BANK0_TEMP0
  1306 00EAE 11BF C        	CALL	VGA_STRING
  1307 00EAF 18FF C        	MOV	A,@CH_END
  1308 00EB0 104B C        	CALL	VGA_STR
  1309            C      M 	PAGE	#($)
       00EB1 1E83     1     PAGE ( $ / 1024 ),
  1310            C        	;RET
  1311 00EB2 1467 C        	JMP	STCP_RET
  1312            C        
  1313            C        
  1314 00EB3      C        STCP_RECORD:			; 0XC5
  1315            C      M 	MOV	BANK0_TEMP0,_RD
       00EB3 040D     1     MOV A, _RD 
       00EB4 0060     1     MOV  BANK0_TEMP0 ,A
  1316            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00EB5 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00EB6 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00EB7 1E83     3     PAGE ( $ / 1024 ),
  1317            C        	
  1318            C      M 	PAGE	#VGA_STR
       00EB8 1E85     1     PAGE ( VGA_STR / 1024 ),
  1319 00EB9 1860 C        	MOV	A,@(STYLE_CENTER)
  1320 00EBA 104B C        	CALL	VGA_STR
  1321            C      M 	ADDA	BANK0_TEMP0,@WD_MEMO_RECORDING
       00EBB 180B     1     MOV A,@( WD_MEMO_RECORDING )
       00EBC 03A0     1     ADD A, BANK0_TEMP0 
  1322 00EBD 11BF C        	CALL	VGA_STRING
  1323 00EBE 18FF C        	MOV	A,@CH_END
  1324 00EBF 104B C        	CALL	VGA_STR
  1325            C      M 	PAGE	#($)
       00EC0 1E83     1     PAGE ( $ / 1024 ),
  1326            C        	
  1327            C      M 	CALL	#RESET_REC_TIMER
                      2  M  LCALL  RESET_REC_TIMER 
                      3  M  PAGE #( RESET_REC_TIMER ),
       00EC1 1E82     3     PAGE ( RESET_REC_TIMER / 1024 ),
       00EC2 1000     2     CALL ( RESET_REC_TIMER % 1024 ),
                      3  M  PAGE #( $ ),
       00EC3 1E83     3     PAGE ( $ / 1024 ),
  1328            C        	
  1329 00EC4 1467 C        	JMP	STCP_RET
  1330 00EC5      C        STCP_STOPRECORD:		; 0XC6
  1331            C      M 	CRAM	SYS_FG,TIME
       00EC5 09DE     1     BC  SYS_FG , TIME 
  1332            C        	;RET
  1333 00EC6 1467 C        	JMP	STCP_RET
  1334            C        
  1335            C        
  1336 00EC7      C        STCP_PLAYMSG:			; 0XC7
  1337            C        	;SRAM	EVENT,1				; 可以发送电话线状态
  1338 00EC7 040D C        	MOV	A,_RD
  1339            C      M 	JPZ	STCP_PLAYMSG_INFO
       00EC8 0C83     1     JBC  _STATUS , Z 
       00EC9 16FA     1     JMP  STCP_PLAYMSG_INFO ,
  1340            C      M 	MOV	BANK0_TEMP0,_RD
       00ECA 040D     1     MOV A, _RD 
       00ECB 0060     1     MOV  BANK0_TEMP0 ,A
  1341            C      M 	MOV	BANK0_TEMP2,_RC
       00ECC 040C     1     MOV A, _RC 
       00ECD 0062     1     MOV  BANK0_TEMP2 ,A
  1342            C      M 	MOV	_RC,@(CID_ADDR+33)
       00ECE 185D     1     MOV A,@(( CID_ADDR + 33 ))
       00ECF 004C     1     MOV  _RC ,A
  1343            C      M 	MOV	_RD,BANK0_TEMP0
       00ED0 0420     1     MOV A, BANK0_TEMP0 
       00ED1 004D     1     MOV  _RD ,A
  1344            C      M 	MOV	_RC,@(CID_ADDR+0)
       00ED2 183C     1     MOV A,@(( CID_ADDR + 0 ))
       00ED3 004C     1     MOV  _RC ,A
  1345            C      M 	MOV	_RD,@(STYLE_CENTER+0X80)
       00ED4 18E0     1     MOV A,@(( STYLE_CENTER + 128 ))
       00ED5 004D     1     MOV  _RD ,A
  1346            C      M 	CALL	#DISP_CID
                      2  M  LCALL  DISP_CID 
                      3  M  PAGE #( DISP_CID ),
       00ED6 1E81     3     PAGE ( DISP_CID / 1024 ),
       00ED7 1275     2     CALL ( DISP_CID % 1024 ),
                      3  M  PAGE #( $ ),
       00ED8 1E83     3     PAGE ( $ / 1024 ),
  1347 00ED9      C        STCP_PLAYMSG_1:
  1348            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00ED9 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00EDA 088B     2     BC  _RB , 2 
  1349            C      M 	MOV	_RC,BANK0_TEMP2
       00EDB 0422     1     MOV A, BANK0_TEMP2 
       00EDC 004C     1     MOV  _RC ,A
  1350 00EDD 1824 C        	MOV	A,@WD_PLAY
  1351 00EDE 16E3 C        	JMP	STCP_MSG
  1352 00EDF      C        STCP_PAUSEMSG:			; 0XC8
  1353 00EDF 1826 C        	MOV	A,@WD_PAUSE
  1354 00EE0 16E3 C        	JMP	STCP_MSG
  1355 00EE1      C        STCP_STOPMSG:			; 0XC9
  1356 00EE1 1825 C        	MOV	A,@WD_STOP
  1357 00EE2 16E3 C        	JMP	STCP_MSG
  1358 00EE3      C        STCP_MSG:
  1359 00EE3 0061 C        	MOV	BANK0_TEMP1,A
  1360            C      M 	MOV	BANK0_TEMP0,_RD
       00EE4 040D     1     MOV A, _RD 
       00EE5 0060     1     MOV  BANK0_TEMP0 ,A
  1361            C      M 	PAGE	#VGA_STR
       00EE6 1E85     1     PAGE ( VGA_STR / 1024 ),
  1362 00EE7 1084 C        	CALL	CLR_STR
  1363 00EE8 1860 C        	MOV	A,@(STYLE_CENTER)
  1364 00EE9 104B C        	CALL	VGA_STR
  1365            C      M 	MOV	GENE_A,BANK0_TEMP0
       00EEA 0420     1     MOV A, BANK0_TEMP0 
       00EEB 0056     1     MOV  GENE_A ,A
  1366 00EEC 119D C        	CALL	VGA_HEX_STR
  1367 00EED 182D C        	MOV	A,@CH_SCH1
  1368 00EEE 104B C        	CALL	VGA_STR
  1369            C      M 	MOV	GENE_A,TOTAL_MSG
       00EEF 042D     1     MOV A, TOTAL_MSG 
       00EF0 0056     1     MOV  GENE_A ,A
  1370 00EF1 119D C        	CALL	VGA_HEX_STR
  1371 00EF2 1824 C        	MOV	A,@CH_BLANK
  1372 00EF3 104B C        	CALL	VGA_STR
  1373 00EF4 0421 C        	MOV	A,BANK0_TEMP1
  1374 00EF5 11BF C        	CALL	VGA_STRING
  1375 00EF6 18FF C        	MOV	A,@CH_END
  1376 00EF7 104B C        	CALL	VGA_STR
  1377            C      M 	PAGE	#($)
       00EF8 1E83     1     PAGE ( $ / 1024 ),
  1378            C        	;RET
  1379 00EF9 1467 C        	JMP	STCP_RET
  1380 00EFA      C        STCP_PLAYMSG_INFO:
  1381            C      M 	MOV	BANK0_TEMP2,_RC
       00EFA 040C     1     MOV A, _RC 
       00EFB 0062     1     MOV  BANK0_TEMP2 ,A
  1382            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00EFC 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00EFD 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00EFE 1E83     3     PAGE ( $ / 1024 ),
  1383 00EFF 16D9 C        	JMP	STCP_PLAYMSG_1
  1384            C        
  1385            C        
  1386 00F00      C        STCP_CALL:			; 0XCA
  1387 00F00 040D C        	MOV	A,_RD
  1388            C      M 	JPZ	STCP_CALL_END
       00F01 0C83     1     JBC  _STATUS , Z 
       00F02 1714     1     JMP  STCP_CALL_END ,
  1389            C      M 	MOV	TEMP0,_RD
       00F03 040D     1     MOV A, _RD 
       00F04 0056     1     MOV  TEMP0 ,A
  1390            C      M 	MOV	_RC,@(CID_ADDR+33)
       00F05 185D     1     MOV A,@(( CID_ADDR + 33 ))
       00F06 004C     1     MOV  _RC ,A
  1391            C      M 	MOV	_RD,TEMP0
       00F07 0416     1     MOV A, TEMP0 
       00F08 004D     1     MOV  _RD ,A
  1392            C      M 	MOV	_RC,@(CID_ADDR+0)
       00F09 183C     1     MOV A,@(( CID_ADDR + 0 ))
       00F0A 004C     1     MOV  _RC ,A
  1393            C      M 	MOV	_RD,@(STYLE_CENTER+0X80)
       00F0B 18E0     1     MOV A,@(( STYLE_CENTER + 128 ))
       00F0C 004D     1     MOV  _RD ,A
  1394            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00F0D 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00F0E 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00F0F 1E83     3     PAGE ( $ / 1024 ),
  1395            C      M 	CALL	#DISP_CID
                      2  M  LCALL  DISP_CID 
                      3  M  PAGE #( DISP_CID ),
       00F10 1E81     3     PAGE ( DISP_CID / 1024 ),
       00F11 1275     2     CALL ( DISP_CID % 1024 ),
                      3  M  PAGE #( $ ),
       00F12 1E83     3     PAGE ( $ / 1024 ),
  1396            C        	;RET
  1397 00F13 1467 C        	JMP	STCP_RET
  1398 00F14      C        STCP_CALL_END:
  1399            C      M 	MOV	BANK0_TEMP0,@WD_NO_CALL
       00F14 1800     1     MOV A,@( WD_NO_CALL )
       00F15 0060     1     MOV  BANK0_TEMP0 ,A
  1400 00F16 042B C        	MOV	A,TOTAL_CALL
  1401            C      M 	JPZ	$+3
       00F17 0C83     1     JBC  _STATUS , Z 
       00F18 171B     1     JMP ( $ + 3 ),
  1402            C      M 	MOV	BANK0_TEMP0,@WD_END_OF_LIST
       00F19 1804     1     MOV A,@( WD_END_OF_LIST )
       00F1A 0060     1     MOV  BANK0_TEMP0 ,A
  1403            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00F1B 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00F1C 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00F1D 1E83     3     PAGE ( $ / 1024 ),
  1404            C      M 	PAGE	#VGA_STR
       00F1E 1E85     1     PAGE ( VGA_STR / 1024 ),
  1405 00F1F 1860 C        	MOV	A,@(STYLE_CENTER)
  1406 00F20 104B C        	CALL	VGA_STR
  1407 00F21 0420 C        	MOV	A,BANK0_TEMP0
  1408 00F22 11BF C        	CALL	VGA_STRING
  1409 00F23 18FF C        	MOV	A,@CH_END
  1410 00F24 104B C        	CALL	VGA_STR
  1411            C      M 	PAGE	#($)
       00F25 1E83     1     PAGE ( $ / 1024 ),
  1412            C        	;RET
  1413 00F26 1467 C        	JMP	STCP_RET
  1414            C        
  1415            C        
  1416 00F27      C        STCP_VOLUME:			; 0XCB
  1417            C      M 	MOV	BANK0_TEMP0,_RD
       00F27 040D     1     MOV A, _RD 
       00F28 0060     1     MOV  BANK0_TEMP0 ,A
  1418            C      M 	CLRC
       00F29 0803     1     BC  _STATUS , C 
  1419 00F2A 06E0 C        	RLC	BANK0_TEMP0
  1420            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00F2B 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00F2C 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00F2D 1E83     3     PAGE ( $ / 1024 ),
  1421 00F2E 1820 C        	MOV	A,@(STYLE_LEFT)
  1422            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00F2F 1E85     3     PAGE ( VGA_STR / 1024 ),
       00F30 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00F31 1E83     3     PAGE ( $ / 1024 ),
  1423 00F32      C        STCP_VOLUME_LOOP:
  1424 00F32 0420 C        	MOV	A,BANK0_TEMP0
  1425            C      M 	JPZ	STCP_VOLUME_END
       00F33 0C83     1     JBC  _STATUS , Z 
       00F34 173B     1     JMP  STCP_VOLUME_END ,
  1426 00F35 1825 C        	MOV	A,@CH_BLACK
  1427            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00F36 1E85     3     PAGE ( VGA_STR / 1024 ),
       00F37 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00F38 1E83     3     PAGE ( $ / 1024 ),
  1428 00F39 01E0 C        	DEC	BANK0_TEMP0
  1429 00F3A 1732 C        	JMP	STCP_VOLUME_LOOP
  1430 00F3B      C        STCP_VOLUME_END:
  1431 00F3B 18FF C        	MOV	A,@CH_END
  1432            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00F3C 1E85     3     PAGE ( VGA_STR / 1024 ),
       00F3D 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00F3E 1E83     3     PAGE ( $ / 1024 ),
  1433            C        	;RET
  1434 00F3F 1467 C        	JMP	STCP_RET
  1435            C        
  1436            C        
  1437 00F40      C        STCP_DELETE:			; 0XCC
  1438            C      M 	MOV	BANK0_TEMP0,_RD
       00F40 040D     1     MOV A, _RD 
       00F41 0060     1     MOV  BANK0_TEMP0 ,A
  1439            C      M 	PAGE	#VGA_STR
       00F42 1E85     1     PAGE ( VGA_STR / 1024 ),
  1440 00F43 1084 C        	CALL	CLR_STR
  1441 00F44 1860 C        	MOV	A,@(STYLE_CENTER)
  1442 00F45 104B C        	CALL	VGA_STR
  1443            C      M 	ADDA	BANK0_TEMP0,@(WD_ERASE)
       00F46 1807     1     MOV A,@( WD_ERASE )
       00F47 03A0     1     ADD A, BANK0_TEMP0 
  1444 00F48 11BF C        	CALL	VGA_STRING
  1445 00F49 18FF C        	MOV	A,@CH_END
  1446 00F4A 104B C        	CALL	VGA_STR
  1447            C      M 	PAGE	#($)
       00F4B 1E83     1     PAGE ( $ / 1024 ),
  1448            C        	;RET
  1449 00F4C 1467 C        	JMP	STCP_RET
  1450            C        
  1451 00F4D      C        STCP_RING:			; 0XCD
  1452 00F4D 040D C        	MOV	A,_RD
  1453 00F4E 0020 C        	TBL
  1454 00F4F 1752 C        	JMP	STCP_RING_IN
  1455 00F50 1753 C        	JMP	STCP_RING_TIMEOUT
  1456 00F51 1754 C        	JMP	STCP_RING_CONNECT
  1457 00F52      C        STCP_RING_IN:
  1458            C        	;SRAM	EVENT,0
  1459            C        	;RET
  1460 00F52 1467 C        	JMP	STCP_RET
  1461 00F53      C        STCP_RING_TIMEOUT:
  1462            C        	;CRAM	EVENT,0
  1463            C        	;RET
  1464 00F53 1467 C        	JMP	STCP_RET
  1465 00F54      C        STCP_RING_CONNECT:
  1466            C        	;CRAM	EVENT,0
  1467            C        	;RET
  1468 00F54 1467 C        	JMP	STCP_RET
  1469            C        
  1470 00F55      C        STCP_HOOK:
  1471 00F55 040D C        	MOV	A,_RD
  1472            C      M 	JPZ	STCP_HOOK_OFFHOOK
       00F56 0C83     1     JBC  _STATUS , Z 
       00F57 175E     1     JMP  STCP_HOOK_OFFHOOK ,
  1473 00F58      C        STCP_HOOK_ONHOOK:				; 挂机
  1474 00F58 0011 C        	DISI
  1475            C        	;IOR	_IOCF
  1476            C        	;OR	A,@(0XC0)			; 开启FSK,DTMF中断
  1477            C        	;IOW	_IOCF
  1478            C      M 	BANK	1
       00F59 0B84     1     BS  _RSR , 6 
       00F5A 09C4     1     BC  _RSR , 7 
  1479            C      M 	CRAM	R1_SYS_FG,HOOKSTATUS
       00F5B 0872     1     BC  R1_SYS_FG , HOOKSTATUS 
  1480 00F5C 0010 C        	ENI
  1481 00F5D 1467 C        	JMP	STCP_RET
  1482            C        	
  1483            C        	
  1484 00F5E      C        STCP_HOOK_OFFHOOK:				; 摘机
  1485 00F5E 0011 C        	DISI
  1486 00F5F 001F C        	IOR	_IOCF
  1487 00F60 1A3E C        	AND	A,@(0X3E)			; 关闭FSK,DTMF,TCC中断
  1488 00F61 000F C        	IOW	_IOCF
  1489            C        	
  1490            C        	
  1491            C      M 	AND	FSK_FG,@(0XE4)
       00F62 18E4     1     MOV A,@( 228 )
       00F63 02DC     1     AND  FSK_FG ,A
  1492            C        	
  1493            C      M 	BANK	1
       00F64 0B84     1     BS  _RSR , 6 
       00F65 09C4     1     BC  _RSR , 7 
  1494            C      M 	SRAM	R1_SYS_FG,HOOKSTATUS
       00F66 0A72     1     BS  R1_SYS_FG , HOOKSTATUS 
  1495 00F67 1800 C        	MOV	A,@0
  1496 00F68 0064 C        	MOV	FSK_BYTE,A
  1497 00F69 0065 C        	MOV	FSK_SUM,A
  1498 00F6A 0066 C        	MOV	FSK_LENGTH,A
  1499 00F6B 0067 C        	MOV	FSK_COUNT,A
  1500 00F6C 0068 C        	MOV	FSK_TMP,A
  1501 00F6D 0069 C        	MOV	FSK_ADR,A
  1502 00F6E 006A C        	MOV	DTMF_ADR,A
  1503            C        	
  1504 00F6F 0010 C        	ENI
  1505 00F70 1467 C        	JMP	STCP_RET
  1506            C        
  1507            C        ;STCP_TEST:
  1508            C        ;	JPB	EVENT,TEST,STCP_TEST_1
  1509            C        ;	CALL	#MENU_LOCK
  1510            C        ;	SRAM	EVENT,TEST
  1511            C        ;	MOV	A,(STYLE_LEFT)
  1512            C        ;	CALL	#VGA_NUM2
  1513            C        ;STCP_TEST_1:
  1514            C        ;	MOV	BANK0_TEMP0,_RD
  1515            C        ;	SWAPA	BANK0_TEMP0
  1516            C        ;	AND	A,@(0X0F)
  1517            C        ;	CALL	#VGA_NUM2
  1518            C        ;	ANDA	BANK0_TEMP0,@(0X0F)
  1519            C        ;	CALL	#VGA_NUM2
  1520            C        ;	JMP	STCP_RET
  1521            C        
  1522            C        
  1523            C        
  1524            C        ORG	0X1200
  1525 01200      C        STORE_SER:
  1526 01200 0056 C        	MOV	TEMP0,A
  1527            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01201 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01202 004C     1     MOV  _RC ,A
  1528            C      M 	ANDA	_RD,@0X3F
       01203 183F     1     MOV A,@( 63 )
       01204 028D     1     AND A, _RD 
  1529 01205 0059 C        	MOV	TEMP3,A
  1530 01206 054D C        	INC	_RD
  1531            C      M 	ADDA	TEMP3,@(TCP_ADDR+1)
       01207 189A     1     MOV A,@(( TCP_ADDR + 1 ))
       01208 0399     1     ADD A, TEMP3 
  1532 01209 004C C        	MOV	_RC,A
  1533            C      M 	MOV	_RD,TEMP0
       0120A 0416     1     MOV A, TEMP0 
       0120B 004D     1     MOV  _RD ,A
  1534            C        	
  1535 0120C 0012 C        	RET
  1536            C        
  1537 0120D      C        SER_BUF_CHK:
  1538            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0120D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0120E 088B     2     BC  _RB , 2 
  1539            C      M 	BANK	0
       0120F 0984     1     BC  _RSR , 6 
       01210 09C4     1     BC  _RSR , 7 
  1540 01211 0437 C        	MOV	A,TMR_SER
  1541            C      M 	JPNZ	SER_BUF_CHK_RET
       01212 0E83     1     JBS  _STATUS , Z 
       01213 1650     1     JMP  SER_BUF_CHK_RET ,
  1542            C      M 	JPB	SER_FLAG,6,SER_BUF_CHK_RET
       01214 0DBC     1     JBC  SER_FLAG , 6 
       01215 1650     1     JMP  SER_BUF_CHK_RET ,
  1543            C      M 	JPB	SER_FLAG,7,SER_BUF_CHK_RET
       01216 0DFC     1     JBC  SER_FLAG , 7 
       01217 1650     1     JMP  SER_BUF_CHK_RET ,
  1544            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01218 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01219 004C     1     MOV  _RC ,A
  1545 0121A 040D C        	MOV	A,_RD
  1546            C      M 	JPZ	SER_BUF_CHK_RET
       0121B 0C83     1     JBC  _STATUS , Z 
       0121C 1650     1     JMP  SER_BUF_CHK_RET ,
  1547            C      M 	JPB	_RD,7,SER_BUF_CHK_RET
       0121D 0DCD     1     JBC  _RD , 7 
       0121E 1650     1     JMP  SER_BUF_CHK_RET ,
  1548 0121F 0000 C        	NOP
  1549 01220 00D7 C        	CLR	TEMP1
  1550            C        	;MOV	TEMP1,@(TCP_ADDR+1)
  1551 01221      C        SER_BUF_CHK_LOOP:
  1552 01221 0557 C        	INC	TEMP1
  1553            C      M 	ADDA	TEMP1,@(TCP_ADDR+0)
       01222 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01223 0397     1     ADD A, TEMP1 
  1554            C        	;MOV	_RC,TEMP1
  1555 01224 004C C        	MOV	_RC,A
  1556            C      M 	SUBA	_RD,@0XFF
       01225 18FF     1     MOV A,@( 255 )
       01226 010D     1     SUB A, _RD 
  1557            C      M 	JPZ	SER_BUF_CHK_1
       01227 0C83     1     JBC  _STATUS , Z 
       01228 162E     1     JMP  SER_BUF_CHK_1 ,
  1558 01229 040D C        	MOV	A,_RD
  1559            C      M 	CALL	#SER_STOR_DATA
                      2  M  LCALL  SER_STOR_DATA 
                      3  M  PAGE #( SER_STOR_DATA ),
       0122A 1E80     3     PAGE ( SER_STOR_DATA / 1024 ),
       0122B 13F1     2     CALL ( SER_STOR_DATA % 1024 ),
                      3  M  PAGE #( $ ),
       0122C 1E84     3     PAGE ( $ / 1024 ),
  1560            C        	;INC	TEMP1
  1561 0122D 1621 C        	JMP	SER_BUF_CHK_LOOP
  1562            C        	
  1563 0122E      C        SER_BUF_CHK_1:
  1564            C      M 	SRAM	SER_FLAG,6
       0122E 0BBC     1     BS  SER_FLAG , 6 
  1565            C        	
  1566            C      M 	MOV	TEMP0,@(TCP_ADDR+1)
       0122F 189A     1     MOV A,@(( TCP_ADDR + 1 ))
       01230 0056     1     MOV  TEMP0 ,A
  1567            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01231 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01232 004C     1     MOV  _RC ,A
  1568            C      M 	SUB	_RD,TEMP1
       01233 0417     1     MOV A, TEMP1 
       01234 014D     1     SUB  _RD ,A
  1569 01235 0557 C        	INC	TEMP1
  1570            C      M 	ADD	TEMP1,@(TCP_ADDR+0)
       01236 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01237 03D7     1     ADD  TEMP1 ,A
  1571 01238      C        SER_BUF_CHK_1_LOOP:
  1572            C      M 	SUBA	TEMP1,@(TCP_ADDR+70)
       01238 18DF     1     MOV A,@(( TCP_ADDR + 70 ))
       01239 0117     1     SUB A, TEMP1 
  1573            C      M 	JPZ	SER_BUF_CHK_2
       0123A 0C83     1     JBC  _STATUS , Z 
       0123B 1647     1     JMP  SER_BUF_CHK_2 ,
  1574            C      M 	MOV	_RC,TEMP1
       0123C 0417     1     MOV A, TEMP1 
       0123D 004C     1     MOV  _RC ,A
  1575            C      M 	MOV	TEMP2,_RD
       0123E 040D     1     MOV A, _RD 
       0123F 0058     1     MOV  TEMP2 ,A
  1576            C      M 	MOV	_RC,TEMP0
       01240 0416     1     MOV A, TEMP0 
       01241 004C     1     MOV  _RC ,A
  1577            C      M 	MOV	_RD,TEMP2
       01242 0418     1     MOV A, TEMP2 
       01243 004D     1     MOV  _RD ,A
  1578 01244 0556 C        	INC	TEMP0
  1579 01245 0557 C        	INC	TEMP1
  1580 01246 1638 C        	JMP	SER_BUF_CHK_1_LOOP
  1581 01247      C        SER_BUF_CHK_2:
  1582            C      M 	MOV	_RC,TEMP0
       01247 0416     1     MOV A, TEMP0 
       01248 004C     1     MOV  _RC ,A
  1583            C      M 	MOV	_RD,@0XFF
       01249 18FF     1     MOV A,@( 255 )
       0124A 004D     1     MOV  _RD ,A
  1584 0124B 0556 C        	INC	TEMP0
  1585            C      M 	SUBA	TEMP0,@(TCP_ADDR+70)
       0124C 18DF     1     MOV A,@(( TCP_ADDR + 70 ))
       0124D 0116     1     SUB A, TEMP0 
  1586            C      M 	JPNZ	SER_BUF_CHK_2
       0124E 0E83     1     JBS  _STATUS , Z 
       0124F 1647     1     JMP  SER_BUF_CHK_2 ,
  1587            C        
  1588 01250      C        SER_BUF_CHK_RET:
  1589 01250 0012 C        	RET
  1590            C        
  1591            C        
  1592 01251      C        INIT_SER:
  1593            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       01251 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01252 088B     2     BC  _RB , 2 
  1594            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01253 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01254 004C     1     MOV  _RC ,A
  1595 01255 00CD C        	CLR	_RD
  1596            C      M 	CLRCIDRAM	@(TCP_ADDR+1),@64,@0XFF
                      2  M  MOV  TEMP0 ,@(( TCP_ADDR + 1 ))
       01256 189A     2     MOV A,@(( TCP_ADDR + 1 ))
       01257 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 64 )
       01258 1840     2     MOV A,@( 64 )
       01259 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( 255 )
       0125A 18FF     2     MOV A,@( 255 )
       0125B 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CLR_CIDRAM ),
       0125C 1178     2     CALL ( CLR_CIDRAM % 1024 ),
  1597 0125D 0012 C        	RET
  1598            C        
  1599            C        /***************************************
  1600            C        拨号程序
  1601            C        DIAL_CTRL:
  1602            C        .7	0/1	DISABLE/ENABLE
  1603            C        .6	0/1
  1604            C        
  1605            C        .4~.3	0~16	0: START 1~16:拨号的位数
  1606            C        ***************************************/
  1607 0125E      C        TAB_TONE1:
  1608 0125E 0020 C        	TBL
  1609 0125F 1C77 C        	RETL	0X77	; 0
  1610 01260 1CA0 C        	RETL	0XA0	; 1
  1611 01261 1CA0 C        	RETL	0XA0	; 2
  1612 01262 1CA0 C        	RETL	0XA0	; 3
  1613 01263 1C91 C        	RETL	0X91	; 4
  1614 01264 1C91 C        	RETL	0X91	; 5
  1615 01265 1C91 C        	RETL	0X91	; 6
  1616 01266 1C83 C        	RETL	0X83	; 7
  1617 01267 1C83 C        	RETL	0X83	; 8
  1618 01268 1C83 C        	RETL	0X83	; 9
  1619 01269 1C77 C        	RETL	0X77	; *
  1620 0126A 1C77 C        	RETL	0X77	; #
  1621 0126B 1CA0 C        	RETL	0XA0	; A
  1622 0126C 1C91 C        	RETL	0X91	; B
  1623 0126D 1C83 C        	RETL	0X83	; C
  1624 0126E 1C77 C        	RETL	0X77	; D
  1625            C        
  1626 0126F      C        TAB_TONE2:
  1627 0126F 0020 C        	TBL
  1628 01270 1C54 C        	RETL	0X54	; 0
  1629 01271 1C5D C        	RETL	0X5D	; 1
  1630 01272 1C54 C        	RETL	0X54	; 2
  1631 01273 1C4C C        	RETL	0X4C	; 3
  1632 01274 1C5D C        	RETL	0X5D	; 4
  1633 01275 1C54 C        	RETL	0X54	; 5
  1634 01276 1C4C C        	RETL	0X4C	; 6
  1635 01277 1C5D C        	RETL	0X5D	; 7
  1636 01278 1C54 C        	RETL	0X54	; 8
  1637 01279 1C4C C        	RETL	0X4C	; 9
  1638 0127A 1C5D C        	RETL	0X5D	; *
  1639 0127B 1C4C C        	RETL	0X4C	; #
  1640 0127C 1C44 C        	RETL	0X44	; A
  1641 0127D 1C44 C        	RETL	0X44	; B
  1642 0127E 1C44 C        	RETL	0X44	; C
  1643 0127F 1C44 C        	RETL	0X44	; D
  1644            C        
  1645            C        
  1646            C        
  1647 01280      C        DIAL_NUM:
  1648            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       01280 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01281 088B     2     BC  _RB , 2 
  1649            C      M 	PAGEIO	0
                      2  M  CRAM  _STATUS , 7 
       01282 09C3     2     BC  _STATUS , 7 
  1650            C      M 	BANK	0
       01283 0984     1     BC  _RSR , 6 
       01284 09C4     1     BC  _RSR , 7 
  1651            C      M 	MOV	_RC,@DIAL_ADDR
       01285 1884     1     MOV A,@( DIAL_ADDR )
       01286 004C     1     MOV  _RC ,A
  1652            C      M 	JPNB	_RD,7,DIAL_NUM_RET
       01287 0FCD     1     JBS  _RD , 7 
       01288 16D4     1     JMP  DIAL_NUM_RET ,
  1653            C      M 	JPNB	_RD,5,DIAL_NUM_START
       01289 0F4D     1     JBS  _RD , 5 
       0128A 168E     1     JMP  DIAL_NUM_START ,
  1654            C      M 	JPB	_RD,6,DIAL_NUM_DIAL
       0128B 0D8D     1     JBC  _RD , 6 
       0128C 16BA     1     JMP  DIAL_NUM_DIAL ,
  1655 0128D 16A1 C        	JMP	DIAL_NUM_PAUSE
  1656            C        
  1657 0128E      C        DIAL_NUM_START:
  1658            C      M 	SRAM	_RD,5
       0128E 0B4D     1     BS  _RD , 5 
  1659            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       0128F 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       01290 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       01291 1E84     3     PAGE ( $ / 1024 ),
  1660 01292 1840 C        	MOV	A,@STYLE_RIGHT			; 右对齐
  1661            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       01293 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       01294 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       01295 1E84     3     PAGE ( $ / 1024 ),
  1662            C      M 	MOV	TMR_DELAY,@250			; 延时1S
       01296 18FA     1     MOV A,@( 250 )
       01297 0075     1     MOV  TMR_DELAY ,A
  1663            C        	
  1664            C      M 	PAGE	#VGA_STR
       01298 1E85     1     PAGE ( VGA_STR / 1024 ),
  1665 01299 1860 C        	MOV	A,@STYLE_CENTER
  1666 0129A 104B C        	CALL	VGA_STR
  1667 0129B 1805 C        	MOV	A,@(WD_PLS_LIFT_HANDSET)
  1668 0129C 11BF C        	CALL	VGA_STRING
  1669 0129D 18FF C        	MOV	A,@CH_END
  1670 0129E 104B C        	CALL	VGA_STR
  1671            C      M 	PAGE	#($)
       0129F 1E84     1     PAGE ( $ / 1024 ),
  1672 012A0 16D4 C        	JMP	DIAL_NUM_RET
  1673            C        
  1674 012A1      C        DIAL_NUM_PAUSE:
  1675 012A1 0435 C        	MOV	A,TMR_DELAY
  1676            C      M 	JPNZ	DIAL_NUM_RET
       012A2 0E83     1     JBS  _STATUS , Z 
       012A3 16D4     1     JMP  DIAL_NUM_RET ,
  1677            C      M 	SRAM	_RD,6
       012A4 0B8D     1     BS  _RD , 6 
  1678            C        	
  1679 012A5 12D5 C        	CALL	CHK_DIALNUM
  1680 012A6 0056 C        	MOV	TEMP0,A
  1681            C      M 	SUBA	TEMP0,@0X0F
       012A7 180F     1     MOV A,@( 15 )
       012A8 0116     1     SUB A, TEMP0 
  1682            C      M 	JPZ	DIAL_NUM_STOP
       012A9 0C83     1     JBC  _STATUS , Z 
       012AA 16CC     1     JMP  DIAL_NUM_STOP ,
  1683            C        	
  1684 012AB 0416 C        	MOV	A,TEMP0
  1685 012AC 125E C        	CALL	TAB_TONE1
  1686 012AD 000D C        	IOW	_IOCD
  1687 012AE 0416 C        	MOV	A,TEMP0
  1688 012AF 126F C        	CALL	TAB_TONE2
  1689 012B0 000E C        	IOW	_IOCE
  1690            C      M 	SRAM	_STATUS,5			; OPEN TONE1、TONE2
       012B1 0B43     1     BS  _STATUS , 5 
  1691            C      M 	SRAM	_STATUS,6
       012B2 0B83     1     BS  _STATUS , 6 
  1692            C      M 	MOV	TMR_DELAY,@25			; 延时100MS
       012B3 1819     1     MOV A,@( 25 )
       012B4 0075     1     MOV  TMR_DELAY ,A
  1693 012B5 0416 C        	MOV	A,TEMP0
  1694            C        	;JPNZ	$+2
  1695            C        	;MOV	A,@0X80
  1696            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       012B6 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       012B7 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       012B8 1E84     3     PAGE ( $ / 1024 ),
  1697            C        	
  1698 012B9 16D4 C        	JMP	DIAL_NUM_RET
  1699 012BA      C        DIAL_NUM_DIAL:
  1700 012BA 0435 C        	MOV	A,TMR_DELAY
  1701            C      M 	JPNZ	DIAL_NUM_RET
       012BB 0E83     1     JBS  _STATUS , Z 
       012BC 16D4     1     JMP  DIAL_NUM_RET ,
  1702            C      M 	CRAM	_STATUS,5
       012BD 0943     1     BC  _STATUS , 5 
  1703            C      M 	CRAM	_STATUS,6			; CLOSE TONE1、TONE2
       012BE 0983     1     BC  _STATUS , 6 
  1704            C      M 	CRAM	_RD,6
       012BF 098D     1     BC  _RD , 6 
  1705            C        	;MOV	TEMP0,_RD
  1706 012C0 054D C        	INC	_RD
  1707            C      M 	JPNB	_RD,5,DIAL_NUM_STOP		; 超过，停止
       012C1 0F4D     1     JBS  _RD , 5 
       012C2 16CC     1     JMP  DIAL_NUM_STOP ,
  1708            C        	;MOV	TEMP0,_RD
  1709            C        	
  1710 012C3 12D5 C        	CALL	CHK_DIALNUM
  1711 012C4 0056 C        	MOV	TEMP0,A
  1712            C        	
  1713            C      M 	SUBA	TEMP0,@0X0F
       012C5 180F     1     MOV A,@( 15 )
       012C6 0116     1     SUB A, TEMP0 
  1714            C      M 	JPZ	DIAL_NUM_STOP			; 下一位的值==0XF，停止
       012C7 0C83     1     JBC  _STATUS , Z 
       012C8 16CC     1     JMP  DIAL_NUM_STOP ,
  1715            C      M 	MOV	TMR_DELAY,@25
       012C9 1819     1     MOV A,@( 25 )
       012CA 0075     1     MOV  TMR_DELAY ,A
  1716 012CB 16D4 C        	JMP	DIAL_NUM_RET
  1717            C        
  1718 012CC      C        DIAL_NUM_STOP:
  1719            C      M 	MOV	_RC,@DIAL_ADDR
       012CC 1884     1     MOV A,@( DIAL_ADDR )
       012CD 004C     1     MOV  _RC ,A
  1720 012CE 00CD C        	CLR	_RD
  1721 012CF 18FF C        	MOV	A,@CH_END
  1722            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       012D0 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       012D1 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       012D2 1E84     3     PAGE ( $ / 1024 ),
  1723 012D3 16D4 C        	JMP	DIAL_NUM_RET
  1724            C        
  1725 012D4      C        DIAL_NUM_RET:
  1726 012D4 0012 C        	RET
  1727            C        
  1728 012D5      C        CHK_DIALNUM:
  1729            C      M 	MOV	TEMP0,_RD
       012D5 040D     1     MOV A, _RD 
       012D6 0056     1     MOV  TEMP0 ,A
  1730            C      M 	CLRC
       012D7 0803     1     BC  _STATUS , C 
  1731 012D8 0616 C        	RRCA	TEMP0
  1732 012D9 1A0F C        	AND	A,@0X0F
  1733 012DA 1F85 C        	ADD	A,@(DIAL_ADDR+1)
  1734 012DB 004C C        	MOV	_RC,A
  1735            C        	
  1736            C      M 	JPB	TEMP0,0,$+3
       012DC 0C16     1     JBC  TEMP0 , 0 
       012DD 16E0     1     JMP ( $ + 3 ),
  1737 012DE 070D C        	SWAPA	_RD
  1738 012DF 16E1 C        	JMP	$+2
  1739 012E0 040D C        	MOV	A,_RD
  1740 012E1 1A0F C        	AND	A,@0X0F
  1741 012E2 0012 C        	RET
  1742            C        
  1743            C        
  1744            C        
  1745 012E3      C        STORE_DIALNUM:
  1746 012E3 0056 C        	MOV	TEMP0,A
  1747            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       012E4 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       012E5 088B     2     BC  _RB , 2 
  1748            C      M 	MOV	_RC,@(DIAL_ADDR)
       012E6 1884     1     MOV A,@( DIAL_ADDR )
       012E7 004C     1     MOV  _RC ,A
  1749            C      M 	JPB	_RD,7,STORE_DIALNUM_RET		; 有号码正在拨，不能存
       012E8 0DCD     1     JBC  _RD , 7 
       012E9 170E     1     JMP  STORE_DIALNUM_RET ,
  1750            C        	;JPB	_RD,6,$+3
  1751            C        	;MOV	_RD,@0X40
  1752            C      M 	SUBA	TEMP0,@CH_END
       012EA 18FF     1     MOV A,@( CH_END )
       012EB 0116     1     SUB A, TEMP0 
  1753            C      M 	JPZ	STORE_DIALNUM_END
       012EC 0C83     1     JBC  _STATUS , Z 
       012ED 1707     1     JMP  STORE_DIALNUM_END ,
  1754            C      M 	SUBA	TEMP0,@NUM_A
       012EE 180A     1     MOV A,@( NUM_A )
       012EF 0116     1     SUB A, TEMP0 
  1755            C      M 	JPC	STORE_DIALNUM_END
       012F0 0C03     1     JBC  _STATUS , C 
       012F1 1707     1     JMP  STORE_DIALNUM_END ,
  1756 012F2      C        STORE_DIALNUM_0:
  1757            C      M 	MOV	TEMP1,_RD
       012F2 040D     1     MOV A, _RD 
       012F3 0057     1     MOV  TEMP1 ,A
  1758 012F4 054D C        	INC	_RD
  1759            C      M 	CLRC
       012F5 0803     1     BC  _STATUS , C 
  1760 012F6 0617 C        	RRCA	TEMP1
  1761 012F7 1F85 C        	ADD	A,@(DIAL_ADDR+1)
  1762 012F8 004C C        	MOV	_RC,A
  1763            C      M 	JPB	TEMP1,0,STORE_DIALNUM_1
       012F9 0C17     1     JBC  TEMP1 , 0 
       012FA 1701     1     JMP  STORE_DIALNUM_1 ,
  1764            C      M 	AND	_RD,@0X0F
       012FB 180F     1     MOV A,@( 15 )
       012FC 02CD     1     AND  _RD ,A
  1765 012FD 0716 C        	SWAPA	TEMP0
  1766 012FE 1AF0 C        	AND	A,@0XF0
  1767 012FF 024D C        	OR	_RD,A
  1768 01300 1706 C        	JMP	STORE_DIALNUM_2
  1769 01301      C        STORE_DIALNUM_1:
  1770            C      M 	AND	_RD,@0XF0
       01301 18F0     1     MOV A,@( 240 )
       01302 02CD     1     AND  _RD ,A
  1771            C      M 	ANDA	TEMP0,@0X0F
       01303 180F     1     MOV A,@( 15 )
       01304 0296     1     AND A, TEMP0 
  1772 01305 024D C        	OR	_RD,A
  1773 01306      C        STORE_DIALNUM_2:
  1774 01306 170E C        	JMP	STORE_DIALNUM_RET
  1775 01307      C        STORE_DIALNUM_END:
  1776            C      M 	MOV	TEMP0,@0X0F
       01307 180F     1     MOV A,@( 15 )
       01308 0056     1     MOV  TEMP0 ,A
  1777 01309 12F2 C        	CALL	STORE_DIALNUM_0
  1778            C      M 	MOV	_RC,@DIAL_ADDR
       0130A 1884     1     MOV A,@( DIAL_ADDR )
       0130B 004C     1     MOV  _RC ,A
  1779            C      M 	MOV	_RD,@0X80			; 准备拨号
       0130C 1880     1     MOV A,@( 128 )
       0130D 004D     1     MOV  _RD ,A
  1780 0130E      C        STORE_DIALNUM_RET:
  1781 0130E 0012 C        	RET
  1782            C        
  1783            C        
  1784 0130F      C        INIT_DIAL:
  1785            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0130F 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01310 088B     2     BC  _RB , 2 
  1786            C      M 	CLRCIDRAM	@(DIAL_ADDR+1),@19,@0XFF
                      2  M  MOV  TEMP0 ,@(( DIAL_ADDR + 1 ))
       01311 1885     2     MOV A,@(( DIAL_ADDR + 1 ))
       01312 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 19 )
       01313 1813     2     MOV A,@( 19 )
       01314 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( 255 )
       01315 18FF     2     MOV A,@( 255 )
       01316 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CLR_CIDRAM ),
       01317 1178     2     CALL ( CLR_CIDRAM % 1024 ),
  1787            C      M 	MOV	_RC,@(DIAL_ADDR+0)
       01318 1884     1     MOV A,@(( DIAL_ADDR + 0 ))
       01319 004C     1     MOV  _RC ,A
  1788 0131A 00CD C        	CLR	_RD
  1789 0131B 0012 C        	RET
  1790            C        
  1791            C        
  1792            C        
  1793 0131C      C        DEL_FINISHED:				; 删除完成的命令
  1794            C      M 	BANK	0
       0131C 0984     1     BC  _RSR , 6 
       0131D 09C4     1     BC  _RSR , 7 
  1795            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0131E 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0131F 088B     2     BC  _RB , 2 
  1796 01320 0011 C        	DISI
  1797            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01321 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01322 004C     1     MOV  _RC ,A
  1798            C      M 	JPNB	_RD,7,DEL_FINISHED_END
       01323 0FCD     1     JBS  _RD , 7 
       01324 1752     1     JMP  DEL_FINISHED_END ,
  1799            C      M 	ANDA	_RD,@0X7F
       01325 187F     1     MOV A,@( 127 )
       01326 028D     1     AND A, _RD 
  1800            C      M 	JPZ	DEL_FINISHED_END
       01327 0C83     1     JBC  _STATUS , Z 
       01328 1752     1     JMP  DEL_FINISHED_END ,
  1801 01329 00D0 C        	CLR	INT_TEMP0
  1802 0132A      C        DEL_FINISHED_CHK_LOOP:
  1803 0132A 0550 C        	INC	INT_TEMP0
  1804            C      M 	ADDA	INT_TEMP0,@(TCP_ADDR+0)
       0132B 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       0132C 0390     1     ADD A, INT_TEMP0 
  1805 0132D 004C C        	MOV	_RC,A
  1806            C      M 	SUBA	_RD,@0XFF
       0132E 18FF     1     MOV A,@( 255 )
       0132F 010D     1     SUB A, _RD 
  1807            C      M 	JPNZ	DEL_FINISHED_CHK_LOOP
       01330 0E83     1     JBS  _STATUS , Z 
       01331 172A     1     JMP  DEL_FINISHED_CHK_LOOP ,
  1808            C        	
  1809            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01332 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01333 004C     1     MOV  _RC ,A
  1810            C      M 	SUB	_RD,INT_TEMP0
       01334 0410     1     MOV A, INT_TEMP0 
       01335 014D     1     SUB  _RD ,A
  1811            C      M 	ANDA	_RD,@0X7F
       01336 187F     1     MOV A,@( 127 )
       01337 028D     1     AND A, _RD 
  1812 01338 0051 C        	MOV	INT_TEMP1,A
  1813 01339 00D2 C        	CLR	INT_TEMP2
  1814 0133A      C        DEL_FINISHED_DEL_LOOP:
  1815            C      M 	SUBA	INT_TEMP2,INT_TEMP1
       0133A 0411     1     MOV A, INT_TEMP1 
       0133B 0112     1     SUB A, INT_TEMP2 
  1816            C      M 	JPZ	DEL_FINISHED_DEL_END
       0133C 0C83     1     JBC  _STATUS , Z 
       0133D 174B     1     JMP  DEL_FINISHED_DEL_END ,
  1817 0133E 0552 C        	INC	INT_TEMP2
  1818            C      M 	ADDA	INT_TEMP2,INT_TEMP0
       0133F 0410     1     MOV A, INT_TEMP0 
       01340 0392     1     ADD A, INT_TEMP2 
  1819 01341 1F99 C        	ADD	A,@(TCP_ADDR+0)
  1820 01342 004C C        	MOV	_RC,A
  1821            C      M 	MOV	INT_TEMP3,_RD
       01343 040D     1     MOV A, _RD 
       01344 0053     1     MOV  INT_TEMP3 ,A
  1822            C      M 	ADDA	INT_TEMP3,@(TCP_ADDR+0)
       01345 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01346 0393     1     ADD A, INT_TEMP3 
  1823 01347 004C C        	MOV	_RC,A
  1824            C      M 	MOV	_RD,INT_TEMP3
       01348 0413     1     MOV A, INT_TEMP3 
       01349 004D     1     MOV  _RD ,A
  1825 0134A 173A C        	JMP	DEL_FINISHED_DEL_LOOP
  1826            C        
  1827 0134B      C        DEL_FINISHED_DEL_END:
  1828            C      M 	MOV	_RC,@(TCP_ADDR+0)
       0134B 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       0134C 004C     1     MOV  _RC ,A
  1829            C      M 	ANDA	_RD,@0X7F
       0134D 187F     1     MOV A,@( 127 )
       0134E 028D     1     AND A, _RD 
  1830            C      M 	JPNZ	DEL_FINISHED_END
       0134F 0E83     1     JBS  _STATUS , Z 
       01350 1752     1     JMP  DEL_FINISHED_END ,
  1831 01351 00CD C        	CLR	_RD
  1832            C        
  1833 01352      C        DEL_FINISHED_END:
  1834 01352 0010 C        	ENI
  1835 01353 0012 C        	RET
  1836            C        
  1837            C        
  1838 01354      C        SEND_DESIRE:
  1839            C        	;BANK	1
  1840            C        	;CRAM	AUDIO_STATUS,4
  1841 01354      C        SEND_DESIRE_LOOP:
  1842            C      M 	JPB	_P7,P_REQ,SEND_DESIRE_RET
       01354 0C07     1     JBC  _P7 , P_REQ 
       01355 175F     1     JMP  SEND_DESIRE_RET ,
  1843            C      M 	BANK	0
       01356 0984     1     BC  _RSR , 6 
       01357 09C4     1     BC  _RSR , 7 
  1844            C      M 	PAGE	#SerIic
       01358 1E80     1     PAGE ( SERIIC / 1024 ),
  1845 01359 1353 C        	CALL	SerIic
  1846            C      M 	PAGE	#STOR_COMMAND
       0135A 1E84     1     PAGE ( STOR_COMMAND / 1024 ),
  1847 0135B 13BF C        	CALL	STOR_COMMAND
  1848            C      M 	PAGE	#STCP_CHK
       0135C 1E83     1     PAGE ( STCP_CHK / 1024 ),
  1849 0135D 1000 C        	CALL	STCP_CHK
  1850 0135E 1754 C        	JMP	SEND_DESIRE_LOOP
  1851            C        	
  1852 0135F      C        SEND_DESIRE_RET:
  1853 0135F 0012 C        	RET
  1854            C        
  1855 01360      C        CIDNUM_VERFY:
  1856 01360 0057 C        	MOV	TEMP1,A
  1857 01361 1D9F C        	SUB	A,@(0X9F)
  1858            C      M 	JPNC	CIDNUM_VERFY_2
       01362 0E03     1     JBS  _STATUS , C 
       01363 1777     1     JMP  CIDNUM_VERFY_2 ,
  1859            C      M 	XORA	_RD,TEMP1
       01364 0417     1     MOV A, TEMP1 
       01365 030D     1     XOR A, _RD 
  1860 01366 0058 C        	MOV	TEMP2,A
  1861 01367 1AF0 C        	AND	A,@(0XF0)
  1862            C      M 	JPNZ	CIDNUM_VERFY_1
       01368 0E83     1     JBS  _STATUS , Z 
       01369 1776     1     JMP  CIDNUM_VERFY_1 ,
  1863 0136A 0556 C        	INC	TEMP0
  1864            C      M 	ANDA	TEMP1,@(0X0F)
       0136B 180F     1     MOV A,@( 15 )
       0136C 0297     1     AND A, TEMP1 
  1865 0136D 1D09 C        	SUB	A,@(0X09)
  1866            C      M 	JPNC	CIDNUM_VERFY_2
       0136E 0E03     1     JBS  _STATUS , C 
       0136F 1777     1     JMP  CIDNUM_VERFY_2 ,
  1867            C      M 	ANDA	TEMP2,@(0X0F)
       01370 180F     1     MOV A,@( 15 )
       01371 0298     1     AND A, TEMP2 
  1868            C      M 	JPNZ	CIDNUM_VERFY_1
       01372 0E83     1     JBS  _STATUS , Z 
       01373 1776     1     JMP  CIDNUM_VERFY_1 ,
  1869 01374 0556 C        	INC	TEMP0
  1870 01375 0012 C        	RET
  1871 01376      C        CIDNUM_VERFY_1:
  1872 01376 00D6 C        	CLR	TEMP0
  1873 01377      C        CIDNUM_VERFY_2:
  1874            C      M 	SUBA	TEMP0,TEMP0
       01377 0416     1     MOV A, TEMP0 
       01378 0116     1     SUB A, TEMP0 
  1875 01379 0012 C        	RET
  1876            C        
  1877 0137A      C        CIDNUM_MODIFY:				; 将与区域码相同的地方去掉，只修改CIDBANK 1的62~70部分
  1878            C      M 	BANK	0
       0137A 0984     1     BC  _RSR , 6 
       0137B 09C4     1     BC  _RSR , 7 
  1879            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0137C 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0137D 088B     2     BC  _RB , 2 
  1880            C      M 	MOV	TEMP0,@(0)
       0137E 1800     1     MOV A,@( 0 )
       0137F 0056     1     MOV  TEMP0 ,A
  1881            C      M 	MOV	_RC,@(CID_ADDR+3)
       01380 183F     1     MOV A,@(( CID_ADDR + 3 ))
       01381 004C     1     MOV  _RC ,A
  1882 01382 0430 C        	MOV	A,LCALL12
  1883 01383 1360 C        	CALL	CIDNUM_VERFY
  1884            C      M 	JPZ	CIDNUM_MODIFY_SHIFT
       01384 0C83     1     JBC  _STATUS , Z 
       01385 178E     1     JMP  CIDNUM_MODIFY_SHIFT ,
  1885 01386 054C C        	INC	_RC
  1886 01387 0431 C        	MOV	A,LCALL34
  1887 01388 1360 C        	CALL	CIDNUM_VERFY
  1888            C      M 	JPZ	CIDNUM_MODIFY_SHIFT
       01389 0C83     1     JBC  _STATUS , Z 
       0138A 178E     1     JMP  CIDNUM_MODIFY_SHIFT ,
  1889 0138B 054C C        	INC	_RC
  1890 0138C 0432 C        	MOV	A,LCALL5
  1891 0138D 178E C        	JMP	CIDNUM_MODIFY_SHIFT
  1892            C        
  1893            C        ;	BANK	0
  1894            C        ;	CIDBANK	1
  1895            C        ;	MOV	TEMP0,@(0)
  1896            C        ;	MOV	_RC,@(CID_ADDR+3)
  1897            C        ;	XORA	_RD,LCALL12
  1898            C        ;	MOV	TEMP1,A
  1899            C        ;	AND	A,@(0XF0)
  1900            C        ;	JPNZ	CIDNUM_MODIFY_SHIFT
  1901            C        ;	INC	TEMP0
  1902            C        ;	ANDA	TEMP1,@(0X0F)
  1903            C        ;	JPNZ	CIDNUM_MODIFY_SHIFT
  1904            C        ;	INC	TEMP0
  1905            C        ;	INC	_RC
  1906            C        ;	XORA	_RD,LCALL34
  1907            C        ;	MOV	TEMP1,A
  1908            C        ;	AND	A,@(0XF0)
  1909            C        ;	JPNZ	CIDNUM_MODIFY_SHIFT
  1910            C        ;	INC	TEMP0
  1911            C        ;	ANDA	TEMP1,@(0X0F)
  1912            C        ;	JPNZ	CIDNUM_MODIFY_SHIFT
  1913            C        ;	INC	TEMP0
  1914            C        ;	INC	_RC
  1915            C        ;	XORA	_RD,LCALL5
  1916            C        ;	AND	A,@(0XF0)
  1917            C        ;	JPNZ	CIDNUM_MODIFY_SHIFT
  1918            C        ;	INC	TEMP0
  1919 0138E      C        CIDNUM_MODIFY_SHIFT:
  1920 0138E 0416 C        	MOV	A,TEMP0
  1921            C      M 	JPZ	CIDNUM_MODIFY_RET
       0138F 0C83     1     JBC  _STATUS , Z 
       01390 17BE     1     JMP  CIDNUM_MODIFY_RET ,
  1922            C      M 	MOV	_RC,@(CID_ADDR+2)
       01391 183E     1     MOV A,@(( CID_ADDR + 2 ))
       01392 004C     1     MOV  _RC ,A
  1923            C      M 	SUB	_RD,TEMP0
       01393 0416     1     MOV A, TEMP0 
       01394 014D     1     SUB  _RD ,A
  1924            C      M 	MOV	TEMP1,@(CID_ADDR+3)
       01395 183F     1     MOV A,@(( CID_ADDR + 3 ))
       01396 0057     1     MOV  TEMP1 ,A
  1925            C        
  1926 01397      C        CIDNUM_MODIFY_SHIFT_LOOP:
  1927            C      M 	CLRC
       01397 0803     1     BC  _STATUS , C 
  1928 01398 0616 C        	RRCA	TEMP0
  1929 01399 0397 C        	ADD	A,TEMP1
  1930 0139A 004C C        	MOV	_RC,A
  1931            C      M 	SUBA	_RC,@(CID_ADDR+11)
       0139B 1847     1     MOV A,@(( CID_ADDR + 11 ))
       0139C 010C     1     SUB A, _RC 
  1932            C      M 	JPC	CIDNUM_MODIFY_SHIFT_2
       0139D 0C03     1     JBC  _STATUS , C 
       0139E 17B4     1     JMP  CIDNUM_MODIFY_SHIFT_2 ,
  1933            C      M 	MOV	TEMP2,_RD
       0139F 040D     1     MOV A, _RD 
       013A0 0058     1     MOV  TEMP2 ,A
  1934            C      M 	JPNB	TEMP0,0,CIDNUM_MODIFY_SHIFT_1
       013A1 0E16     1     JBS  TEMP0 , 0 
       013A2 17AE     1     JMP  CIDNUM_MODIFY_SHIFT_1 ,
  1935 013A3 0758 C        	SWAP	TEMP2
  1936            C      M 	OR	TEMP2,@(0X0F)
       013A4 180F     1     MOV A,@( 15 )
       013A5 0258     1     OR  TEMP2 ,A
  1937            C      M 	SUBA	_RC,@(CID_ADDR+10)
       013A6 1846     1     MOV A,@(( CID_ADDR + 10 ))
       013A7 010C     1     SUB A, _RC 
  1938            C      M 	JPC	CIDNUM_MODIFY_SHIFT_1
       013A8 0C03     1     JBC  _STATUS , C 
       013A9 17AE     1     JMP  CIDNUM_MODIFY_SHIFT_1 ,
  1939 013AA 054C C        	INC	_RC
  1940 013AB 070D C        	SWAPA	_RD
  1941 013AC 19F0 C        	OR	A,@(0XF0)
  1942 013AD 02D8 C        	AND	TEMP2,A
  1943 013AE      C        CIDNUM_MODIFY_SHIFT_1:
  1944            C      M 	MOV	_RC,TEMP1
       013AE 0417     1     MOV A, TEMP1 
       013AF 004C     1     MOV  _RC ,A
  1945            C      M 	MOV	_RD,TEMP2
       013B0 0418     1     MOV A, TEMP2 
       013B1 004D     1     MOV  _RD ,A
  1946 013B2 0557 C        	INC	TEMP1
  1947 013B3 1797 C        	JMP	CIDNUM_MODIFY_SHIFT_LOOP
  1948 013B4      C        CIDNUM_MODIFY_SHIFT_2:
  1949            C      M 	MOV	_RC,TEMP1
       013B4 0417     1     MOV A, TEMP1 
       013B5 004C     1     MOV  _RC ,A
  1950            C      M 	SUBA	_RC,@(CID_ADDR+11)
       013B6 1847     1     MOV A,@(( CID_ADDR + 11 ))
       013B7 010C     1     SUB A, _RC 
  1951            C      M 	JPC	CIDNUM_MODIFY_RET
       013B8 0C03     1     JBC  _STATUS , C 
       013B9 17BE     1     JMP  CIDNUM_MODIFY_RET ,
  1952            C      M 	MOV	_RD,@0XFF
       013BA 18FF     1     MOV A,@( 255 )
       013BB 004D     1     MOV  _RD ,A
  1953 013BC 0557 C        	INC	TEMP1
  1954 013BD 1797 C        	JMP	CIDNUM_MODIFY_SHIFT_LOOP
  1955 013BE      C        CIDNUM_MODIFY_RET:
  1956 013BE 0012 C        	RET
  1957            C        
  1958            C        
  1959            C        
  1960            C        
  1961 013BF      C        STOR_COMMAND:
  1962            C      M 	JPNB	SER_FLAG,7,STOR_COMMAND_END
       013BF 0FFC     1     JBS  SER_FLAG , 7 
       013C0 17E9     1     JMP  STOR_COMMAND_END ,
  1963            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       013C1 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       013C2 088B     2     BC  _RB , 2 
  1964            C      M 	MOV	_RC,@(TCP_ADDR+0)
       013C3 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       013C4 004C     1     MOV  _RC ,A
  1965            C      M 	JPB	_RD,7,$+3
       013C5 0DCD     1     JBC  _RD , 7 
       013C6 17C9     1     JMP ( $ + 3 ),
  1966            C      M 	MOV	_RD,@0X80
       013C7 1880     1     MOV A,@( 128 )
       013C8 004D     1     MOV  _RD ,A
  1967            C        	
  1968 013C9 00FE C        	CLR	SER_SEND
  1969 013CA      C        STOR_COMMAND_LOOP:					; 将收到的命令保存至COMMAND区域
  1970            C        
  1971            C      M 	SUBA	SER_SEND,SER_CONT
       013CA 043D     1     MOV A, SER_CONT 
       013CB 013E     1     SUB A, SER_SEND 
  1972            C      M 	JPZ	STOR_COMMAND_1
       013CC 0C83     1     JBC  _STATUS , Z 
       013CD 17DE     1     JMP  STOR_COMMAND_1 ,
  1973            C        	
  1974            C      M 	ADDA	SER_SEND,@SER_BASE
       013CE 18E0     1     MOV A,@( SER_BASE )
       013CF 03BE     1     ADD A, SER_SEND 
  1975 013D0 004C C        	MOV	_RC,A
  1976            C      M 	MOV	SER_FLAG,_RD
       013D1 040D     1     MOV A, _RD 
       013D2 007C     1     MOV  SER_FLAG ,A
  1977            C        	
  1978            C      M 	MOV	_RC,@(TCP_ADDR+0)
       013D3 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       013D4 004C     1     MOV  _RC ,A
  1979 013D5 054D C        	INC	_RD
  1980            C      M 	ANDA	_RD,@0X7F
       013D6 187F     1     MOV A,@( 127 )
       013D7 028D     1     AND A, _RD 
  1981 013D8 1F99 C        	ADD	A,@(TCP_ADDR+0)
  1982 013D9 004C C        	MOV	_RC,A
  1983            C      M 	MOV	_RD,SER_FLAG
       013DA 043C     1     MOV A, SER_FLAG 
       013DB 004D     1     MOV  _RD ,A
  1984            C        	
  1985 013DC 057E C        	INC	SER_SEND
  1986 013DD 17CA C        	JMP	STOR_COMMAND_LOOP
  1987 013DE      C        STOR_COMMAND_1:
  1988            C      M 	MOV	_RC,@(TCP_ADDR+0)
       013DE 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       013DF 004C     1     MOV  _RC ,A
  1989 013E0 054D C        	INC	_RD
  1990            C      M 	ANDA	_RD,@0X7F
       013E1 187F     1     MOV A,@( 127 )
       013E2 028D     1     AND A, _RD 
  1991 013E3 1F99 C        	ADD	A,@(TCP_ADDR+0)
  1992 013E4 004C C        	MOV	_RC,A
  1993            C      M 	MOV	_RD,@0XFF
       013E5 18FF     1     MOV A,@( 255 )
       013E6 004D     1     MOV  _RD ,A
  1994            C        	
  1995 013E7 00FE C        	CLR	SER_SEND
  1996            C        	;CLR	SER_CONT
  1997 013E8 00FC C        	CLR	SER_FLAG
  1998            C        	;MOV	A,SER_CONT
  1999            C        	;BANK	1
  2000            C        	;ADD	R1_STCPSP,A
  2001            C        	;AND	R1_STCPSP,@3F
  2002            C        	;BANK	0
  2003 013E9      C        STOR_COMMAND_END:
  2004 013E9 0012 C        	RET
  2005            C        
  2006            C        
  2007            C        
   506                     
   507                     include	"math.asm"
     1            C        ORG	0X1100
     2            C        /***************************************
     3            C        16进制转10进制
     4            C        源数GENE_A
     5            C        结果：EXT_RESULT,RESULT
     6            C        ***************************************/
     7 01100      C        MATH_HTD:
     8 01100 00D8 C        	CLR	RESULT
     9 01101 00D9 C        	CLR	EXT_RESULT
    10            C      M 	MOV	MATH_CONT,@8
       01102 1808     1     MOV A,@( 8 )
       01103 005A     1     MOV  MATH_CONT ,A
    11 01104      C        MATH_HTD_LOOP:
    12            C      M 	ADDA	RESULT,@0X03
       01104 1803     1     MOV A,@( 3 )
       01105 0398     1     ADD A, RESULT 
    13 01106 0057 C        	MOV	GENE_B,A
    14            C      M 	JPNB	GENE_B,3,MATH_HTD_LOOP_1
       01107 0ED7     1     JBS  GENE_B , 3 
       01108 150B     1     JMP  MATH_HTD_LOOP_1 ,
    15            C      M 	MOV	RESULT,GENE_B
       01109 0417     1     MOV A, GENE_B 
       0110A 0058     1     MOV  RESULT ,A
    16 0110B      C        MATH_HTD_LOOP_1:
    17            C      M 	ADDA	RESULT,@0X30
       0110B 1830     1     MOV A,@( 48 )
       0110C 0398     1     ADD A, RESULT 
    18 0110D 0057 C        	MOV	GENE_B,A
    19            C      M 	JPNB	GENE_B,7,MATH_HTD_LOOP_2
       0110E 0FD7     1     JBS  GENE_B , 7 
       0110F 1512     1     JMP  MATH_HTD_LOOP_2 ,
    20            C      M 	MOV	RESULT,GENE_B
       01110 0417     1     MOV A, GENE_B 
       01111 0058     1     MOV  RESULT ,A
    21 01112      C        MATH_HTD_LOOP_2:
    22            C      M 	CLRC
       01112 0803     1     BC  _STATUS , C 
    23 01113 06D6 C        	RLC	GENE_A
    24 01114 06D8 C        	RLC	RESULT
    25 01115 06D9 C        	RLC	EXT_RESULT
    26            C        	
    27 01116 01DA C        	DEC	MATH_CONT
    28            C      M 	JPNZ	MATH_HTD_LOOP
       01117 0E83     1     JBS  _STATUS , Z 
       01118 1504     1     JMP  MATH_HTD_LOOP ,
    29 01119 0418 C        	MOV	A,RESULT
    30 0111A 0012 C        	RET
    31            C        
    32            C        /***************************************
    33            C        16进制乘法
    34            C        GENE_A*GENE_B=EXT_RESULT,RESULT
    35            C        ***************************************/
    36            C        
    37 0111B      C        MATH_MUL:
    38 0111B 00D8 C        	CLR	RESULT
    39 0111C 00D9 C        	CLR	EXT_RESULT
    40            C      M 	MOV	MATH_CONT,@8
       0111D 1808     1     MOV A,@( 8 )
       0111E 005A     1     MOV  MATH_CONT ,A
    41 0111F      C        MATH_MUL_LOOP:
    42            C      M 	CLRC
       0111F 0803     1     BC  _STATUS , C 
    43 01120 0658 C        	RRC	RESULT
    44 01121 0659 C        	RRC	EXT_RESULT
    45 01122 0657 C        	RRC	GENE_B
    46            C      M 	JPNC	MATH_MUL_LOOP_1
       01123 0E03     1     JBS  _STATUS , C 
       01124 152A     1     JMP  MATH_MUL_LOOP_1 ,
    47            C      M 	ADD	RESULT,GENE_A
       01125 0416     1     MOV A, GENE_A 
       01126 03D8     1     ADD  RESULT ,A
    48            C      M 	JPNC	MATH_MUL_LOOP_1
       01127 0E03     1     JBS  _STATUS , C 
       01128 152A     1     JMP  MATH_MUL_LOOP_1 ,
    49 01129 0559 C        	INC	EXT_RESULT
    50 0112A      C        MATH_MUL_LOOP_1:
    51 0112A 01DA C        	DEC	MATH_CONT
    52            C      M 	JPNZ	MATH_MUL_LOOP
       0112B 0E83     1     JBS  _STATUS , Z 
       0112C 151F     1     JMP  MATH_MUL_LOOP ,
    53 0112D 0012 C        	RET
    54            C        	
    55            C        
    56            C        
    57 0112E      C        MATH_ADD:
    58            C      M 	CLRC
       0112E 0803     1     BC  _STATUS , C 
    59            C      M 	ADD	RESULT,GENE_B
       0112F 0417     1     MOV A, GENE_B 
       01130 03D8     1     ADD  RESULT ,A
    60            C      M 	JPNC	$+2
       01131 0E03     1     JBS  _STATUS , C 
       01132 1534     1     JMP ( $ + 2 ),
    61 01133 0559 C        	INC	EXT_RESULT
    62            C      M 	ADD	EXT_RESULT,GENE_A
       01134 0416     1     MOV A, GENE_A 
       01135 03D9     1     ADD  EXT_RESULT ,A
    63 01136 0012 C        	RET
    64            C        
    65            C        
    66            C        ;修改当前值
    67 01137      C        MATH_MODULE:
    68            C      M 	SUBA	MOD_MAX,CURRENT_VALUE
       01137 0418     1     MOV A, CURRENT_VALUE 
       01138 0117     1     SUB A, MOD_MAX 
    69            C      M 	JPNC	MATH_MODULE_OUT
       01139 0E03     1     JBS  _STATUS , C 
       0113A 1540     1     JMP  MATH_MODULE_OUT ,
    70            C      M 	SUBA	CURRENT_VALUE,MOD_MIN
       0113B 0416     1     MOV A, MOD_MIN 
       0113C 0118     1     SUB A, CURRENT_VALUE 
    71            C      M 	JPNC	MATH_MODULE_OUT
       0113D 0E03     1     JBS  _STATUS , C 
       0113E 1540     1     JMP  MATH_MODULE_OUT ,
    72 0113F 1547 C        	JMP	MATH_MODULE_1
    73 01140      C        MATH_MODULE_OUT:				; 出界
    74            C      M 	JPB	INCREMENT,7,$+4
       01140 0DD9     1     JBC  INCREMENT , 7 
       01141 1545     1     JMP ( $ + 4 ),
    75            C      M 	MOV	CURRENT_VALUE,MOD_MIN
       01142 0416     1     MOV A, MOD_MIN 
       01143 0058     1     MOV  CURRENT_VALUE ,A
    76 01144 1547 C        	JMP	$+3
    77            C      M 	MOV	CURRENT_VALUE,MOD_MAX
       01145 0417     1     MOV A, MOD_MAX 
       01146 0058     1     MOV  CURRENT_VALUE ,A
    78 01147      C        MATH_MODULE_1:
    79            C      M 	SUBA	MOD_MAX,MOD_MIN
       01147 0416     1     MOV A, MOD_MIN 
       01148 0117     1     SUB A, MOD_MAX 
    80 01149 1F01 C        	ADD	A,@1
    81 0114A 005A C        	MOV	MOD_TEMP,A			; 模
    82 0114B      C        MATH_MODULE_2:
    83            C      M 	ANDA	INCREMENT,@0X7F
       0114B 187F     1     MOV A,@( 127 )
       0114C 0299     1     AND A, INCREMENT 
    84 0114D 011A C        	SUB	A,MOD_TEMP
    85            C      M 	JPC	MATH_MODULE_3
       0114E 0C03     1     JBC  _STATUS , C 
       0114F 1553     1     JMP  MATH_MODULE_3 ,
    86            C      M 	SUB	INCREMENT,MOD_TEMP
       01150 041A     1     MOV A, MOD_TEMP 
       01151 0159     1     SUB  INCREMENT ,A
    87 01152 154B C        	JMP	MATH_MODULE_2
    88 01153      C        MATH_MODULE_3:
    89            C      M 	JPB	INCREMENT,7,MATH_MODULE_4
       01153 0DD9     1     JBC  INCREMENT , 7 
       01154 1559     1     JMP  MATH_MODULE_4 ,
    90            C      M 	SUBA	MOD_TEMP,INCREMENT
       01155 0419     1     MOV A, INCREMENT 
       01156 011A     1     SUB A, MOD_TEMP 
    91 01157 0398 C        	ADD	A,CURRENT_VALUE
    92 01158 155C C        	JMP	MATH_MODULE_5
    93 01159      C        MATH_MODULE_4:
    94            C      M 	CRAM	INCREMENT,7
       01159 09D9     1     BC  INCREMENT , 7 
    95            C      M 	ADDA	CURRENT_VALUE,INCREMENT
       0115A 0419     1     MOV A, INCREMENT 
       0115B 0398     1     ADD A, CURRENT_VALUE 
    96 0115C      C        MATH_MODULE_5:
    97 0115C 0058 C        	MOV	CURRENT_VALUE,A
    98            C      M 	SUBA	MOD_MAX,CURRENT_VALUE
       0115D 0418     1     MOV A, CURRENT_VALUE 
       0115E 0117     1     SUB A, MOD_MAX 
    99            C      M 	JPC	$+3
       0115F 0C03     1     JBC  _STATUS , C 
       01160 1563     1     JMP ( $ + 3 ),
   100            C      M 	SUB	CURRENT_VALUE,MOD_TEMP
       01161 041A     1     MOV A, MOD_TEMP 
       01162 0158     1     SUB  CURRENT_VALUE ,A
   101 01163 0012 C        	RET
   102            C        
   103            C        ; 子程序
   104            C        
   105            C        COPYCIDRAM	MACRO	@SOURCE_ADDR,@TARGET_ADDR,@END_ADDR
   106            C        ; 拷贝CID RAM中的数据	源地址,目标地址,结束地址
   107            C        	MOV	TEMP0,@SOURCE_ADDR
   108            C        	MOV	TEMP1,@TARGET_ADDR
   109            C        	MOV	TEMP2,@END_ADDR
   110            C        	CALL	#COPY_CIDRAM
   111            C        	ENDM
   112            C        COPYCIDRAM	MACRO	SOURCE_REG,TARGET_REG,END_REG
   113            C        	MOV	TEMP0,SOURCE_REG
   114            C        	MOV	TEMP1,TARGET_REG
   115            C        	MOV	TEMP2,END_REG
   116            C        	CALL	#COPY_CIDRAM
   117            C        	ENDM
   118            C        COPYCIDRAM	MACRO	SOURCE_REG,@TARGET_ADDR,END_REG
   119            C        	MOV	TEMP0,SOURCE_REG
   120            C        	MOV	TEMP1,@TARGET_ADDR
   121            C        	MOV	TEMP2,END_REG
   122            C        	CALL	#COPY_CIDRAM
   123            C        	ENDM
   124            C        COPYCIDRAM	MACRO	@SOURCE_ADDR,TARGET_REG,END_REG
   125            C        	MOV	TEMP0,@SOURCE_ADDR
   126            C        	MOV	TEMP1,TARGET_REG
   127            C        	MOV	TEMP2,END_REG
   128            C        	CALL	#COPY_CIDRAM
   129            C        	ENDM
   130            C        
   131 01164      C        COPY_CIDRAM:
   132 01164 00D9 C        	CLR	TEMP3
   133 01165      C        COPY_CIDRAM_LOOP:
   134            C      M 	ADDA	TEMP0,TEMP3
       01165 0419     1     MOV A, TEMP3 
       01166 0396     1     ADD A, TEMP0 
   135 01167 004C C        	MOV	_RC,A
   136 01168 0118 C        	SUB	A,TEMP2
   137            C      M 	JPZ	COPY_CIDRAM_RET
       01169 0C83     1     JBC  _STATUS , Z 
       0116A 1577     1     JMP  COPY_CIDRAM_RET ,
   138            C      M 	MOV	TEMP4,_RD
       0116B 040D     1     MOV A, _RD 
       0116C 005A     1     MOV  TEMP4 ,A
   139            C      M 	ADDA	TEMP1,TEMP3
       0116D 0419     1     MOV A, TEMP3 
       0116E 0397     1     ADD A, TEMP1 
   140 0116F 004C C        	MOV	_RC,A
   141 01170 0118 C        	SUB	A,TEMP2
   142            C      M 	JPZ	COPY_CIDRAM_RET
       01171 0C83     1     JBC  _STATUS , Z 
       01172 1577     1     JMP  COPY_CIDRAM_RET ,
   143            C      M 	MOV	_RD,TEMP4
       01173 041A     1     MOV A, TEMP4 
       01174 004D     1     MOV  _RD ,A
   144 01175 0559 C        	INC	TEMP3
   145 01176 1565 C        	JMP	COPY_CIDRAM_LOOP
   146 01177      C        COPY_CIDRAM_RET:
   147 01177 0012 C        	RET
   148            C        
   149            C        CLRCIDRAM	MACRO	@RAM_ADDR,@SIZE,@CLR_CH
   150            C        ; 清CID RAM中的数据	首地址,大小,空字符
   151            C        	MOV	TEMP0,@RAM_ADDR
   152            C        	MOV	TEMP1,@SIZE
   153            C        	MOV	TEMP2,@CLR_CH
   154            C        	CALL	#CLR_CIDRAM
   155            C        	ENDM
   156            C        CLRCIDRAM	MACRO	REG,@SIZE,@CLR_CH
   157            C        	MOV	TEMP0,REG
   158            C        	MOV	TEMP1,@SIZE
   159            C        	MOV	TEMP2,@CLR_CH
   160            C        	CALL	#CLR_CIDRAM
   161            C        	ENDM
   162            C        
   163            C        CLRCIDRAM	MACRO	REG,SIZE,@CLR_CH
   164            C        	MOV	TEMP0,REG
   165            C        	MOV	TEMP1,SIZE
   166            C        	MOV	TEMP2,@CLR_CH
   167            C        	CALL	#CLR_CIDRAM
   168            C        	ENDM
   169            C        
   170 01178      C        CLR_CIDRAM:
   171 01178 00D9 C        	CLR	TEMP3
   172 01179      C        CLR_CIDRAM_LOOP:
   173            C      M 	SUBA	TEMP1,TEMP3
       01179 0419     1     MOV A, TEMP3 
       0117A 0117     1     SUB A, TEMP1 
   174            C      M 	JPZ	CLR_CIDRAM_RET
       0117B 0C83     1     JBC  _STATUS , Z 
       0117C 1584     1     JMP  CLR_CIDRAM_RET ,
   175            C      M 	ADDA	TEMP0,TEMP3
       0117D 0419     1     MOV A, TEMP3 
       0117E 0396     1     ADD A, TEMP0 
   176 0117F 004C C        	MOV	_RC,A
   177            C      M 	MOV	_RD,TEMP2
       01180 0418     1     MOV A, TEMP2 
       01181 004D     1     MOV  _RD ,A
   178 01182 0559 C        	INC	TEMP3
   179 01183 1579 C        	JMP	CLR_CIDRAM_LOOP
   180 01184      C        CLR_CIDRAM_RET:
   181 01184 0012 C        	RET
   182            C        	
   183            C        CHKLEFTBLANK	MACRO	@RAM_ADDR,@SIZE,@CLR_CH
   184            C        ; 检查缓冲区左边的空字符的个数
   185            C        	MOV	TEMP0,@RAM_ADDR
   186            C        	MOV	TEMP1,@SIZE
   187            C        	MOV	TEMP2,@CLR_CH
   188            C        	CALL	#CHK_LEFTBLANK
   189            C        	ENDM
   190 01185      C        CHK_LEFTBLANK:
   191 01185 00D9 C        	CLR	TEMP3
   192 01186 00DA C        	CLR	TEMP4
   193 01187      C        CHK_LEFTBLANK_LOOP:
   194            C      M 	SUBA	TEMP1,TEMP3
       01187 0419     1     MOV A, TEMP3 
       01188 0117     1     SUB A, TEMP1 
   195            C      M 	JPZ	CHK_LEFTBLANK_RET
       01189 0C83     1     JBC  _STATUS , Z 
       0118A 1595     1     JMP  CHK_LEFTBLANK_RET ,
   196            C      M 	ADDA	TEMP0,TEMP3
       0118B 0419     1     MOV A, TEMP3 
       0118C 0396     1     ADD A, TEMP0 
   197 0118D 004C C        	MOV	_RC,A
   198            C      M 	SUBA	_RD,TEMP2
       0118E 0418     1     MOV A, TEMP2 
       0118F 010D     1     SUB A, _RD 
   199            C      M 	JPNZ	CHK_LEFTBLANK_RET
       01190 0E83     1     JBS  _STATUS , Z 
       01191 1595     1     JMP  CHK_LEFTBLANK_RET ,
   200 01192 0559 C        	INC	TEMP3
   201 01193 055A C        	INC	TEMP4
   202 01194 1587 C        	JMP	CHK_LEFTBLANK_LOOP
   203 01195      C        CHK_LEFTBLANK_RET:
   204 01195 041A C        	MOV	A,TEMP4
   205 01196 0012 C        	RET
   206            C        
   207            C        CHKRIGHTBLANK	MACRO	@RAM_ADDR,@SIZE,@CLR_CH
   208            C        ; 检查缓冲区右边的空字符的个数
   209            C        	MOV	TEMP0,@RAM_ADDR
   210            C        	MOV	TEMP1,@SIZE
   211            C        	MOV	TEMP2,@CLR_CH
   212            C        	CALL	#CHK_RIGHTBLANK
   213            C        	ENDM
   214            C        
   215 01197      C        CHK_RIGHTBLANK:
   216 01197 00DA C        	CLR	TEMP4
   217            C      M 	MOV	TEMP3,TEMP1
       01198 0417     1     MOV A, TEMP1 
       01199 0059     1     MOV  TEMP3 ,A
   218 0119A      C        CHK_RIGHTBLANK_LOOP:
   219 0119A 01D9 C        	DEC	TEMP3
   220            C      M 	JPZ	CHK_RIGHTBLANK_RET
       0119B 0C83     1     JBC  _STATUS , Z 
       0119C 15A6     1     JMP  CHK_RIGHTBLANK_RET ,
   221            C      M 	ADDA	TEMP0,TEMP3
       0119D 0419     1     MOV A, TEMP3 
       0119E 0396     1     ADD A, TEMP0 
   222 0119F 004C C        	MOV	_RC,A
   223            C      M 	SUBA	_RD,TEMP2
       011A0 0418     1     MOV A, TEMP2 
       011A1 010D     1     SUB A, _RD 
   224            C      M 	JPNZ	CHK_RIGHTBLANK_RET
       011A2 0E83     1     JBS  _STATUS , Z 
       011A3 15A6     1     JMP  CHK_RIGHTBLANK_RET ,
   225 011A4 055A C        	INC	TEMP4
   226 011A5 159A C        	JMP	CHK_RIGHTBLANK_LOOP
   227 011A6      C        CHK_RIGHTBLANK_RET:
   228 011A6 041A C        	MOV	A,TEMP4
   229 011A7 0012 C        	RET
   230            C        
   231            C        ; 子程序结束
   232            C        
   508                     ;以下占用1400~1FFF
   509                     ; 显示模块
   510                     include	"VGA.asm"
     1            C        ORG	0X1400
     2            C        /***************************************
     3            C        按控制器的模式输入显示值。
     4            C        
     5            C        按顺序依次输入到缓冲区中，
     6            C        依照风格将缓冲区中的数值整理到显示区中
     7            C        
     8            C        缓冲区大小32
     9            C        显示区大小16
    10            C        
    11            C        控制器标志：
    12            C        .6~.5	风格选择
    13            C        ***************************************/
    14            C        
    15            C        
    16            C        ; 显示印花，调用一次即刷新8个印花。
    17 01400      C        VGA_STAMP:
    18 01400 0056 C        	MOV	TEMP0,A
    19            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       01401 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01402 088B     2     BC  _RB , 2 
    20            C      M 	MOV	_RC,@(LCD_CTRL+1)
       01403 1881     1     MOV A,@(( LCD_CTRL + 1 ))
       01404 004C     1     MOV  _RC ,A
    21            C      M 	MOV	_RD,TEMP0
       01405 0416     1     MOV A, TEMP0 
       01406 004D     1     MOV  _RD ,A
    22 01407 0012 C        	RET
    23            C        
    24            C        ; 显示第一行的数字，每调用一次，依次存入在数字寄存器中。
    25            C        ; 第一行只有一种模式
    26 01408      C        VGA_NUM1:
    27 01408 0056 C        	MOV	TEMP0,A
    28            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       01409 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0140A 088B     2     BC  _RB , 2 
    29            C      M 	MOV	_RC,@(VGA_ADDR+2)
       0140B 18AE     1     MOV A,@(( VGA_ADDR + 2 ))
       0140C 004C     1     MOV  _RC ,A
    30            C      M 	SUBA	TEMP0,@CH_END
       0140D 18FF     1     MOV A,@( CH_END )
       0140E 0116     1     SUB A, TEMP0 
    31            C      M 	JPZ	VGA_NUM1_END
       0140F 0C83     1     JBC  _STATUS , Z 
       01410 1422     1     JMP  VGA_NUM1_END ,
    32 01411 040D C        	MOV	A,_RD
    33            C      M 	JPZ	VGA_NUM1_BEGIN
       01412 0C83     1     JBC  _STATUS , Z 
       01413 1420     1     JMP  VGA_NUM1_BEGIN ,
    34 01414 1A1F C        	AND	A,@0X1F
    35 01415 0057 C        	MOV	TEMP1,A
    36 01416 1D0A C        	SUB	A,@10
    37            C      M 	JPNC	VGA_NUM1_RET				; >=10超过要求，数据丢弃
       01417 0E03     1     JBS  _STATUS , C 
       01418 141F     1     JMP  VGA_NUM1_RET ,
    38 01419 054D C        	INC	_RD
    39            C      M 	ADDA	TEMP1,@(LCD_CTRL+1)
       0141A 1881     1     MOV A,@(( LCD_CTRL + 1 ))
       0141B 0397     1     ADD A, TEMP1 
    40 0141C 004C C        	MOV	_RC,A
    41            C      M 	MOV	_RD,TEMP0
       0141D 0416     1     MOV A, TEMP0 
       0141E 004D     1     MOV  _RD ,A
    42 0141F      C        VGA_NUM1_RET:
    43 0141F 0012 C        	RET
    44            C        	;JMP	VIEW_REVISE_NUM1
    45            C        
    46 01420      C        VGA_NUM1_BEGIN:
    47 01420 054D C        	INC	_RD
    48            C        	;CLRCIDRAM	@(LCD_CTRL+2),@10,@NUM_BLANK
    49 01421 0012 C        	RET
    50            C        	;CALL	BLANK_NUM1
    51            C        	;JMP	VIEW_REVISE_NUM1
    52            C        
    53 01422      C        VGA_NUM1_END:
    54 01422 00CD C        	CLR	_RD
    55 01423 0012 C        	RET
    56            C        	
    57            C        
    58            C        ; 显示第二行的数字
    59            C        ; 依次存入到寄存器中。
    60 01424      C        VGA_NUM2:
    61 01424 0056 C        	MOV	TEMP0,A
    62            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       01425 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01426 088B     2     BC  _RB , 2 
    63            C        	;MOV	_RC,@LCD_CTRL
    64            C        	;SRAM	_RD,5
    65            C      M 	MOV	_RC,@(VGA_ADDR+13)
       01427 18B9     1     MOV A,@(( VGA_ADDR + 13 ))
       01428 004C     1     MOV  _RC ,A
    66            C      M 	SUBA	TEMP0,@CH_END
       01429 18FF     1     MOV A,@( CH_END )
       0142A 0116     1     SUB A, TEMP0 
    67            C      M 	JPZ	VGA_NUM2_END
       0142B 0C83     1     JBC  _STATUS , Z 
       0142C 1449     1     JMP  VGA_NUM2_END ,
    68 0142D 040D C        	MOV	A,_RD
    69            C      M 	JPZ	VGA_NUM2_BEGIN
       0142E 0C83     1     JBC  _STATUS , Z 
       0142F 143C     1     JMP  VGA_NUM2_BEGIN ,
    70 01430 1A1F C        	AND	A,@0X1F
    71 01431 0057 C        	MOV	TEMP1,A
    72 01432 1D20 C        	SUB	A,@32			; >32超过要求
    73            C      M 	JPNC	VGA_NUM2_RET
       01433 0E03     1     JBS  _STATUS , C 
       01434 143B     1     JMP  VGA_NUM2_RET ,
    74 01435 054D C        	INC	_RD
    75            C      M 	ADDA	TEMP1,@(VGA_ADDR+13)
       01436 18B9     1     MOV A,@(( VGA_ADDR + 13 ))
       01437 0397     1     ADD A, TEMP1 
    76 01438 004C C        	MOV	_RC,A
    77            C      M 	MOV	_RD,TEMP0
       01439 0416     1     MOV A, TEMP0 
       0143A 004D     1     MOV  _RD ,A
    78 0143B      C        VGA_NUM2_RET:
    79 0143B 1491 C        	JMP	VIEW_REVISE_NUM2
    80 0143C      C        VGA_NUM2_BEGIN:
    81            C      M 	MOV	_RD,TEMP0
       0143C 0416     1     MOV A, TEMP0 
       0143D 004D     1     MOV  _RD ,A
    82 0143E 054D C        	INC	_RD
    83            C      M 	CLRCIDRAM	@(VGA_ADDR+14),@32,@NUM_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 14 ))
       0143F 18BA     2     MOV A,@(( VGA_ADDR + 14 ))
       01440 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       01441 1820     2     MOV A,@( 32 )
       01442 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( NUM_BLANK )
       01443 1810     2     MOV A,@( NUM_BLANK )
       01444 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CLR_CIDRAM ),
                      3  M  LCALL  CLR_CIDRAM 
                      4  M  PAGE #( CLR_CIDRAM ),
       01445 1E84     4     PAGE ( CLR_CIDRAM / 1024 ),
       01446 1178     3     CALL ( CLR_CIDRAM % 1024 ),
                      4  M  PAGE #( $ ),
       01447 1E85     4     PAGE ( $ / 1024 ),
    84 01448 1491 C        	JMP	VIEW_REVISE_NUM2
    85            C        
    86 01449      C        VGA_NUM2_END:
    87 01449 00CD C        	CLR	_RD
    88 0144A 0012 C        	RET
    89            C        
    90            C        ; 显示第二行的数字
    91            C        ; 依次存入到寄存器中。
    92 0144B      C        VGA_STR:
    93 0144B 0056 C        	MOV	TEMP0,A
    94            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       0144C 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0144D 088B     2     BC  _RB , 2 
    95            C        	;MOV	_RC,@LCD_CTRL
    96            C        	;SRAM	_RD,6
    97            C      M 	MOV	_RC,@(VGA_ADDR+46)
       0144E 18DA     1     MOV A,@(( VGA_ADDR + 46 ))
       0144F 004C     1     MOV  _RC ,A
    98            C      M 	SUBA	TEMP0,@CH_END
       01450 18FF     1     MOV A,@( CH_END )
       01451 0116     1     SUB A, TEMP0 
    99            C      M 	JPZ	VGA_STR_END
       01452 0C83     1     JBC  _STATUS , Z 
       01453 1470     1     JMP  VGA_STR_END ,
   100 01454 040D C        	MOV	A,_RD
   101            C      M 	JPZ	VGA_STR_BEGIN
       01455 0C83     1     JBC  _STATUS , Z 
       01456 1463     1     JMP  VGA_STR_BEGIN ,
   102 01457 1A1F C        	AND	A,@0X1F
   103 01458 0057 C        	MOV	TEMP1,A
   104 01459 1D20 C        	SUB	A,@32			; >32超过要求
   105            C      M 	JPNC	VGA_STR_RET
       0145A 0E03     1     JBS  _STATUS , C 
       0145B 1462     1     JMP  VGA_STR_RET ,
   106            C        	;MOV	_RC,@(VGA_ADDR+46)
   107 0145C 054D C        	INC	_RD
   108            C      M 	ADDA	TEMP1,@(VGA_ADDR+46)
       0145D 18DA     1     MOV A,@(( VGA_ADDR + 46 ))
       0145E 0397     1     ADD A, TEMP1 
   109 0145F 004C C        	MOV	_RC,A
   110            C      M 	MOV	_RD,TEMP0
       01460 0416     1     MOV A, TEMP0 
       01461 004D     1     MOV  _RD ,A
   111 01462      C        VGA_STR_RET:
   112            C        	;RET
   113 01462 1515 C        	JMP	VIEW_REVISE_STR
   114            C        
   115 01463      C        VGA_STR_BEGIN:
   116            C      M 	MOV	_RD,TEMP0
       01463 0416     1     MOV A, TEMP0 
       01464 004D     1     MOV  _RD ,A
   117 01465 054D C        	INC	_RD
   118            C      M 	CLRCIDRAM	@(VGA_ADDR+47),@32,@CH_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 47 ))
       01466 18DB     2     MOV A,@(( VGA_ADDR + 47 ))
       01467 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       01468 1820     2     MOV A,@( 32 )
       01469 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( CH_BLANK )
       0146A 1824     2     MOV A,@( CH_BLANK )
       0146B 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CLR_CIDRAM ),
                      3  M  LCALL  CLR_CIDRAM 
                      4  M  PAGE #( CLR_CIDRAM ),
       0146C 1E84     4     PAGE ( CLR_CIDRAM / 1024 ),
       0146D 1178     3     CALL ( CLR_CIDRAM % 1024 ),
                      4  M  PAGE #( $ ),
       0146E 1E85     4     PAGE ( $ / 1024 ),
   119            C        	;RET
   120 0146F 1515 C        	JMP	VIEW_REVISE_STR
   121            C        
   122 01470      C        VGA_STR_END:
   123 01470 00CD C        	CLR	_RD
   124 01471 0012 C        	RET
   125            C        
   126 01472      C        CLR_STAMP:
   127            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       01472 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01473 088B     2     BC  _RB , 2 
   128            C      M 	MOV	_RC,@(LCD_CTRL+1)
       01474 1881     1     MOV A,@(( LCD_CTRL + 1 ))
       01475 004C     1     MOV  _RC ,A
   129 01476 00CD C        	CLR	_RD
   130 01477 0012 C        	RET
   131            C        
   132 01478      C        CLR_NUM1:
   133            C      M 	MOV	TEMP0,@(LCD_CTRL+2)
       01478 1882     1     MOV A,@(( LCD_CTRL + 2 ))
       01479 0056     1     MOV  TEMP0 ,A
   134            C      M 	MOV	TEMP1,@10
       0147A 180A     1     MOV A,@( 10 )
       0147B 0057     1     MOV  TEMP1 ,A
   135 0147C 1810 C        	MOV	A,@NUM_BLANK
   136 0147D 148A C        	JMP	CLR_LCD
   137            C        	
   138            C        
   139 0147E      C        CLR_NUM2:
   140            C      M 	MOV	TEMP0,@(LCD_CTRL+12)
       0147E 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       0147F 0056     1     MOV  TEMP0 ,A
   141            C      M 	MOV	TEMP1,@16
       01480 1810     1     MOV A,@( 16 )
       01481 0057     1     MOV  TEMP1 ,A
   142 01482 1810 C        	MOV	A,@NUM_BLANK
   143 01483 148A C        	JMP	CLR_LCD
   144            C        	
   145            C        
   146 01484      C        CLR_STR:
   147            C      M 	MOV	TEMP0,@(LCD_CTRL+28)
       01484 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       01485 0056     1     MOV  TEMP0 ,A
   148            C      M 	MOV	TEMP1,@16
       01486 1810     1     MOV A,@( 16 )
       01487 0057     1     MOV  TEMP1 ,A
   149 01488 1824 C        	MOV	A,@CH_BLANK
   150 01489 148A C        	JMP	CLR_LCD
   151            C        	
   152 0148A      C        CLR_LCD:
   153 0148A 0058 C        	MOV	TEMP2,A
   154            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       0148B 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0148C 088B     2     BC  _RB , 2 
   155            C      M 	CALL	#CLR_CIDRAM
                      2  M  LCALL  CLR_CIDRAM 
                      3  M  PAGE #( CLR_CIDRAM ),
       0148D 1E84     3     PAGE ( CLR_CIDRAM / 1024 ),
       0148E 1178     2     CALL ( CLR_CIDRAM % 1024 ),
                      3  M  PAGE #( $ ),
       0148F 1E85     3     PAGE ( $ / 1024 ),
   156 01490 0012 C        	RET
   157            C        
   158            C        
   159            C        /***************************************
   160            C        风格显示
   161            C        按照控制器中的显示风格将缓冲区的数值放到显示区中
   162            C        
   163            C        ***************************************/
   164            C        
   165            C        
   166 01491      C        VIEW_REVISE:
   167            C        ;VIEW_REVISE_NUM1:				; 第一行数字
   168            C        	; 第一行没有风格显示
   169            C        ;	COPYCIDRAM	@(VGA_ADDR+3),@(LCD_CTRL+2),@(LCD_CTRL+2+10)
   170            C        
   171            C        
   172 01491      C        VIEW_REVISE_NUM2:				; 第二行数字
   173            C        	;CLRCIDRAM	@(LCD_CTRL+12),@16,@NUM_BLANK
   174            C      M 	MOV	_RC,@(VGA_ADDR+13)
       01491 18B9     1     MOV A,@(( VGA_ADDR + 13 ))
       01492 004C     1     MOV  _RC ,A
   175 01493 040D C        	MOV	A,_RD
   176            C      M 	JPZ	VIEW_REVISE_RET			; 控制器==0
       01494 0C83     1     JBC  _STATUS , Z 
       01495 1598     1     JMP  VIEW_REVISE_RET ,
   177            C        	
   178 01496 0056 C        	MOV	TEMP0,A
   179 01497 0756 C        	SWAP	TEMP0
   180 01498 0616 C        	RRCA	TEMP0
   181 01499 1A03 C        	AND	A,@0X03
   182 0149A 0020 C        	TBL
   183 0149B 149F C        	JMP	VIEW_REVISE_NUM2_NORMAL
   184 0149C 14A6 C        	JMP	VIEW_REVISE_NUM2_LEFT
   185 0149D 14C5 C        	JMP	VIEW_REVISE_NUM2_RIGHT
   186 0149E 14E4 C        	JMP	VIEW_REVISE_NUM2_CENTER
   187            C        	
   188 0149F      C        VIEW_REVISE_NUM2_NORMAL:
   189            C      M 	MOV	TEMP0,@(VGA_ADDR+14)
       0149F 18BA     1     MOV A,@(( VGA_ADDR + 14 ))
       014A0 0056     1     MOV  TEMP0 ,A
   190            C      M 	MOV	TEMP1,@(LCD_CTRL+12)
       014A1 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       014A2 0057     1     MOV  TEMP1 ,A
   191            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       014A3 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       014A4 0058     1     MOV  TEMP2 ,A
   192 014A5 1511 C        	JMP	VIEW_REVISE_NUM2_1
   193 014A6      C        VIEW_REVISE_NUM2_LEFT:
   194            C      M 	CHKLEFTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 14 ))
       014A6 18BA     2     MOV A,@(( VGA_ADDR + 14 ))
       014A7 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       014A8 1820     2     MOV A,@( 32 )
       014A9 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( NUM_BLANK )
       014AA 1810     2     MOV A,@( NUM_BLANK )
       014AB 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_LEFTBLANK ),
                      3  M  LCALL  CHK_LEFTBLANK 
                      4  M  PAGE #( CHK_LEFTBLANK ),
       014AC 1E84     4     PAGE ( CHK_LEFTBLANK / 1024 ),
       014AD 1185     3     CALL ( CHK_LEFTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       014AE 1E85     4     PAGE ( $ / 1024 ),
   195 014AF 0056 C        	MOV	TEMP0,A
   196            C      M 	SUBA	TEMP0,@16
       014B0 1810     1     MOV A,@( 16 )
       014B1 0116     1     SUB A, TEMP0 
   197            C      M 	JPC	VIEW_REVISE_NUM2_LEFT_LEAN
       014B2 0C03     1     JBC  _STATUS , C 
       014B3 14BB     1     JMP  VIEW_REVISE_NUM2_LEFT_LEAN ,
   198            C      M 	ADD	TEMP0,@(VGA_ADDR+14)
       014B4 18BA     1     MOV A,@(( VGA_ADDR + 14 ))
       014B5 03D6     1     ADD  TEMP0 ,A
   199            C      M 	MOV	TEMP1,@(LCD_CTRL+12)
       014B6 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       014B7 0057     1     MOV  TEMP1 ,A
   200            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       014B8 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       014B9 0058     1     MOV  TEMP2 ,A
   201 014BA 1511 C        	JMP	VIEW_REVISE_NUM2_1
   202 014BB      C        VIEW_REVISE_NUM2_LEFT_LEAN:
   203 014BB 0059 C        	MOV	TEMP3,A
   204            C      M 	ADD	TEMP0,@(VGA_ADDR+14)
       014BC 18BA     1     MOV A,@(( VGA_ADDR + 14 ))
       014BD 03D6     1     ADD  TEMP0 ,A
   205            C      M 	MOV	TEMP1,@(LCD_CTRL+12)
       014BE 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       014BF 0057     1     MOV  TEMP1 ,A
   206            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       014C0 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       014C1 0058     1     MOV  TEMP2 ,A
   207            C      M 	SUB	TEMP2,TEMP3
       014C2 0419     1     MOV A, TEMP3 
       014C3 0158     1     SUB  TEMP2 ,A
   208 014C4 1511 C        	JMP	VIEW_REVISE_NUM2_1
   209 014C5      C        VIEW_REVISE_NUM2_RIGHT:
   210            C      M 	CHKRIGHTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 14 ))
       014C5 18BA     2     MOV A,@(( VGA_ADDR + 14 ))
       014C6 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       014C7 1820     2     MOV A,@( 32 )
       014C8 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( NUM_BLANK )
       014C9 1810     2     MOV A,@( NUM_BLANK )
       014CA 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_RIGHTBLANK ),
                      3  M  LCALL  CHK_RIGHTBLANK 
                      4  M  PAGE #( CHK_RIGHTBLANK ),
       014CB 1E84     4     PAGE ( CHK_RIGHTBLANK / 1024 ),
       014CC 1197     3     CALL ( CHK_RIGHTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       014CD 1E85     4     PAGE ( $ / 1024 ),
   211 014CE 0056 C        	MOV	TEMP0,A
   212            C      M 	SUBA	TEMP0,@16
       014CF 1810     1     MOV A,@( 16 )
       014D0 0116     1     SUB A, TEMP0 
   213            C      M 	JPNC	VIEW_REVISE_NUM2_RIGHT_FULL
       014D1 0E03     1     JBS  _STATUS , C 
       014D2 14DB     1     JMP  VIEW_REVISE_NUM2_RIGHT_FULL ,
   214 014D3 0057 C        	MOV	TEMP1,A
   215            C      M 	MOV	TEMP0,@(VGA_ADDR+14)
       014D4 18BA     1     MOV A,@(( VGA_ADDR + 14 ))
       014D5 0056     1     MOV  TEMP0 ,A
   216            C      M 	ADD	TEMP1,@(LCD_CTRL+12)
       014D6 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       014D7 03D7     1     ADD  TEMP1 ,A
   217            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       014D8 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       014D9 0058     1     MOV  TEMP2 ,A
   218            C        	
   219 014DA 1511 C        	JMP	VIEW_REVISE_NUM2_1
   220 014DB      C        VIEW_REVISE_NUM2_RIGHT_FULL:
   221 014DB 0416 C        	MOV	A,TEMP0
   222 014DC 1D10 C        	SUB	A,@16
   223 014DD 1FBA C        	ADD	A,@(VGA_ADDR+14)
   224 014DE 0056 C        	MOV	TEMP0,A
   225            C      M 	MOV	TEMP1,@(LCD_CTRL+12)
       014DF 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       014E0 0057     1     MOV  TEMP1 ,A
   226            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       014E1 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       014E2 0058     1     MOV  TEMP2 ,A
   227 014E3 1511 C        	JMP	VIEW_REVISE_NUM2_1
   228            C        	
   229 014E4      C        VIEW_REVISE_NUM2_CENTER:
   230            C      M 	CHKLEFTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 14 ))
       014E4 18BA     2     MOV A,@(( VGA_ADDR + 14 ))
       014E5 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       014E6 1820     2     MOV A,@( 32 )
       014E7 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( NUM_BLANK )
       014E8 1810     2     MOV A,@( NUM_BLANK )
       014E9 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_LEFTBLANK ),
                      3  M  LCALL  CHK_LEFTBLANK 
                      4  M  PAGE #( CHK_LEFTBLANK ),
       014EA 1E84     4     PAGE ( CHK_LEFTBLANK / 1024 ),
       014EB 1185     3     CALL ( CHK_LEFTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       014EC 1E85     4     PAGE ( $ / 1024 ),
   231 014ED 005B C        	MOV	TEMP5,A
   232 014EE 1D20 C        	SUB	A,@32
   233            C      M 	JPZ	VIEW_REVISE_NUM2_NONE
       014EF 0C83     1     JBC  _STATUS , Z 
       014F0 1514     1     JMP  VIEW_REVISE_NUM2_NONE ,
   234            C      M 	CHKRIGHTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 14 ))
       014F1 18BA     2     MOV A,@(( VGA_ADDR + 14 ))
       014F2 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       014F3 1820     2     MOV A,@( 32 )
       014F4 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( NUM_BLANK )
       014F5 1810     2     MOV A,@( NUM_BLANK )
       014F6 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_RIGHTBLANK ),
                      3  M  LCALL  CHK_RIGHTBLANK 
                      4  M  PAGE #( CHK_RIGHTBLANK ),
       014F7 1E84     4     PAGE ( CHK_RIGHTBLANK / 1024 ),
       014F8 1197     3     CALL ( CHK_RIGHTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       014F9 1E85     4     PAGE ( $ / 1024 ),
   235 014FA 039B C        	ADD	A,TEMP5
   236 014FB 0056 C        	MOV	TEMP0,A
   237            C      M 	SUB	TEMP0,@16
       014FC 1810     1     MOV A,@( 16 )
       014FD 0156     1     SUB  TEMP0 ,A
   238            C      M 	JPNC	VIEW_REVISE_NUM2_FULL		; 空字符少于16，说明字符超过16个
       014FE 0E03     1     JBS  _STATUS , C 
       014FF 150A     1     JMP  VIEW_REVISE_NUM2_FULL ,
   239            C      M 	CLRC
       01500 0803     1     BC  _STATUS , C 
   240 01501 0616 C        	RRCA	TEMP0
   241 01502 1F8C C        	ADD	A,@(LCD_CTRL+12)
   242 01503 0057 C        	MOV	TEMP1,A				; 目的地址
   243            C      M 	ADDA	TEMP5,@(VGA_ADDR+14)
       01504 18BA     1     MOV A,@(( VGA_ADDR + 14 ))
       01505 039B     1     ADD A, TEMP5 
   244 01506 0056 C        	MOV	TEMP0,A
   245            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       01507 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       01508 0058     1     MOV  TEMP2 ,A
   246 01509 1511 C        	JMP	VIEW_REVISE_NUM2_1
   247            C        
   248 0150A      C        VIEW_REVISE_NUM2_FULL:
   249 0150A 041B C        	MOV	A,TEMP5
   250 0150B 1FBA C        	ADD	A,@(VGA_ADDR+14)
   251 0150C 0056 C        	MOV	TEMP0,A
   252            C      M 	MOV	TEMP1,@(LCD_CTRL+12)
       0150D 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       0150E 0057     1     MOV  TEMP1 ,A
   253            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       0150F 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       01510 0058     1     MOV  TEMP2 ,A
   254            C        	;JMP	VIEW_REVISE_NUM2_1
   255            C        
   256 01511      C        VIEW_REVISE_NUM2_1:
   257            C      M 	CALL	#COPY_CIDRAM
                      2  M  LCALL  COPY_CIDRAM 
                      3  M  PAGE #( COPY_CIDRAM ),
       01511 1E84     3     PAGE ( COPY_CIDRAM / 1024 ),
       01512 1164     2     CALL ( COPY_CIDRAM % 1024 ),
                      3  M  PAGE #( $ ),
       01513 1E85     3     PAGE ( $ / 1024 ),
   258 01514      C        VIEW_REVISE_NUM2_NONE:
   259 01514 0012 C        	RET
   260            C        
   261 01515      C        VIEW_REVISE_STR:				; 第三行字符
   262            C        	;CLRCIDRAM	@(LCD_CTRL+28),@16,@CH_BLANK
   263            C      M 	MOV	_RC,@(VGA_ADDR+46)
       01515 18DA     1     MOV A,@(( VGA_ADDR + 46 ))
       01516 004C     1     MOV  _RC ,A
   264 01517 040D C        	MOV	A,_RD
   265            C      M 	JPZ	VIEW_REVISE_RET			; 控制器==0
       01518 0C83     1     JBC  _STATUS , Z 
       01519 1598     1     JMP  VIEW_REVISE_RET ,
   266            C        	
   267 0151A 0056 C        	MOV	TEMP0,A
   268 0151B 0756 C        	SWAP	TEMP0
   269 0151C 0616 C        	RRCA	TEMP0
   270 0151D 1A03 C        	AND	A,@0X03
   271 0151E 0020 C        	TBL
   272 0151F 1523 C        	JMP	VIEW_REVISE_STR_NORMAL
   273 01520 152A C        	JMP	VIEW_REVISE_STR_LEFT
   274 01521 1549 C        	JMP	VIEW_REVISE_STR_RIGHT
   275 01522 1568 C        	JMP	VIEW_REVISE_STR_CENTER
   276            C        	
   277 01523      C        VIEW_REVISE_STR_NORMAL:
   278            C      M 	MOV	TEMP0,@(VGA_ADDR+47)
       01523 18DB     1     MOV A,@(( VGA_ADDR + 47 ))
       01524 0056     1     MOV  TEMP0 ,A
   279            C      M 	MOV	TEMP1,@(LCD_CTRL+28)
       01525 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       01526 0057     1     MOV  TEMP1 ,A
   280            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       01527 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       01528 0058     1     MOV  TEMP2 ,A
   281 01529 1595 C        	JMP	VIEW_REVISE_STR_1
   282 0152A      C        VIEW_REVISE_STR_LEFT:
   283            C      M 	CHKLEFTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 47 ))
       0152A 18DB     2     MOV A,@(( VGA_ADDR + 47 ))
       0152B 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       0152C 1820     2     MOV A,@( 32 )
       0152D 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( CH_BLANK )
       0152E 1824     2     MOV A,@( CH_BLANK )
       0152F 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_LEFTBLANK ),
                      3  M  LCALL  CHK_LEFTBLANK 
                      4  M  PAGE #( CHK_LEFTBLANK ),
       01530 1E84     4     PAGE ( CHK_LEFTBLANK / 1024 ),
       01531 1185     3     CALL ( CHK_LEFTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       01532 1E85     4     PAGE ( $ / 1024 ),
   284 01533 0056 C        	MOV	TEMP0,A
   285            C      M 	SUBA	TEMP0,@16
       01534 1810     1     MOV A,@( 16 )
       01535 0116     1     SUB A, TEMP0 
   286            C      M 	JPC	VIEW_REVISE_STR_LEFT_LEAN
       01536 0C03     1     JBC  _STATUS , C 
       01537 153F     1     JMP  VIEW_REVISE_STR_LEFT_LEAN ,
   287            C      M 	ADD	TEMP0,@(VGA_ADDR+47)
       01538 18DB     1     MOV A,@(( VGA_ADDR + 47 ))
       01539 03D6     1     ADD  TEMP0 ,A
   288            C      M 	MOV	TEMP1,@(LCD_CTRL+28)
       0153A 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       0153B 0057     1     MOV  TEMP1 ,A
   289            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       0153C 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       0153D 0058     1     MOV  TEMP2 ,A
   290 0153E 1595 C        	JMP	VIEW_REVISE_STR_1
   291 0153F      C        VIEW_REVISE_STR_LEFT_LEAN:
   292 0153F 0059 C        	MOV	TEMP3,A
   293            C      M 	ADD	TEMP0,@(VGA_ADDR+28)
       01540 18C8     1     MOV A,@(( VGA_ADDR + 28 ))
       01541 03D6     1     ADD  TEMP0 ,A
   294            C      M 	MOV	TEMP1,@(LCD_CTRL+28)
       01542 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       01543 0057     1     MOV  TEMP1 ,A
   295            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       01544 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       01545 0058     1     MOV  TEMP2 ,A
   296            C      M 	SUB	TEMP2,TEMP3
       01546 0419     1     MOV A, TEMP3 
       01547 0158     1     SUB  TEMP2 ,A
   297 01548 1595 C        	JMP	VIEW_REVISE_STR_1
   298 01549      C        VIEW_REVISE_STR_RIGHT:
   299            C      M 	CHKRIGHTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 47 ))
       01549 18DB     2     MOV A,@(( VGA_ADDR + 47 ))
       0154A 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       0154B 1820     2     MOV A,@( 32 )
       0154C 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( CH_BLANK )
       0154D 1824     2     MOV A,@( CH_BLANK )
       0154E 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_RIGHTBLANK ),
                      3  M  LCALL  CHK_RIGHTBLANK 
                      4  M  PAGE #( CHK_RIGHTBLANK ),
       0154F 1E84     4     PAGE ( CHK_RIGHTBLANK / 1024 ),
       01550 1197     3     CALL ( CHK_RIGHTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       01551 1E85     4     PAGE ( $ / 1024 ),
   300 01552 0056 C        	MOV	TEMP0,A
   301            C      M 	SUBA	TEMP0,@16
       01553 1810     1     MOV A,@( 16 )
       01554 0116     1     SUB A, TEMP0 
   302            C      M 	JPNC	VIEW_REVISE_STR_RIGHT_FULL
       01555 0E03     1     JBS  _STATUS , C 
       01556 155F     1     JMP  VIEW_REVISE_STR_RIGHT_FULL ,
   303 01557 0057 C        	MOV	TEMP1,A
   304            C      M 	MOV	TEMP0,@(VGA_ADDR+47)
       01558 18DB     1     MOV A,@(( VGA_ADDR + 47 ))
       01559 0056     1     MOV  TEMP0 ,A
   305            C      M 	ADD	TEMP1,@(LCD_CTRL+28)
       0155A 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       0155B 03D7     1     ADD  TEMP1 ,A
   306            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       0155C 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       0155D 0058     1     MOV  TEMP2 ,A
   307            C        	
   308 0155E 1595 C        	JMP	VIEW_REVISE_STR_1
   309 0155F      C        VIEW_REVISE_STR_RIGHT_FULL:
   310 0155F 0416 C        	MOV	A,TEMP0
   311 01560 1D10 C        	SUB	A,@16
   312 01561 1FDB C        	ADD	A,@(VGA_ADDR+47)
   313 01562 0056 C        	MOV	TEMP0,A
   314            C      M 	MOV	TEMP1,@(LCD_CTRL+28)
       01563 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       01564 0057     1     MOV  TEMP1 ,A
   315            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       01565 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       01566 0058     1     MOV  TEMP2 ,A
   316 01567 1595 C        	JMP	VIEW_REVISE_STR_1
   317            C        	
   318 01568      C        VIEW_REVISE_STR_CENTER:
   319            C      M 	CHKLEFTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 47 ))
       01568 18DB     2     MOV A,@(( VGA_ADDR + 47 ))
       01569 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       0156A 1820     2     MOV A,@( 32 )
       0156B 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( CH_BLANK )
       0156C 1824     2     MOV A,@( CH_BLANK )
       0156D 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_LEFTBLANK ),
                      3  M  LCALL  CHK_LEFTBLANK 
                      4  M  PAGE #( CHK_LEFTBLANK ),
       0156E 1E84     4     PAGE ( CHK_LEFTBLANK / 1024 ),
       0156F 1185     3     CALL ( CHK_LEFTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       01570 1E85     4     PAGE ( $ / 1024 ),
   320 01571 005B C        	MOV	TEMP5,A
   321 01572 1D20 C        	SUB	A,@32
   322            C      M 	JPZ	VIEW_REVISE_RET
       01573 0C83     1     JBC  _STATUS , Z 
       01574 1598     1     JMP  VIEW_REVISE_RET ,
   323            C      M 	CHKRIGHTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 47 ))
       01575 18DB     2     MOV A,@(( VGA_ADDR + 47 ))
       01576 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       01577 1820     2     MOV A,@( 32 )
       01578 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( CH_BLANK )
       01579 1824     2     MOV A,@( CH_BLANK )
       0157A 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_RIGHTBLANK ),
                      3  M  LCALL  CHK_RIGHTBLANK 
                      4  M  PAGE #( CHK_RIGHTBLANK ),
       0157B 1E84     4     PAGE ( CHK_RIGHTBLANK / 1024 ),
       0157C 1197     3     CALL ( CHK_RIGHTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       0157D 1E85     4     PAGE ( $ / 1024 ),
   324 0157E 039B C        	ADD	A,TEMP5
   325 0157F 0056 C        	MOV	TEMP0,A
   326            C      M 	SUB	TEMP0,@16
       01580 1810     1     MOV A,@( 16 )
       01581 0156     1     SUB  TEMP0 ,A
   327            C      M 	JPNC	VIEW_REVISE_STR_FULL		; 空字符少于16，说明字符超过16个
       01582 0E03     1     JBS  _STATUS , C 
       01583 158E     1     JMP  VIEW_REVISE_STR_FULL ,
   328            C      M 	CLRC
       01584 0803     1     BC  _STATUS , C 
   329 01585 0616 C        	RRCA	TEMP0
   330 01586 1F9C C        	ADD	A,@(LCD_CTRL+28)
   331 01587 0057 C        	MOV	TEMP1,A				; 目的地址
   332            C      M 	ADDA	TEMP5,@(VGA_ADDR+47)
       01588 18DB     1     MOV A,@(( VGA_ADDR + 47 ))
       01589 039B     1     ADD A, TEMP5 
   333 0158A 0056 C        	MOV	TEMP0,A
   334            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       0158B 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       0158C 0058     1     MOV  TEMP2 ,A
   335 0158D 1595 C        	JMP	VIEW_REVISE_STR_1
   336            C        	
   337 0158E      C        VIEW_REVISE_STR_FULL:
   338 0158E 041B C        	MOV	A,TEMP5
   339 0158F 1FDB C        	ADD	A,@(VGA_ADDR+47)
   340 01590 0056 C        	MOV	TEMP0,A
   341            C      M 	MOV	TEMP1,@(LCD_CTRL+28)
       01591 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       01592 0057     1     MOV  TEMP1 ,A
   342            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       01593 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       01594 0058     1     MOV  TEMP2 ,A
   343            C        	;JMP	VIEW_REVISE_STR_1
   344            C        
   345 01595      C        VIEW_REVISE_STR_1:
   346            C      M 	CALL	#COPY_CIDRAM
                      2  M  LCALL  COPY_CIDRAM 
                      3  M  PAGE #( COPY_CIDRAM ),
       01595 1E84     3     PAGE ( COPY_CIDRAM / 1024 ),
       01596 1164     2     CALL ( COPY_CIDRAM % 1024 ),
                      3  M  PAGE #( $ ),
       01597 1E85     3     PAGE ( $ / 1024 ),
   347            C        
   348 01598      C        VIEW_REVISE_RET:
   349 01598 0012 C        	RET
   350            C        
   351 01599      C        VGA_HEX_NUM1:
   352 01599 1800 C        	MOV	A,@0
   353 0159A 159E C        	JMP	VGA_HEX
   354 0159B      C        VGA_HEX_NUM2:
   355 0159B 1801 C        	MOV	A,@1
   356 0159C 159E C        	JMP	VGA_HEX
   357 0159D      C        VGA_HEX_STR:
   358 0159D 1802 C        	MOV	A,@2
   359 0159E      C        VGA_HEX:
   360            C      M 	BANK	0
       0159E 0984     1     BC  _RSR , 6 
       0159F 09C4     1     BC  _RSR , 7 
   361 015A0 007A C        	MOV	CONT,A
   362            C      M 	CALL	#MATH_HTD
                      2  M  LCALL  MATH_HTD 
                      3  M  PAGE #( MATH_HTD ),
       015A1 1E84     3     PAGE ( MATH_HTD / 1024 ),
       015A2 1100     2     CALL ( MATH_HTD % 1024 ),
                      3  M  PAGE #( $ ),
       015A3 1E85     3     PAGE ( $ / 1024 ),
   363 015A4 007B C        	MOV	STR_REG,A
   364 015A5 043A C        	MOV	A,CONT
   365 015A6 0020 C        	TBL
   366 015A7 15AA C        	JMP	VGA_HEX_0
   367 015A8 15B1 C        	JMP	VGA_HEX_1
   368 015A9 15B8 C        	JMP	VGA_HEX_2
   369 015AA      C        VGA_HEX_0:
   370 015AA 073B C        	SWAPA	STR_REG
   371 015AB 1A0F C        	AND	A,@0X0F
   372 015AC 1008 C        	CALL	VGA_NUM1
   373            C      M 	ANDA	STR_REG,@0X0F
       015AD 180F     1     MOV A,@( 15 )
       015AE 02BB     1     AND A, STR_REG 
   374 015AF 1008 C        	CALL	VGA_NUM1
   375 015B0 0012 C        	RET
   376 015B1      C        VGA_HEX_1:
   377 015B1 073B C        	SWAPA	STR_REG
   378 015B2 1A0F C        	AND	A,@0X0F
   379 015B3 1024 C        	CALL	VGA_NUM2
   380            C      M 	ANDA	STR_REG,@0X0F
       015B4 180F     1     MOV A,@( 15 )
       015B5 02BB     1     AND A, STR_REG 
   381 015B6 1024 C        	CALL	VGA_NUM2
   382 015B7 0012 C        	RET
   383 015B8      C        VGA_HEX_2:
   384 015B8 073B C        	SWAPA	STR_REG
   385 015B9 1A0F C        	AND	A,@0X0F
   386 015BA 104B C        	CALL	VGA_STR
   387            C      M 	ANDA	STR_REG,@0X0F
       015BB 180F     1     MOV A,@( 15 )
       015BC 02BB     1     AND A, STR_REG 
   388 015BD 104B C        	CALL	VGA_STR
   389 015BE 0012 C        	RET
   390            C        
   391 015BF      C        VGA_STRING:
   392            C      M 	BANK	0
       015BF 0984     1     BC  _RSR , 6 
       015C0 09C4     1     BC  _RSR , 7 
   393 015C1 007B C        	MOV	STR_REG,A
   394 015C2 00FA C        	CLR	CONT
   395 015C3      C        VGA_STRING_LOOP:
   396            C        	;MOV	A,STR_REG
   397            C      M 	ANDA	STR_REG,@0X7F
       015C3 187F     1     MOV A,@( 127 )
       015C4 02BB     1     AND A, STR_REG 
   398 015C5 0020 C        	TBL
   399 015C6 15F1 C        	JMP	VGA_STRING_0
   400 015C7 15FD C        	JMP	VGA_STRING_1
   401 015C8 1609 C        	JMP	VGA_STRING_2
   402 015C9 1615 C        	JMP	VGA_STRING_3
   403 015CA 1621 C        	JMP	VGA_STRING_4
   404 015CB 162D C        	JMP	VGA_STRING_5
   405 015CC 1639 C        	JMP	VGA_STRING_6
   406 015CD 1645 C        	JMP	VGA_STRING_7
   407 015CE 1651 C        	JMP	VGA_STRING_8
   408 015CF 165D C        	JMP	VGA_STRING_9
   409 015D0 1669 C        	JMP	VGA_STRING_10
   410 015D1 1675 C        	JMP	VGA_STRING_11
   411 015D2 1681 C        	JMP	VGA_STRING_12
   412 015D3 168D C        	JMP	VGA_STRING_13
   413 015D4 1699 C        	JMP	VGA_STRING_14
   414 015D5 16A5 C        	JMP	VGA_STRING_15
   415 015D6 16B1 C        	JMP	VGA_STRING_16
   416 015D7 16BD C        	JMP	VGA_STRING_17
   417 015D8 16C9 C        	JMP	VGA_STRING_18
   418 015D9 16D5 C        	JMP	VGA_STRING_19
   419 015DA 16E1 C        	JMP	VGA_STRING_20
   420 015DB 16ED C        	JMP	VGA_STRING_21
   421 015DC 16F9 C        	JMP	VGA_STRING_22
   422 015DD 1705 C        	JMP	VGA_STRING_23
   423 015DE 1711 C        	JMP	VGA_STRING_24
   424 015DF 171D C        	JMP	VGA_STRING_25
   425 015E0 1729 C        	JMP	VGA_STRING_26
   426 015E1 1735 C        	JMP	VGA_STRING_27
   427 015E2 1741 C        	JMP	VGA_STRING_28
   428 015E3 174D C        	JMP	VGA_STRING_29
   429 015E4 1759 C        	JMP	VGA_STRING_30
   430 015E5 1765 C        	JMP	VGA_STRING_31
   431 015E6 1771 C        	JMP	VGA_STRING_32
   432 015E7 177D C        	JMP	VGA_STRING_33
   433 015E8 1789 C        	JMP	VGA_STRING_34
   434 015E9 1795 C        	JMP	VGA_STRING_35
   435 015EA 17A1 C        	JMP	VGA_STRING_36
   436 015EB 17AD C        	JMP	VGA_STRING_37
   437 015EC 17B9 C        	JMP	VGA_STRING_38
   438 015ED 17C5 C        	JMP	VGA_STRING_39
   439 015EE 17D1 C        	JMP	VGA_STRING_40
   440 015EF 17DD C        	JMP	VGA_STRING_41
   441 015F0 17E9 C        	JMP	VGA_STRING_42
   442            C        
   443 015F1      C        VGA_STRING_0:
   444            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_NO_CALL_EN,#SHOW_NO_CALL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       015F1 0C1E     2     JBC  SYS_FG , LANGUAGE 
       015F2 15F8     2     JMP ( $ + 6 ),
       015F3 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NO_CALL_EN ),
                      3  M  LCALL  SHOW_NO_CALL_EN 
                      4  M  PAGE #( SHOW_NO_CALL_EN ),
       015F4 1E86     4     PAGE ( SHOW_NO_CALL_EN / 1024 ),
       015F5 1000     3     CALL ( SHOW_NO_CALL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       015F6 1E85     4     PAGE ( $ / 1024 ),
       015F7 15FC     1     JMP ( $ + 5 ),
       015F8 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NO_CALL_GE ),
                      3  M  LCALL  SHOW_NO_CALL_GE 
                      4  M  PAGE #( SHOW_NO_CALL_GE ),
       015F9 1E86     4     PAGE ( SHOW_NO_CALL_GE / 1024 ),
       015FA 11C3     3     CALL ( SHOW_NO_CALL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       015FB 1E85     4     PAGE ( $ / 1024 ),
   445 015FC 17F5 C        	JMP	VGA_STRING1
   446 015FD      C        VGA_STRING_1:
   447            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERROR_EN,#SHOW_ERROR_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       015FD 0C1E     2     JBC  SYS_FG , LANGUAGE 
       015FE 1604     2     JMP ( $ + 6 ),
       015FF 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERROR_EN ),
                      3  M  LCALL  SHOW_ERROR_EN 
                      4  M  PAGE #( SHOW_ERROR_EN ),
       01600 1E86     4     PAGE ( SHOW_ERROR_EN / 1024 ),
       01601 100A     3     CALL ( SHOW_ERROR_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01602 1E85     4     PAGE ( $ / 1024 ),
       01603 1608     1     JMP ( $ + 5 ),
       01604 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERROR_GE ),
                      3  M  LCALL  SHOW_ERROR_GE 
                      4  M  PAGE #( SHOW_ERROR_GE ),
       01605 1E86     4     PAGE ( SHOW_ERROR_GE / 1024 ),
       01606 11F0     3     CALL ( SHOW_ERROR_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01607 1E85     4     PAGE ( $ / 1024 ),
   448 01608 17F5 C        	JMP	VGA_STRING1
   449 01609      C        VGA_STRING_2:
   450            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_TOTAL_EN,#SHOW_TOTAL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01609 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0160A 1610     2     JMP ( $ + 6 ),
       0160B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_TOTAL_EN ),
                      3  M  LCALL  SHOW_TOTAL_EN 
                      4  M  PAGE #( SHOW_TOTAL_EN ),
       0160C 1E86     4     PAGE ( SHOW_TOTAL_EN / 1024 ),
       0160D 1175     3     CALL ( SHOW_TOTAL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0160E 1E85     4     PAGE ( $ / 1024 ),
       0160F 1614     1     JMP ( $ + 5 ),
       01610 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_TOTAL_GE ),
                      3  M  LCALL  SHOW_TOTAL_GE 
                      4  M  PAGE #( SHOW_TOTAL_GE ),
       01611 1E86     4     PAGE ( SHOW_TOTAL_GE / 1024 ),
       01612 135B     3     CALL ( SHOW_TOTAL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01613 1E85     4     PAGE ( $ / 1024 ),
   451 01614 17F5 C        	JMP	VGA_STRING1
   452 01615      C        VGA_STRING_3:
   453            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PRIVATE_EN,#SHOW_PRIVATE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01615 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01616 161C     2     JMP ( $ + 6 ),
       01617 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PRIVATE_EN ),
                      3  M  LCALL  SHOW_PRIVATE_EN 
                      4  M  PAGE #( SHOW_PRIVATE_EN ),
       01618 1E86     4     PAGE ( SHOW_PRIVATE_EN / 1024 ),
       01619 1011     3     CALL ( SHOW_PRIVATE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0161A 1E85     4     PAGE ( $ / 1024 ),
       0161B 1620     1     JMP ( $ + 5 ),
       0161C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PRIVATE_GE ),
                      3  M  LCALL  SHOW_PRIVATE_GE 
                      4  M  PAGE #( SHOW_PRIVATE_GE ),
       0161D 1E86     4     PAGE ( SHOW_PRIVATE_GE / 1024 ),
       0161E 11F8     3     CALL ( SHOW_PRIVATE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0161F 1E85     4     PAGE ( $ / 1024 ),
   454 01620 17F5 C        	JMP	VGA_STRING1
   455 01621      C        VGA_STRING_4:
   456            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_END_OF_LIST_EN,#SHOW_END_OF_LIST_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01621 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01622 1628     2     JMP ( $ + 6 ),
       01623 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_END_OF_LIST_EN ),
                      3  M  LCALL  SHOW_END_OF_LIST_EN 
                      4  M  PAGE #( SHOW_END_OF_LIST_EN ),
       01624 1E86     4     PAGE ( SHOW_END_OF_LIST_EN / 1024 ),
       01625 101A     3     CALL ( SHOW_END_OF_LIST_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01626 1E85     4     PAGE ( $ / 1024 ),
       01627 162C     1     JMP ( $ + 5 ),
       01628 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_END_OF_LIST_GE ),
                      3  M  LCALL  SHOW_END_OF_LIST_GE 
                      4  M  PAGE #( SHOW_END_OF_LIST_GE ),
       01629 1E86     4     PAGE ( SHOW_END_OF_LIST_GE / 1024 ),
       0162A 1200     3     CALL ( SHOW_END_OF_LIST_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0162B 1E85     4     PAGE ( $ / 1024 ),
   457 0162C 17F5 C        	JMP	VGA_STRING1
   458 0162D      C        VGA_STRING_5:
   459            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PLS_LIFT_HANDSET_EN,#SHOW_PLS_LIFT_HANDSET_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0162D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0162E 1634     2     JMP ( $ + 6 ),
       0162F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PLS_LIFT_HANDSET_EN ),
                      3  M  LCALL  SHOW_PLS_LIFT_HANDSET_EN 
                      4  M  PAGE #( SHOW_PLS_LIFT_HANDSET_EN ),
       01630 1E86     4     PAGE ( SHOW_PLS_LIFT_HANDSET_EN / 1024 ),
       01631 1027     3     CALL ( SHOW_PLS_LIFT_HANDSET_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01632 1E85     4     PAGE ( $ / 1024 ),
       01633 1638     1     JMP ( $ + 5 ),
       01634 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PLS_LIFT_HANDSET_GE ),
                      3  M  LCALL  SHOW_PLS_LIFT_HANDSET_GE 
                      4  M  PAGE #( SHOW_PLS_LIFT_HANDSET_GE ),
       01635 1E86     4     PAGE ( SHOW_PLS_LIFT_HANDSET_GE / 1024 ),
       01636 1217     3     CALL ( SHOW_PLS_LIFT_HANDSET_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01637 1E85     4     PAGE ( $ / 1024 ),
   460 01638 17F5 C        	JMP	VGA_STRING1
   461 01639      C        VGA_STRING_6:
   462            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_INITIAL_EN,#SHOW_INITIAL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01639 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0163A 1640     2     JMP ( $ + 6 ),
       0163B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_INITIAL_EN ),
                      3  M  LCALL  SHOW_INITIAL_EN 
                      4  M  PAGE #( SHOW_INITIAL_EN ),
       0163C 1E86     4     PAGE ( SHOW_INITIAL_EN / 1024 ),
       0163D 1039     3     CALL ( SHOW_INITIAL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0163E 1E85     4     PAGE ( $ / 1024 ),
       0163F 1644     1     JMP ( $ + 5 ),
       01640 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_INITIAL_GE ),
                      3  M  LCALL  SHOW_INITIAL_GE 
                      4  M  PAGE #( SHOW_INITIAL_GE ),
       01641 1E86     4     PAGE ( SHOW_INITIAL_GE / 1024 ),
       01642 11D1     3     CALL ( SHOW_INITIAL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01643 1E85     4     PAGE ( $ / 1024 ),
   463 01644 17F5 C        	JMP	VGA_STRING1
   464 01645      C        VGA_STRING_7:
   465            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASE_EN,#SHOW_ERASE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01645 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01646 164C     2     JMP ( $ + 6 ),
       01647 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASE_EN ),
                      3  M  LCALL  SHOW_ERASE_EN 
                      4  M  PAGE #( SHOW_ERASE_EN ),
       01648 1E86     4     PAGE ( SHOW_ERASE_EN / 1024 ),
       01649 1042     3     CALL ( SHOW_ERASE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0164A 1E85     4     PAGE ( $ / 1024 ),
       0164B 1650     1     JMP ( $ + 5 ),
       0164C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASE_GE ),
                      3  M  LCALL  SHOW_ERASE_GE 
                      4  M  PAGE #( SHOW_ERASE_GE ),
       0164D 1E86     4     PAGE ( SHOW_ERASE_GE / 1024 ),
       0164E 120C     3     CALL ( SHOW_ERASE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0164F 1E85     4     PAGE ( $ / 1024 ),
   466 01650 17F5 C        	JMP	VGA_STRING1
   467 01651      C        VGA_STRING_8:
   468            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASED_EN,#SHOW_ERASED_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01651 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01652 1658     2     JMP ( $ + 6 ),
       01653 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASED_EN ),
                      3  M  LCALL  SHOW_ERASED_EN 
                      4  M  PAGE #( SHOW_ERASED_EN ),
       01654 1E86     4     PAGE ( SHOW_ERASED_EN / 1024 ),
       01655 10DD     3     CALL ( SHOW_ERASED_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01656 1E85     4     PAGE ( $ / 1024 ),
       01657 165C     1     JMP ( $ + 5 ),
       01658 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASED_GE ),
                      3  M  LCALL  SHOW_ERASED_GE 
                      4  M  PAGE #( SHOW_ERASED_GE ),
       01659 1E86     4     PAGE ( SHOW_ERASED_GE / 1024 ),
       0165A 12D2     3     CALL ( SHOW_ERASED_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0165B 1E85     4     PAGE ( $ / 1024 ),
   469 0165C 17F5 C        	JMP	VGA_STRING1
   470 0165D      C        VGA_STRING_9:
   471            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASE_ALL_EN,#SHOW_ERASE_ALL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0165D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0165E 1664     2     JMP ( $ + 6 ),
       0165F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASE_ALL_EN ),
                      3  M  LCALL  SHOW_ERASE_ALL_EN 
                      4  M  PAGE #( SHOW_ERASE_ALL_EN ),
       01660 1E86     4     PAGE ( SHOW_ERASE_ALL_EN / 1024 ),
       01661 104A     3     CALL ( SHOW_ERASE_ALL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01662 1E85     4     PAGE ( $ / 1024 ),
       01663 1668     1     JMP ( $ + 5 ),
       01664 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASE_ALL_GE ),
                      3  M  LCALL  SHOW_ERASE_ALL_GE 
                      4  M  PAGE #( SHOW_ERASE_ALL_GE ),
       01665 1E86     4     PAGE ( SHOW_ERASE_ALL_GE / 1024 ),
       01666 11DF     3     CALL ( SHOW_ERASE_ALL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01667 1E85     4     PAGE ( $ / 1024 ),
   472 01668 17F5 C        	JMP	VGA_STRING1
   473 01669      C        VGA_STRING_10:
   474            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASED_ALL_EN,#SHOW_ERASED_ALL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01669 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0166A 1670     2     JMP ( $ + 6 ),
       0166B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASED_ALL_EN ),
                      3  M  LCALL  SHOW_ERASED_ALL_EN 
                      4  M  PAGE #( SHOW_ERASED_ALL_EN ),
       0166C 1E86     4     PAGE ( SHOW_ERASED_ALL_EN / 1024 ),
       0166D 10E5     3     CALL ( SHOW_ERASED_ALL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0166E 1E85     4     PAGE ( $ / 1024 ),
       0166F 1674     1     JMP ( $ + 5 ),
       01670 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASED_ALL_GE ),
                      3  M  LCALL  SHOW_ERASED_ALL_GE 
                      4  M  PAGE #( SHOW_ERASED_ALL_GE ),
       01671 1E86     4     PAGE ( SHOW_ERASED_ALL_GE / 1024 ),
       01672 12DD     3     CALL ( SHOW_ERASED_ALL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01673 1E85     4     PAGE ( $ / 1024 ),
   475 01674 17F5 C        	JMP	VGA_STRING1
   476 01675      C        VGA_STRING_11:
   477            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_MEMO_RECORDING_EN,#SHOW_MEMO_RECORDING_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01675 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01676 167C     2     JMP ( $ + 6 ),
       01677 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MEMO_RECORDING_EN ),
                      3  M  LCALL  SHOW_MEMO_RECORDING_EN 
                      4  M  PAGE #( SHOW_MEMO_RECORDING_EN ),
       01678 1E86     4     PAGE ( SHOW_MEMO_RECORDING_EN / 1024 ),
       01679 1056     3     CALL ( SHOW_MEMO_RECORDING_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0167A 1E85     4     PAGE ( $ / 1024 ),
       0167B 1680     1     JMP ( $ + 5 ),
       0167C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MEMO_RECORDING_GE ),
                      3  M  LCALL  SHOW_MEMO_RECORDING_GE 
                      4  M  PAGE #( SHOW_MEMO_RECORDING_GE ),
       0167D 1E86     4     PAGE ( SHOW_MEMO_RECORDING_GE / 1024 ),
       0167E 1227     3     CALL ( SHOW_MEMO_RECORDING_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0167F 1E85     4     PAGE ( $ / 1024 ),
   478 01680 17F5 C        	JMP	VGA_STRING1
   479 01681      C        VGA_STRING_12:
   480            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ICM_RECORDING_EN,#SHOW_ICM_RECORDING_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01681 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01682 1688     2     JMP ( $ + 6 ),
       01683 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ICM_RECORDING_EN ),
                      3  M  LCALL  SHOW_ICM_RECORDING_EN 
                      4  M  PAGE #( SHOW_ICM_RECORDING_EN ),
       01684 1E86     4     PAGE ( SHOW_ICM_RECORDING_EN / 1024 ),
       01685 1076     3     CALL ( SHOW_ICM_RECORDING_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01686 1E85     4     PAGE ( $ / 1024 ),
       01687 168C     1     JMP ( $ + 5 ),
       01688 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ICM_RECORDING_GE ),
                      3  M  LCALL  SHOW_ICM_RECORDING_GE 
                      4  M  PAGE #( SHOW_ICM_RECORDING_GE ),
       01689 1E86     4     PAGE ( SHOW_ICM_RECORDING_GE / 1024 ),
       0168A 1245     3     CALL ( SHOW_ICM_RECORDING_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0168B 1E85     4     PAGE ( $ / 1024 ),
   481 0168C 17F5 C        	JMP	VGA_STRING1
   482 0168D      C        VGA_STRING_13:
   483            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_2WAY_RECORDING_EN,#SHOW_2WAY_RECORDING_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0168D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0168E 1694     2     JMP ( $ + 6 ),
       0168F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_2WAY_RECORDING_EN ),
                      3  M  LCALL  SHOW_2WAY_RECORDING_EN 
                      4  M  PAGE #( SHOW_2WAY_RECORDING_EN ),
       01690 1E86     4     PAGE ( SHOW_2WAY_RECORDING_EN / 1024 ),
       01691 1066     3     CALL ( SHOW_2WAY_RECORDING_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01692 1E85     4     PAGE ( $ / 1024 ),
       01693 1698     1     JMP ( $ + 5 ),
       01694 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_2WAY_RECORDING_GE ),
                      3  M  LCALL  SHOW_2WAY_RECORDING_GE 
                      4  M  PAGE #( SHOW_2WAY_RECORDING_GE ),
       01695 1E86     4     PAGE ( SHOW_2WAY_RECORDING_GE / 1024 ),
       01696 1237     3     CALL ( SHOW_2WAY_RECORDING_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01697 1E85     4     PAGE ( $ / 1024 ),
   484 01698 17F5 C        	JMP	VGA_STRING1
   485 01699      C        VGA_STRING_14:
   486            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_NO_NUMBER_EN,#SHOW_NO_NUMBER_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01699 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0169A 16A0     2     JMP ( $ + 6 ),
       0169B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NO_NUMBER_EN ),
                      3  M  LCALL  SHOW_NO_NUMBER_EN 
                      4  M  PAGE #( SHOW_NO_NUMBER_EN ),
       0169C 1E86     4     PAGE ( SHOW_NO_NUMBER_EN / 1024 ),
       0169D 1085     3     CALL ( SHOW_NO_NUMBER_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0169E 1E85     4     PAGE ( $ / 1024 ),
       0169F 16A4     1     JMP ( $ + 5 ),
       016A0 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NO_NUMBER_GE ),
                      3  M  LCALL  SHOW_NO_NUMBER_GE 
                      4  M  PAGE #( SHOW_NO_NUMBER_GE ),
       016A1 1E86     4     PAGE ( SHOW_NO_NUMBER_GE / 1024 ),
       016A2 1256     3     CALL ( SHOW_NO_NUMBER_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016A3 1E85     4     PAGE ( $ / 1024 ),
   487 016A4 17F5 C        	JMP	VGA_STRING1
   488 016A5      C        VGA_STRING_15:
   489            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_LONG_DISTANCE_CALL_EN,#SHOW_LONG_DISTANCE_CALL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016A5 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016A6 16AC     2     JMP ( $ + 6 ),
       016A7 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_LONG_DISTANCE_CALL_EN ),
                      3  M  LCALL  SHOW_LONG_DISTANCE_CALL_EN 
                      4  M  PAGE #( SHOW_LONG_DISTANCE_CALL_EN ),
       016A8 1E86     4     PAGE ( SHOW_LONG_DISTANCE_CALL_EN / 1024 ),
       016A9 1090     3     CALL ( SHOW_LONG_DISTANCE_CALL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016AA 1E85     4     PAGE ( $ / 1024 ),
       016AB 16B0     1     JMP ( $ + 5 ),
       016AC 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_LONG_DISTANCE_CALL_GE ),
                      3  M  LCALL  SHOW_LONG_DISTANCE_CALL_GE 
                      4  M  PAGE #( SHOW_LONG_DISTANCE_CALL_GE ),
       016AD 1E86     4     PAGE ( SHOW_LONG_DISTANCE_CALL_GE / 1024 ),
       016AE 1264     3     CALL ( SHOW_LONG_DISTANCE_CALL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016AF 1E85     4     PAGE ( $ / 1024 ),
   490 016B0 17F5 C        	JMP	VGA_STRING1
   491 016B1      C        VGA_STRING_16:
   492            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_LCD_CONTRAST_EN,#SHOW_LCD_CONTRAST_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016B1 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016B2 16B8     2     JMP ( $ + 6 ),
       016B3 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_LCD_CONTRAST_EN ),
                      3  M  LCALL  SHOW_LCD_CONTRAST_EN 
                      4  M  PAGE #( SHOW_LCD_CONTRAST_EN ),
       016B4 1E86     4     PAGE ( SHOW_LCD_CONTRAST_EN / 1024 ),
       016B5 10A4     3     CALL ( SHOW_LCD_CONTRAST_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016B6 1E85     4     PAGE ( $ / 1024 ),
       016B7 16BC     1     JMP ( $ + 5 ),
       016B8 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_LCD_CONTRAST_GE ),
                      3  M  LCALL  SHOW_LCD_CONTRAST_GE 
                      4  M  PAGE #( SHOW_LCD_CONTRAST_GE ),
       016B9 1E86     4     PAGE ( SHOW_LCD_CONTRAST_GE / 1024 ),
       016BA 1273     3     CALL ( SHOW_LCD_CONTRAST_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016BB 1E85     4     PAGE ( $ / 1024 ),
   493 016BC 17F5 C        	JMP	VGA_STRING1
   494 016BD      C        VGA_STRING_17:
   495            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SET_RING_EN,#SHOW_SET_RING_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016BD 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016BE 16C4     2     JMP ( $ + 6 ),
       016BF 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_RING_EN ),
                      3  M  LCALL  SHOW_SET_RING_EN 
                      4  M  PAGE #( SHOW_SET_RING_EN ),
       016C0 1E86     4     PAGE ( SHOW_SET_RING_EN / 1024 ),
       016C1 110A     3     CALL ( SHOW_SET_RING_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016C2 1E85     4     PAGE ( $ / 1024 ),
       016C3 16C8     1     JMP ( $ + 5 ),
       016C4 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_RING_GE ),
                      3  M  LCALL  SHOW_SET_RING_GE 
                      4  M  PAGE #( SHOW_SET_RING_GE ),
       016C5 1E86     4     PAGE ( SHOW_SET_RING_GE / 1024 ),
       016C6 1281     3     CALL ( SHOW_SET_RING_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016C7 1E85     4     PAGE ( $ / 1024 ),
   496 016C8 17F5 C        	JMP	VGA_STRING1
   497 016C9      C        VGA_STRING_18:
   498            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SET_REMOTE_CODE_EN,#SHOW_SET_REMOTE_CODE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016C9 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016CA 16D0     2     JMP ( $ + 6 ),
       016CB 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_REMOTE_CODE_EN ),
                      3  M  LCALL  SHOW_SET_REMOTE_CODE_EN 
                      4  M  PAGE #( SHOW_SET_REMOTE_CODE_EN ),
       016CC 1E86     4     PAGE ( SHOW_SET_REMOTE_CODE_EN / 1024 ),
       016CD 10B2     3     CALL ( SHOW_SET_REMOTE_CODE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016CE 1E85     4     PAGE ( $ / 1024 ),
       016CF 16D4     1     JMP ( $ + 5 ),
       016D0 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_REMOTE_CODE_GE ),
                      3  M  LCALL  SHOW_SET_REMOTE_CODE_GE 
                      4  M  PAGE #( SHOW_SET_REMOTE_CODE_GE ),
       016D1 1E86     4     PAGE ( SHOW_SET_REMOTE_CODE_GE / 1024 ),
       016D2 1292     3     CALL ( SHOW_SET_REMOTE_CODE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016D3 1E85     4     PAGE ( $ / 1024 ),
   499 016D4 17F5 C        	JMP	VGA_STRING1
   500 016D5      C        VGA_STRING_19:
   501            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SET_LONG_CODE_EN,#SHOW_SET_LONG_CODE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016D5 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016D6 16DC     2     JMP ( $ + 6 ),
       016D7 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_LONG_CODE_EN ),
                      3  M  LCALL  SHOW_SET_LONG_CODE_EN 
                      4  M  PAGE #( SHOW_SET_LONG_CODE_EN ),
       016D8 1E86     4     PAGE ( SHOW_SET_LONG_CODE_EN / 1024 ),
       016D9 10C3     3     CALL ( SHOW_SET_LONG_CODE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016DA 1E85     4     PAGE ( $ / 1024 ),
       016DB 16E0     1     JMP ( $ + 5 ),
       016DC 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_LONG_CODE_GE ),
                      3  M  LCALL  SHOW_SET_LONG_CODE_GE 
                      4  M  PAGE #( SHOW_SET_LONG_CODE_GE ),
       016DD 1E86     4     PAGE ( SHOW_SET_LONG_CODE_GE / 1024 ),
       016DE 12A2     3     CALL ( SHOW_SET_LONG_CODE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016DF 1E85     4     PAGE ( $ / 1024 ),
   502 016E0 17F5 C        	JMP	VGA_STRING1
   503 016E1      C        VGA_STRING_20:
   504            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM_RECORDING_EN,#SHOW_OGM_RECORDING_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016E1 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016E2 16E8     2     JMP ( $ + 6 ),
       016E3 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_RECORDING_EN ),
                      3  M  LCALL  SHOW_OGM_RECORDING_EN 
                      4  M  PAGE #( SHOW_OGM_RECORDING_EN ),
       016E4 1E86     4     PAGE ( SHOW_OGM_RECORDING_EN / 1024 ),
       016E5 10D2     3     CALL ( SHOW_OGM_RECORDING_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016E6 1E85     4     PAGE ( $ / 1024 ),
       016E7 16EC     1     JMP ( $ + 5 ),
       016E8 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_RECORDING_GE ),
                      3  M  LCALL  SHOW_OGM_RECORDING_GE 
                      4  M  PAGE #( SHOW_OGM_RECORDING_GE ),
       016E9 1E86     4     PAGE ( SHOW_OGM_RECORDING_GE / 1024 ),
       016EA 12BC     3     CALL ( SHOW_OGM_RECORDING_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016EB 1E85     4     PAGE ( $ / 1024 ),
   505 016EC 17F5 C        	JMP	VGA_STRING1
   506 016ED      C        VGA_STRING_21:
   507            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM_PLAYBACK_EN,#SHOW_OGM_PLAYBACK_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016ED 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016EE 16F4     2     JMP ( $ + 6 ),
       016EF 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_PLAYBACK_EN ),
                      3  M  LCALL  SHOW_OGM_PLAYBACK_EN 
                      4  M  PAGE #( SHOW_OGM_PLAYBACK_EN ),
       016F0 1E86     4     PAGE ( SHOW_OGM_PLAYBACK_EN / 1024 ),
       016F1 1100     3     CALL ( SHOW_OGM_PLAYBACK_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016F2 1E85     4     PAGE ( $ / 1024 ),
       016F3 16F8     1     JMP ( $ + 5 ),
       016F4 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_PLAYBACK_GE ),
                      3  M  LCALL  SHOW_OGM_PLAYBACK_GE 
                      4  M  PAGE #( SHOW_OGM_PLAYBACK_GE ),
       016F5 1E86     4     PAGE ( SHOW_OGM_PLAYBACK_GE / 1024 ),
       016F6 12C7     3     CALL ( SHOW_OGM_PLAYBACK_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016F7 1E85     4     PAGE ( $ / 1024 ),
   508 016F8 17F5 C        	JMP	VGA_STRING1
   509 016F9      C        VGA_STRING_22:
   510            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_IN_REMOTE_EN,#SHOW_IN_REMOTE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016F9 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016FA 1700     2     JMP ( $ + 6 ),
       016FB 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_IN_REMOTE_EN ),
                      3  M  LCALL  SHOW_IN_REMOTE_EN 
                      4  M  PAGE #( SHOW_IN_REMOTE_EN ),
       016FC 1E86     4     PAGE ( SHOW_IN_REMOTE_EN / 1024 ),
       016FD 1119     3     CALL ( SHOW_IN_REMOTE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016FE 1E85     4     PAGE ( $ / 1024 ),
       016FF 1704     1     JMP ( $ + 5 ),
       01700 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_IN_REMOTE_GE ),
                      3  M  LCALL  SHOW_IN_REMOTE_GE 
                      4  M  PAGE #( SHOW_IN_REMOTE_GE ),
       01701 1E86     4     PAGE ( SHOW_IN_REMOTE_GE / 1024 ),
       01702 1300     3     CALL ( SHOW_IN_REMOTE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01703 1E85     4     PAGE ( $ / 1024 ),
   511 01704 17F5 C        	JMP	VGA_STRING1
   512 01705      C        VGA_STRING_23:
   513            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SUNDAY_EN,#SHOW_SUNDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01705 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01706 170C     2     JMP ( $ + 6 ),
       01707 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SUNDAY_EN ),
                      3  M  LCALL  SHOW_SUNDAY_EN 
                      4  M  PAGE #( SHOW_SUNDAY_EN ),
       01708 1E86     4     PAGE ( SHOW_SUNDAY_EN / 1024 ),
       01709 1124     3     CALL ( SHOW_SUNDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0170A 1E85     4     PAGE ( $ / 1024 ),
       0170B 1710     1     JMP ( $ + 5 ),
       0170C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SUNDAY_GE ),
                      3  M  LCALL  SHOW_SUNDAY_GE 
                      4  M  PAGE #( SHOW_SUNDAY_GE ),
       0170D 1E86     4     PAGE ( SHOW_SUNDAY_GE / 1024 ),
       0170E 12EE     3     CALL ( SHOW_SUNDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0170F 1E85     4     PAGE ( $ / 1024 ),
   514 01710 17F5 C        	JMP	VGA_STRING1
   515 01711      C        VGA_STRING_24:
   516            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_MONDAY_EN,#SHOW_MONDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01711 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01712 1718     2     JMP ( $ + 6 ),
       01713 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MONDAY_EN ),
                      3  M  LCALL  SHOW_MONDAY_EN 
                      4  M  PAGE #( SHOW_MONDAY_EN ),
       01714 1E86     4     PAGE ( SHOW_MONDAY_EN / 1024 ),
       01715 112C     3     CALL ( SHOW_MONDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01716 1E85     4     PAGE ( $ / 1024 ),
       01717 171C     1     JMP ( $ + 5 ),
       01718 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MONDAY_GE ),
                      3  M  LCALL  SHOW_MONDAY_GE 
                      4  M  PAGE #( SHOW_MONDAY_GE ),
       01719 1E86     4     PAGE ( SHOW_MONDAY_GE / 1024 ),
       0171A 130D     3     CALL ( SHOW_MONDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0171B 1E85     4     PAGE ( $ / 1024 ),
   517 0171C 17F5 C        	JMP	VGA_STRING1
   518 0171D      C        VGA_STRING_25:
   519            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_TUESDAY_EN,#SHOW_TUESDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0171D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0171E 1724     2     JMP ( $ + 6 ),
       0171F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_TUESDAY_EN ),
                      3  M  LCALL  SHOW_TUESDAY_EN 
                      4  M  PAGE #( SHOW_TUESDAY_EN ),
       01720 1E86     4     PAGE ( SHOW_TUESDAY_EN / 1024 ),
       01721 1134     3     CALL ( SHOW_TUESDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01722 1E85     4     PAGE ( $ / 1024 ),
       01723 1728     1     JMP ( $ + 5 ),
       01724 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_TUESDAY_GE ),
                      3  M  LCALL  SHOW_TUESDAY_GE 
                      4  M  PAGE #( SHOW_TUESDAY_GE ),
       01725 1E86     4     PAGE ( SHOW_TUESDAY_GE / 1024 ),
       01726 1315     3     CALL ( SHOW_TUESDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01727 1E85     4     PAGE ( $ / 1024 ),
   520 01728 17F5 C        	JMP	VGA_STRING1
   521 01729      C        VGA_STRING_26:
   522            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_WEDNSDAY_EN,#SHOW_WEDNSDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01729 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0172A 1730     2     JMP ( $ + 6 ),
       0172B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_WEDNSDAY_EN ),
                      3  M  LCALL  SHOW_WEDNSDAY_EN 
                      4  M  PAGE #( SHOW_WEDNSDAY_EN ),
       0172C 1E86     4     PAGE ( SHOW_WEDNSDAY_EN / 1024 ),
       0172D 113D     3     CALL ( SHOW_WEDNSDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0172E 1E85     4     PAGE ( $ / 1024 ),
       0172F 1734     1     JMP ( $ + 5 ),
       01730 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_WEDNSDAY_GE ),
                      3  M  LCALL  SHOW_WEDNSDAY_GE 
                      4  M  PAGE #( SHOW_WEDNSDAY_GE ),
       01731 1E86     4     PAGE ( SHOW_WEDNSDAY_GE / 1024 ),
       01732 131F     3     CALL ( SHOW_WEDNSDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01733 1E85     4     PAGE ( $ / 1024 ),
   523 01734 17F5 C        	JMP	VGA_STRING1
   524 01735      C        VGA_STRING_27:
   525            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_THURSDAY_EN,#SHOW_THURSDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01735 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01736 173C     2     JMP ( $ + 6 ),
       01737 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_THURSDAY_EN ),
                      3  M  LCALL  SHOW_THURSDAY_EN 
                      4  M  PAGE #( SHOW_THURSDAY_EN ),
       01738 1E86     4     PAGE ( SHOW_THURSDAY_EN / 1024 ),
       01739 1147     3     CALL ( SHOW_THURSDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0173A 1E85     4     PAGE ( $ / 1024 ),
       0173B 1740     1     JMP ( $ + 5 ),
       0173C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_THURSDAY_GE ),
                      3  M  LCALL  SHOW_THURSDAY_GE 
                      4  M  PAGE #( SHOW_THURSDAY_GE ),
       0173D 1E86     4     PAGE ( SHOW_THURSDAY_GE / 1024 ),
       0173E 1329     3     CALL ( SHOW_THURSDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0173F 1E85     4     PAGE ( $ / 1024 ),
   526 01740 17F5 C        	JMP	VGA_STRING1
   527 01741      C        VGA_STRING_28:
   528            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_FRIDAY_EN,#SHOW_FRIDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01741 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01742 1748     2     JMP ( $ + 6 ),
       01743 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_FRIDAY_EN ),
                      3  M  LCALL  SHOW_FRIDAY_EN 
                      4  M  PAGE #( SHOW_FRIDAY_EN ),
       01744 1E86     4     PAGE ( SHOW_FRIDAY_EN / 1024 ),
       01745 1151     3     CALL ( SHOW_FRIDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01746 1E85     4     PAGE ( $ / 1024 ),
       01747 174C     1     JMP ( $ + 5 ),
       01748 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_FRIDAY_GE ),
                      3  M  LCALL  SHOW_FRIDAY_GE 
                      4  M  PAGE #( SHOW_FRIDAY_GE ),
       01749 1E86     4     PAGE ( SHOW_FRIDAY_GE / 1024 ),
       0174A 1349     3     CALL ( SHOW_FRIDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0174B 1E85     4     PAGE ( $ / 1024 ),
   529 0174C 17F5 C        	JMP	VGA_STRING1
   530 0174D      C        VGA_STRING_29:
   531            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SATURDAY_EN,#SHOW_SATURDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0174D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0174E 1754     2     JMP ( $ + 6 ),
       0174F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SATURDAY_EN ),
                      3  M  LCALL  SHOW_SATURDAY_EN 
                      4  M  PAGE #( SHOW_SATURDAY_EN ),
       01750 1E86     4     PAGE ( SHOW_SATURDAY_EN / 1024 ),
       01751 1159     3     CALL ( SHOW_SATURDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01752 1E85     4     PAGE ( $ / 1024 ),
       01753 1758     1     JMP ( $ + 5 ),
       01754 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SATURDAY_GE ),
                      3  M  LCALL  SHOW_SATURDAY_GE 
                      4  M  PAGE #( SHOW_SATURDAY_GE ),
       01755 1E86     4     PAGE ( SHOW_SATURDAY_GE / 1024 ),
       01756 1352     3     CALL ( SHOW_SATURDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01757 1E85     4     PAGE ( $ / 1024 ),
   532 01758 17F5 C        	JMP	VGA_STRING1
   533 01759      C        VGA_STRING_30:
   534            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_MEMORY_FULL_EN,#SHOW_MEMORY_FULL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01759 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0175A 1760     2     JMP ( $ + 6 ),
       0175B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MEMORY_FULL_EN ),
                      3  M  LCALL  SHOW_MEMORY_FULL_EN 
                      4  M  PAGE #( SHOW_MEMORY_FULL_EN ),
       0175C 1E86     4     PAGE ( SHOW_MEMORY_FULL_EN / 1024 ),
       0175D 1163     3     CALL ( SHOW_MEMORY_FULL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0175E 1E85     4     PAGE ( $ / 1024 ),
       0175F 1764     1     JMP ( $ + 5 ),
       01760 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MEMORY_FULL_GE ),
                      3  M  LCALL  SHOW_MEMORY_FULL_GE 
                      4  M  PAGE #( SHOW_MEMORY_FULL_GE ),
       01761 1E86     4     PAGE ( SHOW_MEMORY_FULL_GE / 1024 ),
       01762 1335     3     CALL ( SHOW_MEMORY_FULL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01763 1E85     4     PAGE ( $ / 1024 ),
   535 01764 17F5 C        	JMP	VGA_STRING1
   536 01765      C        VGA_STRING_31:
   537            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_NEW_EN,#SHOW_NEW_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01765 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01766 176C     2     JMP ( $ + 6 ),
       01767 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NEW_EN ),
                      3  M  LCALL  SHOW_NEW_EN 
                      4  M  PAGE #( SHOW_NEW_EN ),
       01768 1E86     4     PAGE ( SHOW_NEW_EN / 1024 ),
       01769 1170     3     CALL ( SHOW_NEW_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0176A 1E85     4     PAGE ( $ / 1024 ),
       0176B 1770     1     JMP ( $ + 5 ),
       0176C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NEW_GE ),
                      3  M  LCALL  SHOW_NEW_GE 
                      4  M  PAGE #( SHOW_NEW_GE ),
       0176D 1E86     4     PAGE ( SHOW_NEW_GE / 1024 ),
       0176E 1344     3     CALL ( SHOW_NEW_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0176F 1E85     4     PAGE ( $ / 1024 ),
   538 01770 17F5 C        	JMP	VGA_STRING1
   539 01771      C        VGA_STRING_32:
   540            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ENGLISH_EN,#SHOW_ENGLISH_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01771 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01772 1778     2     JMP ( $ + 6 ),
       01773 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ENGLISH_EN ),
                      3  M  LCALL  SHOW_ENGLISH_EN 
                      4  M  PAGE #( SHOW_ENGLISH_EN ),
       01774 1E86     4     PAGE ( SHOW_ENGLISH_EN / 1024 ),
       01775 1186     3     CALL ( SHOW_ENGLISH_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01776 1E85     4     PAGE ( $ / 1024 ),
       01777 177C     1     JMP ( $ + 5 ),
       01778 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ENGLISH_GE ),
                      3  M  LCALL  SHOW_ENGLISH_GE 
                      4  M  PAGE #( SHOW_ENGLISH_GE ),
       01779 1E86     4     PAGE ( SHOW_ENGLISH_GE / 1024 ),
       0177A 136C     3     CALL ( SHOW_ENGLISH_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0177B 1E85     4     PAGE ( $ / 1024 ),
   541 0177C 17F5 C        	JMP	VGA_STRING1
   542 0177D      C        VGA_STRING_33:
   543            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_GERMAN_EN,#SHOW_GERMAN_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0177D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0177E 1784     2     JMP ( $ + 6 ),
       0177F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_GERMAN_EN ),
                      3  M  LCALL  SHOW_GERMAN_EN 
                      4  M  PAGE #( SHOW_GERMAN_EN ),
       01780 1E86     4     PAGE ( SHOW_GERMAN_EN / 1024 ),
       01781 118F     3     CALL ( SHOW_GERMAN_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01782 1E85     4     PAGE ( $ / 1024 ),
       01783 1788     1     JMP ( $ + 5 ),
       01784 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_GERMAN_GE ),
                      3  M  LCALL  SHOW_GERMAN_GE 
                      4  M  PAGE #( SHOW_GERMAN_GE ),
       01785 1E86     4     PAGE ( SHOW_GERMAN_GE / 1024 ),
       01786 118F     3     CALL ( SHOW_GERMAN_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01787 1E85     4     PAGE ( $ / 1024 ),
   544 01788 17F5 C        	JMP	VGA_STRING1
   545 01789      C        VGA_STRING_34:
   546            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_EDIT_EN,#SHOW_EDIT_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01789 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0178A 1790     2     JMP ( $ + 6 ),
       0178B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_EDIT_EN ),
                      3  M  LCALL  SHOW_EDIT_EN 
                      4  M  PAGE #( SHOW_EDIT_EN ),
       0178C 1E86     4     PAGE ( SHOW_EDIT_EN / 1024 ),
       0178D 1197     3     CALL ( SHOW_EDIT_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0178E 1E85     4     PAGE ( $ / 1024 ),
       0178F 1794     1     JMP ( $ + 5 ),
       01790 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_EDIT_GE ),
                      3  M  LCALL  SHOW_EDIT_GE 
                      4  M  PAGE #( SHOW_EDIT_GE ),
       01791 1E86     4     PAGE ( SHOW_EDIT_GE / 1024 ),
       01792 1376     3     CALL ( SHOW_EDIT_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01793 1E85     4     PAGE ( $ / 1024 ),
   547 01794 17F5 C        	JMP	VGA_STRING1
   548 01795      C        VGA_STRING_35:
   549            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SEARCH_EN,#SHOW_SEARCH_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01795 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01796 179C     2     JMP ( $ + 6 ),
       01797 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SEARCH_EN ),
                      3  M  LCALL  SHOW_SEARCH_EN 
                      4  M  PAGE #( SHOW_SEARCH_EN ),
       01798 1E86     4     PAGE ( SHOW_SEARCH_EN / 1024 ),
       01799 119D     3     CALL ( SHOW_SEARCH_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0179A 1E85     4     PAGE ( $ / 1024 ),
       0179B 17A0     1     JMP ( $ + 5 ),
       0179C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SEARCH_GE ),
                      3  M  LCALL  SHOW_SEARCH_GE 
                      4  M  PAGE #( SHOW_SEARCH_GE ),
       0179D 1E86     4     PAGE ( SHOW_SEARCH_GE / 1024 ),
       0179E 137E     3     CALL ( SHOW_SEARCH_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0179F 1E85     4     PAGE ( $ / 1024 ),
   550 017A0 17F5 C        	JMP	VGA_STRING1
   551 017A1      C        VGA_STRING_36:
   552            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PLAY_EN,#SHOW_PLAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017A1 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017A2 17A8     2     JMP ( $ + 6 ),
       017A3 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PLAY_EN ),
                      3  M  LCALL  SHOW_PLAY_EN 
                      4  M  PAGE #( SHOW_PLAY_EN ),
       017A4 1E86     4     PAGE ( SHOW_PLAY_EN / 1024 ),
       017A5 11A5     3     CALL ( SHOW_PLAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017A6 1E85     4     PAGE ( $ / 1024 ),
       017A7 17AC     1     JMP ( $ + 5 ),
       017A8 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PLAY_GE ),
                      3  M  LCALL  SHOW_PLAY_GE 
                      4  M  PAGE #( SHOW_PLAY_GE ),
       017A9 1E86     4     PAGE ( SHOW_PLAY_GE / 1024 ),
       017AA 11AB     3     CALL ( SHOW_PLAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017AB 1E85     4     PAGE ( $ / 1024 ),
   553 017AC 17F5 C        	JMP	VGA_STRING1
   554 017AD      C        VGA_STRING_37:
   555            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_STOP_EN,#SHOW_STOP_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017AD 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017AE 17B4     2     JMP ( $ + 6 ),
       017AF 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_STOP_EN ),
                      3  M  LCALL  SHOW_STOP_EN 
                      4  M  PAGE #( SHOW_STOP_EN ),
       017B0 1E86     4     PAGE ( SHOW_STOP_EN / 1024 ),
       017B1 11B6     3     CALL ( SHOW_STOP_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017B2 1E85     4     PAGE ( $ / 1024 ),
       017B3 17B8     1     JMP ( $ + 5 ),
       017B4 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_STOP_GE ),
                      3  M  LCALL  SHOW_STOP_GE 
                      4  M  PAGE #( SHOW_STOP_GE ),
       017B5 1E86     4     PAGE ( SHOW_STOP_GE / 1024 ),
       017B6 11B6     3     CALL ( SHOW_STOP_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017B7 1E85     4     PAGE ( $ / 1024 ),
   556 017B8 17F5 C        	JMP	VGA_STRING1
   557 017B9      C        VGA_STRING_38:
   558            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PAUSE_EN,#SHOW_PAUSE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017B9 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017BA 17C0     2     JMP ( $ + 6 ),
       017BB 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PAUSE_EN ),
                      3  M  LCALL  SHOW_PAUSE_EN 
                      4  M  PAGE #( SHOW_PAUSE_EN ),
       017BC 1E86     4     PAGE ( SHOW_PAUSE_EN / 1024 ),
       017BD 11BC     3     CALL ( SHOW_PAUSE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017BE 1E85     4     PAGE ( $ / 1024 ),
       017BF 17C4     1     JMP ( $ + 5 ),
       017C0 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PAUSE_GE ),
                      3  M  LCALL  SHOW_PAUSE_GE 
                      4  M  PAGE #( SHOW_PAUSE_GE ),
       017C1 1E86     4     PAGE ( SHOW_PAUSE_GE / 1024 ),
       017C2 11BC     3     CALL ( SHOW_PAUSE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017C3 1E85     4     PAGE ( $ / 1024 ),
   559 017C4 17F5 C        	JMP	VGA_STRING1
   560 017C5      C        VGA_STRING_39:
   561            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_COPIED_INTO_BOOK_EN,#SHOW_COPIED_INTO_BOOK_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017C5 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017C6 17CC     2     JMP ( $ + 6 ),
       017C7 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_COPIED_INTO_BOOK_EN ),
                      3  M  LCALL  SHOW_COPIED_INTO_BOOK_EN 
                      4  M  PAGE #( SHOW_COPIED_INTO_BOOK_EN ),
       017C8 1E86     4     PAGE ( SHOW_COPIED_INTO_BOOK_EN / 1024 ),
       017C9 1386     3     CALL ( SHOW_COPIED_INTO_BOOK_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017CA 1E85     4     PAGE ( $ / 1024 ),
       017CB 17D0     1     JMP ( $ + 5 ),
       017CC 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_COPIED_INTO_BOOK_GE ),
                      3  M  LCALL  SHOW_COPIED_INTO_BOOK_GE 
                      4  M  PAGE #( SHOW_COPIED_INTO_BOOK_GE ),
       017CD 1E86     4     PAGE ( SHOW_COPIED_INTO_BOOK_GE / 1024 ),
       017CE 1398     3     CALL ( SHOW_COPIED_INTO_BOOK_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017CF 1E85     4     PAGE ( $ / 1024 ),
   562 017D0 17F5 C        	JMP	VGA_STRING1
   563 017D1      C        VGA_STRING_40:
   564            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM_EN,#SHOW_OGM_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017D1 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017D2 17D8     2     JMP ( $ + 6 ),
       017D3 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_EN ),
                      3  M  LCALL  SHOW_OGM_EN 
                      4  M  PAGE #( SHOW_OGM_EN ),
       017D4 1E86     4     PAGE ( SHOW_OGM_EN / 1024 ),
       017D5 13A9     3     CALL ( SHOW_OGM_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017D6 1E85     4     PAGE ( $ / 1024 ),
       017D7 17DC     1     JMP ( $ + 5 ),
       017D8 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_GE ),
                      3  M  LCALL  SHOW_OGM_GE 
                      4  M  PAGE #( SHOW_OGM_GE ),
       017D9 1E86     4     PAGE ( SHOW_OGM_GE / 1024 ),
       017DA 13AE     3     CALL ( SHOW_OGM_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017DB 1E85     4     PAGE ( $ / 1024 ),
   565 017DC 17F5 C        	JMP	VGA_STRING1
   566 017DD      C        VGA_STRING_41:
   567            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_END_OF_NAMES_BOOK_EN,#SHOW_END_OF_NAMES_BOOK_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017DD 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017DE 17E4     2     JMP ( $ + 6 ),
       017DF 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_END_OF_NAMES_BOOK_EN ),
                      3  M  LCALL  SHOW_END_OF_NAMES_BOOK_EN 
                      4  M  PAGE #( SHOW_END_OF_NAMES_BOOK_EN ),
       017E0 1E86     4     PAGE ( SHOW_END_OF_NAMES_BOOK_EN / 1024 ),
       017E1 13BC     3     CALL ( SHOW_END_OF_NAMES_BOOK_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017E2 1E85     4     PAGE ( $ / 1024 ),
       017E3 17E8     1     JMP ( $ + 5 ),
       017E4 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_END_OF_NAMES_BOOK_GE ),
                      3  M  LCALL  SHOW_END_OF_NAMES_BOOK_GE 
                      4  M  PAGE #( SHOW_END_OF_NAMES_BOOK_GE ),
       017E5 1E86     4     PAGE ( SHOW_END_OF_NAMES_BOOK_GE / 1024 ),
       017E6 13CA     3     CALL ( SHOW_END_OF_NAMES_BOOK_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017E7 1E85     4     PAGE ( $ / 1024 ),
   568 017E8 17F5 C        	JMP	VGA_STRING1
   569 017E9      C        VGA_STRING_42:
   570            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM__EN,#SHOW_OGM__GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017E9 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017EA 17F0     2     JMP ( $ + 6 ),
       017EB 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM__EN ),
                      3  M  LCALL  SHOW_OGM__EN 
                      4  M  PAGE #( SHOW_OGM__EN ),
       017EC 1E86     4     PAGE ( SHOW_OGM__EN / 1024 ),
       017ED 13A9     3     CALL ( SHOW_OGM__EN % 1024 ),
                      4  M  PAGE #( $ ),
       017EE 1E85     4     PAGE ( $ / 1024 ),
       017EF 17F4     1     JMP ( $ + 5 ),
       017F0 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM__GE ),
                      3  M  LCALL  SHOW_OGM__GE 
                      4  M  PAGE #( SHOW_OGM__GE ),
       017F1 1E86     4     PAGE ( SHOW_OGM__GE / 1024 ),
       017F2 13B6     3     CALL ( SHOW_OGM__GE % 1024 ),
                      4  M  PAGE #( $ ),
       017F3 1E85     4     PAGE ( $ / 1024 ),
   571 017F4 17F5 C        	JMP	VGA_STRING1
   572            C        
   573 017F5      C        VGA_STRING1:
   574 017F5 0056 C        	MOV	TEMP0,A
   575 017F6 1DFF C        	SUB	A,@CH_END
   576            C      M 	JPZ	VIEW_REVISE_RET
       017F7 0C83     1     JBC  _STATUS , Z 
       017F8 1598     1     JMP  VIEW_REVISE_RET ,
   577 017F9 0DFB C        	JBC	STR_REG,7
   578            C      M 	SRAM	TEMP0,7
       017FA 0BD6     1     BS  TEMP0 , 7 
   579 017FB 0416 C        	MOV	A,TEMP0
   580            C      M 	CALL	#VGA_STR
       017FC 104B     1     CALL ( VGA_STR % 1024 ),
   581 017FD 057A C        	INC	CONT
   582 017FE 15C3 C        	JMP	VGA_STRING_LOOP
   583            C        ;VGA_STRING_RET:
   584            C        	;RET
   585            C        
   586            C        
   587            C        FIND_TAB	MACRO	FIND_CONT,LANG_REG,LANG_BIT,#ADDR_EN,#ADDR_GE
   588            C        	JPB	LANG_REG,LANG_BIT,$+6
   589            C        	MOV	A,FIND_CONT
   590            C        	CALL	#ADDR_EN
   591            C        	JMP	$+5
   592            C        	MOV	A,FIND_CONT
   593            C        	CALL	#ADDR_GE
   594            C        	ENDM
   595            C        
   596            C        
   597            C        
   598            C        ; 显示更新第一行。
   599            C        ORG	0X1000
   600 01000      C        VGA_UPDATE:
   601            C      M 	BANK	0
       01000 0984     1     BC  _RSR , 6 
       01001 09C4     1     BC  _RSR , 7 
   602            C        	/*
   603            C        	JPNB	SYS_FG,LOCK_TOPLINE,VGA_UPDATE_1
   604            C        	CLRC
   605            C        	RRCA	SEC_REG
   606            C        	MOV	TEMP1,A
   607            C        	CLRC
   608            C        	RRCA	TMR_IDLE
   609            C        	ADD	A,@30
   610            C        	MOV	TEMP0,A
   611            C        	SUB	A,@59
   612            C        	JPC	$+3
   613            C        	SUB	TEMP0,@60
   614            C        	SUBA	TEMP1,TEMP0
   615            C        	JPZ	VGA_UPDATE_0
   616            C        	INC	TEMP0
   617            C        	SUBA	TEMP0,TEMP1
   618            C        	JPNZ	VGA_UPDATE_1
   619            C        VGA_UPDATE_0:
   620            C        	CALL	#STCP_IDLE
   621            C        	
   622            C        	*/
   623 01002      C        VGA_UPDATE_1:
   624            C      M 	JPB	SYS_FG,LOCK_TOPLINE,VGA_UPDATE_TIME
       01002 0D5E     1     JBC  SYS_FG , LOCK_TOPLINE 
       01003 1414     1     JMP  VGA_UPDATE_TIME ,
   625            C        	
   626            C      M 	CRAM	STAMP_FG,STAMP_SEC
       01004 091D     1     BC  STAMP_FG , STAMP_SEC 
   627            C      M 	JPB	SEC_REG,0,$+3
       01005 0C2A     1     JBC  SEC_REG , 0 
       01006 1409     1     JMP ( $ + 3 ),
   628            C      M 	SRAM	STAMP_FG,STAMP_SEC
       01007 0B1D     1     BS  STAMP_FG , STAMP_SEC 
   629            C      M 	SRAM	SYS_FG,SYS_CLOCK
       01008 0ADE     1     BS  SYS_FG , SYS_CLOCK 
   630 01009 041D C        	MOV	A,STAMP_FG
   631            C      M 	CALL	#VGA_STAMP
                      2  M  LCALL  VGA_STAMP 
                      3  M  PAGE #( VGA_STAMP ),
       0100A 1E85     3     PAGE ( VGA_STAMP / 1024 ),
       0100B 1000     2     CALL ( VGA_STAMP % 1024 ),
                      3  M  PAGE #( $ ),
       0100C 1E84     3     PAGE ( $ / 1024 ),
   632            C      M 	JPNB	SYS_FG,SYS_CLOCK,VGA_UPDATE_TIME
       0100D 0EDE     1     JBS  SYS_FG , SYS_CLOCK 
       0100E 1414     1     JMP  VGA_UPDATE_TIME ,
   633            C      M 	CRAM	SYS_FG,SYS_CLOCK
       0100F 08DE     1     BC  SYS_FG , SYS_CLOCK 
   634            C        	
   635 01010 1073 C        	CALL	UPDATE_STAMP
   636 01011 1079 C        	CALL	UPDATE_NUM1
   637 01012 108E C        	CALL	UPDATE_NUM2
   638 01013 108F C        	CALL	UPDATE_STR
   639 01014      C        VGA_UPDATE_TIME:
   640            C        	
   641            C      M 	BANK	1
       01014 0B84     1     BS  _RSR , 6 
       01015 09C4     1     BC  _RSR , 7 
   642            C      M 	JPNB	SYS_FG,TIME,VGA_UPDATE_RET
       01016 0FDE     1     JBS  SYS_FG , TIME 
       01017 1430     1     JMP  VGA_UPDATE_RET ,
   643 01018 1860 C        	MOV	A,@(STYLE_CENTER)
   644            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       01019 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       0101A 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       0101B 1E84     3     PAGE ( $ / 1024 ),
   645 0101C 042E C        	MOV	A,TIME_HOUR
   646            C      M 	JPZ	VGA_UPDATE_TIME_1
       0101D 0C83     1     JBC  _STATUS , Z 
       0101E 1424     1     JMP  VGA_UPDATE_TIME_1 ,
   647 0101F 1031 C        	CALL	UPDATE_TIME
   648 01020 1811 C        	MOV	A,@0X11
   649            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       01021 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       01022 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       01023 1E84     3     PAGE ( $ / 1024 ),
   650 01024      C        VGA_UPDATE_TIME_1:
   651 01024 042D C        	MOV	A,TIME_MIN
   652 01025 1031 C        	CALL	UPDATE_TIME
   653 01026 1811 C        	MOV	A,@0X11
   654            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       01027 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       01028 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       01029 1E84     3     PAGE ( $ / 1024 ),
   655            C        
   656 0102A 042C C        	MOV	A,TIME_SEC
   657 0102B 1031 C        	CALL	UPDATE_TIME
   658 0102C 18FF C        	MOV	A,@CH_END
   659            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       0102D 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       0102E 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       0102F 1E84     3     PAGE ( $ / 1024 ),
   660            C        
   661 01030      C        VGA_UPDATE_RET:
   662 01030 0012 C        	RET
   663            C        	
   664            C        
   665            C        
   666 01031      C        UPDATE_TIME:
   667 01031 0056 C        	MOV	GENE_A,A
   668            C      M 	CALL	#MATH_HTD
       01032 1100     1     CALL ( MATH_HTD % 1024 ),
   669            C      M 	MOV	BANK1_TEMP0,RESULT
       01033 0418     1     MOV A, RESULT 
       01034 0060     1     MOV  BANK1_TEMP0 ,A
   670 01035 0720 C        	SWAPA	BANK1_TEMP0
   671 01036 1A0F C        	AND	A,@0X0F
   672            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       01037 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       01038 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       01039 1E84     3     PAGE ( $ / 1024 ),
   673            C      M 	ANDA	BANK1_TEMP0,@0X0F
       0103A 180F     1     MOV A,@( 15 )
       0103B 02A0     1     AND A, BANK1_TEMP0 
   674            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       0103C 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       0103D 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       0103E 1E84     3     PAGE ( $ / 1024 ),
   675 0103F 0012 C        	RET
   676            C        
   677 01040      C        VGA_HOUR:
   678 01040 0056 C        	MOV	GENE_A,A
   679            C      M 	BANK	1
       01041 0B84     1     BS  _RSR , 6 
       01042 09C4     1     BC  _RSR , 7 
   680            C      M 	JPNB	R1_SYS_FG,TIMEFORMAT,VGA_HOUR_RET
       01043 0E32     1     JBS  R1_SYS_FG , TIMEFORMAT 
       01044 144F     1     JMP  VGA_HOUR_RET ,
   681            C      M 	SUBA	GENE_A,@12
       01045 180C     1     MOV A,@( 12 )
       01046 0116     1     SUB A, GENE_A 
   682            C      M 	JPNC	$+2
       01047 0E03     1     JBS  _STATUS , C 
       01048 144A     1     JMP ( $ + 2 ),
   683 01049 0056 C        	MOV	GENE_A,A
   684 0104A 0416 C        	MOV	A,GENE_A
   685            C      M 	JPNZ	VGA_HOUR_RET
       0104B 0E83     1     JBS  _STATUS , Z 
       0104C 144F     1     JMP  VGA_HOUR_RET ,
   686            C      M 	MOV	GENE_A,@12
       0104D 180C     1     MOV A,@( 12 )
       0104E 0056     1     MOV  GENE_A ,A
   687 0104F      C        VGA_HOUR_RET:
   688            C      M 	BANK	0
       0104F 0984     1     BC  _RSR , 6 
       01050 09C4     1     BC  _RSR , 7 
   689 01051 0416 C        	MOV	A,GENE_A
   690            C        
   691 01052      C        VGA_TIME:
   692 01052 0056 C        	MOV	GENE_A,A
   693            C      M 	CALL	#MATH_HTD
       01053 1100     1     CALL ( MATH_HTD % 1024 ),
   694            C      M 	MOV	BANK0_TEMP0,RESULT
       01054 0418     1     MOV A, RESULT 
       01055 0060     1     MOV  BANK0_TEMP0 ,A
   695 01056 0720 C        	SWAPA	BANK0_TEMP0
   696 01057 1A0F C        	AND	A,@(0X0F)
   697            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       01058 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       01059 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0105A 1E84     3     PAGE ( $ / 1024 ),
   698            C      M 	ANDA	BANK0_TEMP0,@(0X0F)
       0105B 180F     1     MOV A,@( 15 )
       0105C 02A0     1     AND A, BANK0_TEMP0 
   699            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       0105D 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       0105E 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0105F 1E84     3     PAGE ( $ / 1024 ),
   700 01060 0012 C        	RET
   701 01061      C        VGA_MONTH:
   702 01061 0056 C        	MOV	GENE_A,A
   703            C      M 	CALL	#MATH_HTD
       01062 1100     1     CALL ( MATH_HTD % 1024 ),
   704            C      M 	MOV	BANK0_TEMP0,RESULT
       01063 0418     1     MOV A, RESULT 
       01064 0060     1     MOV  BANK0_TEMP0 ,A
   705 01065 0720 C        	SWAPA	BANK0_TEMP0
   706 01066 1A0F C        	AND	A,@(0X0F)
   707            C      M 	JPNZ	$+2
       01067 0E83     1     JBS  _STATUS , Z 
       01068 146A     1     JMP ( $ + 2 ),
   708 01069 1810 C        	MOV	A,@NUM_BLANK
   709            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       0106A 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       0106B 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0106C 1E84     3     PAGE ( $ / 1024 ),
   710            C      M 	ANDA	BANK0_TEMP0,@(0X0F)
       0106D 180F     1     MOV A,@( 15 )
       0106E 02A0     1     AND A, BANK0_TEMP0 
   711            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       0106F 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       01070 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       01071 1E84     3     PAGE ( $ / 1024 ),
   712 01072 0012 C        	RET
   713            C        
   714 01073      C        UPDATE_STAMP:
   715            C      M 	CRAM	STAMP_FG,STAMP_NEW
       01073 085D     1     BC  STAMP_FG , STAMP_NEW 
   716 01074 042C C        	MOV	A,NEW_CALL
   717            C      M 	JPZ	UPDATE_STAMP_RET
       01075 0C83     1     JBC  _STATUS , Z 
       01076 1478     1     JMP  UPDATE_STAMP_RET ,
   718            C      M 	SRAM	STAMP_FG,STAMP_NEW
       01077 0A5D     1     BS  STAMP_FG , STAMP_NEW 
   719 01078      C        UPDATE_STAMP_RET:
   720 01078 0012 C        	RET
   721            C        
   722 01079      C        UPDATE_NUM1:
   723 01079 1800 C        	MOV	A,@0
   724            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       0107A 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       0107B 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0107C 1E84     3     PAGE ( $ / 1024 ),
   725            C        	
   726            C      M 	BANK	0
       0107D 0984     1     BC  _RSR , 6 
       0107E 09C4     1     BC  _RSR , 7 
   727 0107F 0428 C        	MOV	A,HOUR_REG
   728 01080 1040 C        	CALL	VGA_HOUR
   729            C        	
   730 01081 0429 C        	MOV	A,MIN_REG
   731 01082 1052 C        	CALL	VGA_TIME
   732            C        	
   733 01083 0426 C        	MOV	A,DAY_REG
   734 01084 1052 C        	CALL	VGA_TIME
   735            C        	
   736 01085 0425 C        	MOV	A,MONTH_REG
   737 01086 1061 C        	CALL	VGA_MONTH
   738            C        	
   739 01087 042B C        	MOV	A,TOTAL_CALL
   740 01088 1052 C        	CALL	VGA_TIME
   741            C        	
   742 01089 18FF C        	MOV	A,@CH_END
   743            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       0108A 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       0108B 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0108C 1E84     3     PAGE ( $ / 1024 ),
   744 0108D 0012 C        	RET
   745            C        
   746 0108E      C        UPDATE_NUM2:
   747 0108E 0012 C        	RET
   748            C        
   749 0108F      C        UPDATE_STR:
   750            C      M 	BANK	0
       0108F 0984     1     BC  _RSR , 6 
       01090 09C4     1     BC  _RSR , 7 
   751            C      M 	JPB	EVENT,0,UPDATE_STR_NAME		; 响铃中，显示人名
       01091 0C1F     1     JBC  EVENT , 0 
       01092 14AF     1     JMP  UPDATE_STR_NAME ,
   752            C        	;MOV	A,TMR_NAME
   753            C        	;JPNZ	UPDATE_STR_RET
   754            C      M 	PAGE	#VGA_STR
       01093 1E85     1     PAGE ( VGA_STR / 1024 ),
   755 01094 1820 C        	MOV	A,@(STYLE_LEFT)
   756 01095 104B C        	CALL	VGA_STR
   757 01096 181F C        	MOV	A,@WD_NEW
   758 01097 11BF C        	CALL	VGA_STRING
   759 01098 1828 C        	MOV	A,@CH_COLON
   760 01099 104B C        	CALL	VGA_STR
   761            C      M 	MOV	GENE_A,NEW_MSG
       0109A 042E     1     MOV A, NEW_MSG 
       0109B 0056     1     MOV  GENE_A ,A
   762 0109C 119D C        	CALL	VGA_HEX_STR
   763 0109D 18FF C        	MOV	A,@CH_END
   764 0109E 104B C        	CALL	VGA_STR
   765            C        	
   766 0109F 1840 C        	MOV	A,@(STYLE_RIGHT)
   767 010A0 104B C        	CALL	VGA_STR
   768 010A1 1802 C        	MOV	A,@WD_TOTAL
   769 010A2 11BF C        	CALL	VGA_STRING
   770 010A3 1828 C        	MOV	A,@CH_COLON
   771 010A4 104B C        	CALL	VGA_STR
   772            C      M 	MOV	GENE_A,TOTAL_MSG
       010A5 042D     1     MOV A, TOTAL_MSG 
       010A6 0056     1     MOV  GENE_A ,A
   773 010A7 119D C        	CALL	VGA_HEX_STR
   774 010A8 18FF C        	MOV	A,@CH_END
   775 010A9 104B C        	CALL	VGA_STR
   776            C      M 	PAGE	#($)
       010AA 1E84     1     PAGE ( $ / 1024 ),
   777            C        	
   778            C      M 	CALL	#CLR_NUM2
                      2  M  LCALL  CLR_NUM2 
                      3  M  PAGE #( CLR_NUM2 ),
       010AB 1E85     3     PAGE ( CLR_NUM2 / 1024 ),
       010AC 107E     2     CALL ( CLR_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       010AD 1E84     3     PAGE ( $ / 1024 ),
   779 010AE 14B8 C        	JMP	UPDATE_STR_RET
   780 010AF      C        UPDATE_STR_NAME:
   781            C      M 	JPB	_FSR,0,UPDATE_STR_INVALID
       010AF 0C0A     1     JBC  _FSR , 0 
       010B0 14B4     1     JMP  UPDATE_STR_INVALID ,
   782            C      M 	MOV	TMR_NAME,@16
       010B1 1810     1     MOV A,@( 16 )
       010B2 0078     1     MOV  TMR_NAME ,A
   783 010B3 0012 C        	RET
   784 010B4      C        UPDATE_STR_INVALID:
   785 010B4 0438 C        	MOV	A,TMR_NAME
   786            C      M 	JPNZ	UPDATE_STR_RET
       010B5 0E83     1     JBS  _STATUS , Z 
       010B6 14B8     1     JMP  UPDATE_STR_RET ,
   787            C      M 	CRAM	EVENT,0
       010B7 081F     1     BC  EVENT , 0 
   788 010B8      C        UPDATE_STR_RET:
   789 010B8 0012 C        	RET
   790            C        	
   511                     ; LCD驱动模块
   512                     ; 0X1800~0X1FD2
   513                     include	"lcddrv.asm"
     1            C        
     2            C        
     3            C        org 0x1C28
     4            C        
     5            C        /***************************************
     6            C           a
     7            C         f   b
     8            C           g
     9            C         e   c
    10            C           d
    11            C        ***************************************/
    12            C        
    13 01C28      C        second_line_tab:	;second line 0cbdgaef
    14 01C28 0020 C        	tbl
    15 01C29 1C77 C        	RETL	@0X77		; 0
    16 01C2A 1C60 C        	RETL	@0X60		; 1
    17 01C2B 1C3E C        	RETL	@0X3E		; 2
    18 01C2C 1C7C C        	RETL	@0X7C		; 3
    19 01C2D 1C69 C        	RETL	@0X69		; 4
    20 01C2E 1C5D C        	RETL	@0X5D		; 5
    21 01C2F 1C5F C        	RETL	@0X5F		; 6
    22 01C30 1C64 C        	RETL	@0X64		; 7
    23 01C31 1C7F C        	RETL	@0X7F		; 8
    24 01C32 1C7D C        	RETL	@0X7D		; 9
    25            C        ;--------------------------------------------------------------
    26 01C33 1C6F C        	RETL	@0X6F		; A
    27 01C34 1C5B C        	RETL	@0X5B		; b
    28 01C35 1C17 C        	RETL	@0X17		; C
    29 01C36 1C7A C        	RETL	@0X7A		; d
    30 01C37 1C1F C        	RETL	@0X1F		; E
    31 01C38 1C0F C        	RETL	@0X0F		; F
    32 01C39 1C00 C        	RETL	@0X0		; BLANK
    33 01C3A 1C08 C        	RETL	@0X08		; -
    34 01C3B 1C1B C        	RETL	@0X1B		; T
    35            C        
    36            C        ;ORG	0X1F00
    37 01C3C      C        third_line_taba: 
    38 01C3C 0020 C        	TBL
    39 01C3D 1C70 C                RETL	@0b01110000	; 0
    40 01C3E 1C00 C        	RETL	@0b00000000	; 1
    41 01C3F 1CC0 C        	RETL	@0b11000000	; 2
    42 01C40 1C88 C        	RETL	@0b10001000	; 3
    43 01C41 1C60 C        	RETL	@0b01100000	; 4
    44 01C42 1CB8 C        	RETL	@0b10111000	; 5
    45 01C43 1C70 C        	RETL	@0b01110000	; 6
    46 01C44 1C08 C        	RETL	@0b00001000	; 7
    47 01C45 1C50 C        	RETL	@0b01010000	; 8
    48 01C46 1C10 C        	RETL	@0b00010000	; 9
    49            C        	
    50 01C47 1CF0 C        	RETL	@0b11110000	; A
    51 01C48 1CF8 C        	RETL	@0b11111000	; B
    52 01C49 1C70 C        	RETL	@0b01110000	; C
    53 01C4A 1CF8 C        	RETL	@0b11111000	; D
    54 01C4B 1CF8 C        	RETL	@0b11111000	; E
    55 01C4C 1CF8 C        	RETL	@0b11111000	; F
    56 01C4D 1C70 C        	RETL	@0b01110000	; G
    57 01C4E 1CF8 C        	RETL	@0b11111000	; H
    58 01C4F 1C00 C        	RETL	@0b00000000	; I
    59 01C50 1C40 C        	RETL	@0b01000000	; J
    60 01C51 1CF8 C        	RETL	@0b11111000	; K
    61 01C52 1C00 C        	RETL	@0		; L
    62 01C53 1CF8 C        	RETL	@0xf8		; M
    63 01C54 1CF8 C        	RETL	@0b11111000	; N
    64 01C55 1C70 C        	RETL	@0b01110000	; O
    65 01C56 1CF8 C        	RETL	@0b11111000	; P
    66 01C57 1C70 C        	RETL	@0b01110000	; Q
    67 01C58 1CF8 C        	RETL	@0b11111000	; R
    68 01C59 1C90 C        	RETL	@0b10010000	; S
    69 01C5A 1C08 C        	RETL	@0b00001000	; T
    70 01C5B 1C78 C        	RETL	@0b01111000	; U
    71 01C5C 1C38 C        	RETL	@0b00111000	; V
    72 01C5D 1C78 C        	RETL	@0b01111000	; W
    73 01C5E 1C88 C        	RETL	@0b10001000	; X
    74 01C5F 1C08 C        	RETL	@0b00001000	; Y
    75 01C60 1C88 C        	RETL	@0b10001000	; Z
    76            C        	
    77 01C61 1C00 C                RETL	@0		; BLANK
    78            C                
    79 01C62 1CF8 C        	RETL	@0B11111000	; ■
    80            C        	
    81 01C63 1C10 C        	RETL	@0b00010000	; ?
    82 01C64 1C00 C        	RETL	@0b0		; !
    83 01C65 1C00 C        	RETL	@0b0		; :
    84 01C66 1C00 C        	RETL	@0B00000000	; .
    85            C        	
    86 01C67 1CF8 C        	RETL	@0B11111000	; START
    87 01C68 1CF8 C        	RETL	@0B11111000	; PAUSE
    88 01C69 1C88 C        	RETL	@0B10001000	; DEL
    89 01C6A 1C80 C        	RETL	@0B10000000	; /
    90 01C6B 1C08 C        	RETL	@0B00001000	; \
    91 01C6C 1C80 C        	RETL	@0B10000000	; _
    92            C        
    93            C        
    94 01C6D      C        third_line_tabb:
    95 01C6D 0020 C        	TBL
    96 01C6E 1CC8 C        	RETL	@0b11001000	; 0
    97 01C6F 1C90 C        	RETL	@0b10010000	; 1
    98 01C70 1CA8 C        	RETL	@0b10101000	; 2
    99 01C71 1CA8 C        	RETL	@0b10101000	; 3
   100 01C72 1C50 C        	RETL	@0b01010000	; 4
   101 01C73 1CA8 C        	RETL	@0b10101000	; 5
   102 01C74 1CA8 C        	RETL	@0b10101000	; 6
   103 01C75 1C08 C        	RETL	@0b00001000	; 7
   104 01C76 1CA8 C        	RETL	@0b10101000	; 8
   105 01C77 1CA8 C        	RETL	@0b10101000	; 9
   106            C        	
   107 01C78 1C28 C        	RETL	@0b00101000	; A
   108 01C79 1CA8 C        	RETL	@0b10101000	; B
   109 01C7A 1C88 C        	RETL	@0b10001000	; C
   110 01C7B 1C88 C        	RETL	@0b10001000	; D
   111 01C7C 1CA8 C        	RETL	@0b10101000	; E
   112 01C7D 1C28 C        	RETL	@0b00101000	; F
   113 01C7E 1C88 C        	RETL	@0b10001000	; G
   114 01C7F 1C20 C        	RETL	@0b00100000	; H
   115 01C80 1C88 C        	RETL	@0b10001000	; I
   116 01C81 1C80 C        	RETL	@0b10000000	; J
   117 01C82 1C20 C        	RETL	@0b00100000	; K
   118 01C83 1CF8 C        	RETL	@0xf8		; L
   119 01C84 1C10 C        	RETL	@0x10		; M
   120 01C85 1C10 C        	RETL	@0b00010000	; N
   121 01C86 1C88 C        	RETL	@0b10001000	; O
   122 01C87 1C28 C        	RETL	@0b00101000	; P
   123 01C88 1C88 C        	RETL	@0b10001000	; Q
   124 01C89 1C28 C        	RETL	@0b00101000	; R
   125 01C8A 1CA8 C        	RETL	@0b10101000	; S
   126 01C8B 1C08 C        	RETL	@0b00001000	; T
   127 01C8C 1C80 C        	RETL	@0b10000000	; U
   128 01C8D 1C40 C        	RETL	@0b01000000	; V
   129 01C8E 1C80 C        	RETL	@0b10000000	; W
   130 01C8F 1C50 C        	RETL	@0b01010000	; X
   131 01C90 1C10 C        	RETL	@0b00010000	; Y
   132 01C91 1CC8 C        	RETL	@0b11001000	; Z
   133            C        	
   134 01C92 1C00 C        	RETL	@0		; BLANK
   135            C        	
   136 01C93 1CF8 C        	RETL	@0B11111000	; ■
   137            C        	
   138 01C94 1C08 C        	RETL	@0b00001000	; ?
   139 01C95 1C00 C        	RETL	@0b0		; !
   140 01C96 1C00 C        	RETL	@0b0		; :
   141 01C97 1C00 C        	RETL	@0B00000000	; .
   142            C        	
   143 01C98 1CF8 C        	RETL	@0B11111000	; START
   144 01C99 1CF8 C        	RETL	@0B11111000	; PAUSE
   145 01C9A 1C88 C        	RETL	@0B10001000	; DEL
   146 01C9B 1C40 C        	RETL	@0B01000000	; /
   147 01C9C 1C10 C        	RETL	@0B00010000	; \
   148 01C9D 1C80 C        	RETL	@0B10000000	; _
   149            C        
   150            C        	
   151 01C9E      C        third_line_tabc:
   152 01C9E 0020 C        	TBL
   153 01C9F 1CA8 C        	RETL	@0b10101000	; 0
   154 01CA0 1CF8 C         	RETL	@0b11111000	; 1
   155 01CA1 1CA8 C         	RETL	@0b10101000	; 2
   156 01CA2 1CA8 C         	RETL	@0b10101000	; 3
   157 01CA3 1C48 C         	RETL	@0b01001000	; 4
   158 01CA4 1CA8 C         	RETL	@0b10101000	; 5
   159 01CA5 1CA8 C         	RETL	@0b10101000	; 6
   160 01CA6 1CC8 C         	RETL	@0b11001000	; 7
   161 01CA7 1CA8 C         	RETL	@0b10101000	; 8
   162 01CA8 1CA8 C         	RETL	@0b10101000	; 9
   163            C        	
   164 01CA9 1C28 C        	RETL	@0b00101000	; A
   165 01CAA 1CA8 C         	RETL	@0b10101000	; B
   166 01CAB 1C88 C         	RETL	@0b10001000	; C
   167 01CAC 1C88 C         	RETL	@0b10001000	; D
   168 01CAD 1CA8 C         	RETL	@0b10101000	; E
   169 01CAE 1C28 C         	RETL	@0b00101000	; F
   170 01CAF 1C88 C         	RETL	@0b10001000	; G
   171 01CB0 1C20 C         	RETL	@0b00100000	; H
   172 01CB1 1CF8 C         	RETL	@0b11111000	; I
   173 01CB2 1C88 C         	RETL	@0b10001000	; J
   174 01CB3 1C20 C         	RETL	@0b00100000	; K
   175 01CB4 1C80 C                RETL	@0b10000000	; L
   176 01CB5 1C60 C        	RETL	@0x60		; M
   177 01CB6 1C20 C        	RETL	@0b00100000	; N
   178 01CB7 1C88 C        	RETL	@0b10001000	; O
   179 01CB8 1C28 C        	RETL	@0b00101000	; P
   180 01CB9 1CA8 C        	RETL	@0b10101000	; Q
   181 01CBA 1C28 C        	RETL	@0b00101000	; R
   182 01CBB 1CA8 C        	RETL	@0b10101000	; S        
   183 01CBC 1CF8 C        	RETL	@0b11111000	; T
   184 01CBD 1C80 C        	RETL	@0b10000000	; U
   185 01CBE 1C80 C        	RETL	@0b10000000	; V
   186 01CBF 1C60 C        	RETL	@0b01100000	; W
   187 01CC0 1C20 C        	RETL	@0b00100000	; X
   188 01CC1 1CE0 C        	RETL	@0b11100000	; Y
   189 01CC2 1CA8 C        	RETL	@0b10101000	; Z
   190            C        	
   191 01CC3 1C00 C        	RETL	@0		; BLANK
   192            C        	
   193 01CC4 1CF8 C        	RETL	@0B11111000	; ■
   194            C        	
   195 01CC5 1CC8 C        	RETL	@0b11001000	; ?
   196 01CC6 1CB8 C        	RETL	@0b10111000	; !
   197 01CC7 1C50 C        	RETL	@0b01010000	; :
   198 01CC8 1C00 C        	RETL	@0B00000000	; .
   199            C        	
   200 01CC9 1C70 C        	RETL	@0B01110000	; START
   201 01CCA 1C00 C        	RETL	@0B00000000	; PAUSE
   202 01CCB 1C50 C        	RETL	@0B01010000	; DEL
   203 01CCC 1C20 C        	RETL	@0B00100000	; /
   204 01CCD 1C20 C        	RETL	@0B00100000	; \
   205 01CCE 1C80 C        	RETL	@0B10000000	; _
   206            C        
   207            C        
   208 01CCF      C        third_line_tabd:
   209 01CCF 0020 C        	TBL
   210 01CD0 1C98 C         	RETL	@0b10011000	; 0
   211 01CD1 1C80 C        	RETL	@0b10000000	; 1
   212 01CD2 1CA8 C        	RETL	@0b10101000	; 2
   213 01CD3 1CA8 C        	RETL	@0b10101000	; 3
   214 01CD4 1CF8 C        	RETL	@0b11111000	; 4
   215 01CD5 1CA8 C        	RETL	@0b10101000	; 5
   216 01CD6 1CA8 C        	RETL	@0b10101000	; 6
   217 01CD7 1C28 C        	RETL	@0b00101000	; 7
   218 01CD8 1CA8 C        	RETL	@0b10101000	; 8
   219 01CD9 1CA8 C        	RETL	@0b10101000	; 9
   220            C        	
   221 01CDA 1C28 C        	RETL	@0b00101000	; A
   222 01CDB 1CA8 C        	RETL	@0b10101000	; B
   223 01CDC 1C88 C        	RETL	@0b10001000	; C
   224 01CDD 1C88 C        	RETL	@0b10001000	; D
   225 01CDE 1CA8 C        	RETL	@0b10101000	; E
   226 01CDF 1C28 C        	RETL	@0b00101000	; F
   227 01CE0 1CA8 C        	RETL	@0b10101000	; G
   228 01CE1 1C20 C        	RETL	@0b00100000	; H
   229 01CE2 1C88 C        	RETL	@0b10001000	; I
   230 01CE3 1C78 C        	RETL	@0b01111000	; J
   231 01CE4 1C50 C        	RETL	@0b01010000	; K
   232 01CE5 1C80 C                RETL	@0b10000000	; L              
   233 01CE6 1C10 C         	RETL	@0b00010000	; M       
   234 01CE7 1C40 C         	RETL	@0b01000000	; N        
   235 01CE8 1C88 C         	RETL	@0b10001000	; O          
   236 01CE9 1C28 C         	RETL	@0b00101000	; P          
   237 01CEA 1C48 C         	RETL	@0b01001000	; Q          
   238 01CEB 1C68 C         	RETL	@0b01101000	; R          
   239 01CEC 1CA8 C         	RETL	@0b10101000	; S          
   240 01CED 1C08 C         	RETL	@0b00001000	; T          
   241 01CEE 1C80 C         	RETL	@0b10000000	; U          
   242 01CEF 1C40 C         	RETL	@0b01000000	; V          
   243 01CF0 1C80 C         	RETL	@0b10000000	; W          
   244 01CF1 1C50 C         	RETL	@0b01010000	; X          
   245 01CF2 1C10 C         	RETL	@0b00010000	; Y          
   246 01CF3 1C98 C         	RETL	@0b10011000	; Z
   247            C        	
   248 01CF4 1C00 C        	RETL	@0		; BLANK
   249            C        	
   250 01CF5 1CF8 C        	RETL	@0B11111000	; ■
   251            C         	
   252 01CF6 1C28 C        	RETL	@0b00101000	; ?
   253 01CF7 1C00 C        	RETL	@0b0		; !                             
   254 01CF8 1C00 C        	RETL	@0b0		; :
   255 01CF9 1C40 C        	RETL	@0B01000000	; .
   256            C        	
   257 01CFA 1C70 C        	RETL	@0B01110000	; START
   258 01CFB 1CF8 C        	RETL	@0B11111000	; PAUSE
   259 01CFC 1C20 C        	RETL	@0B00100000	; DEL
   260 01CFD 1C10 C        	RETL	@0B00010000	; /
   261 01CFE 1C40 C        	RETL	@0B01000000	; \
   262 01CFF 1C80 C        	RETL	@0B10000000	; _
   263            C        
   264            C        
   265            C        ORG	0X1D00
   266 01D00      C        third_line_tabe:
   267 01D00 0020 C        	TBL
   268 01D01 1C70 C        	RETL	@0b01110000	; 0
   269 01D02 1C00 C        	RETL	@0b00000000	; 1
   270 01D03 1C90 C        	RETL	@0b10010000	; 2
   271 01D04 1C50 C        	RETL	@0b01010000	; 3
   272 01D05 1C40 C        	RETL	@0b01000000	; 4
   273 01D06 1C40 C        	RETL	@0b01000000	; 5
   274 01D07 1C40 C        	RETL	@0b01000000	; 6
   275 01D08 1C18 C        	RETL	@0b00011000	; 7
   276 01D09 1C50 C        	RETL	@0b01010000	; 8
   277 01D0A 1C70 C        	RETL	@0b01110000	; 9
   278            C        
   279 01D0B 1CF0 C        	RETL	@0b11110000	; A
   280 01D0C 1C50 C        	RETL	@0b01010000	; B
   281 01D0D 1C88 C        	RETL	@0b10001000	; C
   282 01D0E 1C70 C        	RETL	@0b01110000	; D
   283 01D0F 1C88 C        	RETL	@0b10001000	; E
   284 01D10 1C08 C        	RETL	@0b00001000	; F
   285 01D11 1CE8 C        	RETL	@0b11101000	; G
   286 01D12 1CF8 C        	RETL	@0b11111000	; H
   287 01D13 1C00 C        	RETL	@0b00000000	; I
   288 01D14 1C08 C        	RETL	@0b00001000	; J
   289 01D15 1C88 C        	RETL	@0b10001000	; K
   290 01D16 1C80 C        	RETL	@0b10000000	; L
   291 01D17 1CF8 C        	RETL	@0xf8		; M
   292 01D18 1CF8 C        	RETL	@0b11111000	; N
   293 01D19 1C70 C        	RETL	@0b01110000	; O
   294 01D1A 1C10 C        	RETL	@0b00010000	; P
   295 01D1B 1CB0 C        	RETL	@0b10110000	; Q
   296 01D1C 1C90 C        	RETL	@0b10010000	; R
   297 01D1D 1C48 C        	RETL	@0b01001000	; S
   298 01D1E 1C08 C                RETL	@0b00001000	; T
   299 01D1F 1C78 C        	RETL	@0b01111000	; U
   300 01D20 1C38 C        	RETL	@0b00111000	; V
   301 01D21 1C78 C        	RETL	@0b01111000	; W
   302 01D22 1C88 C        	RETL	@0b10001000	; X
   303 01D23 1C08 C        	RETL	@0b00001000	; Y
   304 01D24 1C88 C        	RETL	@0b10001000	; Z
   305            C        	
   306 01D25 1C00 C        	RETL	@0		; BLANK
   307            C        
   308 01D26 1CF8 C        	RETL	@0B11111000	; ■
   309            C        
   310 01D27 1C10 C        	RETL	@0b00010000	; ?
   311 01D28 1C00 C        	RETL	@0b0		; !
   312 01D29 1C00 C        	RETL	@0b0		; :
   313 01D2A 1C00 C        	RETL	@0B00000000	; .
   314            C        	
   315 01D2B 1C20 C        	RETL	@0B00100000	; START
   316 01D2C 1CF8 C        	RETL	@0B11111000	; PAUSE
   317 01D2D 1CD8 C        	RETL	@0B11011000	; DEL
   318 01D2E 1C08 C        	RETL	@0B00001000	; /
   319 01D2F 1C80 C        	RETL	@0B10000000	; \
   320 01D30 1C80 C        	RETL	@0B10000000	; _
   321            C        
   322            C        
   323            C        
   324            C        
   325            C        ;ORG	0X1A44
   326 01D31      C        NUM_VERIFY:
   327 01D31 0011 C        	DISI
   328 01D32 0050 C        	MOV	INT_TEMP0,A
   329 01D33 1D12 C        	SUB	A,@0X12
   330            C      M 	JPC	NUM_VERIFY_RET
       01D34 0C03     1     JBC  _STATUS , C 
       01D35 1538     1     JMP  NUM_VERIFY_RET ,
   331            C      M 	MOV	INT_TEMP0,@NUM_BLANK
       01D36 1810     1     MOV A,@( NUM_BLANK )
       01D37 0050     1     MOV  INT_TEMP0 ,A
   332 01D38      C        NUM_VERIFY_RET:
   333 01D38 0410 C        	MOV	A,INT_TEMP0
   334 01D39 0010 C        	ENI
   335 01D3A 0012 C        	RET
   336            C        
   337 01D3B      C        STR_VERIFY:
   338 01D3B 0011 C        	DISI
   339 01D3C 0050 C        	MOV	INT_TEMP0,A
   340 01D3D 1D2F C        	SUB	A,@0X2F
   341            C      M 	JPC	STR_VERIFY_RET
       01D3E 0C03     1     JBC  _STATUS , C 
       01D3F 1542     1     JMP  STR_VERIFY_RET ,
   342            C      M 	MOV	INT_TEMP0,@CH_BLANK
       01D40 1824     1     MOV A,@( CH_BLANK )
       01D41 0050     1     MOV  INT_TEMP0 ,A
   343 01D42      C        STR_VERIFY_RET:
   344 01D42 0410 C        	MOV	A,INT_TEMP0
   345 01D43 0010 C        	ENI
   346 01D44 0012 C        	RET
   347            C        
   348            C        /***************************************
   349            C        显示第一行标志
   350            C        用一个寄存器标示8个标志
   351            C        .0		REPEAT
   352            C        .1		NEW
   353            C        .2		battery
   354            C        .3		MEMO
   355            C        .4		sencond
   356            C        .5		/
   357            C        .6		spk
   358            C        .7		CALL
   359            C        ***************************************/
   360 01D45      C        VIEW_STAMP:
   361            C        	;MOV	_RC,@LCD_CTRL
   362            C        	;CRAM	_RD,3
   363            C      M 	MOV	_RC,@(LCD_CTRL+1)
       01D45 1881     1     MOV A,@(( LCD_CTRL + 1 ))
       01D46 004C     1     MOV  _RC ,A
   364            C        	;NOP
   365            C      M 	MOV	TEMP0,_RD
       01D47 040D     1     MOV A, _RD 
       01D48 0056     1     MOV  TEMP0 ,A
   366            C        	
   367            C      M 	WR_STAMP	TEMP0,7,@(2+0X40),0,TEMP1
                      2  M  IOW  _IOCB ,@(( 2 + 64 ))
       01D49 1842     2     MOV A,@(( 2 + 64 ))
       01D4A 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 2 + 64 ))
       01D4B 1842     2     MOV A,@(( 2 + 64 ))
       01D4C 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D4D 040D     2     MOV A, _RD 
       01D4E 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 0 
       01D4F 0817     2     BC  TEMP1 , 0 
                      2  M  JPNB  TEMP0 , 7 ,( $ + 2 )
       01D50 0FD6     2     JBS  TEMP0 , 7 
       01D51 1553     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 0 
       01D52 0A17     2     BS  TEMP1 , 0 
                      2  M  IOW  _IOCC , TEMP1 
       01D53 0417     2     MOV A, TEMP1 
       01D54 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D55 0417     2     MOV A, TEMP1 
       01D56 004D     2     MOV  _RD ,A
   368            C      M 	WR_STAMP	TEMP0,6,@(6+0X40),1,TEMP1
                      2  M  IOW  _IOCB ,@(( 6 + 64 ))
       01D57 1846     2     MOV A,@(( 6 + 64 ))
       01D58 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 6 + 64 ))
       01D59 1846     2     MOV A,@(( 6 + 64 ))
       01D5A 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D5B 040D     2     MOV A, _RD 
       01D5C 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 1 
       01D5D 0857     2     BC  TEMP1 , 1 
                      2  M  JPNB  TEMP0 , 6 ,( $ + 2 )
       01D5E 0F96     2     JBS  TEMP0 , 6 
       01D5F 1561     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 1 
       01D60 0A57     2     BS  TEMP1 , 1 
                      2  M  IOW  _IOCC , TEMP1 
       01D61 0417     2     MOV A, TEMP1 
       01D62 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D63 0417     2     MOV A, TEMP1 
       01D64 004D     2     MOV  _RD ,A
   369            C      M 	WR_STAMP	TEMP0,5,@(11+0X40),0,TEMP1
                      2  M  IOW  _IOCB ,@(( 11 + 64 ))
       01D65 184B     2     MOV A,@(( 11 + 64 ))
       01D66 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 11 + 64 ))
       01D67 184B     2     MOV A,@(( 11 + 64 ))
       01D68 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D69 040D     2     MOV A, _RD 
       01D6A 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 0 
       01D6B 0817     2     BC  TEMP1 , 0 
                      2  M  JPNB  TEMP0 , 5 ,( $ + 2 )
       01D6C 0F56     2     JBS  TEMP0 , 5 
       01D6D 156F     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 0 
       01D6E 0A17     2     BS  TEMP1 , 0 
                      2  M  IOW  _IOCC , TEMP1 
       01D6F 0417     2     MOV A, TEMP1 
       01D70 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D71 0417     2     MOV A, TEMP1 
       01D72 004D     2     MOV  _RD ,A
   370            C      M 	WR_STAMP	TEMP0,4,@(28+0X40),0,TEMP1
                      2  M  IOW  _IOCB ,@(( 28 + 64 ))
       01D73 185C     2     MOV A,@(( 28 + 64 ))
       01D74 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 28 + 64 ))
       01D75 185C     2     MOV A,@(( 28 + 64 ))
       01D76 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D77 040D     2     MOV A, _RD 
       01D78 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 0 
       01D79 0817     2     BC  TEMP1 , 0 
                      2  M  JPNB  TEMP0 , 4 ,( $ + 2 )
       01D7A 0F16     2     JBS  TEMP0 , 4 
       01D7B 157D     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 0 
       01D7C 0A17     2     BS  TEMP1 , 0 
                      2  M  IOW  _IOCC , TEMP1 
       01D7D 0417     2     MOV A, TEMP1 
       01D7E 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D7F 0417     2     MOV A, TEMP1 
       01D80 004D     2     MOV  _RD ,A
   371            C      M 	WR_STAMP	TEMP0,3,@(35+0X40),2,TEMP1
                      2  M  IOW  _IOCB ,@(( 35 + 64 ))
       01D81 1863     2     MOV A,@(( 35 + 64 ))
       01D82 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 35 + 64 ))
       01D83 1863     2     MOV A,@(( 35 + 64 ))
       01D84 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D85 040D     2     MOV A, _RD 
       01D86 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 2 
       01D87 0897     2     BC  TEMP1 , 2 
                      2  M  JPNB  TEMP0 , 3 ,( $ + 2 )
       01D88 0ED6     2     JBS  TEMP0 , 3 
       01D89 158B     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 2 
       01D8A 0A97     2     BS  TEMP1 , 2 
                      2  M  IOW  _IOCC , TEMP1 
       01D8B 0417     2     MOV A, TEMP1 
       01D8C 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D8D 0417     2     MOV A, TEMP1 
       01D8E 004D     2     MOV  _RD ,A
   372            C      M 	WR_STAMP	TEMP0,2,@(35+0X40),1,TEMP1
                      2  M  IOW  _IOCB ,@(( 35 + 64 ))
       01D8F 1863     2     MOV A,@(( 35 + 64 ))
       01D90 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 35 + 64 ))
       01D91 1863     2     MOV A,@(( 35 + 64 ))
       01D92 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D93 040D     2     MOV A, _RD 
       01D94 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 1 
       01D95 0857     2     BC  TEMP1 , 1 
                      2  M  JPNB  TEMP0 , 2 ,( $ + 2 )
       01D96 0E96     2     JBS  TEMP0 , 2 
       01D97 1599     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 1 
       01D98 0A57     2     BS  TEMP1 , 1 
                      2  M  IOW  _IOCC , TEMP1 
       01D99 0417     2     MOV A, TEMP1 
       01D9A 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D9B 0417     2     MOV A, TEMP1 
       01D9C 004D     2     MOV  _RD ,A
   373            C      M 	WR_STAMP	TEMP0,1,@(36+0X40),1,TEMP1
                      2  M  IOW  _IOCB ,@(( 36 + 64 ))
       01D9D 1864     2     MOV A,@(( 36 + 64 ))
       01D9E 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 36 + 64 ))
       01D9F 1864     2     MOV A,@(( 36 + 64 ))
       01DA0 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01DA1 040D     2     MOV A, _RD 
       01DA2 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 1 
       01DA3 0857     2     BC  TEMP1 , 1 
                      2  M  JPNB  TEMP0 , 1 ,( $ + 2 )
       01DA4 0E56     2     JBS  TEMP0 , 1 
       01DA5 15A7     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 1 
       01DA6 0A57     2     BS  TEMP1 , 1 
                      2  M  IOW  _IOCC , TEMP1 
       01DA7 0417     2     MOV A, TEMP1 
       01DA8 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01DA9 0417     2     MOV A, TEMP1 
       01DAA 004D     2     MOV  _RD ,A
   374            C      M 	WR_STAMP	TEMP0,0,@(37+0X40),1,TEMP1
                      2  M  IOW  _IOCB ,@(( 37 + 64 ))
       01DAB 1865     2     MOV A,@(( 37 + 64 ))
       01DAC 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 37 + 64 ))
       01DAD 1865     2     MOV A,@(( 37 + 64 ))
       01DAE 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01DAF 040D     2     MOV A, _RD 
       01DB0 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 1 
       01DB1 0857     2     BC  TEMP1 , 1 
                      2  M  JPNB  TEMP0 , 0 ,( $ + 2 )
       01DB2 0E16     2     JBS  TEMP0 , 0 
       01DB3 15B5     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 1 
       01DB4 0A57     2     BS  TEMP1 , 1 
                      2  M  IOW  _IOCC , TEMP1 
       01DB5 0417     2     MOV A, TEMP1 
       01DB6 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01DB7 0417     2     MOV A, TEMP1 
       01DB8 004D     2     MOV  _RD ,A
   375 01DB9 0012 C        	RET
   376            C        	
   377            C        
   378            C        WR_STAMP	MACRO	STAMP_REG,STAMP_BIT,@LCD_ADDR,LCD_BIT,STAMP_TEMP
   379            C        	IOW	_IOCB,@LCD_ADDR
   380            C        	MOV	_RC,@LCD_ADDR
   381            C        	;NOP
   382            C        	MOV	STAMP_TEMP,_RD
   383            C        	;IOR	STAMP_TEMP,_IOCC
   384            C        	CRAM	STAMP_TEMP,LCD_BIT
   385            C        	JPNB	STAMP_REG,STAMP_BIT,$+2
   386            C        	SRAM	STAMP_TEMP,LCD_BIT
   387            C        	IOW	_IOCC,STAMP_TEMP
   388            C        	MOV	_RD,STAMP_TEMP
   389            C        	ENDM
   390            C        	
   391            C        /***************************************
   392            C        显示第一行的数字
   393            C        数字信息按顺序列在10个数字寄存器中
   394            C        ***************************************/
   395 01DBA      C        VIEW_NUM1:
   396            C        	;MOV	_RC,@LCD_CTRL
   397            C        	;CRAM	_RD,4
   398 01DBA 00D6 C        	CLR	TEMP0				; 显示的位数
   399 01DBB      C        VIEW_NUM1_LOOP:
   400 01DBB 00D7 C        	CLR	TEMP1				; 显示的地址
   401 01DBC 00D8 C        	CLR	TEMP2				; 显示的列
   402 01DBD 0416 C        	MOV	A,TEMP0
   403 01DBE 1D09 C        	SUB	A,@9
   404 01DBF 1F82 C        	ADD	A,@(LCD_CTRL+2)
   405 01DC0 004C C        	MOV	_RC,A
   406            C      M 	MOV	TEMP3,_RD			; 得到需要显示的字符
       01DC1 040D     1     MOV A, _RD 
       01DC2 0059     1     MOV  TEMP3 ,A
   407            C      M 	JPNB	TEMP3,7,VIEW_NUM1_NOTFLASH
       01DC3 0FD9     1     JBS  TEMP3 , 7 
       01DC4 15CB     1     JMP  VIEW_NUM1_NOTFLASH ,
   408            C      M 	MOV	_RC,@LCD_CTRL
       01DC5 1880     1     MOV A,@( LCD_CTRL )
       01DC6 004C     1     MOV  _RC ,A
   409            C      M 	JPNB	_RD,6,VIEW_NUM1_NOTFLASH
       01DC7 0F8D     1     JBS  _RD , 6 
       01DC8 15CB     1     JMP  VIEW_NUM1_NOTFLASH ,
   410            C      M 	MOV	TEMP3,@NUM_BLANK
       01DC9 1810     1     MOV A,@( NUM_BLANK )
       01DCA 0059     1     MOV  TEMP3 ,A
   411 01DCB      C        VIEW_NUM1_NOTFLASH:
   412            C      M 	ANDA	TEMP3,@0X7F
       01DCB 187F     1     MOV A,@( 127 )
       01DCC 0299     1     AND A, TEMP3 
   413 01DCD 1131 C        	CALL	NUM_VERIFY
   414            C      M 	CALL	#second_line_tab
       01DCE 1028     1     CALL ( SECOND_LINE_TAB % 1024 ),
   415 01DCF 0059 C        	MOV	TEMP3,A				; 查表得到字符对应的段码
   416            C      M 	ADD	TEMP1,@0X40			; 字符在COM8~COM15，需要+40H的偏移地址
       01DD0 1840     1     MOV A,@( 64 )
       01DD1 03D7     1     ADD  TEMP1 ,A
   417 01DD2 0416 C        	MOV	A,TEMP0
   418 01DD3 12EF C        	CALL	VIEW_NUM1_ROW
   419 01DD4 03D7 C        	ADD	TEMP1,A
   420 01DD5      C        VIEW_NUM1_LOOP_1:
   421            C      M 	MOV	TEMP4,TEMP3
       01DD5 0419     1     MOV A, TEMP3 
       01DD6 005A     1     MOV  TEMP4 ,A
   422            C      M 	ADDA	TEMP1,TEMP2			; 再+列 得到实际地址
       01DD7 0418     1     MOV A, TEMP2 
       01DD8 0397     1     ADD A, TEMP1 
   423 01DD9 000B C        	IOW	_IOCB
   424 01DDA 004C C        	MOV	_RC,A
   425            C        	
   426 01DDB 0418 C        	MOV	A,TEMP2
   427            C      M 	JPZ	VIEW_NUM1_LOOP1
       01DDC 0C83     1     JBC  _STATUS , Z 
       01DDD 15E6     1     JMP  VIEW_NUM1_LOOP1 ,
   428            C      M 	SUBA	TEMP2,@1
       01DDE 1801     1     MOV A,@( 1 )
       01DDF 0118     1     SUB A, TEMP2 
   429            C      M 	JPZ	VIEW_NUM1_LOOP2
       01DE0 0C83     1     JBC  _STATUS , Z 
       01DE1 15F0     1     JMP  VIEW_NUM1_LOOP2 ,
   430            C      M 	SUBA	TEMP2,@2
       01DE2 1802     1     MOV A,@( 2 )
       01DE3 0118     1     SUB A, TEMP2 
   431            C      M 	JPZ	VIEW_NUM1_LOOP3
       01DE4 0C83     1     JBC  _STATUS , Z 
       01DE5 15F8     1     JMP  VIEW_NUM1_LOOP3 ,
   432            C        	;JMP	SHOW_ERR
   433 01DE6      C        VIEW_NUM1_LOOP1:
   434 01DE6 065A C        	RRC	TEMP4
   435 01DE7 065A C        	RRC	TEMP4
   436 01DE8 065A C        	RRC	TEMP4
   437 01DE9 065A C        	RRC	TEMP4
   438            C      M 	AND	TEMP4,@6
       01DEA 1806     1     MOV A,@( 6 )
       01DEB 02DA     1     AND  TEMP4 ,A
   439 01DEC 040D C        	MOV	A,_RD
   440 01DED 1AF9 C        	AND	A,@0XF9
   441 01DEE 021A C        	OR	A,TEMP4
   442 01DEF 15FF C        	JMP	VIEW_NUM1_LOOP_2
   443 01DF0      C        VIEW_NUM1_LOOP2:
   444 01DF0 065A C        	RRC	TEMP4
   445 01DF1 065A C        	RRC	TEMP4
   446            C      M 	AND	TEMP4,@7
       01DF2 1807     1     MOV A,@( 7 )
       01DF3 02DA     1     AND  TEMP4 ,A
   447 01DF4 040D C        	MOV	A,_RD
   448 01DF5 1AF8 C        	AND	A,@0XF8
   449 01DF6 021A C        	OR	A,TEMP4
   450 01DF7 15FF C        	JMP	VIEW_NUM1_LOOP_2
   451 01DF8      C        VIEW_NUM1_LOOP3:
   452 01DF8 06DA C        	RLC	TEMP4
   453            C      M 	AND	TEMP4,@6
       01DF9 1806     1     MOV A,@( 6 )
       01DFA 02DA     1     AND  TEMP4 ,A
   454 01DFB 040D C        	MOV	A,_RD
   455 01DFC 1AF9 C        	AND	A,@0XF9
   456 01DFD 021A C        	OR	A,TEMP4
   457 01DFE 15FF C        	JMP	VIEW_NUM1_LOOP_2
   458            C        	
   459 01DFF      C        VIEW_NUM1_LOOP_2:
   460 01DFF 004D C        	MOV	_RD,A
   461 01E00 000C C        	IOW	_IOCC
   462            C      M 	SUBA	TEMP0,@3
       01E01 1803     1     MOV A,@( 3 )
       01E02 0116     1     SUB A, TEMP0 
   463            C      M 	JPNZ	VIEW_NUM1_LOOP_21
       01E03 0E83     1     JBS  _STATUS , Z 
       01E04 1608     1     JMP  VIEW_NUM1_LOOP_21 ,
   464 01E05 0418 C        	MOV	A,TEMP2
   465            C      M 	JPZ	VIEW_NUM1_LOOP_22
       01E06 0C83     1     JBC  _STATUS , Z 
       01E07 160D     1     JMP  VIEW_NUM1_LOOP_22 ,
   466 01E08      C        VIEW_NUM1_LOOP_21:
   467 01E08 0558 C        	INC	TEMP2
   468            C      M 	SUBA	TEMP2,@3
       01E09 1803     1     MOV A,@( 3 )
       01E0A 0118     1     SUB A, TEMP2 
   469            C      M 	JPNZ	VIEW_NUM1_LOOP_1
       01E0B 0E83     1     JBS  _STATUS , Z 
       01E0C 15D5     1     JMP  VIEW_NUM1_LOOP_1 ,
   470 01E0D      C        VIEW_NUM1_LOOP_22:
   471 01E0D 0556 C        	INC	TEMP0
   472            C      M 	SUBA	TEMP0,@10
       01E0E 180A     1     MOV A,@( 10 )
       01E0F 0116     1     SUB A, TEMP0 
   473            C      M 	JPNZ	VIEW_NUM1_LOOP
       01E10 0E83     1     JBS  _STATUS , Z 
       01E11 15BB     1     JMP  VIEW_NUM1_LOOP ,
   474            C        	
   475 01E12 0012 C        	RET
   476            C        
   477            C        
   478            C        /***************************************
   479            C        显示第二行的数字
   480            C        数字信息按顺序列在16个数字寄存器中
   481            C        ***************************************/
   482 01E13      C        VIEW_NUM2:
   483            C        	;MOV	_RC,@LCD_CTRL
   484            C        	;CRAM	_RD,5
   485 01E13 00D6 C        	CLR	TEMP0				; 显示的位数
   486 01E14      C        VIEW_NUM2_LOOP:
   487 01E14 00D7 C        	CLR	TEMP1				; 显示地址
   488 01E15 00D8 C        	CLR	TEMP2				; 显示的列
   489 01E16 0416 C        	MOV	A,TEMP0
   490 01E17 1D0F C        	SUB	A,@15
   491 01E18 1F8C C        	ADD	A,@(LCD_CTRL+12)
   492 01E19 004C C        	MOV	_RC,A
   493            C      M 	MOV	TEMP3,_RD			; 得到需要显示的字符
       01E1A 040D     1     MOV A, _RD 
       01E1B 0059     1     MOV  TEMP3 ,A
   494            C      M 	JPNB	TEMP3,7,VIEW_NUM2_NOTFLASH
       01E1C 0FD9     1     JBS  TEMP3 , 7 
       01E1D 1624     1     JMP  VIEW_NUM2_NOTFLASH ,
   495            C      M 	MOV	_RC,@LCD_CTRL
       01E1E 1880     1     MOV A,@( LCD_CTRL )
       01E1F 004C     1     MOV  _RC ,A
   496            C      M 	JPNB	_RD,6,VIEW_NUM2_NOTFLASH
       01E20 0F8D     1     JBS  _RD , 6 
       01E21 1624     1     JMP  VIEW_NUM2_NOTFLASH ,
   497            C      M 	MOV	TEMP3,@NUM_BLANK
       01E22 1810     1     MOV A,@( NUM_BLANK )
       01E23 0059     1     MOV  TEMP3 ,A
   498 01E24      C        VIEW_NUM2_NOTFLASH:
   499            C      M 	ANDA	TEMP3,@0X7F			; 得到需要显示的数字
       01E24 187F     1     MOV A,@( 127 )
       01E25 0299     1     AND A, TEMP3 
   500 01E26 1131 C        	CALL	NUM_VERIFY
   501            C      M 	CALL	#second_line_tab
       01E27 1028     1     CALL ( SECOND_LINE_TAB % 1024 ),
   502 01E28 0059 C        	MOV	TEMP3,A				; 查表得到字符对应的段码
   503            C        	
   504            C      M 	CLRC
       01E29 0803     1     BC  _STATUS , C 
   505 01E2A 0616 C        	RRCA	TEMP0
   506 01E2B 005A C        	MOV	TEMP4,A
   507 01E2C 039A C        	ADD	A,TEMP4
   508 01E2D 039A C        	ADD	A,TEMP4
   509 01E2E 039A C        	ADD	A,TEMP4
   510 01E2F 039A C        	ADD	A,TEMP4				; (TEMP0>>1)*5
   511 01E30 03D7 C        	ADD	TEMP1,A
   512 01E31      C        VIEW_NUM2_LOOP_1:
   513            C      M 	MOV	TEMP4,TEMP3
       01E31 0419     1     MOV A, TEMP3 
       01E32 005A     1     MOV  TEMP4 ,A
   514            C      M 	JPB	TEMP0,0,VIEW_NUM2_LOOP_ODD
       01E33 0C16     1     JBC  TEMP0 , 0 
       01E34 165D     1     JMP  VIEW_NUM2_LOOP_ODD ,
   515 01E35      C        VIEW_NUM2_LOOP_EVEN:				; 显示偶数位的数字
   516            C        ; 偶数位排列同第一行的数字：232型排列: 0cbdgaef	cb0 dga ef0
   517            C      M 	ADDA	TEMP1,TEMP2
       01E35 0418     1     MOV A, TEMP2 
       01E36 0397     1     ADD A, TEMP1 
   518 01E37 000B C        	IOW	_IOCB
   519 01E38 004C C        	MOV	_RC,A
   520            C        	
   521 01E39 0418 C        	MOV	A,TEMP2
   522            C      M 	JPZ	VIEW_NUM2_LOOP_EVEN_1
       01E3A 0C83     1     JBC  _STATUS , Z 
       01E3B 1644     1     JMP  VIEW_NUM2_LOOP_EVEN_1 ,
   523            C      M 	SUBA	TEMP2,@1
       01E3C 1801     1     MOV A,@( 1 )
       01E3D 0118     1     SUB A, TEMP2 
   524            C      M 	JPZ	VIEW_NUM2_LOOP_EVEN_2
       01E3E 0C83     1     JBC  _STATUS , Z 
       01E3F 164E     1     JMP  VIEW_NUM2_LOOP_EVEN_2 ,
   525            C      M 	SUBA	TEMP2,@2
       01E40 1802     1     MOV A,@( 2 )
       01E41 0118     1     SUB A, TEMP2 
   526            C      M 	JPZ	VIEW_NUM2_LOOP_EVEN_3
       01E42 0C83     1     JBC  _STATUS , Z 
       01E43 1656     1     JMP  VIEW_NUM2_LOOP_EVEN_3 ,
   527            C        	;JMP	VIEW_ERR
   528 01E44      C        VIEW_NUM2_LOOP_EVEN_1:
   529 01E44 065A C        	RRC	TEMP4
   530 01E45 065A C        	RRC	TEMP4
   531 01E46 065A C        	RRC	TEMP4
   532 01E47 065A C        	RRC	TEMP4
   533            C      M 	AND	TEMP4,@6
       01E48 1806     1     MOV A,@( 6 )
       01E49 02DA     1     AND  TEMP4 ,A
   534 01E4A 040D C        	MOV	A,_RD
   535 01E4B 1AF9 C        	AND	A,@0XF9
   536 01E4C 021A C        	OR	A,TEMP4
   537 01E4D 1690 C        	JMP	VIEW_NUM2_LOOP_2
   538 01E4E      C        VIEW_NUM2_LOOP_EVEN_2:
   539 01E4E 065A C        	RRC	TEMP4
   540 01E4F 065A C        	RRC	TEMP4
   541            C      M 	AND	TEMP4,@7
       01E50 1807     1     MOV A,@( 7 )
       01E51 02DA     1     AND  TEMP4 ,A
   542 01E52 040D C        	MOV	A,_RD
   543 01E53 1AF8 C        	AND	A,@0XF8
   544 01E54 021A C        	OR	A,TEMP4
   545 01E55 1690 C        	JMP	VIEW_NUM2_LOOP_2
   546 01E56      C        VIEW_NUM2_LOOP_EVEN_3:
   547 01E56 06DA C        	RLC	TEMP4
   548            C      M 	AND	TEMP4,@6
       01E57 1806     1     MOV A,@( 6 )
       01E58 02DA     1     AND  TEMP4 ,A
   549 01E59 040D C        	MOV	A,_RD
   550 01E5A 1AF9 C        	AND	A,@0XF9
   551 01E5B 021A C        	OR	A,TEMP4
   552 01E5C 1690 C        	JMP	VIEW_NUM2_LOOP_2
   553            C        
   554 01E5D      C        VIEW_NUM2_LOOP_ODD:
   555            C        ; 奇数位排列规则为：133型排列: 0cbdgaef 00b cga def
   556            C      M 	ADDA	TEMP1,TEMP2
       01E5D 0418     1     MOV A, TEMP2 
       01E5E 0397     1     ADD A, TEMP1 
   557 01E5F 1F02 C        	ADD	A,@2				; +2
   558 01E60 000B C        	IOW	_IOCB
   559 01E61 004C C        	MOV	_RC,A
   560            C        	
   561 01E62 0418 C        	MOV	A,TEMP2
   562            C      M 	JPZ	VIEW_NUM2_LOOP_ODD_1
       01E63 0C83     1     JBC  _STATUS , Z 
       01E64 166D     1     JMP  VIEW_NUM2_LOOP_ODD_1 ,
   563            C      M 	SUBA	TEMP2,@1
       01E65 1801     1     MOV A,@( 1 )
       01E66 0118     1     SUB A, TEMP2 
   564            C      M 	JPZ	VIEW_NUM2_LOOP_ODD_2
       01E67 0C83     1     JBC  _STATUS , Z 
       01E68 1678     1     JMP  VIEW_NUM2_LOOP_ODD_2 ,
   565            C      M 	SUBA	TEMP2,@2
       01E69 1802     1     MOV A,@( 2 )
       01E6A 0118     1     SUB A, TEMP2 
   566            C      M 	JPZ	VIEW_NUM2_LOOP_ODD_3
       01E6B 0C83     1     JBC  _STATUS , Z 
       01E6C 1685     1     JMP  VIEW_NUM2_LOOP_ODD_3 ,
   567            C        	;JMP	VIEW_ERR
   568 01E6D      C        VIEW_NUM2_LOOP_ODD_1:
   569 01E6D 065A C        	RRC	TEMP4
   570 01E6E 065A C        	RRC	TEMP4
   571 01E6F 065A C        	RRC	TEMP4
   572 01E70 065A C        	RRC	TEMP4
   573 01E71 065A C        	RRC	TEMP4
   574            C      M 	AND	TEMP4,@1
       01E72 1801     1     MOV A,@( 1 )
       01E73 02DA     1     AND  TEMP4 ,A
   575 01E74 040D C        	MOV	A,_RD
   576 01E75 1AFE C        	AND	A,@0XFE
   577 01E76 021A C        	OR	A,TEMP4
   578 01E77 1690 C        	JMP	VIEW_NUM2_LOOP_2
   579 01E78      C        VIEW_NUM2_LOOP_ODD_2:
   580            C      M 	AND	_RD,@0XF8
       01E78 18F8     1     MOV A,@( 248 )
       01E79 02CD     1     AND  _RD ,A
   581 01E7A 065A C        	RRC	TEMP4
   582 01E7B 065A C        	RRC	TEMP4
   583 01E7C 041A C        	MOV	A,TEMP4
   584 01E7D 1A03 C        	AND	A,@3
   585 01E7E 024D C        	OR	_RD,A
   586 01E7F 065A C        	RRC	TEMP4
   587 01E80 065A C        	RRC	TEMP4
   588 01E81 041A C        	MOV	A,TEMP4
   589 01E82 1A04 C        	AND	A,@4
   590 01E83 020D C        	OR	A,_RD
   591 01E84 1690 C        	JMP	VIEW_NUM2_LOOP_2
   592 01E85      C        VIEW_NUM2_LOOP_ODD_3:
   593            C      M 	AND	_RD,@0XF8
       01E85 18F8     1     MOV A,@( 248 )
       01E86 02CD     1     AND  _RD ,A
   594 01E87 041A C        	MOV	A,TEMP4
   595 01E88 1A03 C        	AND	A,@3
   596 01E89 024D C        	OR	_RD,A
   597 01E8A 065A C        	RRC	TEMP4
   598 01E8B 065A C        	RRC	TEMP4
   599 01E8C 041A C        	MOV	A,TEMP4
   600 01E8D 1A04 C        	AND	A,@4
   601 01E8E 020D C        	OR	A,_RD
   602 01E8F 1690 C        	JMP	VIEW_NUM2_LOOP_2
   603            C        	
   604 01E90      C        VIEW_NUM2_LOOP_2:
   605 01E90 004D C        	MOV	_RD,A
   606 01E91 000C C        	IOW	_IOCC
   607 01E92 0558 C        	INC	TEMP2
   608            C      M 	SUBA	TEMP2,@3
       01E93 1803     1     MOV A,@( 3 )
       01E94 0118     1     SUB A, TEMP2 
   609            C      M 	JPNZ	VIEW_NUM2_LOOP_1
       01E95 0E83     1     JBS  _STATUS , Z 
       01E96 1631     1     JMP  VIEW_NUM2_LOOP_1 ,
   610 01E97 0556 C        	INC	TEMP0
   611            C      M 	SUBA	TEMP0,@16
       01E98 1810     1     MOV A,@( 16 )
       01E99 0116     1     SUB A, TEMP0 
   612            C      M 	JPNZ	VIEW_NUM2_LOOP
       01E9A 0E83     1     JBS  _STATUS , Z 
       01E9B 1614     1     JMP  VIEW_NUM2_LOOP ,
   613            C        	
   614 01E9C 0012 C        	RET
   615            C        	
   616            C        
   617            C        /***************************************
   618            C        显示第三行的字符串
   619            C        字符串信息按顺序列在16个字符寄存器中
   620            C        ***************************************/
   621 01E9D      C        VIEW_STR:
   622            C        	;MOV	_RC,@LCD_CTRL
   623            C        	;CRAM	_RD,6
   624 01E9D 00D6 C        	CLR	TEMP0				; 显示的位数
   625 01E9E      C        VIEW_STR_LOOP:
   626 01E9E 00D7 C        	CLR	TEMP1				; 显示地址
   627 01E9F 00D8 C        	CLR	TEMP2				; 显示的列
   628 01EA0 0416 C        	MOV	A,TEMP0
   629 01EA1 1D0F C        	SUB	A,@15
   630 01EA2 1F9C C        	ADD	A,@(LCD_CTRL+28)
   631 01EA3 004C C        	MOV	_RC,A
   632            C      M 	MOV	TEMP3,_RD			; 得到需要显示的字符
       01EA4 040D     1     MOV A, _RD 
       01EA5 0059     1     MOV  TEMP3 ,A
   633            C      M 	JPNB	TEMP3,7,VIEW_STR_NOTFLASH
       01EA6 0FD9     1     JBS  TEMP3 , 7 
       01EA7 16AE     1     JMP  VIEW_STR_NOTFLASH ,
   634            C      M 	MOV	_RC,@LCD_CTRL
       01EA8 1880     1     MOV A,@( LCD_CTRL )
       01EA9 004C     1     MOV  _RC ,A
   635            C      M 	JPNB	_RD,6,VIEW_STR_NOTFLASH
       01EAA 0F8D     1     JBS  _RD , 6 
       01EAB 16AE     1     JMP  VIEW_STR_NOTFLASH ,
   636            C      M 	MOV	TEMP3,@CH_BLANK
       01EAC 1824     1     MOV A,@( CH_BLANK )
       01EAD 0059     1     MOV  TEMP3 ,A
   637 01EAE      C        VIEW_STR_NOTFLASH:
   638            C      M 	AND	TEMP3,@0X7F
       01EAE 187F     1     MOV A,@( 127 )
       01EAF 02D9     1     AND  TEMP3 ,A
   639            C        	;MOV	TEMP3,_RD			; 得到需要显示的字符
   640            C      M 	JPB	TEMP0,0,VIEW_STR_LOOP_ODD
       01EB0 0C16     1     JBC  TEMP0 , 0 
       01EB1 16B4     1     JMP  VIEW_STR_LOOP_ODD ,
   641 01EB2      C        VIEW_STR_LOOP_EVEN:				; 0 2 4 6
   642            C      M 	ADD	TEMP1,@0X40			; +偏移
       01EB2 1840     1     MOV A,@( 64 )
       01EB3 03D7     1     ADD  TEMP1 ,A
   643 01EB4      C        VIEW_STR_LOOP_ODD:				; 1 3 5 7
   644            C      M 	CLRC
       01EB4 0803     1     BC  _STATUS , C 
   645 01EB5 0616 C        	RRCA	TEMP0
   646 01EB6 005A C        	MOV	TEMP4,A
   647 01EB7 039A C        	ADD	A,TEMP4
   648 01EB8 039A C        	ADD	A,TEMP4
   649 01EB9 039A C        	ADD	A,TEMP4
   650 01EBA 039A C        	ADD	A,TEMP4				; (TEMP0>>1)*5 得到需要显示的偏移地址
   651 01EBB 03D7 C        	ADD	TEMP1,A
   652 01EBC      C        VIEW_STR_LOOP_2:
   653 01EBC 0418 C        	MOV	A,TEMP2
   654            C      M 	JPB	TEMP0,0,VIEW_STR_LOOP_2_ODD
       01EBD 0C16     1     JBC  TEMP0 , 0 
       01EBE 16C0     1     JMP  VIEW_STR_LOOP_2_ODD ,
   655 01EBF      C        VIEW_STR_LOOP_2_EVEN:
   656 01EBF 1D04 C        	SUB	A,@4				; 偶数字符需要倒向
   657 01EC0      C        VIEW_STR_LOOP_2_ODD:
   658 01EC0 0397 C        	ADD	A,TEMP1				; 偏移+列 得到实际地址
   659            C        	;MOV	TEMP4,A
   660            C        	;IOW	_IOCB,TEMP4
   661            C        	;MOV	_RC,TEMP4
   662 01EC1 000B C        	IOW	_IOCB
   663 01EC2 004C C        	MOV	_RC,A
   664            C      M 	VIEW_STR_TAB	TEMP3,TEMP2		; 根据字符和列得到在该列该字符的显示值。
       01EC3 0418     1     MOV A, TEMP2 
       01EC4 0020     1     TBL 
       01EC5 16CA     1     JMP  VIEW_STR_1 ,
       01EC6 16CE     1     JMP  VIEW_STR_2 ,
       01EC7 16D2     1     JMP  VIEW_STR_3 ,
       01EC8 16D6     1     JMP  VIEW_STR_4 ,
       01EC9 16DA     1     JMP  VIEW_STR_5 ,
       01ECA          1    VIEW_STR_1:   
       01ECA 0419     1     MOV A, TEMP3 
       01ECB 113B     1     CALL  STR_VERIFY ,
                      2  M  CALL #( THIRD_LINE_TABA ),
       01ECC 103C     2     CALL ( THIRD_LINE_TABA % 1024 ),
       01ECD 16DE     1     JMP  VIEW_STR_TAB_RET ,
       01ECE          1    VIEW_STR_2:   
       01ECE 0419     1     MOV A, TEMP3 
       01ECF 113B     1     CALL  STR_VERIFY ,
                      2  M  CALL #( THIRD_LINE_TABB ),
       01ED0 106D     2     CALL ( THIRD_LINE_TABB % 1024 ),
       01ED1 16DE     1     JMP  VIEW_STR_TAB_RET ,
       01ED2          1    VIEW_STR_3:   
       01ED2 0419     1     MOV A, TEMP3 
       01ED3 113B     1     CALL  STR_VERIFY ,
                      2  M  CALL #( THIRD_LINE_TABC ),
       01ED4 109E     2     CALL ( THIRD_LINE_TABC % 1024 ),
       01ED5 16DE     1     JMP  VIEW_STR_TAB_RET ,
       01ED6          1    VIEW_STR_4:   
       01ED6 0419     1     MOV A, TEMP3 
       01ED7 113B     1     CALL  STR_VERIFY ,
                      2  M  CALL #( THIRD_LINE_TABD ),
       01ED8 10CF     2     CALL ( THIRD_LINE_TABD % 1024 ),
       01ED9 16DE     1     JMP  VIEW_STR_TAB_RET ,
       01EDA          1    VIEW_STR_5:   
       01EDA 0419     1     MOV A, TEMP3 
       01EDB 113B     1     CALL  STR_VERIFY ,
                      2  M  CALL #( THIRD_LINE_TABE ),
       01EDC 1100     2     CALL ( THIRD_LINE_TABE % 1024 ),
       01EDD 16DE     1     JMP  VIEW_STR_TAB_RET ,
       01EDE          1    VIEW_STR_TAB_RET:   
   665 01EDE 005A C        	MOV	TEMP4,A
   666            C        	;IOW	_IOCB,TEMP1
   667            C        	;NOP
   668 01EDF 040D C        	MOV	A,_RD
   669            C        	;IOR	_IOCC
   670 01EE0 1A07 C        	AND	A,@7
   671 01EE1 021A C        	OR	A,TEMP4
   672 01EE2 000C C        	IOW	_IOCC
   673 01EE3 004D C        	MOV	_RD,A
   674 01EE4 0558 C        	INC	TEMP2
   675            C      M 	SUBA	TEMP2,@5
       01EE5 1805     1     MOV A,@( 5 )
       01EE6 0118     1     SUB A, TEMP2 
   676            C      M 	JPNZ	VIEW_STR_LOOP_2
       01EE7 0E83     1     JBS  _STATUS , Z 
       01EE8 16BC     1     JMP  VIEW_STR_LOOP_2 ,
   677 01EE9 0556 C        	INC	TEMP0
   678            C      M 	SUBA	TEMP0,@16
       01EEA 1810     1     MOV A,@( 16 )
       01EEB 0116     1     SUB A, TEMP0 
   679            C      M 	JPNZ	VIEW_STR_LOOP
       01EEC 0E83     1     JBS  _STATUS , Z 
       01EED 169E     1     JMP  VIEW_STR_LOOP ,
   680            C        	
   681 01EEE 0012 C        	RET
   682            C        	
   683            C        VIEW_STR_TAB	MACRO	STR,STR_ROW
   684            C        	MOV	A,STR_ROW
   685            C        	TBL
   686            C        	JMP	VIEW_STR_1
   687            C        	JMP	VIEW_STR_2
   688            C        	JMP	VIEW_STR_3
   689            C        	JMP	VIEW_STR_4
   690            C        	JMP	VIEW_STR_5
   691            C        VIEW_STR_1:
   692            C        	MOV	A,STR
   693            C        	CALL	STR_VERIFY
   694            C        	CALL	#THIRD_LINE_TABA
   695            C        	JMP	VIEW_STR_TAB_RET
   696            C        VIEW_STR_2:
   697            C        	MOV	A,STR
   698            C        	CALL	STR_VERIFY
   699            C        	CALL	#THIRD_LINE_TABB
   700            C        	JMP	VIEW_STR_TAB_RET
   701            C        VIEW_STR_3:
   702            C        	MOV	A,STR
   703            C        	CALL	STR_VERIFY
   704            C        	CALL	#THIRD_LINE_TABC
   705            C        	JMP	VIEW_STR_TAB_RET
   706            C        VIEW_STR_4:
   707            C        	MOV	A,STR
   708            C        	CALL	STR_VERIFY
   709            C        	CALL	#THIRD_LINE_TABD
   710            C        	JMP	VIEW_STR_TAB_RET
   711            C        VIEW_STR_5:
   712            C        	MOV	A,STR
   713            C        	CALL	STR_VERIFY
   714            C        	CALL	#THIRD_LINE_TABE
   715            C        	JMP	VIEW_STR_TAB_RET
   716            C        VIEW_STR_TAB_RET:
   717            C        	ENDM
   718            C        
   719            C        
   720 01EEF      C        VIEW_NUM1_ROW:
   721 01EEF 0020 C        	TBL
   722 01EF0 1C00 C        	RETL	0
   723 01EF1 1C03 C        	RETL	3
   724 01EF2 1C07 C        	RETL	7
   725 01EF3 1C0A C        	RETL	10
   726 01EF4 1C0B C        	RETL	11
   727 01EF5 1C0E C        	RETL	14
   728 01EF6 1C17 C        	RETL	23
   729 01EF7 1C1A C        	RETL	26
   730 01EF8 1C1D C        	RETL	29
   731 01EF9 1C20 C        	RETL	32
   732            C        
   733            C        
   734            C        /***************************************
   735            C        外部可调用VIEW_LCD
   736            C        LCD显示
   737            C        LCD_CTRL	LCD显示控制器
   738            C        .0~.1		显示区块计数
   739            C        .2		闪烁
   740            C        .3		显示第一行标志控制		0/1 不需要显示/需要显示
   741            C        .4		显示第一行字符控制		0/1 不需要显示/需要显示
   742            C        .5		显示第二行字符控制		0/1 不需要显示/需要显示
   743            C        .6		显示第三行字符控制		0/1 不需要显示/需要显示
   744            C        .7		全局显示控制			0/1 全体不需要显示/全体需要显示
   745            C        全部使用CID RAM的BANK0
   746            C        0~127为LCD RAM的映射
   747            C        128为LCD显示控制器
   748            C        其后寄存器说明：
   749            C        128+1		第一行印花寄存器
   750            C        128+2~11	第一行数字寄存器
   751            C        128+12~27	第二行数字寄存器
   752            C        128+28~43	第三行字符寄存器
   753            C        ***************************************/
   754            C        ;ORG	0X1E80
   755 01EFA      C        LCD_VIEW:
   756            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       01EFA 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01EFB 088B     2     BC  _RB , 2 
   757            C      M 	BANK	0
       01EFC 0984     1     BC  _RSR , 6 
       01EFD 09C4     1     BC  _RSR , 7 
   758            C      M 	MOV	_RC,@LCD_CTRL
       01EFE 1880     1     MOV A,@( LCD_CTRL )
       01EFF 004C     1     MOV  _RC ,A
   759            C        	;NOP
   760            C        	;MOV	TEMP0,_RD
   761 01F00 0436 C        	MOV	A,TMR_FLASH
   762            C      M 	JPNZ	$+8
       01F01 0E83     1     JBS  _STATUS , Z 
       01F02 170A     1     JMP ( $ + 8 ),
   763            C      M 	BINVRAM	_RD,6
                      2  M  JPB  _RD , 6 ,( $ + 3 )
       01F03 0D8D     2     JBC  _RD , 6 
       01F04 1707     2     JMP ( $ + 3 ),
                      2  M  SRAM  _RD , 6 
       01F05 0B8D     2     BS  _RD , 6 
       01F06 1708     1     JMP ( $ + 2 ),
                      2  M  CRAM  _RD , 6 
       01F07 098D     2     BC  _RD , 6 
   764            C      M 	MOV	TMR_FLASH,@50
       01F08 1832     1     MOV A,@( 50 )
       01F09 0076     1     MOV  TMR_FLASH ,A
   765            C        	
   766            C      M 	JPNB	_RD,7,LCD_VIEW_RET
       01F0A 0FCD     1     JBS  _RD , 7 
       01F0B 1729     1     JMP  LCD_VIEW_RET ,
   767 01F0C 040D C        	MOV	A,_RD
   768 01F0D 1F01 C        	ADD	A,@1
   769 01F0E 1A03 C        	AND	A,@3
   770 01F0F 0057 C        	MOV	TEMP1,A
   771            C      M 	ANDA	_RD,@0XFC
       01F10 18FC     1     MOV A,@( 252 )
       01F11 028D     1     AND A, _RD 
   772 01F12 0397 C        	ADD	A,TEMP1
   773 01F13 004D C        	MOV	_RD,A
   774            C        	
   775            C      M 	SUBA	TEMP1,@0
       01F14 1800     1     MOV A,@( 0 )
       01F15 0117     1     SUB A, TEMP1 
   776            C      M 	JPZ	LCD_VIEW_STAMP
       01F16 0C83     1     JBC  _STATUS , Z 
       01F17 1725     1     JMP  LCD_VIEW_STAMP ,
   777            C      M 	SUBA	TEMP1,@1
       01F18 1801     1     MOV A,@( 1 )
       01F19 0117     1     SUB A, TEMP1 
   778            C      M 	JPZ	LCD_VIEW_NUM1
       01F1A 0C83     1     JBC  _STATUS , Z 
       01F1B 1726     1     JMP  LCD_VIEW_NUM1 ,
   779            C      M 	SUBA	TEMP1,@2
       01F1C 1802     1     MOV A,@( 2 )
       01F1D 0117     1     SUB A, TEMP1 
   780            C      M 	JPZ	LCD_VIEW_NUM2
       01F1E 0C83     1     JBC  _STATUS , Z 
       01F1F 1727     1     JMP  LCD_VIEW_NUM2 ,
   781            C      M 	SUBA	TEMP1,@3
       01F20 1803     1     MOV A,@( 3 )
       01F21 0117     1     SUB A, TEMP1 
   782            C      M 	JPZ	LCD_VIEW_STR
       01F22 0C83     1     JBC  _STATUS , Z 
       01F23 1728     1     JMP  LCD_VIEW_STR ,
   783 01F24 1729 C        	JMP	LCD_VIEW_RET
   784 01F25      C        LCD_VIEW_STAMP:
   785            C        	;JPNB	TEMP0,3,LCD_VIEW_RET
   786            C      M 	JMP	#VIEW_STAMP
       01F25 1545     1     JMP ( VIEW_STAMP % 1024 ),
   787 01F26      C        LCD_VIEW_NUM1:
   788            C        	;JPNB	TEMP0,4,LCD_VIEW_RET
   789            C      M 	JMP	#VIEW_NUM1
       01F26 15BA     1     JMP ( VIEW_NUM1 % 1024 ),
   790 01F27      C        LCD_VIEW_NUM2:
   791            C        	;JPNB	TEMP0,5,LCD_VIEW_RET
   792            C      M 	JMP	#VIEW_NUM2
       01F27 1613     1     JMP ( VIEW_NUM2 % 1024 ),
   793 01F28      C        LCD_VIEW_STR:
   794            C        	;JPNB	TEMP0,6,LCD_VIEW_RET
   795            C      M 	JMP	#VIEW_STR
       01F28 169D     1     JMP ( VIEW_STR % 1024 ),
   796 01F29      C        LCD_VIEW_RET:
   797 01F29 0012 C        	RET
   798            C        
   799            C        	
   514                     include	"string.asm"
     1            C        ;include	<emc806.inc>
     2            C        include	"string.inc"
     1            C        
     2       0000 C        CH_0	==	0X0
     3       0001 C        CH_1	==	0X1
     4       0002 C        CH_2	==	0X2
     5       0003 C        CH_3	==	0X3
     6       0004 C        CH_4	==	0X4
     7       0005 C        CH_5	==	0X5
     8       0006 C        CH_6	==	0X6
     9       0007 C        CH_7	==	0X7
    10       0008 C        CH_8	==	0X8
    11       0009 C        CH_9	==	0X9
    12            C        
    13       000A C        CH_A	==	0XA
    14       000B C        CH_B	==	0XB
    15       000C C        CH_C	==	0XC
    16       000D C        CH_D	==	0XD
    17       000E C        CH_E	==	0XE
    18       000F C        CH_F	==	0XF
    19       0010 C        CH_G	==	0X10
    20       0011 C        CH_H	==	0X11
    21       0012 C        CH_I	==	0X12
    22       0013 C        CH_J	==	0X13
    23       0014 C        CH_K	==	0X14
    24       0015 C        CH_L	==	0X15
    25       0016 C        CH_M	==	0X16
    26       0017 C        CH_N	==	0X17
    27       0018 C        CH_O	==	0X18
    28       0019 C        CH_P	==	0X19
    29       001A C        CH_Q	==	0X1A
    30       001B C        CH_R	==	0X1B
    31       001C C        CH_S	==	0X1C
    32       001D C        CH_T	==	0X1D
    33       001E C        CH_U	==	0X1E
    34       001F C        CH_V	==	0X1F
    35       0020 C        CH_W	==	0X20
    36       0021 C        CH_X	==	0X21
    37       0022 C        CH_Y	==	0X22
    38       0023 C        CH_Z	==	0X23
    39            C        
    40       0024 C        CH_BLANK    ==	0X24
    41            C        
    42       0025 C        CH_BLACK    ==	0X25
    43            C        
    44       0026 C        CH_INTE	    ==	0X26	; ?
    45       0027 C        CH_EXC	    ==	0X27	; !
    46       0028 C        CH_COLON    ==	0X28	; :
    47       0029 C        CH_POINT    ==	0X29	; .
    48            C        
    49       002A C        CH_START ==	0X2A	; >>
    50       002B C        CH_PAUSE ==	0X2B	; ||
    51       0025 C        CH_STOP	==	0X25	; ■
    52       002C C        CH_DEL	==	0X2C	; ×
    53       002D C        CH_SCH1	==	0X2D	; /
    54       002E C        CH_SCH2	==	0X2E	; \
    55            C        
    56       002F C        CH__	==	0X2F	; _
    57            C        
    58       00FF C        CH_END	==	0XFF	; 结束标志符
    59            C        
    60       0000 C        NUM_0	==	0X0
    61       0001 C        NUM_1	==	0X1
    62       0002 C        NUM_2	==	0X2
    63       0003 C        NUM_3	==	0X3
    64       0004 C        NUM_4	==	0X4
    65       0005 C        NUM_5	==	0X5
    66       0006 C        NUM_6	==	0X6
    67       0007 C        NUM_7	==	0X7
    68       0008 C        NUM_8	==	0X8
    69       0009 C        NUM_9	==	0X9
    70       000A C        NUM_A	==	0XA
    71       000B C        NUM_B	==	0XB
    72       000C C        NUM_C	==	0XC
    73       000D C        NUM_D	==	0XD
    74       000E C        NUM_E	==	0XE
    75       000F C        NUM_F	==	0XF
    76       0010 C        NUM_BLANK	==	0X10
    77       0011 C        NUM_EX1	==	0X11
    78       0012 C        NUM_EX2	==	0X12
    79            C        
    80       0000 C        WD_NO_CALL	==	0
    81       0001 C        WD_ERROR	==	1
    82       0002 C        WD_TOTAL	==	2
    83       0003 C        WD_PRIVATE	==	3
    84       0004 C        WD_END_OF_LIST	==	4
    85       0005 C        WD_PLS_LIFT_HANDSET	== 5
    86       0006 C        WD_INITIAL	==	6
    87       0007 C        WD_ERASE	==	7
    88       0008 C        WD_ERASED	==	8
    89       0009 C        WD_ERASE_ALL	==	9
    90       000A C        WD_ERASED_ALL	==	10
    91       000B C        WD_MEMO_RECORDING	== 11
    92       000C C        WD_ICM_RECORDING	== 12
    93       000D C        WD_2WAY_RECORDING	== 13
    94       000E C        WD_NO_NUMBER	==	14
    95       000F C        WD_LONG_DISTANCE_CALL	== 15
    96       0010 C        WD_LCD_CONTRAST	==	16
    97       0011 C        WD_SET_RING	==	17
    98       0012 C        WD_SET_REMOTE_CODE	== 18
    99       0013 C        WD_SET_LONG_CODE	== 19
   100       0014 C        WD_OGM_RECORDING	== 20
   101       0015 C        WD_OGM_PLAYBACK	==	21
   102       0016 C        WD_IN_REMOTE	==	22
   103       0017 C        WD_SUNDAY	==	23
   104       0018 C        WD_MONDAY	==	24
   105       0019 C        WD_TUESDAY	==	25
   106       001A C        WD_WEDNSDAY	==	26
   107       001B C        WD_THURSDAY	==	27
   108       001C C        WD_FRIDAY	==	28
   109       001D C        WD_SATURDAY	==	29
   110       001E C        WD_MEMORY_FULL	==	30
   111       001F C        WD_NEW		==	31
   112       0020 C        WD_ENGLISH	==	32
   113       0021 C        WD_GERMAN	==	33
   114       0022 C        WD_EDIT		==	34
   115       0023 C        WD_SEARCH	==	35
   116       0024 C        WD_PLAY		==	36
   117       0025 C        WD_STOP		==	37
   118       0026 C        WD_PAUSE	==	38
   119       0027 C        WD_COPIED_INTO_BOOK	== 39
   120       0028 C        WD_OGM		==	40
   121       0029 C        WD_END_OF_NAMES_BOOK	== 41
   122       002A C        WD_OGM_		==	42
   123            C        
   124       0000 C        LANG_ENGLISH	==	0
   125       0001 C        LANG_GERMANY	==	1
   126            C        
   127            C        
   128       0000 C        STYLE_NORMAL	==	0X00	; 常规
   129       0020 C        STYLE_LEFT	==	0X20	; 左对齐
   130       0040 C        STYLE_RIGHT	==	0X40	; 右对齐
   131       0060 C        STYLE_CENTER	==	0X60	; 居中
   132            C        
   133            C        
     3            C        ;------page @6------
     4            C        org 0x1800
     5            C        ;------page @6------ 
     6 01800      C        SHOW_NO_CALL_EN:
     7 01800 0020 C        	TBL
     8 01801 1C17 C        	RETL	CH_N
     9 01802 1C18 C        	RETL	CH_O
    10 01803 1C24 C        	RETL	CH_BLANK
    11 01804 1C0C C        	RETL	CH_C
    12 01805 1C0A C        	RETL	CH_A
    13 01806 1C15 C        	RETL	CH_L
    14 01807 1C15 C        	RETL	CH_L
    15 01808 1C1C C        	RETL	CH_S
    16 01809 1CFF C        	RETL	CH_END
    17            C        
    18 0180A      C        SHOW_ERROR_EN:
    19 0180A 0020 C        	TBL
    20 0180B 1C0E C        	RETL	CH_E
    21 0180C 1C1B C        	RETL	CH_R
    22 0180D 1C1B C        	RETL	CH_R
    23 0180E 1C18 C        	RETL	CH_O
    24 0180F 1C1B C        	RETL	CH_R
    25 01810 1CFF C        	RETL	CH_END
    26            C        
    27 01811      C        SHOW_PRIVATE_EN:
    28 01811 0020 C        	TBL
    29 01812 1C19 C        	RETL	CH_P
    30 01813 1C1B C        	RETL	CH_R
    31 01814 1C12 C        	RETL	CH_I
    32 01815 1C1F C        	RETL	CH_V
    33 01816 1C0A C        	RETL	CH_A
    34 01817 1C1D C        	RETL	CH_T
    35 01818 1C0E C        	RETL	CH_E
    36 01819 1CFF C        	RETL	CH_END
    37            C        
    38 0181A      C        SHOW_END_OF_LIST_EN:
    39 0181A 0020 C        	TBL
    40 0181B 1C0E C        	RETL	CH_E
    41 0181C 1C17 C        	RETL	CH_N
    42 0181D 1C0D C        	RETL	CH_D
    43 0181E 1C24 C        	RETL	CH_BLANK
    44 0181F 1C18 C        	RETL	CH_O
    45 01820 1C0F C        	RETL	CH_F
    46 01821 1C24 C        	RETL	CH_BLANK
    47 01822 1C15 C        	RETL	CH_L
    48 01823 1C12 C        	RETL	CH_I
    49 01824 1C1C C        	RETL	CH_S
    50 01825 1C1D C        	RETL	CH_T
    51 01826 1CFF C        	RETL	CH_END
    52            C        
    53 01827      C        SHOW_PLS_LIFT_HANDSET_EN:
    54 01827 0020 C        	TBL
    55 01828 1C19 C        	RETL	CH_P
    56 01829 1C15 C        	RETL	CH_L
    57 0182A 1C1C C        	RETL	CH_S
    58 0182B 1C24 C        	RETL	CH_BLANK
    59 0182C 1C15 C        	RETL	CH_L
    60 0182D 1C12 C        	RETL	CH_I
    61 0182E 1C0F C        	RETL	CH_F
    62 0182F 1C1D C        	RETL	CH_T
    63 01830 1C24 C        	RETL	CH_BLANK
    64 01831 1C11 C        	RETL	CH_H
    65 01832 1C0A C        	RETL	CH_A
    66 01833 1C17 C        	RETL	CH_N
    67 01834 1C0D C        	RETL	CH_D
    68 01835 1C1C C        	RETL	CH_S
    69 01836 1C0E C        	RETL	CH_E
    70 01837 1C1D C        	RETL	CH_T
    71 01838 1CFF C        	RETL	CH_END
    72            C        
    73 01839      C        SHOW_INITIAL_EN:
    74 01839 0020 C        	TBL
    75 0183A 1C12 C        	RETL	CH_I
    76 0183B 1C17 C        	RETL	CH_N
    77 0183C 1C12 C        	RETL	CH_I
    78 0183D 1C1D C        	RETL	CH_T
    79 0183E 1C12 C        	RETL	CH_I
    80 0183F 1C0A C        	RETL	CH_A
    81 01840 1C15 C        	RETL	CH_L
    82 01841 1CFF C        	RETL	CH_END
    83            C        
    84 01842      C        SHOW_ERASE_EN:
    85 01842 0020 C        	TBL
    86 01843 1C0E C        	RETL	CH_E
    87 01844 1C1B C        	RETL	CH_R
    88 01845 1C0A C        	RETL	CH_A
    89 01846 1C1C C        	RETL	CH_S
    90 01847 1C0E C        	RETL	CH_E
    91 01848 1C26 C        	RETL	CH_INTE
    92 01849 1CFF C        	RETL	CH_END
    93            C        
    94 0184A      C        SHOW_ERASE_ALL_EN:
    95 0184A 0020 C        	TBL
    96 0184B 1C0E C        	RETL	CH_E
    97 0184C 1C1B C        	RETL	CH_R
    98 0184D 1C0A C        	RETL	CH_A
    99 0184E 1C1C C        	RETL	CH_S
   100 0184F 1C0E C        	RETL	CH_E
   101 01850 1C24 C        	RETL	CH_BLANK
   102 01851 1C0A C        	RETL	CH_A
   103 01852 1C15 C        	RETL	CH_L
   104 01853 1C15 C        	RETL	CH_L
   105 01854 1C26 C        	RETL	CH_INTE
   106 01855 1CFF C        	RETL	CH_END
   107            C        
   108 01856      C        SHOW_MEMO_RECORDING_EN:
   109 01856 0020 C        	TBL
   110 01857 1C16 C        	RETL	CH_M
   111 01858 1C0E C        	RETL	CH_E
   112 01859 1C16 C        	RETL	CH_M
   113 0185A 1C18 C        	RETL	CH_O
   114 0185B 1C24 C        	RETL	CH_BLANK
   115 0185C 1C1B C        	RETL	CH_R
   116 0185D 1C0E C        	RETL	CH_E
   117 0185E 1C0C C        	RETL	CH_C
   118 0185F 1C18 C        	RETL	CH_O
   119 01860 1C1B C        	RETL	CH_R
   120 01861 1C0D C        	RETL	CH_D
   121 01862 1C12 C        	RETL	CH_I
   122 01863 1C17 C        	RETL	CH_N
   123 01864 1C10 C        	RETL	CH_G
   124 01865 1CFF C        	RETL	CH_END
   125            C        
   126 01866      C        SHOW_2WAY_RECORDING_EN:
   127 01866 0020 C        	TBL
   128 01867 1C02 C        	RETL	CH_2
   129 01868 1C20 C        	RETL	CH_W
   130 01869 1C0A C        	RETL	CH_A
   131 0186A 1C22 C        	RETL	CH_Y
   132 0186B 1C24 C        	RETL	CH_BLANK
   133 0186C 1C1B C        	RETL	CH_R
   134 0186D 1C0E C        	RETL	CH_E
   135 0186E 1C0C C        	RETL	CH_C
   136 0186F 1C18 C        	RETL	CH_O
   137 01870 1C1B C        	RETL	CH_R
   138 01871 1C0D C        	RETL	CH_D
   139 01872 1C12 C        	RETL	CH_I
   140 01873 1C17 C        	RETL	CH_N
   141 01874 1C10 C        	RETL	CH_G
   142 01875 1CFF C        	RETL	CH_END
   143            C        
   144 01876      C        SHOW_ICM_RECORDING_EN:
   145 01876 0020 C        	TBL
   146 01877 1C12 C        	RETL	CH_I
   147 01878 1C0C C        	RETL	CH_C
   148 01879 1C16 C        	RETL	CH_M
   149 0187A 1C24 C        	RETL	CH_BLANK
   150 0187B 1C1B C        	RETL	CH_R
   151 0187C 1C0E C        	RETL	CH_E
   152 0187D 1C0C C        	RETL	CH_C
   153 0187E 1C18 C        	RETL	CH_O
   154 0187F 1C1B C        	RETL	CH_R
   155 01880 1C0D C        	RETL	CH_D
   156 01881 1C12 C        	RETL	CH_I
   157 01882 1C17 C        	RETL	CH_N
   158 01883 1C10 C        	RETL	CH_G
   159 01884 1CFF C        	RETL	CH_END
   160            C        
   161 01885      C        SHOW_NO_NUMBER_EN:
   162 01885 0020 C        	TBL
   163 01886 1C17 C        	RETL	CH_N
   164 01887 1C18 C        	RETL	CH_O
   165 01888 1C24 C        	RETL	CH_BLANK
   166 01889 1C17 C        	RETL	CH_N
   167 0188A 1C1E C        	RETL	CH_U
   168 0188B 1C16 C        	RETL	CH_M
   169 0188C 1C0B C        	RETL	CH_B
   170 0188D 1C0E C        	RETL	CH_E
   171 0188E 1C1B C        	RETL	CH_R
   172 0188F 1CFF C        	RETL	CH_END
   173            C        
   174 01890      C        SHOW_LONG_DISTANCE_CALL_EN:
   175 01890 0020 C        	TBL
   176 01891 1C15 C        	RETL	CH_L
   177 01892 1C18 C        	RETL	CH_O
   178 01893 1C17 C        	RETL	CH_N
   179 01894 1C10 C        	RETL	CH_G
   180 01895 1C24 C        	RETL	CH_BLANK
   181 01896 1C0D C        	RETL	CH_D
   182 01897 1C12 C        	RETL	CH_I
   183 01898 1C1C C        	RETL	CH_S
   184 01899 1C1D C        	RETL	CH_T
   185 0189A 1C0A C        	RETL	CH_A
   186 0189B 1C17 C        	RETL	CH_N
   187 0189C 1C0C C        	RETL	CH_C
   188 0189D 1C0E C        	RETL	CH_E
   189 0189E 1C24 C        	RETL	CH_BLANK
   190 0189F 1C0C C        	RETL	CH_C
   191 018A0 1C0A C        	RETL	CH_A
   192 018A1 1C15 C        	RETL	CH_L
   193 018A2 1C15 C        	RETL	CH_L
   194 018A3 1CFF C        	RETL	CH_END
   195            C        
   196 018A4      C        SHOW_LCD_CONTRAST_EN:
   197 018A4 0020 C        	TBL
   198 018A5 1C15 C        	RETL	CH_L
   199 018A6 1C0C C        	RETL	CH_C
   200 018A7 1C0D C        	RETL	CH_D
   201 018A8 1C24 C        	RETL	CH_BLANK
   202 018A9 1C0C C        	RETL	CH_C
   203 018AA 1C18 C        	RETL	CH_O
   204 018AB 1C17 C        	RETL	CH_N
   205 018AC 1C1D C        	RETL	CH_T
   206 018AD 1C1B C        	RETL	CH_R
   207 018AE 1C0A C        	RETL	CH_A
   208 018AF 1C1C C        	RETL	CH_S
   209 018B0 1C1D C        	RETL	CH_T
   210 018B1 1CFF C        	RETL	CH_END
   211            C        
   212 018B2      C        SHOW_SET_REMOTE_CODE_EN:
   213 018B2 0020 C        	TBL
   214 018B3 1C1C C        	RETL	CH_S
   215 018B4 1C0E C        	RETL	CH_E
   216 018B5 1C1D C        	RETL	CH_T
   217 018B6 1C24 C        	RETL	CH_BLANK
   218 018B7 1C1B C        	RETL	CH_R
   219 018B8 1C0E C        	RETL	CH_E
   220 018B9 1C16 C        	RETL	CH_M
   221 018BA 1C18 C        	RETL	CH_O
   222 018BB 1C1D C        	RETL	CH_T
   223 018BC 1C0E C        	RETL	CH_E
   224 018BD 1C24 C        	RETL	CH_BLANK
   225 018BE 1C0C C        	RETL	CH_C
   226 018BF 1C18 C        	RETL	CH_O
   227 018C0 1C0D C        	RETL	CH_D
   228 018C1 1C0E C        	RETL	CH_E
   229 018C2 1CFF C        	RETL	CH_END
   230            C        
   231 018C3      C        SHOW_SET_LONG_CODE_EN:
   232 018C3 0020 C        	TBL
   233 018C4 1C1C C        	RETL	CH_S
   234 018C5 1C0E C        	RETL	CH_E
   235 018C6 1C1D C        	RETL	CH_T
   236 018C7 1C24 C        	RETL	CH_BLANK
   237 018C8 1C0A C        	RETL	CH_A
   238 018C9 1C1B C        	RETL	CH_R
   239 018CA 1C0E C        	RETL	CH_E
   240 018CB 1C0A C        	RETL	CH_A
   241 018CC 1C24 C        	RETL	CH_BLANK
   242 018CD 1C0C C        	RETL	CH_C
   243 018CE 1C18 C        	RETL	CH_O
   244 018CF 1C0D C        	RETL	CH_D
   245 018D0 1C0E C        	RETL	CH_E
   246 018D1 1CFF C        	RETL	CH_END
   247            C        
   248 018D2      C        SHOW_OGM_RECORDING_EN:
   249 018D2 0020 C        	TBL
   250 018D3 1C1B C        	RETL	CH_R
   251 018D4 1C0E C        	RETL	CH_E
   252 018D5 1C0C C        	RETL	CH_C
   253 018D6 1C18 C        	RETL	CH_O
   254 018D7 1C1B C        	RETL	CH_R
   255 018D8 1C0D C        	RETL	CH_D
   256 018D9 1C12 C        	RETL	CH_I
   257 018DA 1C17 C        	RETL	CH_N
   258 018DB 1C10 C        	RETL	CH_G
   259 018DC 1CFF C        	RETL	CH_END
   260            C        
   261 018DD      C        SHOW_ERASED_EN:
   262 018DD 0020 C        	TBL
   263 018DE 1C0E C        	RETL	CH_E
   264 018DF 1C1B C        	RETL	CH_R
   265 018E0 1C0A C        	RETL	CH_A
   266 018E1 1C1C C        	RETL	CH_S
   267 018E2 1C0E C        	RETL	CH_E
   268 018E3 1C0D C        	RETL	CH_D
   269 018E4 1CFF C        	RETL	CH_END
   270            C        
   271 018E5      C        SHOW_ERASED_ALL_EN:
   272 018E5 0020 C        	TBL
   273 018E6 1C0E C        	RETL	CH_E
   274 018E7 1C1B C        	RETL	CH_R
   275 018E8 1C0A C        	RETL	CH_A
   276 018E9 1C1C C        	RETL	CH_S
   277 018EA 1C0E C        	RETL	CH_E
   278 018EB 1C0D C        	RETL	CH_D
   279 018EC 1C24 C        	RETL	CH_BLANK
   280 018ED 1C0A C        	RETL	CH_A
   281 018EE 1C15 C        	RETL	CH_L
   282 018EF 1C15 C        	RETL	CH_L
   283 018F0 1CFF C        	RETL	CH_END
   284            C        
   285 018F1      C        SHOW_SET_BOOK_EN:
   286 018F1 0020 C        	TBL
   287 018F2 1C1C C        	RETL	CH_S
   288 018F3 1C0E C        	RETL	CH_E
   289 018F4 1C1D C        	RETL	CH_T
   290 018F5 1C24 C        	RETL	CH_BLANK
   291 018F6 1C0B C        	RETL	CH_B
   292 018F7 1C18 C        	RETL	CH_O
   293 018F8 1C18 C        	RETL	CH_O
   294 018F9 1C14 C        	RETL	CH_K
   295 018FA 1CFF C        	RETL	CH_END
   296            C        
   297            C        
   298            C        ORG	0X1900
   299 01900      C        SHOW_OGM_PLAYBACK_EN:
   300 01900 0020 C        	TBL
   301 01901 1C19 C        	RETL	CH_P
   302 01902 1C15 C        	RETL	CH_L
   303 01903 1C0A C        	RETL	CH_A
   304 01904 1C22 C        	RETL	CH_Y
   305 01905 1C0B C        	RETL	CH_B
   306 01906 1C0A C        	RETL	CH_A
   307 01907 1C0C C        	RETL	CH_C
   308 01908 1C14 C        	RETL	CH_K
   309 01909 1CFF C        	RETL	CH_END
   310            C        
   311 0190A      C        SHOW_SET_RING_EN:
   312 0190A 0020 C        	TBL
   313 0190B 1C1B C        	RETL	CH_R
   314 0190C 1C12 C        	RETL	CH_I
   315 0190D 1C17 C        	RETL	CH_N
   316 0190E 1C10 C        	RETL	CH_G
   317 0190F 1C24 C        	RETL	CH_BLANK
   318 01910 1C1D C        	RETL	CH_T
   319 01911 1C12 C        	RETL	CH_I
   320 01912 1C16 C        	RETL	CH_M
   321 01913 1C0E C        	RETL	CH_E
   322 01914 1C24 C        	RETL	CH_BLANK
   323 01915 1C1C C        	RETL	CH_S
   324 01916 1C0E C        	RETL	CH_E
   325 01917 1C1D C        	RETL	CH_T
   326 01918 1CFF C        	RETL	CH_END
   327            C        
   328 01919      C        SHOW_IN_REMOTE_EN:
   329 01919 0020 C        	TBL
   330 0191A 1C12 C        	RETL	CH_I
   331 0191B 1C17 C        	RETL	CH_N
   332 0191C 1C24 C        	RETL	CH_BLANK
   333 0191D 1C1B C        	RETL	CH_R
   334 0191E 1C0E C        	RETL	CH_E
   335 0191F 1C16 C        	RETL	CH_M
   336 01920 1C18 C        	RETL	CH_O
   337 01921 1C1D C        	RETL	CH_T
   338 01922 1C0E C        	RETL	CH_E
   339 01923 1CFF C        	RETL	CH_END
   340            C        
   341 01924      C        SHOW_SUNDAY_EN:
   342 01924 0020 C        	TBL
   343 01925 1C1C C        	RETL	CH_S
   344 01926 1C1E C        	RETL	CH_U
   345 01927 1C17 C        	RETL	CH_N
   346 01928 1C0D C        	RETL	CH_D
   347 01929 1C0A C        	RETL	CH_A
   348 0192A 1C22 C        	RETL	CH_Y
   349 0192B 1CFF C        	RETL	CH_END
   350            C        
   351 0192C      C        SHOW_MONDAY_EN:
   352 0192C 0020 C        	TBL
   353 0192D 1C16 C        	RETL	CH_M
   354 0192E 1C18 C        	RETL	CH_O
   355 0192F 1C17 C        	RETL	CH_N
   356 01930 1C0D C        	RETL	CH_D
   357 01931 1C0A C        	RETL	CH_A
   358 01932 1C22 C        	RETL	CH_Y
   359 01933 1CFF C        	RETL	CH_END
   360            C        
   361 01934      C        SHOW_TUESDAY_EN:
   362 01934 0020 C        	TBL
   363 01935 1C1D C        	RETL	CH_T
   364 01936 1C1E C        	RETL	CH_U
   365 01937 1C0E C        	RETL	CH_E
   366 01938 1C1C C        	RETL	CH_S
   367 01939 1C0D C        	RETL	CH_D
   368 0193A 1C0A C        	RETL	CH_A
   369 0193B 1C22 C        	RETL	CH_Y
   370 0193C 1CFF C        	RETL	CH_END
   371            C        
   372 0193D      C        SHOW_WEDNSDAY_EN:
   373 0193D 0020 C        	TBL
   374 0193E 1C20 C        	RETL	CH_W
   375 0193F 1C0E C        	RETL	CH_E
   376 01940 1C0D C        	RETL	CH_D
   377 01941 1C17 C        	RETL	CH_N
   378 01942 1C1C C        	RETL	CH_S
   379 01943 1C0D C        	RETL	CH_D
   380 01944 1C0A C        	RETL	CH_A
   381 01945 1C22 C        	RETL	CH_Y
   382 01946 1CFF C        	RETL	CH_END
   383            C        
   384 01947      C        SHOW_THURSDAY_EN:
   385 01947 0020 C        	TBL
   386 01948 1C1D C        	RETL	CH_T
   387 01949 1C11 C        	RETL	CH_H
   388 0194A 1C1E C        	RETL	CH_U
   389 0194B 1C1B C        	RETL	CH_R
   390 0194C 1C1C C        	RETL	CH_S
   391 0194D 1C0D C        	RETL	CH_D
   392 0194E 1C0A C        	RETL	CH_A
   393 0194F 1C22 C        	RETL	CH_Y
   394 01950 1CFF C        	RETL	CH_END
   395            C        
   396 01951      C        SHOW_FRIDAY_EN:
   397 01951 0020 C        	TBL
   398 01952 1C0F C        	RETL	CH_F
   399 01953 1C1B C        	RETL	CH_R
   400 01954 1C12 C        	RETL	CH_I
   401 01955 1C0D C        	RETL	CH_D
   402 01956 1C0A C        	RETL	CH_A
   403 01957 1C22 C        	RETL	CH_Y
   404 01958 1CFF C        	RETL	CH_END
   405            C        
   406 01959      C        SHOW_SATURDAY_EN:
   407 01959 0020 C        	TBL
   408 0195A 1C1C C        	RETL	CH_S
   409 0195B 1C0A C        	RETL	CH_A
   410 0195C 1C1D C        	RETL	CH_T
   411 0195D 1C1E C        	RETL	CH_U
   412 0195E 1C1B C        	RETL	CH_R
   413 0195F 1C0D C        	RETL	CH_D
   414 01960 1C0A C        	RETL	CH_A
   415 01961 1C22 C        	RETL	CH_Y
   416 01962 1CFF C        	RETL	CH_END
   417            C        
   418 01963      C        SHOW_MEMORY_FULL_EN:
   419 01963 0020 C        	TBL
   420 01964 1C16 C        	RETL	CH_M
   421 01965 1C0E C        	RETL	CH_E
   422 01966 1C16 C        	RETL	CH_M
   423 01967 1C18 C        	RETL	CH_O
   424 01968 1C1B C        	RETL	CH_R
   425 01969 1C22 C        	RETL	CH_Y
   426 0196A 1C24 C        	RETL	CH_BLANK
   427 0196B 1C0F C        	RETL	CH_F
   428 0196C 1C1E C        	RETL	CH_U
   429 0196D 1C15 C        	RETL	CH_L
   430 0196E 1C15 C        	RETL	CH_L
   431 0196F 1CFF C        	RETL	CH_END
   432            C        
   433 01970      C        SHOW_NEW_EN:
   434 01970 0020 C        	TBL
   435 01971 1C17 C        	RETL	CH_N
   436 01972 1C0E C        	RETL	CH_E
   437 01973 1C20 C        	RETL	CH_W
   438 01974 1CFF C        	RETL	CH_END
   439            C        
   440 01975      C        SHOW_TOTAL_EN:
   441 01975 0020 C        	TBL
   442 01976 1C1D C        	RETL	CH_T
   443 01977 1C18 C        	RETL	CH_O
   444 01978 1C1D C        	RETL	CH_T
   445 01979 1C0A C        	RETL	CH_A
   446 0197A 1C15 C        	RETL	CH_L
   447 0197B 1CFF C        	RETL	CH_END
   448            C        
   449 0197C      C        SHOW_LANGUAGE_EN:
   450 0197C 0020 C        	TBL
   451 0197D 1C15 C        	RETL	CH_L
   452 0197E 1C0A C        	RETL	CH_A
   453 0197F 1C17 C        	RETL	CH_N
   454 01980 1C10 C        	RETL	CH_G
   455 01981 1C1E C        	RETL	CH_U
   456 01982 1C0A C        	RETL	CH_A
   457 01983 1C10 C        	RETL	CH_G
   458 01984 1C0E C        	RETL	CH_E
   459 01985 1CFF C        	RETL	CH_END
   460            C        
   461 01986      C        SHOW_ENGLISH_EN:
   462 01986 0020 C        	TBL
   463 01987 1C0E C        	RETL	CH_E
   464 01988 1C17 C        	RETL	CH_N
   465 01989 1C10 C        	RETL	CH_G
   466 0198A 1C15 C        	RETL	CH_L
   467 0198B 1C12 C        	RETL	CH_I
   468 0198C 1C1C C        	RETL	CH_S
   469 0198D 1C11 C        	RETL	CH_H
   470 0198E 1CFF C        	RETL	CH_END
   471            C        
   472 0198F      C        SHOW_GERMAN_EN:
   473 0198F      C        SHOW_GERMAN_GE:
   474 0198F 0020 C        	TBL
   475 01990 1C10 C        	RETL	CH_G
   476 01991 1C0E C        	RETL	CH_E
   477 01992 1C1B C        	RETL	CH_R
   478 01993 1C16 C        	RETL	CH_M
   479 01994 1C0A C        	RETL	CH_A
   480 01995 1C17 C        	RETL	CH_N
   481 01996 1CFF C        	RETL	CH_END
   482            C        
   483 01997      C        SHOW_EDIT_EN:
   484 01997 0020 C        	TBL
   485 01998 1C0E C        	RETL	CH_E
   486 01999 1C0D C        	RETL	CH_D
   487 0199A 1C12 C        	RETL	CH_I
   488 0199B 1C1D C        	RETL	CH_T
   489 0199C 1CFF C        	RETL	CH_END
   490            C        
   491 0199D      C        SHOW_SEARCH_EN:
   492 0199D 0020 C        	TBL
   493 0199E 1C1C C        	RETL	CH_S
   494 0199F 1C0E C        	RETL	CH_E
   495 019A0 1C0A C        	RETL	CH_A
   496 019A1 1C1B C        	RETL	CH_R
   497 019A2 1C0C C        	RETL	CH_C
   498 019A3 1C11 C        	RETL	CH_H
   499 019A4 1CFF C        	RETL	CH_END
   500            C        
   501 019A5      C        SHOW_PLAY_EN:
   502 019A5 0020 C        	TBL
   503 019A6 1C19 C        	RETL	CH_P
   504 019A7 1C15 C        	RETL	CH_L
   505 019A8 1C0A C        	RETL	CH_A
   506 019A9 1C22 C        	RETL	CH_Y
   507 019AA 1CFF C        	RETL	CH_END
   508            C        
   509 019AB      C        SHOW_PLAY_GE:
   510 019AB 0020 C        	TBL
   511 019AC 1C17 C        	RETL	CH_N
   512 019AD 1C0A C        	RETL	CH_A
   513 019AE 1C0C C        	RETL	CH_C
   514 019AF 1C11 C        	RETL	CH_H
   515 019B0 1C1B C        	RETL	CH_R
   516 019B1 1C12 C        	RETL	CH_I
   517 019B2 1C0C C        	RETL	CH_C
   518 019B3 1C11 C        	RETL	CH_H
   519 019B4 1C1D C        	RETL	CH_T
   520 019B5 1CFF C        	RETL	CH_END
   521            C        
   522 019B6      C        SHOW_STOP_EN:
   523 019B6      C        SHOW_STOP_GE:
   524 019B6 0020 C        	TBL
   525 019B7 1C1C C        	RETL	CH_S
   526 019B8 1C1D C        	RETL	CH_T
   527 019B9 1C18 C        	RETL	CH_O
   528 019BA 1C19 C        	RETL	CH_P
   529 019BB 1CFF C        	RETL	CH_END
   530            C        
   531 019BC      C        SHOW_PAUSE_EN:
   532 019BC      C        SHOW_PAUSE_GE:
   533 019BC 0020 C        	TBL
   534 019BD 1C19 C        	RETL	CH_P
   535 019BE 1C0A C        	RETL	CH_A
   536 019BF 1C1E C        	RETL	CH_U
   537 019C0 1C1C C        	RETL	CH_S
   538 019C1 1C0E C        	RETL	CH_E
   539 019C2 1CFF C        	RETL	CH_END
   540            C        
   541            C        ; 德语部分：
   542 019C3      C        SHOW_NO_CALL_GE:
   543 019C3 0020 C        	TBL
   544 019C4 1C14 C        	RETL	CH_K
   545 019C5 1C0E C        	RETL	CH_E
   546 019C6 1C12 C        	RETL	CH_I
   547 019C7 1C17 C        	RETL	CH_N
   548 019C8 1C0E C        	RETL	CH_E
   549 019C9 1C24 C        	RETL	CH_BLANK
   550 019CA 1C0A C        	RETL	CH_A
   551 019CB 1C17 C        	RETL	CH_N
   552 019CC 1C1B C        	RETL	CH_R
   553 019CD 1C1E C        	RETL	CH_U
   554 019CE 1C0F C        	RETL	CH_F
   555 019CF 1C0E C        	RETL	CH_E
   556 019D0 1CFF C        	RETL	CH_END
   557            C        
   558 019D1      C        SHOW_INITIAL_GE:
   559 019D1 0020 C        	TBL
   560 019D2 1C0B C        	RETL	CH_B
   561 019D3 1C12 C        	RETL	CH_I
   562 019D4 1C1D C        	RETL	CH_T
   563 019D5 1C1D C        	RETL	CH_T
   564 019D6 1C0E C        	RETL	CH_E
   565 019D7 1C24 C        	RETL	CH_BLANK
   566 019D8 1C20 C        	RETL	CH_W
   567 019D9 1C0A C        	RETL	CH_A
   568 019DA 1C1B C        	RETL	CH_R
   569 019DB 1C1D C        	RETL	CH_T
   570 019DC 1C0E C        	RETL	CH_E
   571 019DD 1C17 C        	RETL	CH_N
   572 019DE 1CFF C        	RETL	CH_END
   573            C        
   574 019DF      C        SHOW_ERASE_ALL_GE:
   575 019DF 0020 C        	TBL
   576 019E0 1C0A C        	RETL	CH_A
   577 019E1 1C15 C        	RETL	CH_L
   578 019E2 1C15 C        	RETL	CH_L
   579 019E3 1C0E C        	RETL	CH_E
   580 019E4 1C1C C        	RETL	CH_S
   581 019E5 1C24 C        	RETL	CH_BLANK
   582 019E6 1C15 C        	RETL	CH_L
   583 019E7 1C18 C        	RETL	CH_O
   584 019E8 1C0E C        	RETL	CH_E
   585 019E9 1C1C C        	RETL	CH_S
   586 019EA 1C0C C        	RETL	CH_C
   587 019EB 1C11 C        	RETL	CH_H
   588 019EC 1C0E C        	RETL	CH_E
   589 019ED 1C17 C        	RETL	CH_N
   590 019EE 1C26 C        	RETL	CH_INTE
   591 019EF 1CFF C        	RETL	CH_END
   592            C        
   593 019F0      C        SHOW_ERROR_GE:
   594 019F0 0020 C        	TBL
   595 019F1 1C0F C        	RETL	CH_F
   596 019F2 1C0E C        	RETL	CH_E
   597 019F3 1C11 C        	RETL	CH_H
   598 019F4 1C15 C        	RETL	CH_L
   599 019F5 1C0E C        	RETL	CH_E
   600 019F6 1C1B C        	RETL	CH_R
   601 019F7 1CFF C        	RETL	CH_END
   602            C        
   603 019F8      C        SHOW_PRIVATE_GE:
   604 019F8 0020 C        	TBL
   605 019F9 1C19 C        	RETL	CH_P
   606 019FA 1C1B C        	RETL	CH_R
   607 019FB 1C12 C        	RETL	CH_I
   608 019FC 1C1F C        	RETL	CH_V
   609 019FD 1C0A C        	RETL	CH_A
   610 019FE 1C1D C        	RETL	CH_T
   611 019FF 1CFF C        	RETL	CH_END
   612            C        
   613            C        
   614            C        ORG	0X1A00
   615            C        
   616 01A00      C        SHOW_END_OF_LIST_GE:
   617 01A00 0020 C        	TBL
   618 01A01 1C15 C        	RETL	CH_L
   619 01A02 1C12 C        	RETL	CH_I
   620 01A03 1C1C C        	RETL	CH_S
   621 01A04 1C1D C        	RETL	CH_T
   622 01A05 1C0E C        	RETL	CH_E
   623 01A06 1C17 C        	RETL	CH_N
   624 01A07 1C0E C        	RETL	CH_E
   625 01A08 1C17 C        	RETL	CH_N
   626 01A09 1C0D C        	RETL	CH_D
   627 01A0A 1C0E C        	RETL	CH_E
   628 01A0B 1CFF C        	RETL	CH_END
   629            C        
   630 01A0C      C        SHOW_ERASE_GE:
   631 01A0C 0020 C        	TBL
   632 01A0D 1C15 C        	RETL	CH_L
   633 01A0E 1C18 C        	RETL	CH_O
   634 01A0F 1C0E C        	RETL	CH_E
   635 01A10 1C1C C        	RETL	CH_S
   636 01A11 1C0C C        	RETL	CH_C
   637 01A12 1C11 C        	RETL	CH_H
   638 01A13 1C0E C        	RETL	CH_E
   639 01A14 1C17 C        	RETL	CH_N
   640 01A15 1C26 C        	RETL	CH_INTE
   641 01A16 1CFF C        	RETL	CH_END
   642            C        
   643 01A17      C        SHOW_PLS_LIFT_HANDSET_GE:
   644 01A17 0020 C        	TBL
   645 01A18 1C11 C        	RETL	CH_H
   646 01A19 1C18 C        	RETL	CH_O
   647 01A1A 1C0E C        	RETL	CH_E
   648 01A1B 1C1B C        	RETL	CH_R
   649 01A1C 1C0E C        	RETL	CH_E
   650 01A1D 1C1B C        	RETL	CH_R
   651 01A1E 1C24 C        	RETL	CH_BLANK
   652 01A1F 1C0A C        	RETL	CH_A
   653 01A20 1C0B C        	RETL	CH_B
   654 01A21 1C11 C        	RETL	CH_H
   655 01A22 1C0E C        	RETL	CH_E
   656 01A23 1C0B C        	RETL	CH_B
   657 01A24 1C0E C        	RETL	CH_E
   658 01A25 1C17 C        	RETL	CH_N
   659 01A26 1CFF C        	RETL	CH_END
   660            C        
   661 01A27      C        SHOW_MEMO_RECORDING_GE:
   662 01A27 0020 C        	TBL
   663 01A28 1C16 C        	RETL	CH_M
   664 01A29 1C0E C        	RETL	CH_E
   665 01A2A 1C16 C        	RETL	CH_M
   666 01A2B 1C18 C        	RETL	CH_O
   667 01A2C 1C24 C        	RETL	CH_BLANK
   668 01A2D 1C0A C        	RETL	CH_A
   669 01A2E 1C1E C        	RETL	CH_U
   670 01A2F 1C0F C        	RETL	CH_F
   671 01A30 1C17 C        	RETL	CH_N
   672 01A31 1C0E C        	RETL	CH_E
   673 01A32 1C11 C        	RETL	CH_H
   674 01A33 1C16 C        	RETL	CH_M
   675 01A34 1C0E C        	RETL	CH_E
   676 01A35 1C17 C        	RETL	CH_N
   677 01A36 1CFF C        	RETL	CH_END
   678            C        
   679 01A37      C        SHOW_2WAY_RECORDING_GE:
   680 01A37 0020 C        	TBL
   681 01A38 1C16 C        	RETL	CH_M
   682 01A39 1C12 C        	RETL	CH_I
   683 01A3A 1C1D C        	RETL	CH_T
   684 01A3B 1C1C C        	RETL	CH_S
   685 01A3C 1C0C C        	RETL	CH_C
   686 01A3D 1C11 C        	RETL	CH_H
   687 01A3E 1C17 C        	RETL	CH_N
   688 01A3F 1C0E C        	RETL	CH_E
   689 01A40 1C12 C        	RETL	CH_I
   690 01A41 1C0D C        	RETL	CH_D
   691 01A42 1C0E C        	RETL	CH_E
   692 01A43 1C17 C        	RETL	CH_N
   693 01A44 1CFF C        	RETL	CH_END
   694            C        
   695 01A45      C        SHOW_ICM_RECORDING_GE:
   696 01A45 0020 C        	TBL
   697 01A46 1C0A C        	RETL	CH_A
   698 01A47 1C17 C        	RETL	CH_N
   699 01A48 1C1B C        	RETL	CH_R
   700 01A49 1C1E C        	RETL	CH_U
   701 01A4A 1C0F C        	RETL	CH_F
   702 01A4B 1C24 C        	RETL	CH_BLANK
   703 01A4C 1C0A C        	RETL	CH_A
   704 01A4D 1C1E C        	RETL	CH_U
   705 01A4E 1C0F C        	RETL	CH_F
   706 01A4F 1C17 C        	RETL	CH_N
   707 01A50 1C0E C        	RETL	CH_E
   708 01A51 1C11 C        	RETL	CH_H
   709 01A52 1C16 C        	RETL	CH_M
   710 01A53 1C0E C        	RETL	CH_E
   711 01A54 1C17 C        	RETL	CH_N
   712 01A55 1CFF C        	RETL	CH_END
   713            C        
   714 01A56      C        SHOW_NO_NUMBER_GE:
   715 01A56 0020 C        	TBL
   716 01A57 1C14 C        	RETL	CH_K
   717 01A58 1C0E C        	RETL	CH_E
   718 01A59 1C12 C        	RETL	CH_I
   719 01A5A 1C17 C        	RETL	CH_N
   720 01A5B 1C0E C        	RETL	CH_E
   721 01A5C 1C24 C        	RETL	CH_BLANK
   722 01A5D 1C17 C        	RETL	CH_N
   723 01A5E 1C1E C        	RETL	CH_U
   724 01A5F 1C16 C        	RETL	CH_M
   725 01A60 1C16 C        	RETL	CH_M
   726 01A61 1C0E C        	RETL	CH_E
   727 01A62 1C1B C        	RETL	CH_R
   728 01A63 1CFF C        	RETL	CH_END
   729            C        
   730 01A64      C        SHOW_LONG_DISTANCE_CALL_GE:
   731 01A64 0020 C        	TBL
   732 01A65 1C0F C        	RETL	CH_F
   733 01A66 1C0E C        	RETL	CH_E
   734 01A67 1C1B C        	RETL	CH_R
   735 01A68 1C17 C        	RETL	CH_N
   736 01A69 1C10 C        	RETL	CH_G
   737 01A6A 1C0E C        	RETL	CH_E
   738 01A6B 1C1C C        	RETL	CH_S
   739 01A6C 1C19 C        	RETL	CH_P
   740 01A6D 1C1B C        	RETL	CH_R
   741 01A6E 1C0A C        	RETL	CH_A
   742 01A6F 1C0E C        	RETL	CH_E
   743 01A70 1C0C C        	RETL	CH_C
   744 01A71 1C11 C        	RETL	CH_H
   745 01A72 1CFF C        	RETL	CH_END
   746            C        
   747 01A73      C        SHOW_LCD_CONTRAST_GE:
   748 01A73 0020 C        	TBL
   749 01A74 1C15 C        	RETL	CH_L
   750 01A75 1C0C C        	RETL	CH_C
   751 01A76 1C0D C        	RETL	CH_D
   752 01A77 1C24 C        	RETL	CH_BLANK
   753 01A78 1C14 C        	RETL	CH_K
   754 01A79 1C18 C        	RETL	CH_O
   755 01A7A 1C17 C        	RETL	CH_N
   756 01A7B 1C1D C        	RETL	CH_T
   757 01A7C 1C1B C        	RETL	CH_R
   758 01A7D 1C0A C        	RETL	CH_A
   759 01A7E 1C1C C        	RETL	CH_S
   760 01A7F 1C1D C        	RETL	CH_T
   761 01A80 1CFF C        	RETL	CH_END
   762            C        
   763 01A81      C        SHOW_SET_RING_GE:
   764 01A81 0020 C        	TBL
   765 01A82 1C0A C        	RETL	CH_A
   766 01A83 1C17 C        	RETL	CH_N
   767 01A84 1C23 C        	RETL	CH_Z
   768 01A85 1C29 C        	RETL	CH_POINT
   769 01A86 1C1B C        	RETL	CH_R
   770 01A87 1C1E C        	RETL	CH_U
   771 01A88 1C0F C        	RETL	CH_F
   772 01A89 1C0E C        	RETL	CH_E
   773 01A8A 1C24 C        	RETL	CH_BLANK
   774 01A8B 1C1C C        	RETL	CH_S
   775 01A8C 1C0E C        	RETL	CH_E
   776 01A8D 1C1D C        	RETL	CH_T
   777 01A8E 1C23 C        	RETL	CH_Z
   778 01A8F 1C0E C        	RETL	CH_E
   779 01A90 1C17 C        	RETL	CH_N
   780 01A91 1CFF C        	RETL	CH_END
   781            C        
   782 01A92      C        SHOW_SET_REMOTE_CODE_GE:
   783 01A92 0020 C        	TBL
   784 01A93 1C1C C        	RETL	CH_S
   785 01A94 1C0E C        	RETL	CH_E
   786 01A95 1C1D C        	RETL	CH_T
   787 01A96 1C23 C        	RETL	CH_Z
   788 01A97 1C0E C        	RETL	CH_E
   789 01A98 1C24 C        	RETL	CH_BLANK
   790 01A99 1C0F C        	RETL	CH_F
   791 01A9A 1C0E C        	RETL	CH_E
   792 01A9B 1C1B C        	RETL	CH_R
   793 01A9C 1C17 C        	RETL	CH_N
   794 01A9D 1C0A C        	RETL	CH_A
   795 01A9E 1C0B C        	RETL	CH_B
   796 01A9F 1C0F C        	RETL	CH_F
   797 01AA0 1C1B C        	RETL	CH_R
   798 01AA1 1CFF C        	RETL	CH_END
   799            C        
   800 01AA2      C        SHOW_SET_LONG_CODE_GE:
   801 01AA2 0020 C        	TBL
   802 01AA3 1C18 C        	RETL	CH_O
   803 01AA4 1C1B C        	RETL	CH_R
   804 01AA5 1C1D C        	RETL	CH_T
   805 01AA6 1C1C C        	RETL	CH_S
   806 01AA7 1C1F C        	RETL	CH_V
   807 01AA8 1C18 C        	RETL	CH_O
   808 01AA9 1C1B C        	RETL	CH_R
   809 01AAA 1C20 C        	RETL	CH_W
   810 01AAB 1C0A C        	RETL	CH_A
   811 01AAC 1C11 C        	RETL	CH_H
   812 01AAD 1C15 C        	RETL	CH_L
   813 01AAE 1CFF C        	RETL	CH_END
   814            C        
   815 01AAF      C        SHOW_SET_BOOK_GE:
   816 01AAF 0020 C        	TBL
   817 01AB0 1C1D C        	RETL	CH_T
   818 01AB1 1C0E C        	RETL	CH_E
   819 01AB2 1C15 C        	RETL	CH_L
   820 01AB3 1C0E C        	RETL	CH_E
   821 01AB4 1C0F C        	RETL	CH_F
   822 01AB5 1C18 C        	RETL	CH_O
   823 01AB6 1C17 C        	RETL	CH_N
   824 01AB7 1C0B C        	RETL	CH_B
   825 01AB8 1C1E C        	RETL	CH_U
   826 01AB9 1C0C C        	RETL	CH_C
   827 01ABA 1C11 C        	RETL	CH_H
   828 01ABB 1CFF C        	RETL	CH_END
   829            C        
   830 01ABC      C        SHOW_OGM_RECORDING_GE:
   831 01ABC 0020 C        	TBL
   832 01ABD 1C0A C        	RETL	CH_A
   833 01ABE 1C1E C        	RETL	CH_U
   834 01ABF 1C0F C        	RETL	CH_F
   835 01AC0 1C17 C        	RETL	CH_N
   836 01AC1 1C0E C        	RETL	CH_E
   837 01AC2 1C11 C        	RETL	CH_H
   838 01AC3 1C16 C        	RETL	CH_M
   839 01AC4 1C0E C        	RETL	CH_E
   840 01AC5 1C17 C        	RETL	CH_N
   841 01AC6 1CFF C        	RETL	CH_END
   842            C        
   843 01AC7      C        SHOW_OGM_PLAYBACK_GE:
   844 01AC7 0020 C        	TBL
   845 01AC8 1C0A C        	RETL	CH_A
   846 01AC9 1C0B C        	RETL	CH_B
   847 01ACA 1C1C C        	RETL	CH_S
   848 01ACB 1C19 C        	RETL	CH_P
   849 01ACC 1C12 C        	RETL	CH_I
   850 01ACD 1C0E C        	RETL	CH_E
   851 01ACE 1C15 C        	RETL	CH_L
   852 01ACF 1C0E C        	RETL	CH_E
   853 01AD0 1C17 C        	RETL	CH_N
   854 01AD1 1CFF C        	RETL	CH_END
   855            C        
   856 01AD2      C        SHOW_ERASED_GE:
   857 01AD2 0020 C        	TBL
   858 01AD3 1C10 C        	RETL	CH_G
   859 01AD4 1C0E C        	RETL	CH_E
   860 01AD5 1C15 C        	RETL	CH_L
   861 01AD6 1C18 C        	RETL	CH_O
   862 01AD7 1C0E C        	RETL	CH_E
   863 01AD8 1C1C C        	RETL	CH_S
   864 01AD9 1C0C C        	RETL	CH_C
   865 01ADA 1C11 C        	RETL	CH_H
   866 01ADB 1C1D C        	RETL	CH_T
   867 01ADC 1CFF C        	RETL	CH_END
   868            C        
   869 01ADD      C        SHOW_ERASED_ALL_GE:
   870 01ADD 0020 C        	TBL
   871 01ADE 1C0A C        	RETL	CH_A
   872 01ADF 1C15 C        	RETL	CH_L
   873 01AE0 1C15 C        	RETL	CH_L
   874 01AE1 1C0E C        	RETL	CH_E
   875 01AE2 1C1C C        	RETL	CH_S
   876 01AE3 1C24 C        	RETL	CH_BLANK
   877 01AE4 1C10 C        	RETL	CH_G
   878 01AE5 1C0E C        	RETL	CH_E
   879 01AE6 1C15 C        	RETL	CH_L
   880 01AE7 1C18 C        	RETL	CH_O
   881 01AE8 1C0E C        	RETL	CH_E
   882 01AE9 1C1C C        	RETL	CH_S
   883 01AEA 1C0C C        	RETL	CH_C
   884 01AEB 1C11 C        	RETL	CH_H
   885 01AEC 1C1D C        	RETL	CH_T
   886 01AED 1CFF C        	RETL	CH_END
   887            C        
   888 01AEE      C        SHOW_SUNDAY_GE:
   889 01AEE 0020 C        	TBL
   890 01AEF 1C1C C        	RETL	CH_S
   891 01AF0 1C18 C        	RETL	CH_O
   892 01AF1 1C17 C        	RETL	CH_N
   893 01AF2 1C17 C        	RETL	CH_N
   894 01AF3 1C1D C        	RETL	CH_T
   895 01AF4 1C0A C        	RETL	CH_A
   896 01AF5 1C10 C        	RETL	CH_G
   897 01AF6 1CFF C        	RETL	CH_END
   898            C        
   899            C        
   900            C        ORG	0X1B00
   901            C        
   902 01B00      C        SHOW_IN_REMOTE_GE:
   903 01B00 0020 C        	TBL
   904 01B01 1C0F C        	RETL	CH_F
   905 01B02 1C0E C        	RETL	CH_E
   906 01B03 1C1B C        	RETL	CH_R
   907 01B04 1C17 C        	RETL	CH_N
   908 01B05 1C0A C        	RETL	CH_A
   909 01B06 1C0B C        	RETL	CH_B
   910 01B07 1C0F C        	RETL	CH_F
   911 01B08 1C1B C        	RETL	CH_R
   912 01B09 1C0A C        	RETL	CH_A
   913 01B0A 1C10 C        	RETL	CH_G
   914 01B0B 1C0E C        	RETL	CH_E
   915 01B0C 1CFF C        	RETL	CH_END
   916            C        
   917 01B0D      C        SHOW_MONDAY_GE:
   918 01B0D 0020 C        	TBL
   919 01B0E 1C16 C        	RETL	CH_M
   920 01B0F 1C18 C        	RETL	CH_O
   921 01B10 1C17 C        	RETL	CH_N
   922 01B11 1C1D C        	RETL	CH_T
   923 01B12 1C0A C        	RETL	CH_A
   924 01B13 1C10 C        	RETL	CH_G
   925 01B14 1CFF C        	RETL	CH_END
   926            C        
   927 01B15      C        SHOW_TUESDAY_GE:
   928 01B15 0020 C        	TBL
   929 01B16 1C0D C        	RETL	CH_D
   930 01B17 1C12 C        	RETL	CH_I
   931 01B18 1C0E C        	RETL	CH_E
   932 01B19 1C17 C        	RETL	CH_N
   933 01B1A 1C1C C        	RETL	CH_S
   934 01B1B 1C1D C        	RETL	CH_T
   935 01B1C 1C0A C        	RETL	CH_A
   936 01B1D 1C10 C        	RETL	CH_G
   937 01B1E 1CFF C        	RETL	CH_END
   938            C        
   939 01B1F      C        SHOW_WEDNSDAY_GE:
   940 01B1F 0020 C        	TBL
   941 01B20 1C16 C        	RETL	CH_M
   942 01B21 1C12 C        	RETL	CH_I
   943 01B22 1C1D C        	RETL	CH_T
   944 01B23 1C1D C        	RETL	CH_T
   945 01B24 1C20 C        	RETL	CH_W
   946 01B25 1C18 C        	RETL	CH_O
   947 01B26 1C0C C        	RETL	CH_C
   948 01B27 1C11 C        	RETL	CH_H
   949 01B28 1CFF C        	RETL	CH_END
   950            C        
   951 01B29      C        SHOW_THURSDAY_GE:
   952 01B29 0020 C        	TBL
   953 01B2A 1C0D C        	RETL	CH_D
   954 01B2B 1C18 C        	RETL	CH_O
   955 01B2C 1C17 C        	RETL	CH_N
   956 01B2D 1C17 C        	RETL	CH_N
   957 01B2E 1C0E C        	RETL	CH_E
   958 01B2F 1C1B C        	RETL	CH_R
   959 01B30 1C1C C        	RETL	CH_S
   960 01B31 1C1D C        	RETL	CH_T
   961 01B32 1C0A C        	RETL	CH_A
   962 01B33 1C10 C        	RETL	CH_G
   963 01B34 1CFF C        	RETL	CH_END
   964            C        
   965 01B35      C        SHOW_MEMORY_FULL_GE:
   966 01B35 0020 C        	TBL
   967 01B36 1C1D C        	RETL	CH_T
   968 01B37 1C0E C        	RETL	CH_E
   969 01B38 1C15 C        	RETL	CH_L
   970 01B39 1C29 C        	RETL	CH_POINT
   971 01B3A 1C0B C        	RETL	CH_B
   972 01B3B 1C1E C        	RETL	CH_U
   973 01B3C 1C0C C        	RETL	CH_C
   974 01B3D 1C11 C        	RETL	CH_H
   975 01B3E 1C24 C        	RETL	CH_BLANK
   976 01B3F 1C1F C        	RETL	CH_V
   977 01B40 1C18 C        	RETL	CH_O
   978 01B41 1C15 C        	RETL	CH_L
   979 01B42 1C15 C        	RETL	CH_L
   980 01B43 1CFF C        	RETL	CH_END
   981            C        
   982 01B44      C        SHOW_NEW_GE:
   983 01B44 0020 C        	TBL
   984 01B45 1C17 C        	RETL	CH_N
   985 01B46 1C0E C        	RETL	CH_E
   986 01B47 1C1E C        	RETL	CH_U
   987 01B48 1CFF C        	RETL	CH_END
   988            C        
   989 01B49      C        SHOW_FRIDAY_GE:
   990 01B49 0020 C        	TBL
   991 01B4A 1C0F C        	RETL	CH_F
   992 01B4B 1C1B C        	RETL	CH_R
   993 01B4C 1C0E C        	RETL	CH_E
   994 01B4D 1C12 C        	RETL	CH_I
   995 01B4E 1C1D C        	RETL	CH_T
   996 01B4F 1C0A C        	RETL	CH_A
   997 01B50 1C10 C        	RETL	CH_G
   998 01B51 1CFF C        	RETL	CH_END
   999            C        
  1000 01B52      C        SHOW_SATURDAY_GE:
  1001 01B52 0020 C        	TBL
  1002 01B53 1C1C C        	RETL	CH_S
  1003 01B54 1C0A C        	RETL	CH_A
  1004 01B55 1C16 C        	RETL	CH_M
  1005 01B56 1C1C C        	RETL	CH_S
  1006 01B57 1C1D C        	RETL	CH_T
  1007 01B58 1C0A C        	RETL	CH_A
  1008 01B59 1C10 C        	RETL	CH_G
  1009 01B5A 1CFF C        	RETL	CH_END
  1010            C        
  1011 01B5B      C        SHOW_TOTAL_GE:
  1012 01B5B 0020 C        	TBL
  1013 01B5C 1C1D C        	RETL	CH_T
  1014 01B5D 1C18 C        	RETL	CH_O
  1015 01B5E 1C1D C        	RETL	CH_T
  1016 01B5F 1C0A C        	RETL	CH_A
  1017 01B60 1C15 C        	RETL	CH_L
  1018 01B61 1CFF C        	RETL	CH_END
  1019            C        	
  1020 01B62      C        SHOW_LANGUAGE_GE:
  1021 01B62 0020 C        	TBL
  1022 01B63 1C15 C        	RETL	CH_L
  1023 01B64 1C0A C        	RETL	CH_A
  1024 01B65 1C17 C        	RETL	CH_N
  1025 01B66 1C10 C        	RETL	CH_G
  1026 01B67 1C1E C        	RETL	CH_U
  1027 01B68 1C0A C        	RETL	CH_A
  1028 01B69 1C10 C        	RETL	CH_G
  1029 01B6A 1C0E C        	RETL	CH_E
  1030 01B6B 1CFF C        	RETL	CH_END
  1031            C        	
  1032 01B6C      C        SHOW_ENGLISH_GE:
  1033 01B6C 0020 C        	TBL
  1034 01B6D 1C0E C        	RETL	CH_E
  1035 01B6E 1C17 C        	RETL	CH_N
  1036 01B6F 1C10 C        	RETL	CH_G
  1037 01B70 1C15 C        	RETL	CH_L
  1038 01B71 1C12 C        	RETL	CH_I
  1039 01B72 1C1C C        	RETL	CH_S
  1040 01B73 1C0C C        	RETL	CH_C
  1041 01B74 1C11 C        	RETL	CH_H
  1042 01B75 1CFF C        	RETL	CH_END
  1043            C        
  1044 01B76      C        SHOW_EDIT_GE:
  1045 01B76 0020 C        	TBL
  1046 01B77 1C0B C        	RETL	CH_B
  1047 01B78 1C0E C        	RETL	CH_E
  1048 01B79 1C0A C        	RETL	CH_A
  1049 01B7A 1C1B C        	RETL	CH_R
  1050 01B7B 1C0B C        	RETL	CH_B
  1051 01B7C 1C29 C        	RETL	CH_POINT
  1052 01B7D 1CFF C        	RETL	CH_END
  1053            C        
  1054 01B7E      C        SHOW_SEARCH_GE:
  1055 01B7E 0020 C        	TBL
  1056 01B7F 1C1C C        	RETL	CH_S
  1057 01B80 1C1E C        	RETL	CH_U
  1058 01B81 1C0C C        	RETL	CH_C
  1059 01B82 1C11 C        	RETL	CH_H
  1060 01B83 1C0E C        	RETL	CH_E
  1061 01B84 1C17 C        	RETL	CH_N
  1062 01B85 1CFF C        	RETL	CH_END
  1063            C        
  1064 01B86      C        SHOW_COPIED_INTO_BOOK_EN:
  1065 01B86 0020 C        	TBL
  1066 01B87 1C0C C        	RETL	CH_C
  1067 01B88 1C18 C        	RETL	CH_O
  1068 01B89 1C19 C        	RETL	CH_P
  1069 01B8A 1C12 C        	RETL	CH_I
  1070 01B8B 1C0E C        	RETL	CH_E
  1071 01B8C 1C0D C        	RETL	CH_D
  1072 01B8D 1C24 C        	RETL	CH_BLANK
  1073 01B8E 1C12 C        	RETL	CH_I
  1074 01B8F 1C17 C        	RETL	CH_N
  1075 01B90 1C1D C        	RETL	CH_T
  1076 01B91 1C18 C        	RETL	CH_O
  1077 01B92 1C24 C        	RETL	CH_BLANK
  1078 01B93 1C0B C        	RETL	CH_B
  1079 01B94 1C18 C        	RETL	CH_O
  1080 01B95 1C18 C        	RETL	CH_O
  1081 01B96 1C14 C        	RETL	CH_K
  1082 01B97 1CFF C        	RETL	CH_END
  1083            C        
  1084 01B98      C        SHOW_COPIED_INTO_BOOK_GE:
  1085 01B98 0020 C        	TBL
  1086 01B99 1C12 C        	RETL	CH_I
  1087 01B9A 1C17 C        	RETL	CH_N
  1088 01B9B 1C1C C        	RETL	CH_S
  1089 01B9C 1C24 C        	RETL	CH_BLANK
  1090 01B9D 1C1D C        	RETL	CH_T
  1091 01B9E 1C0E C        	RETL	CH_E
  1092 01B9F 1C15 C        	RETL	CH_L
  1093 01BA0 1C29 C        	RETL	CH_POINT
  1094 01BA1 1C0B C        	RETL	CH_B
  1095 01BA2 1C24 C        	RETL	CH_BLANK
  1096 01BA3 1C14 C        	RETL	CH_K
  1097 01BA4 1C18 C        	RETL	CH_O
  1098 01BA5 1C19 C        	RETL	CH_P
  1099 01BA6 1C12 C        	RETL	CH_I
  1100 01BA7 1C29 C        	RETL	CH_POINT
  1101 01BA8 1CFF C        	RETL	CH_END
  1102            C        
  1103 01BA9      C        SHOW_OGM_EN:
  1104 01BA9      C        SHOW_OGM__EN:
  1105 01BA9 0020 C        	TBL
  1106 01BAA 1C18 C        	RETL	CH_O
  1107 01BAB 1C10 C        	RETL	CH_G
  1108 01BAC 1C16 C        	RETL	CH_M
  1109 01BAD 1CFF C        	RETL	CH_END
  1110            C        
  1111 01BAE      C        SHOW_OGM_GE:
  1112 01BAE 0020 C        	TBL
  1113 01BAF 1C0A C        	RETL	CH_A
  1114 01BB0 1C17 C        	RETL	CH_N
  1115 01BB1 1C1C C        	RETL	CH_S
  1116 01BB2 1C0A C        	RETL	CH_A
  1117 01BB3 1C10 C        	RETL	CH_G
  1118 01BB4 1C0E C        	RETL	CH_E
  1119 01BB5 1CFF C        	RETL	CH_END
  1120            C        
  1121 01BB6      C        SHOW_OGM__GE:
  1122 01BB6 0020 C        	TBL
  1123 01BB7 1C0A C        	RETL	CH_A
  1124 01BB8 1C17 C        	RETL	CH_N
  1125 01BB9 1C1C C        	RETL	CH_S
  1126 01BBA 1C28 C        	RETL	CH_COLON
  1127 01BBB 1CFF C        	RETL	CH_END
  1128            C        
  1129 01BBC      C        SHOW_END_OF_NAMES_BOOK_EN:
  1130 01BBC 0020 C        	TBL
  1131 01BBD 1C0E C        	RETL	CH_E
  1132 01BBE 1C17 C        	RETL	CH_N
  1133 01BBF 1C0D C        	RETL	CH_D
  1134 01BC0 1C24 C        	RETL	CH_BLANK
  1135 01BC1 1C18 C        	RETL	CH_O
  1136 01BC2 1C0F C        	RETL	CH_F
  1137 01BC3 1C24 C        	RETL	CH_BLANK
  1138            C        	;RETL	CH_N
  1139            C        	;RETL	CH_A
  1140            C        	;RETL	CH_M
  1141            C        	;RETL	CH_E
  1142            C        	;RETL	CH_S
  1143            C        	;RETL	CH_BLANK
  1144 01BC4 1C0B C        	RETL	CH_B
  1145 01BC5 1C18 C        	RETL	CH_O
  1146 01BC6 1C18 C        	RETL	CH_O
  1147 01BC7 1C14 C        	RETL	CH_K
  1148 01BC8 1C1C C        	RETL	CH_S
  1149 01BC9 1CFF C        	RETL	CH_END
  1150            C        
  1151 01BCA      C        SHOW_END_OF_NAMES_BOOK_GE:
  1152 01BCA 0020 C        	TBL
  1153 01BCB 1C1D C        	RETL	CH_T
  1154 01BCC 1C0E C        	RETL	CH_E
  1155 01BCD 1C15 C        	RETL	CH_L
  1156 01BCE 1C29 C        	RETL	CH_POINT
  1157 01BCF 1C0B C        	RETL	CH_B
  1158 01BD0 1C1E C        	RETL	CH_U
  1159 01BD1 1C0C C        	RETL	CH_C
  1160 01BD2 1C11 C        	RETL	CH_H
  1161 01BD3 1C24 C        	RETL	CH_BLANK
  1162 01BD4 1C0E C        	RETL	CH_E
  1163 01BD5 1C17 C        	RETL	CH_N
  1164 01BD6 1C0D C        	RETL	CH_D
  1165 01BD7 1C0E C        	RETL	CH_E
  1166 01BD8 1CFF C        	RETL	CH_END
  1167            C        
  1168            C        ORG	0X1C00
  1169            C        
   515                     
  0 Error(s), 0 Warning(s), 0 User Message(s)