     1                     
     2                     /***************************************
     3                                  项目主程序
     4                     功能：
     5                     	程序调用
     6                     	程序分配
     7                     
     8                     ***************************************/
     9                     
    10                     
    11                     include	<emc806.inc>	; emc806定义文件
     1            C        ; 寄存器定义
     2       0000 C        _IAR	==	0
     3       0001 C        _TCC	==	1
     4       0002 C        _PC	==	2
     5       0003 C        _STATUS	==	3
     6       0004 C        _RSR	==	4
     7       0005 C        _PPSR	==	5
     8       000A C        _FSR	==	10
     9       000F C        _ISR	==	15
    10            C        
    11       0000 C        _R0	==	0
    12       0001 C        _R1	==	1
    13       0002 C        _R2	==	2
    14       0003 C        _R3	==	3
    15       0004 C        _R4	==	4
    16       0005 C        _R5	==	5
    17       0006 C        _R6	==	6
    18       0007 C        _R7	==	7
    19       0008 C        _R8	==	8
    20       0009 C        _R9	==	9
    21       000A C        _RA	==	10
    22       000B C        _RB	==	11
    23       000C C        _RC	==	12
    24       000D C        _RD	==	13
    25       000E C        _RE	==	14
    26       000F C        _RF	==	15
    27            C        
    28       0005 C        _IOC5	==	5
    29       0006 C        _IOC6	==	6
    30       0007 C        _IOC7	==	7
    31       0008 C        _IOC8	==	8
    32       0009 C        _IOC9	==	9
    33       000A C        _IOCA	==	10
    34       000B C        _IOCB	==	11
    35       000C C        _IOCC	==	12
    36       000D C        _IOCD	==	13
    37       000E C        _IOCE	==	14
    38       000F C        _IOCF	==	15
    39            C        
    40       0000 C        R0	==	0
    41       0001 C        R1	==	1
    42       0002 C        R2	==	2
    43       0003 C        R3	==	3
    44       0004 C        R4	==	4
    45       0005 C        R5	==	5
    46       0006 C        R6	==	6
    47       0007 C        R7	==	7
    48       0008 C        R8	==	8
    49       0009 C        R9	==	9
    50       000A C        RA	==	10
    51       000B C        RB	==	11
    52       000C C        RC	==	12
    53       000D C        RD	==	13
    54       000E C        RE	==	14
    55       000F C        RF	==	15
    56            C        
    57            C        ; 位定义
    58       0000 C        C	==	0
    59       0001 C        DC	==	1
    60       0002 C        Z	==	2
    61       0003 C        P	==	3
    62       0004 C        T	==	4
    63       0000 C        PS0	==	0
    64       0001 C        PS1	==	1
    65       0002 C        PS2	==	2
    66            C        
    67            C        ; 常数定义
    68       0000 C        NULL	==	0
    69            C        
    70            C        
    71            C        ; 指令定义
    72            C        
    73            C        ; ---------------------------------------
    74            C        ; 寻址指令
    75            C        
    76            C        BANK	MACRO	NUM		; C2
    77            C        	IF	NUM == 0
    78            C        		BC	_RSR,6
    79            C        		BC	_RSR,7
    80            C        	ELSEIF	NUM == 1
    81            C        		BS	_RSR,6
    82            C        		BC	_RSR,7
    83            C        	ELSEIF	NUM == 2
    84            C        		BC	_RSR,6
    85            C        		BS	_RSR,7
    86            C        	ELSEIF	NUM == 3
    87            C        		BS	_RSR,6
    88            C        		BS	_RSR,7
    89            C        	ELSE
    90            C        		MESSAGE "WARRING: DON'T HAVE SPECIFY BANK!"
    91            C        	ENDIF
    92            C        	ENDM
    93            C        
    94            C        CIDBANK	MACRO	NUM
    95            C        	IF	NUM == 0
    96            C        		CRAM	_RB,0
    97            C        		CRAM	_RB,2
    98            C        	ELSEIF	NUM == 1
    99            C        		SRAM	_RB,0
   100            C        		CRAM	_RB,2
   101            C        	ELSEIF	NUM == 2
   102            C        		CRAM	_RB,0
   103            C        		SRAM	_RB,2
   104            C        	ELSEIF	NUM == 3
   105            C        		SRAM	_RB,0
   106            C        		SRAM	_RB,2
   107            C        	ELSE
   108            C        		MESSAGE "WARRING: DON'T HAVE SPECIFY BANK!"
   109            C        	ENDIF
   110            C        	ENDM
   111            C        
   112            C        PAGE	MACRO	#ADDR		; C1
   113            C        	IF	ADDR < 0X2000
   114            C        		PAGE	(ADDR/0X400)
   115            C        	ELSE
   116            C        		MESSAGE "OUT OF PROGRAM MEMORY !"
   117            C        	ENDIF
   118            C        	ENDM
   119            C        
   120            C        PAGEIO	MACRO	NUM
   121            C        	IF	NUM == 0
   122            C        		CRAM	_STATUS,7
   123            C        	ELSEIF	NUM == 1
   124            C        		SRAM	_STATUS,7
   125            C        	ELSE
   126            C        		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
   127            C        	ENDIF
   128            C        	ENDM
   129            C        
   130            C        CALL	MACRO	#ADDR		; C1/C3
   131            C        	IF	ADDR < 0X2000
   132            C        	IF	($/0X400) == (ADDR/0X400)
   133            C        		CALL	(ADDR%0X400)
   134            C        	ELSE
   135            C        		LCALL	ADDR
   136            C        	ENDIF
   137            C        	ELSE
   138            C        		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
   139            C        	ENDIF
   140            C        	ENDM
   141            C        
   142            C        LCALL	MACRO	ADDR		; C3
   143            C        	IF	ADDR < 0X2000
   144            C        		PAGE	#ADDR
   145            C        		CALL	(ADDR%0X400)
   146            C        		PAGE	#$
   147            C        	ELSE
   148            C        		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
   149            C        	ENDIF
   150            C        	ENDM
   151            C        
   152            C        JMP	MACRO	#ADDR		; C1/C2
   153            C        	IF	ADDR < 0X2000
   154            C        	IF	($/0X400) == (ADDR/0X400)
   155            C        		JMP	(ADDR%0X400)
   156            C        	ELSE
   157            C        		LJMP	ADDR
   158            C        	ENDIF
   159            C        	ELSE
   160            C        		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
   161            C        	ENDIF
   162            C        	ENDM
   163            C        
   164            C        LJMP	MACRO	ADDR		; C2
   165            C        	IF	ADDR < 0X2000
   166            C        		PAGE	#ADDR
   167            C        		JMP	(ADDR%0X400)
   168            C        	ELSE
   169            C        		MESSAGE	"WARRING: DON'T HAVE SPECIFY PAGE"
   170            C        	ENDIF
   171            C        	ENDM
   172            C        
   173            C        JPZ	MACRO	ADDR		; C2
   174            C        	JBC	_STATUS,Z
   175            C        	JMP	ADDR
   176            C        	ENDM
   177            C        
   178            C        JPNZ	MACRO	ADDR		; C2
   179            C        	JBS	_STATUS,Z
   180            C        	JMP	ADDR
   181            C        	ENDM
   182            C        
   183            C        JPC	MACRO	ADDR		; C2
   184            C        	JBC	_STATUS,C
   185            C        	JMP	ADDR
   186            C        	ENDM
   187            C        
   188            C        JPNC	MACRO	ADDR		; C2
   189            C        	JBS	_STATUS,C
   190            C        	JMP	ADDR
   191            C        	ENDM
   192            C        
   193            C        JPB	MACRO	REG,BIT,ADDR	; C2
   194            C        	JBC	REG,BIT
   195            C        	JMP	ADDR
   196            C        	ENDM
   197            C        
   198            C        JPNB	MACRO	REG,BIT,ADDR	; C2
   199            C        	JBS	REG,BIT
   200            C        	JMP	ADDR
   201            C        	ENDM
   202            C        
   203            C        JPOB	MACRO	IO_REG,BIT,ADDR	; C4
   204            C        	IOR	IO_REG
   205            C        	GA	BIT
   206            C        	JPNZ	ADDR
   207            C        	ENDM
   208            C        
   209            C        JPONB	MACRO	IO_REG,BIT,ADDR	; C4
   210            C        	IOR	IO_REG
   211            C        	GA	BIT
   212            C        	JPZ	ADDR
   213            C        	ENDM
   214            C        
   215            C        JPS	MACRO	REG1,REG2,ADDR	;	if REG1 < REG2, than jump to ADDR
   216            C        	SUBA	REG1,REG2
   217            C        	JPNC	ADDR
   218            C        	ENDM
   219            C        
   220            C        JPNS	MACRO	REG1,REG2,ADDR
   221            C        	SUBA	REG1,REG2
   222            C        	JPC	ADDR
   223            C        	ENDM
   224            C        
   225            C        
   226            C        ; --------------------------------------
   227            C        ; 位操作指令
   228            C        
   229            C        SA	MACRO	BIT		; C1
   230            C        	IF	BIT == 0
   231            C        		OR	A,@0X1
   232            C        	ELSEIF	BIT == 1
   233            C        		OR	A,@0X2
   234            C        	ELSEIF	BIT == 2
   235            C        		OR	A,@0X4
   236            C        	ELSEIF	BIT == 3
   237            C        		OR	A,@0X8
   238            C        	ELSEIF	BIT == 4
   239            C        		OR	A,@0X10
   240            C        	ELSEIF	BIT == 5
   241            C        		OR	A,@0X20
   242            C        	ELSEIF	BIT == 6
   243            C        		OR	A,@0X40
   244            C        	ELSEIF	BIT == 7
   245            C        		OR	A,@0X80
   246            C        	ENDIF
   247            C        	ENDM
   248            C        
   249            C        CA	MACRO	BIT		; C1
   250            C        	IF	BIT == 0
   251            C        		AND	A,@0XFE
   252            C        	ELSEIF	BIT == 1
   253            C        		AND	A,@0XFD
   254            C        	ELSEIF	BIT == 2
   255            C        		AND	A,@0XFB
   256            C        	ELSEIF	BIT == 3
   257            C        		AND	A,@0XF7
   258            C        	ELSEIF	BIT == 4
   259            C        		AND	A,@0XEF
   260            C        	ELSEIF	BIT == 5
   261            C        		AND	A,@0XDF
   262            C        	ELSEIF	BIT == 6
   263            C        		AND	A,@0XBF
   264            C        	ELSEIF	BIT == 7
   265            C        		AND	A,@0X7F
   266            C        	ENDIF
   267            C        	ENDM
   268            C        
   269            C        GA	MACRO	BIT		; C1
   270            C        	IF	BIT == 0
   271            C        		AND	A,@0X01
   272            C        	ELSEIF	BIT == 1
   273            C        		AND	A,@0X02
   274            C        	ELSEIF	BIT == 2
   275            C        		AND	A,@0X04
   276            C        	ELSEIF	BIT == 3
   277            C        		AND	A,@0X08
   278            C        	ELSEIF	BIT == 4
   279            C        		AND	A,@0X10
   280            C        	ELSEIF	BIT == 5
   281            C        		AND	A,@0X20
   282            C        	ELSEIF	BIT == 6
   283            C        		AND	A,@0X40
   284            C        	ELSEIF	BIT == 7
   285            C        		AND	A,@0X80
   286            C        	ENDIF
   287            C        	ENDM
   288            C        
   289            C        SRAM	MACRO	REG,BIT		; C1
   290            C        	;MOV	A,REG
   291            C        	;SA	BIT
   292            C        	;MOV	REG,A
   293            C        	BS	REG,BIT
   294            C        	ENDM
   295            C        
   296            C        CRAM	MACRO	REG,BIT		; C1
   297            C        	;MOV	A,REG
   298            C        	;CA	BIT
   299            C        	;MOV	REG,A
   300            C        	BC	REG,BIT
   301            C        	ENDM
   302            C        
   303            C        GRAM	MACRO	REG,BIT		; C2
   304            C        	MOV	A,REG
   305            C        	GA	BIT
   306            C        	ENDM
   307            C        
   308            C        BINVRAM	MACRO	REG,BIT		; C5
   309            C        	JPB	REG,BIT,$+3
   310            C        	SRAM	REG,BIT
   311            C        	JMP	$+2
   312            C        	CRAM	REG,BIT
   313            C        	ENDM
   314            C        
   315            C        SIO	MACRO	IO_REG,BIT	; C3
   316            C        	IOR	IO_REG
   317            C        	SA	BIT
   318            C        	IOW	IO_REG
   319            C        	ENDM
   320            C        
   321            C        CIO	MACRO	IO_REG,BIT	; C3
   322            C        	IOR	IO_REG
   323            C        	CA	BIT
   324            C        	IOW	IO_REG
   325            C        	ENDM
   326            C        
   327            C        GIO	MACRO	IO_REG,BIT	; C2
   328            C        	IOR	IO_REG
   329            C        	GA	BIT
   330            C        	ENDM
   331            C        
   332            C        BINVIO	MACRO	IO_REG,BIT
   333            C        	GIO	IO_REG,BIT
   334            C        	JPNZ	$+5
   335            C        	SIO	IO_REG,BIT
   336            C        	JMP	$+4
   337            C        	CIO	IO_REG,BIT
   338            C        	ENDM
   339            C        
   340            C        CLRC	MACRO
   341            C        	BC	_STATUS,C
   342            C        	ENDM
   343            C        
   344            C        SETC	MACRO
   345            C        	BS	_STATUS,C
   346            C        	ENDM
   347            C        
   348            C        CLRZ	MACRO
   349            C        	BC	_STATUS,Z
   350            C        	ENDM
   351            C        
   352            C        SETZ	MACRO
   353            C        	BS	_STATUS,Z
   354            C        	ENDM
   355            C        
   356            C        ; --------------------------------------
   357            C        ; 数据移动指令
   358            C        
   359            C        MOV	MACRO	REG1,@VALUE	; C2
   360            C        	MOV	A,@VALUE
   361            C        	MOV	REG1,A
   362            C        	ENDM
   363            C        
   364            C        MOV	MACRO	REG1,REG2	; C2
   365            C        	IF	REG1 != REG2
   366            C        	MOV	A,REG2
   367            C         	MOV	REG1,A
   368            C        	ENDIF
   369            C        	ENDM
   370            C        
   371            C        IOR	MACRO	REG,IO_REG	; C2
   372            C        	IOR	IO_REG
   373            C        	MOV	REG,A
   374            C        	ENDM
   375            C        
   376            C        IOW	MACRO	IO_REG,@VALUE	; C2
   377            C        	MOV	A,@VALUE
   378            C        	IOW	IO_REG
   379            C        	ENDM
   380            C        
   381            C        IOW	MACRO	IO_REG,REG	; C2
   382            C        	MOV	A,REG
   383            C        	IOW	IO_REG
   384            C        	ENDM
   385            C        	
   386            C        
   387            C        ; --------------------------------------
   388            C        ; 算术运算指令
   389            C        
   390            C        DECZ	MACRO	REG		; 自减至0停止
   391            C        	MOV	A,REG
   392            C        	JPZ	$+2
   393            C        	DEC	REG
   394            C        	ENDM
   395            C        
   396            C        ADD	MACRO	REG1,@VALUE	; C2
   397            C        	MOV	A,@VALUE
   398            C        	ADD	REG1,A
   399            C        	ENDM
   400            C        
   401            C        ADD	MACRO	REG1,REG2	; C2
   402            C        	MOV	A,REG2
   403            C        	ADD	REG1,A
   404            C        	ENDM
   405            C        
   406            C        ADDA	MACRO	REG1,@VALUE	; C2
   407            C        	MOV	A,@VALUE
   408            C        	ADD	A,REG1
   409            C        	ENDM
   410            C        
   411            C        ADDA	MACRO	REG1,REG2	; C2
   412            C        	MOV	A,REG2
   413            C        	ADD	A,REG1
   414            C        	ENDM
   415            C        
   416            C        SUB	MACRO	REG1,@VALUE	; C2
   417            C        	MOV	A,@VALUE
   418            C        	SUB	REG1,A
   419            C        	ENDM
   420            C        
   421            C        SUB	MACRO	REG1,REG2	; C2
   422            C        	MOV	A,REG2
   423            C        	SUB	REG1,A
   424            C        	ENDM
   425            C        
   426            C        SUBA	MACRO	REG1,@VALUE	; C2
   427            C        	MOV	A,@VALUE
   428            C        	SUB	A,REG1
   429            C        	ENDM
   430            C        
   431            C        SUBA	MACRO	@VALUE,REG1	; C2
   432            C        	MOV	A,REG1
   433            C        	SUB	A,@VALUE
   434            C        	ENDM
   435            C        
   436            C        SUBA	MACRO	REG1,REG2	; C2
   437            C        	MOV	A,REG2
   438            C        	SUB	A,REG1
   439            C        	ENDM
   440            C        
   441            C        FADD	MACRO	A,REG		; C3
   442            C        	IF	REG < 0x40
   443            C        		BANK	0
   444            C        		ADD	A,REG
   445            C        	ELSEIF	REG < 0X60
   446            C        		BANK	1
   447            C        		ADD	A,REG - 0X20
   448            C        	ELSEIF	REG < 0X80
   449            C        		BANK	2
   450            C        		ADD	A,REG - 0X40
   451            C        	ELSEIF	REG < 0XA0
   452            C        		BANK	3
   453            C        		ADD	A,REG - 0X60
   454            C        	ELSE
   455            C        		MESSAGE "WARRING: OUT OF BANK !"
   456            C        	ENDIF
   457            C        	ENDM
   458            C        
   459            C        FADD	MACRO	REG,A		;C3
   460            C        	IF	REG < 0x40
   461            C        		BANK	0
   462            C        		ADD	REG,A
   463            C        	ELSEIF	REG < 0X60
   464            C        		BANK	1
   465            C        		ADD	REG - 0X20,A
   466            C        	ELSEIF	REG < 0X80
   467            C        		BANK	2
   468            C        		ADD	REG - 0X40,A
   469            C        	ELSEIF	REG < 0XA0
   470            C        		BANK	3
   471            C        		ADD	REG - 0X60,A
   472            C        	ELSE
   473            C        		MESSAGE "WARRING: OUT OF BANK !"
   474            C        	ENDIF
   475            C        	ENDM
   476            C        
   477            C        FADD	MACRO	REG1,@VALUE	; C4
   478            C        	IF	REG1 < 0x40
   479            C        		BANK	0
   480            C        		MOV	A,@VALUE
   481            C        		ADD	REG1,A
   482            C        	ELSEIF	REG1 < 0X60
   483            C        		BANK	1
   484            C        		MOV	A,@VALUE
   485            C        		ADD	REG1 - 0X20,A
   486            C        	ELSEIF	REG1 < 0X80
   487            C        		BANK	2
   488            C        		MOV	A,@VALUE
   489            C        		ADD	REG1 - 0X40,A
   490            C        	ELSEIF	REG1 < 0XA0
   491            C        		BANK	3
   492            C        		MOV	A,@VALUE
   493            C        		ADD	REG1 - 0X60,A
   494            C        	ELSE
   495            C        		MESSAGE "WARRING: OUT OF BANK !"
   496            C        	ENDIF
   497            C        	ENDM
   498            C        
   499            C        FADD	MACRO	REG1,REG2	; C6
   500            C        	IF	REG2 < 0x40
   501            C        		BANK	0
   502            C        		MOV	A, REG2
   503            C        		FADD	REG1,A
   504            C        	ELSEIF	REG2 < 0X60
   505            C        		BANK	1
   506            C        		MOV	A, REG2 - 0X20
   507            C        		FADD 	REG1,A
   508            C        	ELSEIF	REG2 < 0X80
   509            C        		BANK	2
   510            C        		MOV	A, REG2 - 0X40
   511            C        		FADD	REG1,A
   512            C        	ELSEIF	REG2 < 0XA0
   513            C        		BANK	3
   514            C        		MOV	A, REG2 - 0X60
   515            C        		FADD	REG1,A
   516            C        	ELSE
   517            C        		MESSAGE "WARRING: OUT OF BANK !"
   518            C        	ENDIF
   519            C        	ENDM
   520            C        
   521            C        FADDA	MACRO	REG1,@VALUE	; C4
   522            C        	IF	REG1 < 0x40
   523            C        		BANK	0
   524            C        		MOV	A,@VALUE
   525            C        		ADD	A,REG1
   526            C        	ELSEIF	REG1 < 0X60
   527            C        		BANK	1
   528            C        		MOV	A,@VALUE
   529            C        		ADD	A,REG1 - 0X20
   530            C        	ELSEIF	REG1 < 0X80
   531            C        		BANK	2
   532            C        		MOV	A,@VALUE
   533            C        		ADD	A,REG1 - 0X40
   534            C        	ELSEIF	REG1 < 0XA0
   535            C        		BANK	3
   536            C        		MOV	A,@VALUE
   537            C        		ADD	A,REG1 - 0X60
   538            C        	ELSE
   539            C        		MESSAGE "WARRING: OUT OF BANK !"
   540            C        	ENDIF
   541            C        	ENDM
   542            C        
   543            C        FADDA	MACRO	REG1,REG2	; C6
   544            C        	IF	REG2 < 0x40
   545            C        		BANK	0
   546            C        		MOV	A, REG2
   547            C        		FADD	A,REG1
   548            C        	ELSEIF	REG2 < 0X60
   549            C        		BANK	1
   550            C        		MOV	A, REG2 - 0X20
   551            C        		FADD 	A,REG1
   552            C        	ELSEIF	REG2 < 0X80
   553            C        		BANK	2
   554            C        		MOV	A, REG2 - 0X40
   555            C        		FADD	A,REG1
   556            C        	ELSEIF	REG2 < 0XA0
   557            C        		BANK	3
   558            C        		MOV	A, REG2 - 0X60
   559            C        		FADD	A,REG1
   560            C        	ELSE
   561            C        		MESSAGE "WARRING: OUT OF BANK !"
   562            C        	ENDIF
   563            C        	ENDM
   564            C        
   565            C        FSUB	MACRO	A,REG		; C3
   566            C        	IF	REG < 0x40
   567            C        		BANK	0
   568            C        		SUB	A,REG
   569            C        	ELSEIF	REG < 0X60
   570            C        		BANK	1
   571            C        		SUB	A,REG - 0X20
   572            C        	ELSEIF	REG < 0X80
   573            C        		BANK	2
   574            C        		SUB	A,REG - 0X40
   575            C        	ELSEIF	REG < 0XA0
   576            C        		BANK	3
   577            C        		SUB	A,REG - 0X60
   578            C        	ELSE
   579            C        		MESSAGE "WARRING: OUT OF BANK !"
   580            C        	ENDIF
   581            C        	ENDM
   582            C        
   583            C        FSUB	MACRO	REG,A		;C3
   584            C        	IF	REG < 0x40
   585            C        		BANK	0
   586            C        		SUB	REG,A
   587            C        	ELSEIF	REG < 0X60
   588            C        		BANK	1
   589            C        		SUB	REG - 0X20,A
   590            C        	ELSEIF	REG < 0X80
   591            C        		BANK	2
   592            C        		SUB	REG - 0X40,A
   593            C        	ELSEIF	REG < 0XA0
   594            C        		BANK	3
   595            C        		SUB	REG - 0X60,A
   596            C        	ELSE
   597            C        		MESSAGE "WARRING: OUT OF BANK !"
   598            C        	ENDIF
   599            C        	ENDM
   600            C        
   601            C        FSUB	MACRO	REG1,@VALUE	; C4
   602            C        	IF	REG1 < 0x40
   603            C        		BANK	0
   604            C        		MOV	A,@VALUE
   605            C        		SUB	REG1,A
   606            C        	ELSEIF	REG1 < 0X60
   607            C        		BANK	1
   608            C        		MOV	A,@VALUE
   609            C        		SUB	REG1 - 0X20,A
   610            C        	ELSEIF	REG1 < 0X80
   611            C        		BANK	2
   612            C        		MOV	A,@VALUE
   613            C        		SUB	REG1 - 0X40,A
   614            C        	ELSEIF	REG1 < 0XA0
   615            C        		BANK	3
   616            C        		MOV	A,@VALUE
   617            C        		SUB	REG1 - 0X60,A
   618            C        	ELSE
   619            C        		MESSAGE "WARRING: OUT OF BANK !"
   620            C        	ENDIF
   621            C        	ENDM
   622            C        
   623            C        FSUB	MACRO	REG1,REG2	; C6
   624            C        	IF	REG2 < 0x40
   625            C        		BANK	0
   626            C        		MOV	A, REG2
   627            C        		FSUB	REG1,A
   628            C        	ELSEIF	REG2 < 0X60
   629            C        		BANK	1
   630            C        		MOV	A, REG2 - 0X20
   631            C        		FSUB 	REG1,A
   632            C        	ELSEIF	REG2 < 0X80
   633            C        		BANK	2
   634            C        		MOV	A, REG2 - 0X40
   635            C        		FSUB	REG1,A
   636            C        	ELSEIF	REG2 < 0XA0
   637            C        		BANK	3
   638            C        		MOV	A, REG2 - 0X60
   639            C        		FSUB	REG1,A
   640            C        	ELSE
   641            C        		MESSAGE "WARRING: OUT OF BANK !"
   642            C        	ENDIF
   643            C        	ENDM
   644            C        
   645            C        FSUBA	MACRO	REG1,@VALUE	; C4
   646            C        	IF	REG1 < 0x40
   647            C        		BANK	0
   648            C        		MOV	A,@VALUE
   649            C        		SUB	A,REG1
   650            C        	ELSEIF	REG1 < 0X60
   651            C        		BANK	1
   652            C        		MOV	A,@VALUE
   653            C        		SUB	A,REG1 - 0X20
   654            C        	ELSEIF	REG1 < 0X80
   655            C        		BANK	2
   656            C        		MOV	A,@VALUE
   657            C        		SUB	A,REG1 - 0X40
   658            C        	ELSEIF	REG1 < 0XA0
   659            C        		BANK	3
   660            C        		MOV	A,@VALUE
   661            C        		SUB	A,REG1 - 0X60
   662            C        	ELSE
   663            C        		MESSAGE "WARRING: OUT OF BANK !"
   664            C        	ENDIF
   665            C        	ENDM
   666            C        
   667            C        FSUBA	MACRO	REG1,REG2	; C6
   668            C        	IF	REG2 < 0x40
   669            C        		BANK	0
   670            C        		MOV	A, REG2
   671            C        		FSUB	A,REG1
   672            C        	ELSEIF	REG2 < 0X60
   673            C        		BANK	1
   674            C        		MOV	A, REG2 - 0X20
   675            C        		FSUB 	A,REG1
   676            C        	ELSEIF	REG2 < 0X80
   677            C        		BANK	2
   678            C        		MOV	A, REG2 - 0X40
   679            C        		FSUB	A,REG1
   680            C        	ELSEIF	REG2 < 0XA0
   681            C        		BANK	3
   682            C        		MOV	A, REG2 - 0X60
   683            C        		FSUB	A,REG1
   684            C        	ELSE
   685            C        		MESSAGE "WARRING: OUT OF BANK !"
   686            C        	ENDIF
   687            C        	ENDM
   688            C        
   689            C        ; --------------------------------------
   690            C        ; 逻辑运算指令
   691            C        
   692            C        AND	MACRO	REG1,@VALUE	; C2
   693            C        	MOV	A,@VALUE
   694            C        	AND	REG1,A
   695            C        	ENDM
   696            C        
   697            C        AND	MACRO	REG1,REG2	; C2
   698            C        	MOV	A,REG2
   699            C        	AND	REG1,A
   700            C        	ENDM
   701            C        
   702            C        ANDA	MACRO	REG1,@VALUE	; C2
   703            C        	MOV	A,@VALUE
   704            C        	AND	A,REG1
   705            C        	ENDM
   706            C        
   707            C        ANDA	MACRO	REG1,REG2	; C2
   708            C        	MOV	A,REG2
   709            C        	AND	A,REG1
   710            C        	ENDM
   711            C        
   712            C        OR	MACRO	REG1,@VALUE	; C2
   713            C        	MOV	A,@VALUE
   714            C        	OR	REG1,A
   715            C        	ENDM
   716            C        
   717            C        OR	MACRO	REG1,REG2	; C2
   718            C        	MOV	A,REG2
   719            C        	OR	REG1,A
   720            C        	ENDM
   721            C        
   722            C        ORA	MACRO	REG1,@VALUE	; C2
   723            C        	MOV	A,@VALUE
   724            C        	OR	A,REG1
   725            C        	ENDM
   726            C        
   727            C        ORA	MACRO	REG1,REG2	; C2
   728            C        	MOV	A,REG2
   729            C        	OR	A,REG1
   730            C        	ENDM
   731            C        
   732            C        XOR	MACRO	REG1,@VALUE	; C2
   733            C        	MOV	A,@VALUE
   734            C        	XOR	REG1,A
   735            C        	ENDM
   736            C        
   737            C        XOR	MACRO	REG1,REG2	; C2
   738            C        	MOV	A,REG2
   739            C        	XOR	REG1,A
   740            C        	ENDM
   741            C        
   742            C        XORA	MACRO	REG1,@VALUE	; C2
   743            C        	MOV	A,@VALUE
   744            C        	XOR	A,REG1
   745            C        	ENDM
   746            C        
   747            C        XORA	MACRO	REG1,REG2	; C2
   748            C        	MOV	A,REG2
   749            C        	XOR	A,REG1
   750            C        	ENDM
   751            C        
   752            C        FAND	MACRO	A,REG		; C3
   753            C        	IF	REG < 0x40
   754            C        		BANK	0
   755            C        		AND	A,REG
   756            C        	ELSEIF	REG < 0X60
   757            C        		BANK	1
   758            C        		AND	A,REG - 0X20
   759            C        	ELSEIF	REG < 0X80
   760            C        		BANK	2
   761            C        		AND	A,REG - 0X40
   762            C        	ELSEIF	REG < 0XA0
   763            C        		BANK	3
   764            C        		AND	A,REG - 0X60
   765            C        	ELSE
   766            C        		MESSAGE "WARRING: OUT OF BANK !"
   767            C        	ENDIF
   768            C        	ENDM
   769            C        
   770            C        FAND	MACRO	REG,A		;C3
   771            C        	IF	REG < 0x40
   772            C        		BANK	0
   773            C        		AND	REG,A
   774            C        	ELSEIF	REG < 0X60
   775            C        		BANK	1
   776            C        		AND	REG - 0X20,A
   777            C        	ELSEIF	REG < 0X80
   778            C        		BANK	2
   779            C        		AND	REG - 0X40,A
   780            C        	ELSEIF	REG < 0XA0
   781            C        		BANK	3
   782            C        		AND	REG - 0X60,A
   783            C        	ELSE
   784            C        		MESSAGE "WARRING: OUT OF BANK !"
   785            C        	ENDIF
   786            C        	ENDM
   787            C        
   788            C        FAND	MACRO	REG1,@VALUE	; C4
   789            C        	IF	REG1 < 0x40
   790            C        		BANK	0
   791            C        		MOV	A,@VALUE
   792            C        		AND	REG1,A
   793            C        	ELSEIF	REG1 < 0X60
   794            C        		BANK	1
   795            C        		MOV	A,@VALUE
   796            C        		AND	REG1 - 0X20,A
   797            C        	ELSEIF	REG1 < 0X80
   798            C        		BANK	2
   799            C        		MOV	A,@VALUE
   800            C        		AND	REG1 - 0X40,A
   801            C        	ELSEIF	REG1 < 0XA0
   802            C        		BANK	3
   803            C        		MOV	A,@VALUE
   804            C        		AND	REG1 - 0X60,A
   805            C        	ELSE
   806            C        		MESSAGE "WARRING: OUT OF BANK !"
   807            C        	ENDIF
   808            C        	ENDM
   809            C        
   810            C        FAND	MACRO	REG1,REG2	; C6
   811            C        	IF	REG2 < 0x40
   812            C        		BANK	0
   813            C        		MOV	A, REG2
   814            C        		FAND	REG1,A
   815            C        	ELSEIF	REG2 < 0X60
   816            C        		BANK	1
   817            C        		MOV	A, REG2 - 0X20
   818            C        		FAND 	REG1,A
   819            C        	ELSEIF	REG2 < 0X80
   820            C        		BANK	2
   821            C        		MOV	A, REG2 - 0X40
   822            C        		FAND	REG1,A
   823            C        	ELSEIF	REG2 < 0XA0
   824            C        		BANK	3
   825            C        		MOV	A, REG2 - 0X60
   826            C        		FAND	REG1,A
   827            C        	ELSE
   828            C        		MESSAGE "WARRING: OUT OF BANK !"
   829            C        	ENDIF
   830            C        	ENDM
   831            C        
   832            C        FANDA	MACRO	REG1,@VALUE	; C4
   833            C        	IF	REG1 < 0x40
   834            C        		BANK	0
   835            C        		MOV	A,@VALUE
   836            C        		AND	A,REG1
   837            C        	ELSEIF	REG1 < 0X60
   838            C        		BANK	1
   839            C        		MOV	A,@VALUE
   840            C        		AND	A,REG1 - 0X20
   841            C        	ELSEIF	REG1 < 0X80
   842            C        		BANK	2
   843            C        		MOV	A,@VALUE
   844            C        		AND	A,REG1 - 0X40
   845            C        	ELSEIF	REG1 < 0XA0
   846            C        		BANK	3
   847            C        		MOV	A,@VALUE
   848            C        		AND	A,REG1 - 0X60
   849            C        	ELSE
   850            C        		MESSAGE "WARRING: OUT OF BANK !"
   851            C        	ENDIF
   852            C        	ENDM
   853            C        
   854            C        FANDA	MACRO	REG1,REG2	; C6
   855            C        	IF	REG2 < 0x40
   856            C        		BANK	0
   857            C        		MOV	A, REG2
   858            C        		FAND	A,REG1
   859            C        	ELSEIF	REG2 < 0X60
   860            C        		BANK	1
   861            C        		MOV	A, REG2 - 0X20
   862            C        		FAND 	A,REG1
   863            C        	ELSEIF	REG2 < 0X80
   864            C        		BANK	2
   865            C        		MOV	A, REG2 - 0X40
   866            C        		FAND	A,REG1
   867            C        	ELSEIF	REG2 < 0XA0
   868            C        		BANK	3
   869            C        		MOV	A, REG2 - 0X60
   870            C        		FAND	A,REG1
   871            C        	ELSE
   872            C        		MESSAGE "WARRING: OUT OF BANK !"
   873            C        	ENDIF
   874            C        	ENDM
   875            C        
   876            C        FOR	MACRO	A,REG		; C3
   877            C        	IF	REG < 0x40
   878            C        		BANK	0
   879            C        		OR	A,REG
   880            C        	ELSEIF	REG < 0X60
   881            C        		BANK	1
   882            C        		OR	A,REG - 0X20
   883            C        	ELSEIF	REG < 0X80
   884            C        		BANK	2
   885            C        		OR	A,REG - 0X40
   886            C        	ELSEIF	REG < 0XA0
   887            C        		BANK	3
   888            C        		OR	A,REG - 0X60
   889            C        	ELSE
   890            C        		MESSAGE "WARRING: OUT OF BANK !"
   891            C        	ENDIF
   892            C        	ENDM
   893            C        
   894            C        FOR	MACRO	REG,A		;C3
   895            C        	IF	REG < 0x40
   896            C        		BANK	0
   897            C        		OR	REG,A
   898            C        	ELSEIF	REG < 0X60
   899            C        		BANK	1
   900            C        		OR	REG - 0X20,A
   901            C        	ELSEIF	REG < 0X80
   902            C        		BANK	2
   903            C        		OR	REG - 0X40,A
   904            C        	ELSEIF	REG < 0XA0
   905            C        		BANK	3
   906            C        		OR	REG - 0X60,A
   907            C        	ELSE
   908            C        		MESSAGE "WARRING: OUT OF BANK !"
   909            C        	ENDIF
   910            C        	ENDM
   911            C        
   912            C        FOR	MACRO	REG1,@VALUE	; C4
   913            C        	IF	REG1 < 0x40
   914            C        		BANK	0
   915            C        		MOV	A,@VALUE
   916            C        		OR	REG1,A
   917            C        	ELSEIF	REG1 < 0X60
   918            C        		BANK	1
   919            C        		MOV	A,@VALUE
   920            C        		OR	REG1 - 0X20,A
   921            C        	ELSEIF	REG1 < 0X80
   922            C        		BANK	2
   923            C        		MOV	A,@VALUE
   924            C        		OR	REG1 - 0X40,A
   925            C        	ELSEIF	REG1 < 0XA0
   926            C        		BANK	3
   927            C        		MOV	A,@VALUE
   928            C        		OR	REG1 - 0X60,A
   929            C        	ELSE
   930            C        		MESSAGE "WARRING: OUT OF BANK !"
   931            C        	ENDIF
   932            C        	ENDM
   933            C        
   934            C        FOR	MACRO	REG1,REG2	; C6
   935            C        	IF	REG2 < 0x40
   936            C        		BANK	0
   937            C        		MOV	A, REG2
   938            C        		FOR	REG1,A
   939            C        	ELSEIF	REG2 < 0X60
   940            C        		BANK	1
   941            C        		MOV	A, REG2 - 0X20
   942            C        		FOR 	REG1,A
   943            C        	ELSEIF	REG2 < 0X80
   944            C        		BANK	2
   945            C        		MOV	A, REG2 - 0X40
   946            C        		FOR	REG1,A
   947            C        	ELSEIF	REG2 < 0XA0
   948            C        		BANK	3
   949            C        		MOV	A, REG2 - 0X60
   950            C        		FOR	REG1,A
   951            C        	ELSE
   952            C        		MESSAGE "WARRING: OUT OF BANK !"
   953            C        	ENDIF
   954            C        	ENDM
   955            C        
   956            C        FORA	MACRO	REG1,@VALUE	; C4
   957            C        	IF	REG1 < 0x40
   958            C        		BANK	0
   959            C        		MOV	A,@VALUE
   960            C        		OR	A,REG1
   961            C        	ELSEIF	REG1 < 0X60
   962            C        		BANK	1
   963            C        		MOV	A,@VALUE
   964            C        		OR	A,REG1 - 0X20
   965            C        	ELSEIF	REG1 < 0X80
   966            C        		BANK	2
   967            C        		MOV	A,@VALUE
   968            C        		OR	A,REG1 - 0X40
   969            C        	ELSEIF	REG1 < 0XA0
   970            C        		BANK	3
   971            C        		MOV	A,@VALUE
   972            C        		OR	A,REG1 - 0X60
   973            C        	ELSE
   974            C        		MESSAGE "WARRING: OUT OF BANK !"
   975            C        	ENDIF
   976            C        	ENDM
   977            C        
   978            C        FORA	MACRO	REG1,REG2	; C6
   979            C        	IF	REG2 < 0x40
   980            C        		BANK	0
   981            C        		MOV	A, REG2
   982            C        		FOR	A,REG1
   983            C        	ELSEIF	REG2 < 0X60
   984            C        		BANK	1
   985            C        		MOV	A, REG2 - 0X20
   986            C        		FOR 	A,REG1
   987            C        	ELSEIF	REG2 < 0X80
   988            C        		BANK	2
   989            C        		MOV	A, REG2 - 0X40
   990            C        		FOR	A,REG1
   991            C        	ELSEIF	REG2 < 0XA0
   992            C        		BANK	3
   993            C        		MOV	A, REG2 - 0X60
   994            C        		FOR	A,REG1
   995            C        	ELSE
   996            C        		MESSAGE "WARRING: OUT OF BANK !"
   997            C        	ENDIF
   998            C        	ENDM
   999            C        
  1000            C        FXOR	MACRO	A,REG		; C3
  1001            C        	IF	REG < 0x40
  1002            C        		BANK	0
  1003            C        		XOR	A,REG
  1004            C        	ELSEIF	REG < 0X60
  1005            C        		BANK	1
  1006            C        		XOR	A,REG - 0X20
  1007            C        	ELSEIF	REG < 0X80
  1008            C        		BANK	2
  1009            C        		XOR	A,REG - 0X40
  1010            C        	ELSEIF	REG < 0XA0
  1011            C        		BANK	3
  1012            C        		XOR	A,REG - 0X60
  1013            C        	ELSE
  1014            C        		MESSAGE "WARRING: OUT OF BANK !"
  1015            C        	ENDIF
  1016            C        	ENDM
  1017            C        
  1018            C        FXOR	MACRO	REG,A		;C3
  1019            C        	IF	REG < 0x40
  1020            C        		BANK	0
  1021            C        		XOR	REG,A
  1022            C        	ELSEIF	REG < 0X60
  1023            C        		BANK	1
  1024            C        		XOR	REG - 0X20,A
  1025            C        	ELSEIF	REG < 0X80
  1026            C        		BANK	2
  1027            C        		XOR	REG - 0X40,A
  1028            C        	ELSEIF	REG < 0XA0
  1029            C        		BANK	3
  1030            C        		XOR	REG - 0X60,A
  1031            C        	ELSE
  1032            C        		MESSAGE "WARRING: OUT OF BANK !"
  1033            C        	ENDIF
  1034            C        	ENDM
  1035            C        
  1036            C        FXOR	MACRO	REG1,@VALUE	; C4
  1037            C        	IF	REG1 < 0x40
  1038            C        		BANK	0
  1039            C        		MOV	A,@VALUE
  1040            C        		XOR	REG1,A
  1041            C        	ELSEIF	REG1 < 0X60
  1042            C        		BANK	1
  1043            C        		MOV	A,@VALUE
  1044            C        		XOR	REG1 - 0X20,A
  1045            C        	ELSEIF	REG1 < 0X80
  1046            C        		BANK	2
  1047            C        		MOV	A,@VALUE
  1048            C        		XOR	REG1 - 0X40,A
  1049            C        	ELSEIF	REG1 < 0XA0
  1050            C        		BANK	3
  1051            C        		MOV	A,@VALUE
  1052            C        		XOR	REG1 - 0X60,A
  1053            C        	ELSE
  1054            C        		MESSAGE "WARRING: OUT OF BANK !"
  1055            C        	ENDIF
  1056            C        	ENDM
  1057            C        
  1058            C        FXOR	MACRO	REG1,REG2	; C6
  1059            C        	IF	REG2 < 0x40
  1060            C        		BANK	0
  1061            C        		MOV	A, REG2
  1062            C        		FXOR	REG1,A
  1063            C        	ELSEIF	REG2 < 0X60
  1064            C        		BANK	1
  1065            C        		MOV	A, REG2 - 0X20
  1066            C        		FXOR 	REG1,A
  1067            C        	ELSEIF	REG2 < 0X80
  1068            C        		BANK	2
  1069            C        		MOV	A, REG2 - 0X40
  1070            C        		FXOR	REG1,A
  1071            C        	ELSEIF	REG2 < 0XA0
  1072            C        		BANK	3
  1073            C        		MOV	A, REG2 - 0X60
  1074            C        		FXOR	REG1,A
  1075            C        	ELSE
  1076            C        		MESSAGE "WARRING: OUT OF BANK !"
  1077            C        	ENDIF
  1078            C        	ENDM
  1079            C        
  1080            C        FXORA	MACRO	REG1,@VALUE	; C4
  1081            C        	IF	REG1 < 0x40
  1082            C        		BANK	0
  1083            C        		MOV	A,@VALUE
  1084            C        		XOR	A,REG1
  1085            C        	ELSEIF	REG1 < 0X60
  1086            C        		BANK	1
  1087            C        		MOV	A,@VALUE
  1088            C        		XOR	A,REG1 - 0X20
  1089            C        	ELSEIF	REG1 < 0X80
  1090            C        		BANK	2
  1091            C        		MOV	A,@VALUE
  1092            C        		XOR	A,REG1 - 0X40
  1093            C        	ELSEIF	REG1 < 0XA0
  1094            C        		BANK	3
  1095            C        		MOV	A,@VALUE
  1096            C        		XOR	A,REG1 - 0X60
  1097            C        	ELSE
  1098            C        		MESSAGE "WARRING: OUT OF BANK !"
  1099            C        	ENDIF
  1100            C        	ENDM
  1101            C        
  1102            C        FXORA	MACRO	REG1,REG2	; C6
  1103            C        	IF	REG2 < 0x40
  1104            C        		BANK	0
  1105            C        		MOV	A, REG2
  1106            C        		FXOR	A,REG1
  1107            C        	ELSEIF	REG2 < 0X60
  1108            C        		BANK	1
  1109            C        		MOV	A, REG2 - 0X20
  1110            C        		FXOR 	A,REG1
  1111            C        	ELSEIF	REG2 < 0X80
  1112            C        		BANK	2
  1113            C        		MOV	A, REG2 - 0X40
  1114            C        		FXOR	A,REG1
  1115            C        	ELSEIF	REG2 < 0XA0
  1116            C        		BANK	3
  1117            C        		MOV	A, REG2 - 0X60
  1118            C        		FXOR	A,REG1
  1119            C        	ELSE
  1120            C        		MESSAGE "WARRING: OUT OF BANK !"
  1121            C        	ENDIF
  1122            C        	ENDM
  1123            C        
  1124            C        
    12                     include "main.inc"
     1            C        
     2            C        /*****************寄存器定义*********************/
     3            C        
     4       0010 C        int_temp0	==	0x10
     5       0011 C        int_temp1	==	0x11
     6       0012 C        int_temp2	==	0x12
     7       0013 C        int_temp3	==	0x13
     8       0014 C        int_temp4	==	0x14
     9       0015 C        int_temp5	==	0x15
    10       0016 C        temp0		==	0x16
    11       0017 C        temp1		==	0x17
    12       0018 C        temp2		==	0x18
    13       0019 C        temp3		==	0x19
    14       001A C        temp4		==	0x1a
    15       001B C        TEMP5		==	0X1b
    16       001C C        FSK_FG		==	0X1c
    17       001D C        STAMP_FG	==	0X1d			; 印花标志寄存器
    18       001E C        SYS_FG		==	0X1e
    19       001F C        EVENT		==	0X1F
    20            C        
    21            C        ;BANK 0
    22       0020 C        BANK0_TEMP0	==	0X20
    23       0021 C        BANK0_TEMP1	==	0X21
    24       0022 C        BANK0_TEMP2	==	0X22
    25       0023 C        BANK0_TEMP3	==	0X23
    26       0024 C        YEAR_REG	==	0X24
    27       0025 C        MONTH_REG	==	0X25
    28       0026 C        DAY_REG		==	0X26
    29       0027 C        WEEK_REG	==	0X27
    30       0028 C        HOUR_REG	==	0X28
    31       0029 C        MIN_REG		==	0X29
    32       002A C        SEC_REG		==	0X2A
    33            C        
    34       002B C        TOTAL_CALL	==	0X2B
    35       002C C        NEW_CALL	==	0X2C
    36       002D C        TOTAL_MSG	==	0X2D
    37       002E C        NEW_MSG		==	0X2E
    38       002F C        TOTAL_BOOK	==	0X2F
    39            C        
    40            C        ;LCD_CONTRAST	==	0X30			; 低4位为对比度
    41            C        ;CODE1		==	0X30			; 高4位为密码1
    42            C        ;CODE23		==	0X31
    43            C        
    44       0030 C        LCALL12		==	0X30
    45       0031 C        LCALL34		==	0X31
    46       0032 C        LCALL5		==	0X32
    47            C        
    48       0034 C        TMR		==	0X34
    49       0035 C        TMR_DELAY	==	0X35
    50       0036 C        TMR_FLASH	==	0X36
    51       0037 C        TMR_SER		==	0X37
    52       0038 C        TMR_NAME	==	0X38
    53            C        ;TMR_IDLE	==	0X39
    54       0039 C        MENU_STATE	==	0X39
    55            C        
    56       003A C        CONT		==	0X3A
    57       003B C        STR_REG		==	0X3B
    58            C        ;SER_FLAG	==	0X3C
    59            C        ;SER_FLAG	==	0X3D
    60            C        ;SER_FLAG	==	0X3E
    61            C        ;SER_DATA	==	0X3F
    62            C        
    63            C        
    64            C        ;BANK 1
    65       0020 C        BANK1_TEMP0	==	0X20
    66       0021 C        BANK1_TEMP1	==	0X21
    67       0022 C        BANK1_TEMP2	==	0X22
    68       0023 C        BANK1_TEMP3	==	0X23
    69       0024 C        FSK_BYTE	==	0X24
    70       0025 C        FSK_SUM		==	0X25
    71       0026 C        FSK_LENGTH	==	0X26
    72       0027 C        FSK_COUNT	==	0X27
    73       0028 C        FSK_TMP		==	0X28
    74       0029 C        FSK_ADR		==	0X29
    75       002A C        DTMF_ADR	==	0X2A
    76            C        
    77       002B C        TIME_MS		==	0X2B
    78       002C C        TIME_SEC	==	0X2C
    79       002D C        TIME_MIN	==	0X2D
    80       002E C        TIME_HOUR	==	0X2E
    81       002F C        TMR_LINEDET	==	0X2F
    82            C        
    83       0030 C        TMR_PROTOCOL	==	0X30
    84            C        
    85       0031 C        R1_TEST_L111	==	0X31
    86            C        
    87       0032 C        R1_SYS_FG	==	0X32
    88            C        
    89       0033 C        R1_CD		==	0X33
    90       0034 C        R1_TMR_DTMF	==	0X34
    91            C        
    92       0035 C        R1_LCD_CONTRAST	==	0X35
    93       0035 C        R1_CODE1	==	0X35
    94       0036 C        R1_CODE23	==	0X36
    95            C        
    96            C        
    97            C        
    98            C        
    99            C        /*****************常数定义***********************/
   100            C        
   101       0080 C        LCD_CTRL	==	128
   102       00AC C        VGA_ADDR	==	172
   103            C        
   104       0000 C        FSK_ADDR	==	0
   105       0000 C        DTMF_ADDR	==	0
   106       003C C        CID_ADDR	==	60
   107       005E C        EDIT_ADDR	==	94
   108            C        
   109       0084 C        DIAL_ADDR	==	132
   110            C        
   111       0099 C        TCP_ADDR	==	153
   112            C        
   113            C        /*****************标志位定义*********************/
   114            C        
   115            C        ; SYS_FG
   116       0000 C        LANGUAGE	==	0			; 语言标志
   117       0001 C        NEWCALL		==	1			; 
   118       0002 C        STAMP		==	2			; 印花被改变
   119       0003 C        SYS_CLOCK	==	3			; 第一行数字被改变
   120       0004 C        LEEP_YEAR	==	4
   121       0005 C        LOCK_TOPLINE	==	5
   122       0006 C        LOCK_STR	==	6
   123       0007 C        TIME		==	7			; 计时
   124            C        
   125            C        ; R1_SYS_FG
   126       0000 C        TIMEFORMAT	==	0			; 时间制式
   127       0001 C        HOOKSTATUS	==	1			; hook状态
   128            C        
   129            C        
   130            C        ; EVENT
   131       0007 C        TEST		==	7
   132            C        ; STAMP_FG
   133            C        ;.0		REPEAT
   134            C        ;.1		NEW
   135            C        ;.2		battery
   136            C        ;.3		MEMO
   137            C        ;.4		second
   138            C        ;.5		/
   139            C        ;.6		spk
   140            C        ;.7		CALL
   141       0000 C        STAMP_REPEAT	==	0
   142       0001 C        STAMP_NEW	==	1
   143       0002 C        STAMP_BAT	==	2
   144       0003 C        STAMP_MEMO	==	3
   145       0004 C        STAMP_SEC	==	4
   146       0005 C        STAMP_SLASH	==	5
   147       0006 C        STAMP_SPK	==	6
   148       0007 C        STAMP_CALL	==	7
   149            C        
   150            C        ; FSK_FG
   151            C        ;TCC_400U	==	0
   152       0000 C        FSK_VALID	==	0
   153       0001 C        FSK_SUC		==	1			; FSK接收完毕
   154       0002 C        FSK_ERR		==	2			; FSK接收错误
   155       0003 C        DTMF_START	==	3
   156       0004 C        DTMF_SUC	==	4			; DTMF接收完毕
   157       0005 C        ERR_NUM		==	5			; 号码错误
   158       0006 C        ERR_NAME	==	6			; 姓名错误
   159       0007 C        CALLIN		==	7			; 有来电
   160            C        
   161            C        
   162            C        /***************************************
   163            C        CID BANK 规划
   164            C        
   165            C        BANK0:
   166            C        0~127	LCD RAM映射
   167            C        LCD_CTRL == 128
   168            C        0	显示控制
   169            C        1	印花寄存器
   170            C        2~11	第一行数字寄存器
   171            C        12~27	第二行数字寄存器
   172            C        28~43	第三行字符寄存器
   173            C        VGA_ADDR == 172
   174            C        0	印花控制器			; 暂时不用
   175            C        1	显示数据印花缓冲器		; 不用
   176            C        2	第一行控制器			; 不用
   177            C        3~12	显示数据第一行数字缓冲器	; 不用
   178            C        13	第二行控制器
   179            C        14~45	显示数据第二行数字缓冲器	缓冲器大小设为32个，但显示前16个
   180            C        46	第三行控制器
   181            C        47~78	显示数据第三行字符缓冲器	缓冲器大小设为32个，但显示前16个
   182            C        ; ------------------------------------------------
   183            C        BANK1:
   184            C        FSK_ADDR == 0
   185            C        0~59	FSK 接收数据区。（消息类型-消息长度-消息字/消息类型-消息长度-参数类型-参数长度-参数字）
   186            C        DTMF_ADDR == 0
   187            C        0~19	DTMF 接收数据区。
   188            C        
   189            C        CID_ADDR == 60
   190            C        从交换机接收到的信息解码之后得到的信息：
   191            C        从93L111接收到的号码信息：
   192            C        预发送给93L111的号码信息：
   193            C        0	CID_CTRL
   194            C        	.7	是否要屏蔽第一行
   195            C        	.6~.5	显示模式
   196            C        1	信息标志位
   197            C        	.7	备用（0）
   198            C        	.1	是否新来电
   199            C        	.0	是否REPEAT
   200            C        2	号码长度 1~16;0x00未解码/没有号码;0x43('C')投币电话呼叫;0x49('I')不带号码的国际呼叫;0x4F('O')不带号码;0x50('P')私密;0xFF解码错误;祈
   201            C        3~10	电话号码，一个字节存放两位，不够部分为F。
   202            C        11	姓名长度 1~16;0x00未解码/没有号码;0x4F('O')不带姓名;0x50('P')私密;0xFF解码错误;其它保留。
   203            C        12~27	姓名，不够部分为FF。
   204            C        28	时间长度 4;0X00/0XFF没有时间信息。
   205            C        29~32	时间信息（月日时分）
   206            C        33	OGM号/序号。
   207            C        
   208            C        COMMAND_ADDR == 94
   209            C        0	控制器
   210            C        1~20	提供20个接收处理命令区。
   211            C        
   212            C        EDIT_ADDR == 94
   213            C        编辑区
   214            C        0	印花
   215            C        1~5	第一行
   216            C        6~21	第二行
   217            C        22~37	第三行
   218            C        
   219            C        DIAL_ADDR == 132
   220            C        0	拨号控制器
   221            C        .7	1
   222            C        .6	0/1	START/CONTINUE
   223            C        .5	0/1	PAUSE/DIAL
   224            C        .4~.0	->
   225            C        1~20	号码缓冲区
   226            C        
   227            C        TCP_ADDR == 153
   228            C        0	TCP控制器
   229            C        .7	0
   230            C        
   231            C        1~70
   232            C        153由发送 和接收 共用缓冲区。
   233            C        
   234            C        224~255	通讯使用
   235            C        ****************************************/
   236            C        
    13                     include	"math.inc"
     1       0016 C        GENE_A		==	TEMP0
     2       0017 C        GENE_B		==	TEMP1
     3       0018 C        RESULT		==	TEMP2
     4       0019 C        EXT_RESULT	==	TEMP3
     5       001A C        MATH_CONT	==	TEMP4
     6            C        
     7       0016 C        MOD_MIN		==	TEMP0
     8       0017 C        MOD_MAX		==	TEMP1
     9       0018 C        CURRENT_VALUE	==	TEMP2
    10       0019 C        INCREMENT	==	TEMP3
    11       001A C        MOD_TEMP	==	TEMP4
    14                     
    15                     
    16                     ORG	0X0000
    17 00000 0000          	NOP
    18 00001 0000          	NOP
    19 00002 0000          	NOP
    20 00003 0000          	NOP
    21 00004 0000          	NOP
    22 00005 1634          	JMP	MAIN
    23 00006 0000          	NOP
    24 00007 0000          	NOP
    25                     
    26                     ORG	0X0008
    27 00008               INT_BEGIN:
    28 00008 0011          	DISI
    29 00009 0050          	MOV	INT_TEMP0,A
    30 0000A 0750          	SWAP	INT_TEMP0
    31                   M 	MOV	INT_TEMP1,_STATUS
       0000B 0403     1     MOV A, _STATUS 
       0000C 0051     1     MOV  INT_TEMP1 ,A
    32                   M 	MOV	INT_TEMP2,_RSR
       0000D 0404     1     MOV A, _RSR 
       0000E 0052     1     MOV  INT_TEMP2 ,A
    33                   M 	MOV	INT_TEMP3,_PPSR
       0000F 0405     1     MOV A, _PPSR 
       00010 0053     1     MOV  INT_TEMP3 ,A
    34                   M 	MOV	INT_TEMP4,_RC
       00011 040C     1     MOV A, _RC 
       00012 0054     1     MOV  INT_TEMP4 ,A
    35 00013 040B          	MOV	A,_RB			; 保存CID体
    36 00014 1A05          	AND	A,@0X05
    37 00015 0055          	MOV	INT_TEMP5,A
    38                     	
    39 00016 1E80          	PAGE	0
    40                   M 	BANK	0
       00017 0984     1     BC  _RSR , 6 
       00018 09C4     1     BC  _RSR , 7 
    41                     	
    42                     	;-------------------------------
    43                     ;	JPB	_FSR,2,INT_BEGIN_1
    44                     ;	CRAM	_R7,1
    45                     ;	JMP	INT_BEGIN_2
    46                     ;INT_BEGIN_1:
    47                     ;	SRAM	_R7,1
    48                     ;INT_BEGIN_2:
    49                     	;-------------------------------
    50                     	
    51                   M 	JPB	_ISR,6,INT_FSK
       00019 0D8F     1     JBC  _ISR , 6 
       0001A 15D5     1     JMP  INT_FSK ,
    52                   M 	JPB	_ISR,0,INT_TCC
       0001B 0C0F     1     JBC  _ISR , 0 
       0001C 143A     1     JMP  INT_TCC ,
    53                   M 	JPB	_ISR,1,INT_0
       0001D 0C4F     1     JBC  _ISR , 1 
       0001E 148F     1     JMP  INT_0 ,
    54                   M 	JPB	_ISR,2,INT_1
       0001F 0C8F     1     JBC  _ISR , 2 
       00020 1492     1     JMP  INT_1 ,
    55                   M 	JPB	_ISR,3,INT_2
       00021 0CCF     1     JBC  _ISR , 3 
       00022 1495     1     JMP  INT_2 ,
    56                   M 	JPB	_ISR,4,INT_CNT1
       00023 0D0F     1     JBC  _ISR , 4 
       00024 1498     1     JMP  INT_CNT1 ,
    57                   M 	JPB	_ISR,5,INT_CNT2
       00025 0D4F     1     JBC  _ISR , 5 
       00026 14B9     1     JMP  INT_CNT2 ,
    58                   M 	JPB	_ISR,7,INT_STD
       00027 0DCF     1     JBC  _ISR , 7 
       00028 15ED     1     JMP  INT_STD ,
    59 00029 1633          	JMP	INT_ERR
    60                     
    61 0002A               INT_END:
    62 0002A 040B          	MOV	A,_RB
    63 0002B 1AFA          	AND	A,@0XFA
    64 0002C 0395          	ADD	A,INT_TEMP5
    65 0002D 004B          	MOV	_RB,A
    66                   M 	MOV	_RC,INT_TEMP4
       0002E 0414     1     MOV A, INT_TEMP4 
       0002F 004C     1     MOV  _RC ,A
    67                   M 	MOV	_PPSR,INT_TEMP3
       00030 0413     1     MOV A, INT_TEMP3 
       00031 0045     1     MOV  _PPSR ,A
    68                   M 	MOV	_RSR,INT_TEMP2
       00032 0412     1     MOV A, INT_TEMP2 
       00033 0044     1     MOV  _RSR ,A
    69                   M 	MOV	_STATUS,INT_TEMP1
       00034 0411     1     MOV A, INT_TEMP1 
       00035 0043     1     MOV  _STATUS ,A
    70 00036 0710          	SWAPA	INT_TEMP0
    71 00037 0013          	RETI
    72                     
    73 00038               INT_TCC_END:
    74 00038 0567          	INC	FSK_COUNT
    75 00039 142A          	JMP	INT_END
    76                     
    77 0003A               INT_TCC:
    78                   M 	MOV	_ISR,@0XFE
       0003A 18FE     1     MOV A,@( 254 )
       0003B 004F     1     MOV  _ISR ,A
    79                     	;CRAM	_ISR,0
    80                     	
    81                     	;-------------------------------
    82                     ;	JPB	_R7,0,INT_TCC_1
    83                     ;	SRAM	_R7,0
    84                     ;	JMP	INT_TCC_2
    85                     ;INT_TCC_1:
    86                     ;	CRAM	_R7,0
    87                     ;INT_TCC_2:
    88                     	;-------------------------------
    89                   M 	BANK	1
       0003C 0B84     1     BS  _RSR , 6 
       0003D 09C4     1     BC  _RSR , 7 
    90                   M 	JPB	_FSR,1,INT_CHKCD_HI
       0003E 0C4A     1     JBC  _FSR , 1 
       0003F 15CA     1     JMP  INT_CHKCD_HI ,
    91                   M 	ADD	_TCC,@(256-185)
       00040 1847     1     MOV A,@(( 256 - 185 ))
       00041 03C1     1     ADD  _TCC ,A
    92                     	
    93 00042 0427          	MOV	A,FSK_COUNT
    94                   M 	JPZ	INT_TCC_END
       00043 0C83     1     JBC  _STATUS , Z 
       00044 1438     1     JMP  INT_TCC_END ,
    95 00045               INT_TCC_FSK_DATA:
    96                   M 	SRAM	_STATUS,C
       00045 0A03     1     BS  _STATUS , C 
    97 00046 0E8A          	JBS	_FSR,2
    98                   M 	CRAM	_STATUS,C
       00047 0803     1     BC  _STATUS , C 
    99 00048 0668          	RRC	FSK_TMP
   100                     	
   101                   M 	SUBA	FSK_COUNT,@8
       00049 1808     1     MOV A,@( 8 )
       0004A 0127     1     SUB A, FSK_COUNT 
   102                   M 	JPNZ	INT_TCC_END
       0004B 0E83     1     JBS  _STATUS , Z 
       0004C 1438     1     JMP  INT_TCC_END ,
   103                     	
   104 0004D 00E7          	CLR	FSK_COUNT
   105                   M 	CRAM	FSK_FG,FSK_VALID
       0004E 081C     1     BC  FSK_FG , FSK_VALID 
   106                     	
   107 0004F 001F          	IOR	_IOCF
   108 00050 1AFE          	AND	A,@0XFE		; close TCC int
   109 00051 000F          	IOW	_IOCF
   110                     	
   111                     
   112                     	
   113 00052 0424          	MOV	A,FSK_BYTE
   114                   M 	JPZ	INT_RECOVER_TYPE
       00053 0C83     1     JBC  _STATUS , Z 
       00054 1459     1     JMP  INT_RECOVER_TYPE ,
   115 00055 1D01          	SUB	A,@1
   116                   M 	JPZ	INT_RECOVER_LENTH
       00056 0C83     1     JBC  _STATUS , Z 
       00057 146D     1     JMP  INT_RECOVER_LENTH ,
   117 00058 1470          	JMP	INT_RECOVER_OTHER
   118                     
   119 00059               INT_RECOVER_TYPE:
   120                   M 	SUBA	FSK_TMP,@0X80
       00059 1880     1     MOV A,@( 128 )
       0005A 0128     1     SUB A, FSK_TMP 
   121                   M 	JPZ	INT_RECOVER_TYPE_VALID
       0005B 0C83     1     JBC  _STATUS , Z 
       0005C 146A     1     JMP  INT_RECOVER_TYPE_VALID ,
   122                     	
   123                   M 	SUBA	FSK_TMP,@0X81
       0005D 1881     1     MOV A,@( 129 )
       0005E 0128     1     SUB A, FSK_TMP 
   124                   M 	JPZ	INT_RECOVER_TYPE_VALID
       0005F 0C83     1     JBC  _STATUS , Z 
       00060 146A     1     JMP  INT_RECOVER_TYPE_VALID ,
   125                     	
   126                   M 	SUBA	FSK_TMP,@0X82
       00061 1882     1     MOV A,@( 130 )
       00062 0128     1     SUB A, FSK_TMP 
   127                   M 	JPZ	INT_RECOVER_TYPE_VALID
       00063 0C83     1     JBC  _STATUS , Z 
       00064 146A     1     JMP  INT_RECOVER_TYPE_VALID ,
   128                     	
   129                   M 	SUBA	FSK_TMP,@0X04
       00065 1804     1     MOV A,@( 4 )
       00066 0128     1     SUB A, FSK_TMP 
   130                   M 	JPZ	INT_RECOVER_TYPE_VALID
       00067 0C83     1     JBC  _STATUS , Z 
       00068 146A     1     JMP  INT_RECOVER_TYPE_VALID ,
   131 00069 148D          	JMP	INT_RECOVER_TYPE_INVALID
   132 0006A               INT_RECOVER_TYPE_VALID:
   133                   M 	MOV	FSK_ADR,@FSK_ADDR	; 传送的第一个字节为消息类型
       0006A 1800     1     MOV A,@( FSK_ADDR )
       0006B 0069     1     MOV  FSK_ADR ,A
   134 0006C 1470          	JMP	INT_RECOVER_OTHER
   135                     
   136 0006D               INT_RECOVER_LENTH:
   137                   M 	MOV	FSK_LENGTH,FSK_TMP	; 消息类型之后的第一个字节是消息长度字
       0006D 0428     1     MOV A, FSK_TMP 
       0006E 0066     1     MOV  FSK_LENGTH ,A
   138 0006F 1470          	JMP	INT_RECOVER_OTHER
   139                     ;INT_RECOVER:
   140                     ;	MOV	FSK_ADR,@FSK_ADDR	; 传送的第一个字节为消息类型
   141                     ;	CLR	FSK_BYTE		; 初始化FSK_BYTE
   142                     
   143                     ;INT_RECOVERD:
   144                     ;	SUBA	FSK_BYTE,@1	; 消息类型之后的第一个字节是消息长度字
   145                     ;	JPNZ	INT_RECOVERD_OTHER
   146                     ;	MOV	FSK_LENGTH,FSK_TMP
   147                     	;SUB	A,@58
   148                     	;JPNC	INT_RECOVERD_ERR
   149                     	;SUBA	FSK_TMP,@2
   150                     	;JPNC	INT_RECOVERD_ERR
   151 00070               INT_RECOVER_OTHER:
   152 00070 0429          	MOV	A,FSK_ADR
   153 00071 1D3C          	SUB	A,@60
   154                   M 	JPNC	INT_END
       00072 0E03     1     JBS  _STATUS , C 
       00073 142A     1     JMP  INT_END ,
   155                   M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00074 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00075 088B     2     BC  _RB , 2 
   156                   M 	MOV	_RC,FSK_ADR
       00076 0429     1     MOV A, FSK_ADR 
       00077 004C     1     MOV  _RC ,A
   157                   M 	MOV	_RD,FSK_TMP
       00078 0428     1     MOV A, FSK_TMP 
       00079 004D     1     MOV  _RD ,A
   158 0007A 0569          	INC	FSK_ADR
   159 0007B 0564          	INC	FSK_BYTE
   160                     	;MOV	A,FSK_BYTE
   161                     	;SUB	A,@34
   162                     	;JBC	_STATUS,Z
   163                     	;NOP
   164                   M 	ADDA	FSK_LENGTH,@3
       0007C 1803     1     MOV A,@( 3 )
       0007D 03A6     1     ADD A, FSK_LENGTH 
   165 0007E 0124          	SUB	A,FSK_BYTE
   166                   M 	JPNZ	INT_END
       0007F 0E83     1     JBS  _STATUS , Z 
       00080 142A     1     JMP  INT_END ,
   167                     	
   168 00081 00E5          	CLR	FSK_SUM
   169 00082 054C          	INC	_RC
   170 00083               INT_CHECKSUM:			; 校验
   171 00083 01CC          	DEC	_RC
   172 00084 040D          	MOV	A,_RD
   173 00085 03E5          	ADD	FSK_SUM,A
   174 00086 01E4          	DEC	FSK_BYTE
   175                   M 	JPNZ	INT_CHECKSUM
       00087 0E83     1     JBS  _STATUS , Z 
       00088 1483     1     JMP  INT_CHECKSUM ,
   176                     	
   177 00089 0425          	MOV	A,FSK_SUM
   178                   M 	JPNZ	INT_CHECKSUM_ERR
       0008A 0E83     1     JBS  _STATUS , Z 
       0008B 148D     1     JMP  INT_CHECKSUM_ERR ,
   179                   M 	SRAM	FSK_FG,FSK_SUC
       0008C 0A5C     1     BS  FSK_FG , FSK_SUC 
   180                     	;JMP	INT_END
   181                     
   182 0008D               INT_RECOVER_TYPE_INVALID:
   183                     ; --------------
   184 0008D               INT_CHECKSUM_ERR:
   185 0008D 00E4          	CLR	FSK_BYTE
   186 0008E               INT_RECOVERD_ERR:
   187 0008E 15CA          	JMP	INT_CHKCD_HI
   188                     ; --------------
   189                     
   190 0008F               INT_0:
   191                   M 	MOV	_ISR,@0XFD
       0008F 18FD     1     MOV A,@( 253 )
       00090 004F     1     MOV  _ISR ,A
   192                     	;CRAM	_ISR,1
   193 00091 142A          	JMP	INT_END
   194                     
   195 00092               INT_1:
   196                   M 	MOV	_ISR,@0XFB
       00092 18FB     1     MOV A,@( 251 )
       00093 004F     1     MOV  _ISR ,A
   197                     	;CRAM	_ISR,2
   198 00094 142A          	JMP	INT_END
   199                     
   200 00095               INT_2:
   201                   M 	MOV	_ISR,@0XF7
       00095 18F7     1     MOV A,@( 247 )
       00096 004F     1     MOV  _ISR ,A
   202                     	;CRAM	_ISR,3
   203 00097 142A          	JMP	INT_END
   204                     
   205 00098               INT_CNT1:			; 0.5S
   206                   M 	MOV	_ISR,@0XEF
       00098 18EF     1     MOV A,@( 239 )
       00099 004F     1     MOV  _ISR ,A
   207                     	;CRAM	_ISR,4
   208                     	
   209 0009A 056A          	INC	SEC_REG
   210                   M 	CLRC
       0009B 0803     1     BC  _STATUS , C 
   211 0009C 062A          	RRCA	SEC_REG
   212 0009D 1D3C          	SUB	A,@60
   213                   M 	JPNZ	INT_CNT1_1
       0009E 0E83     1     JBS  _STATUS , Z 
       0009F 14B4     1     JMP  INT_CNT1_1 ,
   214 000A0 00EA          	CLR	SEC_REG
   215 000A1 0569          	INC	MIN_REG
   216                   M 	SUBA	MIN_REG,@60
       000A2 183C     1     MOV A,@( 60 )
       000A3 0129     1     SUB A, MIN_REG 
   217                   M 	JPNZ	INT_CNT1_1
       000A4 0E83     1     JBS  _STATUS , Z 
       000A5 14B4     1     JMP  INT_CNT1_1 ,
   218 000A6 00E9          	CLR	MIN_REG
   219 000A7 0568          	INC	HOUR_REG
   220                   M 	SUBA	HOUR_REG,@24
       000A8 1818     1     MOV A,@( 24 )
       000A9 0128     1     SUB A, HOUR_REG 
   221                   M 	JPNZ	INT_CNT1_1
       000AA 0E83     1     JBS  _STATUS , Z 
       000AB 14B4     1     JMP  INT_CNT1_1 ,
   222 000AC 00E8          	CLR	HOUR_REG
   223 000AD 0566          	INC	DAY_REG
   224 000AE 0567          	INC	WEEK_REG
   225                   M 	SUBA	WEEK_REG,@7
       000AF 1807     1     MOV A,@( 7 )
       000B0 0127     1     SUB A, WEEK_REG 
   226                   M 	JPNZ	INT_CNT1_1
       000B1 0E83     1     JBS  _STATUS , Z 
       000B2 14B4     1     JMP  INT_CNT1_1 ,
   227 000B3 00E7          	CLR	WEEK_REG
   228 000B4               INT_CNT1_1:
   229                     	
   230                   M 	DECZ	TMR_NAME
       000B4 0438     1     MOV A, TMR_NAME 
                      2  M  JPZ ( $ + 2 )
       000B5 0C83     2     JBC  _STATUS , Z 
       000B6 14B8     2     JMP ( $ + 2 ),
       000B7 01F8     1     DEC  TMR_NAME ,
   231 000B8 142A          	JMP	INT_END
   232                     
   233 000B9               INT_CNT2:
   234                     	;CRAM	_ISR,5
   235                   M 	MOV	_ISR,@0XDF
       000B9 18DF     1     MOV A,@( 223 )
       000BA 004F     1     MOV  _ISR ,A
   236                     	
   237                   M 	PAGEIO	1
                      2  M  SRAM  _STATUS , 7 
       000BB 0BC3     2     BS  _STATUS , 7 
   238                     	;IOW	_IOCE,@0X0E
   239                   M 	IOW	_IOCC,@0XEF			;0.5MS
       000BC 18EF     1     MOV A,@( 239 )
       000BD 000C     1     IOW  _IOCC ,
   240                   M 	PAGEIO	0
                      2  M  CRAM  _STATUS , 7 
       000BE 09C3     2     BC  _STATUS , 7 
   241                     	
   242                     	;SRAM	_FSR,4
   243                     	;SRAM	_FSR,5
   244                     	;SRAM	_FSR,6
   245                     	
   246                   M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       000BF 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       000C0 088B     2     BC  _RB , 2 
   247                   M 	BANK	0
       000C1 0984     1     BC  _RSR , 6 
       000C2 09C4     1     BC  _RSR , 7 
   248                   M 	SER_COMM				; 通讯
       000C3          1    SER_DET:   
       000C3 0D3C     1     JBC  SER_FLAG , 4 
       000C4 14E0     1     JMP  SER_DET_END ,
       000C5 0D7C     1     JBC  SER_FLAG , 5 
       000C6 14E0     1     JMP  SER_DET_END ,
       000C7          1    SER_DET1:   
       000C7 0D07     1     JBC  _R7 , P_WR 
       000C8 14CC     1     JMP  SER_DET2 ,
       000C9 00FD     1     CLR  SER_CONT ,
       000CA 0B3C     1     BS  SER_FLAG , 4 
       000CB 14E0     1     JMP  SER_DET_END ,
       000CC          1    SER_DET2:   
       000CC 0FBC     1     JBS  SER_FLAG , 6 
       000CD 14E0     1     JMP  SER_DET_END ,
       000CE 00FD     1     CLR  SER_CONT ,
       000CF 0B7C     1     BS  SER_FLAG , 5 
       000D0 09BC     1     BC  SER_FLAG , 6 
                      2  M  SER_GET_DATA 
       000D1 18E0     2     MOV A,@( SER_BASE )
       000D2 03BD     2     ADD A, SER_CONT 
       000D3 004C     2     MOV  RC ,A
       000D4 040D     2     MOV A, RD 
       000D5 007F     2     MOV  SER_DATA ,A
                      2  M  CIO  _R7 , P_WR 
       000D6 0017     2     IOR  _R7 ,
                      3  M  CA  P_WR 
       000D7 1AEF     3     AND A,@( 239 )
       000D8 0007     2     IOW  _R7 ,
                      2  M  CIO  _R7 , P_DAT 
       000D9 0017     2     IOR  _R7 ,
                      3  M  CA  P_DAT 
       000DA 1AF7     3     AND A,@( 247 )
       000DB 0007     2     IOW  _R7 ,
       000DC 0907     1     BC  R7 , P_WR 
       000DD 13E0     1     CALL  SER_SEND_BIT ,
       000DE 057C     1     INC  SER_FLAG ,
       000DF 1539     1     JMP  CLOCK_END ,
       000E0          1    SER_DET_END:   
       000E0          1    CLOCK:   
       000E0 0D07     1     JBC  _R7 , P_WR 
       000E1 1517     1     JMP  CLOCK4 ,
       000E2 0F47     1     JBS  _R7 , P_CLK 
       000E3 1511     1     JMP  CLOCK2 ,
       000E4 0D3C     1     JBC  SER_FLAG , 4 
       000E5 14EB     1     JMP  CLOCK_COM ,
       000E6 0D7C     1     JBC  SER_FLAG , 5 
       000E7 14EB     1     JMP  CLOCK_COM ,
       000E8 0EFC     1     JBS  SER_FLAG , 3 
       000E9 1539     1     JMP  CLOCK_END ,
       000EA 08FC     1     BC  SER_FLAG , 3 
       000EB          1    CLOCK_COM:   
       000EB 0947     1     BC  _R7 , P_CLK 
       000EC 1539     1     JMP  CLOCK_END ,
       000ED          1    CLOCK_SEND:   
       000ED 043E     1     MOV A, SER_SEND 
       000EE 013D     1     SUB A, SER_CONT 
       000EF 0C83     1     JBC  _STATUS , Z 
       000F0 1506     1     JMP  CLOCK1_1 ,
       000F1 057C     1     INC  SER_FLAG ,
       000F2 043C     1     MOV A, SER_FLAG 
       000F3 1A0F     1     AND A,@( 15 )
       000F4 1D08     1     SUB A,@( 8 )
       000F5 0C03     1     JBC  _STATUS , C 
       000F6 14F9     1     JMP  SEREXE_SEND ,
       000F7 1808     1     MOV A,@( 8 )
       000F8 017C     1     SUB  SER_FLAG ,A
       000F9          1    SEREXE_SEND:   
       000F9 13E0     1     CALL  SER_SEND_BIT ,
       000FA 043C     1     MOV A, SER_FLAG 
       000FB 1A0F     1     AND A,@( 15 )
       000FC 1D08     1     SUB A,@( 8 )
       000FD 0E83     1     JBS  _STATUS , Z 
       000FE 1505     1     JMP  SEREXE_SEND_END ,
       000FF 057D     1     INC  SER_CONT ,
                      2  M  SER_GET_DATA 
       00100 18E0     2     MOV A,@( SER_BASE )
       00101 03BD     2     ADD A, SER_CONT 
       00102 004C     2     MOV  RC ,A
       00103 040D     2     MOV A, RD 
       00104 007F     2     MOV  SER_DATA ,A
       00105          1    SEREXE_SEND_END:   
       00105 1539     1     JMP  CLOCK_END ,
       00106          1    CLOCK1_1:   
       00106 00FC     1     CLR  SER_FLAG ,
       00107 00FE     1     CLR  SER_SEND ,
                      2  M  SIO  _R7 , P_WR 
       00108 0017     2     IOR  _R7 ,
                      3  M  SA  P_WR 
       00109 1910     3     OR A,@( 16 )
       0010A 0007     2     IOW  _R7 ,
                      2  M  SIO  _R7 , P_DAT 
       0010B 0017     2     IOR  _R7 ,
                      3  M  SA  P_DAT 
       0010C 1908     3     OR A,@( 8 )
       0010D 0007     2     IOW  _R7 ,
       0010E 1539     1     JMP  CLOCK_END ,
       0010F          1    CLOCK1_2:   
       0010F 0947     1     BC  _R7 , P_CLK 
       00110 1539     1     JMP  CLOCK_END ,
       00111          1    CLOCK2:   
       00111 0B47     1     BS  _R7 , P_CLK 
       00112 0D3C     1     JBC  SER_FLAG , 4 
       00113 151E     1     JMP  CLOCK_RECE ,
       00114 0D7C     1     JBC  SER_FLAG , 5 
       00115 14ED     1     JMP  CLOCK_SEND ,
       00116 1539     1     JMP  CLOCK_END ,
       00117          1    CLOCK4:   
                      2  M  JPNB  _R7 , P_CLK , CLOCK5 
       00117 0F47     2     JBS  _R7 , P_CLK 
       00118 151D     2     JMP  CLOCK5 ,
                      2  M  JPNB  SER_FLAG , 4 , CLOCK_END 
       00119 0F3C     2     JBS  SER_FLAG , 4 
       0011A 1539     2     JMP  CLOCK_END ,
       0011B 00FC     1     CLR  SER_FLAG ,
       0011C 1539     1     JMP  CLOCK_END ,
       0011D          1    CLOCK5:   
       0011D 0B47     1     BS  _R7 , P_CLK 
       0011E          1    CLOCK_RECE:   
       0011E 057C     1     INC  SER_FLAG ,
       0011F 043C     1     MOV A, SER_FLAG 
       00120 1A0F     1     AND A,@( 15 )
       00121 1D08     1     SUB A,@( 8 )
       00122 0C03     1     JBC  _STATUS , C 
       00123 1526     1     JMP  SEREXE_RECE ,
       00124 1808     1     MOV A,@( 8 )
       00125 017C     1     SUB  SER_FLAG ,A
       00126          1    SEREXE_RECE:   
       00126 0A03     1     BS  _STATUS , C 
       00127 0EC7     1     JBS  _R7 , P_DAT 
       00128 0803     1     BC  _STATUS , C 
       00129 06FF     1     RLC  SER_DATA ,
       0012A 043C     1     MOV A, SER_FLAG 
       0012B 1A0F     1     AND A,@( 15 )
       0012C 1D08     1     SUB A,@( 8 )
       0012D 0E83     1     JBS  _STATUS , Z 
       0012E 1539     1     JMP  SEREXE_RECE_END ,
                      2  M  SER_RECE_DATA 
       0012F 18E0     2     MOV A,@( SER_BASE )
       00130 03BD     2     ADD A, SER_CONT 
       00131 004C     2     MOV  RC ,A
       00132 043F     2     MOV A, SER_DATA 
       00133 004D     2     MOV  RD ,A
       00134 057D     1     INC  SER_CONT ,
       00135 0F07     1     JBS  R7 , P_WR 
       00136 1539     1     JMP  SEREXE_RECE_END ,
       00137 00FC     1     CLR  SER_FLAG ,
       00138 0BFC     1     BS  SER_FLAG , 7 
       00139          1    SEREXE_RECE_END:   
       00139          1    CLOCK_END:   
   249                   M 	SAVECOMMAND
       00139          1    STOR_COMMAND:   
                      2  M  JPNB  SER_FLAG , 7 , STOR_COMMAND_END 
       00139 0FFC     2     JBS  SER_FLAG , 7 
       0013A 1563     2     JMP  STOR_COMMAND_END ,
                      2  M  CIDBANK  1 
                      3  M  SRAM  _RB , 0 
       0013B 0A0B     3     BS  _RB , 0 
                      3  M  CRAM  _RB , 2 
       0013C 088B     3     BC  _RB , 2 
                      2  M  MOV  _RC ,@(( TCP_ADDR + 0 ))
       0013D 1899     2     MOV A,@(( TCP_ADDR + 0 ))
       0013E 004C     2     MOV  _RC ,A
                      2  M  JPB  _RD , 7 ,( $ + 3 )
       0013F 0DCD     2     JBC  _RD , 7 
       00140 1543     2     JMP ( $ + 3 ),
                      2  M  MOV  _RD ,@( 128 )
       00141 1880     2     MOV A,@( 128 )
       00142 004D     2     MOV  _RD ,A
       00143 00FE     1     CLR  SER_SEND ,
       00144          1    STOR_COMMAND_LOOP:   
                      2  M  SUBA  SER_SEND , SER_CONT 
       00144 043D     2     MOV A, SER_CONT 
       00145 013E     2     SUB A, SER_SEND 
                      2  M  JPZ  STOR_COMMAND_1 
       00146 0C83     2     JBC  _STATUS , Z 
       00147 1558     2     JMP  STOR_COMMAND_1 ,
                      2  M  ADDA  SER_SEND ,@( SER_BASE )
       00148 18E0     2     MOV A,@( SER_BASE )
       00149 03BE     2     ADD A, SER_SEND 
       0014A 004C     1     MOV  _RC ,A
                      2  M  MOV  SER_FLAG , _RD 
       0014B 040D     2     MOV A, _RD 
       0014C 007C     2     MOV  SER_FLAG ,A
                      2  M  MOV  _RC ,@(( TCP_ADDR + 0 ))
       0014D 1899     2     MOV A,@(( TCP_ADDR + 0 ))
       0014E 004C     2     MOV  _RC ,A
       0014F 054D     1     INC  _RD ,
                      2  M  ANDA  _RD ,@( 127 )
       00150 187F     2     MOV A,@( 127 )
       00151 028D     2     AND A, _RD 
       00152 1F99     1     ADD A,@(( TCP_ADDR + 0 ))
       00153 004C     1     MOV  _RC ,A
                      2  M  MOV  _RD , SER_FLAG 
       00154 043C     2     MOV A, SER_FLAG 
       00155 004D     2     MOV  _RD ,A
       00156 057E     1     INC  SER_SEND ,
       00157 1544     1     JMP  STOR_COMMAND_LOOP ,
       00158          1    STOR_COMMAND_1:   
                      2  M  MOV  _RC ,@(( TCP_ADDR + 0 ))
       00158 1899     2     MOV A,@(( TCP_ADDR + 0 ))
       00159 004C     2     MOV  _RC ,A
       0015A 054D     1     INC  _RD ,
                      2  M  ANDA  _RD ,@( 127 )
       0015B 187F     2     MOV A,@( 127 )
       0015C 028D     2     AND A, _RD 
       0015D 1F99     1     ADD A,@(( TCP_ADDR + 0 ))
       0015E 004C     1     MOV  _RC ,A
                      2  M  MOV  _RD ,@( 255 )
       0015F 18FF     2     MOV A,@( 255 )
       00160 004D     2     MOV  _RD ,A
       00161 00FE     1     CLR  SER_SEND ,
       00162 00FC     1     CLR  SER_FLAG ,
       00163          1    STOR_COMMAND_END:   
   250 00163 043E          	MOV	A,SER_SEND
   251                   M 	JPZ	$+3
       00164 0C83     1     JBC  _STATUS , Z 
       00165 1568     1     JMP ( $ + 3 ),
   252                   M 	MOV	TMR_SER,@16
       00166 1810     1     MOV A,@( 16 )
       00167 0077     1     MOV  TMR_SER ,A
   253                   M 	DECZ	TMR_SER
       00168 0437     1     MOV A, TMR_SER 
                      2  M  JPZ ( $ + 2 )
       00169 0C83     2     JBC  _STATUS , Z 
       0016A 156C     2     JMP ( $ + 2 ),
       0016B 01F7     1     DEC  TMR_SER ,
   254                     	
   255 0016C 0574          	INC	TMR
   256                   M 	ANDA	TMR,@7
       0016D 1807     1     MOV A,@( 7 )
       0016E 02B4     1     AND A, TMR 
   257                   M 	JPNZ	INT_CNT2_1
       0016F 0E83     1     JBS  _STATUS , Z 
       00170 15A4     1     JMP  INT_CNT2_1 ,
   258 00171               INT_CNT_4MS:
   259                   M 	DECZ	TMR_DELAY
       00171 0435     1     MOV A, TMR_DELAY 
                      2  M  JPZ ( $ + 2 )
       00172 0C83     2     JBC  _STATUS , Z 
       00173 1575     2     JMP ( $ + 2 ),
       00174 01F5     1     DEC  TMR_DELAY ,
   260                   M 	DECZ	TMR_FLASH
       00175 0436     1     MOV A, TMR_FLASH 
                      2  M  JPZ ( $ + 2 )
       00176 0C83     2     JBC  _STATUS , Z 
       00177 1579     2     JMP ( $ + 2 ),
       00178 01F6     1     DEC  TMR_FLASH ,
   261                     
   262                   M 	BANK	1
       00179 0B84     1     BS  _RSR , 6 
       0017A 09C4     1     BC  _RSR , 7 
   263                     
   264                     
   265 0017B               INT_CNT2_CHKDTMF:
   266                   M 	JPNB	FSK_FG,DTMF_START,INT_CNT2_CHKDTMF_END
       0017B 0EDC     1     JBS  FSK_FG , DTMF_START 
       0017C 1587     1     JMP  INT_CNT2_CHKDTMF_END ,
   267 0017D 01F4          	DEC	R1_TMR_DTMF
   268 0017E 0434          	MOV	A,R1_TMR_DTMF
   269                   M 	JPNZ	INT_CNT2_CHKDTMF_END
       0017F 0E83     1     JBS  _STATUS , Z 
       00180 1587     1     JMP  INT_CNT2_CHKDTMF_END ,
   270                   M 	MOV	_RC,DTMF_ADR
       00181 042A     1     MOV A, DTMF_ADR 
       00182 004C     1     MOV  _RC ,A
   271                   M 	MOV	_RD,@0X0F
       00183 180F     1     MOV A,@( 15 )
       00184 004D     1     MOV  _RD ,A
   272                   M 	CRAM	FSK_FG,DTMF_START
       00185 08DC     1     BC  FSK_FG , DTMF_START 
   273                   M 	SRAM	FSK_FG,DTMF_SUC
       00186 0B1C     1     BS  FSK_FG , DTMF_SUC 
   274                     
   275 00187               INT_CNT2_CHKDTMF_END:
   276                     
   277                     
   278                   M 	JPNB	SYS_FG,TIME,INT_CNT2_1
       00187 0FDE     1     JBS  SYS_FG , TIME 
       00188 15A4     1     JMP  INT_CNT2_1 ,
   279                   M 	DECZ	TIME_MS
       00189 042B     1     MOV A, TIME_MS 
                      2  M  JPZ ( $ + 2 )
       0018A 0C83     2     JBC  _STATUS , Z 
       0018B 158D     2     JMP ( $ + 2 ),
       0018C 01EB     1     DEC  TIME_MS ,
   280 0018D 042B          	MOV	A,TIME_MS
   281                   M 	JPNZ	INT_CNT2_1
       0018E 0E83     1     JBS  _STATUS , Z 
       0018F 15A4     1     JMP  INT_CNT2_1 ,
   282                   M 	MOV	TIME_MS,@250
       00190 18FA     1     MOV A,@( 250 )
       00191 006B     1     MOV  TIME_MS ,A
   283 00192 056C          	INC	TIME_SEC
   284                   M 	SUBA	TIME_SEC,@60
       00193 183C     1     MOV A,@( 60 )
       00194 012C     1     SUB A, TIME_SEC 
   285                   M 	JPNZ	INT_CNT2_1
       00195 0E83     1     JBS  _STATUS , Z 
       00196 15A4     1     JMP  INT_CNT2_1 ,
   286 00197 00EC          	CLR	TIME_SEC
   287 00198 056D          	INC	TIME_MIN
   288                   M 	SUBA	TIME_SEC,@60
       00199 183C     1     MOV A,@( 60 )
       0019A 012C     1     SUB A, TIME_SEC 
   289                   M 	JPNZ	INT_CNT2_1
       0019B 0E83     1     JBS  _STATUS , Z 
       0019C 15A4     1     JMP  INT_CNT2_1 ,
   290 0019D 00ED          	CLR	TIME_MIN
   291 0019E 056E          	INC	TIME_HOUR
   292                   M 	SUBA	TIME_HOUR,@100
       0019F 1864     1     MOV A,@( 100 )
       001A0 012E     1     SUB A, TIME_HOUR 
   293                   M 	JPNZ	INT_CNT2_1
       001A1 0E83     1     JBS  _STATUS , Z 
       001A2 15A4     1     JMP  INT_CNT2_1 ,
   294 001A3 00EE          	CLR	TIME_HOUR
   295                     
   296 001A4               INT_CNT2_1:
   297                   M 	BANK	1
       001A4 0B84     1     BS  _RSR , 6 
       001A5 09C4     1     BC  _RSR , 7 
   298                     	
   299                   M 	DECZ	TMR_PROTOCOL
       001A6 0430     1     MOV A, TMR_PROTOCOL 
                      2  M  JPZ ( $ + 2 )
       001A7 0C83     2     JBC  _STATUS , Z 
       001A8 15AA     2     JMP ( $ + 2 ),
       001A9 01F0     1     DEC  TMR_PROTOCOL ,
   300                     
   301 001AA               INT_CHKCD:
   302                   M 	JPB	R1_SYS_FG,HOOKSTATUS,INT_CHKCD_HI_1
       001AA 0C72     1     JBC  R1_SYS_FG , HOOKSTATUS 
       001AB 15D2     1     JMP  INT_CHKCD_HI_1 ,
   303                   M 	JPB	FSK_FG,FSK_SUC,INT_CHKCD_HI
       001AC 0C5C     1     JBC  FSK_FG , FSK_SUC 
       001AD 15CA     1     JMP  INT_CHKCD_HI ,
   304                   M 	JPB	_FSR,1,INT_CHKCD_HI
       001AE 0C4A     1     JBC  _FSR , 1 
       001AF 15CA     1     JMP  INT_CHKCD_HI ,
   305 001B0               INT_CHKCD_LO:
   306                     	
   307 001B0 0433          	MOV	A,R1_CD
   308                   M 	JPZ	INT_END
       001B1 0C83     1     JBC  _STATUS , Z 
       001B2 142A     1     JMP  INT_END ,
   309 001B3 01F3          	DEC	R1_CD
   310 001B4 0000          	NOP
   311 001B5 0433          	MOV	A,R1_CD
   312                   M 	JPNZ	INT_END
       001B6 0E83     1     JBS  _STATUS , Z 
       001B7 142A     1     JMP  INT_END ,
   313                     	
   314                     	
   315                   M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       001B8 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       001B9 088B     2     BC  _RB , 2 
   316 001BA 1800          	MOV	A,@FSK_ADDR
   317 001BB 004C          	MOV	_RC,A
   318 001BC 0069          	MOV	FSK_ADR,A
   319 001BD               INT_CHKCD_CLRBUF:
   320 001BD 00CD          	CLR	_RD
   321 001BE 054C          	INC	_RC
   322                   M 	SUBA	_RC,@(FSK_ADDR+60)
       001BF 183C     1     MOV A,@(( FSK_ADDR + 60 ))
       001C0 010C     1     SUB A, _RC 
   323                   M 	JPNZ	INT_CHKCD_CLRBUF
       001C1 0E83     1     JBS  _STATUS , Z 
       001C2 15BD     1     JMP  INT_CHKCD_CLRBUF ,
   324                     	
   325 001C3 00E7          	CLR	FSK_COUNT
   326 001C4 00E4          	CLR	FSK_BYTE
   327                   M 	CRAM	FSK_FG,FSK_VALID
       001C5 081C     1     BC  FSK_FG , FSK_VALID 
   328                     	;CLR	R1_FSK_STATUS
   329                     	
   330 001C6 001F          	IOR	_IOCF
   331                     	;AND	A,@0x7f				; close dtmf
   332 001C7 1940          	OR	A,@0X40				; open fsk
   333 001C8 000F          	IOW	_IOCF
   334                     	;CRAM	_PPSR,3
   335 001C9 142A          	JMP	INT_END
   336 001CA               INT_CHKCD_HI:
   337 001CA 0433          	MOV	A,R1_CD
   338                   M 	JPNZ	INT_CHKCD_HI_1
       001CB 0E83     1     JBS  _STATUS , Z 
       001CC 15D2     1     JMP  INT_CHKCD_HI_1 ,
   339                   M 	SRAM	_PPSR,3				; dtmf power
       001CD 0AC5     1     BS  _PPSR , 3 
   340 001CE 001F          	IOR	_IOCF
   341 001CF 1ABE          	AND	A,@0XBE				; close fsk, tcc
   342 001D0 1980          	OR	A,@0X80				; open dtmf
   343 001D1 000F          	IOW	_IOCF
   344 001D2               INT_CHKCD_HI_1:
   345                   M 	MOV	R1_CD,@10
       001D2 180A     1     MOV A,@( 10 )
       001D3 0073     1     MOV  R1_CD ,A
   346 001D4               INT_CHKCD_END:
   347 001D4 142A          	JMP	INT_END
   348                     
   349                     ; --------------------------------------
   350                     ; FSK接收
   351 001D5               INT_FSK:
   352                   M 	MOV	_ISR,@0XBE
       001D5 18BE     1     MOV A,@( 190 )
       001D6 004F     1     MOV  _ISR ,A
   353                     	
   354                   M 	BANK	1
       001D7 0B84     1     BS  _RSR , 6 
       001D8 09C4     1     BC  _RSR , 7 
   355                     	
   356                   M 	JPB	_FSR,1,INT_CHKCD_HI
       001D9 0C4A     1     JBC  _FSR , 1 
       001DA 15CA     1     JMP  INT_CHKCD_HI ,
   357                   M 	JPB	FSK_FG,FSK_VALID,INT_FSK_0
       001DB 0C1C     1     JBC  FSK_FG , FSK_VALID 
       001DC 15E0     1     JMP  INT_FSK_0 ,
   358                   M 	JPB	_FSR,2,INT_CHKCD_HI
       001DD 0C8A     1     JBC  _FSR , 2 
       001DE 15CA     1     JMP  INT_CHKCD_HI ,
   359                   M 	SRAM	FSK_FG,FSK_VALID
       001DF 0A1C     1     BS  FSK_FG , FSK_VALID 
   360 001E0               INT_FSK_0:
   361 001E0 0427          	MOV	A,FSK_COUNT
   362                   M 	JPNZ	INT_FSK_1
       001E1 0E83     1     JBS  _STATUS , Z 
       001E2 15E5     1     JMP  INT_FSK_1 ,
   363                   M 	JPB	_FSR,2,INT_END
       001E3 0C8A     1     JBC  _FSR , 2 
       001E4 142A     1     JMP  INT_END ,
   364 001E5               INT_FSK_1:
   365                     	
   366                   M 	MOV	_TCC,@(256-92)
       001E5 18A4     1     MOV A,@(( 256 - 92 ))
       001E6 0041     1     MOV  _TCC ,A
   367 001E7 001F          	IOR	_IOCF
   368 001E8 1A7F          	AND	A,@0X7F				; close dtmf
   369 001E9 1901          	OR	A,@1				; open TCC
   370 001EA 000F          	IOW	_IOCF
   371                   M 	CRAM	_PPSR,3
       001EB 08C5     1     BC  _PPSR , 3 
   372                     	
   373 001EC 142A          	JMP	INT_END
   374                     
   375 001ED               INT_STD:
   376                     	;CRAM	_ISR,7
   377                   M 	MOV	_ISR,@0X7F
       001ED 187F     1     MOV A,@( 127 )
       001EE 004F     1     MOV  _ISR ,A
   378                     	
   379                   M 	JPNB	_RE,7,INT_END
       001EF 0FCE     1     JBS  _RE , 7 
       001F0 142A     1     JMP  INT_END ,
   380                     	
   381                   M 	BANK	1
       001F1 0B84     1     BS  _RSR , 6 
       001F2 09C4     1     BC  _RSR , 7 
   382                     
   383                   M 	MOV	R1_TMR_DTMF,@50
       001F3 1832     1     MOV A,@( 50 )
       001F4 0074     1     MOV  R1_TMR_DTMF ,A
   384                     
   385                   M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       001F5 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       001F6 088B     2     BC  _RB , 2 
   386                     	
   387 001F7 0015          	IOR	_IOC5
   388 001F8 1A0F          	AND	A,@0X0F
   389                   M 	JPZ	INT_STD_BEGIN			; 'D'
       001F9 0C83     1     JBC  _STATUS , Z 
       001FA 160E     1     JMP  INT_STD_BEGIN ,
   390 001FB 1D0D          	SUB	A,@0X0D				; 'A'
   391                   M 	JPZ	INT_STD_BEGIN
       001FC 0C83     1     JBC  _STATUS , Z 
       001FD 160E     1     JMP  INT_STD_BEGIN ,
   392 001FE 1D0E          	SUB	A,@0X0E				; 'B'
   393                   M 	JPZ	INT_STD_BEGIN
       001FF 0C83     1     JBC  _STATUS , Z 
       00200 160E     1     JMP  INT_STD_BEGIN ,
   394                   M 	JPNB	FSK_FG,DTMF_START,INT_END	; 没有起始符'A/B/D'不接收任何号码
       00201 0EDC     1     JBS  FSK_FG , DTMF_START 
       00202 142A     1     JMP  INT_END ,
   395 00203 0015          	IOR	_IOC5
   396 00204 1A0F          	AND	A,@0X0F
   397 00205 1D0F          	SUB	A,@0X0F				; 'C'
   398                   M 	JPZ	INT_STD_STOP
       00206 0C83     1     JBC  _STATUS , Z 
       00207 162C     1     JMP  INT_STD_STOP ,
   399 00208 0015          	IOR	_IOC5
   400 00209 1A0F          	AND	A,@0X0F
   401 0020A 1D0C          	SUB	A,@12
   402                   M 	JPNC	INT_END				; >12 退出
       0020B 0E03     1     JBS  _STATUS , C 
       0020C 142A     1     JMP  INT_END ,
   403 0020D 161C          	JMP	INT_STD_STORE
   404                     	
   405                     
   406 0020E               INT_STD_BEGIN:
   407                   M 	JPB	FSK_FG,DTMF_START,INT_STD_STORE
       0020E 0CDC     1     JBC  FSK_FG , DTMF_START 
       0020F 161C     1     JMP  INT_STD_STORE ,
   408                   M 	SRAM	FSK_FG,DTMF_START
       00210 0ADC     1     BS  FSK_FG , DTMF_START 
   409                   M 	MOV	_RC,@DTMF_ADDR
       00211 1800     1     MOV A,@( DTMF_ADDR )
       00212 004C     1     MOV  _RC ,A
   410                     	;IOR	_IOCF
   411                     	;AND	A,@0XBF				; close fsk
   412                     	;IOW	_IOCF
   413                   M 	CRAM	_FSR,3
       00213 08CA     1     BC  _FSR , 3 
   414 00214               INT_STD_CL:
   415 00214 00CD          	CLR	_RD
   416 00215 054C          	INC	_RC
   417                   M 	SUBA	_RC,@(DTMF_ADDR+20)
       00216 1814     1     MOV A,@(( DTMF_ADDR + 20 ))
       00217 010C     1     SUB A, _RC 
   418                   M 	JPNZ	INT_STD_CL
       00218 0E83     1     JBS  _STATUS , Z 
       00219 1614     1     JMP  INT_STD_CL ,
   419                   M 	MOV	DTMF_ADR,@DTMF_ADDR
       0021A 1800     1     MOV A,@( DTMF_ADDR )
       0021B 006A     1     MOV  DTMF_ADR ,A
   420                     
   421 0021C               INT_STD_STORE:
   422                   M 	SUBA	DTMF_ADR,@(DTMF_ADDR+20)
       0021C 1814     1     MOV A,@(( DTMF_ADDR + 20 ))
       0021D 012A     1     SUB A, DTMF_ADR 
   423                   M 	JPZ	INT_STD_STORE_FULL
       0021E 0C83     1     JBC  _STATUS , Z 
       0021F 1627     1     JMP  INT_STD_STORE_FULL ,
   424                   M 	MOV	_RC,DTMF_ADR
       00220 042A     1     MOV A, DTMF_ADR 
       00221 004C     1     MOV  _RC ,A
   425 00222 0015          	IOR	_IOC5
   426 00223 1A0F          	AND	A,@0X0F
   427 00224 004D          	MOV	_RD,A
   428 00225 056A          	INC	DTMF_ADR
   429 00226 142A          	JMP	INT_END
   430 00227               INT_STD_STORE_FULL:
   431                   M 	MOV	_RC,DTMF_ADR
       00227 042A     1     MOV A, DTMF_ADR 
       00228 004C     1     MOV  _RC ,A
   432                   M 	MOV	_RD,@0X0F
       00229 180F     1     MOV A,@( 15 )
       0022A 004D     1     MOV  _RD ,A
   433 0022B 142A          	JMP	INT_END
   434                     	
   435 0022C               INT_STD_STOP:
   436                   M 	MOV	_RC,DTMF_ADR
       0022C 042A     1     MOV A, DTMF_ADR 
       0022D 004C     1     MOV  _RC ,A
   437 0022E 0015          	IOR	_IOC5
   438 0022F 1A0F          	AND	A,@0X0F
   439 00230 004D          	MOV	_RD,A
   440                   M 	CRAM	FSK_FG,DTMF_START
       00231 08DC     1     BC  FSK_FG , DTMF_START 
   441                   M 	SRAM	FSK_FG,DTMF_SUC
       00232 0B1C     1     BS  FSK_FG , DTMF_SUC 
   442                     
   443 00233               INT_ERR:
   444 00233 142A          	JMP	INT_END
   445                     
   446                     
   447                     /***************************************
   448                     主程序
   449                     ***************************************/
   450 00234               MAIN:
   451                   M 	CALL	#INITIAL				; 初始化
       00234 1266     1     CALL ( INITIAL % 1024 ),
   452 00235 0000          	NOP
   453 00236 00FC          	CLR	SER_FLAG
   454                     
   455                     	
   456                     	
   457 00237               LOOP:
   458                   M 	CID_DECODE
                      2  M  PAGE #( FSK_DECODE ),
       00237 1E81     2     PAGE ( FSK_DECODE / 1024 ),
       00238 1000     1     CALL  FSK_DECODE ,
       00239 114D     1     CALL  DTMF_DECODE ,
       0023A 124B     1     CALL  CID_STORE ,
                      2  M  PAGE #( $ ),
       0023B 1E80     2     PAGE ( $ / 1024 ),
   459                   M 	CALL	#SER_BUF_CHK
                      2  M  LCALL  SER_BUF_CHK 
                      3  M  PAGE #( SER_BUF_CHK ),
       0023C 1E84     3     PAGE ( SER_BUF_CHK / 1024 ),
       0023D 120D     2     CALL ( SER_BUF_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       0023E 1E80     3     PAGE ( $ / 1024 ),
   460                   M 	CID_DECODE
                      2  M  PAGE #( FSK_DECODE ),
       0023F 1E81     2     PAGE ( FSK_DECODE / 1024 ),
       00240 1000     1     CALL  FSK_DECODE ,
       00241 114D     1     CALL  DTMF_DECODE ,
       00242 124B     1     CALL  CID_STORE ,
                      2  M  PAGE #( $ ),
       00243 1E80     2     PAGE ( $ / 1024 ),
   461                   M 	CALL	#TIMER_DRV			; 时间程序
       00244 1368     1     CALL ( TIMER_DRV % 1024 ),
   462                   M 	CID_DECODE
                      2  M  PAGE #( FSK_DECODE ),
       00245 1E81     2     PAGE ( FSK_DECODE / 1024 ),
       00246 1000     1     CALL  FSK_DECODE ,
       00247 114D     1     CALL  DTMF_DECODE ,
       00248 124B     1     CALL  CID_STORE ,
                      2  M  PAGE #( $ ),
       00249 1E80     2     PAGE ( $ / 1024 ),
   463                   M 	CALL	#VGA_UPDATE
                      2  M  LCALL  VGA_UPDATE 
                      3  M  PAGE #( VGA_UPDATE ),
       0024A 1E84     3     PAGE ( VGA_UPDATE / 1024 ),
       0024B 1000     2     CALL ( VGA_UPDATE % 1024 ),
                      3  M  PAGE #( $ ),
       0024C 1E80     3     PAGE ( $ / 1024 ),
   464                   M 	CID_DECODE
                      2  M  PAGE #( FSK_DECODE ),
       0024D 1E81     2     PAGE ( FSK_DECODE / 1024 ),
       0024E 1000     1     CALL  FSK_DECODE ,
       0024F 114D     1     CALL  DTMF_DECODE ,
       00250 124B     1     CALL  CID_STORE ,
                      2  M  PAGE #( $ ),
       00251 1E80     2     PAGE ( $ / 1024 ),
   465                     	;CALL	#TEST_L111
   466                   M 	CALL	#LCD_VIEW
                      2  M  LCALL  LCD_VIEW 
                      3  M  PAGE #( LCD_VIEW ),
       00252 1E87     3     PAGE ( LCD_VIEW / 1024 ),
       00253 12FA     2     CALL ( LCD_VIEW % 1024 ),
                      3  M  PAGE #( $ ),
       00254 1E80     3     PAGE ( $ / 1024 ),
   467                   M 	CID_DECODE
                      2  M  PAGE #( FSK_DECODE ),
       00255 1E81     2     PAGE ( FSK_DECODE / 1024 ),
       00256 1000     1     CALL  FSK_DECODE ,
       00257 114D     1     CALL  DTMF_DECODE ,
       00258 124B     1     CALL  CID_STORE ,
                      2  M  PAGE #( $ ),
       00259 1E80     2     PAGE ( $ / 1024 ),
   468                     	;CALL	#FSK_DECODE
   469                     	;CALL	#DTMF_DECODE
   470                     	;CALL	#CID_STORE
   471                   M 	CALL	#STCP_CHK
                      2  M  LCALL  STCP_CHK 
                      3  M  PAGE #( STCP_CHK ),
       0025A 1E83     3     PAGE ( STCP_CHK / 1024 ),
       0025B 1000     2     CALL ( STCP_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       0025C 1E80     3     PAGE ( $ / 1024 ),
   472                   M 	CID_DECODE
                      2  M  PAGE #( FSK_DECODE ),
       0025D 1E81     2     PAGE ( FSK_DECODE / 1024 ),
       0025E 1000     1     CALL  FSK_DECODE ,
       0025F 114D     1     CALL  DTMF_DECODE ,
       00260 124B     1     CALL  CID_STORE ,
                      2  M  PAGE #( $ ),
       00261 1E80     2     PAGE ( $ / 1024 ),
   473                     	;CALL	#AUDIO_SEND
   474                   M 	CALL	#DIAL_NUM
                      2  M  LCALL  DIAL_NUM 
                      3  M  PAGE #( DIAL_NUM ),
       00262 1E84     3     PAGE ( DIAL_NUM / 1024 ),
       00263 127F     2     CALL ( DIAL_NUM % 1024 ),
                      3  M  PAGE #( $ ),
       00264 1E80     3     PAGE ( $ / 1024 ),
   475 00265 1637          	JMP	LOOP
   476                     
   477                     /***************************************
   478                     副程序区
   479                     ***************************************/
   480                     
   481                     ; PAGE 0
   482                     include	"initial.asm"
     1            C        
     2 00266      C        INITIAL:
     3            C      M 	MOV	_FSR,@0X70			; 3.5826MHz
       00266 1870     1     MOV A,@( 112 )
       00267 004A     1     MOV  _FSR ,A
     4 00268 0011 C        	DISI
     5 00269 0004 C        	WDTC
     6            C      M 	PAGEIO	0
                      2  M  CRAM  _STATUS , 7 
       0026A 09C3     2     BC  _STATUS , 7 
     7            C      M 	BANK	0
       0026B 0984     1     BC  _RSR , 6 
       0026C 09C4     1     BC  _RSR , 7 
     8            C        	
     9            C      M 	MOV	_RE,@0X01			; set lcd 1/8 duty 1/4 bias
       0026D 1801     1     MOV A,@( 1 )
       0026E 004E     1     MOV  _RE ,A
    10            C      M 	MOV	_RE,@0X06			; set lcd display enable
       0026F 1806     1     MOV A,@( 6 )
       00270 004E     1     MOV  _RE ,A
    11            C        
    12            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       00271 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00272 088B     2     BC  _RB , 2 
    13 00273 12ED C        	CALL	CLR_LCD_RAM
    14            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00274 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00275 088B     2     BC  _RB , 2 
    15 00276 12ED C        	CALL	CLR_LCD_RAM
    16            C      M 	CIDBANK	2
                      2  M  CRAM  _RB , 0 
       00277 080B     2     BC  _RB , 0 
                      2  M  SRAM  _RB , 2 
       00278 0A8B     2     BS  _RB , 2 
    17 00279 12ED C        	CALL	CLR_LCD_RAM
    18            C      M 	CIDBANK	3
                      2  M  SRAM  _RB , 0 
       0027A 0A0B     2     BS  _RB , 0 
                      2  M  SRAM  _RB , 2 
       0027B 0A8B     2     BS  _RB , 2 
    19 0027C 12ED C        	CALL	CLR_LCD_RAM
    20            C      M 	BANK	0
       0027D 0984     1     BC  _RSR , 6 
       0027E 09C4     1     BC  _RSR , 7 
    21 0027F 12FA C        	CALL	CLR_REG
    22            C      M 	BANK	1
       00280 0B84     1     BS  _RSR , 6 
       00281 09C4     1     BC  _RSR , 7 
    23 00282 12FA C        	CALL	CLR_REG
    24            C      M 	BANK	2
       00283 0984     1     BC  _RSR , 6 
       00284 0BC4     1     BS  _RSR , 7 
    25 00285 12FA C        	CALL	CLR_REG
    26            C      M 	BANK	3
       00286 0B84     1     BS  _RSR , 6 
       00287 0BC4     1     BS  _RSR , 7 
    27 00288 12FA C        	CALL	CLR_REG
    28            C      M 	BANK	0
       00289 0984     1     BC  _RSR , 6 
       0028A 09C4     1     BC  _RSR , 7 
    29            C        	
    30            C      M 	IOW	_IOC5,@0X0F
       0028B 180F     1     MOV A,@( 15 )
       0028C 0005     1     IOW  _IOC5 ,
    31            C      M 	IOW	_IOC6,@0X00
       0028D 1800     1     MOV A,@( 0 )
       0028E 0006     1     IOW  _IOC6 ,
    32            C      M 	IOW	_IOC8,@0X00
       0028F 1800     1     MOV A,@( 0 )
       00290 0008     1     IOW  _IOC8 ,
    33            C      M 	IOW	_IOC9,@0X00
       00291 1800     1     MOV A,@( 0 )
       00292 0009     1     IOW  _IOC9 ,
    34            C        ;	
    35            C        	;IOW	_IOCA,@0XF0			; port7 as normal port, set p5,p6,p9 for lcd
    36            C      M 	IOW	_IOCA,@0XFA
       00293 18FA     1     MOV A,@( 250 )
       00294 000A     1     IOW  _IOCA ,
    37            C      M 	SRAM	_RB,6
       00295 0B8B     1     BS  _RB , 6 
    38            C      M 	SRAM	_RB,7				; set p8 for lcd
       00296 0BCB     1     BS  _RB , 7 
    39            C        	
    40            C      M 	IOW	_IOC7,@0X18
       00297 1818     1     MOV A,@( 24 )
       00298 0007     1     IOW  _IOC7 ,
    41            C      M 	MOV	_R7,@0XFF			; p7.5 = 1
       00299 18FF     1     MOV A,@( 255 )
       0029A 0047     1     MOV  _R7 ,A
    42            C        	
    43            C      M 	SRAM	_RE,3				; set /WURING enable
       0029B 0ACE     1     BS  _RE , 3 
    44            C        	
    45            C      M 	PAGEIO	1
                      2  M  SRAM  _STATUS , 7 
       0029C 0BC3     2     BS  _STATUS , 7 
    46            C      M 	IOW	_IOCE,@0X0C
       0029D 180C     1     MOV A,@( 12 )
       0029E 000E     1     IOW  _IOCE ,
    47            C      M 	IOW	_IOCB,@0X80			; count1
       0029F 1880     1     MOV A,@( 128 )
       002A0 000B     1     IOW  _IOCB ,
    48            C      M 	IOW	_IOCC,@0XEF			; count2
       002A1 18EF     1     MOV A,@( 239 )
       002A2 000C     1     IOW  _IOCC ,
    49            C      M 	PAGEIO	0
                      2  M  CRAM  _STATUS , 7 
       002A3 09C3     2     BC  _STATUS , 7 
    50            C        	
    51            C        ; ---------- dtmf open -----------
    52            C      M 	SRAM	_PPSR,3				; open the PWDN to receive the dtmf data
       002A4 0AC5     1     BS  _PPSR , 3 
    53            C      M 	CRAM	_RB,4
       002A5 090B     1     BC  _RB , 4 
    54            C      M 	CRAM	_RB,5				; tone detection present time 5ms
       002A6 094B     1     BC  _RB , 5 
    55            C        	
    56            C      M 	CRAM	_STATUS,5			; close the tone genarater1
       002A7 0943     1     BC  _STATUS , 5 
    57            C      M 	CRAM	_STATUS,6			; close the tone genarater2
       002A8 0983     1     BC  _STATUS , 6 
    58            C        
    59            C        ; ---------- fsk open ------------
    60            C      M 	SRAM	_FSR,3				; /FSKPWR = 1
       002A9 0ACA     1     BS  _FSR , 3 
    61            C        	
    62            C      M 	IOW	_IOCF,@0XB0			; DTMF,CONT2,CONT1  ENABLE. fsk disable
       002AA 18B0     1     MOV A,@( 176 )
       002AB 000F     1     IOW  _IOCF ,
    63            C      M 	MOV	_ISR,@0
       002AC 1800     1     MOV A,@( 0 )
       002AD 004F     1     MOV  _ISR ,A
    64            C      M 	MOV	FSK_FG,@0
       002AE 1800     1     MOV A,@( 0 )
       002AF 005C     1     MOV  FSK_FG ,A
    65            C      M 	MOV	SYS_FG,@0
       002B0 1800     1     MOV A,@( 0 )
       002B1 005E     1     MOV  SYS_FG ,A
    66            C      M 	MOV	STAMP_FG,@0
       002B2 1800     1     MOV A,@( 0 )
       002B3 005D     1     MOV  STAMP_FG ,A
    67            C        	
    68 002B4 1802 C        	MOV	A,@2
    69 002B5 0002 C        	CONTW
    70            C        
    71            C        ; ---------- INFO INIT ------------
    72            C      M 	BANK	1
       002B6 0B84     1     BS  _RSR , 6 
       002B7 09C4     1     BC  _RSR , 7 
    73            C      M 	MOV	R1_LCD_CONTRAST,@0X03		; LCD对比度3，
       002B8 1803     1     MOV A,@( 3 )
       002B9 0075     1     MOV  R1_LCD_CONTRAST ,A
    74            C      M 	MOV	R1_CODE23,@0X0			; CODE=000
       002BA 1800     1     MOV A,@( 0 )
       002BB 0076     1     MOV  R1_CODE23 ,A
    75            C      M 	ANDA	R1_LCD_CONTRAST,@0X0F
       002BC 180F     1     MOV A,@( 15 )
       002BD 02B5     1     AND A, R1_LCD_CONTRAST 
    76 002BE 1318 C        	CALL	LCD_CONTRAST_APPLY
    77            C      M 	BANK	0
       002BF 0984     1     BC  _RSR , 6 
       002C0 09C4     1     BC  _RSR , 7 
    78            C      M 	MOV	LCALL12,@0XFF
       002C1 18FF     1     MOV A,@( 255 )
       002C2 0070     1     MOV  LCALL12 ,A
    79            C      M 	MOV	LCALL34,@0XFF			; 区域码：无
       002C3 18FF     1     MOV A,@( 255 )
       002C4 0071     1     MOV  LCALL34 ,A
    80            C      M 	MOV	LCALL5,@0XFF
       002C5 18FF     1     MOV A,@( 255 )
       002C6 0072     1     MOV  LCALL5 ,A
    81            C        
    82            C        ; ---------- time init ------------
    83 002C7 00EA C        	CLR	SEC_REG
    84 002C8 00E9 C        	CLR	MIN_REG
    85 002C9 00E8 C        	CLR	HOUR_REG
    86 002CA 00E7 C        	CLR	WEEK_REG
    87            C      M 	MOV	DAY_REG,@1
       002CB 1801     1     MOV A,@( 1 )
       002CC 0066     1     MOV  DAY_REG ,A
    88            C      M 	MOV	MONTH_REG,@1
       002CD 1801     1     MOV A,@( 1 )
       002CE 0065     1     MOV  MONTH_REG ,A
    89            C      M 	MOV	YEAR_REG,@0
       002CF 1800     1     MOV A,@( 0 )
       002D0 0064     1     MOV  YEAR_REG ,A
    90            C        
    91            C      M 	CALL	#BLANK_LCD
       002D1 1306     1     CALL ( BLANK_LCD % 1024 ),
    92            C      M 	CRAM	SYS_FG,LANGUAGE
       002D2 081E     1     BC  SYS_FG , LANGUAGE 
    93            C        	
    94            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       002D3 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       002D4 088B     2     BC  _RB , 2 
    95            C      M 	MOV	_RC,@LCD_CTRL
       002D5 1880     1     MOV A,@( LCD_CTRL )
       002D6 004C     1     MOV  _RC ,A
    96            C      M 	MOV	_RD,@0X80
       002D7 1880     1     MOV A,@( 128 )
       002D8 004D     1     MOV  _RD ,A
    97            C      M 	PAGE	#VGA_STAMP
       002D9 1E85     1     PAGE ( VGA_STAMP / 1024 ),
    98            C        	
    99 002DA 1072 C        	CALL	CLR_STAMP
   100 002DB 1078 C        	CALL	CLR_NUM1
   101 002DC 107E C        	CALL	CLR_NUM2
   102 002DD 1084 C        	CALL	CLR_STR
   103            C        	/*
   104            C        	MOV	A,@STYLE_CENTER			; 居中显示
   105            C        	CALL	VGA_STR
   106            C        	MOV	A,@(WD_INITIAL)
   107            C        	CALL	VGA_STRING
   108            C        	MOV	A,@CH_END
   109            C        	CALL	VGA_STR
   110            C        	*/
   111            C      M 	PAGE	#($)
       002DE 1E80     1     PAGE ( $ / 1024 ),
   112            C      M 	CALL	#VIEW_STR
                      2  M  LCALL  VIEW_STR 
                      3  M  PAGE #( VIEW_STR ),
       002DF 1E87     3     PAGE ( VIEW_STR / 1024 ),
       002E0 129D     2     CALL ( VIEW_STR % 1024 ),
                      3  M  PAGE #( $ ),
       002E1 1E80     3     PAGE ( $ / 1024 ),
   113            C        	
   114            C      M 	SRAM	STAMP_FG,STAMP_SLASH		; 日期之间的斜杠，固定亮。
       002E2 0B5D     1     BS  STAMP_FG , STAMP_SLASH 
   115            C      M 	SRAM	SYS_FG,STAMP
       002E3 0A9E     1     BS  SYS_FG , STAMP 
   116            C      M 	SRAM	SYS_FG,SYS_CLOCK
       002E4 0ADE     1     BS  SYS_FG , SYS_CLOCK 
   117            C      M 	CRAM	SYS_FG,LOCK_TOPLINE
       002E5 095E     1     BC  SYS_FG , LOCK_TOPLINE 
   118            C        	
   119 002E6 0010 C        	ENI
   120            C      M 	MOV	TMR_DELAY,@250
       002E7 18FA     1     MOV A,@( 250 )
       002E8 0075     1     MOV  TMR_DELAY ,A
   121 002E9 1322 C        	CALL	WAIT_FLASH
   122            C        	
   123            C        	
   124            C      M 	BANK	1
       002EA 0B84     1     BS  _RSR , 6 
       002EB 09C4     1     BC  _RSR , 7 
   125 002EC 0012 C        	RET
   126            C        
   127 002ED      C        CLR_LCD_RAM:
   128 002ED 00D6 C        	CLR	TEMP0
   129 002EE      C        CLR_LCD_RAM_LOOP:
   130            C      M 	MOV	_RC,TEMP0
       002EE 0416     1     MOV A, TEMP0 
       002EF 004C     1     MOV  _RC ,A
   131 002F0 00CD C        	CLR	_RD
   132 002F1 0556 C        	INC	TEMP0
   133            C      M 	SUBA	TEMP0,@0XFF
       002F2 18FF     1     MOV A,@( 255 )
       002F3 0116     1     SUB A, TEMP0 
   134            C      M 	JPNZ	CLR_LCD_RAM_LOOP
       002F4 0E83     1     JBS  _STATUS , Z 
       002F5 16EE     1     JMP  CLR_LCD_RAM_LOOP ,
   135            C      M 	MOV	_RC,TEMP0
       002F6 0416     1     MOV A, TEMP0 
       002F7 004C     1     MOV  _RC ,A
   136 002F8 00CD C        	CLR	_RD
   137 002F9 0012 C        	RET
   138            C        
   139 002FA      C        CLR_REG:
   140            C      M 	AND	_RSR,@0XC0
       002FA 18C0     1     MOV A,@( 192 )
       002FB 02C4     1     AND  _RSR ,A
   141            C      M 	ADD	_RSR,@0X0F
       002FC 180F     1     MOV A,@( 15 )
       002FD 03C4     1     ADD  _RSR ,A
   142 002FE      C        CLR_REG_LOOP:
   143 002FE 0544 C        	INC	_RSR
   144 002FF 00C0 C        	CLR	_R0
   145            C      M 	ANDA	_RSR,@0X3F
       00300 183F     1     MOV A,@( 63 )
       00301 0284     1     AND A, _RSR 
   146 00302 1D3F C        	SUB	A,@0X3F
   147            C      M 	JPNZ	CLR_REG_LOOP
       00303 0E83     1     JBS  _STATUS , Z 
       00304 16FE     1     JMP  CLR_REG_LOOP ,
   148 00305 0012 C        	RET
   149            C        
   150 00306      C        BLANK_LCD:
   151            C      M 	MOV	TEMP0,@0
       00306 1800     1     MOV A,@( 0 )
       00307 0056     1     MOV  TEMP0 ,A
   152 00308      C        BLANK_LCD_LOOP:
   153 00308 0416 C        	MOV	A,TEMP0
   154 00309 000B C        	IOW	_IOCB
   155 0030A 1800 C        	MOV	A,@0
   156 0030B 000C C        	IOW	_IOCC
   157 0030C 0556 C        	INC	TEMP0
   158            C      M 	SUBA	TEMP0,@0X28
       0030D 1828     1     MOV A,@( 40 )
       0030E 0116     1     SUB A, TEMP0 
   159            C      M 	JPNZ	BLANK_LCD_LOOP1
       0030F 0E83     1     JBS  _STATUS , Z 
       00310 1713     1     JMP  BLANK_LCD_LOOP1 ,
   160            C      M 	MOV	TEMP0,@0X40
       00311 1840     1     MOV A,@( 64 )
       00312 0056     1     MOV  TEMP0 ,A
   161 00313      C        BLANK_LCD_LOOP1:
   162            C      M 	SUBA	TEMP0,@0X68
       00313 1868     1     MOV A,@( 104 )
       00314 0116     1     SUB A, TEMP0 
   163            C      M 	JPNZ	BLANK_LCD_LOOP
       00315 0E83     1     JBS  _STATUS , Z 
       00316 1708     1     JMP  BLANK_LCD_LOOP ,
   164            C        	
   165 00317 0012 C        	RET
   166            C        
   167            C        /*****************************
   168            C        LCD对比度
   169            C        *****************************/
   170 00318      C        LCD_CONTRAST_APPLY:
   171            C        	
   172 00318 1A0F C        	AND	A,@0X0F
   173            C        ;	ADD	A,@2				; OTP
   174 00319 1FFF C        	ADD	A,@0XFF				; 仿真
   175 0031A 0056 C        	MOV	TEMP0,A
   176            C      M 	CLRC
       0031B 0803     1     BC  _STATUS , C 
   177 0031C 06D6 C        	RLC	TEMP0
   178 0031D 001A C        	IOR	_IOCA
   179 0031E 1AF1 C        	AND	A,@0XF1
   180 0031F 0396 C        	ADD	A,TEMP0
   181 00320 000A C        	IOW	_IOCA
   182            C        	
   183 00321 0012 C        	RET
   184            C        
   185            C        
   186            C        /*****************************
   187            C        等待FLASH初始化
   188            C        *****************************/
   189 00322      C        WAIT_FLASH:
   190            C        	;CALL	#LCD_VIEW
   191            C        	
   192            C      M 	BANK	0
       00322 0984     1     BC  _RSR , 6 
       00323 09C4     1     BC  _RSR , 7 
   193            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00324 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00325 088B     2     BC  _RB , 2 
   194            C        	
   195            C        	;MOV	TMR_NAME,@40			; 等待初始化20秒
   196            C      M 	MOV	TMR_NAME,@20
       00326 1814     1     MOV A,@( 20 )
       00327 0078     1     MOV  TMR_NAME ,A
   197 00328      C        WAIT_FLASH_LOOP:
   198 00328 043C C        	MOV	A,SER_FLAG
   199            C      M 	JPNZ	WAIT_FLASH_OK
       00329 0E83     1     JBS  _STATUS , Z 
       0032A 1751     1     JMP  WAIT_FLASH_OK ,
   200 0032B 0438 C        	MOV	A,TMR_NAME
   201            C      M 	JPNZ	WAIT_FLASH_LOOP
       0032C 0E83     1     JBS  _STATUS , Z 
       0032D 1728     1     JMP  WAIT_FLASH_LOOP ,
   202 0032E      C        WAIT_FLASH_TIMEOUT:
   203            C      M 	PAGE	#VGA_STR
       0032E 1E85     1     PAGE ( VGA_STR / 1024 ),
   204 0032F 1860 C        	MOV	A,@(STYLE_CENTER)
   205 00330 104B C        	CALL	VGA_STR
   206 00331 1806 C        	MOV	A,@WD_INITIAL
   207 00332 11BF C        	CALL	VGA_STRING
   208 00333 1824 C        	MOV	A,@CH_BLANK
   209 00334 104B C        	CALL	VGA_STR
   210 00335 181D C        	MOV	A,@CH_T
   211 00336 104B C        	CALL	VGA_STR
   212 00337 1812 C        	MOV	A,@CH_I
   213 00338 104B C        	CALL	VGA_STR
   214 00339 1816 C        	MOV	A,@CH_M
   215 0033A 104B C        	CALL	VGA_STR
   216 0033B 180E C        	MOV	A,@CH_E
   217 0033C 104B C        	CALL	VGA_STR
   218 0033D 1818 C        	MOV	A,@CH_O
   219 0033E 104B C        	CALL	VGA_STR
   220 0033F 181E C        	MOV	A,@CH_U
   221 00340 104B C        	CALL	VGA_STR
   222 00341 181D C        	MOV	A,@CH_T
   223 00342 104B C        	CALL	VGA_STR
   224 00343 18FF C        	MOV	A,@CH_END
   225 00344 104B C        	CALL	VGA_STR
   226            C      M 	PAGE	#($)
       00345 1E80     1     PAGE ( $ / 1024 ),
   227            C      M 	CALL	#VIEW_STR
                      2  M  LCALL  VIEW_STR 
                      3  M  PAGE #( VIEW_STR ),
       00346 1E87     3     PAGE ( VIEW_STR / 1024 ),
       00347 129D     2     CALL ( VIEW_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00348 1E80     3     PAGE ( $ / 1024 ),
   228            C      M 	BANK	0
       00349 0984     1     BC  _RSR , 6 
       0034A 09C4     1     BC  _RSR , 7 
   229            C      M 	MOV	TMR_DELAY,@250
       0034B 18FA     1     MOV A,@( 250 )
       0034C 0075     1     MOV  TMR_DELAY ,A
   230 0034D 0435 C        	MOV	A,TMR_DELAY
   231            C      M 	JPNZ	$-2
       0034E 0E83     1     JBS  _STATUS , Z 
       0034F 174D     1     JMP ( $ - 2 ),
   232 00350 1767 C        	JMP	WAIT_FLASH_RET
   233 00351      C        WAIT_FLASH_OK:
   234 00351 00EA C        	CLR	SEC_REG
   235            C      M 	MOV	TMR_NAME,@4
       00352 1804     1     MOV A,@( 4 )
       00353 0078     1     MOV  TMR_NAME ,A
   236 00354      C        WAIT_FLASH_OK_LOOP:
   237            C      M 	CALL	#STCP_CHK
                      2  M  LCALL  STCP_CHK 
                      3  M  PAGE #( STCP_CHK ),
       00354 1E83     3     PAGE ( STCP_CHK / 1024 ),
       00355 1000     2     CALL ( STCP_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       00356 1E80     3     PAGE ( $ / 1024 ),
   238            C        	
   239            C      M 	PAGE	#(VGA_STR)
       00357 1E85     1     PAGE ( VGA_STR / 1024 ),
   240 00358 1860 C        	MOV	A,@STYLE_CENTER			; 居中显示
   241 00359 104B C        	CALL	VGA_STR
   242 0035A 1806 C        	MOV	A,@(WD_INITIAL)
   243 0035B 11BF C        	CALL	VGA_STRING
   244 0035C 18FF C        	MOV	A,@CH_END
   245 0035D 104B C        	CALL	VGA_STR
   246            C      M 	PAGE	#($)
       0035E 1E80     1     PAGE ( $ / 1024 ),
   247            C        	
   248            C      M 	CALL	#VIEW_STR
                      2  M  LCALL  VIEW_STR 
                      3  M  PAGE #( VIEW_STR ),
       0035F 1E87     3     PAGE ( VIEW_STR / 1024 ),
       00360 129D     2     CALL ( VIEW_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00361 1E80     3     PAGE ( $ / 1024 ),
   249            C        	
   250            C      M 	BANK	0
       00362 0984     1     BC  _RSR , 6 
       00363 09C4     1     BC  _RSR , 7 
   251 00364 0438 C        	MOV	A,TMR_NAME
   252            C      M 	JPNZ	WAIT_FLASH_OK_LOOP
       00365 0E83     1     JBS  _STATUS , Z 
       00366 1754     1     JMP  WAIT_FLASH_OK_LOOP ,
   253 00367      C        WAIT_FLASH_RET:
   254 00367 0012 C        	RET
   255            C        
   256            C        /*
   257            C        WAIT_FLASH:
   258            C        	CALL	#LCD_VIEW
   259            C        	
   260            C        	CIDBANK	1
   261            C        	BANK	0
   262            C        	MOV	TMR_NAME,@4
   263            C        	JPB	SER_FLAG,7,WAIT_FLASH_OK
   264            C        	JPB	SER_FLAG,4,WAIT_FLASH_OK
   265            C        	MOV	_RC,@(TCP_ADDR+0)
   266            C        	JPB	_RD,7,WAIT_FLASH_OK
   267            C        	;JPB	SER_FLAG,7,WAIT_FLASH_OK
   268            C        	
   269            C        	MOV	A,TMR_DELAY
   270            C        	JPNZ	WAIT_FLASH
   271            C        	INC	BANK0_TEMP0
   272            C        	SUBA	BANK0_TEMP0,@10
   273            C        	JPZ	WAIT_FLASH_TIMEOUT		; 等待FLASH超时
   274            C        	CALL	#SEND_DESIRE
   275            C        	JPNZ	WAIT_FLASH_RET
   276            C        	MOV	A,@0X88
   277            C        	CALL	#STORE_SER
   278            C        	MOV	A,@0X88				; 初始化请求
   279            C        	CALL	#STORE_SER
   280            C        	MOV	A,@CH_END
   281            C        	CALL	#STORE_SER
   282            C        	CALL	#SER_BUF_CHK
   283            C        	MOV	TMR_DELAY,@250
   284            C        	JMP	WAIT_FLASH
   285            C        WAIT_FLASH_TIMEOUT:
   286            C        	PAGE	#VGA_STR
   287            C        	MOV	A,@(STYLE_CENTER)
   288            C        	CALL	VGA_STR
   289            C        	MOV	A,@WD_INITIAL
   290            C        	CALL	VGA_STRING
   291            C        	MOV	A,@CH_BLANK
   292            C        	CALL	VGA_STR
   293            C        	MOV	A,@CH_T
   294            C        	CALL	VGA_STR
   295            C        	MOV	A,@CH_I
   296            C        	CALL	VGA_STR
   297            C        	MOV	A,@CH_M
   298            C        	CALL	VGA_STR
   299            C        	MOV	A,@CH_E
   300            C        	CALL	VGA_STR
   301            C        	MOV	A,@CH_O
   302            C        	CALL	VGA_STR
   303            C        	MOV	A,@CH_U
   304            C        	CALL	VGA_STR
   305            C        	MOV	A,@CH_T
   306            C        	CALL	VGA_STR
   307            C        	MOV	A,@CH_END
   308            C        	CALL	VGA_STR
   309            C        	PAGE	#($)
   310            C        	JMP	WAIT_FLASH_RET
   311            C        WAIT_FLASH_OK:
   312            C        WAIT_FLASH_OK_LOOP:
   313            C        	CALL	#STCP_CHK
   314            C        	;CALL	#DEL_FINISHED
   315            C        	BANK	0
   316            C        	MOV	A,TMR_NAME
   317            C        	JPNZ	WAIT_FLASH_OK_LOOP
   318            C        WAIT_FLASH_RET:
   319            C        	RET
   320            C        */
   483                     include	"timer.asm"
     1            C        
     2 00368      C        TIMER_DRV:
     3            C      M 	BANK	0
       00368 0984     1     BC  _RSR , 6 
       00369 09C4     1     BC  _RSR , 7 
     4            C        	;CALL	CHECK_WEEK
     5 0036A 1387 C        	CALL	CHECK_DAY
     6 0036B 0126 C        	SUB	A,DAY_REG
     7            C      M 	JPNZ	TIMER_DRV_RET
       0036C 0E83     1     JBS  _STATUS , Z 
       0036D 1778     1     JMP  TIMER_DRV_RET ,
     8            C      M 	MOV	DAY_REG,@1
       0036E 1801     1     MOV A,@( 1 )
       0036F 0066     1     MOV  DAY_REG ,A
     9 00370 0565 C        	INC	MONTH_REG
    10            C      M 	SUBA	MONTH_REG,@13
       00371 180D     1     MOV A,@( 13 )
       00372 0125     1     SUB A, MONTH_REG 
    11            C      M 	JPNZ	TIMER_DRV_RET
       00373 0E83     1     JBS  _STATUS , Z 
       00374 1778     1     JMP  TIMER_DRV_RET ,
    12            C      M 	MOV	MONTH_REG,@1
       00375 1801     1     MOV A,@( 1 )
       00376 0065     1     MOV  MONTH_REG ,A
    13 00377 0564 C        	INC	YEAR_REG
    14            C        
    15 00378      C        TIMER_DRV_RET:
    16 00378 0012 C        	RET
    17            C        
    18 00379      C        CHECK_WEEK:
    19            C      M 	SUBA	WEEK_REG,@0
       00379 1800     1     MOV A,@( 0 )
       0037A 0127     1     SUB A, WEEK_REG 
    20            C      M 	JPNZ	CHECK_REG_1
       0037B 0E83     1     JBS  _STATUS , Z 
       0037C 1780     1     JMP  CHECK_REG_1 ,
    21            C      M 	MOV	WEEK_REG,@7
       0037D 1807     1     MOV A,@( 7 )
       0037E 0067     1     MOV  WEEK_REG ,A
    22 0037F 1786 C        	JMP	CHECK_REG_RET
    23 00380      C        CHECK_REG_1:
    24            C      M 	SUBA	WEEK_REG,@8
       00380 1808     1     MOV A,@( 8 )
       00381 0127     1     SUB A, WEEK_REG 
    25            C      M 	JPNZ	CHECK_REG_RET
       00382 0E83     1     JBS  _STATUS , Z 
       00383 1786     1     JMP  CHECK_REG_RET ,
    26            C      M 	MOV	WEEK_REG,@1
       00384 1801     1     MOV A,@( 1 )
       00385 0067     1     MOV  WEEK_REG ,A
    27 00386      C        CHECK_REG_RET:
    28 00386 0012 C        	RET
    29            C        
    30 00387      C        CHECK_DAY:
    31 00387 0425 C        	MOV	A,MONTH_REG
    32 00388 1394 C        	CALL	MONTH_TAB
    33 00389 0056 C        	MOV	TEMP0,A
    34            C      M 	JPB	SYS_FG,LEEP_YEAR,CHECK_DAY_RET
       0038A 0D1E     1     JBC  SYS_FG , LEEP_YEAR 
       0038B 1792     1     JMP  CHECK_DAY_RET ,
    35            C      M 	SUBA	MONTH_REG,@2
       0038C 1802     1     MOV A,@( 2 )
       0038D 0125     1     SUB A, MONTH_REG 
    36            C      M 	JPNZ	CHECK_DAY_RET
       0038E 0E83     1     JBS  _STATUS , Z 
       0038F 1792     1     JMP  CHECK_DAY_RET ,
    37            C      M 	ADD	TEMP0,@1
       00390 1801     1     MOV A,@( 1 )
       00391 03D6     1     ADD  TEMP0 ,A
    38 00392      C        CHECK_DAY_RET:
    39 00392 0416 C        	MOV	A,TEMP0
    40 00393 0012 C        	RET
    41            C        
    42 00394      C        MONTH_TAB:
    43 00394 0020 C        	TBL
    44 00395 1C00 C        	RETL	@0
    45 00396 1C20 C        	RETL	@(31+1)
    46 00397 1C1D C        	RETL	@(28+1)
    47 00398 1C20 C        	RETL	@(31+1)
    48 00399 1C1F C        	RETL	@(30+1)
    49 0039A 1C20 C        	RETL	@(31+1)
    50 0039B 1C1F C        	RETL	@(30+1)
    51 0039C 1C20 C        	RETL	@(31+1)
    52 0039D 1C20 C        	RETL	@(31+1)
    53 0039E 1C1F C        	RETL	@(30+1)
    54 0039F 1C20 C        	RETL	@(31+1)
    55 003A0 1C1F C        	RETL	@(30+1)
    56 003A1 1C20 C        	RETL	@(31+1)
    57            C        
   484                     include	"ASCII.asm"
     1            C        /***************************************
     2            C        解释ASCII
     3            C        ***************************************/
     4       0010 C        ASC_REG	==	INT_TEMP0
     5            C        
     6 003A2      C        ASCII_NUM:
     7 003A2 0011 C        	DISI
     8 003A3 0050 C        	MOV	ASC_REG,A
     9 003A4 1D20 C        	SUB	A,@32
    10            C      M 	JPZ	ASCII_NUM_SPACE
       003A5 0C83     1     JBC  _STATUS , Z 
       003A6 17AC     1     JMP  ASCII_NUM_SPACE ,
    11            C      M 	SUBA	ASC_REG,@58
       003A7 183A     1     MOV A,@( 58 )
       003A8 0110     1     SUB A, ASC_REG 
    12            C      M 	JPNC	ASCII_NUM_NUM
       003A9 0E03     1     JBS  _STATUS , C 
       003AA 17AE     1     JMP  ASCII_NUM_NUM ,
    13 003AB 17B1 C        	JMP	ASCII_NUM_ERROR
    14 003AC      C        ASCII_NUM_SPACE:
    15 003AC 1810 C        	MOV	A,@0X10
    16 003AD 17D3 C        	JMP	ASCII_RET
    17 003AE      C        ASCII_NUM_NUM:
    18            C      M 	SUBA	ASC_REG,@48
       003AE 1830     1     MOV A,@( 48 )
       003AF 0110     1     SUB A, ASC_REG 
    19 003B0 17D3 C        	JMP	ASCII_RET
    20 003B1      C        ASCII_NUM_ERROR:
    21 003B1 1810 C        	MOV	A,@0X10
    22 003B2 17D3 C        	JMP	ASCII_RET
    23            C        
    24 003B3      C        ASCII_CH:
    25 003B3 0011 C        	DISI
    26 003B4 0050 C        	MOV	ASC_REG,A
    27 003B5 1D20 C        	SUB	A,@32
    28            C      M 	JPZ	ASCII_CH_SPACE
       003B6 0C83     1     JBC  _STATUS , Z 
       003B7 17C5     1     JMP  ASCII_CH_SPACE ,
    29            C      M 	SUBA	ASC_REG,@58
       003B8 183A     1     MOV A,@( 58 )
       003B9 0110     1     SUB A, ASC_REG 
    30            C      M 	JPNC	ASCII_CH_NUM
       003BA 0E03     1     JBS  _STATUS , C 
       003BB 17C7     1     JMP  ASCII_CH_NUM ,
    31            C      M 	SUBA	ASC_REG,@91
       003BC 185B     1     MOV A,@( 91 )
       003BD 0110     1     SUB A, ASC_REG 
    32            C      M 	JPNC	ASCII_CH_CLETTER
       003BE 0E03     1     JBS  _STATUS , C 
       003BF 17CA     1     JMP  ASCII_CH_CLETTER ,
    33            C      M 	SUBA	ASC_REG,@123
       003C0 187B     1     MOV A,@( 123 )
       003C1 0110     1     SUB A, ASC_REG 
    34            C      M 	JPNC	ASCII_CH_SLETTER
       003C2 0E03     1     JBS  _STATUS , C 
       003C3 17CE     1     JMP  ASCII_CH_SLETTER ,
    35 003C4 17D2 C        	JMP	ASCII_CH_ERROR			; ERROR
    36 003C5      C        ASCII_CH_SPACE:
    37 003C5 1824 C        	MOV	A,@CH_BLANK
    38 003C6 17D3 C        	JMP	ASCII_RET
    39 003C7      C        ASCII_CH_NUM:
    40            C      M 	SUBA	ASC_REG,@48
       003C7 1830     1     MOV A,@( 48 )
       003C8 0110     1     SUB A, ASC_REG 
    41 003C9 17D3 C        	JMP	ASCII_RET
    42 003CA      C        ASCII_CH_CLETTER:
    43            C      M 	SUBA	ASC_REG,@65
       003CA 1841     1     MOV A,@( 65 )
       003CB 0110     1     SUB A, ASC_REG 
    44 003CC 1F0A C        	ADD	A,@CH_A
    45 003CD 17D3 C        	JMP	ASCII_RET
    46 003CE      C        ASCII_CH_SLETTER:
    47            C      M 	SUBA	ASC_REG,@97
       003CE 1861     1     MOV A,@( 97 )
       003CF 0110     1     SUB A, ASC_REG 
    48 003D0 1F0A C        	ADD	A,@CH_A
    49 003D1 17D3 C        	JMP	ASCII_RET
    50 003D2      C        ASCII_CH_ERROR:
    51 003D2 1824 C        	MOV	A,@CH_BLANK
    52            C        
    53 003D3      C        ASCII_RET:
    54 003D3 0010 C        	ENI
    55 003D4 0012 C        	RET
    56            C        
   485                     ORG	0X03E0
   486                     include	"ser_com.asm"
     1            C        ;org 0x0400
     2            C        ;-------------------------------------------------------------------------
     3       00E0 C        SER_BASE	EQU	0XE0	;CALL ID RAM
     4       003F C        SER_DATA	EQU	0X3F
     5       003C C        SER_FLAG	EQU	0X3C	
     6            C        ;				bit7=收到一串数据/命令
     7            C        ;				bit6=请求发
     8            C        ;				bit5=正在发
     9            C        ;				bit4=正在收
    10            C        ;				bit(3..0)=CLK计数
    11       003D C        SER_CONT	EQU	0X3D
    12       003E C        SER_SEND	EQU	0X3E
    13            C        ;-------------------------------------------------------------------------------
    14            C        ;DAT      	equ 0x03---serial's data line
    15            C        ;WR      	equ 0x04---serial's read and write line
    16            C        ;CLK      	equ 0x05---serial's clock line
    17            C        ;-------------------------------------------------------------------------------
    18       0003 C        P_DAT		==	3	;3
    19       0004 C        P_WR		==	4
    20       0005 C        P_CLK		==	5
    21            C        ;-------------------------------------------------------------------------------
    22            C        ;SER_FLAG
    23            C        ;	BIT.7	= receive end
    24            C        ;	BIT.6	= send request
    25            C        ;	BIT.5	= sending
    26            C        ;	BIT.4	= receiving
    27            C        ;	bit(3..0) = 收/发bit 计数
    28            C        ;-------------------------------------------------------------------------------
    29            C        ;	SER_RECE_DATA : 将收到的数据存入缓冲区
    30            C        ;		SER_BASE : 缓冲区的基地址
    31            C        ;		SER_CONT : 缓冲区的变址
    32            C        ;-------------------------------------------------------------------------------
    33            C        SER_RECE_DATA	MACRO
    34            C        	MOV	A,@SER_BASE
    35            C        	ADD	A,SER_CONT
    36            C        	MOV	RC,A
    37            C        
    38            C        	MOV	A,SER_DATA
    39            C        	MOV	RD,A
    40            C        	
    41            C        ENDM
    42            C        ;-------------------------------------------------------------------------------
    43            C        ;	SER_GET_DATA : 取出缓冲区中待发送的数据,准备发送
    44            C        ;		SER_BASE : 缓冲区的基地址
    45            C        ;		SER_CONT : 缓冲区的变址
    46            C        ;-------------------------------------------------------------------------------
    47            C        SER_GET_DATA	MACRO
    48            C        	MOV	A,@SER_BASE
    49            C        	ADD	A,SER_CONT
    50            C        	MOV	RC,A
    51            C        
    52            C        	MOV	A,RD
    53            C        	MOV	SER_DATA,A
    54            C        ENDM
    55            C        ;-------------------------------------------------------------------------------
    56            C        ;	SER_SEND_BIT : 取出缓冲区中待发送的数据(一个bit)
    57            C        ;-------------------------------------------------------------------------------
    58 003E0      C        SER_SEND_BIT:
    59 003E0 06FF C        	RLC	SER_DATA
    60 003E1 0C03 C        	JBC	_STATUS,C
    61 003E2 17E5 C        	JMP	SER_SEND_BITH
    62 003E3 08C7 C        	BC	_R7,P_DAT
    63 003E4 17E6 C        	JMP	SER_SEND_BIT_END
    64 003E5      C        SER_SEND_BITH:
    65 003E5 0AC7 C        	BS	_R7,P_DAT
    66 003E6      C        SER_SEND_BIT_END:
    67 003E6 0012 C        	RET
    68            C        ;-------------------------------------------------------------------------------
    69            C        ;	SER_STOR_DATA : 将要发送的数据存入缓冲区中,待发送(多处使用,建议改成子程序)
    70            C        ;			SER_BASE,SER_BASE+1,SER_BASE+2,...,SER_BASE+n
    71            C        ;		SER_BASE : 缓冲区的基地址
    72            C        ;		SER_SEND : 缓冲区的变址
    73            C        ;-------------------------------------------------------------------------------
    74 003E7      C        SER_STOR_DATA:
    75 003E7 0056 C        	MOV	TEMP0,A
    76            C        	
    77 003E8 18E0 C        	MOV	A,@SER_BASE
    78 003E9 03BE C        	ADD	A,SER_SEND
    79 003EA 004C C        	MOV	RC,A
    80            C        	
    81 003EB 057E C        	INC	SER_SEND
    82            C        	
    83 003EC 0416 C        	MOV	A,TEMP0
    84 003ED 004D C        	MOV	RD,A
    85 003EE 0012 C        	RET
    86            C        ;-------------------------------------------------------------------------------
    87            C        ;	SER_GETRECED_DATA : 从缓冲区中取出收到的数据
    88            C        ;			SER_BASE,SER_BASE+1,SER_BASE+2,...,SER_BASE+n
    89            C        ;		SER_BASE : 缓冲区的基地址
    90            C        ;		INPUT : ACC==>缓冲区的变址
    91            C        ;		OUTPUT: ACC==>缓冲区的变址对应的数据
    92            C        ;-------------------------------------------------------------------------------
    93 003EF      C        SER_GETRECED_DATA:
    94 003EF 0056 C        	MOV	TEMP0,A
    95            C        	
    96 003F0 18E0 C        	MOV	A,@SER_BASE
    97 003F1 0396 C        	ADD	A,TEMP0
    98 003F2 004C C        	MOV	RC,A
    99            C        
   100 003F3 040D C        	MOV	A,RD
   101 003F4 0012 C        	RET
   102            C        ;--------------------------------------------------------------------
   103            C        ;	串口通信
   104            C        ;--------------------------------------------------------------------
   105            C        SER_COMM	MACRO	;分二个部分
   106            C        ;--------------------------------------------------------------------
   107            C        ;	部分一:	任务检测
   108            C        ;		正在收/发就退出，否则检测收/发请求
   109            C        ;--------------------------------------------------------------------
   110            C        SER_DET:
   111            C        	JBC	SER_FLAG,4
   112            C        	JMP	SER_DET_END
   113            C        	JBC	SER_FLAG,5
   114            C        	JMP	SER_DET_END
   115            C        ;---完全空闲的状态，检测收/发请求
   116            C        SER_DET1:
   117            C        	JBC	_R7,P_WR
   118            C        	JMP	SER_DET2
   119            C        			;WR处于有效状态(DSP请求发送)
   120            C        			;接收过程开始!!!
   121            C        	CLR	SER_CONT
   122            C        	BS	SER_FLAG,4
   123            C        
   124            C        	JMP	SER_DET_END
   125            C        SER_DET2:		;WR处于无效状态(查78806A发送请求)
   126            C        	JBS	SER_FLAG,6
   127            C        	JMP	SER_DET_END
   128            C        			;有发送请求,置发送标志清请求标志并使WR有效(WR=LOW)
   129            C        			;发送过程开始!!!
   130            C        	CLR	SER_CONT
   131            C        	BS	SER_FLAG,5
   132            C        	BC	SER_FLAG,6
   133            C        	
   134            C        	SER_GET_DATA	;开始发送第一次取数据
   135            C        
   136            C        	CIO	_R7,P_WR
   137            C        	CIO	_R7,P_DAT
   138            C        	BC	R7,P_WR	
   139            C        	
   140            C        	CALL	SER_SEND_BIT
   141            C        	INC	SER_FLAG	;发送第一个并计数(first bit)
   142            C        	JMP	CLOCK_END	;!!!!!!!!!!(第一位等待半个周期使之成为一个完整的周期)
   143            C        SER_DET_END:
   144            C        
   145            C        ;-------------------------------------------------------------------------
   146            C        ;	部分二:时钟产生及任务执行
   147            C        ;-------------------------------------------------------------------------
   148            C        CLOCK:
   149            C        	JBC	_R7,P_WR
   150            C        	JMP	CLOCK4
   151            C        ;---有传送
   152            C        	JBS	_R7,P_CLK
   153            C        	JMP	CLOCK2
   154            C        ;----------------------------------
   155            C        ;---HIGH==>LOW
   156            C        	JBC	SER_FLAG,4	;如果是接收过程就计数(高电平收)
   157            C        	JMP	CLOCK_COM
   158            C        	JBC	SER_FLAG,5	;如果是发送过程就计数(高电平收)
   159            C        	JMP	CLOCK_COM
   160            C        	JBS	SER_FLAG,3	;发第8位(只有发送完毕才会执行到此处)
   161            C        	JMP	CLOCK_END
   162            C        	BC	SER_FLAG,3
   163            C        CLOCK_COM:
   164            C        	
   165            C        	BC	_R7,P_CLK	;(低电平)
   166            C        	JMP	CLOCK_END
   167            C        ;-------------------------------------------------------------------------------
   168            C        CLOCK_SEND:
   169            C        ;---	
   170            C        	MOV	A,SER_SEND	;发送完毕了吗?
   171            C        	SUB	A,SER_CONT
   172            C        	JBC	_STATUS,Z
   173            C        	JMP	CLOCK1_1
   174            C        
   175            C        	INC	SER_FLAG
   176            C        
   177            C        	MOV	A,SER_FLAG		;计数调整(MOD 8)
   178            C        	AND	A,@0X0F
   179            C        	SUB	A,@0X8
   180            C        	JBC	_STATUS,C
   181            C        	JMP	SEREXE_SEND
   182            C        	
   183            C        	MOV	A,@8
   184            C        	SUB	SER_FLAG,A
   185            C        SEREXE_SEND:	;处理发送开始
   186            C        
   187            C        	CALL	SER_SEND_BIT
   188            C        
   189            C        	MOV	A,SER_FLAG
   190            C        	AND	A,@0X0F
   191            C        	SUB	A,@8
   192            C        	JBS	_STATUS,Z
   193            C        	JMP	SEREXE_SEND_END
   194            C        ;以下作发送下一个BYTE的准备
   195            C        	INC	SER_CONT
   196            C        	SER_GET_DATA		;取下一个BYTE的数据
   197            C        
   198            C        SEREXE_SEND_END:
   199            C        ;!!!!!!!!!!!!!!!
   200            C        	JMP	CLOCK_END
   201            C        CLOCK1_1:		;发送过程完毕!!!清除相关标志
   202            C        	CLR	SER_FLAG
   203            C        	CLR	SER_SEND
   204            C        
   205            C        	SIO	_R7,P_WR
   206            C        	SIO	_R7,P_DAT
   207            C        	JMP	CLOCK_END
   208            C        CLOCK1_2:		;非发送过程
   209            C        	BC	_R7,P_CLK		;(低电平)
   210            C        	JMP	CLOCK_END
   211            C        ;-------------------------------------------------------------------------------
   212            C        CLOCK2:			;LOW==>HIGH
   213            C        	BS	_R7,P_CLK
   214            C        	
   215            C        	JBC	SER_FLAG,4	;如果是接收过程就计数(高电平收)
   216            C        	JMP	CLOCK_RECE
   217            C        	JBC	SER_FLAG,5	;如果是发送过程就计数(高电平收)
   218            C        	JMP	CLOCK_SEND
   219            C        	JMP	CLOCK_END
   220            C        CLOCK4:
   221            C        	;BC	SER_FLAG,4
   222            C        	;JBC	_R7,P_CLK
   223            C        	;JMP	CLOCK_END
   224            C        	;BS	_R7,P_CLK	;CLOCK=0,(收)最后一个bit?
   225            C        	;JMP	CLOCK_RECE
   226            C        
   227            C        	JPNB	_R7,P_CLK,CLOCK5
   228            C        	JPNB	SER_FLAG,4,CLOCK_END
   229            C        	CLR	SER_FLAG
   230            C        	JMP	CLOCK_END
   231            C        
   232            C        CLOCK5:
   233            C        	BS	_R7,P_CLK	;CLOCK=0,(收)最后一个bit?
   234            C        	;JMP	CLOCK_RECE
   235            C        
   236            C        CLOCK_RECE:	
   237            C        	INC	SER_FLAG	
   238            C        ;-------------------------------;计数调整(MOD 8)
   239            C        	MOV	A,SER_FLAG
   240            C        	AND	A,@0X0F
   241            C        	SUB	A,@0X8
   242            C        	JBC	_STATUS,C
   243            C        	JMP	SEREXE_RECE
   244            C        	
   245            C        	MOV	A,@8
   246            C        	SUB	SER_FLAG,A
   247            C        SEREXE_RECE:		;处理接收开始
   248            C        ;!!!!!!!!!!!!!!!	;开始收(一个bit)
   249            C        	BS	_STATUS,C	
   250            C        	JBS	_R7,P_DAT
   251            C        	BC	_STATUS,C
   252            C        	RLC	SER_DATA
   253            C        
   254            C        	MOV	A,SER_FLAG
   255            C        	AND	A,@0X0F
   256            C        	SUB	A,@8
   257            C        	JBS	_STATUS,Z
   258            C        	JMP	SEREXE_RECE_END
   259            C        ;以下作接收下一个BYTE的准备
   260            C        	SER_RECE_DATA
   261            C        	INC	SER_CONT
   262            C        
   263            C        	JBS	R7,P_WR
   264            C        	JMP	SEREXE_RECE_END
   265            C        	
   266            C        	CLR	SER_FLAG	;接收过程完毕!!!
   267            C        	BS	SER_FLAG,7	;可以取收到的数据进行处理
   268            C        
   269            C        SEREXE_RECE_END:
   270            C        ;!!!!!!!!!!!!!!!
   271            C        	;JMP	CLOCK_END
   272            C        CLOCK_END:
   273            C        ;----------------------------------------------------------------------------
   274            C        
   275            C        ENDM
   276            C        
   277            C        ;-------------------------------------------------------------------------------
   278            C        ;-------------------------------------------------------------------------------
   279            C        
   280            C        ;eop
   281            C        
   487                     
   488                     include	"CID.asm"		; 400
     1            C        /***************************************
     2            C        Caller ID处理，包括：
     3            C        FSK_DECODE	FSK 解码
     4            C        CID_STORE	号码保存
     5            C        ***************************************/
     6       0020 C        CID_LENGTH	==	BANK1_TEMP0
     7            C        ORG	0X0400
     8            C        
     9 00400      C        FSK_DECODE:
    10            C      M 	JPNB	FSK_FG,FSK_SUC,FSK_DECODE_RET1
       00400 0E5C     1     JBS  FSK_FG , FSK_SUC 
       00401 1475     1     JMP  FSK_DECODE_RET1 ,
    11            C        
    12 00402      C        FSK_DECODE_TEL_SEAT:
    13            C      M 	BANK	1
       00402 0B84     1     BS  _RSR , 6 
       00403 09C4     1     BC  _RSR , 7 
    14            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00404 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00405 088B     2     BC  _RB , 2 
    15            C        	
    16 00406 118C C        	CALL	CLR_DECODE_RAM
    17            C        	
    18            C      M 	MOV	_RC,@(FSK_ADDR+1)	; 长度
       00407 1801     1     MOV A,@(( FSK_ADDR + 1 ))
       00408 004C     1     MOV  _RC ,A
    19            C      M 	MOV	CID_LENGTH,_RD
       00409 040D     1     MOV A, _RD 
       0040A 0060     1     MOV  CID_LENGTH ,A
    20            C      M 	MOV	_RC,@FSK_ADDR
       0040B 1800     1     MOV A,@( FSK_ADDR )
       0040C 004C     1     MOV  _RC ,A
    21            C      M 	SUBA	_RD,@4
       0040D 1804     1     MOV A,@( 4 )
       0040E 010D     1     SUB A, _RD 
    22            C      M 	JPZ	FSK_DECODE_SDMF
       0040F 0C83     1     JBC  _STATUS , Z 
       00410 141E     1     JMP  FSK_DECODE_SDMF ,
    23            C      M 	SUBA	_RD,@0X80
       00411 1880     1     MOV A,@( 128 )
       00412 010D     1     SUB A, _RD 
    24            C      M 	JPZ	FSK_DECODE_MDMF
       00413 0C83     1     JBC  _STATUS , Z 
       00414 1437     1     JMP  FSK_DECODE_MDMF ,
    25            C      M 	SUBA	_RD,@0X81
       00415 1881     1     MOV A,@( 129 )
       00416 010D     1     SUB A, _RD 
    26            C      M 	JPZ	FSK_DECODE_MDMF
       00417 0C83     1     JBC  _STATUS , Z 
       00418 1437     1     JMP  FSK_DECODE_MDMF ,
    27            C      M 	SUBA	_RD,@0X82
       00419 1882     1     MOV A,@( 130 )
       0041A 010D     1     SUB A, _RD 
    28            C      M 	JPZ	FSK_DECODE_MDMF
       0041B 0C83     1     JBC  _STATUS , Z 
       0041C 1437     1     JMP  FSK_DECODE_MDMF ,
    29 0041D 1474 C        	JMP	FSK_DECODE_RET
    30            C        
    31 0041E      C        FSK_DECODE_SDMF:			; 单制式
    32            C      M 	MOV	_RC,@(FSK_ADDR+1)
       0041E 1801     1     MOV A,@(( FSK_ADDR + 1 ))
       0041F 004C     1     MOV  _RC ,A
    33 00420      C        FSK_DECODE_SDMF_LOOP:
    34 00420 0420 C        	MOV	A,CID_LENGTH
    35            C      M 	JPZ	FSK_DECODE_RET
       00421 0C83     1     JBC  _STATUS , Z 
       00422 1474     1     JMP  FSK_DECODE_RET ,
    36 00423 142E C        	JMP	FSK_DECODE_SDMF_TIME
    37 00424 054C C        	INC	_RC
    38            C      M 	SUBA	_RD,@1
       00425 1801     1     MOV A,@( 1 )
       00426 010D     1     SUB A, _RD 
    39            C      M 	JPZ	FSK_DECODE_SDMF_TIME	; 有时间的单制式
       00427 0C83     1     JBC  _STATUS , Z 
       00428 142E     1     JMP  FSK_DECODE_SDMF_TIME ,
    40            C      M 	SUBA	_RD,@0X02
       00429 1802     1     MOV A,@( 2 )
       0042A 010D     1     SUB A, _RD 
    41            C      M 	JPZ	FSK_DECODE_SDMF_NUM	; 号码
       0042B 0C83     1     JBC  _STATUS , Z 
       0042C 1432     1     JMP  FSK_DECODE_SDMF_NUM ,
    42 0042D 1420 C        	JMP	FSK_DECODE_SDMF_LOOP
    43            C        
    44 0042E      C        FSK_DECODE_SDMF_TIME:
    45 0042E 1808 C        	MOV	A,@8
    46 0042F 1077 C        	CALL	FSK_DECODE_TIME		; 解时间并储存起来，更新当前时间
    47            C      M 	BANK	1
       00430 0B84     1     BS  _RSR , 6 
       00431 09C4     1     BC  _RSR , 7 
    48            C        	;JMP	FSK_DECODE_SDMF_LOOP
    49 00432      C        FSK_DECODE_SDMF_NUM:
    50            C      M 	SUBA	CID_LENGTH,@8
       00432 1808     1     MOV A,@( 8 )
       00433 0120     1     SUB A, CID_LENGTH 
    51 00434 10D1 C        	CALL	FSK_DECODE_NUM		; 解号码
    52            C      M 	SRAM	FSK_FG,CALLIN
       00435 0BDC     1     BS  FSK_FG , CALLIN 
    53            C        	;JMP	FSK_DECODE_SDMF_LOOP
    54 00436 1474 C        	JMP	FSK_DECODE_RET
    55            C        
    56 00437      C        FSK_DECODE_MDMF:			; 复合制式的解码
    57            C      M 	MOV	_RC,@(FSK_ADDR+1)
       00437 1801     1     MOV A,@(( FSK_ADDR + 1 ))
       00438 004C     1     MOV  _RC ,A
    58 00439      C        FSK_DECODE_MDMF_LOOP:
    59 00439 0420 C        	MOV	A,CID_LENGTH
    60            C      M 	JPZ	FSK_DECODE_RET
       0043A 0C83     1     JBC  _STATUS , Z 
       0043B 1474     1     JMP  FSK_DECODE_RET ,
    61 0043C 054C C        	INC	_RC
    62            C      M 	SUBA	_RD,@0X01
       0043D 1801     1     MOV A,@( 1 )
       0043E 010D     1     SUB A, _RD 
    63            C      M 	JPZ	FSK_DECODE_MDMF_TIME	; 01 时间
       0043F 0C83     1     JBC  _STATUS , Z 
       00440 1452     1     JMP  FSK_DECODE_MDMF_TIME ,
    64            C      M 	SUBA	_RD,@0X02
       00441 1802     1     MOV A,@( 2 )
       00442 010D     1     SUB A, _RD 
    65            C      M 	JPZ	FSK_DECODE_MDMF_NUM	; 02 号码
       00443 0C83     1     JBC  _STATUS , Z 
       00444 145C     1     JMP  FSK_DECODE_MDMF_NUM ,
    66            C      M 	SUBA	_RD,@0X04
       00445 1804     1     MOV A,@( 4 )
       00446 010D     1     SUB A, _RD 
    67            C      M 	JPZ	FSK_DECODE_MDMF_NONUM	; 04 无号码
       00447 0C83     1     JBC  _STATUS , Z 
       00448 1465     1     JMP  FSK_DECODE_MDMF_NONUM ,
    68            C      M 	SUBA	_RD,@0X07
       00449 1807     1     MOV A,@( 7 )
       0044A 010D     1     SUB A, _RD 
    69            C      M 	JPZ	FSK_DECODE_MDMF_NAME	; 07 姓名
       0044B 0C83     1     JBC  _STATUS , Z 
       0044C 146A     1     JMP  FSK_DECODE_MDMF_NAME ,
    70            C      M 	SUBA	_RD,@0X08
       0044D 1808     1     MOV A,@( 8 )
       0044E 010D     1     SUB A, _RD 
    71            C      M 	JPZ	FSK_DECODE_MDMF_NONAME	; 08 无姓名
       0044F 0C83     1     JBC  _STATUS , Z 
       00450 1473     1     JMP  FSK_DECODE_MDMF_NONAME ,
    72 00451 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
    73 00452      C        FSK_DECODE_MDMF_TIME:
    74 00452 054C C        	INC	_RC
    75            C      M 	SUB	CID_LENGTH,_RD
       00453 040D     1     MOV A, _RD 
       00454 0160     1     SUB  CID_LENGTH ,A
    76            C      M 	SUB	CID_LENGTH,@2
       00455 1802     1     MOV A,@( 2 )
       00456 0160     1     SUB  CID_LENGTH ,A
    77 00457 040D C        	MOV	A,_RD
    78 00458 1077 C        	CALL	FSK_DECODE_TIME		; 解时间并储存起来，更新当前时间
    79            C      M 	BANK	1
       00459 0B84     1     BS  _RSR , 6 
       0045A 09C4     1     BC  _RSR , 7 
    80 0045B 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
    81 0045C      C        FSK_DECODE_MDMF_NUM:
    82 0045C 054C C        	INC	_RC
    83            C      M 	SUB	CID_LENGTH,_RD
       0045D 040D     1     MOV A, _RD 
       0045E 0160     1     SUB  CID_LENGTH ,A
    84            C      M 	SUB	CID_LENGTH,@2
       0045F 1802     1     MOV A,@( 2 )
       00460 0160     1     SUB  CID_LENGTH ,A
    85 00461 040D C        	MOV	A,_RD
    86 00462 10D1 C        	CALL	FSK_DECODE_NUM		; 解号码
    87            C      M 	SRAM	FSK_FG,CALLIN
       00463 0BDC     1     BS  FSK_FG , CALLIN 
    88 00464 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
    89 00465      C        FSK_DECODE_MDMF_NONUM:
    90            C      M 	SUB	CID_LENGTH,@3
       00465 1803     1     MOV A,@( 3 )
       00466 0160     1     SUB  CID_LENGTH ,A
    91            C        	;CALL	FSK_DECODE_NUM		; 解号码
    92            C      M 	SRAM	FSK_FG,CALLIN
       00467 0BDC     1     BS  FSK_FG , CALLIN 
    93            C      M 	SRAM	FSK_FG,ERR_NUM
       00468 0B5C     1     BS  FSK_FG , ERR_NUM 
    94 00469 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
    95 0046A      C        FSK_DECODE_MDMF_NAME:
    96 0046A 054C C        	INC	_RC
    97            C      M 	SUB	CID_LENGTH,_RD
       0046B 040D     1     MOV A, _RD 
       0046C 0160     1     SUB  CID_LENGTH ,A
    98            C      M 	SUB	CID_LENGTH,@2
       0046D 1802     1     MOV A,@( 2 )
       0046E 0160     1     SUB  CID_LENGTH ,A
    99 0046F 040D C        	MOV	A,_RD
   100 00470 1116 C        	CALL	FSK_DECODE_NAME
   101            C      M 	SRAM	FSK_FG,CALLIN
       00471 0BDC     1     BS  FSK_FG , CALLIN 
   102 00472 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
   103 00473      C        FSK_DECODE_MDMF_NONAME:
   104 00473 1439 C        	JMP	FSK_DECODE_MDMF_LOOP
   105            C        	
   106            C        
   107            C        
   108            C        
   109 00474      C        FSK_DECODE_RET:
   110            C      M 	CRAM	FSK_FG,FSK_SUC
       00474 085C     1     BC  FSK_FG , FSK_SUC 
   111 00475      C        FSK_DECODE_RET1:
   112 00475 1197 C        	CALL	SEND_CALL
   113 00476 0012 C        	RET
   114            C        
   115            C        
   116            C        /***************************************
   117            C        从FSK数据中解时间
   118            C        时间8位，不够8位则错误
   119            C        ***************************************/
   120 00477      C        FSK_DECODE_TIME:
   121            C        	;INC	_RC
   122            C        	;SUB	CID_LENGTH,_RD
   123            C        	;SUB	CID_LENGTH,@2
   124 00477 0056 C        	MOV	TEMP0,A
   125            C      M 	JPZ	FSK_DECODE_TIME_NOTIME
       00478 0C83     1     JBC  _STATUS , Z 
       00479 14BA     1     JMP  FSK_DECODE_TIME_NOTIME ,
   126 0047A 1D08 C        	SUB	A,@8
   127            C      M 	JPNZ	FSK_DECODE_TIME_ERR
       0047B 0E83     1     JBS  _STATUS , Z 
       0047C 14BA     1     JMP  FSK_DECODE_TIME_ERR ,
   128            C      M 	BANK	0
       0047D 0984     1     BC  _RSR , 6 
       0047E 09C4     1     BC  _RSR , 7 
   129            C      M 	MOV	TEMP1,_RC
       0047F 040C     1     MOV A, _RC 
       00480 0057     1     MOV  TEMP1 ,A
   130            C      M 	MOV	_RC,@(CID_ADDR+28)
       00481 1858     1     MOV A,@(( CID_ADDR + 28 ))
       00482 004C     1     MOV  _RC ,A
   131            C      M 	MOV	_RD,@4
       00483 1804     1     MOV A,@( 4 )
       00484 004D     1     MOV  _RD ,A
   132            C      M 	MOV	_RC,TEMP1
       00485 0417     1     MOV A, TEMP1 
       00486 004C     1     MOV  _RC ,A
   133            C        	
   134 00487 00EA C        	CLR	SEC_REG
   135 00488 054C C        	INC	_RC
   136 00489 10BD C        	CALL	GET_TIME
   137            C      M 	MOV	MONTH_REG,TEMP0
       0048A 0416     1     MOV A, TEMP0 
       0048B 0065     1     MOV  MONTH_REG ,A
   138            C      M 	MOV	TEMP1,_RC
       0048C 040C     1     MOV A, _RC 
       0048D 0057     1     MOV  TEMP1 ,A
   139            C      M 	MOV	_RC,@(CID_ADDR+29)
       0048E 1859     1     MOV A,@(( CID_ADDR + 29 ))
       0048F 004C     1     MOV  _RC ,A
   140            C      M 	MOV	_RD,TEMP0
       00490 0416     1     MOV A, TEMP0 
       00491 004D     1     MOV  _RD ,A
   141            C      M 	MOV	_RC,TEMP1
       00492 0417     1     MOV A, TEMP1 
       00493 004C     1     MOV  _RC ,A
   142 00494 054C C        	INC	_RC
   143 00495 10BD C        	CALL	GET_TIME
   144            C      M 	MOV	DAY_REG,TEMP0
       00496 0416     1     MOV A, TEMP0 
       00497 0066     1     MOV  DAY_REG ,A
   145            C      M 	MOV	TEMP1,_RC
       00498 040C     1     MOV A, _RC 
       00499 0057     1     MOV  TEMP1 ,A
   146            C      M 	MOV	_RC,@(CID_ADDR+30)
       0049A 185A     1     MOV A,@(( CID_ADDR + 30 ))
       0049B 004C     1     MOV  _RC ,A
   147            C      M 	MOV	_RD,TEMP0
       0049C 0416     1     MOV A, TEMP0 
       0049D 004D     1     MOV  _RD ,A
   148            C      M 	MOV	_RC,TEMP1
       0049E 0417     1     MOV A, TEMP1 
       0049F 004C     1     MOV  _RC ,A
   149 004A0 054C C        	INC	_RC
   150 004A1 10BD C        	CALL	GET_TIME
   151            C      M 	MOV	HOUR_REG,TEMP0
       004A2 0416     1     MOV A, TEMP0 
       004A3 0068     1     MOV  HOUR_REG ,A
   152            C      M 	MOV	TEMP1,_RC
       004A4 040C     1     MOV A, _RC 
       004A5 0057     1     MOV  TEMP1 ,A
   153            C      M 	MOV	_RC,@(CID_ADDR+31)
       004A6 185B     1     MOV A,@(( CID_ADDR + 31 ))
       004A7 004C     1     MOV  _RC ,A
   154            C      M 	MOV	_RD,TEMP0
       004A8 0416     1     MOV A, TEMP0 
       004A9 004D     1     MOV  _RD ,A
   155            C      M 	MOV	_RC,TEMP1
       004AA 0417     1     MOV A, TEMP1 
       004AB 004C     1     MOV  _RC ,A
   156 004AC 054C C        	INC	_RC
   157 004AD 10BD C        	CALL	GET_TIME
   158            C      M 	MOV	MIN_REG,TEMP0
       004AE 0416     1     MOV A, TEMP0 
       004AF 0069     1     MOV  MIN_REG ,A
   159            C      M 	MOV	TEMP1,_RC
       004B0 040C     1     MOV A, _RC 
       004B1 0057     1     MOV  TEMP1 ,A
   160            C      M 	MOV	_RC,@(CID_ADDR+32)
       004B2 185C     1     MOV A,@(( CID_ADDR + 32 ))
       004B3 004C     1     MOV  _RC ,A
   161            C      M 	MOV	_RD,TEMP0
       004B4 0416     1     MOV A, TEMP0 
       004B5 004D     1     MOV  _RD ,A
   162            C      M 	MOV	_RC,TEMP1
       004B6 0417     1     MOV A, TEMP1 
       004B7 004C     1     MOV  _RC ,A
   163            C      M 	SRAM	SYS_FG,SYS_CLOCK		; 通知系统时钟改变，要求更新显示
       004B8 0ADE     1     BS  SYS_FG , SYS_CLOCK 
   164 004B9 0012 C        	RET
   165 004BA      C        FSK_DECODE_TIME_ERR:
   166 004BA      C        FSK_DECODE_TIME_NOTIME:
   167 004BA 0416 C        	MOV	A,TEMP0
   168 004BB 03CC C        	ADD	_RC,A
   169 004BC 0012 C        	RET
   170            C        
   171 004BD      C        GET_TIME:
   172 004BD 040D C        	MOV	A,_RD
   173 004BE 1A7F C        	AND	A,@0X7F
   174            C      M 	CALL	#ASCII_NUM
                      2  M  LCALL  ASCII_NUM 
                      3  M  PAGE #( ASCII_NUM ),
       004BF 1E80     3     PAGE ( ASCII_NUM / 1024 ),
       004C0 13A2     2     CALL ( ASCII_NUM % 1024 ),
                      3  M  PAGE #( $ ),
       004C1 1E81     3     PAGE ( $ / 1024 ),
   175 004C2 0057 C        	MOV	TEMP1,A
   176            C      M 	MOV	TEMP0,@0
       004C3 1800     1     MOV A,@( 0 )
       004C4 0056     1     MOV  TEMP0 ,A
   177 004C5      C        GET_TIME_1:
   178 004C5 0417 C        	MOV	A,TEMP1
   179            C      M 	JPZ	GET_TIME_2
       004C6 0C83     1     JBC  _STATUS , Z 
       004C7 14CC     1     JMP  GET_TIME_2 ,
   180 004C8 01D7 C        	DEC	TEMP1
   181            C      M 	ADD	TEMP0,@10
       004C9 180A     1     MOV A,@( 10 )
       004CA 03D6     1     ADD  TEMP0 ,A
   182 004CB 14C5 C        	JMP	GET_TIME_1
   183 004CC      C        GET_TIME_2:
   184 004CC 054C C        	INC	_RC
   185 004CD 040D C        	MOV	A,_RD
   186 004CE 1A0F C        	AND	A,@0X0F
   187 004CF 03D6 C        	ADD	TEMP0,A
   188 004D0 0012 C        	RET
   189            C        
   190            C        /***************************************
   191            C        从FSK数据中解电话号码
   192            C        最多16个号码，超过不计。不足补F
   193            C        ***************************************/
   194 004D1      C        FSK_DECODE_NUM:
   195 004D1 0056 C        	MOV	TEMP0,A				; 号码位数
   196            C      M 	MOV	TEMP1,_RC
       004D2 040C     1     MOV A, _RC 
       004D3 0057     1     MOV  TEMP1 ,A
   197            C      M 	MOV	_RC,@(CID_ADDR+2)
       004D4 183E     1     MOV A,@(( CID_ADDR + 2 ))
       004D5 004C     1     MOV  _RC ,A
   198            C      M 	MOV	_RD,TEMP0
       004D6 0416     1     MOV A, TEMP0 
       004D7 004D     1     MOV  _RD ,A
   199            C      M 	MOV	TEMP2,@0
       004D8 1800     1     MOV A,@( 0 )
       004D9 0058     1     MOV  TEMP2 ,A
   200 004DA      C        FSK_DECODE_NUM_LOOP:
   201 004DA 0416 C        	MOV	A,TEMP0
   202            C      M 	JPZ	FSK_DECODE_NUM_2
       004DB 0C83     1     JBC  _STATUS , Z 
       004DC 1500     1     JMP  FSK_DECODE_NUM_2 ,
   203            C      M 	ADDA	TEMP2,TEMP1
       004DD 0417     1     MOV A, TEMP1 
       004DE 0398     1     ADD A, TEMP2 
   204 004DF 1F01 C        	ADD	A,@1
   205 004E0 004C C        	MOV	_RC,A
   206 004E1 040D C        	MOV	A,_RD
   207 004E2 1A7F C        	AND	A,@0X7F
   208            C      M 	CALL	#ASCII_NUM
                      2  M  LCALL  ASCII_NUM 
                      3  M  PAGE #( ASCII_NUM ),
       004E3 1E80     3     PAGE ( ASCII_NUM / 1024 ),
       004E4 13A2     2     CALL ( ASCII_NUM % 1024 ),
                      3  M  PAGE #( $ ),
       004E5 1E81     3     PAGE ( $ / 1024 ),
   209 004E6 0059 C        	MOV	TEMP3,A
   210            C      M 	CLRC
       004E7 0803     1     BC  _STATUS , C 
   211 004E8 0618 C        	RRCA	TEMP2
   212 004E9 1F3F C        	ADD	A,@(CID_ADDR+3)
   213 004EA 004C C        	MOV	_RC,A
   214            C      M 	JPB	TEMP2,0,FSK_DECODE_NUM_LOOP_L
       004EB 0C18     1     JBC  TEMP2 , 0 
       004EC 14F1     1     JMP  FSK_DECODE_NUM_LOOP_L ,
   215 004ED      C        FSK_DECODE_NUM_LOOP_H:
   216 004ED 0719 C        	SWAPA	TEMP3
   217 004EE 1AF0 C        	AND	A,@0XF0
   218 004EF 004D C        	MOV	_RD,A
   219 004F0 14F4 C        	JMP	FSK_DECODE_NUM_LOOP_1
   220 004F1      C        FSK_DECODE_NUM_LOOP_L:
   221            C      M 	ANDA	TEMP3,@0X0F
       004F1 180F     1     MOV A,@( 15 )
       004F2 0299     1     AND A, TEMP3 
   222 004F3 03CD C        	ADD	_RD,A
   223 004F4      C        FSK_DECODE_NUM_LOOP_1:
   224 004F4 0558 C        	INC	TEMP2
   225 004F5 01D6 C        	DEC	TEMP0
   226            C      M 	SUBA	TEMP2,@16
       004F6 1810     1     MOV A,@( 16 )
       004F7 0118     1     SUB A, TEMP2 
   227            C      M 	JPZ	FSK_DECODE_NUM_1		; 号码位数到16
       004F8 0C83     1     JBC  _STATUS , Z 
       004F9 14FB     1     JMP  FSK_DECODE_NUM_1 ,
   228 004FA 14DA C        	JMP	FSK_DECODE_NUM_LOOP
   229            C        
   230 004FB      C        FSK_DECODE_NUM_1:				; 16以后的号码丢弃
   231            C      M 	ADDA	TEMP1,TEMP2
       004FB 0418     1     MOV A, TEMP2 
       004FC 0397     1     ADD A, TEMP1 
   232 004FD 0396 C        	ADD	A,TEMP0
   233 004FE 004C C        	MOV	_RC,A
   234 004FF 0012 C        	RET
   235            C        
   236 00500      C        FSK_DECODE_NUM_2:
   237            C      M 	ADD	TEMP1,TEMP2
       00500 0418     1     MOV A, TEMP2 
       00501 03D7     1     ADD  TEMP1 ,A
   238 00502      C        FSK_DECODE_NUM_2_1:
   239            C      M 	SUBA	TEMP2,@16			; 检查号码是否够16位，不够补F
       00502 1810     1     MOV A,@( 16 )
       00503 0118     1     SUB A, TEMP2 
   240            C      M 	JPZ	FSK_DECODE_NUM_RET
       00504 0C83     1     JBC  _STATUS , Z 
       00505 1513     1     JMP  FSK_DECODE_NUM_RET ,
   241            C      M 	CLRC
       00506 0803     1     BC  _STATUS , C 
   242 00507 0618 C        	RRCA	TEMP2
   243 00508 1F3F C        	ADD	A,@(CID_ADDR+3)
   244 00509 004C C        	MOV	_RC,A
   245            C      M 	JPB	TEMP2,0,FSK_DECODE_NUM_2_L
       0050A 0C18     1     JBC  TEMP2 , 0 
       0050B 150F     1     JMP  FSK_DECODE_NUM_2_L ,
   246 0050C      C        FSK_DECODE_NUM_2_H:
   247            C      M 	MOV	_RD,@0XF0
       0050C 18F0     1     MOV A,@( 240 )
       0050D 004D     1     MOV  _RD ,A
   248 0050E 1511 C        	JMP	FSK_DECODE_NUM_3
   249 0050F      C        FSK_DECODE_NUM_2_L:
   250            C      M 	ADD	_RD,@0X0F
       0050F 180F     1     MOV A,@( 15 )
       00510 03CD     1     ADD  _RD ,A
   251 00511      C        FSK_DECODE_NUM_3:
   252 00511 0558 C        	INC	TEMP2
   253 00512 1502 C        	JMP	FSK_DECODE_NUM_2_1
   254            C        	
   255 00513      C        FSK_DECODE_NUM_RET:
   256            C      M 	MOV	_RC,TEMP1
       00513 0417     1     MOV A, TEMP1 
       00514 004C     1     MOV  _RC ,A
   257 00515 0012 C        	RET
   258            C        
   259 00516      C        FSK_DECODE_NAME:
   260            C        	;INC	_RC
   261            C        	;SUB	CID_LENGTH,_RD
   262            C        	;SUB	CID_LENGTH,@2
   263            C        	;MOV	TEMP0,_RD			; 姓名的位数
   264 00516 0056 C        	MOV	TEMP0,A
   265            C      M 	MOV	TEMP1,_RC
       00517 040C     1     MOV A, _RC 
       00518 0057     1     MOV  TEMP1 ,A
   266            C      M 	MOV	_RC,@(CID_ADDR+11)
       00519 1847     1     MOV A,@(( CID_ADDR + 11 ))
       0051A 004C     1     MOV  _RC ,A
   267            C      M 	MOV	_RD,TEMP0
       0051B 0416     1     MOV A, TEMP0 
       0051C 004D     1     MOV  _RD ,A
   268            C      M 	MOV	TEMP2,@0
       0051D 1800     1     MOV A,@( 0 )
       0051E 0058     1     MOV  TEMP2 ,A
   269 0051F      C        FSK_DECODE_NAME_LOOP:
   270 0051F 0416 C        	MOV	A,TEMP0
   271            C      M 	JPZ	FSK_DECODE_NAME_2
       00520 0C83     1     JBC  _STATUS , Z 
       00521 153D     1     JMP  FSK_DECODE_NAME_2 ,
   272            C      M 	ADDA	TEMP2,TEMP1
       00522 0417     1     MOV A, TEMP1 
       00523 0398     1     ADD A, TEMP2 
   273 00524 1F01 C        	ADD	A,@1
   274 00525 004C C        	MOV	_RC,A
   275 00526 040D C        	MOV	A,_RD
   276 00527 1A7F C        	AND	A,@0X7F
   277            C      M 	CALL	#ASCII_CH
                      2  M  LCALL  ASCII_CH 
                      3  M  PAGE #( ASCII_CH ),
       00528 1E80     3     PAGE ( ASCII_CH / 1024 ),
       00529 13B3     2     CALL ( ASCII_CH % 1024 ),
                      3  M  PAGE #( $ ),
       0052A 1E81     3     PAGE ( $ / 1024 ),
   278 0052B 0059 C        	MOV	TEMP3,A
   279            C      M 	ADDA	TEMP2,@(CID_ADDR+12)
       0052C 1848     1     MOV A,@(( CID_ADDR + 12 ))
       0052D 0398     1     ADD A, TEMP2 
   280 0052E 004C C        	MOV	_RC,A
   281            C      M 	MOV	_RD,TEMP3
       0052F 0419     1     MOV A, TEMP3 
       00530 004D     1     MOV  _RD ,A
   282 00531 0558 C        	INC	TEMP2
   283 00532 01D6 C        	DEC	TEMP0
   284            C      M 	SUBA	TEMP2,@16
       00533 1810     1     MOV A,@( 16 )
       00534 0118     1     SUB A, TEMP2 
   285            C      M 	JPZ	FSK_DECODE_NAME_1
       00535 0C83     1     JBC  _STATUS , Z 
       00536 1538     1     JMP  FSK_DECODE_NAME_1 ,
   286 00537 151F C        	JMP	FSK_DECODE_NAME_LOOP
   287 00538      C        FSK_DECODE_NAME_1:				; 16以后的姓名丢弃
   288            C      M 	ADDA	TEMP1,TEMP2
       00538 0418     1     MOV A, TEMP2 
       00539 0397     1     ADD A, TEMP1 
   289 0053A 0396 C        	ADD	A,TEMP0
   290 0053B 004C C        	MOV	_RC,A
   291 0053C 0012 C        	RET
   292 0053D      C        FSK_DECODE_NAME_2:
   293            C      M 	ADD	TEMP1,TEMP2
       0053D 0418     1     MOV A, TEMP2 
       0053E 03D7     1     ADD  TEMP1 ,A
   294 0053F      C        FSK_DECODE_NAME_2_1:
   295            C      M 	SUBA	TEMP2,@16
       0053F 1810     1     MOV A,@( 16 )
       00540 0118     1     SUB A, TEMP2 
   296            C      M 	JPZ	FSK_DECODE_NAME_RET
       00541 0C83     1     JBC  _STATUS , Z 
       00542 154A     1     JMP  FSK_DECODE_NAME_RET ,
   297            C      M 	ADDA	TEMP2,@(CID_ADDR+12)
       00543 1848     1     MOV A,@(( CID_ADDR + 12 ))
       00544 0398     1     ADD A, TEMP2 
   298 00545 004C C        	MOV	_RC,A
   299            C      M 	MOV	_RD,@0XFF
       00546 18FF     1     MOV A,@( 255 )
       00547 004D     1     MOV  _RD ,A
   300 00548 0558 C        	INC	TEMP2
   301 00549 153F C        	JMP	FSK_DECODE_NAME_2_1
   302            C        	
   303 0054A      C        FSK_DECODE_NAME_RET:
   304            C      M 	MOV	_RC,TEMP1
       0054A 0417     1     MOV A, TEMP1 
       0054B 004C     1     MOV  _RC ,A
   305 0054C 0012 C        	RET
   306            C        
   307 0054D      C        DTMF_DECODE:
   308            C      M 	JPNB	FSK_FG,DTMF_SUC,DTMF_DECODE_RET1
       0054D 0F1C     1     JBS  FSK_FG , DTMF_SUC 
       0054E 158A     1     JMP  DTMF_DECODE_RET1 ,
   309            C        	
   310            C      M 	BANK	1
       0054F 0B84     1     BS  _RSR , 6 
       00550 09C4     1     BC  _RSR , 7 
   311            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00551 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00552 088B     2     BC  _RB , 2 
   312            C        	
   313 00553 118C C        	CALL	CLR_DECODE_RAM
   314            C        	
   315            C      M 	MOV	TEMP0,@0
       00554 1800     1     MOV A,@( 0 )
       00555 0056     1     MOV  TEMP0 ,A
   316            C      M 	MOV	TEMP1,@0
       00556 1800     1     MOV A,@( 0 )
       00557 0057     1     MOV  TEMP1 ,A
   317 00558      C        DTMF_DECODE_LOOP:
   318            C      M 	ADDA	TEMP0,@DTMF_ADDR
       00558 1800     1     MOV A,@( DTMF_ADDR )
       00559 0396     1     ADD A, TEMP0 
   319 0055A 004C C        	MOV	_RC,A
   320            C      M 	SUBA	_RD,@0X0			; 'D'
       0055B 1800     1     MOV A,@( 0 )
       0055C 010D     1     SUB A, _RD 
   321            C      M 	JPZ	DTMF_DECODE_1
       0055D 0C83     1     JBC  _STATUS , Z 
       0055E 1581     1     JMP  DTMF_DECODE_1 ,
   322            C      M 	SUBA	_RD,@0X0D			; 'A'
       0055F 180D     1     MOV A,@( 13 )
       00560 010D     1     SUB A, _RD 
   323            C      M 	JPZ	DTMF_DECODE_1
       00561 0C83     1     JBC  _STATUS , Z 
       00562 1581     1     JMP  DTMF_DECODE_1 ,
   324            C      M 	SUBA	_RD,@0X0F			; 'C'
       00563 180F     1     MOV A,@( 15 )
       00564 010D     1     SUB A, _RD 
   325            C      M 	JPZ	DTMF_DECODE_END
       00565 0C83     1     JBC  _STATUS , Z 
       00566 1583     1     JMP  DTMF_DECODE_END ,
   326            C      M 	SUBA	_RD,@0X0A			; '0'
       00567 180A     1     MOV A,@( 10 )
       00568 010D     1     SUB A, _RD 
   327            C      M 	JPNZ	DTMF_DECODE_LOOP_1
       00569 0E83     1     JBS  _STATUS , Z 
       0056A 156E     1     JMP  DTMF_DECODE_LOOP_1 ,
   328            C      M 	MOV	TEMP2,@0
       0056B 1800     1     MOV A,@( 0 )
       0056C 0058     1     MOV  TEMP2 ,A
   329 0056D 1570 C        	JMP	DTMF_DECODE_LOOP_2
   330 0056E      C        DTMF_DECODE_LOOP_1:
   331            C      M 	MOV	TEMP2,_RD
       0056E 040D     1     MOV A, _RD 
       0056F 0058     1     MOV  TEMP2 ,A
   332 00570      C        DTMF_DECODE_LOOP_2:
   333            C      M 	CLRC
       00570 0803     1     BC  _STATUS , C 
   334 00571 0617 C        	RRCA	TEMP1
   335 00572 1F3F C        	ADD	A,@(CID_ADDR+3)
   336 00573 004C C        	MOV	_RC,A
   337            C      M 	JPB	TEMP1,0,DTMF_DECODE_NUM_L
       00574 0C17     1     JBC  TEMP1 , 0 
       00575 157A     1     JMP  DTMF_DECODE_NUM_L ,
   338 00576      C        DTMF_DECODE_NUM_H:
   339 00576 0718 C        	SWAPA	TEMP2
   340 00577 190F C        	OR	A,@0X0F
   341 00578 004D C        	MOV	_RD,A
   342 00579 157E C        	JMP	DTMF_DECODE_LOOP_3
   343 0057A      C        DTMF_DECODE_NUM_L:
   344            C      M 	ANDA	TEMP2,@0X0F
       0057A 180F     1     MOV A,@( 15 )
       0057B 0298     1     AND A, TEMP2 
   345 0057C 19F0 C        	OR	A,@0XF0
   346 0057D 02CD C        	AND	_RD,A
   347 0057E      C        DTMF_DECODE_LOOP_3:
   348 0057E 0556 C        	INC	TEMP0
   349 0057F 0557 C        	INC	TEMP1
   350 00580 1558 C        	JMP	DTMF_DECODE_LOOP
   351 00581      C        DTMF_DECODE_1:
   352 00581 0556 C        	INC	TEMP0
   353 00582 1558 C        	JMP	DTMF_DECODE_LOOP
   354 00583      C        DTMF_DECODE_END:
   355            C      M 	MOV	_RC,@(CID_ADDR+2)
       00583 183E     1     MOV A,@(( CID_ADDR + 2 ))
       00584 004C     1     MOV  _RC ,A
   356            C      M 	MOV	_RD,TEMP1
       00585 0417     1     MOV A, TEMP1 
       00586 004D     1     MOV  _RD ,A
   357            C      M 	SRAM	FSK_FG,CALLIN
       00587 0BDC     1     BS  FSK_FG , CALLIN 
   358            C        	;JMP	DTMF_DECODE_RET
   359            C        
   360 00588      C        DTMF_DECODE_RET:
   361            C      M 	CRAM	FSK_FG,DTMF_SUC
       00588 091C     1     BC  FSK_FG , DTMF_SUC 
   362            C      M 	SRAM	_FSR,3				; fsk power
       00589 0ACA     1     BS  _FSR , 3 
   363 0058A      C        DTMF_DECODE_RET1:
   364 0058A 1197 C        	CALL	SEND_CALL
   365 0058B 0012 C        	RET
   366            C        
   367            C        
   368 0058C      C        CLR_DECODE_RAM:
   369            C      M 	MOV	_RC,@CID_ADDR
       0058C 183C     1     MOV A,@( CID_ADDR )
       0058D 004C     1     MOV  _RC ,A
   370 0058E 00CD C        	CLR	_RD
   371 0058F      C        CLR_DECODE_RAM_LOOP:
   372 0058F 054C C        	INC	_RC
   373            C      M 	MOV	_RD,@0XFF
       00590 18FF     1     MOV A,@( 255 )
       00591 004D     1     MOV  _RD ,A
   374            C      M 	SUBA	_RC,@(CID_ADDR+33)
       00592 185D     1     MOV A,@(( CID_ADDR + 33 ))
       00593 010C     1     SUB A, _RC 
   375            C      M 	JPNZ	CLR_DECODE_RAM_LOOP
       00594 0E83     1     JBS  _STATUS , Z 
       00595 158F     1     JMP  CLR_DECODE_RAM_LOOP ,
   376 00596 0012 C        	RET
   377            C        
   378            C        /****************************************
   379            C        发送来电
   380            C        将解码之后的来电信息发送给111
   381            C        ****************************************/
   382 00597      C        SEND_CALL:
   383            C      M 	JPNB	FSK_FG,CALLIN,SEND_CALL_RET
       00597 0FDC     1     JBS  FSK_FG , CALLIN 
       00598 1646     1     JMP  SEND_CALL_RET ,
   384            C        	
   385 00599 1E84 C        	PAGE	4
   386 0059A 1389 C        	CALL	CIDNUM_MODIFY			; 号码修改，将与区域码相同的部分去掉。
   387            C        	
   388 0059B 1353 C        	CALL	SEND_DESIRE
   389            C        	
   390 0059C 1250 C        	CALL	INIT_SER
   391 0059D 1E81 C        	PAGE	1
   392            C        	
   393            C      M 	BANK	0
       0059E 0984     1     BC  _RSR , 6 
       0059F 09C4     1     BC  _RSR , 7 
   394            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       005A0 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       005A1 088B     2     BC  _RB , 2 
   395            C        	
   396 005A2 1880 C        	MOV	A,@0X80
   397 005A3 1247 C        	CALL	SEND_CALL_DATA
   398            C      M 	MOV	_RC,@(CID_ADDR+1)
       005A4 183D     1     MOV A,@(( CID_ADDR + 1 ))
       005A5 004C     1     MOV  _RC ,A
   399            C      M 	MOV	_RD,@0X02
       005A6 1802     1     MOV A,@( 2 )
       005A7 004D     1     MOV  _RD ,A
   400            C      M 	SA	7
       005A8 1980     1     OR A,@( 128 )
   401 005A9 1247 C        	CALL	SEND_CALL_DATA
   402            C      M 	MOV	_RC,@(CID_ADDR+2)
       005AA 183E     1     MOV A,@(( CID_ADDR + 2 ))
       005AB 004C     1     MOV  _RC ,A
   403            C      M 	SUBA	_RD,@0
       005AC 1800     1     MOV A,@( 0 )
       005AD 010D     1     SUB A, _RD 
   404            C      M 	JPZ	SEND_CALL_INFO_NONUM
       005AE 0C83     1     JBC  _STATUS , Z 
       005AF 15B7     1     JMP  SEND_CALL_INFO_NONUM ,
   405            C      M 	SUBA	_RD,@17
       005B0 1811     1     MOV A,@( 17 )
       005B1 010D     1     SUB A, _RD 
   406            C      M 	JPC	SEND_CALL_INFO_NONUM
       005B2 0C03     1     JBC  _STATUS , C 
       005B3 15B7     1     JMP  SEND_CALL_INFO_NONUM ,
   407 005B4 040D C        	MOV	A,_RD
   408            C      M 	SA	7
       005B5 1980     1     OR A,@( 128 )
   409 005B6 15B9 C        	JMP	SEND_CALL_INFO_NUM
   410 005B7      C        SEND_CALL_INFO_NONUM:
   411 005B7 040D C        	MOV	A,_RD
   412            C      M 	CA	7
       005B8 1A7F     1     AND A,@( 127 )
   413 005B9      C        SEND_CALL_INFO_NUM:
   414 005B9 1247 C        	CALL	SEND_CALL_DATA
   415            C        	
   416            C      M 	MOV	_RC,@(CID_ADDR+11)
       005BA 1847     1     MOV A,@(( CID_ADDR + 11 ))
       005BB 004C     1     MOV  _RC ,A
   417            C      M 	SUBA	_RD,@0
       005BC 1800     1     MOV A,@( 0 )
       005BD 010D     1     SUB A, _RD 
   418            C      M 	JPZ	SEND_CALL_INFO_NONAME
       005BE 0C83     1     JBC  _STATUS , Z 
       005BF 15C7     1     JMP  SEND_CALL_INFO_NONAME ,
   419            C      M 	SUBA	_RD,@17
       005C0 1811     1     MOV A,@( 17 )
       005C1 010D     1     SUB A, _RD 
   420            C      M 	JPC	SEND_CALL_INFO_NONAME
       005C2 0C03     1     JBC  _STATUS , C 
       005C3 15C7     1     JMP  SEND_CALL_INFO_NONAME ,
   421 005C4 040D C        	MOV	A,_RD
   422            C      M 	SA	7
       005C5 1980     1     OR A,@( 128 )
   423 005C6 15C9 C        	JMP	SEND_CALL_INFO_NAME
   424 005C7      C        SEND_CALL_INFO_NONAME:
   425 005C7 040D C        	MOV	A,_RD
   426            C      M 	CA	7
       005C8 1A7F     1     AND A,@( 127 )
   427 005C9      C        SEND_CALL_INFO_NAME:
   428 005C9 1247 C        	CALL	SEND_CALL_DATA
   429            C        	
   430            C      M 	MOV	_RC,@(CID_ADDR+28)
       005CA 1858     1     MOV A,@(( CID_ADDR + 28 ))
       005CB 004C     1     MOV  _RC ,A
   431            C      M 	SUBA	_RD,@0
       005CC 1800     1     MOV A,@( 0 )
       005CD 010D     1     SUB A, _RD 
   432            C      M 	JPZ	SEND_CALL_INFO_NOTIME
       005CE 0C83     1     JBC  _STATUS , Z 
       005CF 15D7     1     JMP  SEND_CALL_INFO_NOTIME ,
   433            C      M 	SUBA	_RD,@5
       005D0 1805     1     MOV A,@( 5 )
       005D1 010D     1     SUB A, _RD 
   434            C      M 	JPC	SEND_CALL_INFO_NOTIME
       005D2 0C03     1     JBC  _STATUS , C 
       005D3 15D7     1     JMP  SEND_CALL_INFO_NOTIME ,
   435 005D4 040D C        	MOV	A,_RD
   436            C      M 	SA	7
       005D5 1980     1     OR A,@( 128 )
   437 005D6 15D9 C        	JMP	SEND_CALL_INFO_TIME
   438 005D7      C        SEND_CALL_INFO_NOTIME:
   439 005D7 040D C        	MOV	A,_RD
   440            C      M 	CA	7
       005D8 1A7F     1     AND A,@( 127 )
   441 005D9      C        SEND_CALL_INFO_TIME:
   442 005D9 1247 C        	CALL	SEND_CALL_DATA
   443            C        	
   444 005DA 1800 C        	MOV	A,@0				; OGM .
   445 005DB 1247 C        	CALL	SEND_CALL_DATA
   446            C        	
   447 005DC 18FF C        	MOV	A,@0XFF
   448 005DD 1247 C        	CALL	SEND_CALL_DATA
   449            C        
   450 005DE      C        SEND_CALL_NUM:
   451            C      M 	MOV	_RC,@(CID_ADDR+2)
       005DE 183E     1     MOV A,@(( CID_ADDR + 2 ))
       005DF 004C     1     MOV  _RC ,A
   452            C      M 	SUBA	_RD,@0
       005E0 1800     1     MOV A,@( 0 )
       005E1 010D     1     SUB A, _RD 
   453            C      M 	JPZ	SEND_CALL_NUM_END
       005E2 0C83     1     JBC  _STATUS , Z 
       005E3 1604     1     JMP  SEND_CALL_NUM_END ,
   454            C      M 	SUBA	_RD,@17
       005E4 1811     1     MOV A,@( 17 )
       005E5 010D     1     SUB A, _RD 
   455            C      M 	JPC	SEND_CALL_NUM_END
       005E6 0C03     1     JBC  _STATUS , C 
       005E7 1604     1     JMP  SEND_CALL_NUM_END ,
   456 005E8 1880 C        	MOV	A,@0X80
   457 005E9 1247 C        	CALL	SEND_CALL_DATA
   458            C      M 	MOV	_RC,@(CID_ADDR+2)
       005EA 183E     1     MOV A,@(( CID_ADDR + 2 ))
       005EB 004C     1     MOV  _RC ,A
   459            C      M 	MOV	TEMP0,_RD
       005EC 040D     1     MOV A, _RD 
       005ED 0056     1     MOV  TEMP0 ,A
   460 005EE 0556 C        	INC	TEMP0
   461            C      M 	CLRC
       005EF 0803     1     BC  _STATUS , C 
   462 005F0 0656 C        	RRC	TEMP0
   463 005F1 0416 C        	MOV	A,TEMP0
   464 005F2 1247 C        	CALL	SEND_CALL_DATA
   465 005F3 00E0 C        	CLR	BANK0_TEMP0
   466 005F4      C        SEND_CALL_NUM_LOOP:
   467            C      M 	ADDA	BANK0_TEMP0,@(CID_ADDR+3)
       005F4 183F     1     MOV A,@(( CID_ADDR + 3 ))
       005F5 03A0     1     ADD A, BANK0_TEMP0 
   468 005F6 004C C        	MOV	_RC,A
   469            C      M 	SUBA	_RD,@0XFF
       005F7 18FF     1     MOV A,@( 255 )
       005F8 010D     1     SUB A, _RD 
   470            C      M 	JPZ	SEND_CALL_NUM_END1
       005F9 0C83     1     JBC  _STATUS , Z 
       005FA 1602     1     JMP  SEND_CALL_NUM_END1 ,
   471 005FB 040D C        	MOV	A,_RD
   472 005FC 1247 C        	CALL	SEND_CALL_DATA
   473 005FD 0560 C        	INC	BANK0_TEMP0
   474            C      M 	SUBA	BANK0_TEMP0,@8
       005FE 1808     1     MOV A,@( 8 )
       005FF 0120     1     SUB A, BANK0_TEMP0 
   475            C      M 	JPNZ	SEND_CALL_NUM_LOOP
       00600 0E83     1     JBS  _STATUS , Z 
       00601 15F4     1     JMP  SEND_CALL_NUM_LOOP ,
   476 00602      C        SEND_CALL_NUM_END1:
   477 00602 18FF C        	MOV	A,@0XFF
   478 00603 1247 C        	CALL	SEND_CALL_DATA
   479 00604      C        SEND_CALL_NUM_END:
   480            C        
   481 00604      C        SEND_CALL_TIME:
   482            C      M 	MOV	_RC,@(CID_ADDR+28)
       00604 1858     1     MOV A,@(( CID_ADDR + 28 ))
       00605 004C     1     MOV  _RC ,A
   483            C      M 	SUBA	_RD,@0
       00606 1800     1     MOV A,@( 0 )
       00607 010D     1     SUB A, _RD 
   484            C      M 	JPZ	SEND_CALL_TIME_END
       00608 0C83     1     JBC  _STATUS , Z 
       00609 1622     1     JMP  SEND_CALL_TIME_END ,
   485            C      M 	SUBA	_RD,@0XFF
       0060A 18FF     1     MOV A,@( 255 )
       0060B 010D     1     SUB A, _RD 
   486            C      M 	JPZ	SEND_CALL_TIME_END
       0060C 0C83     1     JBC  _STATUS , Z 
       0060D 1622     1     JMP  SEND_CALL_TIME_END ,
   487            C        	
   488 0060E 1880 C        	MOV	A,@0X80
   489 0060F 1247 C        	CALL	SEND_CALL_DATA
   490            C      M 	MOV	_RC,@(CID_ADDR+28)
       00610 1858     1     MOV A,@(( CID_ADDR + 28 ))
       00611 004C     1     MOV  _RC ,A
   491            C      M 	ADDA	_RD,@0X40
       00612 1840     1     MOV A,@( 64 )
       00613 038D     1     ADD A, _RD 
   492 00614 1247 C        	CALL	SEND_CALL_DATA
   493 00615 00E0 C        	CLR	BANK0_TEMP0
   494 00616      C        SEND_CALL_TIME_LOOP:
   495            C      M 	ADDA	BANK0_TEMP0,@(CID_ADDR+29)
       00616 1859     1     MOV A,@(( CID_ADDR + 29 ))
       00617 03A0     1     ADD A, BANK0_TEMP0 
   496 00618 004C C        	MOV	_RC,A
   497 00619 040D C        	MOV	A,_RD
   498 0061A 1247 C        	CALL	SEND_CALL_DATA
   499 0061B 0560 C        	INC	BANK0_TEMP0
   500            C      M 	SUBA	BANK0_TEMP0,@4
       0061C 1804     1     MOV A,@( 4 )
       0061D 0120     1     SUB A, BANK0_TEMP0 
   501            C      M 	JPNZ	SEND_CALL_TIME_LOOP
       0061E 0E83     1     JBS  _STATUS , Z 
       0061F 1616     1     JMP  SEND_CALL_TIME_LOOP ,
   502 00620      C        SEND_CALL_TIME_END1:
   503 00620 18FF C        	MOV	A,@0XFF
   504 00621 1247 C        	CALL	SEND_CALL_DATA
   505 00622      C        SEND_CALL_TIME_END:
   506            C        
   507 00622      C        SEND_CALL_NAME:
   508            C      M 	MOV	_RC,@(CID_ADDR+11)
       00622 1847     1     MOV A,@(( CID_ADDR + 11 ))
       00623 004C     1     MOV  _RC ,A
   509            C      M 	SUBA	_RD,@0
       00624 1800     1     MOV A,@( 0 )
       00625 010D     1     SUB A, _RD 
   510            C      M 	JPZ	SEND_CALL_NAME_END
       00626 0C83     1     JBC  _STATUS , Z 
       00627 1644     1     JMP  SEND_CALL_NAME_END ,
   511            C      M 	SUBA	_RD,@17
       00628 1811     1     MOV A,@( 17 )
       00629 010D     1     SUB A, _RD 
   512            C      M 	JPC	SEND_CALL_NAME_END
       0062A 0C03     1     JBC  _STATUS , C 
       0062B 1644     1     JMP  SEND_CALL_NAME_END ,
   513            C        	
   514 0062C 1880 C        	MOV	A,@0X80
   515 0062D 1247 C        	CALL	SEND_CALL_DATA
   516            C      M 	MOV	_RC,@(CID_ADDR+11)
       0062E 1847     1     MOV A,@(( CID_ADDR + 11 ))
       0062F 004C     1     MOV  _RC ,A
   517            C      M 	ADDA	_RD,@0X20
       00630 1820     1     MOV A,@( 32 )
       00631 038D     1     ADD A, _RD 
   518 00632 1247 C        	CALL	SEND_CALL_DATA
   519 00633 00E0 C        	CLR	BANK0_TEMP0
   520 00634      C        SEND_CALL_NAME_LOOP:
   521            C      M 	ADDA	BANK0_TEMP0,@(CID_ADDR+12)
       00634 1848     1     MOV A,@(( CID_ADDR + 12 ))
       00635 03A0     1     ADD A, BANK0_TEMP0 
   522 00636 004C C        	MOV	_RC,A
   523            C      M 	SUBA	_RD,@0XFF
       00637 18FF     1     MOV A,@( 255 )
       00638 010D     1     SUB A, _RD 
   524            C      M 	JPZ	SEND_CALL_NAME_END1
       00639 0C83     1     JBC  _STATUS , Z 
       0063A 1642     1     JMP  SEND_CALL_NAME_END1 ,
   525 0063B 040D C        	MOV	A,_RD
   526 0063C 1247 C        	CALL	SEND_CALL_DATA
   527 0063D 0560 C        	INC	BANK0_TEMP0
   528            C      M 	SUBA	BANK0_TEMP0,@16
       0063E 1810     1     MOV A,@( 16 )
       0063F 0120     1     SUB A, BANK0_TEMP0 
   529            C      M 	JPNZ	SEND_CALL_NAME_LOOP
       00640 0E83     1     JBS  _STATUS , Z 
       00641 1634     1     JMP  SEND_CALL_NAME_LOOP ,
   530 00642      C        SEND_CALL_NAME_END1:
   531 00642 18FF C        	MOV	A,@0XFF
   532 00643 1247 C        	CALL	SEND_CALL_DATA
   533 00644      C        SEND_CALL_NAME_END:
   534            C      M 	MOV	TMR_DELAY,@25
       00644 1819     1     MOV A,@( 25 )
       00645 0075     1     MOV  TMR_DELAY ,A
   535            C        
   536 00646      C        SEND_CALL_RET:
   537 00646 0012 C        	RET
   538 00647      C        SEND_CALL_DATA:
   539            C      M 	CALL	#STORE_SER
                      2  M  LCALL  STORE_SER 
                      3  M  PAGE #( STORE_SER ),
       00647 1E84     3     PAGE ( STORE_SER / 1024 ),
       00648 1200     2     CALL ( STORE_SER % 1024 ),
                      3  M  PAGE #( $ ),
       00649 1E81     3     PAGE ( $ / 1024 ),
   540 0064A 0012 C        	RET
   541            C        
   542            C        /****************************************
   543            C        保存来电，
   544            C        主程序检查FSK_FG.CALLIN
   545            C        如果被置位，检查CID存放区的信息：
   546            C        1、在LCD上显示号码和姓名。
   547            C        2、向DSP发送与之相关的OGM。
   548            C        3、
   549            C        *****************************************/
   550 0064B      C        CID_STORE:
   551            C      M 	BANK	0
       0064B 0984     1     BC  _RSR , 6 
       0064C 09C4     1     BC  _RSR , 7 
   552            C      M 	JPNB	FSK_FG,CALLIN,CID_STORE_RET
       0064D 0FDC     1     JBS  FSK_FG , CALLIN 
       0064E 1661     1     JMP  CID_STORE_RET ,
   553            C      M 	JPNB	SYS_FG,NEWCALL,CID_STORE_1
       0064F 0E5E     1     JBS  SYS_FG , NEWCALL 
       00650 1654     1     JMP  CID_STORE_1 ,
   554 00651 0435 C        	MOV	A,TMR_DELAY
   555            C      M 	JPNZ	CID_STORE_RET
       00652 0E83     1     JBS  _STATUS , Z 
       00653 1661     1     JMP  CID_STORE_RET ,
   556 00654      C        CID_STORE_1:
   557 00654 0000 C        	NOP
   558            C      M 	CRAM	FSK_FG,CALLIN
       00655 09DC     1     BC  FSK_FG , CALLIN 
   559            C      M 	CRAM	SYS_FG,LOCK_TOPLINE
       00656 095E     1     BC  SYS_FG , LOCK_TOPLINE 
   560            C        
   561            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00657 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00658 088B     2     BC  _RB , 2 
   562            C      M 	MOV	_RC,@(CID_ADDR+0)
       00659 183C     1     MOV A,@(( CID_ADDR + 0 ))
       0065A 004C     1     MOV  _RC ,A
   563            C      M 	MOV	_RD,@(STYLE_CENTER+0)		; 居中显示，不屏蔽第一行	
       0065B 1860     1     MOV A,@(( STYLE_CENTER + 0 ))
       0065C 004D     1     MOV  _RD ,A
   564 0065D 1262 C        	CALL	DISP_CID			; 显示来电
   565            C      M 	MOV	TMR_NAME,@16
       0065E 1810     1     MOV A,@( 16 )
       0065F 0078     1     MOV  TMR_NAME ,A
   566            C      M 	SRAM	EVENT,0
       00660 0A1F     1     BS  EVENT , 0 
   567            C        	;CALL	STORE_CALL			; 保存号码
   568            C        	
   569            C        	;CALL	COMPARE_NOTE			; 比较记录
   570            C        
   571            C        
   572 00661      C        CID_STORE_RET:
   573 00661 0012 C        	RET
   574            C        
   575            C        /***************************************
   576            C        显示Caller ID信息
   577            C        ***************************************/
   578            C        
   579 00662      C        DISP_CID:
   580            C      M 	BANK	0
       00662 0984     1     BC  _RSR , 6 
       00663 09C4     1     BC  _RSR , 7 
   581            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00664 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00665 088B     2     BC  _RB , 2 
   582            C      M 	MOV	_RC,@(CID_ADDR+0)
       00666 183C     1     MOV A,@(( CID_ADDR + 0 ))
       00667 004C     1     MOV  _RC ,A
   583            C      M 	MOV	BANK0_TEMP1,_RD
       00668 040D     1     MOV A, _RD 
       00669 0061     1     MOV  BANK0_TEMP1 ,A
   584            C      M 	JPNB	BANK0_TEMP1,7,DISP_CID_NUM
       0066A 0FE1     1     JBS  BANK0_TEMP1 , 7 
       0066B 16DD     1     JMP  DISP_CID_NUM ,
   585            C        	;JMP	DISP_CID_NUM
   586 0066C      C        DISP_CID_TIME:
   587            C      M 	CALL	#MENU_LOCK			; 屏蔽第一行的更新
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       0066C 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       0066D 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       0066E 1E81     3     PAGE ( $ / 1024 ),
   588            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0066F 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00670 088B     2     BC  _RB , 2 
   589            C      M 	MOV	_RC,@(CID_ADDR+28)
       00671 1858     1     MOV A,@(( CID_ADDR + 28 ))
       00672 004C     1     MOV  _RC ,A
   590            C      M 	SUBA	_RD,@0				; 没有时间信息
       00673 1800     1     MOV A,@( 0 )
       00674 010D     1     SUB A, _RD 
   591            C      M 	JPZ	DISP_CID_TIME_1
       00675 0C83     1     JBC  _STATUS , Z 
       00676 16B8     1     JMP  DISP_CID_TIME_1 ,
   592            C      M 	SUBA	_RD,@0X7F
       00677 187F     1     MOV A,@( 127 )
       00678 010D     1     SUB A, _RD 
   593            C      M 	JPC	DISP_CID_TIME_1
       00679 0C03     1     JBC  _STATUS , C 
       0067A 16B8     1     JMP  DISP_CID_TIME_1 ,
   594            C      M 	MOV	_RC,@(CID_ADDR+1)
       0067B 183D     1     MOV A,@(( CID_ADDR + 1 ))
       0067C 004C     1     MOV  _RC ,A
   595            C      M 	ANDA	_RD,@0X03
       0067D 1803     1     MOV A,@( 3 )
       0067E 028D     1     AND A, _RD 
   596 0067F 1F30 C        	ADD	A,@0X30				; 有时间信息则亮秒和斜线
   597            C      M 	CALL	#VGA_STAMP
                      2  M  LCALL  VGA_STAMP 
                      3  M  PAGE #( VGA_STAMP ),
       00680 1E85     3     PAGE ( VGA_STAMP / 1024 ),
       00681 1000     2     CALL ( VGA_STAMP % 1024 ),
                      3  M  PAGE #( $ ),
       00682 1E81     3     PAGE ( $ / 1024 ),
   598 00683 0421 C        	MOV	A,BANK0_TEMP1
   599            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       00684 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       00685 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       00686 1E81     3     PAGE ( $ / 1024 ),
   600            C        	
   601            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00687 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00688 088B     2     BC  _RB , 2 
   602            C      M 	MOV	_RC,@(CID_ADDR+31)		; 小时
       00689 185B     1     MOV A,@(( CID_ADDR + 31 ))
       0068A 004C     1     MOV  _RC ,A
   603 0068B 040D C        	MOV	A,_RD
   604            C      M 	CALL	#VGA_HOUR
                      2  M  LCALL  VGA_HOUR 
                      3  M  PAGE #( VGA_HOUR ),
       0068C 1E84     3     PAGE ( VGA_HOUR / 1024 ),
       0068D 1040     2     CALL ( VGA_HOUR % 1024 ),
                      3  M  PAGE #( $ ),
       0068E 1E81     3     PAGE ( $ / 1024 ),
   605            C        	
   606            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0068F 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00690 088B     2     BC  _RB , 2 
   607            C      M 	MOV	_RC,@(CID_ADDR+32)		; 分钟
       00691 185C     1     MOV A,@(( CID_ADDR + 32 ))
       00692 004C     1     MOV  _RC ,A
   608 00693 040D C        	MOV	A,_RD
   609            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       00694 1E84     3     PAGE ( VGA_TIME / 1024 ),
       00695 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00696 1E81     3     PAGE ( $ / 1024 ),
   610            C        	
   611            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00697 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00698 088B     2     BC  _RB , 2 
   612            C      M 	MOV	_RC,@(CID_ADDR+30)		; 日期
       00699 185A     1     MOV A,@(( CID_ADDR + 30 ))
       0069A 004C     1     MOV  _RC ,A
   613 0069B 040D C        	MOV	A,_RD
   614            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       0069C 1E84     3     PAGE ( VGA_TIME / 1024 ),
       0069D 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       0069E 1E81     3     PAGE ( $ / 1024 ),
   615            C        	
   616            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0069F 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006A0 088B     2     BC  _RB , 2 
   617            C      M 	MOV	_RC,@(CID_ADDR+29)		; 月份
       006A1 1859     1     MOV A,@(( CID_ADDR + 29 ))
       006A2 004C     1     MOV  _RC ,A
   618            C      M 	MOV	GENE_A,_RD
       006A3 040D     1     MOV A, _RD 
       006A4 0056     1     MOV  GENE_A ,A
   619            C      M 	CALL	#MATH_HTD
                      2  M  LCALL  MATH_HTD 
                      3  M  PAGE #( MATH_HTD ),
       006A5 1E84     3     PAGE ( MATH_HTD / 1024 ),
       006A6 1100     2     CALL ( MATH_HTD % 1024 ),
                      3  M  PAGE #( $ ),
       006A7 1E81     3     PAGE ( $ / 1024 ),
   620            C      M 	MOV	TEMP5,RESULT
       006A8 0418     1     MOV A, RESULT 
       006A9 005B     1     MOV  TEMP5 ,A
   621 006AA 071B C        	SWAPA	TEMP5
   622 006AB 1A0F C        	AND	A,@(0X0F)
   623            C      M 	JPNZ	$+2
       006AC 0E83     1     JBS  _STATUS , Z 
       006AD 16AF     1     JMP ( $ + 2 ),
   624 006AE 1810 C        	MOV	A,@0X10
   625            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       006AF 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       006B0 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       006B1 1E81     3     PAGE ( $ / 1024 ),
   626            C      M 	ANDA	TEMP5,@(0X0F)
       006B2 180F     1     MOV A,@( 15 )
       006B3 029B     1     AND A, TEMP5 
   627            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       006B4 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       006B5 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       006B6 1E81     3     PAGE ( $ / 1024 ),
   628 006B7 16CD C        	JMP	DISP_CID_TIME_2
   629 006B8      C        DISP_CID_TIME_1:
   630            C      M 	MOV	_RC,@(CID_ADDR+1)
       006B8 183D     1     MOV A,@(( CID_ADDR + 1 ))
       006B9 004C     1     MOV  _RC ,A
   631            C      M 	ANDA	_RD,@0X03			; 没有时间信息不亮秒和斜线
       006BA 1803     1     MOV A,@( 3 )
       006BB 028D     1     AND A, _RD 
   632            C      M 	CALL	#VGA_STAMP
                      2  M  LCALL  VGA_STAMP 
                      3  M  PAGE #( VGA_STAMP ),
       006BC 1E85     3     PAGE ( VGA_STAMP / 1024 ),
       006BD 1000     2     CALL ( VGA_STAMP % 1024 ),
                      3  M  PAGE #( $ ),
       006BE 1E81     3     PAGE ( $ / 1024 ),
   633 006BF 0421 C        	MOV	A,BANK0_TEMP1
   634            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       006C0 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       006C1 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       006C2 1E81     3     PAGE ( $ / 1024 ),
   635 006C3 00E0 C        	CLR	BANK0_TEMP0
   636 006C4      C        DISP_CID_TIME_1_LOOP:
   637 006C4 1810 C        	MOV	A,@NUM_BLANK
   638            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       006C5 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       006C6 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       006C7 1E81     3     PAGE ( $ / 1024 ),
   639 006C8 0560 C        	INC	BANK0_TEMP0
   640            C      M 	SUBA	BANK0_TEMP0,@8
       006C9 1808     1     MOV A,@( 8 )
       006CA 0120     1     SUB A, BANK0_TEMP0 
   641            C      M 	JPNZ	DISP_CID_TIME_1_LOOP
       006CB 0E83     1     JBS  _STATUS , Z 
       006CC 16C4     1     JMP  DISP_CID_TIME_1_LOOP ,
   642            C        	
   643 006CD      C        DISP_CID_TIME_2:
   644            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       006CD 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006CE 088B     2     BC  _RB , 2 
   645            C      M 	MOV	_RC,@(CID_ADDR+33)		; NUM
       006CF 185D     1     MOV A,@(( CID_ADDR + 33 ))
       006D0 004C     1     MOV  _RC ,A
   646            C      M 	SUBA	_RD,@0XFF
       006D1 18FF     1     MOV A,@( 255 )
       006D2 010D     1     SUB A, _RD 
   647            C      M 	JPZ	DISP_CID_TIME_3
       006D3 0C83     1     JBC  _STATUS , Z 
       006D4 16D9     1     JMP  DISP_CID_TIME_3 ,
   648 006D5 040D C        	MOV	A,_RD
   649            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       006D6 1E84     3     PAGE ( VGA_TIME / 1024 ),
       006D7 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       006D8 1E81     3     PAGE ( $ / 1024 ),
   650 006D9      C        DISP_CID_TIME_3:
   651 006D9 18FF C        	MOV	A,@CH_END
   652            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       006DA 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       006DB 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       006DC 1E81     3     PAGE ( $ / 1024 ),
   653            C        	
   654            C        	
   655            C        	
   656 006DD      C        DISP_CID_NUM:
   657            C      M 	CALL	#CLR_NUM2
                      2  M  LCALL  CLR_NUM2 
                      3  M  PAGE #( CLR_NUM2 ),
       006DD 1E85     3     PAGE ( CLR_NUM2 / 1024 ),
       006DE 107E     2     CALL ( CLR_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       006DF 1E81     3     PAGE ( $ / 1024 ),
   658            C        	
   659            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       006E0 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006E1 088B     2     BC  _RB , 2 
   660            C      M 	BANK	0
       006E2 0984     1     BC  _RSR , 6 
       006E3 09C4     1     BC  _RSR , 7 
   661 006E4 00E0 C        	CLR	BANK0_TEMP0
   662 006E5 0421 C        	MOV	A,BANK0_TEMP1			; 居中显示，初始化显示区
   663            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       006E6 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       006E7 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       006E8 1E81     3     PAGE ( $ / 1024 ),
   664            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       006E9 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006EA 088B     2     BC  _RB , 2 
   665            C      M 	MOV	_RC,@(CID_ADDR+2)
       006EB 183E     1     MOV A,@(( CID_ADDR + 2 ))
       006EC 004C     1     MOV  _RC ,A
   666            C      M 	SUBA	_RD,@0X00
       006ED 1800     1     MOV A,@( 0 )
       006EE 010D     1     SUB A, _RD 
   667            C      M 	JPZ	DISP_CID_NUM_NONUM
       006EF 0C83     1     JBC  _STATUS , Z 
       006F0 1720     1     JMP  DISP_CID_NUM_NONUM ,
   668            C      M 	SUBA	_RD,@0X4F			; 'O'
       006F1 184F     1     MOV A,@( 79 )
       006F2 010D     1     SUB A, _RD 
   669            C      M 	JPZ	DISP_CID_NUM_NONUM
       006F3 0C83     1     JBC  _STATUS , Z 
       006F4 1720     1     JMP  DISP_CID_NUM_NONUM ,
   670            C      M 	SUBA	_RD,@0X50			; 'P'
       006F5 1850     1     MOV A,@( 80 )
       006F6 010D     1     SUB A, _RD 
   671            C      M 	JPZ	DISP_CID_NUM_PRIVATE
       006F7 0C83     1     JBC  _STATUS , Z 
       006F8 1721     1     JMP  DISP_CID_NUM_PRIVATE ,
   672            C      M 	SUBA	_RD,@0X17
       006F9 1817     1     MOV A,@( 23 )
       006FA 010D     1     SUB A, _RD 
   673            C      M 	JPC	DISP_CID_NUM_NONUM
       006FB 0C03     1     JBC  _STATUS , C 
       006FC 1720     1     JMP  DISP_CID_NUM_NONUM ,
   674 006FD      C        DISP_CID_NUM_LOOP:
   675            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       006FD 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       006FE 088B     2     BC  _RB , 2 
   676            C      M 	CLRC
       006FF 0803     1     BC  _STATUS , C 
   677 00700 0620 C        	RRCA	BANK0_TEMP0
   678 00701 1F3F C        	ADD	A,@(CID_ADDR+3)
   679 00702 004C C        	MOV	_RC,A
   680            C      M 	JPB	BANK0_TEMP0,0,DISP_CID_NUM_LOOP_L
       00703 0C20     1     JBC  BANK0_TEMP0 , 0 
       00704 1710     1     JMP  DISP_CID_NUM_LOOP_L ,
   681 00705      C        DISP_CID_NUM_LOOP_H:
   682 00705 070D C        	SWAPA	_RD
   683 00706 1A0F C        	AND	A,@0X0F
   684 00707 0056 C        	MOV	TEMP0,A
   685 00708 1D0F C        	SUB	A,@0X0F
   686            C      M 	JPZ	DISP_CID_NUM_END
       00709 0C83     1     JBC  _STATUS , Z 
       0070A 1722     1     JMP  DISP_CID_NUM_END ,
   687 0070B 0416 C        	MOV	A,TEMP0
   688            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       0070C 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       0070D 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       0070E 1E81     3     PAGE ( $ / 1024 ),
   689 0070F 171A C        	JMP	DISP_CID_NUM_LOOP1
   690 00710      C        DISP_CID_NUM_LOOP_L:
   691            C      M 	ANDA	_RD,@0X0F
       00710 180F     1     MOV A,@( 15 )
       00711 028D     1     AND A, _RD 
   692 00712 0056 C        	MOV	TEMP0,A
   693 00713 1D0F C        	SUB	A,@0X0F
   694            C      M 	JPZ	DISP_CID_NUM_END
       00714 0C83     1     JBC  _STATUS , Z 
       00715 1722     1     JMP  DISP_CID_NUM_END ,
   695 00716 0416 C        	MOV	A,TEMP0
   696            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00717 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00718 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00719 1E81     3     PAGE ( $ / 1024 ),
   697 0071A      C        DISP_CID_NUM_LOOP1:
   698 0071A 0560 C        	INC	BANK0_TEMP0
   699            C      M 	SUBA	BANK0_TEMP0,@16
       0071B 1810     1     MOV A,@( 16 )
       0071C 0120     1     SUB A, BANK0_TEMP0 
   700            C      M 	JPNZ	DISP_CID_NUM_LOOP
       0071D 0E83     1     JBS  _STATUS , Z 
       0071E 16FD     1     JMP  DISP_CID_NUM_LOOP ,
   701 0071F 1722 C        	JMP	DISP_CID_NUM_END
   702 00720      C        DISP_CID_NUM_NONUM:
   703 00720 1722 C        	JMP	DISP_CID_NUM_END
   704 00721      C        DISP_CID_NUM_PRIVATE:
   705 00721 1722 C        	JMP	DISP_CID_NUM_END
   706 00722      C        DISP_CID_NUM_END:
   707 00722 18FF C        	MOV	A,@CH_END
   708            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00723 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00724 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00725 1E81     3     PAGE ( $ / 1024 ),
   709            C        
   710 00726      C        DISP_CID_NAME:
   711            C      M 	CALL	#CLR_STR
                      2  M  LCALL  CLR_STR 
                      3  M  PAGE #( CLR_STR ),
       00726 1E85     3     PAGE ( CLR_STR / 1024 ),
       00727 1084     2     CALL ( CLR_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00728 1E81     3     PAGE ( $ / 1024 ),
   712            C        	
   713            C      M 	BANK	0
       00729 0984     1     BC  _RSR , 6 
       0072A 09C4     1     BC  _RSR , 7 
   714 0072B 00E0 C        	CLR	BANK0_TEMP0
   715 0072C 0421 C        	MOV	A,BANK0_TEMP1			; 居中显示
   716            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       0072D 1E85     3     PAGE ( VGA_STR / 1024 ),
       0072E 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       0072F 1E81     3     PAGE ( $ / 1024 ),
   717            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00730 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00731 088B     2     BC  _RB , 2 
   718            C      M 	MOV	_RC,@(CID_ADDR+11)
       00732 1847     1     MOV A,@(( CID_ADDR + 11 ))
       00733 004C     1     MOV  _RC ,A
   719            C      M 	SUBA	_RD,@0X00
       00734 1800     1     MOV A,@( 0 )
       00735 010D     1     SUB A, _RD 
   720            C      M 	JPZ	DISP_CID_NAME_NONAME
       00736 0C83     1     JBC  _STATUS , Z 
       00737 1757     1     JMP  DISP_CID_NAME_NONAME ,
   721            C      M 	SUBA	_RD,@0X4F			; 'O'
       00738 184F     1     MOV A,@( 79 )
       00739 010D     1     SUB A, _RD 
   722            C      M 	JPZ	DISP_CID_NAME_NONAME
       0073A 0C83     1     JBC  _STATUS , Z 
       0073B 1757     1     JMP  DISP_CID_NAME_NONAME ,
   723            C      M 	SUBA	_RD,@0X50			; 'P'
       0073C 1850     1     MOV A,@( 80 )
       0073D 010D     1     SUB A, _RD 
   724            C      M 	JPZ	DISP_CID_NAME_PRIVATE
       0073E 0C83     1     JBC  _STATUS , Z 
       0073F 1758     1     JMP  DISP_CID_NAME_PRIVATE ,
   725            C      M 	SUBA	_RD,@17
       00740 1811     1     MOV A,@( 17 )
       00741 010D     1     SUB A, _RD 
   726            C      M 	JPC	DISP_CID_NAME_NONAME
       00742 0C03     1     JBC  _STATUS , C 
       00743 1757     1     JMP  DISP_CID_NAME_NONAME ,
   727 00744      C        DISP_CID_NAME_LOOP:
   728            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00744 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00745 088B     2     BC  _RB , 2 
   729            C      M 	ADDA	BANK0_TEMP0,@(CID_ADDR+12)
       00746 1848     1     MOV A,@(( CID_ADDR + 12 ))
       00747 03A0     1     ADD A, BANK0_TEMP0 
   730 00748 004C C        	MOV	_RC,A
   731            C      M 	SUBA	_RD,@0XFF
       00749 18FF     1     MOV A,@( 255 )
       0074A 010D     1     SUB A, _RD 
   732            C      M 	JPZ	DISP_CID_NAME_END
       0074B 0C83     1     JBC  _STATUS , Z 
       0074C 1759     1     JMP  DISP_CID_NAME_END ,
   733 0074D 040D C        	MOV	A,_RD
   734            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       0074E 1E85     3     PAGE ( VGA_STR / 1024 ),
       0074F 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00750 1E81     3     PAGE ( $ / 1024 ),
   735 00751 0560 C        	INC	BANK0_TEMP0
   736            C      M 	SUBA	BANK0_TEMP0,@16
       00752 1810     1     MOV A,@( 16 )
       00753 0120     1     SUB A, BANK0_TEMP0 
   737            C      M 	JPNZ	DISP_CID_NAME_LOOP
       00754 0E83     1     JBS  _STATUS , Z 
       00755 1744     1     JMP  DISP_CID_NAME_LOOP ,
   738 00756 1759 C        	JMP	DISP_CID_NAME_END
   739 00757      C        DISP_CID_NAME_NONAME:
   740 00757 1759 C        	JMP	DISP_CID_NAME_END
   741 00758      C        DISP_CID_NAME_PRIVATE:
   742 00758 1759 C        	JMP	DISP_CID_NAME_END
   743 00759      C        DISP_CID_NAME_END:
   744 00759 18FF C        	MOV	A,@CH_END
   745            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       0075A 1E85     3     PAGE ( VGA_STR / 1024 ),
       0075B 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       0075C 1E81     3     PAGE ( $ / 1024 ),
   746            C        	
   747 0075D 0012 C        	RET
   748            C        
   749            C        
   750            C        CID_DECODE	MACRO
   751            C        	PAGE	#FSK_DECODE
   752            C        	CALL	FSK_DECODE
   753            C        	CALL	DTMF_DECODE
   754            C        	CALL	CID_STORE
   755            C        	PAGE	#($)
   756            C        	ENDM
   757            C        
   758            C        
   489                     include	"stcp.asm"
     1            C        ORG	0X0800
     2            C        
     3            C        
     4 00800      C        RESET_REC_TIMER:
     5            C      M 	BANK	1
       00800 0B84     1     BS  _RSR , 6 
       00801 09C4     1     BC  _RSR , 7 
     6 00802 0011 C        	DISI
     7            C      M 	MOV	TIME_MS,@250
       00803 18FA     1     MOV A,@( 250 )
       00804 006B     1     MOV  TIME_MS ,A
     8 00805 00EC C        	CLR	TIME_SEC
     9 00806 00ED C        	CLR	TIME_MIN
    10 00807 00EE C        	CLR	TIME_HOUR
    11            C      M 	SRAM	SYS_FG,TIME
       00808 0BDE     1     BS  SYS_FG , TIME 
    12 00809 0010 C        	ENI
    13            C      M 	BANK	0
       0080A 0984     1     BC  _RSR , 6 
       0080B 09C4     1     BC  _RSR , 7 
    14 0080C 0012 C        	RET
    15            C        
    16            C        /*****************************
    17            C        显示屏锁定，
    18            C        显示更新不起作用
    19            C        *****************************/
    20 0080D      C        MENU_LOCK:
    21            C      M 	SRAM	SYS_FG,LOCK_TOPLINE
       0080D 0B5E     1     BS  SYS_FG , LOCK_TOPLINE 
    22            C      M 	PAGE	#(CLR_LCD)
       0080E 1E85     1     PAGE ( CLR_LCD / 1024 ),
    23 0080F 1072 C        	CALL	CLR_STAMP
    24 00810 1078 C        	CALL	CLR_NUM1
    25 00811 107E C        	CALL	CLR_NUM2
    26 00812 1084 C        	CALL	CLR_STR
    27            C      M 	PAGE	#($)
       00813 1E82     1     PAGE ( $ / 1024 ),
    28 00814 0012 C        	RET
    29            C        
    30 00815      C        MENU_CHK:
    31 00815 0056 C        	MOV	TEMP0,A
    32            C      M 	XORA	TEMP0,MENU_STATE
       00816 0439     1     MOV A, MENU_STATE 
       00817 0316     1     XOR A, TEMP0 
    33            C      M 	JPZ	MENU_CHK_RET
       00818 0C83     1     JBC  _STATUS , Z 
       00819 147A     1     JMP  MENU_CHK_RET ,
    34            C      M 	MOV	MENU_STATE,TEMP0
       0081A 0416     1     MOV A, TEMP0 
       0081B 0079     1     MOV  MENU_STATE ,A
    35            C      M 	CALL	#MENU_LOCK
       0081C 100D     1     CALL ( MENU_LOCK % 1024 ),
    36            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0081D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0081E 088B     2     BC  _RB , 2 
    37 0081F 0439 C        	MOV	A,MENU_STATE
    38 00820 0020 C        	TBL
    39 00821 147A C        	JMP	MENU_CHK_IDLE
    40 00822 147A C        	JMP	MENU_CHK_LANGUAGE
    41 00823 1428 C        	JMP	MENU_CHK_TIME
    42 00824 147A C        	JMP	MENU_CHK_LCD
    43 00825 143D C        	JMP	MENU_CHK_CODE
    44 00826 1455 C        	JMP	MENU_CHK_LCALL
    45 00827 147A C        	JMP	MENU_CHK_RING
    46 00828      C        MENU_CHK_TIME:
    47            C      M 	MOV	_RC,@(EDIT_ADDR+1)
       00828 185F     1     MOV A,@(( EDIT_ADDR + 1 ))
       00829 004C     1     MOV  _RC ,A
    48            C      M 	MOV	_RD,HOUR_REG
       0082A 0428     1     MOV A, HOUR_REG 
       0082B 004D     1     MOV  _RD ,A
    49 0082C 054C C        	INC	_RC
    50            C      M 	MOV	_RD,MIN_REG
       0082D 0429     1     MOV A, MIN_REG 
       0082E 004D     1     MOV  _RD ,A
    51 0082F 054C C        	INC	_RC
    52            C      M 	MOV	_RD,MONTH_REG
       00830 0425     1     MOV A, MONTH_REG 
       00831 004D     1     MOV  _RD ,A
    53 00832 054C C        	INC	_RC
    54            C      M 	MOV	_RD,DAY_REG
       00833 0426     1     MOV A, DAY_REG 
       00834 004D     1     MOV  _RD ,A
    55 00835 054C C        	INC	_RC
    56            C      M 	MOV	_RD,WEEK_REG
       00836 0427     1     MOV A, WEEK_REG 
       00837 004D     1     MOV  _RD ,A
    57 00838 1830 C        	MOV	A,@0X30
    58            C      M 	CALL	#VGA_STAMP
                      2  M  LCALL  VGA_STAMP 
                      3  M  PAGE #( VGA_STAMP ),
       00839 1E85     3     PAGE ( VGA_STAMP / 1024 ),
       0083A 1000     2     CALL ( VGA_STAMP % 1024 ),
                      3  M  PAGE #( $ ),
       0083B 1E82     3     PAGE ( $ / 1024 ),
    59 0083C 147A C        	JMP	MENU_CHK_RET
    60 0083D      C        MENU_CHK_CODE:
    61            C      M 	BANK	1
       0083D 0B84     1     BS  _RSR , 6 
       0083E 09C4     1     BC  _RSR , 7 
    62            C      M 	MOV	_RC,@(EDIT_ADDR+6)
       0083F 1864     1     MOV A,@(( EDIT_ADDR + 6 ))
       00840 004C     1     MOV  _RC ,A
    63 00841 0735 C        	SWAPA	R1_CODE1
    64 00842 1A0F C        	AND	A,@0X0F
    65 00843 004D C        	MOV	_RD,A
    66 00844 054C C        	INC	_RC
    67 00845 0736 C        	SWAPA	R1_CODE23
    68 00846 1A0F C        	AND	A,@0X0F
    69 00847 004D C        	MOV	_RD,A
    70 00848 054C C        	INC	_RC
    71            C      M 	ANDA	R1_CODE23,@0X0F
       00849 180F     1     MOV A,@( 15 )
       0084A 02B6     1     AND A, R1_CODE23 
    72 0084B 004D C        	MOV	_RD,A
    73            C      M 	PAGE	#(VGA_STR)
       0084C 1E85     1     PAGE ( VGA_STR / 1024 ),
    74 0084D 1860 C        	MOV	A,@(STYLE_CENTER)
    75 0084E 104B C        	CALL	VGA_STR
    76 0084F 1812 C        	MOV	A,@(WD_SET_REMOTE_CODE)
    77 00850 11BF C        	CALL	VGA_STRING
    78 00851 18FF C        	MOV	A,@CH_END
    79 00852 104B C        	CALL	VGA_STR
    80            C      M 	PAGE	#($)
       00853 1E82     1     PAGE ( $ / 1024 ),
    81 00854 147A C        	JMP	MENU_CHK_RET
    82 00855      C        MENU_CHK_LCALL:
    83            C      M 	MOV	_RC,@(EDIT_ADDR+6)
       00855 1864     1     MOV A,@(( EDIT_ADDR + 6 ))
       00856 004C     1     MOV  _RC ,A
    84 00857 0730 C        	SWAPA	LCALL12
    85 00858 1A0F C        	AND	A,@0X0F
    86 00859 004D C        	MOV	_RD,A
    87 0085A 054C C        	INC	_RC
    88            C      M 	ANDA	LCALL12,@0X0F
       0085B 180F     1     MOV A,@( 15 )
       0085C 02B0     1     AND A, LCALL12 
    89 0085D 004D C        	MOV	_RD,A
    90 0085E 054C C        	INC	_RC
    91 0085F 0731 C        	SWAPA	LCALL34
    92 00860 1A0F C        	AND	A,@0X0F
    93 00861 004D C        	MOV	_RD,A
    94 00862 054C C        	INC	_RC
    95            C      M 	ANDA	LCALL34,@0X0F
       00863 180F     1     MOV A,@( 15 )
       00864 02B1     1     AND A, LCALL34 
    96 00865 004D C        	MOV	_RD,A
    97 00866 054C C        	INC	_RC
    98 00867 0732 C        	SWAPA	LCALL5
    99 00868 1A0F C        	AND	A,@0X0F
   100 00869 004D C        	MOV	_RD,A
   101            C        	
   102 0086A 054C C        	INC	_RC
   103            C      M 	MOV	_RD,@0X0F
       0086B 180F     1     MOV A,@( 15 )
       0086C 004D     1     MOV  _RD ,A
   104            C      M 	SUBA	_RC,@(EDIT_ADDR+21)
       0086D 1873     1     MOV A,@(( EDIT_ADDR + 21 ))
       0086E 010C     1     SUB A, _RC 
   105            C      M 	JPNZ	$-6
       0086F 0E83     1     JBS  _STATUS , Z 
       00870 146A     1     JMP ( $ - 6 ),
   106            C        	
   107            C      M 	PAGE	#(VGA_STR)
       00871 1E85     1     PAGE ( VGA_STR / 1024 ),
   108 00872 1860 C        	MOV	A,@(STYLE_CENTER)
   109 00873 104B C        	CALL	VGA_STR
   110 00874 1813 C        	MOV	A,@(WD_SET_LONG_CODE)
   111 00875 11BF C        	CALL	VGA_STRING
   112 00876 18FF C        	MOV	A,@CH_END
   113 00877 104B C        	CALL	VGA_STR
   114            C      M 	PAGE	#($)
       00878 1E82     1     PAGE ( $ / 1024 ),
   115 00879 147A C        	JMP	MENU_CHK_RET
   116 0087A      C        MENU_CHK_IDLE:
   117 0087A      C        MENU_CHK_LANGUAGE:
   118 0087A      C        MENU_CHK_LCD:
   119 0087A      C        MENU_CHK_RING:
   120 0087A      C        MENU_CHK_RET:
   121            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0087A 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0087B 088B     2     BC  _RB , 2 
   122 0087C 0012 C        	RET
   123            C        
   124            C        /***************************************
   125            C        初始化编辑区
   126            C        将CID区的电话号码复制到编辑区
   127            C        或将编辑区清空
   128            C        ***************************************/
   129 0087D      C        INIT_EDIT:
   130            C        ; -----------------------	将CID区的电话号码信息复制到编辑区
   131            C        	;CIDBANK	1
   132 0087D 1081 C        	CALL	INIT_EDIT_NUM1
   133 0087E 10AA C        	CALL	INIT_EDIT_NUM2
   134 0087F 10C2 C        	CALL	INIT_EDIT_STR
   135 00880 0012 C        	RET
   136            C        
   137 00881      C        INIT_EDIT_NUM1:
   138            C      M 	MOV	_RC,@(CID_ADDR+31)
       00881 185B     1     MOV A,@(( CID_ADDR + 31 ))
       00882 004C     1     MOV  _RC ,A
   139            C      M 	MOV	TEMP0,_RD
       00883 040D     1     MOV A, _RD 
       00884 0056     1     MOV  TEMP0 ,A
   140            C      M 	MOV	_RC,@(EDIT_ADDR+1)
       00885 185F     1     MOV A,@(( EDIT_ADDR + 1 ))
       00886 004C     1     MOV  _RC ,A
   141            C      M 	MOV	_RD,TEMP0
       00887 0416     1     MOV A, TEMP0 
       00888 004D     1     MOV  _RD ,A
   142            C      M 	MOV	_RC,@(CID_ADDR+32)
       00889 185C     1     MOV A,@(( CID_ADDR + 32 ))
       0088A 004C     1     MOV  _RC ,A
   143            C      M 	MOV	TEMP0,_RD
       0088B 040D     1     MOV A, _RD 
       0088C 0056     1     MOV  TEMP0 ,A
   144            C      M 	MOV	_RC,@(EDIT_ADDR+2)
       0088D 1860     1     MOV A,@(( EDIT_ADDR + 2 ))
       0088E 004C     1     MOV  _RC ,A
   145            C      M 	MOV	_RD,TEMP0
       0088F 0416     1     MOV A, TEMP0 
       00890 004D     1     MOV  _RD ,A
   146            C      M 	MOV	_RC,@(CID_ADDR+30)
       00891 185A     1     MOV A,@(( CID_ADDR + 30 ))
       00892 004C     1     MOV  _RC ,A
   147            C      M 	MOV	TEMP0,_RD
       00893 040D     1     MOV A, _RD 
       00894 0056     1     MOV  TEMP0 ,A
   148            C      M 	MOV	_RC,@(EDIT_ADDR+3)
       00895 1861     1     MOV A,@(( EDIT_ADDR + 3 ))
       00896 004C     1     MOV  _RC ,A
   149            C      M 	MOV	_RD,TEMP0
       00897 0416     1     MOV A, TEMP0 
       00898 004D     1     MOV  _RD ,A
   150            C      M 	MOV	_RC,@(CID_ADDR+29)
       00899 1859     1     MOV A,@(( CID_ADDR + 29 ))
       0089A 004C     1     MOV  _RC ,A
   151            C      M 	MOV	TEMP0,_RD
       0089B 040D     1     MOV A, _RD 
       0089C 0056     1     MOV  TEMP0 ,A
   152            C      M 	MOV	_RC,@(EDIT_ADDR+4)
       0089D 1862     1     MOV A,@(( EDIT_ADDR + 4 ))
       0089E 004C     1     MOV  _RC ,A
   153            C      M 	MOV	_RD,TEMP0
       0089F 0416     1     MOV A, TEMP0 
       008A0 004D     1     MOV  _RD ,A
   154            C      M 	MOV	_RC,@(CID_ADDR+33)
       008A1 185D     1     MOV A,@(( CID_ADDR + 33 ))
       008A2 004C     1     MOV  _RC ,A
   155            C      M 	MOV	TEMP0,_RD
       008A3 040D     1     MOV A, _RD 
       008A4 0056     1     MOV  TEMP0 ,A
   156            C      M 	MOV	_RC,@(EDIT_ADDR+5)
       008A5 1863     1     MOV A,@(( EDIT_ADDR + 5 ))
       008A6 004C     1     MOV  _RC ,A
   157            C      M 	MOV	_RD,TEMP0
       008A7 0416     1     MOV A, TEMP0 
       008A8 004D     1     MOV  _RD ,A
   158 008A9 0012 C        	RET
   159            C        
   160 008AA      C        INIT_EDIT_NUM2:
   161 008AA 00D6 C        	CLR	TEMP0
   162 008AB      C        INIT_EDIT_NUM2_LOOP:
   163            C      M 	CLRC
       008AB 0803     1     BC  _STATUS , C 
   164 008AC 0616 C        	RRCA	TEMP0
   165 008AD 1F3F C        	ADD	A,@(CID_ADDR+3)
   166 008AE 004C C        	MOV	_RC,A
   167            C      M 	MOV	TEMP1,_RD
       008AF 040D     1     MOV A, _RD 
       008B0 0057     1     MOV  TEMP1 ,A
   168            C      M 	ADDA	TEMP0,@(EDIT_ADDR+6)
       008B1 1864     1     MOV A,@(( EDIT_ADDR + 6 ))
       008B2 0396     1     ADD A, TEMP0 
   169 008B3 004C C        	MOV	_RC,A
   170 008B4 0717 C        	SWAPA	TEMP1
   171 008B5 1A0F C        	AND	A,@0X0F
   172 008B6 004D C        	MOV	_RD,A
   173 008B7 0556 C        	INC	TEMP0
   174 008B8 054C C        	INC	_RC
   175            C      M 	ANDA	TEMP1,@0X0F
       008B9 180F     1     MOV A,@( 15 )
       008BA 0297     1     AND A, TEMP1 
   176 008BB 004D C        	MOV	_RD,A
   177 008BC 0556 C        	INC	TEMP0
   178            C      M 	SUBA	TEMP0,@16
       008BD 1810     1     MOV A,@( 16 )
       008BE 0116     1     SUB A, TEMP0 
   179            C      M 	JPNZ	INIT_EDIT_NUM2_LOOP
       008BF 0E83     1     JBS  _STATUS , Z 
       008C0 14AB     1     JMP  INIT_EDIT_NUM2_LOOP ,
   180 008C1 0012 C        	RET
   181            C        
   182 008C2      C        INIT_EDIT_STR:
   183 008C2 00D6 C        	CLR	TEMP0
   184 008C3      C        INIT_EDIT_STR_LOOP:
   185            C      M 	ADDA	TEMP0,@(CID_ADDR+12)
       008C3 1848     1     MOV A,@(( CID_ADDR + 12 ))
       008C4 0396     1     ADD A, TEMP0 
   186 008C5 004C C        	MOV	_RC,A
   187            C      M 	MOV	TEMP1,_RD
       008C6 040D     1     MOV A, _RD 
       008C7 0057     1     MOV  TEMP1 ,A
   188            C      M 	ADDA	TEMP0,@(EDIT_ADDR+22)
       008C8 1874     1     MOV A,@(( EDIT_ADDR + 22 ))
       008C9 0396     1     ADD A, TEMP0 
   189 008CA 004C C        	MOV	_RC,A
   190            C      M 	MOV	_RD,TEMP1
       008CB 0417     1     MOV A, TEMP1 
       008CC 004D     1     MOV  _RD ,A
   191 008CD 0556 C        	INC	TEMP0
   192            C      M 	SUBA	TEMP0,@16
       008CE 1810     1     MOV A,@( 16 )
       008CF 0116     1     SUB A, TEMP0 
   193            C      M 	JPNZ	INIT_EDIT_STR_LOOP
       008D0 0E83     1     JBS  _STATUS , Z 
       008D1 14C3     1     JMP  INIT_EDIT_STR_LOOP ,
   194 008D2 0012 C        	RET
   195            C        
   196            C        
   197 008D3      C        CLR_EDIT:
   198 008D3 10D7 C        	CALL	CLR_EDIT_NUM1
   199 008D4 10E3 C        	CALL	CLR_EDIT_NUM2
   200 008D5 10ED C        	CALL	CLR_EDIT_STR
   201 008D6 0012 C        	RET
   202            C        
   203 008D7      C        CLR_EDIT_NUM1:
   204            C      M 	MOV	_RC,@(EDIT_ADDR+0)
       008D7 185E     1     MOV A,@(( EDIT_ADDR + 0 ))
       008D8 004C     1     MOV  _RC ,A
   205 008D9 054C C        	INC	_RC
   206            C      M 	MOV	_RD,@0XFF
       008DA 18FF     1     MOV A,@( 255 )
       008DB 004D     1     MOV  _RD ,A
   207            C      M 	SUBA	_RC,@(EDIT_ADDR+4)
       008DC 1862     1     MOV A,@(( EDIT_ADDR + 4 ))
       008DD 010C     1     SUB A, _RC 
   208            C      M 	JPNZ	$-6
       008DE 0E83     1     JBS  _STATUS , Z 
       008DF 14D9     1     JMP ( $ - 6 ),
   209 008E0 054C C        	INC	_RC
   210 008E1 00CD C        	CLR	_RD
   211 008E2 0012 C        	RET
   212            C        
   213 008E3      C        CLR_EDIT_NUM2:
   214            C      M 	MOV	_RC,@(EDIT_ADDR+5)
       008E3 1863     1     MOV A,@(( EDIT_ADDR + 5 ))
       008E4 004C     1     MOV  _RC ,A
   215 008E5 054C C        	INC	_RC
   216            C      M 	MOV	_RD,@0X0F
       008E6 180F     1     MOV A,@( 15 )
       008E7 004D     1     MOV  _RD ,A
   217            C      M 	SUBA	_RC,@(EDIT_ADDR+21)
       008E8 1873     1     MOV A,@(( EDIT_ADDR + 21 ))
       008E9 010C     1     SUB A, _RC 
   218            C      M 	JPNZ	$-6
       008EA 0E83     1     JBS  _STATUS , Z 
       008EB 14E5     1     JMP ( $ - 6 ),
   219 008EC 0012 C        	RET
   220            C        
   221 008ED      C        CLR_EDIT_STR:
   222            C      M 	MOV	_RC,@(EDIT_ADDR+21)
       008ED 1873     1     MOV A,@(( EDIT_ADDR + 21 ))
       008EE 004C     1     MOV  _RC ,A
   223 008EF 054C C        	INC	_RC
   224            C      M 	MOV	_RD,@0XFF
       008F0 18FF     1     MOV A,@( 255 )
       008F1 004D     1     MOV  _RD ,A
   225            C      M 	SUBA	_RC,@(EDIT_ADDR+37)
       008F2 1883     1     MOV A,@(( EDIT_ADDR + 37 ))
       008F3 010C     1     SUB A, _RC 
   226            C      M 	JPNZ	$-6
       008F4 0E83     1     JBS  _STATUS , Z 
       008F5 14EF     1     JMP ( $ - 6 ),
   227 008F6 0012 C        	RET
   228            C        /*****************************
   229            C        对编辑区的内容作修改。
   230            C        输入 -- A	编辑的位置
   231            C        RC   -- 	编辑的内容的地址
   232            C        当输入0时，显示正常号码，第一行和第三行遇FF不显示，第二行遇F不显示
   233            C        当输入1~16时，闪烁相应位置的数字，
   234            C        *****************************/
   235 008F7      C        EDIT_NUM1:
   236            C      M 	BANK	0
       008F7 0984     1     BC  _RSR , 6 
       008F8 09C4     1     BC  _RSR , 7 
   237 008F9 0060 C        	MOV	BANK0_TEMP0,A
   238            C      M 	MOV	TEMP0,@(EDIT_ADDR+5)
       008FA 1863     1     MOV A,@(( EDIT_ADDR + 5 ))
       008FB 0056     1     MOV  TEMP0 ,A
   239 008FC 185F C        	MOV	A,@(EDIT_ADDR+1)
   240 008FD 150C C        	JMP	EDIT_INFO
   241 008FE      C        EDIT_NUM2:
   242            C      M 	BANK	0
       008FE 0984     1     BC  _RSR , 6 
       008FF 09C4     1     BC  _RSR , 7 
   243 00900 0060 C        	MOV	BANK0_TEMP0,A
   244            C      M 	MOV	TEMP0,@(EDIT_ADDR+21)
       00901 1873     1     MOV A,@(( EDIT_ADDR + 21 ))
       00902 0056     1     MOV  TEMP0 ,A
   245 00903 1864 C        	MOV	A,@(EDIT_ADDR+6)
   246 00904 150C C        	JMP	EDIT_INFO
   247 00905      C        EDIT_STR:
   248            C      M 	BANK	0
       00905 0984     1     BC  _RSR , 6 
       00906 09C4     1     BC  _RSR , 7 
   249 00907 0060 C        	MOV	BANK0_TEMP0,A
   250            C      M 	MOV	TEMP0,@(EDIT_ADDR+37)
       00908 1883     1     MOV A,@(( EDIT_ADDR + 37 ))
       00909 0056     1     MOV  TEMP0 ,A
   251 0090A 1874 C        	MOV	A,@(EDIT_ADDR+22)
   252 0090B 150C C        	JMP	EDIT_INFO
   253 0090C      C        EDIT_INFO:
   254 0090C 0061 C        	MOV	BANK0_TEMP1,A
   255 0090D 0420 C        	MOV	A,BANK0_TEMP0
   256            C      M 	JPZ	EDIT_INFO_RET
       0090E 0C83     1     JBC  _STATUS , Z 
       0090F 1530     1     JMP  EDIT_INFO_RET ,
   257            C      M 	MOV	BANK0_TEMP2,_RD
       00910 040D     1     MOV A, _RD 
       00911 0062     1     MOV  BANK0_TEMP2 ,A
   258            C      M 	SUBA	BANK0_TEMP2,@0X80
       00912 1880     1     MOV A,@( 128 )
       00913 0122     1     SUB A, BANK0_TEMP2 
   259            C      M 	JPZ	EDIT_INFO_DEL
       00914 0C83     1     JBC  _STATUS , Z 
       00915 151D     1     JMP  EDIT_INFO_DEL ,
   260            C      M 	ADDA	BANK0_TEMP0,BANK0_TEMP1
       00916 0421     1     MOV A, BANK0_TEMP1 
       00917 03A0     1     ADD A, BANK0_TEMP0 
   261 00918 004C C        	MOV	_RC,A
   262 00919 01CC C        	DEC	_RC
   263            C      M 	MOV	_RD,BANK0_TEMP2
       0091A 0422     1     MOV A, BANK0_TEMP2 
       0091B 004D     1     MOV  _RD ,A
   264 0091C 1530 C        	JMP	EDIT_INFO_RET
   265 0091D      C        EDIT_INFO_DEL:
   266            C      M 	SUBA	BANK0_TEMP1,@1
       0091D 1801     1     MOV A,@( 1 )
       0091E 0121     1     SUB A, BANK0_TEMP1 
   267 0091F 03A0 C        	ADD	A,BANK0_TEMP0
   268 00920 004C C        	MOV	_RC,A
   269 00921      C        EDIT_INFO_DEL_LOOP:
   270            C      M 	SUBA	_RC,TEMP0
       00921 0416     1     MOV A, TEMP0 
       00922 010C     1     SUB A, _RC 
   271            C      M 	JPZ	EDIT_INFO_DEL_END
       00923 0C83     1     JBC  _STATUS , Z 
       00924 152D     1     JMP  EDIT_INFO_DEL_END ,
   272 00925 054C C        	INC	_RC
   273            C      M 	MOV	TEMP1,_RD
       00926 040D     1     MOV A, _RD 
       00927 0057     1     MOV  TEMP1 ,A
   274 00928 01CC C        	DEC	_RC
   275            C      M 	MOV	_RD,TEMP1
       00929 0417     1     MOV A, TEMP1 
       0092A 004D     1     MOV  _RD ,A
   276 0092B 054C C        	INC	_RC
   277 0092C 1521 C        	JMP	EDIT_INFO_DEL_LOOP
   278 0092D      C        EDIT_INFO_DEL_END:
   279            C      M 	MOV	_RD,@0XFF
       0092D 18FF     1     MOV A,@( 255 )
       0092E 004D     1     MOV  _RD ,A
   280 0092F 1530 C        	JMP	EDIT_INFO_RET
   281 00930      C        EDIT_INFO_RET:
   282            C      M 	SUBA	BANK0_TEMP1,@(EDIT_ADDR+1)
       00930 185F     1     MOV A,@(( EDIT_ADDR + 1 ))
       00931 0121     1     SUB A, BANK0_TEMP1 
   283            C      M 	JPNZ	$+3
       00932 0E83     1     JBS  _STATUS , Z 
       00933 1536     1     JMP ( $ + 3 ),
   284 00934 0420 C        	MOV	A,BANK0_TEMP0
   285 00935 1543 C        	JMP	DISP_NUM1
   286            C      M 	SUBA	BANK0_TEMP1,@(EDIT_ADDR+6)
       00936 1864     1     MOV A,@(( EDIT_ADDR + 6 ))
       00937 0121     1     SUB A, BANK0_TEMP1 
   287            C      M 	JPNZ	$+3
       00938 0E83     1     JBS  _STATUS , Z 
       00939 153C     1     JMP ( $ + 3 ),
   288 0093A 0420 C        	MOV	A,BANK0_TEMP0
   289 0093B 158A C        	JMP	DISP_NUM2
   290            C      M 	SUBA	BANK0_TEMP1,@(EDIT_ADDR+22)
       0093C 1874     1     MOV A,@(( EDIT_ADDR + 22 ))
       0093D 0121     1     SUB A, BANK0_TEMP1 
   291            C      M 	JPNZ	$+3
       0093E 0E83     1     JBS  _STATUS , Z 
       0093F 1542     1     JMP ( $ + 3 ),
   292 00940 0420 C        	MOV	A,BANK0_TEMP0
   293 00941 15BA C        	JMP	DISP_STR
   294 00942 0012 C        	RET
   295            C        
   296 00943      C        DISP_NUM1:
   297            C      M 	BANK	0
       00943 0984     1     BC  _RSR , 6 
       00944 09C4     1     BC  _RSR , 7 
   298 00945 0060 C        	MOV	BANK0_TEMP0,A
   299 00946 00E1 C        	CLR	BANK0_TEMP1
   300 00947 1800 C        	MOV	A,@STYLE_NORMAL
   301            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       00948 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       00949 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0094A 1E82     3     PAGE ( $ / 1024 ),
   302 0094B      C        DISP_NUM1_LOOP:
   303 0094B 00E3 C        	CLR	BANK0_TEMP3
   304 0094C 0561 C        	INC	BANK0_TEMP1
   305            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0094D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0094E 088B     2     BC  _RB , 2 
   306            C      M 	ADDA	BANK0_TEMP1,@(EDIT_ADDR+1-1)
       0094F 185E     1     MOV A,@((( EDIT_ADDR + 1 )- 1 ))
       00950 03A1     1     ADD A, BANK0_TEMP1 
   307 00951 004C C        	MOV	_RC,A
   308            C      M 	MOV	BANK0_TEMP2,_RD
       00952 040D     1     MOV A, _RD 
       00953 0062     1     MOV  BANK0_TEMP2 ,A
   309            C      M 	SUBA	BANK0_TEMP0,BANK0_TEMP1
       00954 0421     1     MOV A, BANK0_TEMP1 
       00955 0120     1     SUB A, BANK0_TEMP0 
   310            C      M 	JPNZ	$+3
       00956 0E83     1     JBS  _STATUS , Z 
       00957 155A     1     JMP ( $ + 3 ),
   311            C      M 	MOV	BANK0_TEMP3,@0X80
       00958 1880     1     MOV A,@( 128 )
       00959 0063     1     MOV  BANK0_TEMP3 ,A
   312            C      M 	SUBA	BANK0_TEMP2,@0XFF
       0095A 18FF     1     MOV A,@( 255 )
       0095B 0122     1     SUB A, BANK0_TEMP2 
   313            C      M 	JPZ	DISP_NUM1_LOOP_1
       0095C 0C83     1     JBC  _STATUS , Z 
       0095D 157B     1     JMP  DISP_NUM1_LOOP_1 ,
   314            C      M 	MOV	GENE_A,BANK0_TEMP2
       0095E 0422     1     MOV A, BANK0_TEMP2 
       0095F 0056     1     MOV  GENE_A ,A
   315            C      M 	CALL	#MATH_HTD
                      2  M  LCALL  MATH_HTD 
                      3  M  PAGE #( MATH_HTD ),
       00960 1E84     3     PAGE ( MATH_HTD / 1024 ),
       00961 1100     2     CALL ( MATH_HTD % 1024 ),
                      3  M  PAGE #( $ ),
       00962 1E82     3     PAGE ( $ / 1024 ),
   316            C      M 	MOV	BANK0_TEMP2,RESULT
       00963 0418     1     MOV A, RESULT 
       00964 0062     1     MOV  BANK0_TEMP2 ,A
   317 00965 0722 C        	SWAPA	BANK0_TEMP2
   318 00966 1A0F C        	AND	A,@0X0F
   319 00967 0056 C        	MOV	TEMP0,A
   320            C      M 	SUBA	BANK0_TEMP1,@4
       00968 1804     1     MOV A,@( 4 )
       00969 0121     1     SUB A, BANK0_TEMP1 
   321            C      M 	JPNZ	$+6
       0096A 0E83     1     JBS  _STATUS , Z 
       0096B 1571     1     JMP ( $ + 6 ),
   322 0096C 0416 C        	MOV	A,TEMP0
   323            C      M 	JPNZ	$+3
       0096D 0E83     1     JBS  _STATUS , Z 
       0096E 1571     1     JMP ( $ + 3 ),
   324            C      M 	MOV	TEMP0,@NUM_BLANK
       0096F 1810     1     MOV A,@( NUM_BLANK )
       00970 0056     1     MOV  TEMP0 ,A
   325 00971 0416 C        	MOV	A,TEMP0
   326 00972 03A3 C        	ADD	A,BANK0_TEMP3
   327            C      M 	PAGE	#VGA_NUM1
       00973 1E85     1     PAGE ( VGA_NUM1 / 1024 ),
   328 00974 1008 C        	CALL	VGA_NUM1
   329            C      M 	ANDA	BANK0_TEMP2,@0X0F
       00975 180F     1     MOV A,@( 15 )
       00976 02A2     1     AND A, BANK0_TEMP2 
   330 00977 03A3 C        	ADD	A,BANK0_TEMP3
   331 00978 1008 C        	CALL	VGA_NUM1
   332            C      M 	PAGE	#($)
       00979 1E82     1     PAGE ( $ / 1024 ),
   333 0097A 1581 C        	JMP	DISP_NUM1_LOOP_2
   334 0097B      C        DISP_NUM1_LOOP_1:
   335            C      M 	PAGE	#VGA_NUM1
       0097B 1E85     1     PAGE ( VGA_NUM1 / 1024 ),
   336 0097C 1810 C        	MOV	A,@NUM_BLANK
   337 0097D 1008 C        	CALL	VGA_NUM1
   338 0097E 1810 C        	MOV	A,@NUM_BLANK
   339 0097F 1008 C        	CALL	VGA_NUM1
   340            C      M 	PAGE	#($)
       00980 1E82     1     PAGE ( $ / 1024 ),
   341 00981      C        DISP_NUM1_LOOP_2:
   342            C      M 	SUBA	BANK0_TEMP1,@5
       00981 1805     1     MOV A,@( 5 )
       00982 0121     1     SUB A, BANK0_TEMP1 
   343            C      M 	JPNZ	DISP_NUM1_LOOP
       00983 0E83     1     JBS  _STATUS , Z 
       00984 154B     1     JMP  DISP_NUM1_LOOP ,
   344 00985 18FF C        	MOV	A,@CH_END
   345            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       00986 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       00987 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       00988 1E82     3     PAGE ( $ / 1024 ),
   346 00989 0012 C        	RET
   347            C        
   348 0098A      C        DISP_NUM2:
   349            C      M 	BANK	0
       0098A 0984     1     BC  _RSR , 6 
       0098B 09C4     1     BC  _RSR , 7 
   350 0098C 0060 C        	MOV	BANK0_TEMP0,A
   351 0098D 00E1 C        	CLR	BANK0_TEMP1
   352 0098E 1800 C        	MOV	A,@STYLE_NORMAL
   353            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       0098F 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00990 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00991 1E82     3     PAGE ( $ / 1024 ),
   354 00992      C        DISP_NUM2_LOOP:
   355 00992 00E3 C        	CLR	BANK0_TEMP3
   356 00993 0561 C        	INC	BANK0_TEMP1
   357            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00994 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00995 088B     2     BC  _RB , 2 
   358            C      M 	ADDA	BANK0_TEMP1,@(EDIT_ADDR+6-1)
       00996 1863     1     MOV A,@((( EDIT_ADDR + 6 )- 1 ))
       00997 03A1     1     ADD A, BANK0_TEMP1 
   359 00998 004C C        	MOV	_RC,A
   360            C      M 	MOV	BANK0_TEMP2,_RD
       00999 040D     1     MOV A, _RD 
       0099A 0062     1     MOV  BANK0_TEMP2 ,A
   361            C      M 	SUBA	BANK0_TEMP0,BANK0_TEMP1
       0099B 0421     1     MOV A, BANK0_TEMP1 
       0099C 0120     1     SUB A, BANK0_TEMP0 
   362            C      M 	JPNZ	$+3
       0099D 0E83     1     JBS  _STATUS , Z 
       0099E 15A1     1     JMP ( $ + 3 ),
   363            C      M 	MOV	BANK0_TEMP3,@0X80
       0099F 1880     1     MOV A,@( 128 )
       009A0 0063     1     MOV  BANK0_TEMP3 ,A
   364            C      M 	SUBA	BANK0_TEMP2,@0X0A
       009A1 180A     1     MOV A,@( 10 )
       009A2 0122     1     SUB A, BANK0_TEMP2 
   365            C      M 	JPNC	$+8
       009A3 0E03     1     JBS  _STATUS , C 
       009A4 15AC     1     JMP ( $ + 8 ),
   366            C      M 	JPB	BANK0_TEMP3,7,$+4
       009A5 0DE3     1     JBC  BANK0_TEMP3 , 7 
       009A6 15AA     1     JMP ( $ + 4 ),
   367            C      M 	MOV	BANK0_TEMP2,@NUM_BLANK
       009A7 1810     1     MOV A,@( NUM_BLANK )
       009A8 0062     1     MOV  BANK0_TEMP2 ,A
   368 009A9 15AC C        	JMP	$+3
   369            C      M 	MOV	BANK0_TEMP2,@0X11
       009AA 1811     1     MOV A,@( 17 )
       009AB 0062     1     MOV  BANK0_TEMP2 ,A
   370            C      M 	ADDA	BANK0_TEMP2,BANK0_TEMP3
       009AC 0423     1     MOV A, BANK0_TEMP3 
       009AD 03A2     1     ADD A, BANK0_TEMP2 
   371            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       009AE 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       009AF 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       009B0 1E82     3     PAGE ( $ / 1024 ),
   372            C      M 	SUBA	BANK0_TEMP1,@16
       009B1 1810     1     MOV A,@( 16 )
       009B2 0121     1     SUB A, BANK0_TEMP1 
   373            C      M 	JPNZ	DISP_NUM2_LOOP
       009B3 0E83     1     JBS  _STATUS , Z 
       009B4 1592     1     JMP  DISP_NUM2_LOOP ,
   374 009B5 18FF C        	MOV	A,@CH_END
   375            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       009B6 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       009B7 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       009B8 1E82     3     PAGE ( $ / 1024 ),
   376 009B9 0012 C        	RET
   377            C        
   378 009BA      C        DISP_STR:
   379            C        	;BANK	0
   380 009BA 0060 C        	MOV	BANK0_TEMP0,A
   381 009BB 00E1 C        	CLR	BANK0_TEMP1
   382 009BC 1800 C        	MOV	A,@STYLE_NORMAL
   383            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       009BD 1E85     3     PAGE ( VGA_STR / 1024 ),
       009BE 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       009BF 1E82     3     PAGE ( $ / 1024 ),
   384 009C0      C        DISP_STR_LOOP:
   385 009C0 00E3 C        	CLR	BANK0_TEMP3
   386 009C1 0561 C        	INC	BANK0_TEMP1
   387            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       009C2 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       009C3 088B     2     BC  _RB , 2 
   388            C      M 	ADDA	BANK0_TEMP1,@(EDIT_ADDR+22-1)
       009C4 1873     1     MOV A,@((( EDIT_ADDR + 22 )- 1 ))
       009C5 03A1     1     ADD A, BANK0_TEMP1 
   389 009C6 004C C        	MOV	_RC,A
   390            C      M 	MOV	BANK0_TEMP2,_RD
       009C7 040D     1     MOV A, _RD 
       009C8 0062     1     MOV  BANK0_TEMP2 ,A
   391            C      M 	SUBA	BANK0_TEMP0,BANK0_TEMP1
       009C9 0421     1     MOV A, BANK0_TEMP1 
       009CA 0120     1     SUB A, BANK0_TEMP0 
   392            C      M 	JPNZ	DISP_STR_LOOP_1
       009CB 0E83     1     JBS  _STATUS , Z 
       009CC 15E0     1     JMP  DISP_STR_LOOP_1 ,
   393            C      M 	MOV	BANK0_TEMP3,@0X80
       009CD 1880     1     MOV A,@( 128 )
       009CE 0063     1     MOV  BANK0_TEMP3 ,A
   394            C      M 	SUBA	BANK0_TEMP2,@0X7F
       009CF 187F     1     MOV A,@( 127 )
       009D0 0122     1     SUB A, BANK0_TEMP2 
   395            C      M 	JPZ	$+5
       009D1 0C83     1     JBC  _STATUS , Z 
       009D2 15D7     1     JMP ( $ + 5 ),
   396            C      M 	SUBA	BANK0_TEMP2,@0XFF
       009D3 18FF     1     MOV A,@( 255 )
       009D4 0122     1     SUB A, BANK0_TEMP2 
   397            C      M 	JPNZ	$+3
       009D5 0E83     1     JBS  _STATUS , Z 
       009D6 15D9     1     JMP ( $ + 3 ),
   398            C      M 	MOV	BANK0_TEMP2,@CH__
       009D7 182F     1     MOV A,@( CH__ )
       009D8 0062     1     MOV  BANK0_TEMP2 ,A
   399            C      M 	SUBA	BANK0_TEMP2,@CH_BLANK
       009D9 1824     1     MOV A,@( CH_BLANK )
       009DA 0122     1     SUB A, BANK0_TEMP2 
   400            C      M 	JPNZ	$+3
       009DB 0E83     1     JBS  _STATUS , Z 
       009DC 15DF     1     JMP ( $ + 3 ),
   401            C      M 	MOV	BANK0_TEMP2,@CH_BLACK
       009DD 1825     1     MOV A,@( CH_BLACK )
       009DE 0062     1     MOV  BANK0_TEMP2 ,A
   402 009DF 15EA C        	JMP	DISP_STR_LOOP_2
   403 009E0      C        DISP_STR_LOOP_1:
   404            C      M 	SUBA	BANK0_TEMP2,@0X7F
       009E0 187F     1     MOV A,@( 127 )
       009E1 0122     1     SUB A, BANK0_TEMP2 
   405            C      M 	JPZ	$+5
       009E2 0C83     1     JBC  _STATUS , Z 
       009E3 15E8     1     JMP ( $ + 5 ),
   406            C      M 	SUBA	BANK0_TEMP2,@0XFF
       009E4 18FF     1     MOV A,@( 255 )
       009E5 0122     1     SUB A, BANK0_TEMP2 
   407            C      M 	JPNZ	$+3
       009E6 0E83     1     JBS  _STATUS , Z 
       009E7 15EA     1     JMP ( $ + 3 ),
   408            C      M 	MOV	BANK0_TEMP2,@CH_BLANK
       009E8 1824     1     MOV A,@( CH_BLANK )
       009E9 0062     1     MOV  BANK0_TEMP2 ,A
   409 009EA      C        DISP_STR_LOOP_2:
   410            C        	
   411            C      M 	ADDA	BANK0_TEMP2,BANK0_TEMP3
       009EA 0423     1     MOV A, BANK0_TEMP3 
       009EB 03A2     1     ADD A, BANK0_TEMP2 
   412            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       009EC 1E85     3     PAGE ( VGA_STR / 1024 ),
       009ED 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       009EE 1E82     3     PAGE ( $ / 1024 ),
   413            C      M 	SUBA	BANK0_TEMP1,@16
       009EF 1810     1     MOV A,@( 16 )
       009F0 0121     1     SUB A, BANK0_TEMP1 
   414            C      M 	JPNZ	DISP_STR_LOOP
       009F1 0E83     1     JBS  _STATUS , Z 
       009F2 15C0     1     JMP  DISP_STR_LOOP ,
   415 009F3 18FF C        	MOV	A,@CH_END
   416            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       009F4 1E85     3     PAGE ( VGA_STR / 1024 ),
       009F5 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       009F6 1E82     3     PAGE ( $ / 1024 ),
   417 009F7 0012 C        	RET
   418            C        
   419            C        /*****************************
   420            C        菜单操作显示时间
   421            C        *****************************/
   422 009F8      C        MENU_TIME:
   423 009F8 0056 C        	MOV	TEMP0,A
   424            C        	;INC	_RC
   425            C      M 	MOV	TEMP1,_RD
       009F9 040D     1     MOV A, _RD 
       009FA 0057     1     MOV  TEMP1 ,A
   426 009FB 00D8 C        	CLR	TEMP2
   427 009FC      C        MENU_TIME_0:
   428            C      M 	ADDA	TEMP2,@(EDIT_ADDR+1)
       009FC 185F     1     MOV A,@(( EDIT_ADDR + 1 ))
       009FD 0398     1     ADD A, TEMP2 
   429 009FE 004C C        	MOV	_RC,A
   430            C      M 	SUBA	TEMP0,TEMP2
       009FF 0418     1     MOV A, TEMP2 
       00A00 0116     1     SUB A, TEMP0 
   431            C      M 	JPNZ	MENU_TIME_1
       00A01 0E83     1     JBS  _STATUS , Z 
       00A02 1607     1     JMP  MENU_TIME_1 ,
   432            C      M 	ADDA	TEMP1,@0X80
       00A03 1880     1     MOV A,@( 128 )
       00A04 0397     1     ADD A, TEMP1 
   433 00A05 004D C        	MOV	_RD,A
   434 00A06 1609 C        	JMP	MENU_TIME_2
   435 00A07      C        MENU_TIME_1:
   436            C      M 	AND	_RD,@0X7F
       00A07 187F     1     MOV A,@( 127 )
       00A08 02CD     1     AND  _RD ,A
   437 00A09      C        MENU_TIME_2:
   438 00A09 0558 C        	INC	TEMP2
   439            C      M 	SUBA	TEMP2,@5
       00A0A 1805     1     MOV A,@( 5 )
       00A0B 0118     1     SUB A, TEMP2 
   440            C      M 	JPNZ	MENU_TIME_0
       00A0C 0E83     1     JBS  _STATUS , Z 
       00A0D 15FC     1     JMP  MENU_TIME_0 ,
   441 00A0E 0012 C        	RET
   442            C        
   443 00A0F      C        DISP_MENU_TIME:
   444 00A0F 1800 C        	MOV	A,@0
   445            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       00A10 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       00A11 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       00A12 1E82     3     PAGE ( $ / 1024 ),
   446            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A13 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A14 088B     2     BC  _RB , 2 
   447            C      M 	MOV	_RC,@(EDIT_ADDR+1)
       00A15 185F     1     MOV A,@(( EDIT_ADDR + 1 ))
       00A16 004C     1     MOV  _RC ,A
   448            C      M 	JPNB	_RD,7,$+4
       00A17 0FCD     1     JBS  _RD , 7 
       00A18 161C     1     JMP ( $ + 4 ),
   449 00A19 040D C        	MOV	A,_RD
   450 00A1A 125B C        	CALL	FLASH_TIME
   451 00A1B 1620 C        	JMP	$+5
   452 00A1C 040D C        	MOV	A,_RD
   453            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       00A1D 1E84     3     PAGE ( VGA_TIME / 1024 ),
       00A1E 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00A1F 1E82     3     PAGE ( $ / 1024 ),
   454            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A20 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A21 088B     2     BC  _RB , 2 
   455            C      M 	MOV	_RC,@(EDIT_ADDR+2)
       00A22 1860     1     MOV A,@(( EDIT_ADDR + 2 ))
       00A23 004C     1     MOV  _RC ,A
   456            C      M 	JPNB	_RD,7,$+4
       00A24 0FCD     1     JBS  _RD , 7 
       00A25 1629     1     JMP ( $ + 4 ),
   457 00A26 040D C        	MOV	A,_RD
   458 00A27 125B C        	CALL	FLASH_TIME
   459 00A28 162D C        	JMP	$+5
   460 00A29 040D C        	MOV	A,_RD
   461            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       00A2A 1E84     3     PAGE ( VGA_TIME / 1024 ),
       00A2B 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00A2C 1E82     3     PAGE ( $ / 1024 ),
   462            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A2D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A2E 088B     2     BC  _RB , 2 
   463            C      M 	MOV	_RC,@(EDIT_ADDR+4)
       00A2F 1862     1     MOV A,@(( EDIT_ADDR + 4 ))
       00A30 004C     1     MOV  _RC ,A
   464            C      M 	JPNB	_RD,7,$+4
       00A31 0FCD     1     JBS  _RD , 7 
       00A32 1636     1     JMP ( $ + 4 ),
   465 00A33 040D C        	MOV	A,_RD
   466 00A34 125B C        	CALL	FLASH_TIME
   467 00A35 163A C        	JMP	$+5
   468 00A36 040D C        	MOV	A,_RD
   469            C      M 	CALL	#VGA_TIME
                      2  M  LCALL  VGA_TIME 
                      3  M  PAGE #( VGA_TIME ),
       00A37 1E84     3     PAGE ( VGA_TIME / 1024 ),
       00A38 1052     2     CALL ( VGA_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00A39 1E82     3     PAGE ( $ / 1024 ),
   470            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A3A 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A3B 088B     2     BC  _RB , 2 
   471            C      M 	MOV	_RC,@(EDIT_ADDR+3)
       00A3C 1861     1     MOV A,@(( EDIT_ADDR + 3 ))
       00A3D 004C     1     MOV  _RC ,A
   472            C      M 	JPNB	_RD,7,$+4
       00A3E 0FCD     1     JBS  _RD , 7 
       00A3F 1643     1     JMP ( $ + 4 ),
   473 00A40 040D C        	MOV	A,_RD
   474 00A41 126C C        	CALL	FLASH_MONTH
   475 00A42 1647 C        	JMP	$+5
   476 00A43 040D C        	MOV	A,_RD
   477            C      M 	CALL	#VGA_MONTH
                      2  M  LCALL  VGA_MONTH 
                      3  M  PAGE #( VGA_MONTH ),
       00A44 1E84     3     PAGE ( VGA_MONTH / 1024 ),
       00A45 1061     2     CALL ( VGA_MONTH % 1024 ),
                      3  M  PAGE #( $ ),
       00A46 1E82     3     PAGE ( $ / 1024 ),
   478            C        	
   479            C      M 	PAGE	#VGA_NUM1
       00A47 1E85     1     PAGE ( VGA_NUM1 / 1024 ),
   480 00A48 1810 C        	MOV	A,@NUM_BLANK
   481 00A49 1008 C        	CALL	VGA_NUM1
   482 00A4A 1810 C        	MOV	A,@NUM_BLANK
   483 00A4B 1008 C        	CALL	VGA_NUM1
   484 00A4C 18FF C        	MOV	A,@CH_END
   485 00A4D 1008 C        	CALL	VGA_NUM1
   486            C        	
   487            C        	;PAGE	#VGA_STR
   488 00A4E 1860 C        	MOV	A,@STYLE_CENTER
   489 00A4F 104B C        	CALL	VGA_STR
   490            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A50 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A51 088B     2     BC  _RB , 2 
   491            C      M 	MOV	_RC,@(EDIT_ADDR+5)
       00A52 1863     1     MOV A,@(( EDIT_ADDR + 5 ))
       00A53 004C     1     MOV  _RC ,A
   492            C      M 	ADDA	_RD,@(WD_SUNDAY)
       00A54 1817     1     MOV A,@( WD_SUNDAY )
       00A55 038D     1     ADD A, _RD 
   493 00A56 11BF C        	CALL	VGA_STRING
   494 00A57 18FF C        	MOV	A,@CH_END
   495 00A58 104B C        	CALL	VGA_STR
   496            C      M 	PAGE	#($)
       00A59 1E82     1     PAGE ( $ / 1024 ),
   497 00A5A 0012 C        	RET
   498            C        
   499 00A5B      C        FLASH_TIME:
   500 00A5B 1A7F C        	AND	A,@0X7F
   501 00A5C 0056 C        	MOV	GENE_A,A
   502            C      M 	CALL	#MATH_HTD
                      2  M  LCALL  MATH_HTD 
                      3  M  PAGE #( MATH_HTD ),
       00A5D 1E84     3     PAGE ( MATH_HTD / 1024 ),
       00A5E 1100     2     CALL ( MATH_HTD % 1024 ),
                      3  M  PAGE #( $ ),
       00A5F 1E82     3     PAGE ( $ / 1024 ),
   503 00A60 0060 C        	MOV	BANK0_TEMP0,A			; RESULT = A
   504 00A61 0720 C        	SWAPA	BANK0_TEMP0
   505 00A62 1A0F C        	AND	A,@(0X0F)
   506 00A63 1F80 C        	ADD	A,@(0X80)
   507            C      M 	PAGE	#VGA_NUM1
       00A64 1E85     1     PAGE ( VGA_NUM1 / 1024 ),
   508 00A65 1008 C        	CALL	VGA_NUM1
   509            C      M 	ANDA	BANK0_TEMP0,@(0X0F)
       00A66 180F     1     MOV A,@( 15 )
       00A67 02A0     1     AND A, BANK0_TEMP0 
   510 00A68 1F80 C        	ADD	A,@(0X80)
   511 00A69 1008 C        	CALL	VGA_NUM1
   512            C      M 	PAGE	#($)
       00A6A 1E82     1     PAGE ( $ / 1024 ),
   513 00A6B 0012 C        	RET
   514            C        
   515 00A6C      C        FLASH_MONTH:
   516 00A6C 1A7F C        	AND	A,@0X7F
   517 00A6D 0056 C        	MOV	GENE_A,A
   518            C      M 	CALL	#MATH_HTD
                      2  M  LCALL  MATH_HTD 
                      3  M  PAGE #( MATH_HTD ),
       00A6E 1E84     3     PAGE ( MATH_HTD / 1024 ),
       00A6F 1100     2     CALL ( MATH_HTD % 1024 ),
                      3  M  PAGE #( $ ),
       00A70 1E82     3     PAGE ( $ / 1024 ),
   519 00A71 005B C        	MOV	TEMP5,A				; RESULT = A
   520 00A72 071B C        	SWAPA	TEMP5
   521 00A73 1A0F C        	AND	A,@(0X0F)
   522            C      M 	JPNZ	$+2
       00A74 0E83     1     JBS  _STATUS , Z 
       00A75 1677     1     JMP ( $ + 2 ),
   523 00A76 1810 C        	MOV	A,@NUM_BLANK
   524 00A77 1F80 C        	ADD	A,@(0X80)
   525            C      M 	PAGE	#VGA_NUM1
       00A78 1E85     1     PAGE ( VGA_NUM1 / 1024 ),
   526 00A79 1008 C        	CALL	VGA_NUM1
   527            C      M 	ANDA	TEMP5,@(0X0F)
       00A7A 180F     1     MOV A,@( 15 )
       00A7B 029B     1     AND A, TEMP5 
   528 00A7C 1F80 C        	ADD	A,@(0X80)
   529 00A7D 1008 C        	CALL	VGA_NUM1
   530            C      M 	PAGE	#($)
       00A7E 1E82     1     PAGE ( $ / 1024 ),
   531 00A7F 0012 C        	RET
   532            C        
   533            C        /*****************************
   534            C        操作菜单显示对比度
   535            C        *****************************/
   536 00A80      C        DISP_MENU_LCD:
   537 00A80 0060 C        	MOV	BANK0_TEMP0,A
   538            C      M 	PAGE	#VGA_NUM2
       00A81 1E85     1     PAGE ( VGA_NUM2 / 1024 ),
   539 00A82 1860 C        	MOV	A,@STYLE_CENTER
   540 00A83 1024 C        	CALL	VGA_NUM2
   541 00A84 0420 C        	MOV	A,BANK0_TEMP0
   542 00A85 1024 C        	CALL	VGA_NUM2
   543 00A86 18FF C        	MOV	A,@CH_END
   544 00A87 1024 C        	CALL	VGA_NUM2
   545            C      M 	PAGE	#($)
       00A88 1E82     1     PAGE ( $ / 1024 ),
   546 00A89 0420 C        	MOV	A,BANK0_TEMP0
   547            C      M 	CALL	#LCD_CONTRAST_APPLY
                      2  M  LCALL  LCD_CONTRAST_APPLY 
                      3  M  PAGE #( LCD_CONTRAST_APPLY ),
       00A8A 1E80     3     PAGE ( LCD_CONTRAST_APPLY / 1024 ),
       00A8B 1318     2     CALL ( LCD_CONTRAST_APPLY % 1024 ),
                      3  M  PAGE #( $ ),
       00A8C 1E82     3     PAGE ( $ / 1024 ),
   548 00A8D 0012 C        	RET
   549            C        
   550            C        /*****************************
   551            C        操作菜单密码显示
   552            C        *****************************/
   553 00A8E      C        DISP_MENU_CODE:
   554            C        	;BANK	0
   555 00A8E 0060 C        	MOV	BANK0_TEMP0,A
   556            C      M 	JPZ	DISP_MENU_CODE_1
       00A8F 0C83     1     JBC  _STATUS , Z 
       00A90 1698     1     JMP  DISP_MENU_CODE_1 ,
   557            C        	;INC	_RC
   558            C      M 	MOV	BANK0_TEMP2,_RD
       00A91 040D     1     MOV A, _RD 
       00A92 0062     1     MOV  BANK0_TEMP2 ,A
   559            C      M 	ADDA	BANK0_TEMP0,@(EDIT_ADDR+6-1)
       00A93 1863     1     MOV A,@((( EDIT_ADDR + 6 )- 1 ))
       00A94 03A0     1     ADD A, BANK0_TEMP0 
   560 00A95 004C C        	MOV	_RC,A
   561            C      M 	MOV	_RD,BANK0_TEMP2
       00A96 0422     1     MOV A, BANK0_TEMP2 
       00A97 004D     1     MOV  _RD ,A
   562 00A98      C        DISP_MENU_CODE_1:
   563 00A98 1860 C        	MOV	A,@STYLE_CENTER
   564            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00A99 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00A9A 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00A9B 1E82     3     PAGE ( $ / 1024 ),
   565 00A9C 00E1 C        	CLR	BANK0_TEMP1
   566 00A9D      C        DISP_MENU_CODE_LOOP:
   567            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00A9D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00A9E 088B     2     BC  _RB , 2 
   568            C      M 	ADDA	BANK0_TEMP1,@(EDIT_ADDR+6)
       00A9F 1864     1     MOV A,@(( EDIT_ADDR + 6 ))
       00AA0 03A1     1     ADD A, BANK0_TEMP1 
   569 00AA1 004C C        	MOV	_RC,A
   570            C      M 	MOV	BANK0_TEMP2,_RD
       00AA2 040D     1     MOV A, _RD 
       00AA3 0062     1     MOV  BANK0_TEMP2 ,A
   571 00AA4 0561 C        	INC	BANK0_TEMP1
   572            C      M 	SUBA	BANK0_TEMP0,BANK0_TEMP1
       00AA5 0421     1     MOV A, BANK0_TEMP1 
       00AA6 0120     1     SUB A, BANK0_TEMP0 
   573            C      M 	JPNZ	$+2
       00AA7 0E83     1     JBS  _STATUS , Z 
       00AA8 16AA     1     JMP ( $ + 2 ),
   574            C      M 	SRAM	BANK0_TEMP2,7
       00AA9 0BE2     1     BS  BANK0_TEMP2 , 7 
   575 00AAA 0422 C        	MOV	A,BANK0_TEMP2
   576            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00AAB 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00AAC 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00AAD 1E82     3     PAGE ( $ / 1024 ),
   577            C      M 	SUBA	BANK0_TEMP1,@3
       00AAE 1803     1     MOV A,@( 3 )
       00AAF 0121     1     SUB A, BANK0_TEMP1 
   578            C      M 	JPNZ	DISP_MENU_CODE_LOOP
       00AB0 0E83     1     JBS  _STATUS , Z 
       00AB1 169D     1     JMP  DISP_MENU_CODE_LOOP ,
   579 00AB2 18FF C        	MOV	A,@CH_END
   580            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00AB3 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00AB4 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00AB5 1E82     3     PAGE ( $ / 1024 ),
   581 00AB6 0012 C        	RET
   582            C        
   583            C        
   584            C        
   585            C        ORG	0X0C00
   586            C        
   587 00C00      C        STCP_CHK:
   588            C      M 	BANK	0
       00C00 0984     1     BC  _RSR , 6 
       00C01 09C4     1     BC  _RSR , 7 
   589            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00C02 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00C03 088B     2     BC  _RB , 2 
   590            C      M 	MOV	_RC,@(TCP_ADDR+0)
       00C04 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       00C05 004C     1     MOV  _RC ,A
   591            C      M 	JPB	_RD,7,STCP_CHK_1
       00C06 0DCD     1     JBC  _RD , 7 
       00C07 1409     1     JMP  STCP_CHK_1 ,
   592            C        	;CALL	#AUDIO_SEND
   593 00C08 0012 C        	RET
   594 00C09      C        STCP_CHK_1:
   595            C      M 	MOV	_RC,@(TCP_ADDR+1)
       00C09 189A     1     MOV A,@(( TCP_ADDR + 1 ))
       00C0A 004C     1     MOV  _RC ,A
   596            C      M 	SUBA	_RD,@0X80
       00C0B 1880     1     MOV A,@( 128 )
       00C0C 010D     1     SUB A, _RD 
   597            C      M 	JPNC	STCP_INVALID			; 命令<0X80，无效命令
       00C0D 0E03     1     JBS  _STATUS , C 
       00C0E 1467     1     JMP  STCP_INVALID ,
   598 00C0F 0056 C        	MOV	TEMP0,A
   599 00C10 1D50 C        	SUB	A,@(0XD0-0X80)			; 命令>0XCE，无效命令
   600            C      M 	JPNC	STCP_INVALID
       00C11 0E03     1     JBS  _STATUS , C 
       00C12 1467     1     JMP  STCP_INVALID ,
   601 00C13 054C C        	INC	_RC
   602 00C14 0416 C        	MOV	A,TEMP0
   603 00C15 0020 C        	TBL
   604 00C16 1471 C        	JMP	STCP_INFO			; 0X80
   605 00C17 14BA C        	JMP	STCP_INIT_TIME			; 0X81
   606 00C18 14CA C        	JMP	STCP_INIT_CALL			; 0X82
   607 00C19 14D0 C        	JMP	STCP_INIT_MSG			; 0X83
   608 00C1A 14D6 C        	JMP	STCP_INIT_BOOK			; 0X84
   609 00C1B 14D9 C        	JMP	STCP_INIT_CODE			; 0X85
   610 00C1C 14E9 C        	JMP	STCP_INIT_LCALL			; 0X86
   611 00C1D 14FD C        	JMP	STCP_INIT_LCDCONTRAST		; 0X87
   612 00C1E 150A C        	JMP	STCP_INIT_TIMEFORMAT		; 0X88
   613 00C1F 150B C        	JMP	STCP_INIT_LANGUAGE		; 0X89
   614 00C20 1511 C        	JMP	STCP_INIT_INVALID		; 0X8A
   615 00C21 1511 C        	JMP	STCP_INIT_INVALID		; 0X8B
   616 00C22 1511 C        	JMP	STCP_INIT_INVALID		; 0X8C
   617 00C23 1511 C        	JMP	STCP_INIT_INVALID		; 0X8D
   618 00C24 1511 C        	JMP	STCP_INIT_INVALID		; 0X8E
   619 00C25 1511 C        	JMP	STCP_INIT_INVALID		; 0X8F
   620 00C26 1512 C        	JMP	STCP_MENU_LANGUANGE		; 0X90
   621 00C27 1531 C        	JMP	STCP_MENU_HOUR			; 0X91
   622 00C28 1533 C        	JMP	STCP_MENU_MINUTE		; 0X92
   623 00C29 1535 C        	JMP	STCP_MENU_MONTH			; 0X93
   624 00C2A 1537 C        	JMP	STCP_MENU_DAY			; 0X94
   625 00C2B 1539 C        	JMP	STCP_MENU_WEEK			; 0X95
   626 00C2C 1554 C        	JMP	STCP_MENU_LCDCONTRAST		; 0X96
   627 00C2D 156D C        	JMP	STCP_MENU_CODE1			; 0X97
   628 00C2E 156F C        	JMP	STCP_MENU_CODE2			; 0X98
   629 00C2F 1571 C        	JMP	STCP_MENU_CODE3			; 0X99
   630 00C30 1583 C        	JMP	STCP_MENU_LCALL1		; 0X9A
   631 00C31 1585 C        	JMP	STCP_MENU_LCALL2		; 0X9B
   632 00C32 1587 C        	JMP	STCP_MENU_LCALL3		; 0X9C
   633 00C33 1589 C        	JMP	STCP_MENU_LCALL4		; 0X9D
   634 00C34 15C5 C        	JMP	STCP_EXTOP			; 0X9E
   635 00C35 163A C        	JMP	STCP_BOOK			; 0X9F
   636 00C36 165E C        	JMP	STCP_CHANGE_NUM2		; 0XA0
   637 00C37 165E C        	JMP	STCP_CHANGE_NUM2		; 0XA1
   638 00C38 165E C        	JMP	STCP_CHANGE_NUM2		; 0XA2
   639 00C39 165E C        	JMP	STCP_CHANGE_NUM2		; 0XA3
   640 00C3A 165E C        	JMP	STCP_CHANGE_NUM2		; 0XA4
   641 00C3B 165E C        	JMP	STCP_CHANGE_NUM2		; 0XA5
   642 00C3C 165E C        	JMP	STCP_CHANGE_NUM2		; 0XA6
   643 00C3D 165E C        	JMP	STCP_CHANGE_NUM2		; 0XA7
   644 00C3E 165E C        	JMP	STCP_CHANGE_NUM2		; 0XA8
   645 00C3F 165E C        	JMP	STCP_CHANGE_NUM2		; 0XA9
   646 00C40 165E C        	JMP	STCP_CHANGE_NUM2		; 0XAA
   647 00C41 165E C        	JMP	STCP_CHANGE_NUM2		; 0XAB
   648 00C42 165E C        	JMP	STCP_CHANGE_NUM2		; 0XAC
   649 00C43 165E C        	JMP	STCP_CHANGE_NUM2		; 0XAD
   650 00C44 165E C        	JMP	STCP_CHANGE_NUM2		; 0XAE
   651 00C45 165E C        	JMP	STCP_CHANGE_NUM2		; 0XAF
   652 00C46 1671 C        	JMP	STCP_CHANGE_STR			; 0XB0
   653 00C47 1671 C        	JMP	STCP_CHANGE_STR			; 0XB1
   654 00C48 1671 C        	JMP	STCP_CHANGE_STR			; 0XB2
   655 00C49 1671 C        	JMP	STCP_CHANGE_STR			; 0XB3
   656 00C4A 1671 C        	JMP	STCP_CHANGE_STR			; 0XB4
   657 00C4B 1671 C        	JMP	STCP_CHANGE_STR			; 0XB5
   658 00C4C 1671 C        	JMP	STCP_CHANGE_STR			; 0XB6
   659 00C4D 1671 C        	JMP	STCP_CHANGE_STR			; 0XB7
   660 00C4E 1671 C        	JMP	STCP_CHANGE_STR			; 0XB8
   661 00C4F 1671 C        	JMP	STCP_CHANGE_STR			; 0XB9
   662 00C50 1671 C        	JMP	STCP_CHANGE_STR			; 0XBA
   663 00C51 1671 C        	JMP	STCP_CHANGE_STR			; 0XBB
   664 00C52 1671 C        	JMP	STCP_CHANGE_STR			; 0XBC
   665 00C53 1671 C        	JMP	STCP_CHANGE_STR			; 0XBD
   666 00C54 1671 C        	JMP	STCP_CHANGE_STR			; 0XBE
   667 00C55 1671 C        	JMP	STCP_CHANGE_STR			; 0XBF
   668 00C56 1684 C        	JMP	STCP_CHOICE_OGMX		; 0XC0
   669 00C57 1696 C        	JMP	STCP_REC_OGMX			; 0XC1
   670 00C58 169B C        	JMP	STCP_STOPREC_OGMX		; 0XC2
   671 00C59 169D C        	JMP	STCP_PLAY_OGMX			; 0XC3
   672 00C5A 16A0 C        	JMP	STCP_STOPPLAY_OGMX		; 0XC4
   673 00C5B 16B6 C        	JMP	STCP_RECORD			; 0XC5
   674 00C5C 16C8 C        	JMP	STCP_STOPRECORD			; 0XC6
   675 00C5D 16CA C        	JMP	STCP_PLAYMSG			; 0XC7
   676 00C5E 16E2 C        	JMP	STCP_PAUSEMSG			; 0XC8
   677 00C5F 16E4 C        	JMP	STCP_STOPMSG			; 0XC9
   678 00C60 1703 C        	JMP	STCP_CALL			; 0XCA
   679 00C61 172A C        	JMP	STCP_VOLUME			; 0XCB
   680 00C62 1743 C        	JMP	STCP_DELETE			; 0XCC
   681 00C63 1750 C        	JMP	STCP_RING			; 0XCD
   682 00C64 159A C        	JMP	STCP_MENU_RING			; 0XCE
   683 00C65 158B C        	JMP	STCP_MENU_LCALL5		; 0XCF
   684 00C66 1758 C        	JMP	STCP_HOOK			; 0XD0
   685 00C67      C        STCP_INVALID:
   686            C        
   687 00C67      C        STCP_RET:
   688            C      M 	PAGE	#(0X1200)
       00C67 1E84     1     PAGE ( 4608 / 1024 ),
   689 00C68 131B C        	CALL	DEL_FINISHED
   690 00C69 120D C        	CALL	SER_BUF_CHK
   691            C      M 	PAGE	#($)
       00C6A 1E83     1     PAGE ( $ / 1024 ),
   692            C      M 	CID_DECODE
                      2  M  PAGE #( FSK_DECODE ),
       00C6B 1E81     2     PAGE ( FSK_DECODE / 1024 ),
       00C6C 1000     1     CALL  FSK_DECODE ,
       00C6D 114D     1     CALL  DTMF_DECODE ,
       00C6E 124B     1     CALL  CID_STORE ,
                      2  M  PAGE #( $ ),
       00C6F 1E83     2     PAGE ( $ / 1024 ),
   693 00C70 1400 C        	JMP	STCP_CHK
   694            C        	;RET
   695            C        
   696            C        
   697 00C71      C        STCP_INFO:			; 0X80
   698            C        	;INC	_RC
   699            C      M 	JPB	_RD,7,STCP_TEL_INFO
       00C71 0DCD     1     JBC  _RD , 7 
       00C72 1486     1     JMP  STCP_TEL_INFO ,
   700            C      M 	ANDA	_RD,@0X60
       00C73 1860     1     MOV A,@( 96 )
       00C74 028D     1     AND A, _RD 
   701 00C75 0056 C        	MOV	TEMP0,A
   702            C        	;SUBA	TEMP0,@0
   703 00C76 0416 C        	MOV	A,TEMP0
   704            C      M 	JPZ	STCP_INFO_NUM
       00C77 0C83     1     JBC  _STATUS , Z 
       00C78 14A6     1     JMP  STCP_INFO_NUM ,
   705            C      M 	SUBA	TEMP0,@0X20
       00C79 1820     1     MOV A,@( 32 )
       00C7A 0116     1     SUB A, TEMP0 
   706            C      M 	JPZ	STCP_INFO_NAME
       00C7B 0C83     1     JBC  _STATUS , Z 
       00C7C 14A8     1     JMP  STCP_INFO_NAME ,
   707            C      M 	SUBA	TEMP0,@0X40
       00C7D 1840     1     MOV A,@( 64 )
       00C7E 0116     1     SUB A, TEMP0 
   708            C      M 	JPZ	STCP_INFO_TIME
       00C7F 0C83     1     JBC  _STATUS , Z 
       00C80 14AA     1     JMP  STCP_INFO_TIME ,
   709            C      M 	SUBA	TEMP0,@0X60
       00C81 1860     1     MOV A,@( 96 )
       00C82 0116     1     SUB A, TEMP0 
   710            C      M 	JPZ	STCP_INFO_OGM
       00C83 0C83     1     JBC  _STATUS , Z 
       00C84 14AC     1     JMP  STCP_INFO_OGM ,
   711 00C85      C        STCP_INFO_RET:
   712            C        	;RET
   713 00C85 1467 C        	JMP	STCP_RET
   714 00C86      C        STCP_TEL_INFO:
   715            C      M 	MOV	BANK0_TEMP0,_RC
       00C86 040C     1     MOV A, _RC 
       00C87 0060     1     MOV  BANK0_TEMP0 ,A
   716            C      M 	CLRCIDRAM	@(CID_ADDR+1),@33,@0XFF
                      2  M  MOV  TEMP0 ,@(( CID_ADDR + 1 ))
       00C88 183D     2     MOV A,@(( CID_ADDR + 1 ))
       00C89 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 33 )
       00C8A 1821     2     MOV A,@( 33 )
       00C8B 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( 255 )
       00C8C 18FF     2     MOV A,@( 255 )
       00C8D 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CLR_CIDRAM ),
                      3  M  LCALL  CLR_CIDRAM 
                      4  M  PAGE #( CLR_CIDRAM ),
       00C8E 1E84     4     PAGE ( CLR_CIDRAM / 1024 ),
       00C8F 1178     3     CALL ( CLR_CIDRAM % 1024 ),
                      4  M  PAGE #( $ ),
       00C90 1E83     4     PAGE ( $ / 1024 ),
   717            C        	
   718 00C91 183D C        	MOV	A,@(CID_ADDR+1)
   719 00C92 109A C        	CALL	TEL_INFO
   720 00C93 183E C        	MOV	A,@(CID_ADDR+2)
   721 00C94 109A C        	CALL	TEL_INFO
   722 00C95 1847 C        	MOV	A,@(CID_ADDR+11)
   723 00C96 109A C        	CALL	TEL_INFO
   724 00C97 1858 C        	MOV	A,@(CID_ADDR+28)
   725 00C98 109A C        	CALL	TEL_INFO
   726 00C99 1485 C        	JMP	STCP_INFO_RET
   727            C        
   728 00C9A      C        TEL_INFO:
   729 00C9A 0061 C        	MOV	BANK0_TEMP1,A
   730            C      M 	MOV	_RC,BANK0_TEMP0
       00C9B 0420     1     MOV A, BANK0_TEMP0 
       00C9C 004C     1     MOV  _RC ,A
   731            C      M 	MOV	TEMP0,_RD
       00C9D 040D     1     MOV A, _RD 
       00C9E 0056     1     MOV  TEMP0 ,A
   732            C      M 	MOV	_RC,BANK0_TEMP1
       00C9F 0421     1     MOV A, BANK0_TEMP1 
       00CA0 004C     1     MOV  _RC ,A
   733            C      M 	MOV	_RD,TEMP0
       00CA1 0416     1     MOV A, TEMP0 
       00CA2 004D     1     MOV  _RD ,A
   734            C      M 	CRAM	_RD,7
       00CA3 09CD     1     BC  _RD , 7 
   735 00CA4 0560 C        	INC	BANK0_TEMP0
   736 00CA5 0012 C        	RET
   737            C        	
   738 00CA6      C        STCP_INFO_NUM:
   739 00CA6 183F C        	MOV	A,@(CID_ADDR+3)
   740 00CA7 14AE C        	JMP	STCP_INFO_1
   741 00CA8      C        STCP_INFO_NAME:
   742 00CA8 1848 C        	MOV	A,@(CID_ADDR+12)
   743 00CA9 14AE C        	JMP	STCP_INFO_1
   744 00CAA      C        STCP_INFO_TIME:
   745 00CAA 1859 C        	MOV	A,@(CID_ADDR+29)
   746 00CAB 14AE C        	JMP	STCP_INFO_1
   747 00CAC      C        STCP_INFO_OGM:
   748 00CAC 185D C        	MOV	A,@(CID_ADDR+33)
   749 00CAD 14AE C        	JMP	STCP_INFO_1
   750 00CAE      C        STCP_INFO_1:
   751 00CAE 0057 C        	MOV	TEMP1,A
   752            C      M 	MOV	TEMP0,_RC
       00CAF 040C     1     MOV A, _RC 
       00CB0 0056     1     MOV  TEMP0 ,A
   753 00CB1 0556 C        	INC	TEMP0
   754            C      M 	ANDA	_RD,@0X1F
       00CB2 181F     1     MOV A,@( 31 )
       00CB3 028D     1     AND A, _RD 
   755 00CB4 0397 C        	ADD	A,TEMP1
   756 00CB5 0058 C        	MOV	TEMP2,A
   757            C      M 	CALL	#COPY_CIDRAM
                      2  M  LCALL  COPY_CIDRAM 
                      3  M  PAGE #( COPY_CIDRAM ),
       00CB6 1E84     3     PAGE ( COPY_CIDRAM / 1024 ),
       00CB7 1164     2     CALL ( COPY_CIDRAM % 1024 ),
                      3  M  PAGE #( $ ),
       00CB8 1E83     3     PAGE ( $ / 1024 ),
   758            C        	;RET
   759 00CB9 1467 C        	JMP	STCP_RET
   760            C        
   761            C        
   762 00CBA      C        STCP_INIT_TIME:			; 0X81
   763 00CBA 00EA C        	CLR	SEC_REG
   764            C        	;INC	_RC
   765            C      M 	MOV	MONTH_REG,_RD
       00CBB 040D     1     MOV A, _RD 
       00CBC 0065     1     MOV  MONTH_REG ,A
   766 00CBD 054C C        	INC	_RC
   767            C      M 	MOV	DAY_REG,_RD
       00CBE 040D     1     MOV A, _RD 
       00CBF 0066     1     MOV  DAY_REG ,A
   768 00CC0 054C C        	INC	_RC
   769            C      M 	MOV	HOUR_REG,_RD
       00CC1 040D     1     MOV A, _RD 
       00CC2 0068     1     MOV  HOUR_REG ,A
   770 00CC3 054C C        	INC	_RC
   771            C      M 	MOV	MIN_REG,_RD
       00CC4 040D     1     MOV A, _RD 
       00CC5 0069     1     MOV  MIN_REG ,A
   772 00CC6 054C C        	INC	_RC
   773            C      M 	MOV	WEEK_REG,_RD
       00CC7 040D     1     MOV A, _RD 
       00CC8 0067     1     MOV  WEEK_REG ,A
   774            C        	;RET
   775 00CC9 1467 C        	JMP	STCP_RET
   776            C        
   777            C        
   778 00CCA      C        STCP_INIT_CALL:			; 0X82
   779            C        	;INC	_RC
   780            C      M 	MOV	NEW_CALL,_RD
       00CCA 040D     1     MOV A, _RD 
       00CCB 006C     1     MOV  NEW_CALL ,A
   781 00CCC 054C C        	INC	_RC
   782            C      M 	MOV	TOTAL_CALL,_RD
       00CCD 040D     1     MOV A, _RD 
       00CCE 006B     1     MOV  TOTAL_CALL ,A
   783            C        	;RET
   784 00CCF 1467 C        	JMP	STCP_RET
   785            C        
   786            C        
   787 00CD0      C        STCP_INIT_MSG:			; 0X83
   788            C        	;INC	_RC
   789            C      M 	MOV	NEW_MSG,_RD
       00CD0 040D     1     MOV A, _RD 
       00CD1 006E     1     MOV  NEW_MSG ,A
   790 00CD2 054C C        	INC	_RC
   791            C      M 	MOV	TOTAL_MSG,_RD
       00CD3 040D     1     MOV A, _RD 
       00CD4 006D     1     MOV  TOTAL_MSG ,A
   792            C        	;RET
   793 00CD5 1467 C        	JMP	STCP_RET
   794            C        
   795            C        
   796 00CD6      C        STCP_INIT_BOOK:			; 0X84
   797            C        	;INC	_RC
   798            C      M 	MOV	TOTAL_BOOK,_RD
       00CD6 040D     1     MOV A, _RD 
       00CD7 006F     1     MOV  TOTAL_BOOK ,A
   799            C        	;RET
   800 00CD8 1467 C        	JMP	STCP_RET
   801            C        
   802            C        
   803 00CD9      C        STCP_INIT_CODE:			; 0X85
   804            C      M 	BANK	1
       00CD9 0B84     1     BS  _RSR , 6 
       00CDA 09C4     1     BC  _RSR , 7 
   805            C        	;INC	_RC
   806            C      M 	AND	R1_CODE1,@0X0F
       00CDB 180F     1     MOV A,@( 15 )
       00CDC 02F5     1     AND  R1_CODE1 ,A
   807 00CDD 070D C        	SWAPA	_RD
   808 00CDE 1AF0 C        	AND	A,@0XF0
   809 00CDF 03F5 C        	ADD	R1_CODE1,A
   810 00CE0 054C C        	INC	_RC
   811 00CE1 070D C        	SWAPA	_RD
   812 00CE2 1AF0 C        	AND	A,@0XF0
   813 00CE3 0076 C        	MOV	R1_CODE23,A
   814 00CE4 054C C        	INC	_RC
   815            C      M 	ANDA	_RD,@0X0F
       00CE5 180F     1     MOV A,@( 15 )
       00CE6 028D     1     AND A, _RD 
   816 00CE7 03F6 C        	ADD	R1_CODE23,A
   817            C        	;RET
   818 00CE8 1467 C        	JMP	STCP_RET
   819            C        
   820            C        
   821 00CE9      C        STCP_INIT_LCALL:		; 0X86
   822            C        	;INC	_RC
   823 00CE9 070D C        	SWAPA	_RD
   824 00CEA 1AF0 C        	AND	A,@0XF0
   825 00CEB 0070 C        	MOV	LCALL12,A
   826 00CEC 054C C        	INC	_RC
   827            C      M 	ANDA	_RD,@0X0F
       00CED 180F     1     MOV A,@( 15 )
       00CEE 028D     1     AND A, _RD 
   828 00CEF 03F0 C        	ADD	LCALL12,A
   829 00CF0 054C C        	INC	_RC
   830 00CF1 070D C        	SWAPA	_RD
   831 00CF2 1AF0 C        	AND	A,@0XF0
   832 00CF3 0071 C        	MOV	LCALL34,A
   833 00CF4 054C C        	INC	_RC
   834            C      M 	ANDA	_RD,@0X0F
       00CF5 180F     1     MOV A,@( 15 )
       00CF6 028D     1     AND A, _RD 
   835 00CF7 03F1 C        	ADD	LCALL34,A
   836 00CF8 054C C        	INC	_RC
   837 00CF9 070D C        	SWAPA	_RD
   838 00CFA 190F C        	OR	A,@0X0F
   839 00CFB 0072 C        	MOV	LCALL5,A
   840            C        	;RET
   841 00CFC 1467 C        	JMP	STCP_RET
   842            C        
   843            C        
   844 00CFD      C        STCP_INIT_LCDCONTRAST:		; 0X87
   845            C      M 	BANK	1
       00CFD 0B84     1     BS  _RSR , 6 
       00CFE 09C4     1     BC  _RSR , 7 
   846            C        	;INC	_RC
   847            C      M 	AND	R1_LCD_CONTRAST,@0XF0
       00CFF 18F0     1     MOV A,@( 240 )
       00D00 02F5     1     AND  R1_LCD_CONTRAST ,A
   848            C      M 	ANDA	_RD,@0X0F
       00D01 180F     1     MOV A,@( 15 )
       00D02 028D     1     AND A, _RD 
   849 00D03 03F5 C        	ADD	R1_LCD_CONTRAST,A
   850            C      M 	ANDA	R1_LCD_CONTRAST,@0X0F
       00D04 180F     1     MOV A,@( 15 )
       00D05 02B5     1     AND A, R1_LCD_CONTRAST 
   851            C      M 	CALL	#LCD_CONTRAST_APPLY
                      2  M  LCALL  LCD_CONTRAST_APPLY 
                      3  M  PAGE #( LCD_CONTRAST_APPLY ),
       00D06 1E80     3     PAGE ( LCD_CONTRAST_APPLY / 1024 ),
       00D07 1318     2     CALL ( LCD_CONTRAST_APPLY % 1024 ),
                      3  M  PAGE #( $ ),
       00D08 1E83     3     PAGE ( $ / 1024 ),
   852            C        	;RET
   853 00D09 1467 C        	JMP	STCP_RET
   854            C        
   855            C        
   856 00D0A      C        STCP_INIT_TIMEFORMAT:		; 0X88
   857            C        	;BANK	1
   858            C        	;CRAM	R1_SYS_FG,TIMEFORMAT
   859            C        	;MOV	A,_RD
   860            C        	;JPZ	STCP_RET
   861            C        	;SRAM	R1_SYS_FG,TIMEFORMAT
   862 00D0A 1467 C        	JMP	STCP_RET
   863            C        
   864            C        
   865 00D0B      C        STCP_INIT_LANGUAGE:		; 0X89
   866            C      M 	CRAM	SYS_FG,LANGUAGE
       00D0B 081E     1     BC  SYS_FG , LANGUAGE 
   867 00D0C 040D C        	MOV	A,_RD
   868            C      M 	JPZ	$+2
       00D0D 0C83     1     JBC  _STATUS , Z 
       00D0E 1510     1     JMP ( $ + 2 ),
   869            C      M 	SRAM	SYS_FG,LANGUAGE
       00D0F 0A1E     1     BS  SYS_FG , LANGUAGE 
   870            C        	;RET
   871 00D10 1467 C        	JMP	STCP_RET
   872            C        
   873            C        
   874 00D11      C        STCP_INIT_INVALID:		; 0X8A/0X8B/0X8C/0X8D/0X8E/0X8F
   875            C        	;RET
   876 00D11 1467 C        	JMP	STCP_RET
   877            C        
   878            C        
   879 00D12      C        STCP_MENU_LANGUANGE:		; 0X90
   880            C      M 	MOV	MENU_STATE,@1
       00D12 1801     1     MOV A,@( 1 )
       00D13 0079     1     MOV  MENU_STATE ,A
   881            C        	
   882            C      M 	MOV	BANK0_TEMP0,@0X80
       00D14 1880     1     MOV A,@( 128 )
       00D15 0060     1     MOV  BANK0_TEMP0 ,A
   883 00D16 00E1 C        	CLR	BANK0_TEMP1
   884 00D17 040D C        	MOV	A,_RD
   885            C      M 	JPZ	$+4
       00D18 0C83     1     JBC  _STATUS , Z 
       00D19 151D     1     JMP ( $ + 4 ),
   886 00D1A 00E0 C        	CLR	BANK0_TEMP0
   887            C      M 	MOV	BANK0_TEMP1,@0X80
       00D1B 1880     1     MOV A,@( 128 )
       00D1C 0061     1     MOV  BANK0_TEMP1 ,A
   888            C        	
   889            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00D1D 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00D1E 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00D1F 1E83     3     PAGE ( $ / 1024 ),
   890            C        	
   891            C      M 	PAGE	#(VGA_STR)
       00D20 1E85     1     PAGE ( VGA_STR / 1024 ),
   892 00D21 1820 C        	MOV	A,@(STYLE_LEFT)
   893 00D22 104B C        	CALL	VGA_STR
   894            C      M 	ADDA	BANK0_TEMP0,@(WD_ENGLISH)
       00D23 1820     1     MOV A,@( WD_ENGLISH )
       00D24 03A0     1     ADD A, BANK0_TEMP0 
   895 00D25 11BF C        	CALL	VGA_STRING
   896 00D26 18FF C        	MOV	A,@CH_END
   897 00D27 104B C        	CALL	VGA_STR
   898            C        	
   899 00D28 1840 C        	MOV	A,@(STYLE_RIGHT)
   900 00D29 104B C        	CALL	VGA_STR
   901            C      M 	ADDA	BANK0_TEMP1,@(WD_GERMAN)
       00D2A 1821     1     MOV A,@( WD_GERMAN )
       00D2B 03A1     1     ADD A, BANK0_TEMP1 
   902 00D2C 11BF C        	CALL	VGA_STRING
   903 00D2D 18FF C        	MOV	A,@CH_END
   904 00D2E 104B C        	CALL	VGA_STR
   905            C      M 	PAGE	#($)
       00D2F 1E83     1     PAGE ( $ / 1024 ),
   906            C        	;RET
   907 00D30 1467 C        	JMP	STCP_RET
   908            C        
   909            C        
   910 00D31      C        STCP_MENU_HOUR:			; 0X91
   911 00D31 1800 C        	MOV	A,@0
   912 00D32 153A C        	JMP	STCP_MENU_TIME
   913 00D33      C        STCP_MENU_MINUTE:		; 0X92
   914 00D33 1801 C        	MOV	A,@1
   915 00D34 153A C        	JMP	STCP_MENU_TIME
   916 00D35      C        STCP_MENU_MONTH:		; 0X93
   917 00D35 1802 C        	MOV	A,@2
   918 00D36 153A C        	JMP	STCP_MENU_TIME
   919 00D37      C        STCP_MENU_DAY:			; 0X94
   920 00D37 1803 C        	MOV	A,@3
   921 00D38 153A C        	JMP	STCP_MENU_TIME
   922 00D39      C        STCP_MENU_WEEK:			; 0X95
   923 00D39 1804 C        	MOV	A,@4
   924            C        	;JMP	STCP_MENU_TIME
   925 00D3A      C        STCP_MENU_TIME:
   926 00D3A 0060 C        	MOV	BANK0_TEMP0,A
   927            C      M 	MOV	BANK0_TEMP1,_RC
       00D3B 040C     1     MOV A, _RC 
       00D3C 0061     1     MOV  BANK0_TEMP1 ,A
   928 00D3D 1802 C        	MOV	A,@2
   929            C      M 	CALL	#MENU_CHK
                      2  M  LCALL  MENU_CHK 
                      3  M  PAGE #( MENU_CHK ),
       00D3E 1E82     3     PAGE ( MENU_CHK / 1024 ),
       00D3F 1015     2     CALL ( MENU_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       00D40 1E83     3     PAGE ( $ / 1024 ),
   930            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00D41 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00D42 088B     2     BC  _RB , 2 
   931            C      M 	MOV	_RC,BANK0_TEMP1
       00D43 0421     1     MOV A, BANK0_TEMP1 
       00D44 004C     1     MOV  _RC ,A
   932 00D45 0420 C        	MOV	A,BANK0_TEMP0
   933            C      M 	CALL	#MENU_TIME
                      2  M  LCALL  MENU_TIME 
                      3  M  PAGE #( MENU_TIME ),
       00D46 1E82     3     PAGE ( MENU_TIME / 1024 ),
       00D47 11F8     2     CALL ( MENU_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00D48 1E83     3     PAGE ( $ / 1024 ),
   934            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00D49 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00D4A 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00D4B 1E83     3     PAGE ( $ / 1024 ),
   935            C      M 	CALL	#DISP_MENU_TIME
                      2  M  LCALL  DISP_MENU_TIME 
                      3  M  PAGE #( DISP_MENU_TIME ),
       00D4C 1E82     3     PAGE ( DISP_MENU_TIME / 1024 ),
       00D4D 120F     2     CALL ( DISP_MENU_TIME % 1024 ),
                      3  M  PAGE #( $ ),
       00D4E 1E83     3     PAGE ( $ / 1024 ),
   936 00D4F 1830 C        	MOV	A,@0X30
   937            C      M 	CALL	#VGA_STAMP
                      2  M  LCALL  VGA_STAMP 
                      3  M  PAGE #( VGA_STAMP ),
       00D50 1E85     3     PAGE ( VGA_STAMP / 1024 ),
       00D51 1000     2     CALL ( VGA_STAMP % 1024 ),
                      3  M  PAGE #( $ ),
       00D52 1E83     3     PAGE ( $ / 1024 ),
   938            C        	;RET
   939 00D53 1467 C        	JMP	STCP_RET
   940            C        
   941            C        
   942 00D54      C        STCP_MENU_LCDCONTRAST:		; 0X96
   943            C      M 	MOV	MENU_STATE,@3
       00D54 1803     1     MOV A,@( 3 )
       00D55 0079     1     MOV  MENU_STATE ,A
   944            C      M 	MOV	BANK0_TEMP0,_RD
       00D56 040D     1     MOV A, _RD 
       00D57 0060     1     MOV  BANK0_TEMP0 ,A
   945            C      M 	CALL	#LCD_CONTRAST_APPLY
                      2  M  LCALL  LCD_CONTRAST_APPLY 
                      3  M  PAGE #( LCD_CONTRAST_APPLY ),
       00D58 1E80     3     PAGE ( LCD_CONTRAST_APPLY / 1024 ),
       00D59 1318     2     CALL ( LCD_CONTRAST_APPLY % 1024 ),
                      3  M  PAGE #( $ ),
       00D5A 1E83     3     PAGE ( $ / 1024 ),
   946            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00D5B 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00D5C 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00D5D 1E83     3     PAGE ( $ / 1024 ),
   947            C        	
   948            C      M 	PAGE	#(VGA_STR)
       00D5E 1E85     1     PAGE ( VGA_STR / 1024 ),
   949 00D5F 1860 C        	MOV	A,@(STYLE_CENTER)
   950 00D60 1024 C        	CALL	VGA_NUM2
   951 00D61 0420 C        	MOV	A,BANK0_TEMP0
   952 00D62 1024 C        	CALL	VGA_NUM2
   953 00D63 18FF C        	MOV	A,@CH_END
   954 00D64 1024 C        	CALL	VGA_NUM2
   955            C        	
   956 00D65 1860 C        	MOV	A,@(STYLE_CENTER)
   957 00D66 104B C        	CALL	VGA_STR
   958 00D67 1810 C        	MOV	A,@(WD_LCD_CONTRAST)
   959 00D68 11BF C        	CALL	VGA_STRING
   960 00D69 18FF C        	MOV	A,@CH_END
   961 00D6A 104B C        	CALL	VGA_STR
   962            C        	
   963            C      M 	PAGE	#($)
       00D6B 1E83     1     PAGE ( $ / 1024 ),
   964            C        	
   965            C        	;RET
   966 00D6C 1467 C        	JMP	STCP_RET
   967            C        
   968            C        
   969 00D6D      C        STCP_MENU_CODE1:		; 0X97
   970 00D6D 1801 C        	MOV	A,@1
   971 00D6E 1573 C        	JMP	STCP_MENU_CODE
   972 00D6F      C        STCP_MENU_CODE2:		; 0X98
   973 00D6F 1802 C        	MOV	A,@2
   974 00D70 1573 C        	JMP	STCP_MENU_CODE
   975 00D71      C        STCP_MENU_CODE3:		; 0X99
   976 00D71 1803 C        	MOV	A,@3
   977 00D72 1573 C        	JMP	STCP_MENU_CODE
   978 00D73      C        STCP_MENU_CODE:
   979 00D73 0060 C        	MOV	BANK0_TEMP0,A
   980            C      M 	MOV	BANK0_TEMP1,_RC
       00D74 040C     1     MOV A, _RC 
       00D75 0061     1     MOV  BANK0_TEMP1 ,A
   981 00D76 1804 C        	MOV	A,@4
   982            C      M 	CALL	#MENU_CHK
                      2  M  LCALL  MENU_CHK 
                      3  M  PAGE #( MENU_CHK ),
       00D77 1E82     3     PAGE ( MENU_CHK / 1024 ),
       00D78 1015     2     CALL ( MENU_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       00D79 1E83     3     PAGE ( $ / 1024 ),
   983            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00D7A 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00D7B 088B     2     BC  _RB , 2 
   984            C      M 	MOV	_RC,BANK0_TEMP1
       00D7C 0421     1     MOV A, BANK0_TEMP1 
       00D7D 004C     1     MOV  _RC ,A
   985 00D7E 0420 C        	MOV	A,BANK0_TEMP0
   986            C      M 	CALL	#DISP_MENU_CODE
                      2  M  LCALL  DISP_MENU_CODE 
                      3  M  PAGE #( DISP_MENU_CODE ),
       00D7F 1E82     3     PAGE ( DISP_MENU_CODE / 1024 ),
       00D80 128E     2     CALL ( DISP_MENU_CODE % 1024 ),
                      3  M  PAGE #( $ ),
       00D81 1E83     3     PAGE ( $ / 1024 ),
   987            C        	;RET
   988 00D82 1467 C        	JMP	STCP_RET
   989            C        
   990            C        
   991 00D83      C        STCP_MENU_LCALL1:		; 0X9A
   992 00D83 1801 C        	MOV	A,@1
   993 00D84 158C C        	JMP	STCP_MENU_LCALL
   994 00D85      C        STCP_MENU_LCALL2:		; 0X9B
   995 00D85 1802 C        	MOV	A,@2
   996 00D86 158C C        	JMP	STCP_MENU_LCALL
   997 00D87      C        STCP_MENU_LCALL3:		; 0X9C
   998 00D87 1803 C        	MOV	A,@3
   999 00D88 158C C        	JMP	STCP_MENU_LCALL
  1000 00D89      C        STCP_MENU_LCALL4:		; 0X9D
  1001 00D89 1804 C        	MOV	A,@4
  1002 00D8A 158C C        	JMP	STCP_MENU_LCALL
  1003 00D8B      C        STCP_MENU_LCALL5:
  1004 00D8B 1805 C        	MOV	A,@5
  1005 00D8C      C        STCP_MENU_LCALL:
  1006 00D8C 0060 C        	MOV	BANK0_TEMP0,A
  1007            C      M 	MOV	BANK0_TEMP1,_RC
       00D8D 040C     1     MOV A, _RC 
       00D8E 0061     1     MOV  BANK0_TEMP1 ,A
  1008 00D8F 1805 C        	MOV	A,@5
  1009            C      M 	CALL	#MENU_CHK
                      2  M  LCALL  MENU_CHK 
                      3  M  PAGE #( MENU_CHK ),
       00D90 1E82     3     PAGE ( MENU_CHK / 1024 ),
       00D91 1015     2     CALL ( MENU_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       00D92 1E83     3     PAGE ( $ / 1024 ),
  1010            C      M 	MOV	_RC,BANK0_TEMP1
       00D93 0421     1     MOV A, BANK0_TEMP1 
       00D94 004C     1     MOV  _RC ,A
  1011 00D95 0420 C        	MOV	A,BANK0_TEMP0
  1012            C      M 	CALL	#EDIT_NUM2
                      2  M  LCALL  EDIT_NUM2 
                      3  M  PAGE #( EDIT_NUM2 ),
       00D96 1E82     3     PAGE ( EDIT_NUM2 / 1024 ),
       00D97 10FE     2     CALL ( EDIT_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00D98 1E83     3     PAGE ( $ / 1024 ),
  1013            C        	;RET
  1014 00D99 1467 C        	JMP	STCP_RET
  1015            C        
  1016 00D9A      C        STCP_MENU_RING:
  1017            C      M 	MOV	MENU_STATE,@6
       00D9A 1806     1     MOV A,@( 6 )
       00D9B 0079     1     MOV  MENU_STATE ,A
  1018            C      M 	MOV	BANK0_TEMP0,_RD
       00D9C 040D     1     MOV A, _RD 
       00D9D 0060     1     MOV  BANK0_TEMP0 ,A
  1019            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00D9E 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00D9F 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00DA0 1E83     3     PAGE ( $ / 1024 ),
  1020            C        	
  1021 00DA1 1860 C        	MOV	A,@(STYLE_CENTER)
  1022            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00DA2 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00DA3 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00DA4 1E83     3     PAGE ( $ / 1024 ),
  1023            C      M 	SUBA	BANK0_TEMP0,@2
       00DA5 1802     1     MOV A,@( 2 )
       00DA6 0120     1     SUB A, BANK0_TEMP0 
  1024            C      M 	JPC	STCP_MENU_RING_1
       00DA7 0C03     1     JBC  _STATUS , C 
       00DA8 15AF     1     JMP  STCP_MENU_RING_1 ,
  1025 00DA9 1812 C        	MOV	A,@NUM_EX2
  1026            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00DAA 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00DAB 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00DAC 1E83     3     PAGE ( $ / 1024 ),
  1027 00DAD 1805 C        	MOV	A,@NUM_5
  1028 00DAE 15B1 C        	JMP	STCP_MENU_RING_2
  1029 00DAF      C        STCP_MENU_RING_1:
  1030            C      M 	ANDA	BANK0_TEMP0,@(0X0F)
       00DAF 180F     1     MOV A,@( 15 )
       00DB0 02A0     1     AND A, BANK0_TEMP0 
  1031 00DB1      C        STCP_MENU_RING_2:
  1032            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00DB1 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00DB2 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00DB3 1E83     3     PAGE ( $ / 1024 ),
  1033 00DB4 18FF C        	MOV	A,@CH_END
  1034            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       00DB5 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       00DB6 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00DB7 1E83     3     PAGE ( $ / 1024 ),
  1035            C        	
  1036 00DB8 1860 C        	MOV	A,@(STYLE_CENTER)
  1037            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00DB9 1E85     3     PAGE ( VGA_STR / 1024 ),
       00DBA 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00DBB 1E83     3     PAGE ( $ / 1024 ),
  1038 00DBC 1811 C        	MOV	A,@(WD_SET_RING)
  1039            C      M 	CALL	#VGA_STRING
                      2  M  LCALL  VGA_STRING 
                      3  M  PAGE #( VGA_STRING ),
       00DBD 1E85     3     PAGE ( VGA_STRING / 1024 ),
       00DBE 11BF     2     CALL ( VGA_STRING % 1024 ),
                      3  M  PAGE #( $ ),
       00DBF 1E83     3     PAGE ( $ / 1024 ),
  1040 00DC0 18FF C        	MOV	A,@CH_END
  1041            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00DC1 1E85     3     PAGE ( VGA_STR / 1024 ),
       00DC2 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00DC3 1E83     3     PAGE ( $ / 1024 ),
  1042            C        	
  1043            C        	
  1044            C        	;RET
  1045 00DC4 1467 C        	JMP	STCP_RET
  1046            C        	
  1047            C        
  1048            C        
  1049 00DC5      C        STCP_EXTOP:			; 0X9E
  1050            C      M 	SUBA	_RD,@7
       00DC5 1807     1     MOV A,@( 7 )
       00DC6 010D     1     SUB A, _RD 
  1051            C      M 	JPC	STCP_INVALID
       00DC7 0C03     1     JBC  _STATUS , C 
       00DC8 1467     1     JMP  STCP_INVALID ,
  1052 00DC9 040D C        	MOV	A,_RD
  1053 00DCA 0020 C        	TBL
  1054 00DCB 15D2 C        	JMP	STCP_EXT_EDITBOOK
  1055 00DCC 15D7 C        	JMP	STCP_EXT_SEARCHBOOK
  1056 00DCD 15F0 C        	JMP	STCP_EXT_COPYBOOK
  1057 00DCE 1602 C        	JMP	STCP_EXT_DIAL
  1058 00DCF 161D C        	JMP	STCP_EXT_LDIAL
  1059 00DD0 1625 C        	JMP	STCP_EXT_REMOTE
  1060 00DD1 1631 C        	JMP	STCP_EXT_RETURN
  1061 00DD2      C        STCP_EXT_EDITBOOK:
  1062            C      M 	MOV	BANK0_TEMP0,@(WD_EDIT+0X80)
       00DD2 18A2     1     MOV A,@(( WD_EDIT + 128 ))
       00DD3 0060     1     MOV  BANK0_TEMP0 ,A
  1063            C      M 	MOV	BANK0_TEMP1,@(WD_SEARCH)
       00DD4 1823     1     MOV A,@( WD_SEARCH )
       00DD5 0061     1     MOV  BANK0_TEMP1 ,A
  1064 00DD6 15DB C        	JMP	STCP_EXT_EDITSEARCH
  1065 00DD7      C        STCP_EXT_SEARCHBOOK:
  1066            C      M 	MOV	BANK0_TEMP0,@(WD_EDIT)
       00DD7 1822     1     MOV A,@( WD_EDIT )
       00DD8 0060     1     MOV  BANK0_TEMP0 ,A
  1067            C      M 	MOV	BANK0_TEMP1,@(WD_SEARCH+0X80)
       00DD9 18A3     1     MOV A,@(( WD_SEARCH + 128 ))
       00DDA 0061     1     MOV  BANK0_TEMP1 ,A
  1068 00DDB      C        STCP_EXT_EDITSEARCH:
  1069            C      M 	CALL	#CLR_EDIT
                      2  M  LCALL  CLR_EDIT 
                      3  M  PAGE #( CLR_EDIT ),
       00DDB 1E82     3     PAGE ( CLR_EDIT / 1024 ),
       00DDC 10D3     2     CALL ( CLR_EDIT % 1024 ),
                      3  M  PAGE #( $ ),
       00DDD 1E83     3     PAGE ( $ / 1024 ),
  1070            C        	
  1071            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00DDE 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00DDF 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00DE0 1E83     3     PAGE ( $ / 1024 ),
  1072            C      M 	PAGE	#(VGA_STR)
       00DE1 1E85     1     PAGE ( VGA_STR / 1024 ),
  1073 00DE2 1820 C        	MOV	A,@(STYLE_LEFT)
  1074 00DE3 104B C        	CALL	VGA_STR
  1075 00DE4 0420 C        	MOV	A,BANK0_TEMP0
  1076 00DE5 11BF C        	CALL	VGA_STRING
  1077 00DE6 18FF C        	MOV	A,@CH_END
  1078 00DE7 104B C        	CALL	VGA_STR
  1079            C        	
  1080 00DE8 1840 C        	MOV	A,@(STYLE_RIGHT)
  1081 00DE9 104B C        	CALL	VGA_STR
  1082 00DEA 0421 C        	MOV	A,BANK0_TEMP1
  1083 00DEB 11BF C        	CALL	VGA_STRING
  1084 00DEC 18FF C        	MOV	A,@CH_END
  1085 00DED 104B C        	CALL	VGA_STR
  1086            C      M 	PAGE	#($)
       00DEE 1E83     1     PAGE ( $ / 1024 ),
  1087            C        	
  1088            C        	;RET
  1089 00DEF 1467 C        	JMP	STCP_RET
  1090 00DF0      C        STCP_EXT_COPYBOOK:
  1091            C      M 	CALL	#CLR_EDIT
                      2  M  LCALL  CLR_EDIT 
                      3  M  PAGE #( CLR_EDIT ),
       00DF0 1E82     3     PAGE ( CLR_EDIT / 1024 ),
       00DF1 10D3     2     CALL ( CLR_EDIT % 1024 ),
                      3  M  PAGE #( $ ),
       00DF2 1E83     3     PAGE ( $ / 1024 ),
  1092            C      M 	CALL	#INIT_EDIT_NUM2
                      2  M  LCALL  INIT_EDIT_NUM2 
                      3  M  PAGE #( INIT_EDIT_NUM2 ),
       00DF3 1E82     3     PAGE ( INIT_EDIT_NUM2 / 1024 ),
       00DF4 10AA     2     CALL ( INIT_EDIT_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00DF5 1E83     3     PAGE ( $ / 1024 ),
  1093            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00DF6 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00DF7 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00DF8 1E83     3     PAGE ( $ / 1024 ),
  1094            C        	
  1095            C      M 	PAGE	#(VGA_STR)
       00DF9 1E85     1     PAGE ( VGA_STR / 1024 ),
  1096 00DFA 1860 C        	MOV	A,@(STYLE_CENTER)
  1097 00DFB 104B C        	CALL	VGA_STR
  1098 00DFC 1827 C        	MOV	A,@(WD_COPIED_INTO_BOOK)
  1099 00DFD 11BF C        	CALL	VGA_STRING
  1100 00DFE 18FF C        	MOV	A,@CH_END
  1101 00DFF 104B C        	CALL	VGA_STR
  1102            C      M 	PAGE	#($)
       00E00 1E83     1     PAGE ( $ / 1024 ),
  1103            C        	;RET
  1104 00E01 1467 C        	JMP	STCP_RET
  1105 00E02      C        STCP_EXT_DIAL:
  1106            C      M 	CALL	#INIT_DIAL
                      2  M  LCALL  INIT_DIAL 
                      3  M  PAGE #( INIT_DIAL ),
       00E02 1E84     3     PAGE ( INIT_DIAL / 1024 ),
       00E03 130E     2     CALL ( INIT_DIAL % 1024 ),
                      3  M  PAGE #( $ ),
       00E04 1E83     3     PAGE ( $ / 1024 ),
  1107 00E05      C        STCP_EXT_DIAL_1:
  1108 00E05 00E0 C        	CLR	BANK0_TEMP0
  1109 00E06      C        STCP_EXT_DIAL_LOOP:
  1110            C      M 	CLRC
       00E06 0803     1     BC  _STATUS , C 
  1111 00E07 0620 C        	RRCA	BANK0_TEMP0
  1112 00E08 1F3F C        	ADD	A,@(CID_ADDR+3)
  1113 00E09 004C C        	MOV	_RC,A
  1114            C      M 	JPB	BANK0_TEMP0,0,$+3
       00E0A 0C20     1     JBC  BANK0_TEMP0 , 0 
       00E0B 160E     1     JMP ( $ + 3 ),
  1115 00E0C 070D C        	SWAPA	_RD
  1116 00E0D 160F C        	JMP	$+2
  1117 00E0E 040D C        	MOV	A,_RD
  1118 00E0F 1A0F C        	AND	A,@0X0F
  1119            C      M 	CALL	#STORE_DIALNUM
                      2  M  LCALL  STORE_DIALNUM 
                      3  M  PAGE #( STORE_DIALNUM ),
       00E10 1E84     3     PAGE ( STORE_DIALNUM / 1024 ),
       00E11 12E2     2     CALL ( STORE_DIALNUM % 1024 ),
                      3  M  PAGE #( $ ),
       00E12 1E83     3     PAGE ( $ / 1024 ),
  1120 00E13 0560 C        	INC	BANK0_TEMP0
  1121            C      M 	SUBA	BANK0_TEMP0,@16
       00E14 1810     1     MOV A,@( 16 )
       00E15 0120     1     SUB A, BANK0_TEMP0 
  1122            C      M 	JPNZ	STCP_EXT_DIAL_LOOP
       00E16 0E83     1     JBS  _STATUS , Z 
       00E17 1606     1     JMP  STCP_EXT_DIAL_LOOP ,
  1123 00E18 18FF C        	MOV	A,@CH_END
  1124            C      M 	CALL	#STORE_DIALNUM
                      2  M  LCALL  STORE_DIALNUM 
                      3  M  PAGE #( STORE_DIALNUM ),
       00E19 1E84     3     PAGE ( STORE_DIALNUM / 1024 ),
       00E1A 12E2     2     CALL ( STORE_DIALNUM % 1024 ),
                      3  M  PAGE #( $ ),
       00E1B 1E83     3     PAGE ( $ / 1024 ),
  1125            C        	;RET
  1126 00E1C 1467 C        	JMP	STCP_RET
  1127 00E1D      C        STCP_EXT_LDIAL:
  1128            C      M 	CALL	#INIT_DIAL
                      2  M  LCALL  INIT_DIAL 
                      3  M  PAGE #( INIT_DIAL ),
       00E1D 1E84     3     PAGE ( INIT_DIAL / 1024 ),
       00E1E 130E     2     CALL ( INIT_DIAL % 1024 ),
                      3  M  PAGE #( $ ),
       00E1F 1E83     3     PAGE ( $ / 1024 ),
  1129            C        	;SWAPA	LCALL12
  1130            C        	;AND	A,@0X0F
  1131            C        	;MOV	TEMP0,A
  1132            C        	;SUB	A,@9
  1133            C        	;JPNC	$+5
  1134            C        	;MOV	A,TEMP0
  1135            C        	;CALL	#STORE_DIALNUM
  1136            C        	;ANDA	LCALL12,@0X0F
  1137            C        	;MOV	TEMP0,A
  1138            C        	;SUB	A,@9
  1139            C        	;JPNC	$+5
  1140            C        	;MOV	A,TEMP0
  1141            C        	;CALL	#STORE_DIALNUM
  1142            C        	;SWAPA	LCALL34
  1143            C        	;AND	A,@0X0F
  1144            C        	;MOV	TEMP0,A
  1145            C        	;SUB	A,@9
  1146            C        	;JPNC	$+5
  1147            C        	;MOV	A,TEMP0
  1148            C        	;CALL	#STORE_DIALNUM
  1149            C        	;ANDA	LCALL34,@0X0F
  1150            C        	;MOV	TEMP0,A
  1151            C        	;SUB	A,@9
  1152            C        	;JPNC	$+5
  1153            C        	;MOV	A,TEMP0
  1154            C        	;CALL	#STORE_DIALNUM
  1155            C        	;SWAPA	LCALL5
  1156            C        	;AND	A,@0X0F
  1157            C        	;MOV	TEMP0,A
  1158            C        	;SUB	A,@9
  1159            C        	;JPNC	$+5
  1160            C        	;MOV	A,TEMP0
  1161            C        	;CALL	#STORE_DIALNUM
  1162 00E20 1800 C        	MOV	A,@0
  1163            C      M 	CALL	#STORE_DIALNUM
                      2  M  LCALL  STORE_DIALNUM 
                      3  M  PAGE #( STORE_DIALNUM ),
       00E21 1E84     3     PAGE ( STORE_DIALNUM / 1024 ),
       00E22 12E2     2     CALL ( STORE_DIALNUM % 1024 ),
                      3  M  PAGE #( $ ),
       00E23 1E83     3     PAGE ( $ / 1024 ),
  1164 00E24 1605 C        	JMP	STCP_EXT_DIAL_1
  1165 00E25      C        STCP_EXT_REMOTE:
  1166            C        	;SRAM	EVENT,1				; 不允许电话线检测
  1167            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00E25 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00E26 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00E27 1E83     3     PAGE ( $ / 1024 ),
  1168            C        	
  1169            C      M 	PAGE	#(VGA_STR)
       00E28 1E85     1     PAGE ( VGA_STR / 1024 ),
  1170 00E29 1860 C        	MOV	A,@(STYLE_CENTER)
  1171 00E2A 104B C        	CALL	VGA_STR
  1172 00E2B 1816 C        	MOV	A,@(WD_IN_REMOTE)
  1173 00E2C 11BF C        	CALL	VGA_STRING
  1174 00E2D 18FF C        	MOV	A,@CH_END
  1175 00E2E 104B C        	CALL	VGA_STR
  1176            C      M 	PAGE	#($)
       00E2F 1E83     1     PAGE ( $ / 1024 ),
  1177            C        	;RET
  1178 00E30 1467 C        	JMP	STCP_RET
  1179            C        
  1180 00E31      C        STCP_EXT_RETURN:
  1181            C        ;	JPNB	EVENT,TEST,STCP_EXT_RETURN_1
  1182            C        ;	MOV	A,@CH_END
  1183            C        ;	CALL	#VGA_NUM2
  1184            C        ;STCP_EXT_RETURN_1:
  1185            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00E31 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00E32 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00E33 1E83     3     PAGE ( $ / 1024 ),
  1186            C      M 	CRAM	SYS_FG,LOCK_TOPLINE
       00E34 095E     1     BC  SYS_FG , LOCK_TOPLINE 
  1187            C      M 	SRAM	SYS_FG,SYS_CLOCK
       00E35 0ADE     1     BS  SYS_FG , SYS_CLOCK 
  1188            C      M 	SRAM	SYS_FG,STAMP
       00E36 0A9E     1     BS  SYS_FG , STAMP 
  1189            C      M 	CRAM	SYS_FG,TIME
       00E37 09DE     1     BC  SYS_FG , TIME 
  1190 00E38 00F8 C        	CLR	TMR_NAME
  1191            C        	;CRAM	EVENT,TEST			; 停止TEST L111
  1192            C        	;RET
  1193 00E39 1467 C        	JMP	STCP_RET
  1194            C        	
  1195            C        
  1196 00E3A      C        STCP_BOOK:			; 0X9F
  1197 00E3A 040D C        	MOV	A,_RD
  1198            C      M 	JPZ	STCP_BOOK_END
       00E3B 0C83     1     JBC  _STATUS , Z 
       00E3C 1652     1     JMP  STCP_BOOK_END ,
  1199 00E3D 0060 C        	MOV	BANK0_TEMP0,A
  1200            C      M 	CALL	#INIT_EDIT
                      2  M  LCALL  INIT_EDIT 
                      3  M  PAGE #( INIT_EDIT ),
       00E3E 1E82     3     PAGE ( INIT_EDIT / 1024 ),
       00E3F 107D     2     CALL ( INIT_EDIT % 1024 ),
                      3  M  PAGE #( $ ),
       00E40 1E83     3     PAGE ( $ / 1024 ),
  1201            C      M 	CALL	#MENU_LOCK			; 屏蔽第一行的更新
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00E41 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00E42 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00E43 1E83     3     PAGE ( $ / 1024 ),
  1202            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00E44 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00E45 088B     2     BC  _RB , 2 
  1203            C      M 	MOV	_RC,@(CID_ADDR+33)
       00E46 185D     1     MOV A,@(( CID_ADDR + 33 ))
       00E47 004C     1     MOV  _RC ,A
  1204            C      M 	MOV	_RD,BANK0_TEMP0
       00E48 0420     1     MOV A, BANK0_TEMP0 
       00E49 004D     1     MOV  _RD ,A
  1205            C      M 	MOV	_RC,@(CID_ADDR+0)
       00E4A 183C     1     MOV A,@(( CID_ADDR + 0 ))
       00E4B 004C     1     MOV  _RC ,A
  1206            C      M 	MOV	_RD,@(STYLE_CENTER+0X80)		; 不显示第一行
       00E4C 18E0     1     MOV A,@(( STYLE_CENTER + 128 ))
       00E4D 004D     1     MOV  _RD ,A
  1207            C      M 	CALL	#DISP_CID
                      2  M  LCALL  DISP_CID 
                      3  M  PAGE #( DISP_CID ),
       00E4E 1E81     3     PAGE ( DISP_CID / 1024 ),
       00E4F 1262     2     CALL ( DISP_CID % 1024 ),
                      3  M  PAGE #( $ ),
       00E50 1E83     3     PAGE ( $ / 1024 ),
  1208            C        	;RET
  1209 00E51 1467 C        	JMP	STCP_RET
  1210 00E52      C        STCP_BOOK_END:
  1211            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00E52 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00E53 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00E54 1E83     3     PAGE ( $ / 1024 ),
  1212            C      M 	PAGE	#(VGA_STR)
       00E55 1E85     1     PAGE ( VGA_STR / 1024 ),
  1213 00E56 1860 C        	MOV	A,@(STYLE_CENTER)
  1214 00E57 104B C        	CALL	VGA_STR
  1215 00E58 1829 C        	MOV	A,@(WD_END_OF_NAMES_BOOK)
  1216 00E59 11BF C        	CALL	VGA_STRING
  1217 00E5A 18FF C        	MOV	A,@CH_END
  1218 00E5B 104B C        	CALL	VGA_STR
  1219            C      M 	PAGE	#($)
       00E5C 1E83     1     PAGE ( $ / 1024 ),
  1220            C        	;RET
  1221 00E5D 1467 C        	JMP	STCP_RET
  1222            C        
  1223            C        
  1224 00E5E      C        STCP_CHANGE_NUM2:		; 0XA0~0XAF
  1225 00E5E 01CC C        	DEC	_RC
  1226            C      M 	ANDA	_RD,@0X0F
       00E5F 180F     1     MOV A,@( 15 )
       00E60 028D     1     AND A, _RD 
  1227 00E61 1F01 C        	ADD	A,@1
  1228 00E62 0056 C        	MOV	TEMP0,A
  1229 00E63 054C C        	INC	_RC
  1230 00E64 0416 C        	MOV	A,TEMP0
  1231            C      M 	CALL	#EDIT_NUM2
                      2  M  LCALL  EDIT_NUM2 
                      3  M  PAGE #( EDIT_NUM2 ),
       00E65 1E82     3     PAGE ( EDIT_NUM2 / 1024 ),
       00E66 10FE     2     CALL ( EDIT_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00E67 1E83     3     PAGE ( $ / 1024 ),
  1232 00E68 1800 C        	MOV	A,@0
  1233            C      M 	CALL	#DISP_NUM1
                      2  M  LCALL  DISP_NUM1 
                      3  M  PAGE #( DISP_NUM1 ),
       00E69 1E82     3     PAGE ( DISP_NUM1 / 1024 ),
       00E6A 1143     2     CALL ( DISP_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       00E6B 1E83     3     PAGE ( $ / 1024 ),
  1234 00E6C 1800 C        	MOV	A,@0
  1235            C      M 	CALL	#DISP_STR
                      2  M  LCALL  DISP_STR 
                      3  M  PAGE #( DISP_STR ),
       00E6D 1E82     3     PAGE ( DISP_STR / 1024 ),
       00E6E 11BA     2     CALL ( DISP_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00E6F 1E83     3     PAGE ( $ / 1024 ),
  1236            C        	;RET
  1237 00E70 1467 C        	JMP	STCP_RET
  1238            C        
  1239            C        
  1240 00E71      C        STCP_CHANGE_STR:		; 0XB0~0XBF
  1241 00E71 01CC C        	DEC	_RC
  1242            C      M 	ANDA	_RD,@0X0F
       00E72 180F     1     MOV A,@( 15 )
       00E73 028D     1     AND A, _RD 
  1243 00E74 1F01 C        	ADD	A,@1
  1244 00E75 0056 C        	MOV	TEMP0,A
  1245 00E76 054C C        	INC	_RC
  1246 00E77 0416 C        	MOV	A,TEMP0
  1247            C      M 	CALL	#EDIT_STR
                      2  M  LCALL  EDIT_STR 
                      3  M  PAGE #( EDIT_STR ),
       00E78 1E82     3     PAGE ( EDIT_STR / 1024 ),
       00E79 1105     2     CALL ( EDIT_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00E7A 1E83     3     PAGE ( $ / 1024 ),
  1248 00E7B 1800 C        	MOV	A,@0
  1249            C      M 	CALL	#DISP_NUM1
                      2  M  LCALL  DISP_NUM1 
                      3  M  PAGE #( DISP_NUM1 ),
       00E7C 1E82     3     PAGE ( DISP_NUM1 / 1024 ),
       00E7D 1143     2     CALL ( DISP_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       00E7E 1E83     3     PAGE ( $ / 1024 ),
  1250 00E7F 1800 C        	MOV	A,@0
  1251            C      M 	CALL	#DISP_NUM2
                      2  M  LCALL  DISP_NUM2 
                      3  M  PAGE #( DISP_NUM2 ),
       00E80 1E82     3     PAGE ( DISP_NUM2 / 1024 ),
       00E81 118A     2     CALL ( DISP_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       00E82 1E83     3     PAGE ( $ / 1024 ),
  1252            C        	;RET
  1253 00E83 1467 C        	JMP	STCP_RET
  1254            C        
  1255            C        
  1256 00E84      C        STCP_CHOICE_OGMX:		; 0XC0
  1257            C      M 	MOV	BANK0_TEMP0,_RD
       00E84 040D     1     MOV A, _RD 
       00E85 0060     1     MOV  BANK0_TEMP0 ,A
  1258            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00E86 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00E87 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00E88 1E83     3     PAGE ( $ / 1024 ),
  1259            C      M 	PAGE	#VGA_STR
       00E89 1E85     1     PAGE ( VGA_STR / 1024 ),
  1260 00E8A 1860 C        	MOV	A,@(STYLE_CENTER)
  1261 00E8B 104B C        	CALL	VGA_STR
  1262 00E8C 1828 C        	MOV	A,@(WD_OGM)
  1263 00E8D 11BF C        	CALL	VGA_STRING
  1264 00E8E 1824 C        	MOV	A,@CH_BLANK
  1265 00E8F 104B C        	CALL	VGA_STR
  1266 00E90 0420 C        	MOV	A,BANK0_TEMP0
  1267 00E91 104B C        	CALL	VGA_STR
  1268 00E92 18FF C        	MOV	A,@CH_END
  1269 00E93 104B C        	CALL	VGA_STR
  1270            C      M 	PAGE	#($)
       00E94 1E83     1     PAGE ( $ / 1024 ),
  1271 00E95 1467 C        	JMP	STCP_RET
  1272            C        
  1273 00E96      C        STCP_REC_OGMX:			; 0XC1
  1274            C        	
  1275            C      M 	CALL	#RESET_REC_TIMER
                      2  M  LCALL  RESET_REC_TIMER 
                      3  M  PAGE #( RESET_REC_TIMER ),
       00E96 1E82     3     PAGE ( RESET_REC_TIMER / 1024 ),
       00E97 1000     2     CALL ( RESET_REC_TIMER % 1024 ),
                      3  M  PAGE #( $ ),
       00E98 1E83     3     PAGE ( $ / 1024 ),
  1276            C        	
  1277 00E99 1814 C        	MOV	A,@(WD_OGM_RECORDING)
  1278 00E9A 16A1 C        	JMP	STCP_OGMX
  1279 00E9B      C        STCP_STOPREC_OGMX:		; 0XC2
  1280            C      M 	CRAM	SYS_FG,TIME
       00E9B 09DE     1     BC  SYS_FG , TIME 
  1281            C        	;RET
  1282 00E9C 1467 C        	JMP	STCP_RET
  1283 00E9D      C        STCP_PLAY_OGMX:			; 0XC3
  1284            C      M 	CRAM	SYS_FG,TIME
       00E9D 09DE     1     BC  SYS_FG , TIME 
  1285 00E9E 1815 C        	MOV	A,@(WD_OGM_PLAYBACK)
  1286 00E9F 16A1 C        	JMP	STCP_OGMX
  1287 00EA0      C        STCP_STOPPLAY_OGMX:		; 0XC4
  1288            C        	;RET
  1289 00EA0 1467 C        	JMP	STCP_RET
  1290 00EA1      C        STCP_OGMX:
  1291 00EA1 0060 C        	MOV	BANK0_TEMP0,A
  1292            C      M 	MOV	BANK0_TEMP1,_RD
       00EA2 040D     1     MOV A, _RD 
       00EA3 0061     1     MOV  BANK0_TEMP1 ,A
  1293            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00EA4 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00EA5 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00EA6 1E83     3     PAGE ( $ / 1024 ),
  1294            C        	
  1295            C      M 	PAGE	#VGA_STR
       00EA7 1E85     1     PAGE ( VGA_STR / 1024 ),
  1296 00EA8 1860 C        	MOV	A,@(STYLE_CENTER)
  1297 00EA9 104B C        	CALL	VGA_STR
  1298 00EAA 182A C        	MOV	A,@(WD_OGM_)
  1299 00EAB 11BF C        	CALL	VGA_STRING
  1300 00EAC 0421 C        	MOV	A,BANK0_TEMP1
  1301 00EAD 104B C        	CALL	VGA_STR
  1302 00EAE 1824 C        	MOV	A,@CH_BLANK
  1303 00EAF 104B C        	CALL	VGA_STR
  1304 00EB0 0420 C        	MOV	A,BANK0_TEMP0
  1305 00EB1 11BF C        	CALL	VGA_STRING
  1306 00EB2 18FF C        	MOV	A,@CH_END
  1307 00EB3 104B C        	CALL	VGA_STR
  1308            C      M 	PAGE	#($)
       00EB4 1E83     1     PAGE ( $ / 1024 ),
  1309            C        	;RET
  1310 00EB5 1467 C        	JMP	STCP_RET
  1311            C        
  1312            C        
  1313 00EB6      C        STCP_RECORD:			; 0XC5
  1314            C      M 	MOV	BANK0_TEMP0,_RD
       00EB6 040D     1     MOV A, _RD 
       00EB7 0060     1     MOV  BANK0_TEMP0 ,A
  1315            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00EB8 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00EB9 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00EBA 1E83     3     PAGE ( $ / 1024 ),
  1316            C        	
  1317            C      M 	PAGE	#VGA_STR
       00EBB 1E85     1     PAGE ( VGA_STR / 1024 ),
  1318 00EBC 1860 C        	MOV	A,@(STYLE_CENTER)
  1319 00EBD 104B C        	CALL	VGA_STR
  1320            C      M 	ADDA	BANK0_TEMP0,@WD_MEMO_RECORDING
       00EBE 180B     1     MOV A,@( WD_MEMO_RECORDING )
       00EBF 03A0     1     ADD A, BANK0_TEMP0 
  1321 00EC0 11BF C        	CALL	VGA_STRING
  1322 00EC1 18FF C        	MOV	A,@CH_END
  1323 00EC2 104B C        	CALL	VGA_STR
  1324            C      M 	PAGE	#($)
       00EC3 1E83     1     PAGE ( $ / 1024 ),
  1325            C        	
  1326            C      M 	CALL	#RESET_REC_TIMER
                      2  M  LCALL  RESET_REC_TIMER 
                      3  M  PAGE #( RESET_REC_TIMER ),
       00EC4 1E82     3     PAGE ( RESET_REC_TIMER / 1024 ),
       00EC5 1000     2     CALL ( RESET_REC_TIMER % 1024 ),
                      3  M  PAGE #( $ ),
       00EC6 1E83     3     PAGE ( $ / 1024 ),
  1327            C        	
  1328 00EC7 1467 C        	JMP	STCP_RET
  1329 00EC8      C        STCP_STOPRECORD:		; 0XC6
  1330            C      M 	CRAM	SYS_FG,TIME
       00EC8 09DE     1     BC  SYS_FG , TIME 
  1331            C        	;RET
  1332 00EC9 1467 C        	JMP	STCP_RET
  1333            C        
  1334            C        
  1335 00ECA      C        STCP_PLAYMSG:			; 0XC7
  1336            C        	;SRAM	EVENT,1				; 可以发送电话线状态
  1337 00ECA 040D C        	MOV	A,_RD
  1338            C      M 	JPZ	STCP_PLAYMSG_INFO
       00ECB 0C83     1     JBC  _STATUS , Z 
       00ECC 16FD     1     JMP  STCP_PLAYMSG_INFO ,
  1339            C      M 	MOV	BANK0_TEMP0,_RD
       00ECD 040D     1     MOV A, _RD 
       00ECE 0060     1     MOV  BANK0_TEMP0 ,A
  1340            C      M 	MOV	BANK0_TEMP2,_RC
       00ECF 040C     1     MOV A, _RC 
       00ED0 0062     1     MOV  BANK0_TEMP2 ,A
  1341            C      M 	MOV	_RC,@(CID_ADDR+33)
       00ED1 185D     1     MOV A,@(( CID_ADDR + 33 ))
       00ED2 004C     1     MOV  _RC ,A
  1342            C      M 	MOV	_RD,BANK0_TEMP0
       00ED3 0420     1     MOV A, BANK0_TEMP0 
       00ED4 004D     1     MOV  _RD ,A
  1343            C      M 	MOV	_RC,@(CID_ADDR+0)
       00ED5 183C     1     MOV A,@(( CID_ADDR + 0 ))
       00ED6 004C     1     MOV  _RC ,A
  1344            C      M 	MOV	_RD,@(STYLE_CENTER+0X80)
       00ED7 18E0     1     MOV A,@(( STYLE_CENTER + 128 ))
       00ED8 004D     1     MOV  _RD ,A
  1345            C      M 	CALL	#DISP_CID
                      2  M  LCALL  DISP_CID 
                      3  M  PAGE #( DISP_CID ),
       00ED9 1E81     3     PAGE ( DISP_CID / 1024 ),
       00EDA 1262     2     CALL ( DISP_CID % 1024 ),
                      3  M  PAGE #( $ ),
       00EDB 1E83     3     PAGE ( $ / 1024 ),
  1346 00EDC      C        STCP_PLAYMSG_1:
  1347            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       00EDC 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       00EDD 088B     2     BC  _RB , 2 
  1348            C      M 	MOV	_RC,BANK0_TEMP2
       00EDE 0422     1     MOV A, BANK0_TEMP2 
       00EDF 004C     1     MOV  _RC ,A
  1349 00EE0 1824 C        	MOV	A,@WD_PLAY
  1350 00EE1 16E6 C        	JMP	STCP_MSG
  1351 00EE2      C        STCP_PAUSEMSG:			; 0XC8
  1352 00EE2 1826 C        	MOV	A,@WD_PAUSE
  1353 00EE3 16E6 C        	JMP	STCP_MSG
  1354 00EE4      C        STCP_STOPMSG:			; 0XC9
  1355 00EE4 1825 C        	MOV	A,@WD_STOP
  1356 00EE5 16E6 C        	JMP	STCP_MSG
  1357 00EE6      C        STCP_MSG:
  1358 00EE6 0061 C        	MOV	BANK0_TEMP1,A
  1359            C      M 	MOV	BANK0_TEMP0,_RD
       00EE7 040D     1     MOV A, _RD 
       00EE8 0060     1     MOV  BANK0_TEMP0 ,A
  1360            C      M 	PAGE	#VGA_STR
       00EE9 1E85     1     PAGE ( VGA_STR / 1024 ),
  1361 00EEA 1084 C        	CALL	CLR_STR
  1362 00EEB 1860 C        	MOV	A,@(STYLE_CENTER)
  1363 00EEC 104B C        	CALL	VGA_STR
  1364            C      M 	MOV	GENE_A,BANK0_TEMP0
       00EED 0420     1     MOV A, BANK0_TEMP0 
       00EEE 0056     1     MOV  GENE_A ,A
  1365 00EEF 119D C        	CALL	VGA_HEX_STR
  1366 00EF0 182D C        	MOV	A,@CH_SCH1
  1367 00EF1 104B C        	CALL	VGA_STR
  1368            C      M 	MOV	GENE_A,TOTAL_MSG
       00EF2 042D     1     MOV A, TOTAL_MSG 
       00EF3 0056     1     MOV  GENE_A ,A
  1369 00EF4 119D C        	CALL	VGA_HEX_STR
  1370 00EF5 1824 C        	MOV	A,@CH_BLANK
  1371 00EF6 104B C        	CALL	VGA_STR
  1372 00EF7 0421 C        	MOV	A,BANK0_TEMP1
  1373 00EF8 11BF C        	CALL	VGA_STRING
  1374 00EF9 18FF C        	MOV	A,@CH_END
  1375 00EFA 104B C        	CALL	VGA_STR
  1376            C      M 	PAGE	#($)
       00EFB 1E83     1     PAGE ( $ / 1024 ),
  1377            C        	;RET
  1378 00EFC 1467 C        	JMP	STCP_RET
  1379 00EFD      C        STCP_PLAYMSG_INFO:
  1380            C      M 	MOV	BANK0_TEMP2,_RC
       00EFD 040C     1     MOV A, _RC 
       00EFE 0062     1     MOV  BANK0_TEMP2 ,A
  1381            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00EFF 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00F00 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00F01 1E83     3     PAGE ( $ / 1024 ),
  1382 00F02 16DC C        	JMP	STCP_PLAYMSG_1
  1383            C        
  1384            C        
  1385 00F03      C        STCP_CALL:			; 0XCA
  1386 00F03 040D C        	MOV	A,_RD
  1387            C      M 	JPZ	STCP_CALL_END
       00F04 0C83     1     JBC  _STATUS , Z 
       00F05 1717     1     JMP  STCP_CALL_END ,
  1388            C      M 	MOV	TEMP0,_RD
       00F06 040D     1     MOV A, _RD 
       00F07 0056     1     MOV  TEMP0 ,A
  1389            C      M 	MOV	_RC,@(CID_ADDR+33)
       00F08 185D     1     MOV A,@(( CID_ADDR + 33 ))
       00F09 004C     1     MOV  _RC ,A
  1390            C      M 	MOV	_RD,TEMP0
       00F0A 0416     1     MOV A, TEMP0 
       00F0B 004D     1     MOV  _RD ,A
  1391            C      M 	MOV	_RC,@(CID_ADDR+0)
       00F0C 183C     1     MOV A,@(( CID_ADDR + 0 ))
       00F0D 004C     1     MOV  _RC ,A
  1392            C      M 	MOV	_RD,@(STYLE_CENTER+0X80)
       00F0E 18E0     1     MOV A,@(( STYLE_CENTER + 128 ))
       00F0F 004D     1     MOV  _RD ,A
  1393            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00F10 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00F11 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00F12 1E83     3     PAGE ( $ / 1024 ),
  1394            C      M 	CALL	#DISP_CID
                      2  M  LCALL  DISP_CID 
                      3  M  PAGE #( DISP_CID ),
       00F13 1E81     3     PAGE ( DISP_CID / 1024 ),
       00F14 1262     2     CALL ( DISP_CID % 1024 ),
                      3  M  PAGE #( $ ),
       00F15 1E83     3     PAGE ( $ / 1024 ),
  1395            C        	;RET
  1396 00F16 1467 C        	JMP	STCP_RET
  1397 00F17      C        STCP_CALL_END:
  1398            C      M 	MOV	BANK0_TEMP0,@WD_NO_CALL
       00F17 1800     1     MOV A,@( WD_NO_CALL )
       00F18 0060     1     MOV  BANK0_TEMP0 ,A
  1399 00F19 042B C        	MOV	A,TOTAL_CALL
  1400            C      M 	JPZ	$+3
       00F1A 0C83     1     JBC  _STATUS , Z 
       00F1B 171E     1     JMP ( $ + 3 ),
  1401            C      M 	MOV	BANK0_TEMP0,@WD_END_OF_LIST
       00F1C 1804     1     MOV A,@( WD_END_OF_LIST )
       00F1D 0060     1     MOV  BANK0_TEMP0 ,A
  1402            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00F1E 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00F1F 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00F20 1E83     3     PAGE ( $ / 1024 ),
  1403            C      M 	PAGE	#VGA_STR
       00F21 1E85     1     PAGE ( VGA_STR / 1024 ),
  1404 00F22 1860 C        	MOV	A,@(STYLE_CENTER)
  1405 00F23 104B C        	CALL	VGA_STR
  1406 00F24 0420 C        	MOV	A,BANK0_TEMP0
  1407 00F25 11BF C        	CALL	VGA_STRING
  1408 00F26 18FF C        	MOV	A,@CH_END
  1409 00F27 104B C        	CALL	VGA_STR
  1410            C      M 	PAGE	#($)
       00F28 1E83     1     PAGE ( $ / 1024 ),
  1411            C        	;RET
  1412 00F29 1467 C        	JMP	STCP_RET
  1413            C        
  1414            C        
  1415 00F2A      C        STCP_VOLUME:			; 0XCB
  1416            C      M 	MOV	BANK0_TEMP0,_RD
       00F2A 040D     1     MOV A, _RD 
       00F2B 0060     1     MOV  BANK0_TEMP0 ,A
  1417            C      M 	CLRC
       00F2C 0803     1     BC  _STATUS , C 
  1418 00F2D 06E0 C        	RLC	BANK0_TEMP0
  1419            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       00F2E 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       00F2F 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       00F30 1E83     3     PAGE ( $ / 1024 ),
  1420 00F31 1820 C        	MOV	A,@(STYLE_LEFT)
  1421            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00F32 1E85     3     PAGE ( VGA_STR / 1024 ),
       00F33 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00F34 1E83     3     PAGE ( $ / 1024 ),
  1422 00F35      C        STCP_VOLUME_LOOP:
  1423 00F35 0420 C        	MOV	A,BANK0_TEMP0
  1424            C      M 	JPZ	STCP_VOLUME_END
       00F36 0C83     1     JBC  _STATUS , Z 
       00F37 173E     1     JMP  STCP_VOLUME_END ,
  1425 00F38 1825 C        	MOV	A,@CH_BLACK
  1426            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00F39 1E85     3     PAGE ( VGA_STR / 1024 ),
       00F3A 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00F3B 1E83     3     PAGE ( $ / 1024 ),
  1427 00F3C 01E0 C        	DEC	BANK0_TEMP0
  1428 00F3D 1735 C        	JMP	STCP_VOLUME_LOOP
  1429 00F3E      C        STCP_VOLUME_END:
  1430 00F3E 18FF C        	MOV	A,@CH_END
  1431            C      M 	CALL	#VGA_STR
                      2  M  LCALL  VGA_STR 
                      3  M  PAGE #( VGA_STR ),
       00F3F 1E85     3     PAGE ( VGA_STR / 1024 ),
       00F40 104B     2     CALL ( VGA_STR % 1024 ),
                      3  M  PAGE #( $ ),
       00F41 1E83     3     PAGE ( $ / 1024 ),
  1432            C        	;RET
  1433 00F42 1467 C        	JMP	STCP_RET
  1434            C        
  1435            C        
  1436 00F43      C        STCP_DELETE:			; 0XCC
  1437            C      M 	MOV	BANK0_TEMP0,_RD
       00F43 040D     1     MOV A, _RD 
       00F44 0060     1     MOV  BANK0_TEMP0 ,A
  1438            C      M 	PAGE	#VGA_STR
       00F45 1E85     1     PAGE ( VGA_STR / 1024 ),
  1439 00F46 1084 C        	CALL	CLR_STR
  1440 00F47 1860 C        	MOV	A,@(STYLE_CENTER)
  1441 00F48 104B C        	CALL	VGA_STR
  1442            C      M 	ADDA	BANK0_TEMP0,@(WD_ERASE)
       00F49 1807     1     MOV A,@( WD_ERASE )
       00F4A 03A0     1     ADD A, BANK0_TEMP0 
  1443 00F4B 11BF C        	CALL	VGA_STRING
  1444 00F4C 18FF C        	MOV	A,@CH_END
  1445 00F4D 104B C        	CALL	VGA_STR
  1446            C      M 	PAGE	#($)
       00F4E 1E83     1     PAGE ( $ / 1024 ),
  1447            C        	;RET
  1448 00F4F 1467 C        	JMP	STCP_RET
  1449            C        
  1450 00F50      C        STCP_RING:			; 0XCD
  1451 00F50 040D C        	MOV	A,_RD
  1452 00F51 0020 C        	TBL
  1453 00F52 1755 C        	JMP	STCP_RING_IN
  1454 00F53 1756 C        	JMP	STCP_RING_TIMEOUT
  1455 00F54 1757 C        	JMP	STCP_RING_CONNECT
  1456 00F55      C        STCP_RING_IN:
  1457            C        	;SRAM	EVENT,0
  1458            C        	;RET
  1459 00F55 1467 C        	JMP	STCP_RET
  1460 00F56      C        STCP_RING_TIMEOUT:
  1461            C        	;CRAM	EVENT,0
  1462            C        	;RET
  1463 00F56 1467 C        	JMP	STCP_RET
  1464 00F57      C        STCP_RING_CONNECT:
  1465            C        	;CRAM	EVENT,0
  1466            C        	;RET
  1467 00F57 1467 C        	JMP	STCP_RET
  1468            C        
  1469 00F58      C        STCP_HOOK:
  1470 00F58 040D C        	MOV	A,_RD
  1471            C      M 	JPZ	STCP_HOOK_OFFHOOK
       00F59 0C83     1     JBC  _STATUS , Z 
       00F5A 1761     1     JMP  STCP_HOOK_OFFHOOK ,
  1472 00F5B      C        STCP_HOOK_ONHOOK:				; 挂机
  1473 00F5B 0011 C        	DISI
  1474            C        	;IOR	_IOCF
  1475            C        	;OR	A,@(0XC0)			; 开启FSK,DTMF中断
  1476            C        	;IOW	_IOCF
  1477            C      M 	BANK	1
       00F5C 0B84     1     BS  _RSR , 6 
       00F5D 09C4     1     BC  _RSR , 7 
  1478            C      M 	CRAM	R1_SYS_FG,HOOKSTATUS
       00F5E 0872     1     BC  R1_SYS_FG , HOOKSTATUS 
  1479 00F5F 0010 C        	ENI
  1480 00F60 1467 C        	JMP	STCP_RET
  1481            C        	
  1482            C        	
  1483 00F61      C        STCP_HOOK_OFFHOOK:				; 摘机
  1484 00F61 0011 C        	DISI
  1485 00F62 001F C        	IOR	_IOCF
  1486 00F63 1A3E C        	AND	A,@(0X3E)			; 关闭FSK,DTMF,TCC中断
  1487 00F64 000F C        	IOW	_IOCF
  1488            C        	
  1489            C        	
  1490            C      M 	AND	FSK_FG,@(0XE4)
       00F65 18E4     1     MOV A,@( 228 )
       00F66 02DC     1     AND  FSK_FG ,A
  1491            C        	
  1492            C      M 	BANK	1
       00F67 0B84     1     BS  _RSR , 6 
       00F68 09C4     1     BC  _RSR , 7 
  1493            C      M 	SRAM	R1_SYS_FG,HOOKSTATUS
       00F69 0A72     1     BS  R1_SYS_FG , HOOKSTATUS 
  1494 00F6A 1800 C        	MOV	A,@0
  1495 00F6B 0064 C        	MOV	FSK_BYTE,A
  1496 00F6C 0065 C        	MOV	FSK_SUM,A
  1497 00F6D 0066 C        	MOV	FSK_LENGTH,A
  1498 00F6E 0067 C        	MOV	FSK_COUNT,A
  1499 00F6F 0068 C        	MOV	FSK_TMP,A
  1500 00F70 0069 C        	MOV	FSK_ADR,A
  1501 00F71 006A C        	MOV	DTMF_ADR,A
  1502            C        	
  1503 00F72 0010 C        	ENI
  1504 00F73 1467 C        	JMP	STCP_RET
  1505            C        
  1506            C        ;STCP_TEST:
  1507            C        ;	JPB	EVENT,TEST,STCP_TEST_1
  1508            C        ;	CALL	#MENU_LOCK
  1509            C        ;	SRAM	EVENT,TEST
  1510            C        ;	MOV	A,(STYLE_LEFT)
  1511            C        ;	CALL	#VGA_NUM2
  1512            C        ;STCP_TEST_1:
  1513            C        ;	MOV	BANK0_TEMP0,_RD
  1514            C        ;	SWAPA	BANK0_TEMP0
  1515            C        ;	AND	A,@(0X0F)
  1516            C        ;	CALL	#VGA_NUM2
  1517            C        ;	ANDA	BANK0_TEMP0,@(0X0F)
  1518            C        ;	CALL	#VGA_NUM2
  1519            C        ;	JMP	STCP_RET
  1520            C        
  1521            C        
  1522            C        
  1523            C        ORG	0X1200
  1524 01200      C        STORE_SER:
  1525 01200 0056 C        	MOV	TEMP0,A
  1526            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01201 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01202 004C     1     MOV  _RC ,A
  1527            C      M 	ANDA	_RD,@0X3F
       01203 183F     1     MOV A,@( 63 )
       01204 028D     1     AND A, _RD 
  1528 01205 0059 C        	MOV	TEMP3,A
  1529 01206 054D C        	INC	_RD
  1530            C      M 	ADDA	TEMP3,@(TCP_ADDR+1)
       01207 189A     1     MOV A,@(( TCP_ADDR + 1 ))
       01208 0399     1     ADD A, TEMP3 
  1531 01209 004C C        	MOV	_RC,A
  1532            C      M 	MOV	_RD,TEMP0
       0120A 0416     1     MOV A, TEMP0 
       0120B 004D     1     MOV  _RD ,A
  1533            C        	
  1534 0120C 0012 C        	RET
  1535            C        
  1536 0120D      C        SER_BUF_CHK:
  1537            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0120D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0120E 088B     2     BC  _RB , 2 
  1538            C      M 	BANK	0
       0120F 0984     1     BC  _RSR , 6 
       01210 09C4     1     BC  _RSR , 7 
  1539 01211 0437 C        	MOV	A,TMR_SER
  1540            C      M 	JPNZ	SER_BUF_CHK_RET
       01212 0E83     1     JBS  _STATUS , Z 
       01213 164F     1     JMP  SER_BUF_CHK_RET ,
  1541            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01214 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01215 004C     1     MOV  _RC ,A
  1542 01216 040D C        	MOV	A,_RD
  1543            C      M 	JPZ	SER_BUF_CHK_RET
       01217 0C83     1     JBC  _STATUS , Z 
       01218 164F     1     JMP  SER_BUF_CHK_RET ,
  1544            C      M 	JPB	_RD,7,SER_BUF_CHK_RET
       01219 0DCD     1     JBC  _RD , 7 
       0121A 164F     1     JMP  SER_BUF_CHK_RET ,
  1545 0121B 0000 C        	NOP
  1546 0121C 00D7 C        	CLR	TEMP1
  1547            C        	;MOV	TEMP1,@(TCP_ADDR+1)
  1548 0121D      C        SER_BUF_CHK_LOOP:
  1549 0121D 0557 C        	INC	TEMP1
  1550            C      M 	ADDA	TEMP1,@(TCP_ADDR+0)
       0121E 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       0121F 0397     1     ADD A, TEMP1 
  1551            C        	;MOV	_RC,TEMP1
  1552 01220 004C C        	MOV	_RC,A
  1553            C      M 	SUBA	_RD,@0XFF
       01221 18FF     1     MOV A,@( 255 )
       01222 010D     1     SUB A, _RD 
  1554            C      M 	JPZ	SER_BUF_CHK_1
       01223 0C83     1     JBC  _STATUS , Z 
       01224 162A     1     JMP  SER_BUF_CHK_1 ,
  1555 01225 040D C        	MOV	A,_RD
  1556            C      M 	CALL	#SER_STOR_DATA
                      2  M  LCALL  SER_STOR_DATA 
                      3  M  PAGE #( SER_STOR_DATA ),
       01226 1E80     3     PAGE ( SER_STOR_DATA / 1024 ),
       01227 13E7     2     CALL ( SER_STOR_DATA % 1024 ),
                      3  M  PAGE #( $ ),
       01228 1E84     3     PAGE ( $ / 1024 ),
  1557            C        	;INC	TEMP1
  1558 01229 161D C        	JMP	SER_BUF_CHK_LOOP
  1559            C        	
  1560 0122A      C        SER_BUF_CHK_1:
  1561 0122A 0011 C        	DISI
  1562            C      M 	SRAM	SER_FLAG,3
       0122B 0AFC     1     BS  SER_FLAG , 3 
  1563            C      M 	SRAM	SER_FLAG,6
       0122C 0BBC     1     BS  SER_FLAG , 6 
  1564 0122D 0010 C        	ENI
  1565            C        	
  1566            C      M 	MOV	TEMP0,@(TCP_ADDR+1)
       0122E 189A     1     MOV A,@(( TCP_ADDR + 1 ))
       0122F 0056     1     MOV  TEMP0 ,A
  1567            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01230 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01231 004C     1     MOV  _RC ,A
  1568            C      M 	SUB	_RD,TEMP1
       01232 0417     1     MOV A, TEMP1 
       01233 014D     1     SUB  _RD ,A
  1569 01234 0557 C        	INC	TEMP1
  1570            C      M 	ADD	TEMP1,@(TCP_ADDR+0)
       01235 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01236 03D7     1     ADD  TEMP1 ,A
  1571 01237      C        SER_BUF_CHK_1_LOOP:
  1572            C      M 	SUBA	TEMP1,@(TCP_ADDR+70)
       01237 18DF     1     MOV A,@(( TCP_ADDR + 70 ))
       01238 0117     1     SUB A, TEMP1 
  1573            C      M 	JPZ	SER_BUF_CHK_2
       01239 0C83     1     JBC  _STATUS , Z 
       0123A 1646     1     JMP  SER_BUF_CHK_2 ,
  1574            C      M 	MOV	_RC,TEMP1
       0123B 0417     1     MOV A, TEMP1 
       0123C 004C     1     MOV  _RC ,A
  1575            C      M 	MOV	TEMP2,_RD
       0123D 040D     1     MOV A, _RD 
       0123E 0058     1     MOV  TEMP2 ,A
  1576            C      M 	MOV	_RC,TEMP0
       0123F 0416     1     MOV A, TEMP0 
       01240 004C     1     MOV  _RC ,A
  1577            C      M 	MOV	_RD,TEMP2
       01241 0418     1     MOV A, TEMP2 
       01242 004D     1     MOV  _RD ,A
  1578 01243 0556 C        	INC	TEMP0
  1579 01244 0557 C        	INC	TEMP1
  1580 01245 1637 C        	JMP	SER_BUF_CHK_1_LOOP
  1581 01246      C        SER_BUF_CHK_2:
  1582            C      M 	MOV	_RC,TEMP0
       01246 0416     1     MOV A, TEMP0 
       01247 004C     1     MOV  _RC ,A
  1583            C      M 	MOV	_RD,@0XFF
       01248 18FF     1     MOV A,@( 255 )
       01249 004D     1     MOV  _RD ,A
  1584 0124A 0556 C        	INC	TEMP0
  1585            C      M 	SUBA	TEMP0,@(TCP_ADDR+70)
       0124B 18DF     1     MOV A,@(( TCP_ADDR + 70 ))
       0124C 0116     1     SUB A, TEMP0 
  1586            C      M 	JPNZ	SER_BUF_CHK_2
       0124D 0E83     1     JBS  _STATUS , Z 
       0124E 1646     1     JMP  SER_BUF_CHK_2 ,
  1587            C        
  1588 0124F      C        SER_BUF_CHK_RET:
  1589 0124F 0012 C        	RET
  1590            C        
  1591            C        
  1592 01250      C        INIT_SER:
  1593            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       01250 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01251 088B     2     BC  _RB , 2 
  1594            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01252 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01253 004C     1     MOV  _RC ,A
  1595 01254 00CD C        	CLR	_RD
  1596            C      M 	CLRCIDRAM	@(TCP_ADDR+1),@64,@0XFF
                      2  M  MOV  TEMP0 ,@(( TCP_ADDR + 1 ))
       01255 189A     2     MOV A,@(( TCP_ADDR + 1 ))
       01256 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 64 )
       01257 1840     2     MOV A,@( 64 )
       01258 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( 255 )
       01259 18FF     2     MOV A,@( 255 )
       0125A 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CLR_CIDRAM ),
       0125B 1178     2     CALL ( CLR_CIDRAM % 1024 ),
  1597 0125C 0012 C        	RET
  1598            C        
  1599            C        /***************************************
  1600            C        拨号程序
  1601            C        DIAL_CTRL:
  1602            C        .7	0/1	DISABLE/ENABLE
  1603            C        .6	0/1
  1604            C        
  1605            C        .4~.3	0~16	0: START 1~16:拨号的位数
  1606            C        ***************************************/
  1607 0125D      C        TAB_TONE1:
  1608 0125D 0020 C        	TBL
  1609 0125E 1C77 C        	RETL	0X77	; 0
  1610 0125F 1CA0 C        	RETL	0XA0	; 1
  1611 01260 1CA0 C        	RETL	0XA0	; 2
  1612 01261 1CA0 C        	RETL	0XA0	; 3
  1613 01262 1C91 C        	RETL	0X91	; 4
  1614 01263 1C91 C        	RETL	0X91	; 5
  1615 01264 1C91 C        	RETL	0X91	; 6
  1616 01265 1C83 C        	RETL	0X83	; 7
  1617 01266 1C83 C        	RETL	0X83	; 8
  1618 01267 1C83 C        	RETL	0X83	; 9
  1619 01268 1C77 C        	RETL	0X77	; *
  1620 01269 1C77 C        	RETL	0X77	; #
  1621 0126A 1CA0 C        	RETL	0XA0	; A
  1622 0126B 1C91 C        	RETL	0X91	; B
  1623 0126C 1C83 C        	RETL	0X83	; C
  1624 0126D 1C77 C        	RETL	0X77	; D
  1625            C        
  1626 0126E      C        TAB_TONE2:
  1627 0126E 0020 C        	TBL
  1628 0126F 1C54 C        	RETL	0X54	; 0
  1629 01270 1C5D C        	RETL	0X5D	; 1
  1630 01271 1C54 C        	RETL	0X54	; 2
  1631 01272 1C4C C        	RETL	0X4C	; 3
  1632 01273 1C5D C        	RETL	0X5D	; 4
  1633 01274 1C54 C        	RETL	0X54	; 5
  1634 01275 1C4C C        	RETL	0X4C	; 6
  1635 01276 1C5D C        	RETL	0X5D	; 7
  1636 01277 1C54 C        	RETL	0X54	; 8
  1637 01278 1C4C C        	RETL	0X4C	; 9
  1638 01279 1C5D C        	RETL	0X5D	; *
  1639 0127A 1C4C C        	RETL	0X4C	; #
  1640 0127B 1C44 C        	RETL	0X44	; A
  1641 0127C 1C44 C        	RETL	0X44	; B
  1642 0127D 1C44 C        	RETL	0X44	; C
  1643 0127E 1C44 C        	RETL	0X44	; D
  1644            C        
  1645            C        
  1646            C        
  1647 0127F      C        DIAL_NUM:
  1648            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0127F 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01280 088B     2     BC  _RB , 2 
  1649            C      M 	PAGEIO	0
                      2  M  CRAM  _STATUS , 7 
       01281 09C3     2     BC  _STATUS , 7 
  1650            C      M 	BANK	0
       01282 0984     1     BC  _RSR , 6 
       01283 09C4     1     BC  _RSR , 7 
  1651            C      M 	MOV	_RC,@DIAL_ADDR
       01284 1884     1     MOV A,@( DIAL_ADDR )
       01285 004C     1     MOV  _RC ,A
  1652            C      M 	JPNB	_RD,7,DIAL_NUM_RET
       01286 0FCD     1     JBS  _RD , 7 
       01287 16D3     1     JMP  DIAL_NUM_RET ,
  1653            C      M 	JPNB	_RD,5,DIAL_NUM_START
       01288 0F4D     1     JBS  _RD , 5 
       01289 168D     1     JMP  DIAL_NUM_START ,
  1654            C      M 	JPB	_RD,6,DIAL_NUM_DIAL
       0128A 0D8D     1     JBC  _RD , 6 
       0128B 16B9     1     JMP  DIAL_NUM_DIAL ,
  1655 0128C 16A0 C        	JMP	DIAL_NUM_PAUSE
  1656            C        
  1657 0128D      C        DIAL_NUM_START:
  1658            C      M 	SRAM	_RD,5
       0128D 0B4D     1     BS  _RD , 5 
  1659            C      M 	CALL	#MENU_LOCK
                      2  M  LCALL  MENU_LOCK 
                      3  M  PAGE #( MENU_LOCK ),
       0128E 1E82     3     PAGE ( MENU_LOCK / 1024 ),
       0128F 100D     2     CALL ( MENU_LOCK % 1024 ),
                      3  M  PAGE #( $ ),
       01290 1E84     3     PAGE ( $ / 1024 ),
  1660 01291 1840 C        	MOV	A,@STYLE_RIGHT			; 右对齐
  1661            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       01292 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       01293 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       01294 1E84     3     PAGE ( $ / 1024 ),
  1662            C      M 	MOV	TMR_DELAY,@250			; 延时1S
       01295 18FA     1     MOV A,@( 250 )
       01296 0075     1     MOV  TMR_DELAY ,A
  1663            C        	
  1664            C      M 	PAGE	#VGA_STR
       01297 1E85     1     PAGE ( VGA_STR / 1024 ),
  1665 01298 1860 C        	MOV	A,@STYLE_CENTER
  1666 01299 104B C        	CALL	VGA_STR
  1667 0129A 1805 C        	MOV	A,@(WD_PLS_LIFT_HANDSET)
  1668 0129B 11BF C        	CALL	VGA_STRING
  1669 0129C 18FF C        	MOV	A,@CH_END
  1670 0129D 104B C        	CALL	VGA_STR
  1671            C      M 	PAGE	#($)
       0129E 1E84     1     PAGE ( $ / 1024 ),
  1672 0129F 16D3 C        	JMP	DIAL_NUM_RET
  1673            C        
  1674 012A0      C        DIAL_NUM_PAUSE:
  1675 012A0 0435 C        	MOV	A,TMR_DELAY
  1676            C      M 	JPNZ	DIAL_NUM_RET
       012A1 0E83     1     JBS  _STATUS , Z 
       012A2 16D3     1     JMP  DIAL_NUM_RET ,
  1677            C      M 	SRAM	_RD,6
       012A3 0B8D     1     BS  _RD , 6 
  1678            C        	
  1679 012A4 12D4 C        	CALL	CHK_DIALNUM
  1680 012A5 0056 C        	MOV	TEMP0,A
  1681            C      M 	SUBA	TEMP0,@0X0F
       012A6 180F     1     MOV A,@( 15 )
       012A7 0116     1     SUB A, TEMP0 
  1682            C      M 	JPZ	DIAL_NUM_STOP
       012A8 0C83     1     JBC  _STATUS , Z 
       012A9 16CB     1     JMP  DIAL_NUM_STOP ,
  1683            C        	
  1684 012AA 0416 C        	MOV	A,TEMP0
  1685 012AB 125D C        	CALL	TAB_TONE1
  1686 012AC 000D C        	IOW	_IOCD
  1687 012AD 0416 C        	MOV	A,TEMP0
  1688 012AE 126E C        	CALL	TAB_TONE2
  1689 012AF 000E C        	IOW	_IOCE
  1690            C      M 	SRAM	_STATUS,5			; OPEN TONE1、TONE2
       012B0 0B43     1     BS  _STATUS , 5 
  1691            C      M 	SRAM	_STATUS,6
       012B1 0B83     1     BS  _STATUS , 6 
  1692            C      M 	MOV	TMR_DELAY,@25			; 延时100MS
       012B2 1819     1     MOV A,@( 25 )
       012B3 0075     1     MOV  TMR_DELAY ,A
  1693 012B4 0416 C        	MOV	A,TEMP0
  1694            C        	;JPNZ	$+2
  1695            C        	;MOV	A,@0X80
  1696            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       012B5 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       012B6 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       012B7 1E84     3     PAGE ( $ / 1024 ),
  1697            C        	
  1698 012B8 16D3 C        	JMP	DIAL_NUM_RET
  1699 012B9      C        DIAL_NUM_DIAL:
  1700 012B9 0435 C        	MOV	A,TMR_DELAY
  1701            C      M 	JPNZ	DIAL_NUM_RET
       012BA 0E83     1     JBS  _STATUS , Z 
       012BB 16D3     1     JMP  DIAL_NUM_RET ,
  1702            C      M 	CRAM	_STATUS,5
       012BC 0943     1     BC  _STATUS , 5 
  1703            C      M 	CRAM	_STATUS,6			; CLOSE TONE1、TONE2
       012BD 0983     1     BC  _STATUS , 6 
  1704            C      M 	CRAM	_RD,6
       012BE 098D     1     BC  _RD , 6 
  1705            C        	;MOV	TEMP0,_RD
  1706 012BF 054D C        	INC	_RD
  1707            C      M 	JPNB	_RD,5,DIAL_NUM_STOP		; 超过，停止
       012C0 0F4D     1     JBS  _RD , 5 
       012C1 16CB     1     JMP  DIAL_NUM_STOP ,
  1708            C        	;MOV	TEMP0,_RD
  1709            C        	
  1710 012C2 12D4 C        	CALL	CHK_DIALNUM
  1711 012C3 0056 C        	MOV	TEMP0,A
  1712            C        	
  1713            C      M 	SUBA	TEMP0,@0X0F
       012C4 180F     1     MOV A,@( 15 )
       012C5 0116     1     SUB A, TEMP0 
  1714            C      M 	JPZ	DIAL_NUM_STOP			; 下一位的值==0XF，停止
       012C6 0C83     1     JBC  _STATUS , Z 
       012C7 16CB     1     JMP  DIAL_NUM_STOP ,
  1715            C      M 	MOV	TMR_DELAY,@25
       012C8 1819     1     MOV A,@( 25 )
       012C9 0075     1     MOV  TMR_DELAY ,A
  1716 012CA 16D3 C        	JMP	DIAL_NUM_RET
  1717            C        
  1718 012CB      C        DIAL_NUM_STOP:
  1719            C      M 	MOV	_RC,@DIAL_ADDR
       012CB 1884     1     MOV A,@( DIAL_ADDR )
       012CC 004C     1     MOV  _RC ,A
  1720 012CD 00CD C        	CLR	_RD
  1721 012CE 18FF C        	MOV	A,@CH_END
  1722            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       012CF 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       012D0 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       012D1 1E84     3     PAGE ( $ / 1024 ),
  1723 012D2 16D3 C        	JMP	DIAL_NUM_RET
  1724            C        
  1725 012D3      C        DIAL_NUM_RET:
  1726 012D3 0012 C        	RET
  1727            C        
  1728 012D4      C        CHK_DIALNUM:
  1729            C      M 	MOV	TEMP0,_RD
       012D4 040D     1     MOV A, _RD 
       012D5 0056     1     MOV  TEMP0 ,A
  1730            C      M 	CLRC
       012D6 0803     1     BC  _STATUS , C 
  1731 012D7 0616 C        	RRCA	TEMP0
  1732 012D8 1A0F C        	AND	A,@0X0F
  1733 012D9 1F85 C        	ADD	A,@(DIAL_ADDR+1)
  1734 012DA 004C C        	MOV	_RC,A
  1735            C        	
  1736            C      M 	JPB	TEMP0,0,$+3
       012DB 0C16     1     JBC  TEMP0 , 0 
       012DC 16DF     1     JMP ( $ + 3 ),
  1737 012DD 070D C        	SWAPA	_RD
  1738 012DE 16E0 C        	JMP	$+2
  1739 012DF 040D C        	MOV	A,_RD
  1740 012E0 1A0F C        	AND	A,@0X0F
  1741 012E1 0012 C        	RET
  1742            C        
  1743            C        
  1744            C        
  1745 012E2      C        STORE_DIALNUM:
  1746 012E2 0056 C        	MOV	TEMP0,A
  1747            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       012E3 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       012E4 088B     2     BC  _RB , 2 
  1748            C      M 	MOV	_RC,@(DIAL_ADDR)
       012E5 1884     1     MOV A,@( DIAL_ADDR )
       012E6 004C     1     MOV  _RC ,A
  1749            C      M 	JPB	_RD,7,STORE_DIALNUM_RET		; 有号码正在拨，不能存
       012E7 0DCD     1     JBC  _RD , 7 
       012E8 170D     1     JMP  STORE_DIALNUM_RET ,
  1750            C        	;JPB	_RD,6,$+3
  1751            C        	;MOV	_RD,@0X40
  1752            C      M 	SUBA	TEMP0,@CH_END
       012E9 18FF     1     MOV A,@( CH_END )
       012EA 0116     1     SUB A, TEMP0 
  1753            C      M 	JPZ	STORE_DIALNUM_END
       012EB 0C83     1     JBC  _STATUS , Z 
       012EC 1706     1     JMP  STORE_DIALNUM_END ,
  1754            C      M 	SUBA	TEMP0,@NUM_A
       012ED 180A     1     MOV A,@( NUM_A )
       012EE 0116     1     SUB A, TEMP0 
  1755            C      M 	JPC	STORE_DIALNUM_END
       012EF 0C03     1     JBC  _STATUS , C 
       012F0 1706     1     JMP  STORE_DIALNUM_END ,
  1756 012F1      C        STORE_DIALNUM_0:
  1757            C      M 	MOV	TEMP1,_RD
       012F1 040D     1     MOV A, _RD 
       012F2 0057     1     MOV  TEMP1 ,A
  1758 012F3 054D C        	INC	_RD
  1759            C      M 	CLRC
       012F4 0803     1     BC  _STATUS , C 
  1760 012F5 0617 C        	RRCA	TEMP1
  1761 012F6 1F85 C        	ADD	A,@(DIAL_ADDR+1)
  1762 012F7 004C C        	MOV	_RC,A
  1763            C      M 	JPB	TEMP1,0,STORE_DIALNUM_1
       012F8 0C17     1     JBC  TEMP1 , 0 
       012F9 1700     1     JMP  STORE_DIALNUM_1 ,
  1764            C      M 	AND	_RD,@0X0F
       012FA 180F     1     MOV A,@( 15 )
       012FB 02CD     1     AND  _RD ,A
  1765 012FC 0716 C        	SWAPA	TEMP0
  1766 012FD 1AF0 C        	AND	A,@0XF0
  1767 012FE 024D C        	OR	_RD,A
  1768 012FF 1705 C        	JMP	STORE_DIALNUM_2
  1769 01300      C        STORE_DIALNUM_1:
  1770            C      M 	AND	_RD,@0XF0
       01300 18F0     1     MOV A,@( 240 )
       01301 02CD     1     AND  _RD ,A
  1771            C      M 	ANDA	TEMP0,@0X0F
       01302 180F     1     MOV A,@( 15 )
       01303 0296     1     AND A, TEMP0 
  1772 01304 024D C        	OR	_RD,A
  1773 01305      C        STORE_DIALNUM_2:
  1774 01305 170D C        	JMP	STORE_DIALNUM_RET
  1775 01306      C        STORE_DIALNUM_END:
  1776            C      M 	MOV	TEMP0,@0X0F
       01306 180F     1     MOV A,@( 15 )
       01307 0056     1     MOV  TEMP0 ,A
  1777 01308 12F1 C        	CALL	STORE_DIALNUM_0
  1778            C      M 	MOV	_RC,@DIAL_ADDR
       01309 1884     1     MOV A,@( DIAL_ADDR )
       0130A 004C     1     MOV  _RC ,A
  1779            C      M 	MOV	_RD,@0X80			; 准备拨号
       0130B 1880     1     MOV A,@( 128 )
       0130C 004D     1     MOV  _RD ,A
  1780 0130D      C        STORE_DIALNUM_RET:
  1781 0130D 0012 C        	RET
  1782            C        
  1783            C        
  1784 0130E      C        INIT_DIAL:
  1785            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0130E 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0130F 088B     2     BC  _RB , 2 
  1786            C      M 	CLRCIDRAM	@(DIAL_ADDR+1),@19,@0XFF
                      2  M  MOV  TEMP0 ,@(( DIAL_ADDR + 1 ))
       01310 1885     2     MOV A,@(( DIAL_ADDR + 1 ))
       01311 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 19 )
       01312 1813     2     MOV A,@( 19 )
       01313 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( 255 )
       01314 18FF     2     MOV A,@( 255 )
       01315 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CLR_CIDRAM ),
       01316 1178     2     CALL ( CLR_CIDRAM % 1024 ),
  1787            C      M 	MOV	_RC,@(DIAL_ADDR+0)
       01317 1884     1     MOV A,@(( DIAL_ADDR + 0 ))
       01318 004C     1     MOV  _RC ,A
  1788 01319 00CD C        	CLR	_RD
  1789 0131A 0012 C        	RET
  1790            C        
  1791            C        
  1792            C        
  1793 0131B      C        DEL_FINISHED:				; 删除完成的命令
  1794            C      M 	BANK	0
       0131B 0984     1     BC  _RSR , 6 
       0131C 09C4     1     BC  _RSR , 7 
  1795            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0131D 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0131E 088B     2     BC  _RB , 2 
  1796 0131F 0011 C        	DISI
  1797            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01320 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01321 004C     1     MOV  _RC ,A
  1798            C      M 	JPNB	_RD,7,DEL_FINISHED_END
       01322 0FCD     1     JBS  _RD , 7 
       01323 1751     1     JMP  DEL_FINISHED_END ,
  1799            C      M 	ANDA	_RD,@0X7F
       01324 187F     1     MOV A,@( 127 )
       01325 028D     1     AND A, _RD 
  1800            C      M 	JPZ	DEL_FINISHED_END
       01326 0C83     1     JBC  _STATUS , Z 
       01327 1751     1     JMP  DEL_FINISHED_END ,
  1801 01328 00D0 C        	CLR	INT_TEMP0
  1802 01329      C        DEL_FINISHED_CHK_LOOP:
  1803 01329 0550 C        	INC	INT_TEMP0
  1804            C      M 	ADDA	INT_TEMP0,@(TCP_ADDR+0)
       0132A 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       0132B 0390     1     ADD A, INT_TEMP0 
  1805 0132C 004C C        	MOV	_RC,A
  1806            C      M 	SUBA	_RD,@0XFF
       0132D 18FF     1     MOV A,@( 255 )
       0132E 010D     1     SUB A, _RD 
  1807            C      M 	JPNZ	DEL_FINISHED_CHK_LOOP
       0132F 0E83     1     JBS  _STATUS , Z 
       01330 1729     1     JMP  DEL_FINISHED_CHK_LOOP ,
  1808            C        	
  1809            C      M 	MOV	_RC,@(TCP_ADDR+0)
       01331 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01332 004C     1     MOV  _RC ,A
  1810            C      M 	SUB	_RD,INT_TEMP0
       01333 0410     1     MOV A, INT_TEMP0 
       01334 014D     1     SUB  _RD ,A
  1811            C      M 	ANDA	_RD,@0X7F
       01335 187F     1     MOV A,@( 127 )
       01336 028D     1     AND A, _RD 
  1812 01337 0051 C        	MOV	INT_TEMP1,A
  1813 01338 00D2 C        	CLR	INT_TEMP2
  1814 01339      C        DEL_FINISHED_DEL_LOOP:
  1815            C      M 	SUBA	INT_TEMP2,INT_TEMP1
       01339 0411     1     MOV A, INT_TEMP1 
       0133A 0112     1     SUB A, INT_TEMP2 
  1816            C      M 	JPZ	DEL_FINISHED_DEL_END
       0133B 0C83     1     JBC  _STATUS , Z 
       0133C 174A     1     JMP  DEL_FINISHED_DEL_END ,
  1817 0133D 0552 C        	INC	INT_TEMP2
  1818            C      M 	ADDA	INT_TEMP2,INT_TEMP0
       0133E 0410     1     MOV A, INT_TEMP0 
       0133F 0392     1     ADD A, INT_TEMP2 
  1819 01340 1F99 C        	ADD	A,@(TCP_ADDR+0)
  1820 01341 004C C        	MOV	_RC,A
  1821            C      M 	MOV	INT_TEMP3,_RD
       01342 040D     1     MOV A, _RD 
       01343 0053     1     MOV  INT_TEMP3 ,A
  1822            C      M 	ADDA	INT_TEMP3,@(TCP_ADDR+0)
       01344 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       01345 0393     1     ADD A, INT_TEMP3 
  1823 01346 004C C        	MOV	_RC,A
  1824            C      M 	MOV	_RD,INT_TEMP3
       01347 0413     1     MOV A, INT_TEMP3 
       01348 004D     1     MOV  _RD ,A
  1825 01349 1739 C        	JMP	DEL_FINISHED_DEL_LOOP
  1826            C        
  1827 0134A      C        DEL_FINISHED_DEL_END:
  1828            C      M 	MOV	_RC,@(TCP_ADDR+0)
       0134A 1899     1     MOV A,@(( TCP_ADDR + 0 ))
       0134B 004C     1     MOV  _RC ,A
  1829            C      M 	ANDA	_RD,@0X7F
       0134C 187F     1     MOV A,@( 127 )
       0134D 028D     1     AND A, _RD 
  1830            C      M 	JPNZ	DEL_FINISHED_END
       0134E 0E83     1     JBS  _STATUS , Z 
       0134F 1751     1     JMP  DEL_FINISHED_END ,
  1831 01350 00CD C        	CLR	_RD
  1832            C        
  1833 01351      C        DEL_FINISHED_END:
  1834 01351 0010 C        	ENI
  1835 01352 0012 C        	RET
  1836            C        
  1837            C        
  1838 01353      C        SEND_DESIRE:
  1839            C        	;BANK	1
  1840            C        	;CRAM	AUDIO_STATUS,4
  1841 01353      C        SEND_DESIRE_LOOP:
  1842            C      M 	BANK	0
       01353 0984     1     BC  _RSR , 6 
       01354 09C4     1     BC  _RSR , 7 
  1843            C      M 	JPB	SER_FLAG,7,SEND_BUSY
       01355 0DFC     1     JBC  SER_FLAG , 7 
       01356 175F     1     JMP  SEND_BUSY ,
  1844            C      M 	JPB	SER_FLAG,4,SEND_BUSY
       01357 0D3C     1     JBC  SER_FLAG , 4 
       01358 175F     1     JMP  SEND_BUSY ,
  1845            C      M 	SIO	_R7,P_DAT
       01359 0017     1     IOR  _R7 ,
                      2  M  SA  P_DAT 
       0135A 1908     2     OR A,@( 8 )
       0135B 0007     1     IOW  _R7 ,
  1846            C      M 	JPNB	_R7,P_DAT,SEND_RECEIVE_INIT
       0135C 0EC7     1     JBS  _R7 , P_DAT 
       0135D 1763     1     JMP  SEND_RECEIVE_INIT ,
  1847            C        	;BANK	1
  1848            C        	;SWAPA	AUDIO_STATUS
  1849            C        	;AND	A,@0X01
  1850 0135E 0012 C        	RET
  1851 0135F      C        SEND_BUSY:
  1852            C        	;BANK	1
  1853            C        	;SRAM	AUDIO_STATUS,4
  1854            C      M 	CALL	#STCP_CHK
                      2  M  LCALL  STCP_CHK 
                      3  M  PAGE #( STCP_CHK ),
       0135F 1E83     3     PAGE ( STCP_CHK / 1024 ),
       01360 1000     2     CALL ( STCP_CHK % 1024 ),
                      3  M  PAGE #( $ ),
       01361 1E84     3     PAGE ( $ / 1024 ),
  1855 01362 1753 C        	JMP	SEND_DESIRE_LOOP
  1856            C        
  1857 01363      C        SEND_RECEIVE_INIT:
  1858            C      M 	BANK	1
       01363 0B84     1     BS  _RSR , 6 
       01364 09C4     1     BC  _RSR , 7 
  1859            C      M 	MOV	TMR_PROTOCOL,@16
       01365 1810     1     MOV A,@( 16 )
       01366 0070     1     MOV  TMR_PROTOCOL ,A
  1860            C        	
  1861 01367      C        SEND_RECEIVE_INIT_LOOP:
  1862            C      M 	BANK	1
       01367 0B84     1     BS  _RSR , 6 
       01368 09C4     1     BC  _RSR , 7 
  1863 01369 0430 C        	MOV	A,TMR_PROTOCOL
  1864            C      M 	JPZ	SEND_DESIRE_LOOP
       0136A 0C83     1     JBC  _STATUS , Z 
       0136B 1753     1     JMP  SEND_DESIRE_LOOP ,
  1865            C      M 	JPB	_R7,P_WR,SEND_RECEIVE_INIT_LOOP
       0136C 0D07     1     JBC  _R7 , P_WR 
       0136D 1767     1     JMP  SEND_RECEIVE_INIT_LOOP ,
  1866 0136E 175F C        	JMP	SEND_BUSY
  1867            C        
  1868 0136F      C        CIDNUM_VERFY:
  1869 0136F 0057 C        	MOV	TEMP1,A
  1870 01370 1D9F C        	SUB	A,@(0X9F)
  1871            C      M 	JPNC	CIDNUM_VERFY_2
       01371 0E03     1     JBS  _STATUS , C 
       01372 1786     1     JMP  CIDNUM_VERFY_2 ,
  1872            C      M 	XORA	_RD,TEMP1
       01373 0417     1     MOV A, TEMP1 
       01374 030D     1     XOR A, _RD 
  1873 01375 0058 C        	MOV	TEMP2,A
  1874 01376 1AF0 C        	AND	A,@(0XF0)
  1875            C      M 	JPNZ	CIDNUM_VERFY_1
       01377 0E83     1     JBS  _STATUS , Z 
       01378 1785     1     JMP  CIDNUM_VERFY_1 ,
  1876 01379 0556 C        	INC	TEMP0
  1877            C      M 	ANDA	TEMP1,@(0X0F)
       0137A 180F     1     MOV A,@( 15 )
       0137B 0297     1     AND A, TEMP1 
  1878 0137C 1D09 C        	SUB	A,@(0X09)
  1879            C      M 	JPNC	CIDNUM_VERFY_2
       0137D 0E03     1     JBS  _STATUS , C 
       0137E 1786     1     JMP  CIDNUM_VERFY_2 ,
  1880            C      M 	ANDA	TEMP2,@(0X0F)
       0137F 180F     1     MOV A,@( 15 )
       01380 0298     1     AND A, TEMP2 
  1881            C      M 	JPNZ	CIDNUM_VERFY_1
       01381 0E83     1     JBS  _STATUS , Z 
       01382 1785     1     JMP  CIDNUM_VERFY_1 ,
  1882 01383 0556 C        	INC	TEMP0
  1883 01384 0012 C        	RET
  1884 01385      C        CIDNUM_VERFY_1:
  1885 01385 00D6 C        	CLR	TEMP0
  1886 01386      C        CIDNUM_VERFY_2:
  1887            C      M 	SUBA	TEMP0,TEMP0
       01386 0416     1     MOV A, TEMP0 
       01387 0116     1     SUB A, TEMP0 
  1888 01388 0012 C        	RET
  1889            C        
  1890 01389      C        CIDNUM_MODIFY:				; 将与区域码相同的地方去掉，只修改CIDBANK 1的62~70部分
  1891            C      M 	BANK	0
       01389 0984     1     BC  _RSR , 6 
       0138A 09C4     1     BC  _RSR , 7 
  1892            C      M 	CIDBANK	1
                      2  M  SRAM  _RB , 0 
       0138B 0A0B     2     BS  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0138C 088B     2     BC  _RB , 2 
  1893            C      M 	MOV	TEMP0,@(0)
       0138D 1800     1     MOV A,@( 0 )
       0138E 0056     1     MOV  TEMP0 ,A
  1894            C      M 	MOV	_RC,@(CID_ADDR+3)
       0138F 183F     1     MOV A,@(( CID_ADDR + 3 ))
       01390 004C     1     MOV  _RC ,A
  1895 01391 0430 C        	MOV	A,LCALL12
  1896 01392 136F C        	CALL	CIDNUM_VERFY
  1897            C      M 	JPZ	CIDNUM_MODIFY_SHIFT
       01393 0C83     1     JBC  _STATUS , Z 
       01394 179D     1     JMP  CIDNUM_MODIFY_SHIFT ,
  1898 01395 054C C        	INC	_RC
  1899 01396 0431 C        	MOV	A,LCALL34
  1900 01397 136F C        	CALL	CIDNUM_VERFY
  1901            C      M 	JPZ	CIDNUM_MODIFY_SHIFT
       01398 0C83     1     JBC  _STATUS , Z 
       01399 179D     1     JMP  CIDNUM_MODIFY_SHIFT ,
  1902 0139A 054C C        	INC	_RC
  1903 0139B 0432 C        	MOV	A,LCALL5
  1904 0139C 179D C        	JMP	CIDNUM_MODIFY_SHIFT
  1905            C        
  1906            C        ;	BANK	0
  1907            C        ;	CIDBANK	1
  1908            C        ;	MOV	TEMP0,@(0)
  1909            C        ;	MOV	_RC,@(CID_ADDR+3)
  1910            C        ;	XORA	_RD,LCALL12
  1911            C        ;	MOV	TEMP1,A
  1912            C        ;	AND	A,@(0XF0)
  1913            C        ;	JPNZ	CIDNUM_MODIFY_SHIFT
  1914            C        ;	INC	TEMP0
  1915            C        ;	ANDA	TEMP1,@(0X0F)
  1916            C        ;	JPNZ	CIDNUM_MODIFY_SHIFT
  1917            C        ;	INC	TEMP0
  1918            C        ;	INC	_RC
  1919            C        ;	XORA	_RD,LCALL34
  1920            C        ;	MOV	TEMP1,A
  1921            C        ;	AND	A,@(0XF0)
  1922            C        ;	JPNZ	CIDNUM_MODIFY_SHIFT
  1923            C        ;	INC	TEMP0
  1924            C        ;	ANDA	TEMP1,@(0X0F)
  1925            C        ;	JPNZ	CIDNUM_MODIFY_SHIFT
  1926            C        ;	INC	TEMP0
  1927            C        ;	INC	_RC
  1928            C        ;	XORA	_RD,LCALL5
  1929            C        ;	AND	A,@(0XF0)
  1930            C        ;	JPNZ	CIDNUM_MODIFY_SHIFT
  1931            C        ;	INC	TEMP0
  1932 0139D      C        CIDNUM_MODIFY_SHIFT:
  1933 0139D 0416 C        	MOV	A,TEMP0
  1934            C      M 	JPZ	CIDNUM_MODIFY_RET
       0139E 0C83     1     JBC  _STATUS , Z 
       0139F 17CD     1     JMP  CIDNUM_MODIFY_RET ,
  1935            C      M 	MOV	_RC,@(CID_ADDR+2)
       013A0 183E     1     MOV A,@(( CID_ADDR + 2 ))
       013A1 004C     1     MOV  _RC ,A
  1936            C      M 	SUB	_RD,TEMP0
       013A2 0416     1     MOV A, TEMP0 
       013A3 014D     1     SUB  _RD ,A
  1937            C      M 	MOV	TEMP1,@(CID_ADDR+3)
       013A4 183F     1     MOV A,@(( CID_ADDR + 3 ))
       013A5 0057     1     MOV  TEMP1 ,A
  1938            C        
  1939 013A6      C        CIDNUM_MODIFY_SHIFT_LOOP:
  1940            C      M 	CLRC
       013A6 0803     1     BC  _STATUS , C 
  1941 013A7 0616 C        	RRCA	TEMP0
  1942 013A8 0397 C        	ADD	A,TEMP1
  1943 013A9 004C C        	MOV	_RC,A
  1944            C      M 	SUBA	_RC,@(CID_ADDR+11)
       013AA 1847     1     MOV A,@(( CID_ADDR + 11 ))
       013AB 010C     1     SUB A, _RC 
  1945            C      M 	JPC	CIDNUM_MODIFY_SHIFT_2
       013AC 0C03     1     JBC  _STATUS , C 
       013AD 17C3     1     JMP  CIDNUM_MODIFY_SHIFT_2 ,
  1946            C      M 	MOV	TEMP2,_RD
       013AE 040D     1     MOV A, _RD 
       013AF 0058     1     MOV  TEMP2 ,A
  1947            C      M 	JPNB	TEMP0,0,CIDNUM_MODIFY_SHIFT_1
       013B0 0E16     1     JBS  TEMP0 , 0 
       013B1 17BD     1     JMP  CIDNUM_MODIFY_SHIFT_1 ,
  1948 013B2 0758 C        	SWAP	TEMP2
  1949            C      M 	OR	TEMP2,@(0X0F)
       013B3 180F     1     MOV A,@( 15 )
       013B4 0258     1     OR  TEMP2 ,A
  1950            C      M 	SUBA	_RC,@(CID_ADDR+10)
       013B5 1846     1     MOV A,@(( CID_ADDR + 10 ))
       013B6 010C     1     SUB A, _RC 
  1951            C      M 	JPC	CIDNUM_MODIFY_SHIFT_1
       013B7 0C03     1     JBC  _STATUS , C 
       013B8 17BD     1     JMP  CIDNUM_MODIFY_SHIFT_1 ,
  1952 013B9 054C C        	INC	_RC
  1953 013BA 070D C        	SWAPA	_RD
  1954 013BB 19F0 C        	OR	A,@(0XF0)
  1955 013BC 02D8 C        	AND	TEMP2,A
  1956 013BD      C        CIDNUM_MODIFY_SHIFT_1:
  1957            C      M 	MOV	_RC,TEMP1
       013BD 0417     1     MOV A, TEMP1 
       013BE 004C     1     MOV  _RC ,A
  1958            C      M 	MOV	_RD,TEMP2
       013BF 0418     1     MOV A, TEMP2 
       013C0 004D     1     MOV  _RD ,A
  1959 013C1 0557 C        	INC	TEMP1
  1960 013C2 17A6 C        	JMP	CIDNUM_MODIFY_SHIFT_LOOP
  1961 013C3      C        CIDNUM_MODIFY_SHIFT_2:
  1962            C      M 	MOV	_RC,TEMP1
       013C3 0417     1     MOV A, TEMP1 
       013C4 004C     1     MOV  _RC ,A
  1963            C      M 	SUBA	_RC,@(CID_ADDR+11)
       013C5 1847     1     MOV A,@(( CID_ADDR + 11 ))
       013C6 010C     1     SUB A, _RC 
  1964            C      M 	JPC	CIDNUM_MODIFY_RET
       013C7 0C03     1     JBC  _STATUS , C 
       013C8 17CD     1     JMP  CIDNUM_MODIFY_RET ,
  1965            C      M 	MOV	_RD,@0XFF
       013C9 18FF     1     MOV A,@( 255 )
       013CA 004D     1     MOV  _RD ,A
  1966 013CB 0557 C        	INC	TEMP1
  1967 013CC 17A6 C        	JMP	CIDNUM_MODIFY_SHIFT_LOOP
  1968 013CD      C        CIDNUM_MODIFY_RET:
  1969 013CD 0012 C        	RET
  1970            C        
  1971            C        
  1972            C        
  1973            C        
  1974            C        SAVECOMMAND	MACRO
  1975            C        
  1976            C        STOR_COMMAND:
  1977            C        	JPNB	SER_FLAG,7,STOR_COMMAND_END
  1978            C        	CIDBANK	1
  1979            C        	MOV	_RC,@(TCP_ADDR+0)
  1980            C        	JPB	_RD,7,$+3
  1981            C        	MOV	_RD,@0X80
  1982            C        	
  1983            C        	CLR	SER_SEND
  1984            C        STOR_COMMAND_LOOP:					; 将收到的命令保存至COMMAND区域
  1985            C        
  1986            C        	SUBA	SER_SEND,SER_CONT
  1987            C        	JPZ	STOR_COMMAND_1
  1988            C        	
  1989            C        	ADDA	SER_SEND,@SER_BASE
  1990            C        	MOV	_RC,A
  1991            C        	MOV	SER_FLAG,_RD
  1992            C        	
  1993            C        	MOV	_RC,@(TCP_ADDR+0)
  1994            C        	INC	_RD
  1995            C        	ANDA	_RD,@0X7F
  1996            C        	ADD	A,@(TCP_ADDR+0)
  1997            C        	MOV	_RC,A
  1998            C        	MOV	_RD,SER_FLAG
  1999            C        	
  2000            C        	INC	SER_SEND
  2001            C        	JMP	STOR_COMMAND_LOOP
  2002            C        STOR_COMMAND_1:
  2003            C        	MOV	_RC,@(TCP_ADDR+0)
  2004            C        	INC	_RD
  2005            C        	ANDA	_RD,@0X7F
  2006            C        	ADD	A,@(TCP_ADDR+0)
  2007            C        	MOV	_RC,A
  2008            C        	MOV	_RD,@0XFF
  2009            C        	
  2010            C        	CLR	SER_SEND
  2011            C        	;CLR	SER_CONT
  2012            C        	CLR	SER_FLAG
  2013            C        	;MOV	A,SER_CONT
  2014            C        	;BANK	1
  2015            C        	;ADD	R1_STCPSP,A
  2016            C        	;AND	R1_STCPSP,@3F
  2017            C        	;BANK	0
  2018            C        STOR_COMMAND_END:
  2019            C        	;RET
  2020            C        	ENDM
  2021            C        
  2022            C        
  2023            C        
   490                     
   491                     include	"math.asm"
     1            C        ORG	0X1100
     2            C        /***************************************
     3            C        16进制转10进制
     4            C        源数GENE_A
     5            C        结果：EXT_RESULT,RESULT
     6            C        ***************************************/
     7 01100      C        MATH_HTD:
     8 01100 00D8 C        	CLR	RESULT
     9 01101 00D9 C        	CLR	EXT_RESULT
    10            C      M 	MOV	MATH_CONT,@8
       01102 1808     1     MOV A,@( 8 )
       01103 005A     1     MOV  MATH_CONT ,A
    11 01104      C        MATH_HTD_LOOP:
    12            C      M 	ADDA	RESULT,@0X03
       01104 1803     1     MOV A,@( 3 )
       01105 0398     1     ADD A, RESULT 
    13 01106 0057 C        	MOV	GENE_B,A
    14            C      M 	JPNB	GENE_B,3,MATH_HTD_LOOP_1
       01107 0ED7     1     JBS  GENE_B , 3 
       01108 150B     1     JMP  MATH_HTD_LOOP_1 ,
    15            C      M 	MOV	RESULT,GENE_B
       01109 0417     1     MOV A, GENE_B 
       0110A 0058     1     MOV  RESULT ,A
    16 0110B      C        MATH_HTD_LOOP_1:
    17            C      M 	ADDA	RESULT,@0X30
       0110B 1830     1     MOV A,@( 48 )
       0110C 0398     1     ADD A, RESULT 
    18 0110D 0057 C        	MOV	GENE_B,A
    19            C      M 	JPNB	GENE_B,7,MATH_HTD_LOOP_2
       0110E 0FD7     1     JBS  GENE_B , 7 
       0110F 1512     1     JMP  MATH_HTD_LOOP_2 ,
    20            C      M 	MOV	RESULT,GENE_B
       01110 0417     1     MOV A, GENE_B 
       01111 0058     1     MOV  RESULT ,A
    21 01112      C        MATH_HTD_LOOP_2:
    22            C      M 	CLRC
       01112 0803     1     BC  _STATUS , C 
    23 01113 06D6 C        	RLC	GENE_A
    24 01114 06D8 C        	RLC	RESULT
    25 01115 06D9 C        	RLC	EXT_RESULT
    26            C        	
    27 01116 01DA C        	DEC	MATH_CONT
    28            C      M 	JPNZ	MATH_HTD_LOOP
       01117 0E83     1     JBS  _STATUS , Z 
       01118 1504     1     JMP  MATH_HTD_LOOP ,
    29 01119 0418 C        	MOV	A,RESULT
    30 0111A 0012 C        	RET
    31            C        
    32            C        /***************************************
    33            C        16进制乘法
    34            C        GENE_A*GENE_B=EXT_RESULT,RESULT
    35            C        ***************************************/
    36            C        
    37 0111B      C        MATH_MUL:
    38 0111B 00D8 C        	CLR	RESULT
    39 0111C 00D9 C        	CLR	EXT_RESULT
    40            C      M 	MOV	MATH_CONT,@8
       0111D 1808     1     MOV A,@( 8 )
       0111E 005A     1     MOV  MATH_CONT ,A
    41 0111F      C        MATH_MUL_LOOP:
    42            C      M 	CLRC
       0111F 0803     1     BC  _STATUS , C 
    43 01120 0658 C        	RRC	RESULT
    44 01121 0659 C        	RRC	EXT_RESULT
    45 01122 0657 C        	RRC	GENE_B
    46            C      M 	JPNC	MATH_MUL_LOOP_1
       01123 0E03     1     JBS  _STATUS , C 
       01124 152A     1     JMP  MATH_MUL_LOOP_1 ,
    47            C      M 	ADD	RESULT,GENE_A
       01125 0416     1     MOV A, GENE_A 
       01126 03D8     1     ADD  RESULT ,A
    48            C      M 	JPNC	MATH_MUL_LOOP_1
       01127 0E03     1     JBS  _STATUS , C 
       01128 152A     1     JMP  MATH_MUL_LOOP_1 ,
    49 01129 0559 C        	INC	EXT_RESULT
    50 0112A      C        MATH_MUL_LOOP_1:
    51 0112A 01DA C        	DEC	MATH_CONT
    52            C      M 	JPNZ	MATH_MUL_LOOP
       0112B 0E83     1     JBS  _STATUS , Z 
       0112C 151F     1     JMP  MATH_MUL_LOOP ,
    53 0112D 0012 C        	RET
    54            C        	
    55            C        
    56            C        
    57 0112E      C        MATH_ADD:
    58            C      M 	CLRC
       0112E 0803     1     BC  _STATUS , C 
    59            C      M 	ADD	RESULT,GENE_B
       0112F 0417     1     MOV A, GENE_B 
       01130 03D8     1     ADD  RESULT ,A
    60            C      M 	JPNC	$+2
       01131 0E03     1     JBS  _STATUS , C 
       01132 1534     1     JMP ( $ + 2 ),
    61 01133 0559 C        	INC	EXT_RESULT
    62            C      M 	ADD	EXT_RESULT,GENE_A
       01134 0416     1     MOV A, GENE_A 
       01135 03D9     1     ADD  EXT_RESULT ,A
    63 01136 0012 C        	RET
    64            C        
    65            C        
    66            C        ;修改当前值
    67 01137      C        MATH_MODULE:
    68            C      M 	SUBA	MOD_MAX,CURRENT_VALUE
       01137 0418     1     MOV A, CURRENT_VALUE 
       01138 0117     1     SUB A, MOD_MAX 
    69            C      M 	JPNC	MATH_MODULE_OUT
       01139 0E03     1     JBS  _STATUS , C 
       0113A 1540     1     JMP  MATH_MODULE_OUT ,
    70            C      M 	SUBA	CURRENT_VALUE,MOD_MIN
       0113B 0416     1     MOV A, MOD_MIN 
       0113C 0118     1     SUB A, CURRENT_VALUE 
    71            C      M 	JPNC	MATH_MODULE_OUT
       0113D 0E03     1     JBS  _STATUS , C 
       0113E 1540     1     JMP  MATH_MODULE_OUT ,
    72 0113F 1547 C        	JMP	MATH_MODULE_1
    73 01140      C        MATH_MODULE_OUT:				; 出界
    74            C      M 	JPB	INCREMENT,7,$+4
       01140 0DD9     1     JBC  INCREMENT , 7 
       01141 1545     1     JMP ( $ + 4 ),
    75            C      M 	MOV	CURRENT_VALUE,MOD_MIN
       01142 0416     1     MOV A, MOD_MIN 
       01143 0058     1     MOV  CURRENT_VALUE ,A
    76 01144 1547 C        	JMP	$+3
    77            C      M 	MOV	CURRENT_VALUE,MOD_MAX
       01145 0417     1     MOV A, MOD_MAX 
       01146 0058     1     MOV  CURRENT_VALUE ,A
    78 01147      C        MATH_MODULE_1:
    79            C      M 	SUBA	MOD_MAX,MOD_MIN
       01147 0416     1     MOV A, MOD_MIN 
       01148 0117     1     SUB A, MOD_MAX 
    80 01149 1F01 C        	ADD	A,@1
    81 0114A 005A C        	MOV	MOD_TEMP,A			; 模
    82 0114B      C        MATH_MODULE_2:
    83            C      M 	ANDA	INCREMENT,@0X7F
       0114B 187F     1     MOV A,@( 127 )
       0114C 0299     1     AND A, INCREMENT 
    84 0114D 011A C        	SUB	A,MOD_TEMP
    85            C      M 	JPC	MATH_MODULE_3
       0114E 0C03     1     JBC  _STATUS , C 
       0114F 1553     1     JMP  MATH_MODULE_3 ,
    86            C      M 	SUB	INCREMENT,MOD_TEMP
       01150 041A     1     MOV A, MOD_TEMP 
       01151 0159     1     SUB  INCREMENT ,A
    87 01152 154B C        	JMP	MATH_MODULE_2
    88 01153      C        MATH_MODULE_3:
    89            C      M 	JPB	INCREMENT,7,MATH_MODULE_4
       01153 0DD9     1     JBC  INCREMENT , 7 
       01154 1559     1     JMP  MATH_MODULE_4 ,
    90            C      M 	SUBA	MOD_TEMP,INCREMENT
       01155 0419     1     MOV A, INCREMENT 
       01156 011A     1     SUB A, MOD_TEMP 
    91 01157 0398 C        	ADD	A,CURRENT_VALUE
    92 01158 155C C        	JMP	MATH_MODULE_5
    93 01159      C        MATH_MODULE_4:
    94            C      M 	CRAM	INCREMENT,7
       01159 09D9     1     BC  INCREMENT , 7 
    95            C      M 	ADDA	CURRENT_VALUE,INCREMENT
       0115A 0419     1     MOV A, INCREMENT 
       0115B 0398     1     ADD A, CURRENT_VALUE 
    96 0115C      C        MATH_MODULE_5:
    97 0115C 0058 C        	MOV	CURRENT_VALUE,A
    98            C      M 	SUBA	MOD_MAX,CURRENT_VALUE
       0115D 0418     1     MOV A, CURRENT_VALUE 
       0115E 0117     1     SUB A, MOD_MAX 
    99            C      M 	JPC	$+3
       0115F 0C03     1     JBC  _STATUS , C 
       01160 1563     1     JMP ( $ + 3 ),
   100            C      M 	SUB	CURRENT_VALUE,MOD_TEMP
       01161 041A     1     MOV A, MOD_TEMP 
       01162 0158     1     SUB  CURRENT_VALUE ,A
   101 01163 0012 C        	RET
   102            C        
   103            C        ; 子程序
   104            C        
   105            C        COPYCIDRAM	MACRO	@SOURCE_ADDR,@TARGET_ADDR,@END_ADDR
   106            C        ; 拷贝CID RAM中的数据	源地址,目标地址,结束地址
   107            C        	MOV	TEMP0,@SOURCE_ADDR
   108            C        	MOV	TEMP1,@TARGET_ADDR
   109            C        	MOV	TEMP2,@END_ADDR
   110            C        	CALL	#COPY_CIDRAM
   111            C        	ENDM
   112            C        COPYCIDRAM	MACRO	SOURCE_REG,TARGET_REG,END_REG
   113            C        	MOV	TEMP0,SOURCE_REG
   114            C        	MOV	TEMP1,TARGET_REG
   115            C        	MOV	TEMP2,END_REG
   116            C        	CALL	#COPY_CIDRAM
   117            C        	ENDM
   118            C        COPYCIDRAM	MACRO	SOURCE_REG,@TARGET_ADDR,END_REG
   119            C        	MOV	TEMP0,SOURCE_REG
   120            C        	MOV	TEMP1,@TARGET_ADDR
   121            C        	MOV	TEMP2,END_REG
   122            C        	CALL	#COPY_CIDRAM
   123            C        	ENDM
   124            C        COPYCIDRAM	MACRO	@SOURCE_ADDR,TARGET_REG,END_REG
   125            C        	MOV	TEMP0,@SOURCE_ADDR
   126            C        	MOV	TEMP1,TARGET_REG
   127            C        	MOV	TEMP2,END_REG
   128            C        	CALL	#COPY_CIDRAM
   129            C        	ENDM
   130            C        
   131 01164      C        COPY_CIDRAM:
   132 01164 00D9 C        	CLR	TEMP3
   133 01165      C        COPY_CIDRAM_LOOP:
   134            C      M 	ADDA	TEMP0,TEMP3
       01165 0419     1     MOV A, TEMP3 
       01166 0396     1     ADD A, TEMP0 
   135 01167 004C C        	MOV	_RC,A
   136 01168 0118 C        	SUB	A,TEMP2
   137            C      M 	JPZ	COPY_CIDRAM_RET
       01169 0C83     1     JBC  _STATUS , Z 
       0116A 1577     1     JMP  COPY_CIDRAM_RET ,
   138            C      M 	MOV	TEMP4,_RD
       0116B 040D     1     MOV A, _RD 
       0116C 005A     1     MOV  TEMP4 ,A
   139            C      M 	ADDA	TEMP1,TEMP3
       0116D 0419     1     MOV A, TEMP3 
       0116E 0397     1     ADD A, TEMP1 
   140 0116F 004C C        	MOV	_RC,A
   141 01170 0118 C        	SUB	A,TEMP2
   142            C      M 	JPZ	COPY_CIDRAM_RET
       01171 0C83     1     JBC  _STATUS , Z 
       01172 1577     1     JMP  COPY_CIDRAM_RET ,
   143            C      M 	MOV	_RD,TEMP4
       01173 041A     1     MOV A, TEMP4 
       01174 004D     1     MOV  _RD ,A
   144 01175 0559 C        	INC	TEMP3
   145 01176 1565 C        	JMP	COPY_CIDRAM_LOOP
   146 01177      C        COPY_CIDRAM_RET:
   147 01177 0012 C        	RET
   148            C        
   149            C        CLRCIDRAM	MACRO	@RAM_ADDR,@SIZE,@CLR_CH
   150            C        ; 清CID RAM中的数据	首地址,大小,空字符
   151            C        	MOV	TEMP0,@RAM_ADDR
   152            C        	MOV	TEMP1,@SIZE
   153            C        	MOV	TEMP2,@CLR_CH
   154            C        	CALL	#CLR_CIDRAM
   155            C        	ENDM
   156            C        CLRCIDRAM	MACRO	REG,@SIZE,@CLR_CH
   157            C        	MOV	TEMP0,REG
   158            C        	MOV	TEMP1,@SIZE
   159            C        	MOV	TEMP2,@CLR_CH
   160            C        	CALL	#CLR_CIDRAM
   161            C        	ENDM
   162            C        
   163            C        CLRCIDRAM	MACRO	REG,SIZE,@CLR_CH
   164            C        	MOV	TEMP0,REG
   165            C        	MOV	TEMP1,SIZE
   166            C        	MOV	TEMP2,@CLR_CH
   167            C        	CALL	#CLR_CIDRAM
   168            C        	ENDM
   169            C        
   170 01178      C        CLR_CIDRAM:
   171 01178 00D9 C        	CLR	TEMP3
   172 01179      C        CLR_CIDRAM_LOOP:
   173            C      M 	SUBA	TEMP1,TEMP3
       01179 0419     1     MOV A, TEMP3 
       0117A 0117     1     SUB A, TEMP1 
   174            C      M 	JPZ	CLR_CIDRAM_RET
       0117B 0C83     1     JBC  _STATUS , Z 
       0117C 1584     1     JMP  CLR_CIDRAM_RET ,
   175            C      M 	ADDA	TEMP0,TEMP3
       0117D 0419     1     MOV A, TEMP3 
       0117E 0396     1     ADD A, TEMP0 
   176 0117F 004C C        	MOV	_RC,A
   177            C      M 	MOV	_RD,TEMP2
       01180 0418     1     MOV A, TEMP2 
       01181 004D     1     MOV  _RD ,A
   178 01182 0559 C        	INC	TEMP3
   179 01183 1579 C        	JMP	CLR_CIDRAM_LOOP
   180 01184      C        CLR_CIDRAM_RET:
   181 01184 0012 C        	RET
   182            C        	
   183            C        CHKLEFTBLANK	MACRO	@RAM_ADDR,@SIZE,@CLR_CH
   184            C        ; 检查缓冲区左边的空字符的个数
   185            C        	MOV	TEMP0,@RAM_ADDR
   186            C        	MOV	TEMP1,@SIZE
   187            C        	MOV	TEMP2,@CLR_CH
   188            C        	CALL	#CHK_LEFTBLANK
   189            C        	ENDM
   190 01185      C        CHK_LEFTBLANK:
   191 01185 00D9 C        	CLR	TEMP3
   192 01186 00DA C        	CLR	TEMP4
   193 01187      C        CHK_LEFTBLANK_LOOP:
   194            C      M 	SUBA	TEMP1,TEMP3
       01187 0419     1     MOV A, TEMP3 
       01188 0117     1     SUB A, TEMP1 
   195            C      M 	JPZ	CHK_LEFTBLANK_RET
       01189 0C83     1     JBC  _STATUS , Z 
       0118A 1595     1     JMP  CHK_LEFTBLANK_RET ,
   196            C      M 	ADDA	TEMP0,TEMP3
       0118B 0419     1     MOV A, TEMP3 
       0118C 0396     1     ADD A, TEMP0 
   197 0118D 004C C        	MOV	_RC,A
   198            C      M 	SUBA	_RD,TEMP2
       0118E 0418     1     MOV A, TEMP2 
       0118F 010D     1     SUB A, _RD 
   199            C      M 	JPNZ	CHK_LEFTBLANK_RET
       01190 0E83     1     JBS  _STATUS , Z 
       01191 1595     1     JMP  CHK_LEFTBLANK_RET ,
   200 01192 0559 C        	INC	TEMP3
   201 01193 055A C        	INC	TEMP4
   202 01194 1587 C        	JMP	CHK_LEFTBLANK_LOOP
   203 01195      C        CHK_LEFTBLANK_RET:
   204 01195 041A C        	MOV	A,TEMP4
   205 01196 0012 C        	RET
   206            C        
   207            C        CHKRIGHTBLANK	MACRO	@RAM_ADDR,@SIZE,@CLR_CH
   208            C        ; 检查缓冲区右边的空字符的个数
   209            C        	MOV	TEMP0,@RAM_ADDR
   210            C        	MOV	TEMP1,@SIZE
   211            C        	MOV	TEMP2,@CLR_CH
   212            C        	CALL	#CHK_RIGHTBLANK
   213            C        	ENDM
   214            C        
   215 01197      C        CHK_RIGHTBLANK:
   216 01197 00DA C        	CLR	TEMP4
   217            C      M 	MOV	TEMP3,TEMP1
       01198 0417     1     MOV A, TEMP1 
       01199 0059     1     MOV  TEMP3 ,A
   218 0119A      C        CHK_RIGHTBLANK_LOOP:
   219 0119A 01D9 C        	DEC	TEMP3
   220            C      M 	JPZ	CHK_RIGHTBLANK_RET
       0119B 0C83     1     JBC  _STATUS , Z 
       0119C 15A6     1     JMP  CHK_RIGHTBLANK_RET ,
   221            C      M 	ADDA	TEMP0,TEMP3
       0119D 0419     1     MOV A, TEMP3 
       0119E 0396     1     ADD A, TEMP0 
   222 0119F 004C C        	MOV	_RC,A
   223            C      M 	SUBA	_RD,TEMP2
       011A0 0418     1     MOV A, TEMP2 
       011A1 010D     1     SUB A, _RD 
   224            C      M 	JPNZ	CHK_RIGHTBLANK_RET
       011A2 0E83     1     JBS  _STATUS , Z 
       011A3 15A6     1     JMP  CHK_RIGHTBLANK_RET ,
   225 011A4 055A C        	INC	TEMP4
   226 011A5 159A C        	JMP	CHK_RIGHTBLANK_LOOP
   227 011A6      C        CHK_RIGHTBLANK_RET:
   228 011A6 041A C        	MOV	A,TEMP4
   229 011A7 0012 C        	RET
   230            C        
   231            C        ; 子程序结束
   232            C        
   492                     ;以下占用1400~1FFF
   493                     ; 显示模块
   494                     include	"VGA.asm"
     1            C        ORG	0X1400
     2            C        /***************************************
     3            C        按控制器的模式输入显示值。
     4            C        
     5            C        按顺序依次输入到缓冲区中，
     6            C        依照风格将缓冲区中的数值整理到显示区中
     7            C        
     8            C        缓冲区大小32
     9            C        显示区大小16
    10            C        
    11            C        控制器标志：
    12            C        .6~.5	风格选择
    13            C        ***************************************/
    14            C        
    15            C        
    16            C        ; 显示印花，调用一次即刷新8个印花。
    17 01400      C        VGA_STAMP:
    18 01400 0056 C        	MOV	TEMP0,A
    19            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       01401 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01402 088B     2     BC  _RB , 2 
    20            C      M 	MOV	_RC,@(LCD_CTRL+1)
       01403 1881     1     MOV A,@(( LCD_CTRL + 1 ))
       01404 004C     1     MOV  _RC ,A
    21            C      M 	MOV	_RD,TEMP0
       01405 0416     1     MOV A, TEMP0 
       01406 004D     1     MOV  _RD ,A
    22 01407 0012 C        	RET
    23            C        
    24            C        ; 显示第一行的数字，每调用一次，依次存入在数字寄存器中。
    25            C        ; 第一行只有一种模式
    26 01408      C        VGA_NUM1:
    27 01408 0056 C        	MOV	TEMP0,A
    28            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       01409 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0140A 088B     2     BC  _RB , 2 
    29            C      M 	MOV	_RC,@(VGA_ADDR+2)
       0140B 18AE     1     MOV A,@(( VGA_ADDR + 2 ))
       0140C 004C     1     MOV  _RC ,A
    30            C      M 	SUBA	TEMP0,@CH_END
       0140D 18FF     1     MOV A,@( CH_END )
       0140E 0116     1     SUB A, TEMP0 
    31            C      M 	JPZ	VGA_NUM1_END
       0140F 0C83     1     JBC  _STATUS , Z 
       01410 1422     1     JMP  VGA_NUM1_END ,
    32 01411 040D C        	MOV	A,_RD
    33            C      M 	JPZ	VGA_NUM1_BEGIN
       01412 0C83     1     JBC  _STATUS , Z 
       01413 1420     1     JMP  VGA_NUM1_BEGIN ,
    34 01414 1A1F C        	AND	A,@0X1F
    35 01415 0057 C        	MOV	TEMP1,A
    36 01416 1D0A C        	SUB	A,@10
    37            C      M 	JPNC	VGA_NUM1_RET				; >=10超过要求，数据丢弃
       01417 0E03     1     JBS  _STATUS , C 
       01418 141F     1     JMP  VGA_NUM1_RET ,
    38 01419 054D C        	INC	_RD
    39            C      M 	ADDA	TEMP1,@(LCD_CTRL+1)
       0141A 1881     1     MOV A,@(( LCD_CTRL + 1 ))
       0141B 0397     1     ADD A, TEMP1 
    40 0141C 004C C        	MOV	_RC,A
    41            C      M 	MOV	_RD,TEMP0
       0141D 0416     1     MOV A, TEMP0 
       0141E 004D     1     MOV  _RD ,A
    42 0141F      C        VGA_NUM1_RET:
    43 0141F 0012 C        	RET
    44            C        	;JMP	VIEW_REVISE_NUM1
    45            C        
    46 01420      C        VGA_NUM1_BEGIN:
    47 01420 054D C        	INC	_RD
    48            C        	;CLRCIDRAM	@(LCD_CTRL+2),@10,@NUM_BLANK
    49 01421 0012 C        	RET
    50            C        	;CALL	BLANK_NUM1
    51            C        	;JMP	VIEW_REVISE_NUM1
    52            C        
    53 01422      C        VGA_NUM1_END:
    54 01422 00CD C        	CLR	_RD
    55 01423 0012 C        	RET
    56            C        	
    57            C        
    58            C        ; 显示第二行的数字
    59            C        ; 依次存入到寄存器中。
    60 01424      C        VGA_NUM2:
    61 01424 0056 C        	MOV	TEMP0,A
    62            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       01425 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01426 088B     2     BC  _RB , 2 
    63            C        	;MOV	_RC,@LCD_CTRL
    64            C        	;SRAM	_RD,5
    65            C      M 	MOV	_RC,@(VGA_ADDR+13)
       01427 18B9     1     MOV A,@(( VGA_ADDR + 13 ))
       01428 004C     1     MOV  _RC ,A
    66            C      M 	SUBA	TEMP0,@CH_END
       01429 18FF     1     MOV A,@( CH_END )
       0142A 0116     1     SUB A, TEMP0 
    67            C      M 	JPZ	VGA_NUM2_END
       0142B 0C83     1     JBC  _STATUS , Z 
       0142C 1449     1     JMP  VGA_NUM2_END ,
    68 0142D 040D C        	MOV	A,_RD
    69            C      M 	JPZ	VGA_NUM2_BEGIN
       0142E 0C83     1     JBC  _STATUS , Z 
       0142F 143C     1     JMP  VGA_NUM2_BEGIN ,
    70 01430 1A1F C        	AND	A,@0X1F
    71 01431 0057 C        	MOV	TEMP1,A
    72 01432 1D20 C        	SUB	A,@32			; >32超过要求
    73            C      M 	JPNC	VGA_NUM2_RET
       01433 0E03     1     JBS  _STATUS , C 
       01434 143B     1     JMP  VGA_NUM2_RET ,
    74 01435 054D C        	INC	_RD
    75            C      M 	ADDA	TEMP1,@(VGA_ADDR+13)
       01436 18B9     1     MOV A,@(( VGA_ADDR + 13 ))
       01437 0397     1     ADD A, TEMP1 
    76 01438 004C C        	MOV	_RC,A
    77            C      M 	MOV	_RD,TEMP0
       01439 0416     1     MOV A, TEMP0 
       0143A 004D     1     MOV  _RD ,A
    78 0143B      C        VGA_NUM2_RET:
    79 0143B 1491 C        	JMP	VIEW_REVISE_NUM2
    80 0143C      C        VGA_NUM2_BEGIN:
    81            C      M 	MOV	_RD,TEMP0
       0143C 0416     1     MOV A, TEMP0 
       0143D 004D     1     MOV  _RD ,A
    82 0143E 054D C        	INC	_RD
    83            C      M 	CLRCIDRAM	@(VGA_ADDR+14),@32,@NUM_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 14 ))
       0143F 18BA     2     MOV A,@(( VGA_ADDR + 14 ))
       01440 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       01441 1820     2     MOV A,@( 32 )
       01442 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( NUM_BLANK )
       01443 1810     2     MOV A,@( NUM_BLANK )
       01444 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CLR_CIDRAM ),
                      3  M  LCALL  CLR_CIDRAM 
                      4  M  PAGE #( CLR_CIDRAM ),
       01445 1E84     4     PAGE ( CLR_CIDRAM / 1024 ),
       01446 1178     3     CALL ( CLR_CIDRAM % 1024 ),
                      4  M  PAGE #( $ ),
       01447 1E85     4     PAGE ( $ / 1024 ),
    84 01448 1491 C        	JMP	VIEW_REVISE_NUM2
    85            C        
    86 01449      C        VGA_NUM2_END:
    87 01449 00CD C        	CLR	_RD
    88 0144A 0012 C        	RET
    89            C        
    90            C        ; 显示第二行的数字
    91            C        ; 依次存入到寄存器中。
    92 0144B      C        VGA_STR:
    93 0144B 0056 C        	MOV	TEMP0,A
    94            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       0144C 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0144D 088B     2     BC  _RB , 2 
    95            C        	;MOV	_RC,@LCD_CTRL
    96            C        	;SRAM	_RD,6
    97            C      M 	MOV	_RC,@(VGA_ADDR+46)
       0144E 18DA     1     MOV A,@(( VGA_ADDR + 46 ))
       0144F 004C     1     MOV  _RC ,A
    98            C      M 	SUBA	TEMP0,@CH_END
       01450 18FF     1     MOV A,@( CH_END )
       01451 0116     1     SUB A, TEMP0 
    99            C      M 	JPZ	VGA_STR_END
       01452 0C83     1     JBC  _STATUS , Z 
       01453 1470     1     JMP  VGA_STR_END ,
   100 01454 040D C        	MOV	A,_RD
   101            C      M 	JPZ	VGA_STR_BEGIN
       01455 0C83     1     JBC  _STATUS , Z 
       01456 1463     1     JMP  VGA_STR_BEGIN ,
   102 01457 1A1F C        	AND	A,@0X1F
   103 01458 0057 C        	MOV	TEMP1,A
   104 01459 1D20 C        	SUB	A,@32			; >32超过要求
   105            C      M 	JPNC	VGA_STR_RET
       0145A 0E03     1     JBS  _STATUS , C 
       0145B 1462     1     JMP  VGA_STR_RET ,
   106            C        	;MOV	_RC,@(VGA_ADDR+46)
   107 0145C 054D C        	INC	_RD
   108            C      M 	ADDA	TEMP1,@(VGA_ADDR+46)
       0145D 18DA     1     MOV A,@(( VGA_ADDR + 46 ))
       0145E 0397     1     ADD A, TEMP1 
   109 0145F 004C C        	MOV	_RC,A
   110            C      M 	MOV	_RD,TEMP0
       01460 0416     1     MOV A, TEMP0 
       01461 004D     1     MOV  _RD ,A
   111 01462      C        VGA_STR_RET:
   112            C        	;RET
   113 01462 1515 C        	JMP	VIEW_REVISE_STR
   114            C        
   115 01463      C        VGA_STR_BEGIN:
   116            C      M 	MOV	_RD,TEMP0
       01463 0416     1     MOV A, TEMP0 
       01464 004D     1     MOV  _RD ,A
   117 01465 054D C        	INC	_RD
   118            C      M 	CLRCIDRAM	@(VGA_ADDR+47),@32,@CH_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 47 ))
       01466 18DB     2     MOV A,@(( VGA_ADDR + 47 ))
       01467 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       01468 1820     2     MOV A,@( 32 )
       01469 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( CH_BLANK )
       0146A 1824     2     MOV A,@( CH_BLANK )
       0146B 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CLR_CIDRAM ),
                      3  M  LCALL  CLR_CIDRAM 
                      4  M  PAGE #( CLR_CIDRAM ),
       0146C 1E84     4     PAGE ( CLR_CIDRAM / 1024 ),
       0146D 1178     3     CALL ( CLR_CIDRAM % 1024 ),
                      4  M  PAGE #( $ ),
       0146E 1E85     4     PAGE ( $ / 1024 ),
   119            C        	;RET
   120 0146F 1515 C        	JMP	VIEW_REVISE_STR
   121            C        
   122 01470      C        VGA_STR_END:
   123 01470 00CD C        	CLR	_RD
   124 01471 0012 C        	RET
   125            C        
   126 01472      C        CLR_STAMP:
   127            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       01472 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01473 088B     2     BC  _RB , 2 
   128            C      M 	MOV	_RC,@(LCD_CTRL+1)
       01474 1881     1     MOV A,@(( LCD_CTRL + 1 ))
       01475 004C     1     MOV  _RC ,A
   129 01476 00CD C        	CLR	_RD
   130 01477 0012 C        	RET
   131            C        
   132 01478      C        CLR_NUM1:
   133            C      M 	MOV	TEMP0,@(LCD_CTRL+2)
       01478 1882     1     MOV A,@(( LCD_CTRL + 2 ))
       01479 0056     1     MOV  TEMP0 ,A
   134            C      M 	MOV	TEMP1,@10
       0147A 180A     1     MOV A,@( 10 )
       0147B 0057     1     MOV  TEMP1 ,A
   135 0147C 1810 C        	MOV	A,@NUM_BLANK
   136 0147D 148A C        	JMP	CLR_LCD
   137            C        	
   138            C        
   139 0147E      C        CLR_NUM2:
   140            C      M 	MOV	TEMP0,@(LCD_CTRL+12)
       0147E 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       0147F 0056     1     MOV  TEMP0 ,A
   141            C      M 	MOV	TEMP1,@16
       01480 1810     1     MOV A,@( 16 )
       01481 0057     1     MOV  TEMP1 ,A
   142 01482 1810 C        	MOV	A,@NUM_BLANK
   143 01483 148A C        	JMP	CLR_LCD
   144            C        	
   145            C        
   146 01484      C        CLR_STR:
   147            C      M 	MOV	TEMP0,@(LCD_CTRL+28)
       01484 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       01485 0056     1     MOV  TEMP0 ,A
   148            C      M 	MOV	TEMP1,@16
       01486 1810     1     MOV A,@( 16 )
       01487 0057     1     MOV  TEMP1 ,A
   149 01488 1824 C        	MOV	A,@CH_BLANK
   150 01489 148A C        	JMP	CLR_LCD
   151            C        	
   152 0148A      C        CLR_LCD:
   153 0148A 0058 C        	MOV	TEMP2,A
   154            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       0148B 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       0148C 088B     2     BC  _RB , 2 
   155            C      M 	CALL	#CLR_CIDRAM
                      2  M  LCALL  CLR_CIDRAM 
                      3  M  PAGE #( CLR_CIDRAM ),
       0148D 1E84     3     PAGE ( CLR_CIDRAM / 1024 ),
       0148E 1178     2     CALL ( CLR_CIDRAM % 1024 ),
                      3  M  PAGE #( $ ),
       0148F 1E85     3     PAGE ( $ / 1024 ),
   156 01490 0012 C        	RET
   157            C        
   158            C        
   159            C        /***************************************
   160            C        风格显示
   161            C        按照控制器中的显示风格将缓冲区的数值放到显示区中
   162            C        
   163            C        ***************************************/
   164            C        
   165            C        
   166 01491      C        VIEW_REVISE:
   167            C        ;VIEW_REVISE_NUM1:				; 第一行数字
   168            C        	; 第一行没有风格显示
   169            C        ;	COPYCIDRAM	@(VGA_ADDR+3),@(LCD_CTRL+2),@(LCD_CTRL+2+10)
   170            C        
   171            C        
   172 01491      C        VIEW_REVISE_NUM2:				; 第二行数字
   173            C        	;CLRCIDRAM	@(LCD_CTRL+12),@16,@NUM_BLANK
   174            C      M 	MOV	_RC,@(VGA_ADDR+13)
       01491 18B9     1     MOV A,@(( VGA_ADDR + 13 ))
       01492 004C     1     MOV  _RC ,A
   175 01493 040D C        	MOV	A,_RD
   176            C      M 	JPZ	VIEW_REVISE_RET			; 控制器==0
       01494 0C83     1     JBC  _STATUS , Z 
       01495 1598     1     JMP  VIEW_REVISE_RET ,
   177            C        	
   178 01496 0056 C        	MOV	TEMP0,A
   179 01497 0756 C        	SWAP	TEMP0
   180 01498 0616 C        	RRCA	TEMP0
   181 01499 1A03 C        	AND	A,@0X03
   182 0149A 0020 C        	TBL
   183 0149B 149F C        	JMP	VIEW_REVISE_NUM2_NORMAL
   184 0149C 14A6 C        	JMP	VIEW_REVISE_NUM2_LEFT
   185 0149D 14C5 C        	JMP	VIEW_REVISE_NUM2_RIGHT
   186 0149E 14E4 C        	JMP	VIEW_REVISE_NUM2_CENTER
   187            C        	
   188 0149F      C        VIEW_REVISE_NUM2_NORMAL:
   189            C      M 	MOV	TEMP0,@(VGA_ADDR+14)
       0149F 18BA     1     MOV A,@(( VGA_ADDR + 14 ))
       014A0 0056     1     MOV  TEMP0 ,A
   190            C      M 	MOV	TEMP1,@(LCD_CTRL+12)
       014A1 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       014A2 0057     1     MOV  TEMP1 ,A
   191            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       014A3 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       014A4 0058     1     MOV  TEMP2 ,A
   192 014A5 1511 C        	JMP	VIEW_REVISE_NUM2_1
   193 014A6      C        VIEW_REVISE_NUM2_LEFT:
   194            C      M 	CHKLEFTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 14 ))
       014A6 18BA     2     MOV A,@(( VGA_ADDR + 14 ))
       014A7 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       014A8 1820     2     MOV A,@( 32 )
       014A9 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( NUM_BLANK )
       014AA 1810     2     MOV A,@( NUM_BLANK )
       014AB 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_LEFTBLANK ),
                      3  M  LCALL  CHK_LEFTBLANK 
                      4  M  PAGE #( CHK_LEFTBLANK ),
       014AC 1E84     4     PAGE ( CHK_LEFTBLANK / 1024 ),
       014AD 1185     3     CALL ( CHK_LEFTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       014AE 1E85     4     PAGE ( $ / 1024 ),
   195 014AF 0056 C        	MOV	TEMP0,A
   196            C      M 	SUBA	TEMP0,@16
       014B0 1810     1     MOV A,@( 16 )
       014B1 0116     1     SUB A, TEMP0 
   197            C      M 	JPC	VIEW_REVISE_NUM2_LEFT_LEAN
       014B2 0C03     1     JBC  _STATUS , C 
       014B3 14BB     1     JMP  VIEW_REVISE_NUM2_LEFT_LEAN ,
   198            C      M 	ADD	TEMP0,@(VGA_ADDR+14)
       014B4 18BA     1     MOV A,@(( VGA_ADDR + 14 ))
       014B5 03D6     1     ADD  TEMP0 ,A
   199            C      M 	MOV	TEMP1,@(LCD_CTRL+12)
       014B6 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       014B7 0057     1     MOV  TEMP1 ,A
   200            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       014B8 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       014B9 0058     1     MOV  TEMP2 ,A
   201 014BA 1511 C        	JMP	VIEW_REVISE_NUM2_1
   202 014BB      C        VIEW_REVISE_NUM2_LEFT_LEAN:
   203 014BB 0059 C        	MOV	TEMP3,A
   204            C      M 	ADD	TEMP0,@(VGA_ADDR+14)
       014BC 18BA     1     MOV A,@(( VGA_ADDR + 14 ))
       014BD 03D6     1     ADD  TEMP0 ,A
   205            C      M 	MOV	TEMP1,@(LCD_CTRL+12)
       014BE 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       014BF 0057     1     MOV  TEMP1 ,A
   206            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       014C0 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       014C1 0058     1     MOV  TEMP2 ,A
   207            C      M 	SUB	TEMP2,TEMP3
       014C2 0419     1     MOV A, TEMP3 
       014C3 0158     1     SUB  TEMP2 ,A
   208 014C4 1511 C        	JMP	VIEW_REVISE_NUM2_1
   209 014C5      C        VIEW_REVISE_NUM2_RIGHT:
   210            C      M 	CHKRIGHTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 14 ))
       014C5 18BA     2     MOV A,@(( VGA_ADDR + 14 ))
       014C6 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       014C7 1820     2     MOV A,@( 32 )
       014C8 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( NUM_BLANK )
       014C9 1810     2     MOV A,@( NUM_BLANK )
       014CA 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_RIGHTBLANK ),
                      3  M  LCALL  CHK_RIGHTBLANK 
                      4  M  PAGE #( CHK_RIGHTBLANK ),
       014CB 1E84     4     PAGE ( CHK_RIGHTBLANK / 1024 ),
       014CC 1197     3     CALL ( CHK_RIGHTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       014CD 1E85     4     PAGE ( $ / 1024 ),
   211 014CE 0056 C        	MOV	TEMP0,A
   212            C      M 	SUBA	TEMP0,@16
       014CF 1810     1     MOV A,@( 16 )
       014D0 0116     1     SUB A, TEMP0 
   213            C      M 	JPNC	VIEW_REVISE_NUM2_RIGHT_FULL
       014D1 0E03     1     JBS  _STATUS , C 
       014D2 14DB     1     JMP  VIEW_REVISE_NUM2_RIGHT_FULL ,
   214 014D3 0057 C        	MOV	TEMP1,A
   215            C      M 	MOV	TEMP0,@(VGA_ADDR+14)
       014D4 18BA     1     MOV A,@(( VGA_ADDR + 14 ))
       014D5 0056     1     MOV  TEMP0 ,A
   216            C      M 	ADD	TEMP1,@(LCD_CTRL+12)
       014D6 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       014D7 03D7     1     ADD  TEMP1 ,A
   217            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       014D8 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       014D9 0058     1     MOV  TEMP2 ,A
   218            C        	
   219 014DA 1511 C        	JMP	VIEW_REVISE_NUM2_1
   220 014DB      C        VIEW_REVISE_NUM2_RIGHT_FULL:
   221 014DB 0416 C        	MOV	A,TEMP0
   222 014DC 1D10 C        	SUB	A,@16
   223 014DD 1FBA C        	ADD	A,@(VGA_ADDR+14)
   224 014DE 0056 C        	MOV	TEMP0,A
   225            C      M 	MOV	TEMP1,@(LCD_CTRL+12)
       014DF 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       014E0 0057     1     MOV  TEMP1 ,A
   226            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       014E1 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       014E2 0058     1     MOV  TEMP2 ,A
   227 014E3 1511 C        	JMP	VIEW_REVISE_NUM2_1
   228            C        	
   229 014E4      C        VIEW_REVISE_NUM2_CENTER:
   230            C      M 	CHKLEFTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 14 ))
       014E4 18BA     2     MOV A,@(( VGA_ADDR + 14 ))
       014E5 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       014E6 1820     2     MOV A,@( 32 )
       014E7 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( NUM_BLANK )
       014E8 1810     2     MOV A,@( NUM_BLANK )
       014E9 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_LEFTBLANK ),
                      3  M  LCALL  CHK_LEFTBLANK 
                      4  M  PAGE #( CHK_LEFTBLANK ),
       014EA 1E84     4     PAGE ( CHK_LEFTBLANK / 1024 ),
       014EB 1185     3     CALL ( CHK_LEFTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       014EC 1E85     4     PAGE ( $ / 1024 ),
   231 014ED 005B C        	MOV	TEMP5,A
   232 014EE 1D20 C        	SUB	A,@32
   233            C      M 	JPZ	VIEW_REVISE_NUM2_NONE
       014EF 0C83     1     JBC  _STATUS , Z 
       014F0 1514     1     JMP  VIEW_REVISE_NUM2_NONE ,
   234            C      M 	CHKRIGHTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 14 ))
       014F1 18BA     2     MOV A,@(( VGA_ADDR + 14 ))
       014F2 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       014F3 1820     2     MOV A,@( 32 )
       014F4 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( NUM_BLANK )
       014F5 1810     2     MOV A,@( NUM_BLANK )
       014F6 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_RIGHTBLANK ),
                      3  M  LCALL  CHK_RIGHTBLANK 
                      4  M  PAGE #( CHK_RIGHTBLANK ),
       014F7 1E84     4     PAGE ( CHK_RIGHTBLANK / 1024 ),
       014F8 1197     3     CALL ( CHK_RIGHTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       014F9 1E85     4     PAGE ( $ / 1024 ),
   235 014FA 039B C        	ADD	A,TEMP5
   236 014FB 0056 C        	MOV	TEMP0,A
   237            C      M 	SUB	TEMP0,@16
       014FC 1810     1     MOV A,@( 16 )
       014FD 0156     1     SUB  TEMP0 ,A
   238            C      M 	JPNC	VIEW_REVISE_NUM2_FULL		; 空字符少于16，说明字符超过16个
       014FE 0E03     1     JBS  _STATUS , C 
       014FF 150A     1     JMP  VIEW_REVISE_NUM2_FULL ,
   239            C      M 	CLRC
       01500 0803     1     BC  _STATUS , C 
   240 01501 0616 C        	RRCA	TEMP0
   241 01502 1F8C C        	ADD	A,@(LCD_CTRL+12)
   242 01503 0057 C        	MOV	TEMP1,A				; 目的地址
   243            C      M 	ADDA	TEMP5,@(VGA_ADDR+14)
       01504 18BA     1     MOV A,@(( VGA_ADDR + 14 ))
       01505 039B     1     ADD A, TEMP5 
   244 01506 0056 C        	MOV	TEMP0,A
   245            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       01507 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       01508 0058     1     MOV  TEMP2 ,A
   246 01509 1511 C        	JMP	VIEW_REVISE_NUM2_1
   247            C        
   248 0150A      C        VIEW_REVISE_NUM2_FULL:
   249 0150A 041B C        	MOV	A,TEMP5
   250 0150B 1FBA C        	ADD	A,@(VGA_ADDR+14)
   251 0150C 0056 C        	MOV	TEMP0,A
   252            C      M 	MOV	TEMP1,@(LCD_CTRL+12)
       0150D 188C     1     MOV A,@(( LCD_CTRL + 12 ))
       0150E 0057     1     MOV  TEMP1 ,A
   253            C      M 	MOV	TEMP2,@(LCD_CTRL+12+16)
       0150F 189C     1     MOV A,@((( LCD_CTRL + 12 )+ 16 ))
       01510 0058     1     MOV  TEMP2 ,A
   254            C        	;JMP	VIEW_REVISE_NUM2_1
   255            C        
   256 01511      C        VIEW_REVISE_NUM2_1:
   257            C      M 	CALL	#COPY_CIDRAM
                      2  M  LCALL  COPY_CIDRAM 
                      3  M  PAGE #( COPY_CIDRAM ),
       01511 1E84     3     PAGE ( COPY_CIDRAM / 1024 ),
       01512 1164     2     CALL ( COPY_CIDRAM % 1024 ),
                      3  M  PAGE #( $ ),
       01513 1E85     3     PAGE ( $ / 1024 ),
   258 01514      C        VIEW_REVISE_NUM2_NONE:
   259 01514 0012 C        	RET
   260            C        
   261 01515      C        VIEW_REVISE_STR:				; 第三行字符
   262            C        	;CLRCIDRAM	@(LCD_CTRL+28),@16,@CH_BLANK
   263            C      M 	MOV	_RC,@(VGA_ADDR+46)
       01515 18DA     1     MOV A,@(( VGA_ADDR + 46 ))
       01516 004C     1     MOV  _RC ,A
   264 01517 040D C        	MOV	A,_RD
   265            C      M 	JPZ	VIEW_REVISE_RET			; 控制器==0
       01518 0C83     1     JBC  _STATUS , Z 
       01519 1598     1     JMP  VIEW_REVISE_RET ,
   266            C        	
   267 0151A 0056 C        	MOV	TEMP0,A
   268 0151B 0756 C        	SWAP	TEMP0
   269 0151C 0616 C        	RRCA	TEMP0
   270 0151D 1A03 C        	AND	A,@0X03
   271 0151E 0020 C        	TBL
   272 0151F 1523 C        	JMP	VIEW_REVISE_STR_NORMAL
   273 01520 152A C        	JMP	VIEW_REVISE_STR_LEFT
   274 01521 1549 C        	JMP	VIEW_REVISE_STR_RIGHT
   275 01522 1568 C        	JMP	VIEW_REVISE_STR_CENTER
   276            C        	
   277 01523      C        VIEW_REVISE_STR_NORMAL:
   278            C      M 	MOV	TEMP0,@(VGA_ADDR+47)
       01523 18DB     1     MOV A,@(( VGA_ADDR + 47 ))
       01524 0056     1     MOV  TEMP0 ,A
   279            C      M 	MOV	TEMP1,@(LCD_CTRL+28)
       01525 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       01526 0057     1     MOV  TEMP1 ,A
   280            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       01527 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       01528 0058     1     MOV  TEMP2 ,A
   281 01529 1595 C        	JMP	VIEW_REVISE_STR_1
   282 0152A      C        VIEW_REVISE_STR_LEFT:
   283            C      M 	CHKLEFTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 47 ))
       0152A 18DB     2     MOV A,@(( VGA_ADDR + 47 ))
       0152B 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       0152C 1820     2     MOV A,@( 32 )
       0152D 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( CH_BLANK )
       0152E 1824     2     MOV A,@( CH_BLANK )
       0152F 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_LEFTBLANK ),
                      3  M  LCALL  CHK_LEFTBLANK 
                      4  M  PAGE #( CHK_LEFTBLANK ),
       01530 1E84     4     PAGE ( CHK_LEFTBLANK / 1024 ),
       01531 1185     3     CALL ( CHK_LEFTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       01532 1E85     4     PAGE ( $ / 1024 ),
   284 01533 0056 C        	MOV	TEMP0,A
   285            C      M 	SUBA	TEMP0,@16
       01534 1810     1     MOV A,@( 16 )
       01535 0116     1     SUB A, TEMP0 
   286            C      M 	JPC	VIEW_REVISE_STR_LEFT_LEAN
       01536 0C03     1     JBC  _STATUS , C 
       01537 153F     1     JMP  VIEW_REVISE_STR_LEFT_LEAN ,
   287            C      M 	ADD	TEMP0,@(VGA_ADDR+47)
       01538 18DB     1     MOV A,@(( VGA_ADDR + 47 ))
       01539 03D6     1     ADD  TEMP0 ,A
   288            C      M 	MOV	TEMP1,@(LCD_CTRL+28)
       0153A 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       0153B 0057     1     MOV  TEMP1 ,A
   289            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       0153C 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       0153D 0058     1     MOV  TEMP2 ,A
   290 0153E 1595 C        	JMP	VIEW_REVISE_STR_1
   291 0153F      C        VIEW_REVISE_STR_LEFT_LEAN:
   292 0153F 0059 C        	MOV	TEMP3,A
   293            C      M 	ADD	TEMP0,@(VGA_ADDR+28)
       01540 18C8     1     MOV A,@(( VGA_ADDR + 28 ))
       01541 03D6     1     ADD  TEMP0 ,A
   294            C      M 	MOV	TEMP1,@(LCD_CTRL+28)
       01542 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       01543 0057     1     MOV  TEMP1 ,A
   295            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       01544 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       01545 0058     1     MOV  TEMP2 ,A
   296            C      M 	SUB	TEMP2,TEMP3
       01546 0419     1     MOV A, TEMP3 
       01547 0158     1     SUB  TEMP2 ,A
   297 01548 1595 C        	JMP	VIEW_REVISE_STR_1
   298 01549      C        VIEW_REVISE_STR_RIGHT:
   299            C      M 	CHKRIGHTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 47 ))
       01549 18DB     2     MOV A,@(( VGA_ADDR + 47 ))
       0154A 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       0154B 1820     2     MOV A,@( 32 )
       0154C 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( CH_BLANK )
       0154D 1824     2     MOV A,@( CH_BLANK )
       0154E 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_RIGHTBLANK ),
                      3  M  LCALL  CHK_RIGHTBLANK 
                      4  M  PAGE #( CHK_RIGHTBLANK ),
       0154F 1E84     4     PAGE ( CHK_RIGHTBLANK / 1024 ),
       01550 1197     3     CALL ( CHK_RIGHTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       01551 1E85     4     PAGE ( $ / 1024 ),
   300 01552 0056 C        	MOV	TEMP0,A
   301            C      M 	SUBA	TEMP0,@16
       01553 1810     1     MOV A,@( 16 )
       01554 0116     1     SUB A, TEMP0 
   302            C      M 	JPNC	VIEW_REVISE_STR_RIGHT_FULL
       01555 0E03     1     JBS  _STATUS , C 
       01556 155F     1     JMP  VIEW_REVISE_STR_RIGHT_FULL ,
   303 01557 0057 C        	MOV	TEMP1,A
   304            C      M 	MOV	TEMP0,@(VGA_ADDR+47)
       01558 18DB     1     MOV A,@(( VGA_ADDR + 47 ))
       01559 0056     1     MOV  TEMP0 ,A
   305            C      M 	ADD	TEMP1,@(LCD_CTRL+28)
       0155A 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       0155B 03D7     1     ADD  TEMP1 ,A
   306            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       0155C 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       0155D 0058     1     MOV  TEMP2 ,A
   307            C        	
   308 0155E 1595 C        	JMP	VIEW_REVISE_STR_1
   309 0155F      C        VIEW_REVISE_STR_RIGHT_FULL:
   310 0155F 0416 C        	MOV	A,TEMP0
   311 01560 1D10 C        	SUB	A,@16
   312 01561 1FDB C        	ADD	A,@(VGA_ADDR+47)
   313 01562 0056 C        	MOV	TEMP0,A
   314            C      M 	MOV	TEMP1,@(LCD_CTRL+28)
       01563 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       01564 0057     1     MOV  TEMP1 ,A
   315            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       01565 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       01566 0058     1     MOV  TEMP2 ,A
   316 01567 1595 C        	JMP	VIEW_REVISE_STR_1
   317            C        	
   318 01568      C        VIEW_REVISE_STR_CENTER:
   319            C      M 	CHKLEFTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 47 ))
       01568 18DB     2     MOV A,@(( VGA_ADDR + 47 ))
       01569 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       0156A 1820     2     MOV A,@( 32 )
       0156B 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( CH_BLANK )
       0156C 1824     2     MOV A,@( CH_BLANK )
       0156D 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_LEFTBLANK ),
                      3  M  LCALL  CHK_LEFTBLANK 
                      4  M  PAGE #( CHK_LEFTBLANK ),
       0156E 1E84     4     PAGE ( CHK_LEFTBLANK / 1024 ),
       0156F 1185     3     CALL ( CHK_LEFTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       01570 1E85     4     PAGE ( $ / 1024 ),
   320 01571 005B C        	MOV	TEMP5,A
   321 01572 1D20 C        	SUB	A,@32
   322            C      M 	JPZ	VIEW_REVISE_RET
       01573 0C83     1     JBC  _STATUS , Z 
       01574 1598     1     JMP  VIEW_REVISE_RET ,
   323            C      M 	CHKRIGHTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
                      2  M  MOV  TEMP0 ,@(( VGA_ADDR + 47 ))
       01575 18DB     2     MOV A,@(( VGA_ADDR + 47 ))
       01576 0056     2     MOV  TEMP0 ,A
                      2  M  MOV  TEMP1 ,@( 32 )
       01577 1820     2     MOV A,@( 32 )
       01578 0057     2     MOV  TEMP1 ,A
                      2  M  MOV  TEMP2 ,@( CH_BLANK )
       01579 1824     2     MOV A,@( CH_BLANK )
       0157A 0058     2     MOV  TEMP2 ,A
                      2  M  CALL #( CHK_RIGHTBLANK ),
                      3  M  LCALL  CHK_RIGHTBLANK 
                      4  M  PAGE #( CHK_RIGHTBLANK ),
       0157B 1E84     4     PAGE ( CHK_RIGHTBLANK / 1024 ),
       0157C 1197     3     CALL ( CHK_RIGHTBLANK % 1024 ),
                      4  M  PAGE #( $ ),
       0157D 1E85     4     PAGE ( $ / 1024 ),
   324 0157E 039B C        	ADD	A,TEMP5
   325 0157F 0056 C        	MOV	TEMP0,A
   326            C      M 	SUB	TEMP0,@16
       01580 1810     1     MOV A,@( 16 )
       01581 0156     1     SUB  TEMP0 ,A
   327            C      M 	JPNC	VIEW_REVISE_STR_FULL		; 空字符少于16，说明字符超过16个
       01582 0E03     1     JBS  _STATUS , C 
       01583 158E     1     JMP  VIEW_REVISE_STR_FULL ,
   328            C      M 	CLRC
       01584 0803     1     BC  _STATUS , C 
   329 01585 0616 C        	RRCA	TEMP0
   330 01586 1F9C C        	ADD	A,@(LCD_CTRL+28)
   331 01587 0057 C        	MOV	TEMP1,A				; 目的地址
   332            C      M 	ADDA	TEMP5,@(VGA_ADDR+47)
       01588 18DB     1     MOV A,@(( VGA_ADDR + 47 ))
       01589 039B     1     ADD A, TEMP5 
   333 0158A 0056 C        	MOV	TEMP0,A
   334            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       0158B 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       0158C 0058     1     MOV  TEMP2 ,A
   335 0158D 1595 C        	JMP	VIEW_REVISE_STR_1
   336            C        	
   337 0158E      C        VIEW_REVISE_STR_FULL:
   338 0158E 041B C        	MOV	A,TEMP5
   339 0158F 1FDB C        	ADD	A,@(VGA_ADDR+47)
   340 01590 0056 C        	MOV	TEMP0,A
   341            C      M 	MOV	TEMP1,@(LCD_CTRL+28)
       01591 189C     1     MOV A,@(( LCD_CTRL + 28 ))
       01592 0057     1     MOV  TEMP1 ,A
   342            C      M 	MOV	TEMP2,@(LCD_CTRL+28+16)
       01593 18AC     1     MOV A,@((( LCD_CTRL + 28 )+ 16 ))
       01594 0058     1     MOV  TEMP2 ,A
   343            C        	;JMP	VIEW_REVISE_STR_1
   344            C        
   345 01595      C        VIEW_REVISE_STR_1:
   346            C      M 	CALL	#COPY_CIDRAM
                      2  M  LCALL  COPY_CIDRAM 
                      3  M  PAGE #( COPY_CIDRAM ),
       01595 1E84     3     PAGE ( COPY_CIDRAM / 1024 ),
       01596 1164     2     CALL ( COPY_CIDRAM % 1024 ),
                      3  M  PAGE #( $ ),
       01597 1E85     3     PAGE ( $ / 1024 ),
   347            C        
   348 01598      C        VIEW_REVISE_RET:
   349 01598 0012 C        	RET
   350            C        
   351 01599      C        VGA_HEX_NUM1:
   352 01599 1800 C        	MOV	A,@0
   353 0159A 159E C        	JMP	VGA_HEX
   354 0159B      C        VGA_HEX_NUM2:
   355 0159B 1801 C        	MOV	A,@1
   356 0159C 159E C        	JMP	VGA_HEX
   357 0159D      C        VGA_HEX_STR:
   358 0159D 1802 C        	MOV	A,@2
   359 0159E      C        VGA_HEX:
   360            C      M 	BANK	0
       0159E 0984     1     BC  _RSR , 6 
       0159F 09C4     1     BC  _RSR , 7 
   361 015A0 007A C        	MOV	CONT,A
   362            C      M 	CALL	#MATH_HTD
                      2  M  LCALL  MATH_HTD 
                      3  M  PAGE #( MATH_HTD ),
       015A1 1E84     3     PAGE ( MATH_HTD / 1024 ),
       015A2 1100     2     CALL ( MATH_HTD % 1024 ),
                      3  M  PAGE #( $ ),
       015A3 1E85     3     PAGE ( $ / 1024 ),
   363 015A4 007B C        	MOV	STR_REG,A
   364 015A5 043A C        	MOV	A,CONT
   365 015A6 0020 C        	TBL
   366 015A7 15AA C        	JMP	VGA_HEX_0
   367 015A8 15B1 C        	JMP	VGA_HEX_1
   368 015A9 15B8 C        	JMP	VGA_HEX_2
   369 015AA      C        VGA_HEX_0:
   370 015AA 073B C        	SWAPA	STR_REG
   371 015AB 1A0F C        	AND	A,@0X0F
   372 015AC 1008 C        	CALL	VGA_NUM1
   373            C      M 	ANDA	STR_REG,@0X0F
       015AD 180F     1     MOV A,@( 15 )
       015AE 02BB     1     AND A, STR_REG 
   374 015AF 1008 C        	CALL	VGA_NUM1
   375 015B0 0012 C        	RET
   376 015B1      C        VGA_HEX_1:
   377 015B1 073B C        	SWAPA	STR_REG
   378 015B2 1A0F C        	AND	A,@0X0F
   379 015B3 1024 C        	CALL	VGA_NUM2
   380            C      M 	ANDA	STR_REG,@0X0F
       015B4 180F     1     MOV A,@( 15 )
       015B5 02BB     1     AND A, STR_REG 
   381 015B6 1024 C        	CALL	VGA_NUM2
   382 015B7 0012 C        	RET
   383 015B8      C        VGA_HEX_2:
   384 015B8 073B C        	SWAPA	STR_REG
   385 015B9 1A0F C        	AND	A,@0X0F
   386 015BA 104B C        	CALL	VGA_STR
   387            C      M 	ANDA	STR_REG,@0X0F
       015BB 180F     1     MOV A,@( 15 )
       015BC 02BB     1     AND A, STR_REG 
   388 015BD 104B C        	CALL	VGA_STR
   389 015BE 0012 C        	RET
   390            C        
   391 015BF      C        VGA_STRING:
   392            C      M 	BANK	0
       015BF 0984     1     BC  _RSR , 6 
       015C0 09C4     1     BC  _RSR , 7 
   393 015C1 007B C        	MOV	STR_REG,A
   394 015C2 00FA C        	CLR	CONT
   395 015C3      C        VGA_STRING_LOOP:
   396            C        	;MOV	A,STR_REG
   397            C      M 	ANDA	STR_REG,@0X7F
       015C3 187F     1     MOV A,@( 127 )
       015C4 02BB     1     AND A, STR_REG 
   398 015C5 0020 C        	TBL
   399 015C6 15F1 C        	JMP	VGA_STRING_0
   400 015C7 15FD C        	JMP	VGA_STRING_1
   401 015C8 1609 C        	JMP	VGA_STRING_2
   402 015C9 1615 C        	JMP	VGA_STRING_3
   403 015CA 1621 C        	JMP	VGA_STRING_4
   404 015CB 162D C        	JMP	VGA_STRING_5
   405 015CC 1639 C        	JMP	VGA_STRING_6
   406 015CD 1645 C        	JMP	VGA_STRING_7
   407 015CE 1651 C        	JMP	VGA_STRING_8
   408 015CF 165D C        	JMP	VGA_STRING_9
   409 015D0 1669 C        	JMP	VGA_STRING_10
   410 015D1 1675 C        	JMP	VGA_STRING_11
   411 015D2 1681 C        	JMP	VGA_STRING_12
   412 015D3 168D C        	JMP	VGA_STRING_13
   413 015D4 1699 C        	JMP	VGA_STRING_14
   414 015D5 16A5 C        	JMP	VGA_STRING_15
   415 015D6 16B1 C        	JMP	VGA_STRING_16
   416 015D7 16BD C        	JMP	VGA_STRING_17
   417 015D8 16C9 C        	JMP	VGA_STRING_18
   418 015D9 16D5 C        	JMP	VGA_STRING_19
   419 015DA 16E1 C        	JMP	VGA_STRING_20
   420 015DB 16ED C        	JMP	VGA_STRING_21
   421 015DC 16F9 C        	JMP	VGA_STRING_22
   422 015DD 1705 C        	JMP	VGA_STRING_23
   423 015DE 1711 C        	JMP	VGA_STRING_24
   424 015DF 171D C        	JMP	VGA_STRING_25
   425 015E0 1729 C        	JMP	VGA_STRING_26
   426 015E1 1735 C        	JMP	VGA_STRING_27
   427 015E2 1741 C        	JMP	VGA_STRING_28
   428 015E3 174D C        	JMP	VGA_STRING_29
   429 015E4 1759 C        	JMP	VGA_STRING_30
   430 015E5 1765 C        	JMP	VGA_STRING_31
   431 015E6 1771 C        	JMP	VGA_STRING_32
   432 015E7 177D C        	JMP	VGA_STRING_33
   433 015E8 1789 C        	JMP	VGA_STRING_34
   434 015E9 1795 C        	JMP	VGA_STRING_35
   435 015EA 17A1 C        	JMP	VGA_STRING_36
   436 015EB 17AD C        	JMP	VGA_STRING_37
   437 015EC 17B9 C        	JMP	VGA_STRING_38
   438 015ED 17C5 C        	JMP	VGA_STRING_39
   439 015EE 17D1 C        	JMP	VGA_STRING_40
   440 015EF 17DD C        	JMP	VGA_STRING_41
   441 015F0 17E9 C        	JMP	VGA_STRING_42
   442            C        
   443 015F1      C        VGA_STRING_0:
   444            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_NO_CALL_EN,#SHOW_NO_CALL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       015F1 0C1E     2     JBC  SYS_FG , LANGUAGE 
       015F2 15F8     2     JMP ( $ + 6 ),
       015F3 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NO_CALL_EN ),
                      3  M  LCALL  SHOW_NO_CALL_EN 
                      4  M  PAGE #( SHOW_NO_CALL_EN ),
       015F4 1E86     4     PAGE ( SHOW_NO_CALL_EN / 1024 ),
       015F5 1000     3     CALL ( SHOW_NO_CALL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       015F6 1E85     4     PAGE ( $ / 1024 ),
       015F7 15FC     1     JMP ( $ + 5 ),
       015F8 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NO_CALL_GE ),
                      3  M  LCALL  SHOW_NO_CALL_GE 
                      4  M  PAGE #( SHOW_NO_CALL_GE ),
       015F9 1E86     4     PAGE ( SHOW_NO_CALL_GE / 1024 ),
       015FA 11C3     3     CALL ( SHOW_NO_CALL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       015FB 1E85     4     PAGE ( $ / 1024 ),
   445 015FC 17F5 C        	JMP	VGA_STRING1
   446 015FD      C        VGA_STRING_1:
   447            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERROR_EN,#SHOW_ERROR_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       015FD 0C1E     2     JBC  SYS_FG , LANGUAGE 
       015FE 1604     2     JMP ( $ + 6 ),
       015FF 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERROR_EN ),
                      3  M  LCALL  SHOW_ERROR_EN 
                      4  M  PAGE #( SHOW_ERROR_EN ),
       01600 1E86     4     PAGE ( SHOW_ERROR_EN / 1024 ),
       01601 100A     3     CALL ( SHOW_ERROR_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01602 1E85     4     PAGE ( $ / 1024 ),
       01603 1608     1     JMP ( $ + 5 ),
       01604 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERROR_GE ),
                      3  M  LCALL  SHOW_ERROR_GE 
                      4  M  PAGE #( SHOW_ERROR_GE ),
       01605 1E86     4     PAGE ( SHOW_ERROR_GE / 1024 ),
       01606 11F0     3     CALL ( SHOW_ERROR_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01607 1E85     4     PAGE ( $ / 1024 ),
   448 01608 17F5 C        	JMP	VGA_STRING1
   449 01609      C        VGA_STRING_2:
   450            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_TOTAL_EN,#SHOW_TOTAL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01609 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0160A 1610     2     JMP ( $ + 6 ),
       0160B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_TOTAL_EN ),
                      3  M  LCALL  SHOW_TOTAL_EN 
                      4  M  PAGE #( SHOW_TOTAL_EN ),
       0160C 1E86     4     PAGE ( SHOW_TOTAL_EN / 1024 ),
       0160D 1175     3     CALL ( SHOW_TOTAL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0160E 1E85     4     PAGE ( $ / 1024 ),
       0160F 1614     1     JMP ( $ + 5 ),
       01610 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_TOTAL_GE ),
                      3  M  LCALL  SHOW_TOTAL_GE 
                      4  M  PAGE #( SHOW_TOTAL_GE ),
       01611 1E86     4     PAGE ( SHOW_TOTAL_GE / 1024 ),
       01612 135B     3     CALL ( SHOW_TOTAL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01613 1E85     4     PAGE ( $ / 1024 ),
   451 01614 17F5 C        	JMP	VGA_STRING1
   452 01615      C        VGA_STRING_3:
   453            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PRIVATE_EN,#SHOW_PRIVATE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01615 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01616 161C     2     JMP ( $ + 6 ),
       01617 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PRIVATE_EN ),
                      3  M  LCALL  SHOW_PRIVATE_EN 
                      4  M  PAGE #( SHOW_PRIVATE_EN ),
       01618 1E86     4     PAGE ( SHOW_PRIVATE_EN / 1024 ),
       01619 1011     3     CALL ( SHOW_PRIVATE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0161A 1E85     4     PAGE ( $ / 1024 ),
       0161B 1620     1     JMP ( $ + 5 ),
       0161C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PRIVATE_GE ),
                      3  M  LCALL  SHOW_PRIVATE_GE 
                      4  M  PAGE #( SHOW_PRIVATE_GE ),
       0161D 1E86     4     PAGE ( SHOW_PRIVATE_GE / 1024 ),
       0161E 11F8     3     CALL ( SHOW_PRIVATE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0161F 1E85     4     PAGE ( $ / 1024 ),
   454 01620 17F5 C        	JMP	VGA_STRING1
   455 01621      C        VGA_STRING_4:
   456            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_END_OF_LIST_EN,#SHOW_END_OF_LIST_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01621 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01622 1628     2     JMP ( $ + 6 ),
       01623 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_END_OF_LIST_EN ),
                      3  M  LCALL  SHOW_END_OF_LIST_EN 
                      4  M  PAGE #( SHOW_END_OF_LIST_EN ),
       01624 1E86     4     PAGE ( SHOW_END_OF_LIST_EN / 1024 ),
       01625 101A     3     CALL ( SHOW_END_OF_LIST_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01626 1E85     4     PAGE ( $ / 1024 ),
       01627 162C     1     JMP ( $ + 5 ),
       01628 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_END_OF_LIST_GE ),
                      3  M  LCALL  SHOW_END_OF_LIST_GE 
                      4  M  PAGE #( SHOW_END_OF_LIST_GE ),
       01629 1E86     4     PAGE ( SHOW_END_OF_LIST_GE / 1024 ),
       0162A 1200     3     CALL ( SHOW_END_OF_LIST_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0162B 1E85     4     PAGE ( $ / 1024 ),
   457 0162C 17F5 C        	JMP	VGA_STRING1
   458 0162D      C        VGA_STRING_5:
   459            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PLS_LIFT_HANDSET_EN,#SHOW_PLS_LIFT_HANDSET_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0162D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0162E 1634     2     JMP ( $ + 6 ),
       0162F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PLS_LIFT_HANDSET_EN ),
                      3  M  LCALL  SHOW_PLS_LIFT_HANDSET_EN 
                      4  M  PAGE #( SHOW_PLS_LIFT_HANDSET_EN ),
       01630 1E86     4     PAGE ( SHOW_PLS_LIFT_HANDSET_EN / 1024 ),
       01631 1027     3     CALL ( SHOW_PLS_LIFT_HANDSET_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01632 1E85     4     PAGE ( $ / 1024 ),
       01633 1638     1     JMP ( $ + 5 ),
       01634 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PLS_LIFT_HANDSET_GE ),
                      3  M  LCALL  SHOW_PLS_LIFT_HANDSET_GE 
                      4  M  PAGE #( SHOW_PLS_LIFT_HANDSET_GE ),
       01635 1E86     4     PAGE ( SHOW_PLS_LIFT_HANDSET_GE / 1024 ),
       01636 1217     3     CALL ( SHOW_PLS_LIFT_HANDSET_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01637 1E85     4     PAGE ( $ / 1024 ),
   460 01638 17F5 C        	JMP	VGA_STRING1
   461 01639      C        VGA_STRING_6:
   462            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_INITIAL_EN,#SHOW_INITIAL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01639 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0163A 1640     2     JMP ( $ + 6 ),
       0163B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_INITIAL_EN ),
                      3  M  LCALL  SHOW_INITIAL_EN 
                      4  M  PAGE #( SHOW_INITIAL_EN ),
       0163C 1E86     4     PAGE ( SHOW_INITIAL_EN / 1024 ),
       0163D 1039     3     CALL ( SHOW_INITIAL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0163E 1E85     4     PAGE ( $ / 1024 ),
       0163F 1644     1     JMP ( $ + 5 ),
       01640 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_INITIAL_GE ),
                      3  M  LCALL  SHOW_INITIAL_GE 
                      4  M  PAGE #( SHOW_INITIAL_GE ),
       01641 1E86     4     PAGE ( SHOW_INITIAL_GE / 1024 ),
       01642 11D1     3     CALL ( SHOW_INITIAL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01643 1E85     4     PAGE ( $ / 1024 ),
   463 01644 17F5 C        	JMP	VGA_STRING1
   464 01645      C        VGA_STRING_7:
   465            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASE_EN,#SHOW_ERASE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01645 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01646 164C     2     JMP ( $ + 6 ),
       01647 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASE_EN ),
                      3  M  LCALL  SHOW_ERASE_EN 
                      4  M  PAGE #( SHOW_ERASE_EN ),
       01648 1E86     4     PAGE ( SHOW_ERASE_EN / 1024 ),
       01649 1042     3     CALL ( SHOW_ERASE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0164A 1E85     4     PAGE ( $ / 1024 ),
       0164B 1650     1     JMP ( $ + 5 ),
       0164C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASE_GE ),
                      3  M  LCALL  SHOW_ERASE_GE 
                      4  M  PAGE #( SHOW_ERASE_GE ),
       0164D 1E86     4     PAGE ( SHOW_ERASE_GE / 1024 ),
       0164E 120C     3     CALL ( SHOW_ERASE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0164F 1E85     4     PAGE ( $ / 1024 ),
   466 01650 17F5 C        	JMP	VGA_STRING1
   467 01651      C        VGA_STRING_8:
   468            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASED_EN,#SHOW_ERASED_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01651 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01652 1658     2     JMP ( $ + 6 ),
       01653 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASED_EN ),
                      3  M  LCALL  SHOW_ERASED_EN 
                      4  M  PAGE #( SHOW_ERASED_EN ),
       01654 1E86     4     PAGE ( SHOW_ERASED_EN / 1024 ),
       01655 10DD     3     CALL ( SHOW_ERASED_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01656 1E85     4     PAGE ( $ / 1024 ),
       01657 165C     1     JMP ( $ + 5 ),
       01658 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASED_GE ),
                      3  M  LCALL  SHOW_ERASED_GE 
                      4  M  PAGE #( SHOW_ERASED_GE ),
       01659 1E86     4     PAGE ( SHOW_ERASED_GE / 1024 ),
       0165A 12D2     3     CALL ( SHOW_ERASED_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0165B 1E85     4     PAGE ( $ / 1024 ),
   469 0165C 17F5 C        	JMP	VGA_STRING1
   470 0165D      C        VGA_STRING_9:
   471            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASE_ALL_EN,#SHOW_ERASE_ALL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0165D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0165E 1664     2     JMP ( $ + 6 ),
       0165F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASE_ALL_EN ),
                      3  M  LCALL  SHOW_ERASE_ALL_EN 
                      4  M  PAGE #( SHOW_ERASE_ALL_EN ),
       01660 1E86     4     PAGE ( SHOW_ERASE_ALL_EN / 1024 ),
       01661 104A     3     CALL ( SHOW_ERASE_ALL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01662 1E85     4     PAGE ( $ / 1024 ),
       01663 1668     1     JMP ( $ + 5 ),
       01664 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASE_ALL_GE ),
                      3  M  LCALL  SHOW_ERASE_ALL_GE 
                      4  M  PAGE #( SHOW_ERASE_ALL_GE ),
       01665 1E86     4     PAGE ( SHOW_ERASE_ALL_GE / 1024 ),
       01666 11DF     3     CALL ( SHOW_ERASE_ALL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01667 1E85     4     PAGE ( $ / 1024 ),
   472 01668 17F5 C        	JMP	VGA_STRING1
   473 01669      C        VGA_STRING_10:
   474            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASED_ALL_EN,#SHOW_ERASED_ALL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01669 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0166A 1670     2     JMP ( $ + 6 ),
       0166B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASED_ALL_EN ),
                      3  M  LCALL  SHOW_ERASED_ALL_EN 
                      4  M  PAGE #( SHOW_ERASED_ALL_EN ),
       0166C 1E86     4     PAGE ( SHOW_ERASED_ALL_EN / 1024 ),
       0166D 10E5     3     CALL ( SHOW_ERASED_ALL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0166E 1E85     4     PAGE ( $ / 1024 ),
       0166F 1674     1     JMP ( $ + 5 ),
       01670 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ERASED_ALL_GE ),
                      3  M  LCALL  SHOW_ERASED_ALL_GE 
                      4  M  PAGE #( SHOW_ERASED_ALL_GE ),
       01671 1E86     4     PAGE ( SHOW_ERASED_ALL_GE / 1024 ),
       01672 12DD     3     CALL ( SHOW_ERASED_ALL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01673 1E85     4     PAGE ( $ / 1024 ),
   475 01674 17F5 C        	JMP	VGA_STRING1
   476 01675      C        VGA_STRING_11:
   477            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_MEMO_RECORDING_EN,#SHOW_MEMO_RECORDING_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01675 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01676 167C     2     JMP ( $ + 6 ),
       01677 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MEMO_RECORDING_EN ),
                      3  M  LCALL  SHOW_MEMO_RECORDING_EN 
                      4  M  PAGE #( SHOW_MEMO_RECORDING_EN ),
       01678 1E86     4     PAGE ( SHOW_MEMO_RECORDING_EN / 1024 ),
       01679 1056     3     CALL ( SHOW_MEMO_RECORDING_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0167A 1E85     4     PAGE ( $ / 1024 ),
       0167B 1680     1     JMP ( $ + 5 ),
       0167C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MEMO_RECORDING_GE ),
                      3  M  LCALL  SHOW_MEMO_RECORDING_GE 
                      4  M  PAGE #( SHOW_MEMO_RECORDING_GE ),
       0167D 1E86     4     PAGE ( SHOW_MEMO_RECORDING_GE / 1024 ),
       0167E 1227     3     CALL ( SHOW_MEMO_RECORDING_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0167F 1E85     4     PAGE ( $ / 1024 ),
   478 01680 17F5 C        	JMP	VGA_STRING1
   479 01681      C        VGA_STRING_12:
   480            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ICM_RECORDING_EN,#SHOW_ICM_RECORDING_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01681 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01682 1688     2     JMP ( $ + 6 ),
       01683 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ICM_RECORDING_EN ),
                      3  M  LCALL  SHOW_ICM_RECORDING_EN 
                      4  M  PAGE #( SHOW_ICM_RECORDING_EN ),
       01684 1E86     4     PAGE ( SHOW_ICM_RECORDING_EN / 1024 ),
       01685 1076     3     CALL ( SHOW_ICM_RECORDING_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01686 1E85     4     PAGE ( $ / 1024 ),
       01687 168C     1     JMP ( $ + 5 ),
       01688 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ICM_RECORDING_GE ),
                      3  M  LCALL  SHOW_ICM_RECORDING_GE 
                      4  M  PAGE #( SHOW_ICM_RECORDING_GE ),
       01689 1E86     4     PAGE ( SHOW_ICM_RECORDING_GE / 1024 ),
       0168A 1245     3     CALL ( SHOW_ICM_RECORDING_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0168B 1E85     4     PAGE ( $ / 1024 ),
   481 0168C 17F5 C        	JMP	VGA_STRING1
   482 0168D      C        VGA_STRING_13:
   483            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_2WAY_RECORDING_EN,#SHOW_2WAY_RECORDING_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0168D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0168E 1694     2     JMP ( $ + 6 ),
       0168F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_2WAY_RECORDING_EN ),
                      3  M  LCALL  SHOW_2WAY_RECORDING_EN 
                      4  M  PAGE #( SHOW_2WAY_RECORDING_EN ),
       01690 1E86     4     PAGE ( SHOW_2WAY_RECORDING_EN / 1024 ),
       01691 1066     3     CALL ( SHOW_2WAY_RECORDING_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01692 1E85     4     PAGE ( $ / 1024 ),
       01693 1698     1     JMP ( $ + 5 ),
       01694 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_2WAY_RECORDING_GE ),
                      3  M  LCALL  SHOW_2WAY_RECORDING_GE 
                      4  M  PAGE #( SHOW_2WAY_RECORDING_GE ),
       01695 1E86     4     PAGE ( SHOW_2WAY_RECORDING_GE / 1024 ),
       01696 1237     3     CALL ( SHOW_2WAY_RECORDING_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01697 1E85     4     PAGE ( $ / 1024 ),
   484 01698 17F5 C        	JMP	VGA_STRING1
   485 01699      C        VGA_STRING_14:
   486            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_NO_NUMBER_EN,#SHOW_NO_NUMBER_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01699 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0169A 16A0     2     JMP ( $ + 6 ),
       0169B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NO_NUMBER_EN ),
                      3  M  LCALL  SHOW_NO_NUMBER_EN 
                      4  M  PAGE #( SHOW_NO_NUMBER_EN ),
       0169C 1E86     4     PAGE ( SHOW_NO_NUMBER_EN / 1024 ),
       0169D 1085     3     CALL ( SHOW_NO_NUMBER_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0169E 1E85     4     PAGE ( $ / 1024 ),
       0169F 16A4     1     JMP ( $ + 5 ),
       016A0 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NO_NUMBER_GE ),
                      3  M  LCALL  SHOW_NO_NUMBER_GE 
                      4  M  PAGE #( SHOW_NO_NUMBER_GE ),
       016A1 1E86     4     PAGE ( SHOW_NO_NUMBER_GE / 1024 ),
       016A2 1256     3     CALL ( SHOW_NO_NUMBER_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016A3 1E85     4     PAGE ( $ / 1024 ),
   487 016A4 17F5 C        	JMP	VGA_STRING1
   488 016A5      C        VGA_STRING_15:
   489            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_LONG_DISTANCE_CALL_EN,#SHOW_LONG_DISTANCE_CALL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016A5 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016A6 16AC     2     JMP ( $ + 6 ),
       016A7 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_LONG_DISTANCE_CALL_EN ),
                      3  M  LCALL  SHOW_LONG_DISTANCE_CALL_EN 
                      4  M  PAGE #( SHOW_LONG_DISTANCE_CALL_EN ),
       016A8 1E86     4     PAGE ( SHOW_LONG_DISTANCE_CALL_EN / 1024 ),
       016A9 1090     3     CALL ( SHOW_LONG_DISTANCE_CALL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016AA 1E85     4     PAGE ( $ / 1024 ),
       016AB 16B0     1     JMP ( $ + 5 ),
       016AC 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_LONG_DISTANCE_CALL_GE ),
                      3  M  LCALL  SHOW_LONG_DISTANCE_CALL_GE 
                      4  M  PAGE #( SHOW_LONG_DISTANCE_CALL_GE ),
       016AD 1E86     4     PAGE ( SHOW_LONG_DISTANCE_CALL_GE / 1024 ),
       016AE 1264     3     CALL ( SHOW_LONG_DISTANCE_CALL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016AF 1E85     4     PAGE ( $ / 1024 ),
   490 016B0 17F5 C        	JMP	VGA_STRING1
   491 016B1      C        VGA_STRING_16:
   492            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_LCD_CONTRAST_EN,#SHOW_LCD_CONTRAST_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016B1 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016B2 16B8     2     JMP ( $ + 6 ),
       016B3 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_LCD_CONTRAST_EN ),
                      3  M  LCALL  SHOW_LCD_CONTRAST_EN 
                      4  M  PAGE #( SHOW_LCD_CONTRAST_EN ),
       016B4 1E86     4     PAGE ( SHOW_LCD_CONTRAST_EN / 1024 ),
       016B5 10A4     3     CALL ( SHOW_LCD_CONTRAST_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016B6 1E85     4     PAGE ( $ / 1024 ),
       016B7 16BC     1     JMP ( $ + 5 ),
       016B8 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_LCD_CONTRAST_GE ),
                      3  M  LCALL  SHOW_LCD_CONTRAST_GE 
                      4  M  PAGE #( SHOW_LCD_CONTRAST_GE ),
       016B9 1E86     4     PAGE ( SHOW_LCD_CONTRAST_GE / 1024 ),
       016BA 1273     3     CALL ( SHOW_LCD_CONTRAST_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016BB 1E85     4     PAGE ( $ / 1024 ),
   493 016BC 17F5 C        	JMP	VGA_STRING1
   494 016BD      C        VGA_STRING_17:
   495            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SET_RING_EN,#SHOW_SET_RING_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016BD 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016BE 16C4     2     JMP ( $ + 6 ),
       016BF 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_RING_EN ),
                      3  M  LCALL  SHOW_SET_RING_EN 
                      4  M  PAGE #( SHOW_SET_RING_EN ),
       016C0 1E86     4     PAGE ( SHOW_SET_RING_EN / 1024 ),
       016C1 110A     3     CALL ( SHOW_SET_RING_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016C2 1E85     4     PAGE ( $ / 1024 ),
       016C3 16C8     1     JMP ( $ + 5 ),
       016C4 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_RING_GE ),
                      3  M  LCALL  SHOW_SET_RING_GE 
                      4  M  PAGE #( SHOW_SET_RING_GE ),
       016C5 1E86     4     PAGE ( SHOW_SET_RING_GE / 1024 ),
       016C6 1281     3     CALL ( SHOW_SET_RING_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016C7 1E85     4     PAGE ( $ / 1024 ),
   496 016C8 17F5 C        	JMP	VGA_STRING1
   497 016C9      C        VGA_STRING_18:
   498            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SET_REMOTE_CODE_EN,#SHOW_SET_REMOTE_CODE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016C9 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016CA 16D0     2     JMP ( $ + 6 ),
       016CB 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_REMOTE_CODE_EN ),
                      3  M  LCALL  SHOW_SET_REMOTE_CODE_EN 
                      4  M  PAGE #( SHOW_SET_REMOTE_CODE_EN ),
       016CC 1E86     4     PAGE ( SHOW_SET_REMOTE_CODE_EN / 1024 ),
       016CD 10B2     3     CALL ( SHOW_SET_REMOTE_CODE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016CE 1E85     4     PAGE ( $ / 1024 ),
       016CF 16D4     1     JMP ( $ + 5 ),
       016D0 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_REMOTE_CODE_GE ),
                      3  M  LCALL  SHOW_SET_REMOTE_CODE_GE 
                      4  M  PAGE #( SHOW_SET_REMOTE_CODE_GE ),
       016D1 1E86     4     PAGE ( SHOW_SET_REMOTE_CODE_GE / 1024 ),
       016D2 1292     3     CALL ( SHOW_SET_REMOTE_CODE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016D3 1E85     4     PAGE ( $ / 1024 ),
   499 016D4 17F5 C        	JMP	VGA_STRING1
   500 016D5      C        VGA_STRING_19:
   501            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SET_LONG_CODE_EN,#SHOW_SET_LONG_CODE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016D5 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016D6 16DC     2     JMP ( $ + 6 ),
       016D7 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_LONG_CODE_EN ),
                      3  M  LCALL  SHOW_SET_LONG_CODE_EN 
                      4  M  PAGE #( SHOW_SET_LONG_CODE_EN ),
       016D8 1E86     4     PAGE ( SHOW_SET_LONG_CODE_EN / 1024 ),
       016D9 10C3     3     CALL ( SHOW_SET_LONG_CODE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016DA 1E85     4     PAGE ( $ / 1024 ),
       016DB 16E0     1     JMP ( $ + 5 ),
       016DC 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SET_LONG_CODE_GE ),
                      3  M  LCALL  SHOW_SET_LONG_CODE_GE 
                      4  M  PAGE #( SHOW_SET_LONG_CODE_GE ),
       016DD 1E86     4     PAGE ( SHOW_SET_LONG_CODE_GE / 1024 ),
       016DE 12A2     3     CALL ( SHOW_SET_LONG_CODE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016DF 1E85     4     PAGE ( $ / 1024 ),
   502 016E0 17F5 C        	JMP	VGA_STRING1
   503 016E1      C        VGA_STRING_20:
   504            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM_RECORDING_EN,#SHOW_OGM_RECORDING_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016E1 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016E2 16E8     2     JMP ( $ + 6 ),
       016E3 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_RECORDING_EN ),
                      3  M  LCALL  SHOW_OGM_RECORDING_EN 
                      4  M  PAGE #( SHOW_OGM_RECORDING_EN ),
       016E4 1E86     4     PAGE ( SHOW_OGM_RECORDING_EN / 1024 ),
       016E5 10D2     3     CALL ( SHOW_OGM_RECORDING_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016E6 1E85     4     PAGE ( $ / 1024 ),
       016E7 16EC     1     JMP ( $ + 5 ),
       016E8 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_RECORDING_GE ),
                      3  M  LCALL  SHOW_OGM_RECORDING_GE 
                      4  M  PAGE #( SHOW_OGM_RECORDING_GE ),
       016E9 1E86     4     PAGE ( SHOW_OGM_RECORDING_GE / 1024 ),
       016EA 12BC     3     CALL ( SHOW_OGM_RECORDING_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016EB 1E85     4     PAGE ( $ / 1024 ),
   505 016EC 17F5 C        	JMP	VGA_STRING1
   506 016ED      C        VGA_STRING_21:
   507            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM_PLAYBACK_EN,#SHOW_OGM_PLAYBACK_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016ED 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016EE 16F4     2     JMP ( $ + 6 ),
       016EF 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_PLAYBACK_EN ),
                      3  M  LCALL  SHOW_OGM_PLAYBACK_EN 
                      4  M  PAGE #( SHOW_OGM_PLAYBACK_EN ),
       016F0 1E86     4     PAGE ( SHOW_OGM_PLAYBACK_EN / 1024 ),
       016F1 1100     3     CALL ( SHOW_OGM_PLAYBACK_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016F2 1E85     4     PAGE ( $ / 1024 ),
       016F3 16F8     1     JMP ( $ + 5 ),
       016F4 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_PLAYBACK_GE ),
                      3  M  LCALL  SHOW_OGM_PLAYBACK_GE 
                      4  M  PAGE #( SHOW_OGM_PLAYBACK_GE ),
       016F5 1E86     4     PAGE ( SHOW_OGM_PLAYBACK_GE / 1024 ),
       016F6 12C7     3     CALL ( SHOW_OGM_PLAYBACK_GE % 1024 ),
                      4  M  PAGE #( $ ),
       016F7 1E85     4     PAGE ( $ / 1024 ),
   508 016F8 17F5 C        	JMP	VGA_STRING1
   509 016F9      C        VGA_STRING_22:
   510            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_IN_REMOTE_EN,#SHOW_IN_REMOTE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       016F9 0C1E     2     JBC  SYS_FG , LANGUAGE 
       016FA 1700     2     JMP ( $ + 6 ),
       016FB 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_IN_REMOTE_EN ),
                      3  M  LCALL  SHOW_IN_REMOTE_EN 
                      4  M  PAGE #( SHOW_IN_REMOTE_EN ),
       016FC 1E86     4     PAGE ( SHOW_IN_REMOTE_EN / 1024 ),
       016FD 1119     3     CALL ( SHOW_IN_REMOTE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       016FE 1E85     4     PAGE ( $ / 1024 ),
       016FF 1704     1     JMP ( $ + 5 ),
       01700 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_IN_REMOTE_GE ),
                      3  M  LCALL  SHOW_IN_REMOTE_GE 
                      4  M  PAGE #( SHOW_IN_REMOTE_GE ),
       01701 1E86     4     PAGE ( SHOW_IN_REMOTE_GE / 1024 ),
       01702 1300     3     CALL ( SHOW_IN_REMOTE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01703 1E85     4     PAGE ( $ / 1024 ),
   511 01704 17F5 C        	JMP	VGA_STRING1
   512 01705      C        VGA_STRING_23:
   513            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SUNDAY_EN,#SHOW_SUNDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01705 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01706 170C     2     JMP ( $ + 6 ),
       01707 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SUNDAY_EN ),
                      3  M  LCALL  SHOW_SUNDAY_EN 
                      4  M  PAGE #( SHOW_SUNDAY_EN ),
       01708 1E86     4     PAGE ( SHOW_SUNDAY_EN / 1024 ),
       01709 1124     3     CALL ( SHOW_SUNDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0170A 1E85     4     PAGE ( $ / 1024 ),
       0170B 1710     1     JMP ( $ + 5 ),
       0170C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SUNDAY_GE ),
                      3  M  LCALL  SHOW_SUNDAY_GE 
                      4  M  PAGE #( SHOW_SUNDAY_GE ),
       0170D 1E86     4     PAGE ( SHOW_SUNDAY_GE / 1024 ),
       0170E 12EE     3     CALL ( SHOW_SUNDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0170F 1E85     4     PAGE ( $ / 1024 ),
   514 01710 17F5 C        	JMP	VGA_STRING1
   515 01711      C        VGA_STRING_24:
   516            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_MONDAY_EN,#SHOW_MONDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01711 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01712 1718     2     JMP ( $ + 6 ),
       01713 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MONDAY_EN ),
                      3  M  LCALL  SHOW_MONDAY_EN 
                      4  M  PAGE #( SHOW_MONDAY_EN ),
       01714 1E86     4     PAGE ( SHOW_MONDAY_EN / 1024 ),
       01715 112C     3     CALL ( SHOW_MONDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01716 1E85     4     PAGE ( $ / 1024 ),
       01717 171C     1     JMP ( $ + 5 ),
       01718 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MONDAY_GE ),
                      3  M  LCALL  SHOW_MONDAY_GE 
                      4  M  PAGE #( SHOW_MONDAY_GE ),
       01719 1E86     4     PAGE ( SHOW_MONDAY_GE / 1024 ),
       0171A 130D     3     CALL ( SHOW_MONDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0171B 1E85     4     PAGE ( $ / 1024 ),
   517 0171C 17F5 C        	JMP	VGA_STRING1
   518 0171D      C        VGA_STRING_25:
   519            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_TUESDAY_EN,#SHOW_TUESDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0171D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0171E 1724     2     JMP ( $ + 6 ),
       0171F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_TUESDAY_EN ),
                      3  M  LCALL  SHOW_TUESDAY_EN 
                      4  M  PAGE #( SHOW_TUESDAY_EN ),
       01720 1E86     4     PAGE ( SHOW_TUESDAY_EN / 1024 ),
       01721 1134     3     CALL ( SHOW_TUESDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01722 1E85     4     PAGE ( $ / 1024 ),
       01723 1728     1     JMP ( $ + 5 ),
       01724 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_TUESDAY_GE ),
                      3  M  LCALL  SHOW_TUESDAY_GE 
                      4  M  PAGE #( SHOW_TUESDAY_GE ),
       01725 1E86     4     PAGE ( SHOW_TUESDAY_GE / 1024 ),
       01726 1315     3     CALL ( SHOW_TUESDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01727 1E85     4     PAGE ( $ / 1024 ),
   520 01728 17F5 C        	JMP	VGA_STRING1
   521 01729      C        VGA_STRING_26:
   522            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_WEDNSDAY_EN,#SHOW_WEDNSDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01729 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0172A 1730     2     JMP ( $ + 6 ),
       0172B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_WEDNSDAY_EN ),
                      3  M  LCALL  SHOW_WEDNSDAY_EN 
                      4  M  PAGE #( SHOW_WEDNSDAY_EN ),
       0172C 1E86     4     PAGE ( SHOW_WEDNSDAY_EN / 1024 ),
       0172D 113D     3     CALL ( SHOW_WEDNSDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0172E 1E85     4     PAGE ( $ / 1024 ),
       0172F 1734     1     JMP ( $ + 5 ),
       01730 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_WEDNSDAY_GE ),
                      3  M  LCALL  SHOW_WEDNSDAY_GE 
                      4  M  PAGE #( SHOW_WEDNSDAY_GE ),
       01731 1E86     4     PAGE ( SHOW_WEDNSDAY_GE / 1024 ),
       01732 131F     3     CALL ( SHOW_WEDNSDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01733 1E85     4     PAGE ( $ / 1024 ),
   523 01734 17F5 C        	JMP	VGA_STRING1
   524 01735      C        VGA_STRING_27:
   525            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_THURSDAY_EN,#SHOW_THURSDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01735 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01736 173C     2     JMP ( $ + 6 ),
       01737 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_THURSDAY_EN ),
                      3  M  LCALL  SHOW_THURSDAY_EN 
                      4  M  PAGE #( SHOW_THURSDAY_EN ),
       01738 1E86     4     PAGE ( SHOW_THURSDAY_EN / 1024 ),
       01739 1147     3     CALL ( SHOW_THURSDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0173A 1E85     4     PAGE ( $ / 1024 ),
       0173B 1740     1     JMP ( $ + 5 ),
       0173C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_THURSDAY_GE ),
                      3  M  LCALL  SHOW_THURSDAY_GE 
                      4  M  PAGE #( SHOW_THURSDAY_GE ),
       0173D 1E86     4     PAGE ( SHOW_THURSDAY_GE / 1024 ),
       0173E 1329     3     CALL ( SHOW_THURSDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0173F 1E85     4     PAGE ( $ / 1024 ),
   526 01740 17F5 C        	JMP	VGA_STRING1
   527 01741      C        VGA_STRING_28:
   528            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_FRIDAY_EN,#SHOW_FRIDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01741 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01742 1748     2     JMP ( $ + 6 ),
       01743 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_FRIDAY_EN ),
                      3  M  LCALL  SHOW_FRIDAY_EN 
                      4  M  PAGE #( SHOW_FRIDAY_EN ),
       01744 1E86     4     PAGE ( SHOW_FRIDAY_EN / 1024 ),
       01745 1151     3     CALL ( SHOW_FRIDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01746 1E85     4     PAGE ( $ / 1024 ),
       01747 174C     1     JMP ( $ + 5 ),
       01748 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_FRIDAY_GE ),
                      3  M  LCALL  SHOW_FRIDAY_GE 
                      4  M  PAGE #( SHOW_FRIDAY_GE ),
       01749 1E86     4     PAGE ( SHOW_FRIDAY_GE / 1024 ),
       0174A 1349     3     CALL ( SHOW_FRIDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0174B 1E85     4     PAGE ( $ / 1024 ),
   529 0174C 17F5 C        	JMP	VGA_STRING1
   530 0174D      C        VGA_STRING_29:
   531            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SATURDAY_EN,#SHOW_SATURDAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0174D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0174E 1754     2     JMP ( $ + 6 ),
       0174F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SATURDAY_EN ),
                      3  M  LCALL  SHOW_SATURDAY_EN 
                      4  M  PAGE #( SHOW_SATURDAY_EN ),
       01750 1E86     4     PAGE ( SHOW_SATURDAY_EN / 1024 ),
       01751 1159     3     CALL ( SHOW_SATURDAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01752 1E85     4     PAGE ( $ / 1024 ),
       01753 1758     1     JMP ( $ + 5 ),
       01754 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SATURDAY_GE ),
                      3  M  LCALL  SHOW_SATURDAY_GE 
                      4  M  PAGE #( SHOW_SATURDAY_GE ),
       01755 1E86     4     PAGE ( SHOW_SATURDAY_GE / 1024 ),
       01756 1352     3     CALL ( SHOW_SATURDAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01757 1E85     4     PAGE ( $ / 1024 ),
   532 01758 17F5 C        	JMP	VGA_STRING1
   533 01759      C        VGA_STRING_30:
   534            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_MEMORY_FULL_EN,#SHOW_MEMORY_FULL_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01759 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0175A 1760     2     JMP ( $ + 6 ),
       0175B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MEMORY_FULL_EN ),
                      3  M  LCALL  SHOW_MEMORY_FULL_EN 
                      4  M  PAGE #( SHOW_MEMORY_FULL_EN ),
       0175C 1E86     4     PAGE ( SHOW_MEMORY_FULL_EN / 1024 ),
       0175D 1163     3     CALL ( SHOW_MEMORY_FULL_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0175E 1E85     4     PAGE ( $ / 1024 ),
       0175F 1764     1     JMP ( $ + 5 ),
       01760 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_MEMORY_FULL_GE ),
                      3  M  LCALL  SHOW_MEMORY_FULL_GE 
                      4  M  PAGE #( SHOW_MEMORY_FULL_GE ),
       01761 1E86     4     PAGE ( SHOW_MEMORY_FULL_GE / 1024 ),
       01762 1335     3     CALL ( SHOW_MEMORY_FULL_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01763 1E85     4     PAGE ( $ / 1024 ),
   535 01764 17F5 C        	JMP	VGA_STRING1
   536 01765      C        VGA_STRING_31:
   537            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_NEW_EN,#SHOW_NEW_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01765 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01766 176C     2     JMP ( $ + 6 ),
       01767 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NEW_EN ),
                      3  M  LCALL  SHOW_NEW_EN 
                      4  M  PAGE #( SHOW_NEW_EN ),
       01768 1E86     4     PAGE ( SHOW_NEW_EN / 1024 ),
       01769 1170     3     CALL ( SHOW_NEW_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0176A 1E85     4     PAGE ( $ / 1024 ),
       0176B 1770     1     JMP ( $ + 5 ),
       0176C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_NEW_GE ),
                      3  M  LCALL  SHOW_NEW_GE 
                      4  M  PAGE #( SHOW_NEW_GE ),
       0176D 1E86     4     PAGE ( SHOW_NEW_GE / 1024 ),
       0176E 1344     3     CALL ( SHOW_NEW_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0176F 1E85     4     PAGE ( $ / 1024 ),
   538 01770 17F5 C        	JMP	VGA_STRING1
   539 01771      C        VGA_STRING_32:
   540            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ENGLISH_EN,#SHOW_ENGLISH_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01771 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01772 1778     2     JMP ( $ + 6 ),
       01773 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ENGLISH_EN ),
                      3  M  LCALL  SHOW_ENGLISH_EN 
                      4  M  PAGE #( SHOW_ENGLISH_EN ),
       01774 1E86     4     PAGE ( SHOW_ENGLISH_EN / 1024 ),
       01775 1186     3     CALL ( SHOW_ENGLISH_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01776 1E85     4     PAGE ( $ / 1024 ),
       01777 177C     1     JMP ( $ + 5 ),
       01778 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_ENGLISH_GE ),
                      3  M  LCALL  SHOW_ENGLISH_GE 
                      4  M  PAGE #( SHOW_ENGLISH_GE ),
       01779 1E86     4     PAGE ( SHOW_ENGLISH_GE / 1024 ),
       0177A 136C     3     CALL ( SHOW_ENGLISH_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0177B 1E85     4     PAGE ( $ / 1024 ),
   541 0177C 17F5 C        	JMP	VGA_STRING1
   542 0177D      C        VGA_STRING_33:
   543            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_GERMAN_EN,#SHOW_GERMAN_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       0177D 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0177E 1784     2     JMP ( $ + 6 ),
       0177F 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_GERMAN_EN ),
                      3  M  LCALL  SHOW_GERMAN_EN 
                      4  M  PAGE #( SHOW_GERMAN_EN ),
       01780 1E86     4     PAGE ( SHOW_GERMAN_EN / 1024 ),
       01781 118F     3     CALL ( SHOW_GERMAN_EN % 1024 ),
                      4  M  PAGE #( $ ),
       01782 1E85     4     PAGE ( $ / 1024 ),
       01783 1788     1     JMP ( $ + 5 ),
       01784 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_GERMAN_GE ),
                      3  M  LCALL  SHOW_GERMAN_GE 
                      4  M  PAGE #( SHOW_GERMAN_GE ),
       01785 1E86     4     PAGE ( SHOW_GERMAN_GE / 1024 ),
       01786 118F     3     CALL ( SHOW_GERMAN_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01787 1E85     4     PAGE ( $ / 1024 ),
   544 01788 17F5 C        	JMP	VGA_STRING1
   545 01789      C        VGA_STRING_34:
   546            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_EDIT_EN,#SHOW_EDIT_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01789 0C1E     2     JBC  SYS_FG , LANGUAGE 
       0178A 1790     2     JMP ( $ + 6 ),
       0178B 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_EDIT_EN ),
                      3  M  LCALL  SHOW_EDIT_EN 
                      4  M  PAGE #( SHOW_EDIT_EN ),
       0178C 1E86     4     PAGE ( SHOW_EDIT_EN / 1024 ),
       0178D 1197     3     CALL ( SHOW_EDIT_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0178E 1E85     4     PAGE ( $ / 1024 ),
       0178F 1794     1     JMP ( $ + 5 ),
       01790 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_EDIT_GE ),
                      3  M  LCALL  SHOW_EDIT_GE 
                      4  M  PAGE #( SHOW_EDIT_GE ),
       01791 1E86     4     PAGE ( SHOW_EDIT_GE / 1024 ),
       01792 1376     3     CALL ( SHOW_EDIT_GE % 1024 ),
                      4  M  PAGE #( $ ),
       01793 1E85     4     PAGE ( $ / 1024 ),
   547 01794 17F5 C        	JMP	VGA_STRING1
   548 01795      C        VGA_STRING_35:
   549            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SEARCH_EN,#SHOW_SEARCH_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       01795 0C1E     2     JBC  SYS_FG , LANGUAGE 
       01796 179C     2     JMP ( $ + 6 ),
       01797 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SEARCH_EN ),
                      3  M  LCALL  SHOW_SEARCH_EN 
                      4  M  PAGE #( SHOW_SEARCH_EN ),
       01798 1E86     4     PAGE ( SHOW_SEARCH_EN / 1024 ),
       01799 119D     3     CALL ( SHOW_SEARCH_EN % 1024 ),
                      4  M  PAGE #( $ ),
       0179A 1E85     4     PAGE ( $ / 1024 ),
       0179B 17A0     1     JMP ( $ + 5 ),
       0179C 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_SEARCH_GE ),
                      3  M  LCALL  SHOW_SEARCH_GE 
                      4  M  PAGE #( SHOW_SEARCH_GE ),
       0179D 1E86     4     PAGE ( SHOW_SEARCH_GE / 1024 ),
       0179E 137E     3     CALL ( SHOW_SEARCH_GE % 1024 ),
                      4  M  PAGE #( $ ),
       0179F 1E85     4     PAGE ( $ / 1024 ),
   550 017A0 17F5 C        	JMP	VGA_STRING1
   551 017A1      C        VGA_STRING_36:
   552            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PLAY_EN,#SHOW_PLAY_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017A1 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017A2 17A8     2     JMP ( $ + 6 ),
       017A3 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PLAY_EN ),
                      3  M  LCALL  SHOW_PLAY_EN 
                      4  M  PAGE #( SHOW_PLAY_EN ),
       017A4 1E86     4     PAGE ( SHOW_PLAY_EN / 1024 ),
       017A5 11A5     3     CALL ( SHOW_PLAY_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017A6 1E85     4     PAGE ( $ / 1024 ),
       017A7 17AC     1     JMP ( $ + 5 ),
       017A8 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PLAY_GE ),
                      3  M  LCALL  SHOW_PLAY_GE 
                      4  M  PAGE #( SHOW_PLAY_GE ),
       017A9 1E86     4     PAGE ( SHOW_PLAY_GE / 1024 ),
       017AA 11AB     3     CALL ( SHOW_PLAY_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017AB 1E85     4     PAGE ( $ / 1024 ),
   553 017AC 17F5 C        	JMP	VGA_STRING1
   554 017AD      C        VGA_STRING_37:
   555            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_STOP_EN,#SHOW_STOP_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017AD 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017AE 17B4     2     JMP ( $ + 6 ),
       017AF 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_STOP_EN ),
                      3  M  LCALL  SHOW_STOP_EN 
                      4  M  PAGE #( SHOW_STOP_EN ),
       017B0 1E86     4     PAGE ( SHOW_STOP_EN / 1024 ),
       017B1 11B6     3     CALL ( SHOW_STOP_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017B2 1E85     4     PAGE ( $ / 1024 ),
       017B3 17B8     1     JMP ( $ + 5 ),
       017B4 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_STOP_GE ),
                      3  M  LCALL  SHOW_STOP_GE 
                      4  M  PAGE #( SHOW_STOP_GE ),
       017B5 1E86     4     PAGE ( SHOW_STOP_GE / 1024 ),
       017B6 11B6     3     CALL ( SHOW_STOP_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017B7 1E85     4     PAGE ( $ / 1024 ),
   556 017B8 17F5 C        	JMP	VGA_STRING1
   557 017B9      C        VGA_STRING_38:
   558            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PAUSE_EN,#SHOW_PAUSE_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017B9 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017BA 17C0     2     JMP ( $ + 6 ),
       017BB 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PAUSE_EN ),
                      3  M  LCALL  SHOW_PAUSE_EN 
                      4  M  PAGE #( SHOW_PAUSE_EN ),
       017BC 1E86     4     PAGE ( SHOW_PAUSE_EN / 1024 ),
       017BD 11BC     3     CALL ( SHOW_PAUSE_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017BE 1E85     4     PAGE ( $ / 1024 ),
       017BF 17C4     1     JMP ( $ + 5 ),
       017C0 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_PAUSE_GE ),
                      3  M  LCALL  SHOW_PAUSE_GE 
                      4  M  PAGE #( SHOW_PAUSE_GE ),
       017C1 1E86     4     PAGE ( SHOW_PAUSE_GE / 1024 ),
       017C2 11BC     3     CALL ( SHOW_PAUSE_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017C3 1E85     4     PAGE ( $ / 1024 ),
   559 017C4 17F5 C        	JMP	VGA_STRING1
   560 017C5      C        VGA_STRING_39:
   561            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_COPIED_INTO_BOOK_EN,#SHOW_COPIED_INTO_BOOK_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017C5 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017C6 17CC     2     JMP ( $ + 6 ),
       017C7 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_COPIED_INTO_BOOK_EN ),
                      3  M  LCALL  SHOW_COPIED_INTO_BOOK_EN 
                      4  M  PAGE #( SHOW_COPIED_INTO_BOOK_EN ),
       017C8 1E86     4     PAGE ( SHOW_COPIED_INTO_BOOK_EN / 1024 ),
       017C9 1386     3     CALL ( SHOW_COPIED_INTO_BOOK_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017CA 1E85     4     PAGE ( $ / 1024 ),
       017CB 17D0     1     JMP ( $ + 5 ),
       017CC 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_COPIED_INTO_BOOK_GE ),
                      3  M  LCALL  SHOW_COPIED_INTO_BOOK_GE 
                      4  M  PAGE #( SHOW_COPIED_INTO_BOOK_GE ),
       017CD 1E86     4     PAGE ( SHOW_COPIED_INTO_BOOK_GE / 1024 ),
       017CE 1398     3     CALL ( SHOW_COPIED_INTO_BOOK_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017CF 1E85     4     PAGE ( $ / 1024 ),
   562 017D0 17F5 C        	JMP	VGA_STRING1
   563 017D1      C        VGA_STRING_40:
   564            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM_EN,#SHOW_OGM_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017D1 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017D2 17D8     2     JMP ( $ + 6 ),
       017D3 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_EN ),
                      3  M  LCALL  SHOW_OGM_EN 
                      4  M  PAGE #( SHOW_OGM_EN ),
       017D4 1E86     4     PAGE ( SHOW_OGM_EN / 1024 ),
       017D5 13A9     3     CALL ( SHOW_OGM_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017D6 1E85     4     PAGE ( $ / 1024 ),
       017D7 17DC     1     JMP ( $ + 5 ),
       017D8 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM_GE ),
                      3  M  LCALL  SHOW_OGM_GE 
                      4  M  PAGE #( SHOW_OGM_GE ),
       017D9 1E86     4     PAGE ( SHOW_OGM_GE / 1024 ),
       017DA 13AE     3     CALL ( SHOW_OGM_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017DB 1E85     4     PAGE ( $ / 1024 ),
   565 017DC 17F5 C        	JMP	VGA_STRING1
   566 017DD      C        VGA_STRING_41:
   567            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_END_OF_NAMES_BOOK_EN,#SHOW_END_OF_NAMES_BOOK_GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017DD 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017DE 17E4     2     JMP ( $ + 6 ),
       017DF 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_END_OF_NAMES_BOOK_EN ),
                      3  M  LCALL  SHOW_END_OF_NAMES_BOOK_EN 
                      4  M  PAGE #( SHOW_END_OF_NAMES_BOOK_EN ),
       017E0 1E86     4     PAGE ( SHOW_END_OF_NAMES_BOOK_EN / 1024 ),
       017E1 13BC     3     CALL ( SHOW_END_OF_NAMES_BOOK_EN % 1024 ),
                      4  M  PAGE #( $ ),
       017E2 1E85     4     PAGE ( $ / 1024 ),
       017E3 17E8     1     JMP ( $ + 5 ),
       017E4 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_END_OF_NAMES_BOOK_GE ),
                      3  M  LCALL  SHOW_END_OF_NAMES_BOOK_GE 
                      4  M  PAGE #( SHOW_END_OF_NAMES_BOOK_GE ),
       017E5 1E86     4     PAGE ( SHOW_END_OF_NAMES_BOOK_GE / 1024 ),
       017E6 13CA     3     CALL ( SHOW_END_OF_NAMES_BOOK_GE % 1024 ),
                      4  M  PAGE #( $ ),
       017E7 1E85     4     PAGE ( $ / 1024 ),
   568 017E8 17F5 C        	JMP	VGA_STRING1
   569 017E9      C        VGA_STRING_42:
   570            C      M 	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM__EN,#SHOW_OGM__GE
                      2  M  JPB  SYS_FG , LANGUAGE ,( $ + 6 )
       017E9 0C1E     2     JBC  SYS_FG , LANGUAGE 
       017EA 17F0     2     JMP ( $ + 6 ),
       017EB 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM__EN ),
                      3  M  LCALL  SHOW_OGM__EN 
                      4  M  PAGE #( SHOW_OGM__EN ),
       017EC 1E86     4     PAGE ( SHOW_OGM__EN / 1024 ),
       017ED 13A9     3     CALL ( SHOW_OGM__EN % 1024 ),
                      4  M  PAGE #( $ ),
       017EE 1E85     4     PAGE ( $ / 1024 ),
       017EF 17F4     1     JMP ( $ + 5 ),
       017F0 043A     1     MOV A, CONT 
                      2  M  CALL #( SHOW_OGM__GE ),
                      3  M  LCALL  SHOW_OGM__GE 
                      4  M  PAGE #( SHOW_OGM__GE ),
       017F1 1E86     4     PAGE ( SHOW_OGM__GE / 1024 ),
       017F2 13B6     3     CALL ( SHOW_OGM__GE % 1024 ),
                      4  M  PAGE #( $ ),
       017F3 1E85     4     PAGE ( $ / 1024 ),
   571 017F4 17F5 C        	JMP	VGA_STRING1
   572            C        
   573 017F5      C        VGA_STRING1:
   574 017F5 0056 C        	MOV	TEMP0,A
   575 017F6 1DFF C        	SUB	A,@CH_END
   576            C      M 	JPZ	VIEW_REVISE_RET
       017F7 0C83     1     JBC  _STATUS , Z 
       017F8 1598     1     JMP  VIEW_REVISE_RET ,
   577 017F9 0DFB C        	JBC	STR_REG,7
   578            C      M 	SRAM	TEMP0,7
       017FA 0BD6     1     BS  TEMP0 , 7 
   579 017FB 0416 C        	MOV	A,TEMP0
   580            C      M 	CALL	#VGA_STR
       017FC 104B     1     CALL ( VGA_STR % 1024 ),
   581 017FD 057A C        	INC	CONT
   582 017FE 15C3 C        	JMP	VGA_STRING_LOOP
   583            C        ;VGA_STRING_RET:
   584            C        	;RET
   585            C        
   586            C        
   587            C        FIND_TAB	MACRO	FIND_CONT,LANG_REG,LANG_BIT,#ADDR_EN,#ADDR_GE
   588            C        	JPB	LANG_REG,LANG_BIT,$+6
   589            C        	MOV	A,FIND_CONT
   590            C        	CALL	#ADDR_EN
   591            C        	JMP	$+5
   592            C        	MOV	A,FIND_CONT
   593            C        	CALL	#ADDR_GE
   594            C        	ENDM
   595            C        
   596            C        
   597            C        
   598            C        ; 显示更新第一行。
   599            C        ORG	0X1000
   600 01000      C        VGA_UPDATE:
   601            C      M 	BANK	0
       01000 0984     1     BC  _RSR , 6 
       01001 09C4     1     BC  _RSR , 7 
   602            C        	/*
   603            C        	JPNB	SYS_FG,LOCK_TOPLINE,VGA_UPDATE_1
   604            C        	CLRC
   605            C        	RRCA	SEC_REG
   606            C        	MOV	TEMP1,A
   607            C        	CLRC
   608            C        	RRCA	TMR_IDLE
   609            C        	ADD	A,@30
   610            C        	MOV	TEMP0,A
   611            C        	SUB	A,@59
   612            C        	JPC	$+3
   613            C        	SUB	TEMP0,@60
   614            C        	SUBA	TEMP1,TEMP0
   615            C        	JPZ	VGA_UPDATE_0
   616            C        	INC	TEMP0
   617            C        	SUBA	TEMP0,TEMP1
   618            C        	JPNZ	VGA_UPDATE_1
   619            C        VGA_UPDATE_0:
   620            C        	CALL	#STCP_IDLE
   621            C        	
   622            C        	*/
   623 01002      C        VGA_UPDATE_1:
   624            C      M 	JPB	SYS_FG,LOCK_TOPLINE,VGA_UPDATE_TIME
       01002 0D5E     1     JBC  SYS_FG , LOCK_TOPLINE 
       01003 1414     1     JMP  VGA_UPDATE_TIME ,
   625            C        	
   626            C      M 	CRAM	STAMP_FG,STAMP_SEC
       01004 091D     1     BC  STAMP_FG , STAMP_SEC 
   627            C      M 	JPB	SEC_REG,0,$+3
       01005 0C2A     1     JBC  SEC_REG , 0 
       01006 1409     1     JMP ( $ + 3 ),
   628            C      M 	SRAM	STAMP_FG,STAMP_SEC
       01007 0B1D     1     BS  STAMP_FG , STAMP_SEC 
   629            C      M 	SRAM	SYS_FG,SYS_CLOCK
       01008 0ADE     1     BS  SYS_FG , SYS_CLOCK 
   630 01009 041D C        	MOV	A,STAMP_FG
   631            C      M 	CALL	#VGA_STAMP
                      2  M  LCALL  VGA_STAMP 
                      3  M  PAGE #( VGA_STAMP ),
       0100A 1E85     3     PAGE ( VGA_STAMP / 1024 ),
       0100B 1000     2     CALL ( VGA_STAMP % 1024 ),
                      3  M  PAGE #( $ ),
       0100C 1E84     3     PAGE ( $ / 1024 ),
   632            C      M 	JPNB	SYS_FG,SYS_CLOCK,VGA_UPDATE_TIME
       0100D 0EDE     1     JBS  SYS_FG , SYS_CLOCK 
       0100E 1414     1     JMP  VGA_UPDATE_TIME ,
   633            C      M 	CRAM	SYS_FG,SYS_CLOCK
       0100F 08DE     1     BC  SYS_FG , SYS_CLOCK 
   634            C        	
   635 01010 1073 C        	CALL	UPDATE_STAMP
   636 01011 1079 C        	CALL	UPDATE_NUM1
   637 01012 108E C        	CALL	UPDATE_NUM2
   638 01013 108F C        	CALL	UPDATE_STR
   639 01014      C        VGA_UPDATE_TIME:
   640            C        	
   641            C      M 	BANK	1
       01014 0B84     1     BS  _RSR , 6 
       01015 09C4     1     BC  _RSR , 7 
   642            C      M 	JPNB	SYS_FG,TIME,VGA_UPDATE_RET
       01016 0FDE     1     JBS  SYS_FG , TIME 
       01017 1430     1     JMP  VGA_UPDATE_RET ,
   643 01018 1860 C        	MOV	A,@(STYLE_CENTER)
   644            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       01019 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       0101A 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       0101B 1E84     3     PAGE ( $ / 1024 ),
   645 0101C 042E C        	MOV	A,TIME_HOUR
   646            C      M 	JPZ	VGA_UPDATE_TIME_1
       0101D 0C83     1     JBC  _STATUS , Z 
       0101E 1424     1     JMP  VGA_UPDATE_TIME_1 ,
   647 0101F 1031 C        	CALL	UPDATE_TIME
   648 01020 1811 C        	MOV	A,@0X11
   649            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       01021 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       01022 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       01023 1E84     3     PAGE ( $ / 1024 ),
   650 01024      C        VGA_UPDATE_TIME_1:
   651 01024 042D C        	MOV	A,TIME_MIN
   652 01025 1031 C        	CALL	UPDATE_TIME
   653 01026 1811 C        	MOV	A,@0X11
   654            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       01027 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       01028 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       01029 1E84     3     PAGE ( $ / 1024 ),
   655            C        
   656 0102A 042C C        	MOV	A,TIME_SEC
   657 0102B 1031 C        	CALL	UPDATE_TIME
   658 0102C 18FF C        	MOV	A,@CH_END
   659            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       0102D 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       0102E 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       0102F 1E84     3     PAGE ( $ / 1024 ),
   660            C        
   661 01030      C        VGA_UPDATE_RET:
   662 01030 0012 C        	RET
   663            C        	
   664            C        
   665            C        
   666 01031      C        UPDATE_TIME:
   667 01031 0056 C        	MOV	GENE_A,A
   668            C      M 	CALL	#MATH_HTD
       01032 1100     1     CALL ( MATH_HTD % 1024 ),
   669            C      M 	MOV	BANK1_TEMP0,RESULT
       01033 0418     1     MOV A, RESULT 
       01034 0060     1     MOV  BANK1_TEMP0 ,A
   670 01035 0720 C        	SWAPA	BANK1_TEMP0
   671 01036 1A0F C        	AND	A,@0X0F
   672            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       01037 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       01038 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       01039 1E84     3     PAGE ( $ / 1024 ),
   673            C      M 	ANDA	BANK1_TEMP0,@0X0F
       0103A 180F     1     MOV A,@( 15 )
       0103B 02A0     1     AND A, BANK1_TEMP0 
   674            C      M 	CALL	#VGA_NUM2
                      2  M  LCALL  VGA_NUM2 
                      3  M  PAGE #( VGA_NUM2 ),
       0103C 1E85     3     PAGE ( VGA_NUM2 / 1024 ),
       0103D 1024     2     CALL ( VGA_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       0103E 1E84     3     PAGE ( $ / 1024 ),
   675 0103F 0012 C        	RET
   676            C        
   677 01040      C        VGA_HOUR:
   678 01040 0056 C        	MOV	GENE_A,A
   679            C      M 	BANK	1
       01041 0B84     1     BS  _RSR , 6 
       01042 09C4     1     BC  _RSR , 7 
   680            C      M 	JPNB	R1_SYS_FG,TIMEFORMAT,VGA_HOUR_RET
       01043 0E32     1     JBS  R1_SYS_FG , TIMEFORMAT 
       01044 144F     1     JMP  VGA_HOUR_RET ,
   681            C      M 	SUBA	GENE_A,@12
       01045 180C     1     MOV A,@( 12 )
       01046 0116     1     SUB A, GENE_A 
   682            C      M 	JPNC	$+2
       01047 0E03     1     JBS  _STATUS , C 
       01048 144A     1     JMP ( $ + 2 ),
   683 01049 0056 C        	MOV	GENE_A,A
   684 0104A 0416 C        	MOV	A,GENE_A
   685            C      M 	JPNZ	VGA_HOUR_RET
       0104B 0E83     1     JBS  _STATUS , Z 
       0104C 144F     1     JMP  VGA_HOUR_RET ,
   686            C      M 	MOV	GENE_A,@12
       0104D 180C     1     MOV A,@( 12 )
       0104E 0056     1     MOV  GENE_A ,A
   687 0104F      C        VGA_HOUR_RET:
   688            C      M 	BANK	0
       0104F 0984     1     BC  _RSR , 6 
       01050 09C4     1     BC  _RSR , 7 
   689 01051 0416 C        	MOV	A,GENE_A
   690            C        
   691 01052      C        VGA_TIME:
   692 01052 0056 C        	MOV	GENE_A,A
   693            C      M 	CALL	#MATH_HTD
       01053 1100     1     CALL ( MATH_HTD % 1024 ),
   694            C      M 	MOV	BANK0_TEMP0,RESULT
       01054 0418     1     MOV A, RESULT 
       01055 0060     1     MOV  BANK0_TEMP0 ,A
   695 01056 0720 C        	SWAPA	BANK0_TEMP0
   696 01057 1A0F C        	AND	A,@(0X0F)
   697            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       01058 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       01059 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0105A 1E84     3     PAGE ( $ / 1024 ),
   698            C      M 	ANDA	BANK0_TEMP0,@(0X0F)
       0105B 180F     1     MOV A,@( 15 )
       0105C 02A0     1     AND A, BANK0_TEMP0 
   699            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       0105D 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       0105E 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0105F 1E84     3     PAGE ( $ / 1024 ),
   700 01060 0012 C        	RET
   701 01061      C        VGA_MONTH:
   702 01061 0056 C        	MOV	GENE_A,A
   703            C      M 	CALL	#MATH_HTD
       01062 1100     1     CALL ( MATH_HTD % 1024 ),
   704            C      M 	MOV	BANK0_TEMP0,RESULT
       01063 0418     1     MOV A, RESULT 
       01064 0060     1     MOV  BANK0_TEMP0 ,A
   705 01065 0720 C        	SWAPA	BANK0_TEMP0
   706 01066 1A0F C        	AND	A,@(0X0F)
   707            C      M 	JPNZ	$+2
       01067 0E83     1     JBS  _STATUS , Z 
       01068 146A     1     JMP ( $ + 2 ),
   708 01069 1810 C        	MOV	A,@NUM_BLANK
   709            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       0106A 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       0106B 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0106C 1E84     3     PAGE ( $ / 1024 ),
   710            C      M 	ANDA	BANK0_TEMP0,@(0X0F)
       0106D 180F     1     MOV A,@( 15 )
       0106E 02A0     1     AND A, BANK0_TEMP0 
   711            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       0106F 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       01070 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       01071 1E84     3     PAGE ( $ / 1024 ),
   712 01072 0012 C        	RET
   713            C        
   714 01073      C        UPDATE_STAMP:
   715            C      M 	CRAM	STAMP_FG,STAMP_NEW
       01073 085D     1     BC  STAMP_FG , STAMP_NEW 
   716 01074 042C C        	MOV	A,NEW_CALL
   717            C      M 	JPZ	UPDATE_STAMP_RET
       01075 0C83     1     JBC  _STATUS , Z 
       01076 1478     1     JMP  UPDATE_STAMP_RET ,
   718            C      M 	SRAM	STAMP_FG,STAMP_NEW
       01077 0A5D     1     BS  STAMP_FG , STAMP_NEW 
   719 01078      C        UPDATE_STAMP_RET:
   720 01078 0012 C        	RET
   721            C        
   722 01079      C        UPDATE_NUM1:
   723 01079 1800 C        	MOV	A,@0
   724            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       0107A 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       0107B 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0107C 1E84     3     PAGE ( $ / 1024 ),
   725            C        	
   726            C      M 	BANK	0
       0107D 0984     1     BC  _RSR , 6 
       0107E 09C4     1     BC  _RSR , 7 
   727 0107F 0428 C        	MOV	A,HOUR_REG
   728 01080 1040 C        	CALL	VGA_HOUR
   729            C        	
   730 01081 0429 C        	MOV	A,MIN_REG
   731 01082 1052 C        	CALL	VGA_TIME
   732            C        	
   733 01083 0426 C        	MOV	A,DAY_REG
   734 01084 1052 C        	CALL	VGA_TIME
   735            C        	
   736 01085 0425 C        	MOV	A,MONTH_REG
   737 01086 1061 C        	CALL	VGA_MONTH
   738            C        	
   739 01087 042B C        	MOV	A,TOTAL_CALL
   740 01088 1052 C        	CALL	VGA_TIME
   741            C        	
   742 01089 18FF C        	MOV	A,@CH_END
   743            C      M 	CALL	#VGA_NUM1
                      2  M  LCALL  VGA_NUM1 
                      3  M  PAGE #( VGA_NUM1 ),
       0108A 1E85     3     PAGE ( VGA_NUM1 / 1024 ),
       0108B 1008     2     CALL ( VGA_NUM1 % 1024 ),
                      3  M  PAGE #( $ ),
       0108C 1E84     3     PAGE ( $ / 1024 ),
   744 0108D 0012 C        	RET
   745            C        
   746 0108E      C        UPDATE_NUM2:
   747 0108E 0012 C        	RET
   748            C        
   749 0108F      C        UPDATE_STR:
   750            C      M 	BANK	0
       0108F 0984     1     BC  _RSR , 6 
       01090 09C4     1     BC  _RSR , 7 
   751            C      M 	JPB	EVENT,0,UPDATE_STR_NAME		; 响铃中，显示人名
       01091 0C1F     1     JBC  EVENT , 0 
       01092 14AF     1     JMP  UPDATE_STR_NAME ,
   752            C        	;MOV	A,TMR_NAME
   753            C        	;JPNZ	UPDATE_STR_RET
   754            C      M 	PAGE	#VGA_STR
       01093 1E85     1     PAGE ( VGA_STR / 1024 ),
   755 01094 1820 C        	MOV	A,@(STYLE_LEFT)
   756 01095 104B C        	CALL	VGA_STR
   757 01096 181F C        	MOV	A,@WD_NEW
   758 01097 11BF C        	CALL	VGA_STRING
   759 01098 1828 C        	MOV	A,@CH_COLON
   760 01099 104B C        	CALL	VGA_STR
   761            C      M 	MOV	GENE_A,NEW_MSG
       0109A 042E     1     MOV A, NEW_MSG 
       0109B 0056     1     MOV  GENE_A ,A
   762 0109C 119D C        	CALL	VGA_HEX_STR
   763 0109D 18FF C        	MOV	A,@CH_END
   764 0109E 104B C        	CALL	VGA_STR
   765            C        	
   766 0109F 1840 C        	MOV	A,@(STYLE_RIGHT)
   767 010A0 104B C        	CALL	VGA_STR
   768 010A1 1802 C        	MOV	A,@WD_TOTAL
   769 010A2 11BF C        	CALL	VGA_STRING
   770 010A3 1828 C        	MOV	A,@CH_COLON
   771 010A4 104B C        	CALL	VGA_STR
   772            C      M 	MOV	GENE_A,TOTAL_MSG
       010A5 042D     1     MOV A, TOTAL_MSG 
       010A6 0056     1     MOV  GENE_A ,A
   773 010A7 119D C        	CALL	VGA_HEX_STR
   774 010A8 18FF C        	MOV	A,@CH_END
   775 010A9 104B C        	CALL	VGA_STR
   776            C      M 	PAGE	#($)
       010AA 1E84     1     PAGE ( $ / 1024 ),
   777            C        	
   778            C      M 	CALL	#CLR_NUM2
                      2  M  LCALL  CLR_NUM2 
                      3  M  PAGE #( CLR_NUM2 ),
       010AB 1E85     3     PAGE ( CLR_NUM2 / 1024 ),
       010AC 107E     2     CALL ( CLR_NUM2 % 1024 ),
                      3  M  PAGE #( $ ),
       010AD 1E84     3     PAGE ( $ / 1024 ),
   779 010AE 14B8 C        	JMP	UPDATE_STR_RET
   780 010AF      C        UPDATE_STR_NAME:
   781            C      M 	JPB	_FSR,0,UPDATE_STR_INVALID
       010AF 0C0A     1     JBC  _FSR , 0 
       010B0 14B4     1     JMP  UPDATE_STR_INVALID ,
   782            C      M 	MOV	TMR_NAME,@16
       010B1 1810     1     MOV A,@( 16 )
       010B2 0078     1     MOV  TMR_NAME ,A
   783 010B3 0012 C        	RET
   784 010B4      C        UPDATE_STR_INVALID:
   785 010B4 0438 C        	MOV	A,TMR_NAME
   786            C      M 	JPNZ	UPDATE_STR_RET
       010B5 0E83     1     JBS  _STATUS , Z 
       010B6 14B8     1     JMP  UPDATE_STR_RET ,
   787            C      M 	CRAM	EVENT,0
       010B7 081F     1     BC  EVENT , 0 
   788 010B8      C        UPDATE_STR_RET:
   789 010B8 0012 C        	RET
   790            C        	
   495                     ; LCD驱动模块
   496                     ; 0X1800~0X1FD2
   497                     include	"lcddrv.asm"
     1            C        
     2            C        
     3            C        org 0x1C28
     4            C        
     5            C        /***************************************
     6            C           a
     7            C         f   b
     8            C           g
     9            C         e   c
    10            C           d
    11            C        ***************************************/
    12            C        
    13 01C28      C        second_line_tab:	;second line 0cbdgaef
    14 01C28 0020 C        	tbl
    15 01C29 1C77 C        	RETL	@0X77		; 0
    16 01C2A 1C60 C        	RETL	@0X60		; 1
    17 01C2B 1C3E C        	RETL	@0X3E		; 2
    18 01C2C 1C7C C        	RETL	@0X7C		; 3
    19 01C2D 1C69 C        	RETL	@0X69		; 4
    20 01C2E 1C5D C        	RETL	@0X5D		; 5
    21 01C2F 1C5F C        	RETL	@0X5F		; 6
    22 01C30 1C64 C        	RETL	@0X64		; 7
    23 01C31 1C7F C        	RETL	@0X7F		; 8
    24 01C32 1C7D C        	RETL	@0X7D		; 9
    25            C        ;--------------------------------------------------------------
    26 01C33 1C6F C        	RETL	@0X6F		; A
    27 01C34 1C5B C        	RETL	@0X5B		; b
    28 01C35 1C17 C        	RETL	@0X17		; C
    29 01C36 1C7A C        	RETL	@0X7A		; d
    30 01C37 1C1F C        	RETL	@0X1F		; E
    31 01C38 1C0F C        	RETL	@0X0F		; F
    32 01C39 1C00 C        	RETL	@0X0		; BLANK
    33 01C3A 1C08 C        	RETL	@0X08		; -
    34 01C3B 1C1B C        	RETL	@0X1B		; T
    35            C        
    36            C        ;ORG	0X1F00
    37 01C3C      C        third_line_taba: 
    38 01C3C 0020 C        	TBL
    39 01C3D 1C70 C                RETL	@0b01110000	; 0
    40 01C3E 1C00 C        	RETL	@0b00000000	; 1
    41 01C3F 1CC0 C        	RETL	@0b11000000	; 2
    42 01C40 1C88 C        	RETL	@0b10001000	; 3
    43 01C41 1C60 C        	RETL	@0b01100000	; 4
    44 01C42 1CB8 C        	RETL	@0b10111000	; 5
    45 01C43 1C70 C        	RETL	@0b01110000	; 6
    46 01C44 1C08 C        	RETL	@0b00001000	; 7
    47 01C45 1C50 C        	RETL	@0b01010000	; 8
    48 01C46 1C10 C        	RETL	@0b00010000	; 9
    49            C        	
    50 01C47 1CF0 C        	RETL	@0b11110000	; A
    51 01C48 1CF8 C        	RETL	@0b11111000	; B
    52 01C49 1C70 C        	RETL	@0b01110000	; C
    53 01C4A 1CF8 C        	RETL	@0b11111000	; D
    54 01C4B 1CF8 C        	RETL	@0b11111000	; E
    55 01C4C 1CF8 C        	RETL	@0b11111000	; F
    56 01C4D 1C70 C        	RETL	@0b01110000	; G
    57 01C4E 1CF8 C        	RETL	@0b11111000	; H
    58 01C4F 1C00 C        	RETL	@0b00000000	; I
    59 01C50 1C40 C        	RETL	@0b01000000	; J
    60 01C51 1CF8 C        	RETL	@0b11111000	; K
    61 01C52 1C00 C        	RETL	@0		; L
    62 01C53 1CF8 C        	RETL	@0xf8		; M
    63 01C54 1CF8 C        	RETL	@0b11111000	; N
    64 01C55 1C70 C        	RETL	@0b01110000	; O
    65 01C56 1CF8 C        	RETL	@0b11111000	; P
    66 01C57 1C70 C        	RETL	@0b01110000	; Q
    67 01C58 1CF8 C        	RETL	@0b11111000	; R
    68 01C59 1C90 C        	RETL	@0b10010000	; S
    69 01C5A 1C08 C        	RETL	@0b00001000	; T
    70 01C5B 1C78 C        	RETL	@0b01111000	; U
    71 01C5C 1C38 C        	RETL	@0b00111000	; V
    72 01C5D 1C78 C        	RETL	@0b01111000	; W
    73 01C5E 1C88 C        	RETL	@0b10001000	; X
    74 01C5F 1C08 C        	RETL	@0b00001000	; Y
    75 01C60 1C88 C        	RETL	@0b10001000	; Z
    76            C        	
    77 01C61 1C00 C                RETL	@0		; BLANK
    78            C                
    79 01C62 1CF8 C        	RETL	@0B11111000	; ■
    80            C        	
    81 01C63 1C10 C        	RETL	@0b00010000	; ?
    82 01C64 1C00 C        	RETL	@0b0		; !
    83 01C65 1C00 C        	RETL	@0b0		; :
    84 01C66 1C00 C        	RETL	@0B00000000	; .
    85            C        	
    86 01C67 1CF8 C        	RETL	@0B11111000	; START
    87 01C68 1CF8 C        	RETL	@0B11111000	; PAUSE
    88 01C69 1C88 C        	RETL	@0B10001000	; DEL
    89 01C6A 1C80 C        	RETL	@0B10000000	; /
    90 01C6B 1C08 C        	RETL	@0B00001000	; \
    91 01C6C 1C80 C        	RETL	@0B10000000	; _
    92            C        
    93            C        
    94 01C6D      C        third_line_tabb:
    95 01C6D 0020 C        	TBL
    96 01C6E 1CC8 C        	RETL	@0b11001000	; 0
    97 01C6F 1C90 C        	RETL	@0b10010000	; 1
    98 01C70 1CA8 C        	RETL	@0b10101000	; 2
    99 01C71 1CA8 C        	RETL	@0b10101000	; 3
   100 01C72 1C50 C        	RETL	@0b01010000	; 4
   101 01C73 1CA8 C        	RETL	@0b10101000	; 5
   102 01C74 1CA8 C        	RETL	@0b10101000	; 6
   103 01C75 1C08 C        	RETL	@0b00001000	; 7
   104 01C76 1CA8 C        	RETL	@0b10101000	; 8
   105 01C77 1CA8 C        	RETL	@0b10101000	; 9
   106            C        	
   107 01C78 1C28 C        	RETL	@0b00101000	; A
   108 01C79 1CA8 C        	RETL	@0b10101000	; B
   109 01C7A 1C88 C        	RETL	@0b10001000	; C
   110 01C7B 1C88 C        	RETL	@0b10001000	; D
   111 01C7C 1CA8 C        	RETL	@0b10101000	; E
   112 01C7D 1C28 C        	RETL	@0b00101000	; F
   113 01C7E 1C88 C        	RETL	@0b10001000	; G
   114 01C7F 1C20 C        	RETL	@0b00100000	; H
   115 01C80 1C88 C        	RETL	@0b10001000	; I
   116 01C81 1C80 C        	RETL	@0b10000000	; J
   117 01C82 1C20 C        	RETL	@0b00100000	; K
   118 01C83 1CF8 C        	RETL	@0xf8		; L
   119 01C84 1C10 C        	RETL	@0x10		; M
   120 01C85 1C10 C        	RETL	@0b00010000	; N
   121 01C86 1C88 C        	RETL	@0b10001000	; O
   122 01C87 1C28 C        	RETL	@0b00101000	; P
   123 01C88 1C88 C        	RETL	@0b10001000	; Q
   124 01C89 1C28 C        	RETL	@0b00101000	; R
   125 01C8A 1CA8 C        	RETL	@0b10101000	; S
   126 01C8B 1C08 C        	RETL	@0b00001000	; T
   127 01C8C 1C80 C        	RETL	@0b10000000	; U
   128 01C8D 1C40 C        	RETL	@0b01000000	; V
   129 01C8E 1C80 C        	RETL	@0b10000000	; W
   130 01C8F 1C50 C        	RETL	@0b01010000	; X
   131 01C90 1C10 C        	RETL	@0b00010000	; Y
   132 01C91 1CC8 C        	RETL	@0b11001000	; Z
   133            C        	
   134 01C92 1C00 C        	RETL	@0		; BLANK
   135            C        	
   136 01C93 1CF8 C        	RETL	@0B11111000	; ■
   137            C        	
   138 01C94 1C08 C        	RETL	@0b00001000	; ?
   139 01C95 1C00 C        	RETL	@0b0		; !
   140 01C96 1C00 C        	RETL	@0b0		; :
   141 01C97 1C00 C        	RETL	@0B00000000	; .
   142            C        	
   143 01C98 1CF8 C        	RETL	@0B11111000	; START
   144 01C99 1CF8 C        	RETL	@0B11111000	; PAUSE
   145 01C9A 1C88 C        	RETL	@0B10001000	; DEL
   146 01C9B 1C40 C        	RETL	@0B01000000	; /
   147 01C9C 1C10 C        	RETL	@0B00010000	; \
   148 01C9D 1C80 C        	RETL	@0B10000000	; _
   149            C        
   150            C        	
   151 01C9E      C        third_line_tabc:
   152 01C9E 0020 C        	TBL
   153 01C9F 1CA8 C        	RETL	@0b10101000	; 0
   154 01CA0 1CF8 C         	RETL	@0b11111000	; 1
   155 01CA1 1CA8 C         	RETL	@0b10101000	; 2
   156 01CA2 1CA8 C         	RETL	@0b10101000	; 3
   157 01CA3 1C48 C         	RETL	@0b01001000	; 4
   158 01CA4 1CA8 C         	RETL	@0b10101000	; 5
   159 01CA5 1CA8 C         	RETL	@0b10101000	; 6
   160 01CA6 1CC8 C         	RETL	@0b11001000	; 7
   161 01CA7 1CA8 C         	RETL	@0b10101000	; 8
   162 01CA8 1CA8 C         	RETL	@0b10101000	; 9
   163            C        	
   164 01CA9 1C28 C        	RETL	@0b00101000	; A
   165 01CAA 1CA8 C         	RETL	@0b10101000	; B
   166 01CAB 1C88 C         	RETL	@0b10001000	; C
   167 01CAC 1C88 C         	RETL	@0b10001000	; D
   168 01CAD 1CA8 C         	RETL	@0b10101000	; E
   169 01CAE 1C28 C         	RETL	@0b00101000	; F
   170 01CAF 1C88 C         	RETL	@0b10001000	; G
   171 01CB0 1C20 C         	RETL	@0b00100000	; H
   172 01CB1 1CF8 C         	RETL	@0b11111000	; I
   173 01CB2 1C88 C         	RETL	@0b10001000	; J
   174 01CB3 1C20 C         	RETL	@0b00100000	; K
   175 01CB4 1C80 C                RETL	@0b10000000	; L
   176 01CB5 1C60 C        	RETL	@0x60		; M
   177 01CB6 1C20 C        	RETL	@0b00100000	; N
   178 01CB7 1C88 C        	RETL	@0b10001000	; O
   179 01CB8 1C28 C        	RETL	@0b00101000	; P
   180 01CB9 1CA8 C        	RETL	@0b10101000	; Q
   181 01CBA 1C28 C        	RETL	@0b00101000	; R
   182 01CBB 1CA8 C        	RETL	@0b10101000	; S        
   183 01CBC 1CF8 C        	RETL	@0b11111000	; T
   184 01CBD 1C80 C        	RETL	@0b10000000	; U
   185 01CBE 1C80 C        	RETL	@0b10000000	; V
   186 01CBF 1C60 C        	RETL	@0b01100000	; W
   187 01CC0 1C20 C        	RETL	@0b00100000	; X
   188 01CC1 1CE0 C        	RETL	@0b11100000	; Y
   189 01CC2 1CA8 C        	RETL	@0b10101000	; Z
   190            C        	
   191 01CC3 1C00 C        	RETL	@0		; BLANK
   192            C        	
   193 01CC4 1CF8 C        	RETL	@0B11111000	; ■
   194            C        	
   195 01CC5 1CC8 C        	RETL	@0b11001000	; ?
   196 01CC6 1CB8 C        	RETL	@0b10111000	; !
   197 01CC7 1C50 C        	RETL	@0b01010000	; :
   198 01CC8 1C00 C        	RETL	@0B00000000	; .
   199            C        	
   200 01CC9 1C70 C        	RETL	@0B01110000	; START
   201 01CCA 1C00 C        	RETL	@0B00000000	; PAUSE
   202 01CCB 1C50 C        	RETL	@0B01010000	; DEL
   203 01CCC 1C20 C        	RETL	@0B00100000	; /
   204 01CCD 1C20 C        	RETL	@0B00100000	; \
   205 01CCE 1C80 C        	RETL	@0B10000000	; _
   206            C        
   207            C        
   208 01CCF      C        third_line_tabd:
   209 01CCF 0020 C        	TBL
   210 01CD0 1C98 C         	RETL	@0b10011000	; 0
   211 01CD1 1C80 C        	RETL	@0b10000000	; 1
   212 01CD2 1CA8 C        	RETL	@0b10101000	; 2
   213 01CD3 1CA8 C        	RETL	@0b10101000	; 3
   214 01CD4 1CF8 C        	RETL	@0b11111000	; 4
   215 01CD5 1CA8 C        	RETL	@0b10101000	; 5
   216 01CD6 1CA8 C        	RETL	@0b10101000	; 6
   217 01CD7 1C28 C        	RETL	@0b00101000	; 7
   218 01CD8 1CA8 C        	RETL	@0b10101000	; 8
   219 01CD9 1CA8 C        	RETL	@0b10101000	; 9
   220            C        	
   221 01CDA 1C28 C        	RETL	@0b00101000	; A
   222 01CDB 1CA8 C        	RETL	@0b10101000	; B
   223 01CDC 1C88 C        	RETL	@0b10001000	; C
   224 01CDD 1C88 C        	RETL	@0b10001000	; D
   225 01CDE 1CA8 C        	RETL	@0b10101000	; E
   226 01CDF 1C28 C        	RETL	@0b00101000	; F
   227 01CE0 1CA8 C        	RETL	@0b10101000	; G
   228 01CE1 1C20 C        	RETL	@0b00100000	; H
   229 01CE2 1C88 C        	RETL	@0b10001000	; I
   230 01CE3 1C78 C        	RETL	@0b01111000	; J
   231 01CE4 1C50 C        	RETL	@0b01010000	; K
   232 01CE5 1C80 C                RETL	@0b10000000	; L              
   233 01CE6 1C10 C         	RETL	@0b00010000	; M       
   234 01CE7 1C40 C         	RETL	@0b01000000	; N        
   235 01CE8 1C88 C         	RETL	@0b10001000	; O          
   236 01CE9 1C28 C         	RETL	@0b00101000	; P          
   237 01CEA 1C48 C         	RETL	@0b01001000	; Q          
   238 01CEB 1C68 C         	RETL	@0b01101000	; R          
   239 01CEC 1CA8 C         	RETL	@0b10101000	; S          
   240 01CED 1C08 C         	RETL	@0b00001000	; T          
   241 01CEE 1C80 C         	RETL	@0b10000000	; U          
   242 01CEF 1C40 C         	RETL	@0b01000000	; V          
   243 01CF0 1C80 C         	RETL	@0b10000000	; W          
   244 01CF1 1C50 C         	RETL	@0b01010000	; X          
   245 01CF2 1C10 C         	RETL	@0b00010000	; Y          
   246 01CF3 1C98 C         	RETL	@0b10011000	; Z
   247            C        	
   248 01CF4 1C00 C        	RETL	@0		; BLANK
   249            C        	
   250 01CF5 1CF8 C        	RETL	@0B11111000	; ■
   251            C         	
   252 01CF6 1C28 C        	RETL	@0b00101000	; ?
   253 01CF7 1C00 C        	RETL	@0b0		; !                             
   254 01CF8 1C00 C        	RETL	@0b0		; :
   255 01CF9 1C40 C        	RETL	@0B01000000	; .
   256            C        	
   257 01CFA 1C70 C        	RETL	@0B01110000	; START
   258 01CFB 1CF8 C        	RETL	@0B11111000	; PAUSE
   259 01CFC 1C20 C        	RETL	@0B00100000	; DEL
   260 01CFD 1C10 C        	RETL	@0B00010000	; /
   261 01CFE 1C40 C        	RETL	@0B01000000	; \
   262 01CFF 1C80 C        	RETL	@0B10000000	; _
   263            C        
   264            C        
   265            C        ORG	0X1D00
   266 01D00      C        third_line_tabe:
   267 01D00 0020 C        	TBL
   268 01D01 1C70 C        	RETL	@0b01110000	; 0
   269 01D02 1C00 C        	RETL	@0b00000000	; 1
   270 01D03 1C90 C        	RETL	@0b10010000	; 2
   271 01D04 1C50 C        	RETL	@0b01010000	; 3
   272 01D05 1C40 C        	RETL	@0b01000000	; 4
   273 01D06 1C40 C        	RETL	@0b01000000	; 5
   274 01D07 1C40 C        	RETL	@0b01000000	; 6
   275 01D08 1C18 C        	RETL	@0b00011000	; 7
   276 01D09 1C50 C        	RETL	@0b01010000	; 8
   277 01D0A 1C70 C        	RETL	@0b01110000	; 9
   278            C        
   279 01D0B 1CF0 C        	RETL	@0b11110000	; A
   280 01D0C 1C50 C        	RETL	@0b01010000	; B
   281 01D0D 1C88 C        	RETL	@0b10001000	; C
   282 01D0E 1C70 C        	RETL	@0b01110000	; D
   283 01D0F 1C88 C        	RETL	@0b10001000	; E
   284 01D10 1C08 C        	RETL	@0b00001000	; F
   285 01D11 1CE8 C        	RETL	@0b11101000	; G
   286 01D12 1CF8 C        	RETL	@0b11111000	; H
   287 01D13 1C00 C        	RETL	@0b00000000	; I
   288 01D14 1C08 C        	RETL	@0b00001000	; J
   289 01D15 1C88 C        	RETL	@0b10001000	; K
   290 01D16 1C80 C        	RETL	@0b10000000	; L
   291 01D17 1CF8 C        	RETL	@0xf8		; M
   292 01D18 1CF8 C        	RETL	@0b11111000	; N
   293 01D19 1C70 C        	RETL	@0b01110000	; O
   294 01D1A 1C10 C        	RETL	@0b00010000	; P
   295 01D1B 1CB0 C        	RETL	@0b10110000	; Q
   296 01D1C 1C90 C        	RETL	@0b10010000	; R
   297 01D1D 1C48 C        	RETL	@0b01001000	; S
   298 01D1E 1C08 C                RETL	@0b00001000	; T
   299 01D1F 1C78 C        	RETL	@0b01111000	; U
   300 01D20 1C38 C        	RETL	@0b00111000	; V
   301 01D21 1C78 C        	RETL	@0b01111000	; W
   302 01D22 1C88 C        	RETL	@0b10001000	; X
   303 01D23 1C08 C        	RETL	@0b00001000	; Y
   304 01D24 1C88 C        	RETL	@0b10001000	; Z
   305            C        	
   306 01D25 1C00 C        	RETL	@0		; BLANK
   307            C        
   308 01D26 1CF8 C        	RETL	@0B11111000	; ■
   309            C        
   310 01D27 1C10 C        	RETL	@0b00010000	; ?
   311 01D28 1C00 C        	RETL	@0b0		; !
   312 01D29 1C00 C        	RETL	@0b0		; :
   313 01D2A 1C00 C        	RETL	@0B00000000	; .
   314            C        	
   315 01D2B 1C20 C        	RETL	@0B00100000	; START
   316 01D2C 1CF8 C        	RETL	@0B11111000	; PAUSE
   317 01D2D 1CD8 C        	RETL	@0B11011000	; DEL
   318 01D2E 1C08 C        	RETL	@0B00001000	; /
   319 01D2F 1C80 C        	RETL	@0B10000000	; \
   320 01D30 1C80 C        	RETL	@0B10000000	; _
   321            C        
   322            C        
   323            C        
   324            C        
   325            C        ;ORG	0X1A44
   326 01D31      C        NUM_VERIFY:
   327 01D31 0011 C        	DISI
   328 01D32 0050 C        	MOV	INT_TEMP0,A
   329 01D33 1D12 C        	SUB	A,@0X12
   330            C      M 	JPC	NUM_VERIFY_RET
       01D34 0C03     1     JBC  _STATUS , C 
       01D35 1538     1     JMP  NUM_VERIFY_RET ,
   331            C      M 	MOV	INT_TEMP0,@NUM_BLANK
       01D36 1810     1     MOV A,@( NUM_BLANK )
       01D37 0050     1     MOV  INT_TEMP0 ,A
   332 01D38      C        NUM_VERIFY_RET:
   333 01D38 0410 C        	MOV	A,INT_TEMP0
   334 01D39 0010 C        	ENI
   335 01D3A 0012 C        	RET
   336            C        
   337 01D3B      C        STR_VERIFY:
   338 01D3B 0011 C        	DISI
   339 01D3C 0050 C        	MOV	INT_TEMP0,A
   340 01D3D 1D2F C        	SUB	A,@0X2F
   341            C      M 	JPC	STR_VERIFY_RET
       01D3E 0C03     1     JBC  _STATUS , C 
       01D3F 1542     1     JMP  STR_VERIFY_RET ,
   342            C      M 	MOV	INT_TEMP0,@CH_BLANK
       01D40 1824     1     MOV A,@( CH_BLANK )
       01D41 0050     1     MOV  INT_TEMP0 ,A
   343 01D42      C        STR_VERIFY_RET:
   344 01D42 0410 C        	MOV	A,INT_TEMP0
   345 01D43 0010 C        	ENI
   346 01D44 0012 C        	RET
   347            C        
   348            C        /***************************************
   349            C        显示第一行标志
   350            C        用一个寄存器标示8个标志
   351            C        .0		REPEAT
   352            C        .1		NEW
   353            C        .2		battery
   354            C        .3		MEMO
   355            C        .4		sencond
   356            C        .5		/
   357            C        .6		spk
   358            C        .7		CALL
   359            C        ***************************************/
   360 01D45      C        VIEW_STAMP:
   361            C        	;MOV	_RC,@LCD_CTRL
   362            C        	;CRAM	_RD,3
   363            C      M 	MOV	_RC,@(LCD_CTRL+1)
       01D45 1881     1     MOV A,@(( LCD_CTRL + 1 ))
       01D46 004C     1     MOV  _RC ,A
   364            C        	;NOP
   365            C      M 	MOV	TEMP0,_RD
       01D47 040D     1     MOV A, _RD 
       01D48 0056     1     MOV  TEMP0 ,A
   366            C        	
   367            C      M 	WR_STAMP	TEMP0,7,@(2+0X40),0,TEMP1
                      2  M  IOW  _IOCB ,@(( 2 + 64 ))
       01D49 1842     2     MOV A,@(( 2 + 64 ))
       01D4A 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 2 + 64 ))
       01D4B 1842     2     MOV A,@(( 2 + 64 ))
       01D4C 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D4D 040D     2     MOV A, _RD 
       01D4E 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 0 
       01D4F 0817     2     BC  TEMP1 , 0 
                      2  M  JPNB  TEMP0 , 7 ,( $ + 2 )
       01D50 0FD6     2     JBS  TEMP0 , 7 
       01D51 1553     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 0 
       01D52 0A17     2     BS  TEMP1 , 0 
                      2  M  IOW  _IOCC , TEMP1 
       01D53 0417     2     MOV A, TEMP1 
       01D54 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D55 0417     2     MOV A, TEMP1 
       01D56 004D     2     MOV  _RD ,A
   368            C      M 	WR_STAMP	TEMP0,6,@(6+0X40),1,TEMP1
                      2  M  IOW  _IOCB ,@(( 6 + 64 ))
       01D57 1846     2     MOV A,@(( 6 + 64 ))
       01D58 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 6 + 64 ))
       01D59 1846     2     MOV A,@(( 6 + 64 ))
       01D5A 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D5B 040D     2     MOV A, _RD 
       01D5C 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 1 
       01D5D 0857     2     BC  TEMP1 , 1 
                      2  M  JPNB  TEMP0 , 6 ,( $ + 2 )
       01D5E 0F96     2     JBS  TEMP0 , 6 
       01D5F 1561     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 1 
       01D60 0A57     2     BS  TEMP1 , 1 
                      2  M  IOW  _IOCC , TEMP1 
       01D61 0417     2     MOV A, TEMP1 
       01D62 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D63 0417     2     MOV A, TEMP1 
       01D64 004D     2     MOV  _RD ,A
   369            C      M 	WR_STAMP	TEMP0,5,@(11+0X40),0,TEMP1
                      2  M  IOW  _IOCB ,@(( 11 + 64 ))
       01D65 184B     2     MOV A,@(( 11 + 64 ))
       01D66 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 11 + 64 ))
       01D67 184B     2     MOV A,@(( 11 + 64 ))
       01D68 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D69 040D     2     MOV A, _RD 
       01D6A 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 0 
       01D6B 0817     2     BC  TEMP1 , 0 
                      2  M  JPNB  TEMP0 , 5 ,( $ + 2 )
       01D6C 0F56     2     JBS  TEMP0 , 5 
       01D6D 156F     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 0 
       01D6E 0A17     2     BS  TEMP1 , 0 
                      2  M  IOW  _IOCC , TEMP1 
       01D6F 0417     2     MOV A, TEMP1 
       01D70 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D71 0417     2     MOV A, TEMP1 
       01D72 004D     2     MOV  _RD ,A
   370            C      M 	WR_STAMP	TEMP0,4,@(28+0X40),0,TEMP1
                      2  M  IOW  _IOCB ,@(( 28 + 64 ))
       01D73 185C     2     MOV A,@(( 28 + 64 ))
       01D74 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 28 + 64 ))
       01D75 185C     2     MOV A,@(( 28 + 64 ))
       01D76 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D77 040D     2     MOV A, _RD 
       01D78 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 0 
       01D79 0817     2     BC  TEMP1 , 0 
                      2  M  JPNB  TEMP0 , 4 ,( $ + 2 )
       01D7A 0F16     2     JBS  TEMP0 , 4 
       01D7B 157D     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 0 
       01D7C 0A17     2     BS  TEMP1 , 0 
                      2  M  IOW  _IOCC , TEMP1 
       01D7D 0417     2     MOV A, TEMP1 
       01D7E 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D7F 0417     2     MOV A, TEMP1 
       01D80 004D     2     MOV  _RD ,A
   371            C      M 	WR_STAMP	TEMP0,3,@(35+0X40),2,TEMP1
                      2  M  IOW  _IOCB ,@(( 35 + 64 ))
       01D81 1863     2     MOV A,@(( 35 + 64 ))
       01D82 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 35 + 64 ))
       01D83 1863     2     MOV A,@(( 35 + 64 ))
       01D84 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D85 040D     2     MOV A, _RD 
       01D86 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 2 
       01D87 0897     2     BC  TEMP1 , 2 
                      2  M  JPNB  TEMP0 , 3 ,( $ + 2 )
       01D88 0ED6     2     JBS  TEMP0 , 3 
       01D89 158B     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 2 
       01D8A 0A97     2     BS  TEMP1 , 2 
                      2  M  IOW  _IOCC , TEMP1 
       01D8B 0417     2     MOV A, TEMP1 
       01D8C 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D8D 0417     2     MOV A, TEMP1 
       01D8E 004D     2     MOV  _RD ,A
   372            C      M 	WR_STAMP	TEMP0,2,@(35+0X40),1,TEMP1
                      2  M  IOW  _IOCB ,@(( 35 + 64 ))
       01D8F 1863     2     MOV A,@(( 35 + 64 ))
       01D90 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 35 + 64 ))
       01D91 1863     2     MOV A,@(( 35 + 64 ))
       01D92 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01D93 040D     2     MOV A, _RD 
       01D94 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 1 
       01D95 0857     2     BC  TEMP1 , 1 
                      2  M  JPNB  TEMP0 , 2 ,( $ + 2 )
       01D96 0E96     2     JBS  TEMP0 , 2 
       01D97 1599     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 1 
       01D98 0A57     2     BS  TEMP1 , 1 
                      2  M  IOW  _IOCC , TEMP1 
       01D99 0417     2     MOV A, TEMP1 
       01D9A 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01D9B 0417     2     MOV A, TEMP1 
       01D9C 004D     2     MOV  _RD ,A
   373            C      M 	WR_STAMP	TEMP0,1,@(36+0X40),1,TEMP1
                      2  M  IOW  _IOCB ,@(( 36 + 64 ))
       01D9D 1864     2     MOV A,@(( 36 + 64 ))
       01D9E 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 36 + 64 ))
       01D9F 1864     2     MOV A,@(( 36 + 64 ))
       01DA0 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01DA1 040D     2     MOV A, _RD 
       01DA2 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 1 
       01DA3 0857     2     BC  TEMP1 , 1 
                      2  M  JPNB  TEMP0 , 1 ,( $ + 2 )
       01DA4 0E56     2     JBS  TEMP0 , 1 
       01DA5 15A7     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 1 
       01DA6 0A57     2     BS  TEMP1 , 1 
                      2  M  IOW  _IOCC , TEMP1 
       01DA7 0417     2     MOV A, TEMP1 
       01DA8 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01DA9 0417     2     MOV A, TEMP1 
       01DAA 004D     2     MOV  _RD ,A
   374            C      M 	WR_STAMP	TEMP0,0,@(37+0X40),1,TEMP1
                      2  M  IOW  _IOCB ,@(( 37 + 64 ))
       01DAB 1865     2     MOV A,@(( 37 + 64 ))
       01DAC 000B     2     IOW  _IOCB ,
                      2  M  MOV  _RC ,@(( 37 + 64 ))
       01DAD 1865     2     MOV A,@(( 37 + 64 ))
       01DAE 004C     2     MOV  _RC ,A
                      2  M  MOV  TEMP1 , _RD 
       01DAF 040D     2     MOV A, _RD 
       01DB0 0057     2     MOV  TEMP1 ,A
                      2  M  CRAM  TEMP1 , 1 
       01DB1 0857     2     BC  TEMP1 , 1 
                      2  M  JPNB  TEMP0 , 0 ,( $ + 2 )
       01DB2 0E16     2     JBS  TEMP0 , 0 
       01DB3 15B5     2     JMP ( $ + 2 ),
                      2  M  SRAM  TEMP1 , 1 
       01DB4 0A57     2     BS  TEMP1 , 1 
                      2  M  IOW  _IOCC , TEMP1 
       01DB5 0417     2     MOV A, TEMP1 
       01DB6 000C     2     IOW  _IOCC ,
                      2  M  MOV  _RD , TEMP1 
       01DB7 0417     2     MOV A, TEMP1 
       01DB8 004D     2     MOV  _RD ,A
   375 01DB9 0012 C        	RET
   376            C        	
   377            C        
   378            C        WR_STAMP	MACRO	STAMP_REG,STAMP_BIT,@LCD_ADDR,LCD_BIT,STAMP_TEMP
   379            C        	IOW	_IOCB,@LCD_ADDR
   380            C        	MOV	_RC,@LCD_ADDR
   381            C        	;NOP
   382            C        	MOV	STAMP_TEMP,_RD
   383            C        	;IOR	STAMP_TEMP,_IOCC
   384            C        	CRAM	STAMP_TEMP,LCD_BIT
   385            C        	JPNB	STAMP_REG,STAMP_BIT,$+2
   386            C        	SRAM	STAMP_TEMP,LCD_BIT
   387            C        	IOW	_IOCC,STAMP_TEMP
   388            C        	MOV	_RD,STAMP_TEMP
   389            C        	ENDM
   390            C        	
   391            C        /***************************************
   392            C        显示第一行的数字
   393            C        数字信息按顺序列在10个数字寄存器中
   394            C        ***************************************/
   395 01DBA      C        VIEW_NUM1:
   396            C        	;MOV	_RC,@LCD_CTRL
   397            C        	;CRAM	_RD,4
   398 01DBA 00D6 C        	CLR	TEMP0				; 显示的位数
   399 01DBB      C        VIEW_NUM1_LOOP:
   400 01DBB 00D7 C        	CLR	TEMP1				; 显示的地址
   401 01DBC 00D8 C        	CLR	TEMP2				; 显示的列
   402 01DBD 0416 C        	MOV	A,TEMP0
   403 01DBE 1D09 C        	SUB	A,@9
   404 01DBF 1F82 C        	ADD	A,@(LCD_CTRL+2)
   405 01DC0 004C C        	MOV	_RC,A
   406            C      M 	MOV	TEMP3,_RD			; 得到需要显示的字符
       01DC1 040D     1     MOV A, _RD 
       01DC2 0059     1     MOV  TEMP3 ,A
   407            C      M 	JPNB	TEMP3,7,VIEW_NUM1_NOTFLASH
       01DC3 0FD9     1     JBS  TEMP3 , 7 
       01DC4 15CB     1     JMP  VIEW_NUM1_NOTFLASH ,
   408            C      M 	MOV	_RC,@LCD_CTRL
       01DC5 1880     1     MOV A,@( LCD_CTRL )
       01DC6 004C     1     MOV  _RC ,A
   409            C      M 	JPNB	_RD,6,VIEW_NUM1_NOTFLASH
       01DC7 0F8D     1     JBS  _RD , 6 
       01DC8 15CB     1     JMP  VIEW_NUM1_NOTFLASH ,
   410            C      M 	MOV	TEMP3,@NUM_BLANK
       01DC9 1810     1     MOV A,@( NUM_BLANK )
       01DCA 0059     1     MOV  TEMP3 ,A
   411 01DCB      C        VIEW_NUM1_NOTFLASH:
   412            C      M 	ANDA	TEMP3,@0X7F
       01DCB 187F     1     MOV A,@( 127 )
       01DCC 0299     1     AND A, TEMP3 
   413 01DCD 1131 C        	CALL	NUM_VERIFY
   414            C      M 	CALL	#second_line_tab
       01DCE 1028     1     CALL ( SECOND_LINE_TAB % 1024 ),
   415 01DCF 0059 C        	MOV	TEMP3,A				; 查表得到字符对应的段码
   416            C      M 	ADD	TEMP1,@0X40			; 字符在COM8~COM15，需要+40H的偏移地址
       01DD0 1840     1     MOV A,@( 64 )
       01DD1 03D7     1     ADD  TEMP1 ,A
   417 01DD2 0416 C        	MOV	A,TEMP0
   418 01DD3 12EF C        	CALL	VIEW_NUM1_ROW
   419 01DD4 03D7 C        	ADD	TEMP1,A
   420 01DD5      C        VIEW_NUM1_LOOP_1:
   421            C      M 	MOV	TEMP4,TEMP3
       01DD5 0419     1     MOV A, TEMP3 
       01DD6 005A     1     MOV  TEMP4 ,A
   422            C      M 	ADDA	TEMP1,TEMP2			; 再+列 得到实际地址
       01DD7 0418     1     MOV A, TEMP2 
       01DD8 0397     1     ADD A, TEMP1 
   423 01DD9 000B C        	IOW	_IOCB
   424 01DDA 004C C        	MOV	_RC,A
   425            C        	
   426 01DDB 0418 C        	MOV	A,TEMP2
   427            C      M 	JPZ	VIEW_NUM1_LOOP1
       01DDC 0C83     1     JBC  _STATUS , Z 
       01DDD 15E6     1     JMP  VIEW_NUM1_LOOP1 ,
   428            C      M 	SUBA	TEMP2,@1
       01DDE 1801     1     MOV A,@( 1 )
       01DDF 0118     1     SUB A, TEMP2 
   429            C      M 	JPZ	VIEW_NUM1_LOOP2
       01DE0 0C83     1     JBC  _STATUS , Z 
       01DE1 15F0     1     JMP  VIEW_NUM1_LOOP2 ,
   430            C      M 	SUBA	TEMP2,@2
       01DE2 1802     1     MOV A,@( 2 )
       01DE3 0118     1     SUB A, TEMP2 
   431            C      M 	JPZ	VIEW_NUM1_LOOP3
       01DE4 0C83     1     JBC  _STATUS , Z 
       01DE5 15F8     1     JMP  VIEW_NUM1_LOOP3 ,
   432            C        	;JMP	SHOW_ERR
   433 01DE6      C        VIEW_NUM1_LOOP1:
   434 01DE6 065A C        	RRC	TEMP4
   435 01DE7 065A C        	RRC	TEMP4
   436 01DE8 065A C        	RRC	TEMP4
   437 01DE9 065A C        	RRC	TEMP4
   438            C      M 	AND	TEMP4,@6
       01DEA 1806     1     MOV A,@( 6 )
       01DEB 02DA     1     AND  TEMP4 ,A
   439 01DEC 040D C        	MOV	A,_RD
   440 01DED 1AF9 C        	AND	A,@0XF9
   441 01DEE 021A C        	OR	A,TEMP4
   442 01DEF 15FF C        	JMP	VIEW_NUM1_LOOP_2
   443 01DF0      C        VIEW_NUM1_LOOP2:
   444 01DF0 065A C        	RRC	TEMP4
   445 01DF1 065A C        	RRC	TEMP4
   446            C      M 	AND	TEMP4,@7
       01DF2 1807     1     MOV A,@( 7 )
       01DF3 02DA     1     AND  TEMP4 ,A
   447 01DF4 040D C        	MOV	A,_RD
   448 01DF5 1AF8 C        	AND	A,@0XF8
   449 01DF6 021A C        	OR	A,TEMP4
   450 01DF7 15FF C        	JMP	VIEW_NUM1_LOOP_2
   451 01DF8      C        VIEW_NUM1_LOOP3:
   452 01DF8 06DA C        	RLC	TEMP4
   453            C      M 	AND	TEMP4,@6
       01DF9 1806     1     MOV A,@( 6 )
       01DFA 02DA     1     AND  TEMP4 ,A
   454 01DFB 040D C        	MOV	A,_RD
   455 01DFC 1AF9 C        	AND	A,@0XF9
   456 01DFD 021A C        	OR	A,TEMP4
   457 01DFE 15FF C        	JMP	VIEW_NUM1_LOOP_2
   458            C        	
   459 01DFF      C        VIEW_NUM1_LOOP_2:
   460 01DFF 004D C        	MOV	_RD,A
   461 01E00 000C C        	IOW	_IOCC
   462            C      M 	SUBA	TEMP0,@3
       01E01 1803     1     MOV A,@( 3 )
       01E02 0116     1     SUB A, TEMP0 
   463            C      M 	JPNZ	VIEW_NUM1_LOOP_21
       01E03 0E83     1     JBS  _STATUS , Z 
       01E04 1608     1     JMP  VIEW_NUM1_LOOP_21 ,
   464 01E05 0418 C        	MOV	A,TEMP2
   465            C      M 	JPZ	VIEW_NUM1_LOOP_22
       01E06 0C83     1     JBC  _STATUS , Z 
       01E07 160D     1     JMP  VIEW_NUM1_LOOP_22 ,
   466 01E08      C        VIEW_NUM1_LOOP_21:
   467 01E08 0558 C        	INC	TEMP2
   468            C      M 	SUBA	TEMP2,@3
       01E09 1803     1     MOV A,@( 3 )
       01E0A 0118     1     SUB A, TEMP2 
   469            C      M 	JPNZ	VIEW_NUM1_LOOP_1
       01E0B 0E83     1     JBS  _STATUS , Z 
       01E0C 15D5     1     JMP  VIEW_NUM1_LOOP_1 ,
   470 01E0D      C        VIEW_NUM1_LOOP_22:
   471 01E0D 0556 C        	INC	TEMP0
   472            C      M 	SUBA	TEMP0,@10
       01E0E 180A     1     MOV A,@( 10 )
       01E0F 0116     1     SUB A, TEMP0 
   473            C      M 	JPNZ	VIEW_NUM1_LOOP
       01E10 0E83     1     JBS  _STATUS , Z 
       01E11 15BB     1     JMP  VIEW_NUM1_LOOP ,
   474            C        	
   475 01E12 0012 C        	RET
   476            C        
   477            C        
   478            C        /***************************************
   479            C        显示第二行的数字
   480            C        数字信息按顺序列在16个数字寄存器中
   481            C        ***************************************/
   482 01E13      C        VIEW_NUM2:
   483            C        	;MOV	_RC,@LCD_CTRL
   484            C        	;CRAM	_RD,5
   485 01E13 00D6 C        	CLR	TEMP0				; 显示的位数
   486 01E14      C        VIEW_NUM2_LOOP:
   487 01E14 00D7 C        	CLR	TEMP1				; 显示地址
   488 01E15 00D8 C        	CLR	TEMP2				; 显示的列
   489 01E16 0416 C        	MOV	A,TEMP0
   490 01E17 1D0F C        	SUB	A,@15
   491 01E18 1F8C C        	ADD	A,@(LCD_CTRL+12)
   492 01E19 004C C        	MOV	_RC,A
   493            C      M 	MOV	TEMP3,_RD			; 得到需要显示的字符
       01E1A 040D     1     MOV A, _RD 
       01E1B 0059     1     MOV  TEMP3 ,A
   494            C      M 	JPNB	TEMP3,7,VIEW_NUM2_NOTFLASH
       01E1C 0FD9     1     JBS  TEMP3 , 7 
       01E1D 1624     1     JMP  VIEW_NUM2_NOTFLASH ,
   495            C      M 	MOV	_RC,@LCD_CTRL
       01E1E 1880     1     MOV A,@( LCD_CTRL )
       01E1F 004C     1     MOV  _RC ,A
   496            C      M 	JPNB	_RD,6,VIEW_NUM2_NOTFLASH
       01E20 0F8D     1     JBS  _RD , 6 
       01E21 1624     1     JMP  VIEW_NUM2_NOTFLASH ,
   497            C      M 	MOV	TEMP3,@NUM_BLANK
       01E22 1810     1     MOV A,@( NUM_BLANK )
       01E23 0059     1     MOV  TEMP3 ,A
   498 01E24      C        VIEW_NUM2_NOTFLASH:
   499            C      M 	ANDA	TEMP3,@0X7F			; 得到需要显示的数字
       01E24 187F     1     MOV A,@( 127 )
       01E25 0299     1     AND A, TEMP3 
   500 01E26 1131 C        	CALL	NUM_VERIFY
   501            C      M 	CALL	#second_line_tab
       01E27 1028     1     CALL ( SECOND_LINE_TAB % 1024 ),
   502 01E28 0059 C        	MOV	TEMP3,A				; 查表得到字符对应的段码
   503            C        	
   504            C      M 	CLRC
       01E29 0803     1     BC  _STATUS , C 
   505 01E2A 0616 C        	RRCA	TEMP0
   506 01E2B 005A C        	MOV	TEMP4,A
   507 01E2C 039A C        	ADD	A,TEMP4
   508 01E2D 039A C        	ADD	A,TEMP4
   509 01E2E 039A C        	ADD	A,TEMP4
   510 01E2F 039A C        	ADD	A,TEMP4				; (TEMP0>>1)*5
   511 01E30 03D7 C        	ADD	TEMP1,A
   512 01E31      C        VIEW_NUM2_LOOP_1:
   513            C      M 	MOV	TEMP4,TEMP3
       01E31 0419     1     MOV A, TEMP3 
       01E32 005A     1     MOV  TEMP4 ,A
   514            C      M 	JPB	TEMP0,0,VIEW_NUM2_LOOP_ODD
       01E33 0C16     1     JBC  TEMP0 , 0 
       01E34 165D     1     JMP  VIEW_NUM2_LOOP_ODD ,
   515 01E35      C        VIEW_NUM2_LOOP_EVEN:				; 显示偶数位的数字
   516            C        ; 偶数位排列同第一行的数字：232型排列: 0cbdgaef	cb0 dga ef0
   517            C      M 	ADDA	TEMP1,TEMP2
       01E35 0418     1     MOV A, TEMP2 
       01E36 0397     1     ADD A, TEMP1 
   518 01E37 000B C        	IOW	_IOCB
   519 01E38 004C C        	MOV	_RC,A
   520            C        	
   521 01E39 0418 C        	MOV	A,TEMP2
   522            C      M 	JPZ	VIEW_NUM2_LOOP_EVEN_1
       01E3A 0C83     1     JBC  _STATUS , Z 
       01E3B 1644     1     JMP  VIEW_NUM2_LOOP_EVEN_1 ,
   523            C      M 	SUBA	TEMP2,@1
       01E3C 1801     1     MOV A,@( 1 )
       01E3D 0118     1     SUB A, TEMP2 
   524            C      M 	JPZ	VIEW_NUM2_LOOP_EVEN_2
       01E3E 0C83     1     JBC  _STATUS , Z 
       01E3F 164E     1     JMP  VIEW_NUM2_LOOP_EVEN_2 ,
   525            C      M 	SUBA	TEMP2,@2
       01E40 1802     1     MOV A,@( 2 )
       01E41 0118     1     SUB A, TEMP2 
   526            C      M 	JPZ	VIEW_NUM2_LOOP_EVEN_3
       01E42 0C83     1     JBC  _STATUS , Z 
       01E43 1656     1     JMP  VIEW_NUM2_LOOP_EVEN_3 ,
   527            C        	;JMP	VIEW_ERR
   528 01E44      C        VIEW_NUM2_LOOP_EVEN_1:
   529 01E44 065A C        	RRC	TEMP4
   530 01E45 065A C        	RRC	TEMP4
   531 01E46 065A C        	RRC	TEMP4
   532 01E47 065A C        	RRC	TEMP4
   533            C      M 	AND	TEMP4,@6
       01E48 1806     1     MOV A,@( 6 )
       01E49 02DA     1     AND  TEMP4 ,A
   534 01E4A 040D C        	MOV	A,_RD
   535 01E4B 1AF9 C        	AND	A,@0XF9
   536 01E4C 021A C        	OR	A,TEMP4
   537 01E4D 1690 C        	JMP	VIEW_NUM2_LOOP_2
   538 01E4E      C        VIEW_NUM2_LOOP_EVEN_2:
   539 01E4E 065A C        	RRC	TEMP4
   540 01E4F 065A C        	RRC	TEMP4
   541            C      M 	AND	TEMP4,@7
       01E50 1807     1     MOV A,@( 7 )
       01E51 02DA     1     AND  TEMP4 ,A
   542 01E52 040D C        	MOV	A,_RD
   543 01E53 1AF8 C        	AND	A,@0XF8
   544 01E54 021A C        	OR	A,TEMP4
   545 01E55 1690 C        	JMP	VIEW_NUM2_LOOP_2
   546 01E56      C        VIEW_NUM2_LOOP_EVEN_3:
   547 01E56 06DA C        	RLC	TEMP4
   548            C      M 	AND	TEMP4,@6
       01E57 1806     1     MOV A,@( 6 )
       01E58 02DA     1     AND  TEMP4 ,A
   549 01E59 040D C        	MOV	A,_RD
   550 01E5A 1AF9 C        	AND	A,@0XF9
   551 01E5B 021A C        	OR	A,TEMP4
   552 01E5C 1690 C        	JMP	VIEW_NUM2_LOOP_2
   553            C        
   554 01E5D      C        VIEW_NUM2_LOOP_ODD:
   555            C        ; 奇数位排列规则为：133型排列: 0cbdgaef 00b cga def
   556            C      M 	ADDA	TEMP1,TEMP2
       01E5D 0418     1     MOV A, TEMP2 
       01E5E 0397     1     ADD A, TEMP1 
   557 01E5F 1F02 C        	ADD	A,@2				; +2
   558 01E60 000B C        	IOW	_IOCB
   559 01E61 004C C        	MOV	_RC,A
   560            C        	
   561 01E62 0418 C        	MOV	A,TEMP2
   562            C      M 	JPZ	VIEW_NUM2_LOOP_ODD_1
       01E63 0C83     1     JBC  _STATUS , Z 
       01E64 166D     1     JMP  VIEW_NUM2_LOOP_ODD_1 ,
   563            C      M 	SUBA	TEMP2,@1
       01E65 1801     1     MOV A,@( 1 )
       01E66 0118     1     SUB A, TEMP2 
   564            C      M 	JPZ	VIEW_NUM2_LOOP_ODD_2
       01E67 0C83     1     JBC  _STATUS , Z 
       01E68 1678     1     JMP  VIEW_NUM2_LOOP_ODD_2 ,
   565            C      M 	SUBA	TEMP2,@2
       01E69 1802     1     MOV A,@( 2 )
       01E6A 0118     1     SUB A, TEMP2 
   566            C      M 	JPZ	VIEW_NUM2_LOOP_ODD_3
       01E6B 0C83     1     JBC  _STATUS , Z 
       01E6C 1685     1     JMP  VIEW_NUM2_LOOP_ODD_3 ,
   567            C        	;JMP	VIEW_ERR
   568 01E6D      C        VIEW_NUM2_LOOP_ODD_1:
   569 01E6D 065A C        	RRC	TEMP4
   570 01E6E 065A C        	RRC	TEMP4
   571 01E6F 065A C        	RRC	TEMP4
   572 01E70 065A C        	RRC	TEMP4
   573 01E71 065A C        	RRC	TEMP4
   574            C      M 	AND	TEMP4,@1
       01E72 1801     1     MOV A,@( 1 )
       01E73 02DA     1     AND  TEMP4 ,A
   575 01E74 040D C        	MOV	A,_RD
   576 01E75 1AFE C        	AND	A,@0XFE
   577 01E76 021A C        	OR	A,TEMP4
   578 01E77 1690 C        	JMP	VIEW_NUM2_LOOP_2
   579 01E78      C        VIEW_NUM2_LOOP_ODD_2:
   580            C      M 	AND	_RD,@0XF8
       01E78 18F8     1     MOV A,@( 248 )
       01E79 02CD     1     AND  _RD ,A
   581 01E7A 065A C        	RRC	TEMP4
   582 01E7B 065A C        	RRC	TEMP4
   583 01E7C 041A C        	MOV	A,TEMP4
   584 01E7D 1A03 C        	AND	A,@3
   585 01E7E 024D C        	OR	_RD,A
   586 01E7F 065A C        	RRC	TEMP4
   587 01E80 065A C        	RRC	TEMP4
   588 01E81 041A C        	MOV	A,TEMP4
   589 01E82 1A04 C        	AND	A,@4
   590 01E83 020D C        	OR	A,_RD
   591 01E84 1690 C        	JMP	VIEW_NUM2_LOOP_2
   592 01E85      C        VIEW_NUM2_LOOP_ODD_3:
   593            C      M 	AND	_RD,@0XF8
       01E85 18F8     1     MOV A,@( 248 )
       01E86 02CD     1     AND  _RD ,A
   594 01E87 041A C        	MOV	A,TEMP4
   595 01E88 1A03 C        	AND	A,@3
   596 01E89 024D C        	OR	_RD,A
   597 01E8A 065A C        	RRC	TEMP4
   598 01E8B 065A C        	RRC	TEMP4
   599 01E8C 041A C        	MOV	A,TEMP4
   600 01E8D 1A04 C        	AND	A,@4
   601 01E8E 020D C        	OR	A,_RD
   602 01E8F 1690 C        	JMP	VIEW_NUM2_LOOP_2
   603            C        	
   604 01E90      C        VIEW_NUM2_LOOP_2:
   605 01E90 004D C        	MOV	_RD,A
   606 01E91 000C C        	IOW	_IOCC
   607 01E92 0558 C        	INC	TEMP2
   608            C      M 	SUBA	TEMP2,@3
       01E93 1803     1     MOV A,@( 3 )
       01E94 0118     1     SUB A, TEMP2 
   609            C      M 	JPNZ	VIEW_NUM2_LOOP_1
       01E95 0E83     1     JBS  _STATUS , Z 
       01E96 1631     1     JMP  VIEW_NUM2_LOOP_1 ,
   610 01E97 0556 C        	INC	TEMP0
   611            C      M 	SUBA	TEMP0,@16
       01E98 1810     1     MOV A,@( 16 )
       01E99 0116     1     SUB A, TEMP0 
   612            C      M 	JPNZ	VIEW_NUM2_LOOP
       01E9A 0E83     1     JBS  _STATUS , Z 
       01E9B 1614     1     JMP  VIEW_NUM2_LOOP ,
   613            C        	
   614 01E9C 0012 C        	RET
   615            C        	
   616            C        
   617            C        /***************************************
   618            C        显示第三行的字符串
   619            C        字符串信息按顺序列在16个字符寄存器中
   620            C        ***************************************/
   621 01E9D      C        VIEW_STR:
   622            C        	;MOV	_RC,@LCD_CTRL
   623            C        	;CRAM	_RD,6
   624 01E9D 00D6 C        	CLR	TEMP0				; 显示的位数
   625 01E9E      C        VIEW_STR_LOOP:
   626 01E9E 00D7 C        	CLR	TEMP1				; 显示地址
   627 01E9F 00D8 C        	CLR	TEMP2				; 显示的列
   628 01EA0 0416 C        	MOV	A,TEMP0
   629 01EA1 1D0F C        	SUB	A,@15
   630 01EA2 1F9C C        	ADD	A,@(LCD_CTRL+28)
   631 01EA3 004C C        	MOV	_RC,A
   632            C      M 	MOV	TEMP3,_RD			; 得到需要显示的字符
       01EA4 040D     1     MOV A, _RD 
       01EA5 0059     1     MOV  TEMP3 ,A
   633            C      M 	JPNB	TEMP3,7,VIEW_STR_NOTFLASH
       01EA6 0FD9     1     JBS  TEMP3 , 7 
       01EA7 16AE     1     JMP  VIEW_STR_NOTFLASH ,
   634            C      M 	MOV	_RC,@LCD_CTRL
       01EA8 1880     1     MOV A,@( LCD_CTRL )
       01EA9 004C     1     MOV  _RC ,A
   635            C      M 	JPNB	_RD,6,VIEW_STR_NOTFLASH
       01EAA 0F8D     1     JBS  _RD , 6 
       01EAB 16AE     1     JMP  VIEW_STR_NOTFLASH ,
   636            C      M 	MOV	TEMP3,@CH_BLANK
       01EAC 1824     1     MOV A,@( CH_BLANK )
       01EAD 0059     1     MOV  TEMP3 ,A
   637 01EAE      C        VIEW_STR_NOTFLASH:
   638            C      M 	AND	TEMP3,@0X7F
       01EAE 187F     1     MOV A,@( 127 )
       01EAF 02D9     1     AND  TEMP3 ,A
   639            C        	;MOV	TEMP3,_RD			; 得到需要显示的字符
   640            C      M 	JPB	TEMP0,0,VIEW_STR_LOOP_ODD
       01EB0 0C16     1     JBC  TEMP0 , 0 
       01EB1 16B4     1     JMP  VIEW_STR_LOOP_ODD ,
   641 01EB2      C        VIEW_STR_LOOP_EVEN:				; 0 2 4 6
   642            C      M 	ADD	TEMP1,@0X40			; +偏移
       01EB2 1840     1     MOV A,@( 64 )
       01EB3 03D7     1     ADD  TEMP1 ,A
   643 01EB4      C        VIEW_STR_LOOP_ODD:				; 1 3 5 7
   644            C      M 	CLRC
       01EB4 0803     1     BC  _STATUS , C 
   645 01EB5 0616 C        	RRCA	TEMP0
   646 01EB6 005A C        	MOV	TEMP4,A
   647 01EB7 039A C        	ADD	A,TEMP4
   648 01EB8 039A C        	ADD	A,TEMP4
   649 01EB9 039A C        	ADD	A,TEMP4
   650 01EBA 039A C        	ADD	A,TEMP4				; (TEMP0>>1)*5 得到需要显示的偏移地址
   651 01EBB 03D7 C        	ADD	TEMP1,A
   652 01EBC      C        VIEW_STR_LOOP_2:
   653 01EBC 0418 C        	MOV	A,TEMP2
   654            C      M 	JPB	TEMP0,0,VIEW_STR_LOOP_2_ODD
       01EBD 0C16     1     JBC  TEMP0 , 0 
       01EBE 16C0     1     JMP  VIEW_STR_LOOP_2_ODD ,
   655 01EBF      C        VIEW_STR_LOOP_2_EVEN:
   656 01EBF 1D04 C        	SUB	A,@4				; 偶数字符需要倒向
   657 01EC0      C        VIEW_STR_LOOP_2_ODD:
   658 01EC0 0397 C        	ADD	A,TEMP1				; 偏移+列 得到实际地址
   659            C        	;MOV	TEMP4,A
   660            C        	;IOW	_IOCB,TEMP4
   661            C        	;MOV	_RC,TEMP4
   662 01EC1 000B C        	IOW	_IOCB
   663 01EC2 004C C        	MOV	_RC,A
   664            C      M 	VIEW_STR_TAB	TEMP3,TEMP2		; 根据字符和列得到在该列该字符的显示值。
       01EC3 0418     1     MOV A, TEMP2 
       01EC4 0020     1     TBL 
       01EC5 16CA     1     JMP  VIEW_STR_1 ,
       01EC6 16CE     1     JMP  VIEW_STR_2 ,
       01EC7 16D2     1     JMP  VIEW_STR_3 ,
       01EC8 16D6     1     JMP  VIEW_STR_4 ,
       01EC9 16DA     1     JMP  VIEW_STR_5 ,
       01ECA          1    VIEW_STR_1:   
       01ECA 0419     1     MOV A, TEMP3 
       01ECB 113B     1     CALL  STR_VERIFY ,
                      2  M  CALL #( THIRD_LINE_TABA ),
       01ECC 103C     2     CALL ( THIRD_LINE_TABA % 1024 ),
       01ECD 16DE     1     JMP  VIEW_STR_TAB_RET ,
       01ECE          1    VIEW_STR_2:   
       01ECE 0419     1     MOV A, TEMP3 
       01ECF 113B     1     CALL  STR_VERIFY ,
                      2  M  CALL #( THIRD_LINE_TABB ),
       01ED0 106D     2     CALL ( THIRD_LINE_TABB % 1024 ),
       01ED1 16DE     1     JMP  VIEW_STR_TAB_RET ,
       01ED2          1    VIEW_STR_3:   
       01ED2 0419     1     MOV A, TEMP3 
       01ED3 113B     1     CALL  STR_VERIFY ,
                      2  M  CALL #( THIRD_LINE_TABC ),
       01ED4 109E     2     CALL ( THIRD_LINE_TABC % 1024 ),
       01ED5 16DE     1     JMP  VIEW_STR_TAB_RET ,
       01ED6          1    VIEW_STR_4:   
       01ED6 0419     1     MOV A, TEMP3 
       01ED7 113B     1     CALL  STR_VERIFY ,
                      2  M  CALL #( THIRD_LINE_TABD ),
       01ED8 10CF     2     CALL ( THIRD_LINE_TABD % 1024 ),
       01ED9 16DE     1     JMP  VIEW_STR_TAB_RET ,
       01EDA          1    VIEW_STR_5:   
       01EDA 0419     1     MOV A, TEMP3 
       01EDB 113B     1     CALL  STR_VERIFY ,
                      2  M  CALL #( THIRD_LINE_TABE ),
       01EDC 1100     2     CALL ( THIRD_LINE_TABE % 1024 ),
       01EDD 16DE     1     JMP  VIEW_STR_TAB_RET ,
       01EDE          1    VIEW_STR_TAB_RET:   
   665 01EDE 005A C        	MOV	TEMP4,A
   666            C        	;IOW	_IOCB,TEMP1
   667            C        	;NOP
   668 01EDF 040D C        	MOV	A,_RD
   669            C        	;IOR	_IOCC
   670 01EE0 1A07 C        	AND	A,@7
   671 01EE1 021A C        	OR	A,TEMP4
   672 01EE2 000C C        	IOW	_IOCC
   673 01EE3 004D C        	MOV	_RD,A
   674 01EE4 0558 C        	INC	TEMP2
   675            C      M 	SUBA	TEMP2,@5
       01EE5 1805     1     MOV A,@( 5 )
       01EE6 0118     1     SUB A, TEMP2 
   676            C      M 	JPNZ	VIEW_STR_LOOP_2
       01EE7 0E83     1     JBS  _STATUS , Z 
       01EE8 16BC     1     JMP  VIEW_STR_LOOP_2 ,
   677 01EE9 0556 C        	INC	TEMP0
   678            C      M 	SUBA	TEMP0,@16
       01EEA 1810     1     MOV A,@( 16 )
       01EEB 0116     1     SUB A, TEMP0 
   679            C      M 	JPNZ	VIEW_STR_LOOP
       01EEC 0E83     1     JBS  _STATUS , Z 
       01EED 169E     1     JMP  VIEW_STR_LOOP ,
   680            C        	
   681 01EEE 0012 C        	RET
   682            C        	
   683            C        VIEW_STR_TAB	MACRO	STR,STR_ROW
   684            C        	MOV	A,STR_ROW
   685            C        	TBL
   686            C        	JMP	VIEW_STR_1
   687            C        	JMP	VIEW_STR_2
   688            C        	JMP	VIEW_STR_3
   689            C        	JMP	VIEW_STR_4
   690            C        	JMP	VIEW_STR_5
   691            C        VIEW_STR_1:
   692            C        	MOV	A,STR
   693            C        	CALL	STR_VERIFY
   694            C        	CALL	#THIRD_LINE_TABA
   695            C        	JMP	VIEW_STR_TAB_RET
   696            C        VIEW_STR_2:
   697            C        	MOV	A,STR
   698            C        	CALL	STR_VERIFY
   699            C        	CALL	#THIRD_LINE_TABB
   700            C        	JMP	VIEW_STR_TAB_RET
   701            C        VIEW_STR_3:
   702            C        	MOV	A,STR
   703            C        	CALL	STR_VERIFY
   704            C        	CALL	#THIRD_LINE_TABC
   705            C        	JMP	VIEW_STR_TAB_RET
   706            C        VIEW_STR_4:
   707            C        	MOV	A,STR
   708            C        	CALL	STR_VERIFY
   709            C        	CALL	#THIRD_LINE_TABD
   710            C        	JMP	VIEW_STR_TAB_RET
   711            C        VIEW_STR_5:
   712            C        	MOV	A,STR
   713            C        	CALL	STR_VERIFY
   714            C        	CALL	#THIRD_LINE_TABE
   715            C        	JMP	VIEW_STR_TAB_RET
   716            C        VIEW_STR_TAB_RET:
   717            C        	ENDM
   718            C        
   719            C        
   720 01EEF      C        VIEW_NUM1_ROW:
   721 01EEF 0020 C        	TBL
   722 01EF0 1C00 C        	RETL	0
   723 01EF1 1C03 C        	RETL	3
   724 01EF2 1C07 C        	RETL	7
   725 01EF3 1C0A C        	RETL	10
   726 01EF4 1C0B C        	RETL	11
   727 01EF5 1C0E C        	RETL	14
   728 01EF6 1C17 C        	RETL	23
   729 01EF7 1C1A C        	RETL	26
   730 01EF8 1C1D C        	RETL	29
   731 01EF9 1C20 C        	RETL	32
   732            C        
   733            C        
   734            C        /***************************************
   735            C        外部可调用VIEW_LCD
   736            C        LCD显示
   737            C        LCD_CTRL	LCD显示控制器
   738            C        .0~.1		显示区块计数
   739            C        .2		闪烁
   740            C        .3		显示第一行标志控制		0/1 不需要显示/需要显示
   741            C        .4		显示第一行字符控制		0/1 不需要显示/需要显示
   742            C        .5		显示第二行字符控制		0/1 不需要显示/需要显示
   743            C        .6		显示第三行字符控制		0/1 不需要显示/需要显示
   744            C        .7		全局显示控制			0/1 全体不需要显示/全体需要显示
   745            C        全部使用CID RAM的BANK0
   746            C        0~127为LCD RAM的映射
   747            C        128为LCD显示控制器
   748            C        其后寄存器说明：
   749            C        128+1		第一行印花寄存器
   750            C        128+2~11	第一行数字寄存器
   751            C        128+12~27	第二行数字寄存器
   752            C        128+28~43	第三行字符寄存器
   753            C        ***************************************/
   754            C        ;ORG	0X1E80
   755 01EFA      C        LCD_VIEW:
   756            C      M 	CIDBANK	0
                      2  M  CRAM  _RB , 0 
       01EFA 080B     2     BC  _RB , 0 
                      2  M  CRAM  _RB , 2 
       01EFB 088B     2     BC  _RB , 2 
   757            C      M 	BANK	0
       01EFC 0984     1     BC  _RSR , 6 
       01EFD 09C4     1     BC  _RSR , 7 
   758            C      M 	MOV	_RC,@LCD_CTRL
       01EFE 1880     1     MOV A,@( LCD_CTRL )
       01EFF 004C     1     MOV  _RC ,A
   759            C        	;NOP
   760            C        	;MOV	TEMP0,_RD
   761 01F00 0436 C        	MOV	A,TMR_FLASH
   762            C      M 	JPNZ	$+8
       01F01 0E83     1     JBS  _STATUS , Z 
       01F02 170A     1     JMP ( $ + 8 ),
   763            C      M 	BINVRAM	_RD,6
                      2  M  JPB  _RD , 6 ,( $ + 3 )
       01F03 0D8D     2     JBC  _RD , 6 
       01F04 1707     2     JMP ( $ + 3 ),
                      2  M  SRAM  _RD , 6 
       01F05 0B8D     2     BS  _RD , 6 
       01F06 1708     1     JMP ( $ + 2 ),
                      2  M  CRAM  _RD , 6 
       01F07 098D     2     BC  _RD , 6 
   764            C      M 	MOV	TMR_FLASH,@50
       01F08 1832     1     MOV A,@( 50 )
       01F09 0076     1     MOV  TMR_FLASH ,A
   765            C        	
   766            C      M 	JPNB	_RD,7,LCD_VIEW_RET
       01F0A 0FCD     1     JBS  _RD , 7 
       01F0B 1729     1     JMP  LCD_VIEW_RET ,
   767 01F0C 040D C        	MOV	A,_RD
   768 01F0D 1F01 C        	ADD	A,@1
   769 01F0E 1A03 C        	AND	A,@3
   770 01F0F 0057 C        	MOV	TEMP1,A
   771            C      M 	ANDA	_RD,@0XFC
       01F10 18FC     1     MOV A,@( 252 )
       01F11 028D     1     AND A, _RD 
   772 01F12 0397 C        	ADD	A,TEMP1
   773 01F13 004D C        	MOV	_RD,A
   774            C        	
   775            C      M 	SUBA	TEMP1,@0
       01F14 1800     1     MOV A,@( 0 )
       01F15 0117     1     SUB A, TEMP1 
   776            C      M 	JPZ	LCD_VIEW_STAMP
       01F16 0C83     1     JBC  _STATUS , Z 
       01F17 1725     1     JMP  LCD_VIEW_STAMP ,
   777            C      M 	SUBA	TEMP1,@1
       01F18 1801     1     MOV A,@( 1 )
       01F19 0117     1     SUB A, TEMP1 
   778            C      M 	JPZ	LCD_VIEW_NUM1
       01F1A 0C83     1     JBC  _STATUS , Z 
       01F1B 1726     1     JMP  LCD_VIEW_NUM1 ,
   779            C      M 	SUBA	TEMP1,@2
       01F1C 1802     1     MOV A,@( 2 )
       01F1D 0117     1     SUB A, TEMP1 
   780            C      M 	JPZ	LCD_VIEW_NUM2
       01F1E 0C83     1     JBC  _STATUS , Z 
       01F1F 1727     1     JMP  LCD_VIEW_NUM2 ,
   781            C      M 	SUBA	TEMP1,@3
       01F20 1803     1     MOV A,@( 3 )
       01F21 0117     1     SUB A, TEMP1 
   782            C      M 	JPZ	LCD_VIEW_STR
       01F22 0C83     1     JBC  _STATUS , Z 
       01F23 1728     1     JMP  LCD_VIEW_STR ,
   783 01F24 1729 C        	JMP	LCD_VIEW_RET
   784 01F25      C        LCD_VIEW_STAMP:
   785            C        	;JPNB	TEMP0,3,LCD_VIEW_RET
   786            C      M 	JMP	#VIEW_STAMP
       01F25 1545     1     JMP ( VIEW_STAMP % 1024 ),
   787 01F26      C        LCD_VIEW_NUM1:
   788            C        	;JPNB	TEMP0,4,LCD_VIEW_RET
   789            C      M 	JMP	#VIEW_NUM1
       01F26 15BA     1     JMP ( VIEW_NUM1 % 1024 ),
   790 01F27      C        LCD_VIEW_NUM2:
   791            C        	;JPNB	TEMP0,5,LCD_VIEW_RET
   792            C      M 	JMP	#VIEW_NUM2
       01F27 1613     1     JMP ( VIEW_NUM2 % 1024 ),
   793 01F28      C        LCD_VIEW_STR:
   794            C        	;JPNB	TEMP0,6,LCD_VIEW_RET
   795            C      M 	JMP	#VIEW_STR
       01F28 169D     1     JMP ( VIEW_STR % 1024 ),
   796 01F29      C        LCD_VIEW_RET:
   797 01F29 0012 C        	RET
   798            C        
   799            C        	
   498                     include	"string.asm"
     1            C        ;include	<emc806.inc>
     2            C        include	"string.inc"
     1            C        
     2       0000 C        CH_0	==	0X0
     3       0001 C        CH_1	==	0X1
     4       0002 C        CH_2	==	0X2
     5       0003 C        CH_3	==	0X3
     6       0004 C        CH_4	==	0X4
     7       0005 C        CH_5	==	0X5
     8       0006 C        CH_6	==	0X6
     9       0007 C        CH_7	==	0X7
    10       0008 C        CH_8	==	0X8
    11       0009 C        CH_9	==	0X9
    12            C        
    13       000A C        CH_A	==	0XA
    14       000B C        CH_B	==	0XB
    15       000C C        CH_C	==	0XC
    16       000D C        CH_D	==	0XD
    17       000E C        CH_E	==	0XE
    18       000F C        CH_F	==	0XF
    19       0010 C        CH_G	==	0X10
    20       0011 C        CH_H	==	0X11
    21       0012 C        CH_I	==	0X12
    22       0013 C        CH_J	==	0X13
    23       0014 C        CH_K	==	0X14
    24       0015 C        CH_L	==	0X15
    25       0016 C        CH_M	==	0X16
    26       0017 C        CH_N	==	0X17
    27       0018 C        CH_O	==	0X18
    28       0019 C        CH_P	==	0X19
    29       001A C        CH_Q	==	0X1A
    30       001B C        CH_R	==	0X1B
    31       001C C        CH_S	==	0X1C
    32       001D C        CH_T	==	0X1D
    33       001E C        CH_U	==	0X1E
    34       001F C        CH_V	==	0X1F
    35       0020 C        CH_W	==	0X20
    36       0021 C        CH_X	==	0X21
    37       0022 C        CH_Y	==	0X22
    38       0023 C        CH_Z	==	0X23
    39            C        
    40       0024 C        CH_BLANK    ==	0X24
    41            C        
    42       0025 C        CH_BLACK    ==	0X25
    43            C        
    44       0026 C        CH_INTE	    ==	0X26	; ?
    45       0027 C        CH_EXC	    ==	0X27	; !
    46       0028 C        CH_COLON    ==	0X28	; :
    47       0029 C        CH_POINT    ==	0X29	; .
    48            C        
    49       002A C        CH_START ==	0X2A	; >>
    50       002B C        CH_PAUSE ==	0X2B	; ||
    51       0025 C        CH_STOP	==	0X25	; ■
    52       002C C        CH_DEL	==	0X2C	; ×
    53       002D C        CH_SCH1	==	0X2D	; /
    54       002E C        CH_SCH2	==	0X2E	; \
    55            C        
    56       002F C        CH__	==	0X2F	; _
    57            C        
    58       00FF C        CH_END	==	0XFF	; 结束标志符
    59            C        
    60       0000 C        NUM_0	==	0X0
    61       0001 C        NUM_1	==	0X1
    62       0002 C        NUM_2	==	0X2
    63       0003 C        NUM_3	==	0X3
    64       0004 C        NUM_4	==	0X4
    65       0005 C        NUM_5	==	0X5
    66       0006 C        NUM_6	==	0X6
    67       0007 C        NUM_7	==	0X7
    68       0008 C        NUM_8	==	0X8
    69       0009 C        NUM_9	==	0X9
    70       000A C        NUM_A	==	0XA
    71       000B C        NUM_B	==	0XB
    72       000C C        NUM_C	==	0XC
    73       000D C        NUM_D	==	0XD
    74       000E C        NUM_E	==	0XE
    75       000F C        NUM_F	==	0XF
    76       0010 C        NUM_BLANK	==	0X10
    77       0011 C        NUM_EX1	==	0X11
    78       0012 C        NUM_EX2	==	0X12
    79            C        
    80       0000 C        WD_NO_CALL	==	0
    81       0001 C        WD_ERROR	==	1
    82       0002 C        WD_TOTAL	==	2
    83       0003 C        WD_PRIVATE	==	3
    84       0004 C        WD_END_OF_LIST	==	4
    85       0005 C        WD_PLS_LIFT_HANDSET	== 5
    86       0006 C        WD_INITIAL	==	6
    87       0007 C        WD_ERASE	==	7
    88       0008 C        WD_ERASED	==	8
    89       0009 C        WD_ERASE_ALL	==	9
    90       000A C        WD_ERASED_ALL	==	10
    91       000B C        WD_MEMO_RECORDING	== 11
    92       000C C        WD_ICM_RECORDING	== 12
    93       000D C        WD_2WAY_RECORDING	== 13
    94       000E C        WD_NO_NUMBER	==	14
    95       000F C        WD_LONG_DISTANCE_CALL	== 15
    96       0010 C        WD_LCD_CONTRAST	==	16
    97       0011 C        WD_SET_RING	==	17
    98       0012 C        WD_SET_REMOTE_CODE	== 18
    99       0013 C        WD_SET_LONG_CODE	== 19
   100       0014 C        WD_OGM_RECORDING	== 20
   101       0015 C        WD_OGM_PLAYBACK	==	21
   102       0016 C        WD_IN_REMOTE	==	22
   103       0017 C        WD_SUNDAY	==	23
   104       0018 C        WD_MONDAY	==	24
   105       0019 C        WD_TUESDAY	==	25
   106       001A C        WD_WEDNSDAY	==	26
   107       001B C        WD_THURSDAY	==	27
   108       001C C        WD_FRIDAY	==	28
   109       001D C        WD_SATURDAY	==	29
   110       001E C        WD_MEMORY_FULL	==	30
   111       001F C        WD_NEW		==	31
   112       0020 C        WD_ENGLISH	==	32
   113       0021 C        WD_GERMAN	==	33
   114       0022 C        WD_EDIT		==	34
   115       0023 C        WD_SEARCH	==	35
   116       0024 C        WD_PLAY		==	36
   117       0025 C        WD_STOP		==	37
   118       0026 C        WD_PAUSE	==	38
   119       0027 C        WD_COPIED_INTO_BOOK	== 39
   120       0028 C        WD_OGM		==	40
   121       0029 C        WD_END_OF_NAMES_BOOK	== 41
   122       002A C        WD_OGM_		==	42
   123            C        
   124       0000 C        LANG_ENGLISH	==	0
   125       0001 C        LANG_GERMANY	==	1
   126            C        
   127            C        
   128       0000 C        STYLE_NORMAL	==	0X00	; 常规
   129       0020 C        STYLE_LEFT	==	0X20	; 左对齐
   130       0040 C        STYLE_RIGHT	==	0X40	; 右对齐
   131       0060 C        STYLE_CENTER	==	0X60	; 居中
   132            C        
   133            C        
     3            C        ;------page @6------
     4            C        org 0x1800
     5            C        ;------page @6------ 
     6 01800      C        SHOW_NO_CALL_EN:
     7 01800 0020 C        	TBL
     8 01801 1C17 C        	RETL	CH_N
     9 01802 1C18 C        	RETL	CH_O
    10 01803 1C24 C        	RETL	CH_BLANK
    11 01804 1C0C C        	RETL	CH_C
    12 01805 1C0A C        	RETL	CH_A
    13 01806 1C15 C        	RETL	CH_L
    14 01807 1C15 C        	RETL	CH_L
    15 01808 1C1C C        	RETL	CH_S
    16 01809 1CFF C        	RETL	CH_END
    17            C        
    18 0180A      C        SHOW_ERROR_EN:
    19 0180A 0020 C        	TBL
    20 0180B 1C0E C        	RETL	CH_E
    21 0180C 1C1B C        	RETL	CH_R
    22 0180D 1C1B C        	RETL	CH_R
    23 0180E 1C18 C        	RETL	CH_O
    24 0180F 1C1B C        	RETL	CH_R
    25 01810 1CFF C        	RETL	CH_END
    26            C        
    27 01811      C        SHOW_PRIVATE_EN:
    28 01811 0020 C        	TBL
    29 01812 1C19 C        	RETL	CH_P
    30 01813 1C1B C        	RETL	CH_R
    31 01814 1C12 C        	RETL	CH_I
    32 01815 1C1F C        	RETL	CH_V
    33 01816 1C0A C        	RETL	CH_A
    34 01817 1C1D C        	RETL	CH_T
    35 01818 1C0E C        	RETL	CH_E
    36 01819 1CFF C        	RETL	CH_END
    37            C        
    38 0181A      C        SHOW_END_OF_LIST_EN:
    39 0181A 0020 C        	TBL
    40 0181B 1C0E C        	RETL	CH_E
    41 0181C 1C17 C        	RETL	CH_N
    42 0181D 1C0D C        	RETL	CH_D
    43 0181E 1C24 C        	RETL	CH_BLANK
    44 0181F 1C18 C        	RETL	CH_O
    45 01820 1C0F C        	RETL	CH_F
    46 01821 1C24 C        	RETL	CH_BLANK
    47 01822 1C15 C        	RETL	CH_L
    48 01823 1C12 C        	RETL	CH_I
    49 01824 1C1C C        	RETL	CH_S
    50 01825 1C1D C        	RETL	CH_T
    51 01826 1CFF C        	RETL	CH_END
    52            C        
    53 01827      C        SHOW_PLS_LIFT_HANDSET_EN:
    54 01827 0020 C        	TBL
    55 01828 1C19 C        	RETL	CH_P
    56 01829 1C15 C        	RETL	CH_L
    57 0182A 1C1C C        	RETL	CH_S
    58 0182B 1C24 C        	RETL	CH_BLANK
    59 0182C 1C15 C        	RETL	CH_L
    60 0182D 1C12 C        	RETL	CH_I
    61 0182E 1C0F C        	RETL	CH_F
    62 0182F 1C1D C        	RETL	CH_T
    63 01830 1C24 C        	RETL	CH_BLANK
    64 01831 1C11 C        	RETL	CH_H
    65 01832 1C0A C        	RETL	CH_A
    66 01833 1C17 C        	RETL	CH_N
    67 01834 1C0D C        	RETL	CH_D
    68 01835 1C1C C        	RETL	CH_S
    69 01836 1C0E C        	RETL	CH_E
    70 01837 1C1D C        	RETL	CH_T
    71 01838 1CFF C        	RETL	CH_END
    72            C        
    73 01839      C        SHOW_INITIAL_EN:
    74 01839 0020 C        	TBL
    75 0183A 1C12 C        	RETL	CH_I
    76 0183B 1C17 C        	RETL	CH_N
    77 0183C 1C12 C        	RETL	CH_I
    78 0183D 1C1D C        	RETL	CH_T
    79 0183E 1C12 C        	RETL	CH_I
    80 0183F 1C0A C        	RETL	CH_A
    81 01840 1C15 C        	RETL	CH_L
    82 01841 1CFF C        	RETL	CH_END
    83            C        
    84 01842      C        SHOW_ERASE_EN:
    85 01842 0020 C        	TBL
    86 01843 1C0E C        	RETL	CH_E
    87 01844 1C1B C        	RETL	CH_R
    88 01845 1C0A C        	RETL	CH_A
    89 01846 1C1C C        	RETL	CH_S
    90 01847 1C0E C        	RETL	CH_E
    91 01848 1C26 C        	RETL	CH_INTE
    92 01849 1CFF C        	RETL	CH_END
    93            C        
    94 0184A      C        SHOW_ERASE_ALL_EN:
    95 0184A 0020 C        	TBL
    96 0184B 1C0E C        	RETL	CH_E
    97 0184C 1C1B C        	RETL	CH_R
    98 0184D 1C0A C        	RETL	CH_A
    99 0184E 1C1C C        	RETL	CH_S
   100 0184F 1C0E C        	RETL	CH_E
   101 01850 1C24 C        	RETL	CH_BLANK
   102 01851 1C0A C        	RETL	CH_A
   103 01852 1C15 C        	RETL	CH_L
   104 01853 1C15 C        	RETL	CH_L
   105 01854 1C26 C        	RETL	CH_INTE
   106 01855 1CFF C        	RETL	CH_END
   107            C        
   108 01856      C        SHOW_MEMO_RECORDING_EN:
   109 01856 0020 C        	TBL
   110 01857 1C16 C        	RETL	CH_M
   111 01858 1C0E C        	RETL	CH_E
   112 01859 1C16 C        	RETL	CH_M
   113 0185A 1C18 C        	RETL	CH_O
   114 0185B 1C24 C        	RETL	CH_BLANK
   115 0185C 1C1B C        	RETL	CH_R
   116 0185D 1C0E C        	RETL	CH_E
   117 0185E 1C0C C        	RETL	CH_C
   118 0185F 1C18 C        	RETL	CH_O
   119 01860 1C1B C        	RETL	CH_R
   120 01861 1C0D C        	RETL	CH_D
   121 01862 1C12 C        	RETL	CH_I
   122 01863 1C17 C        	RETL	CH_N
   123 01864 1C10 C        	RETL	CH_G
   124 01865 1CFF C        	RETL	CH_END
   125            C        
   126 01866      C        SHOW_2WAY_RECORDING_EN:
   127 01866 0020 C        	TBL
   128 01867 1C02 C        	RETL	CH_2
   129 01868 1C20 C        	RETL	CH_W
   130 01869 1C0A C        	RETL	CH_A
   131 0186A 1C22 C        	RETL	CH_Y
   132 0186B 1C24 C        	RETL	CH_BLANK
   133 0186C 1C1B C        	RETL	CH_R
   134 0186D 1C0E C        	RETL	CH_E
   135 0186E 1C0C C        	RETL	CH_C
   136 0186F 1C18 C        	RETL	CH_O
   137 01870 1C1B C        	RETL	CH_R
   138 01871 1C0D C        	RETL	CH_D
   139 01872 1C12 C        	RETL	CH_I
   140 01873 1C17 C        	RETL	CH_N
   141 01874 1C10 C        	RETL	CH_G
   142 01875 1CFF C        	RETL	CH_END
   143            C        
   144 01876      C        SHOW_ICM_RECORDING_EN:
   145 01876 0020 C        	TBL
   146 01877 1C12 C        	RETL	CH_I
   147 01878 1C0C C        	RETL	CH_C
   148 01879 1C16 C        	RETL	CH_M
   149 0187A 1C24 C        	RETL	CH_BLANK
   150 0187B 1C1B C        	RETL	CH_R
   151 0187C 1C0E C        	RETL	CH_E
   152 0187D 1C0C C        	RETL	CH_C
   153 0187E 1C18 C        	RETL	CH_O
   154 0187F 1C1B C        	RETL	CH_R
   155 01880 1C0D C        	RETL	CH_D
   156 01881 1C12 C        	RETL	CH_I
   157 01882 1C17 C        	RETL	CH_N
   158 01883 1C10 C        	RETL	CH_G
   159 01884 1CFF C        	RETL	CH_END
   160            C        
   161 01885      C        SHOW_NO_NUMBER_EN:
   162 01885 0020 C        	TBL
   163 01886 1C17 C        	RETL	CH_N
   164 01887 1C18 C        	RETL	CH_O
   165 01888 1C24 C        	RETL	CH_BLANK
   166 01889 1C17 C        	RETL	CH_N
   167 0188A 1C1E C        	RETL	CH_U
   168 0188B 1C16 C        	RETL	CH_M
   169 0188C 1C0B C        	RETL	CH_B
   170 0188D 1C0E C        	RETL	CH_E
   171 0188E 1C1B C        	RETL	CH_R
   172 0188F 1CFF C        	RETL	CH_END
   173            C        
   174 01890      C        SHOW_LONG_DISTANCE_CALL_EN:
   175 01890 0020 C        	TBL
   176 01891 1C15 C        	RETL	CH_L
   177 01892 1C18 C        	RETL	CH_O
   178 01893 1C17 C        	RETL	CH_N
   179 01894 1C10 C        	RETL	CH_G
   180 01895 1C24 C        	RETL	CH_BLANK
   181 01896 1C0D C        	RETL	CH_D
   182 01897 1C12 C        	RETL	CH_I
   183 01898 1C1C C        	RETL	CH_S
   184 01899 1C1D C        	RETL	CH_T
   185 0189A 1C0A C        	RETL	CH_A
   186 0189B 1C17 C        	RETL	CH_N
   187 0189C 1C0C C        	RETL	CH_C
   188 0189D 1C0E C        	RETL	CH_E
   189 0189E 1C24 C        	RETL	CH_BLANK
   190 0189F 1C0C C        	RETL	CH_C
   191 018A0 1C0A C        	RETL	CH_A
   192 018A1 1C15 C        	RETL	CH_L
   193 018A2 1C15 C        	RETL	CH_L
   194 018A3 1CFF C        	RETL	CH_END
   195            C        
   196 018A4      C        SHOW_LCD_CONTRAST_EN:
   197 018A4 0020 C        	TBL
   198 018A5 1C15 C        	RETL	CH_L
   199 018A6 1C0C C        	RETL	CH_C
   200 018A7 1C0D C        	RETL	CH_D
   201 018A8 1C24 C        	RETL	CH_BLANK
   202 018A9 1C0C C        	RETL	CH_C
   203 018AA 1C18 C        	RETL	CH_O
   204 018AB 1C17 C        	RETL	CH_N
   205 018AC 1C1D C        	RETL	CH_T
   206 018AD 1C1B C        	RETL	CH_R
   207 018AE 1C0A C        	RETL	CH_A
   208 018AF 1C1C C        	RETL	CH_S
   209 018B0 1C1D C        	RETL	CH_T
   210 018B1 1CFF C        	RETL	CH_END
   211            C        
   212 018B2      C        SHOW_SET_REMOTE_CODE_EN:
   213 018B2 0020 C        	TBL
   214 018B3 1C1C C        	RETL	CH_S
   215 018B4 1C0E C        	RETL	CH_E
   216 018B5 1C1D C        	RETL	CH_T
   217 018B6 1C24 C        	RETL	CH_BLANK
   218 018B7 1C1B C        	RETL	CH_R
   219 018B8 1C0E C        	RETL	CH_E
   220 018B9 1C16 C        	RETL	CH_M
   221 018BA 1C18 C        	RETL	CH_O
   222 018BB 1C1D C        	RETL	CH_T
   223 018BC 1C0E C        	RETL	CH_E
   224 018BD 1C24 C        	RETL	CH_BLANK
   225 018BE 1C0C C        	RETL	CH_C
   226 018BF 1C18 C        	RETL	CH_O
   227 018C0 1C0D C        	RETL	CH_D
   228 018C1 1C0E C        	RETL	CH_E
   229 018C2 1CFF C        	RETL	CH_END
   230            C        
   231 018C3      C        SHOW_SET_LONG_CODE_EN:
   232 018C3 0020 C        	TBL
   233 018C4 1C1C C        	RETL	CH_S
   234 018C5 1C0E C        	RETL	CH_E
   235 018C6 1C1D C        	RETL	CH_T
   236 018C7 1C24 C        	RETL	CH_BLANK
   237 018C8 1C0A C        	RETL	CH_A
   238 018C9 1C1B C        	RETL	CH_R
   239 018CA 1C0E C        	RETL	CH_E
   240 018CB 1C0A C        	RETL	CH_A
   241 018CC 1C24 C        	RETL	CH_BLANK
   242 018CD 1C0C C        	RETL	CH_C
   243 018CE 1C18 C        	RETL	CH_O
   244 018CF 1C0D C        	RETL	CH_D
   245 018D0 1C0E C        	RETL	CH_E
   246 018D1 1CFF C        	RETL	CH_END
   247            C        
   248 018D2      C        SHOW_OGM_RECORDING_EN:
   249 018D2 0020 C        	TBL
   250 018D3 1C1B C        	RETL	CH_R
   251 018D4 1C0E C        	RETL	CH_E
   252 018D5 1C0C C        	RETL	CH_C
   253 018D6 1C18 C        	RETL	CH_O
   254 018D7 1C1B C        	RETL	CH_R
   255 018D8 1C0D C        	RETL	CH_D
   256 018D9 1C12 C        	RETL	CH_I
   257 018DA 1C17 C        	RETL	CH_N
   258 018DB 1C10 C        	RETL	CH_G
   259 018DC 1CFF C        	RETL	CH_END
   260            C        
   261 018DD      C        SHOW_ERASED_EN:
   262 018DD 0020 C        	TBL
   263 018DE 1C0E C        	RETL	CH_E
   264 018DF 1C1B C        	RETL	CH_R
   265 018E0 1C0A C        	RETL	CH_A
   266 018E1 1C1C C        	RETL	CH_S
   267 018E2 1C0E C        	RETL	CH_E
   268 018E3 1C0D C        	RETL	CH_D
   269 018E4 1CFF C        	RETL	CH_END
   270            C        
   271 018E5      C        SHOW_ERASED_ALL_EN:
   272 018E5 0020 C        	TBL
   273 018E6 1C0E C        	RETL	CH_E
   274 018E7 1C1B C        	RETL	CH_R
   275 018E8 1C0A C        	RETL	CH_A
   276 018E9 1C1C C        	RETL	CH_S
   277 018EA 1C0E C        	RETL	CH_E
   278 018EB 1C0D C        	RETL	CH_D
   279 018EC 1C24 C        	RETL	CH_BLANK
   280 018ED 1C0A C        	RETL	CH_A
   281 018EE 1C15 C        	RETL	CH_L
   282 018EF 1C15 C        	RETL	CH_L
   283 018F0 1CFF C        	RETL	CH_END
   284            C        
   285 018F1      C        SHOW_SET_BOOK_EN:
   286 018F1 0020 C        	TBL
   287 018F2 1C1C C        	RETL	CH_S
   288 018F3 1C0E C        	RETL	CH_E
   289 018F4 1C1D C        	RETL	CH_T
   290 018F5 1C24 C        	RETL	CH_BLANK
   291 018F6 1C0B C        	RETL	CH_B
   292 018F7 1C18 C        	RETL	CH_O
   293 018F8 1C18 C        	RETL	CH_O
   294 018F9 1C14 C        	RETL	CH_K
   295 018FA 1CFF C        	RETL	CH_END
   296            C        
   297            C        
   298            C        ORG	0X1900
   299 01900      C        SHOW_OGM_PLAYBACK_EN:
   300 01900 0020 C        	TBL
   301 01901 1C19 C        	RETL	CH_P
   302 01902 1C15 C        	RETL	CH_L
   303 01903 1C0A C        	RETL	CH_A
   304 01904 1C22 C        	RETL	CH_Y
   305 01905 1C0B C        	RETL	CH_B
   306 01906 1C0A C        	RETL	CH_A
   307 01907 1C0C C        	RETL	CH_C
   308 01908 1C14 C        	RETL	CH_K
   309 01909 1CFF C        	RETL	CH_END
   310            C        
   311 0190A      C        SHOW_SET_RING_EN:
   312 0190A 0020 C        	TBL
   313 0190B 1C1B C        	RETL	CH_R
   314 0190C 1C12 C        	RETL	CH_I
   315 0190D 1C17 C        	RETL	CH_N
   316 0190E 1C10 C        	RETL	CH_G
   317 0190F 1C24 C        	RETL	CH_BLANK
   318 01910 1C1D C        	RETL	CH_T
   319 01911 1C12 C        	RETL	CH_I
   320 01912 1C16 C        	RETL	CH_M
   321 01913 1C0E C        	RETL	CH_E
   322 01914 1C24 C        	RETL	CH_BLANK
   323 01915 1C1C C        	RETL	CH_S
   324 01916 1C0E C        	RETL	CH_E
   325 01917 1C1D C        	RETL	CH_T
   326 01918 1CFF C        	RETL	CH_END
   327            C        
   328 01919      C        SHOW_IN_REMOTE_EN:
   329 01919 0020 C        	TBL
   330 0191A 1C12 C        	RETL	CH_I
   331 0191B 1C17 C        	RETL	CH_N
   332 0191C 1C24 C        	RETL	CH_BLANK
   333 0191D 1C1B C        	RETL	CH_R
   334 0191E 1C0E C        	RETL	CH_E
   335 0191F 1C16 C        	RETL	CH_M
   336 01920 1C18 C        	RETL	CH_O
   337 01921 1C1D C        	RETL	CH_T
   338 01922 1C0E C        	RETL	CH_E
   339 01923 1CFF C        	RETL	CH_END
   340            C        
   341 01924      C        SHOW_SUNDAY_EN:
   342 01924 0020 C        	TBL
   343 01925 1C1C C        	RETL	CH_S
   344 01926 1C1E C        	RETL	CH_U
   345 01927 1C17 C        	RETL	CH_N
   346 01928 1C0D C        	RETL	CH_D
   347 01929 1C0A C        	RETL	CH_A
   348 0192A 1C22 C        	RETL	CH_Y
   349 0192B 1CFF C        	RETL	CH_END
   350            C        
   351 0192C      C        SHOW_MONDAY_EN:
   352 0192C 0020 C        	TBL
   353 0192D 1C16 C        	RETL	CH_M
   354 0192E 1C18 C        	RETL	CH_O
   355 0192F 1C17 C        	RETL	CH_N
   356 01930 1C0D C        	RETL	CH_D
   357 01931 1C0A C        	RETL	CH_A
   358 01932 1C22 C        	RETL	CH_Y
   359 01933 1CFF C        	RETL	CH_END
   360            C        
   361 01934      C        SHOW_TUESDAY_EN:
   362 01934 0020 C        	TBL
   363 01935 1C1D C        	RETL	CH_T
   364 01936 1C1E C        	RETL	CH_U
   365 01937 1C0E C        	RETL	CH_E
   366 01938 1C1C C        	RETL	CH_S
   367 01939 1C0D C        	RETL	CH_D
   368 0193A 1C0A C        	RETL	CH_A
   369 0193B 1C22 C        	RETL	CH_Y
   370 0193C 1CFF C        	RETL	CH_END
   371            C        
   372 0193D      C        SHOW_WEDNSDAY_EN:
   373 0193D 0020 C        	TBL
   374 0193E 1C20 C        	RETL	CH_W
   375 0193F 1C0E C        	RETL	CH_E
   376 01940 1C0D C        	RETL	CH_D
   377 01941 1C17 C        	RETL	CH_N
   378 01942 1C1C C        	RETL	CH_S
   379 01943 1C0D C        	RETL	CH_D
   380 01944 1C0A C        	RETL	CH_A
   381 01945 1C22 C        	RETL	CH_Y
   382 01946 1CFF C        	RETL	CH_END
   383            C        
   384 01947      C        SHOW_THURSDAY_EN:
   385 01947 0020 C        	TBL
   386 01948 1C1D C        	RETL	CH_T
   387 01949 1C11 C        	RETL	CH_H
   388 0194A 1C1E C        	RETL	CH_U
   389 0194B 1C1B C        	RETL	CH_R
   390 0194C 1C1C C        	RETL	CH_S
   391 0194D 1C0D C        	RETL	CH_D
   392 0194E 1C0A C        	RETL	CH_A
   393 0194F 1C22 C        	RETL	CH_Y
   394 01950 1CFF C        	RETL	CH_END
   395            C        
   396 01951      C        SHOW_FRIDAY_EN:
   397 01951 0020 C        	TBL
   398 01952 1C0F C        	RETL	CH_F
   399 01953 1C1B C        	RETL	CH_R
   400 01954 1C12 C        	RETL	CH_I
   401 01955 1C0D C        	RETL	CH_D
   402 01956 1C0A C        	RETL	CH_A
   403 01957 1C22 C        	RETL	CH_Y
   404 01958 1CFF C        	RETL	CH_END
   405            C        
   406 01959      C        SHOW_SATURDAY_EN:
   407 01959 0020 C        	TBL
   408 0195A 1C1C C        	RETL	CH_S
   409 0195B 1C0A C        	RETL	CH_A
   410 0195C 1C1D C        	RETL	CH_T
   411 0195D 1C1E C        	RETL	CH_U
   412 0195E 1C1B C        	RETL	CH_R
   413 0195F 1C0D C        	RETL	CH_D
   414 01960 1C0A C        	RETL	CH_A
   415 01961 1C22 C        	RETL	CH_Y
   416 01962 1CFF C        	RETL	CH_END
   417            C        
   418 01963      C        SHOW_MEMORY_FULL_EN:
   419 01963 0020 C        	TBL
   420 01964 1C16 C        	RETL	CH_M
   421 01965 1C0E C        	RETL	CH_E
   422 01966 1C16 C        	RETL	CH_M
   423 01967 1C18 C        	RETL	CH_O
   424 01968 1C1B C        	RETL	CH_R
   425 01969 1C22 C        	RETL	CH_Y
   426 0196A 1C24 C        	RETL	CH_BLANK
   427 0196B 1C0F C        	RETL	CH_F
   428 0196C 1C1E C        	RETL	CH_U
   429 0196D 1C15 C        	RETL	CH_L
   430 0196E 1C15 C        	RETL	CH_L
   431 0196F 1CFF C        	RETL	CH_END
   432            C        
   433 01970      C        SHOW_NEW_EN:
   434 01970 0020 C        	TBL
   435 01971 1C17 C        	RETL	CH_N
   436 01972 1C0E C        	RETL	CH_E
   437 01973 1C20 C        	RETL	CH_W
   438 01974 1CFF C        	RETL	CH_END
   439            C        
   440 01975      C        SHOW_TOTAL_EN:
   441 01975 0020 C        	TBL
   442 01976 1C1D C        	RETL	CH_T
   443 01977 1C18 C        	RETL	CH_O
   444 01978 1C1D C        	RETL	CH_T
   445 01979 1C0A C        	RETL	CH_A
   446 0197A 1C15 C        	RETL	CH_L
   447 0197B 1CFF C        	RETL	CH_END
   448            C        
   449 0197C      C        SHOW_LANGUAGE_EN:
   450 0197C 0020 C        	TBL
   451 0197D 1C15 C        	RETL	CH_L
   452 0197E 1C0A C        	RETL	CH_A
   453 0197F 1C17 C        	RETL	CH_N
   454 01980 1C10 C        	RETL	CH_G
   455 01981 1C1E C        	RETL	CH_U
   456 01982 1C0A C        	RETL	CH_A
   457 01983 1C10 C        	RETL	CH_G
   458 01984 1C0E C        	RETL	CH_E
   459 01985 1CFF C        	RETL	CH_END
   460            C        
   461 01986      C        SHOW_ENGLISH_EN:
   462 01986 0020 C        	TBL
   463 01987 1C0E C        	RETL	CH_E
   464 01988 1C17 C        	RETL	CH_N
   465 01989 1C10 C        	RETL	CH_G
   466 0198A 1C15 C        	RETL	CH_L
   467 0198B 1C12 C        	RETL	CH_I
   468 0198C 1C1C C        	RETL	CH_S
   469 0198D 1C11 C        	RETL	CH_H
   470 0198E 1CFF C        	RETL	CH_END
   471            C        
   472 0198F      C        SHOW_GERMAN_EN:
   473 0198F      C        SHOW_GERMAN_GE:
   474 0198F 0020 C        	TBL
   475 01990 1C10 C        	RETL	CH_G
   476 01991 1C0E C        	RETL	CH_E
   477 01992 1C1B C        	RETL	CH_R
   478 01993 1C16 C        	RETL	CH_M
   479 01994 1C0A C        	RETL	CH_A
   480 01995 1C17 C        	RETL	CH_N
   481 01996 1CFF C        	RETL	CH_END
   482            C        
   483 01997      C        SHOW_EDIT_EN:
   484 01997 0020 C        	TBL
   485 01998 1C0E C        	RETL	CH_E
   486 01999 1C0D C        	RETL	CH_D
   487 0199A 1C12 C        	RETL	CH_I
   488 0199B 1C1D C        	RETL	CH_T
   489 0199C 1CFF C        	RETL	CH_END
   490            C        
   491 0199D      C        SHOW_SEARCH_EN:
   492 0199D 0020 C        	TBL
   493 0199E 1C1C C        	RETL	CH_S
   494 0199F 1C0E C        	RETL	CH_E
   495 019A0 1C0A C        	RETL	CH_A
   496 019A1 1C1B C        	RETL	CH_R
   497 019A2 1C0C C        	RETL	CH_C
   498 019A3 1C11 C        	RETL	CH_H
   499 019A4 1CFF C        	RETL	CH_END
   500            C        
   501 019A5      C        SHOW_PLAY_EN:
   502 019A5 0020 C        	TBL
   503 019A6 1C19 C        	RETL	CH_P
   504 019A7 1C15 C        	RETL	CH_L
   505 019A8 1C0A C        	RETL	CH_A
   506 019A9 1C22 C        	RETL	CH_Y
   507 019AA 1CFF C        	RETL	CH_END
   508            C        
   509 019AB      C        SHOW_PLAY_GE:
   510 019AB 0020 C        	TBL
   511 019AC 1C17 C        	RETL	CH_N
   512 019AD 1C0A C        	RETL	CH_A
   513 019AE 1C0C C        	RETL	CH_C
   514 019AF 1C11 C        	RETL	CH_H
   515 019B0 1C1B C        	RETL	CH_R
   516 019B1 1C12 C        	RETL	CH_I
   517 019B2 1C0C C        	RETL	CH_C
   518 019B3 1C11 C        	RETL	CH_H
   519 019B4 1C1D C        	RETL	CH_T
   520 019B5 1CFF C        	RETL	CH_END
   521            C        
   522 019B6      C        SHOW_STOP_EN:
   523 019B6      C        SHOW_STOP_GE:
   524 019B6 0020 C        	TBL
   525 019B7 1C1C C        	RETL	CH_S
   526 019B8 1C1D C        	RETL	CH_T
   527 019B9 1C18 C        	RETL	CH_O
   528 019BA 1C19 C        	RETL	CH_P
   529 019BB 1CFF C        	RETL	CH_END
   530            C        
   531 019BC      C        SHOW_PAUSE_EN:
   532 019BC      C        SHOW_PAUSE_GE:
   533 019BC 0020 C        	TBL
   534 019BD 1C19 C        	RETL	CH_P
   535 019BE 1C0A C        	RETL	CH_A
   536 019BF 1C1E C        	RETL	CH_U
   537 019C0 1C1C C        	RETL	CH_S
   538 019C1 1C0E C        	RETL	CH_E
   539 019C2 1CFF C        	RETL	CH_END
   540            C        
   541            C        ; 德语部分：
   542 019C3      C        SHOW_NO_CALL_GE:
   543 019C3 0020 C        	TBL
   544 019C4 1C14 C        	RETL	CH_K
   545 019C5 1C0E C        	RETL	CH_E
   546 019C6 1C12 C        	RETL	CH_I
   547 019C7 1C17 C        	RETL	CH_N
   548 019C8 1C0E C        	RETL	CH_E
   549 019C9 1C24 C        	RETL	CH_BLANK
   550 019CA 1C0A C        	RETL	CH_A
   551 019CB 1C17 C        	RETL	CH_N
   552 019CC 1C1B C        	RETL	CH_R
   553 019CD 1C1E C        	RETL	CH_U
   554 019CE 1C0F C        	RETL	CH_F
   555 019CF 1C0E C        	RETL	CH_E
   556 019D0 1CFF C        	RETL	CH_END
   557            C        
   558 019D1      C        SHOW_INITIAL_GE:
   559 019D1 0020 C        	TBL
   560 019D2 1C0B C        	RETL	CH_B
   561 019D3 1C12 C        	RETL	CH_I
   562 019D4 1C1D C        	RETL	CH_T
   563 019D5 1C1D C        	RETL	CH_T
   564 019D6 1C0E C        	RETL	CH_E
   565 019D7 1C24 C        	RETL	CH_BLANK
   566 019D8 1C20 C        	RETL	CH_W
   567 019D9 1C0A C        	RETL	CH_A
   568 019DA 1C1B C        	RETL	CH_R
   569 019DB 1C1D C        	RETL	CH_T
   570 019DC 1C0E C        	RETL	CH_E
   571 019DD 1C17 C        	RETL	CH_N
   572 019DE 1CFF C        	RETL	CH_END
   573            C        
   574 019DF      C        SHOW_ERASE_ALL_GE:
   575 019DF 0020 C        	TBL
   576 019E0 1C0A C        	RETL	CH_A
   577 019E1 1C15 C        	RETL	CH_L
   578 019E2 1C15 C        	RETL	CH_L
   579 019E3 1C0E C        	RETL	CH_E
   580 019E4 1C1C C        	RETL	CH_S
   581 019E5 1C24 C        	RETL	CH_BLANK
   582 019E6 1C15 C        	RETL	CH_L
   583 019E7 1C18 C        	RETL	CH_O
   584 019E8 1C0E C        	RETL	CH_E
   585 019E9 1C1C C        	RETL	CH_S
   586 019EA 1C0C C        	RETL	CH_C
   587 019EB 1C11 C        	RETL	CH_H
   588 019EC 1C0E C        	RETL	CH_E
   589 019ED 1C17 C        	RETL	CH_N
   590 019EE 1C26 C        	RETL	CH_INTE
   591 019EF 1CFF C        	RETL	CH_END
   592            C        
   593 019F0      C        SHOW_ERROR_GE:
   594 019F0 0020 C        	TBL
   595 019F1 1C0F C        	RETL	CH_F
   596 019F2 1C0E C        	RETL	CH_E
   597 019F3 1C11 C        	RETL	CH_H
   598 019F4 1C15 C        	RETL	CH_L
   599 019F5 1C0E C        	RETL	CH_E
   600 019F6 1C1B C        	RETL	CH_R
   601 019F7 1CFF C        	RETL	CH_END
   602            C        
   603 019F8      C        SHOW_PRIVATE_GE:
   604 019F8 0020 C        	TBL
   605 019F9 1C19 C        	RETL	CH_P
   606 019FA 1C1B C        	RETL	CH_R
   607 019FB 1C12 C        	RETL	CH_I
   608 019FC 1C1F C        	RETL	CH_V
   609 019FD 1C0A C        	RETL	CH_A
   610 019FE 1C1D C        	RETL	CH_T
   611 019FF 1CFF C        	RETL	CH_END
   612            C        
   613            C        
   614            C        ORG	0X1A00
   615            C        
   616 01A00      C        SHOW_END_OF_LIST_GE:
   617 01A00 0020 C        	TBL
   618 01A01 1C15 C        	RETL	CH_L
   619 01A02 1C12 C        	RETL	CH_I
   620 01A03 1C1C C        	RETL	CH_S
   621 01A04 1C1D C        	RETL	CH_T
   622 01A05 1C0E C        	RETL	CH_E
   623 01A06 1C17 C        	RETL	CH_N
   624 01A07 1C0E C        	RETL	CH_E
   625 01A08 1C17 C        	RETL	CH_N
   626 01A09 1C0D C        	RETL	CH_D
   627 01A0A 1C0E C        	RETL	CH_E
   628 01A0B 1CFF C        	RETL	CH_END
   629            C        
   630 01A0C      C        SHOW_ERASE_GE:
   631 01A0C 0020 C        	TBL
   632 01A0D 1C15 C        	RETL	CH_L
   633 01A0E 1C18 C        	RETL	CH_O
   634 01A0F 1C0E C        	RETL	CH_E
   635 01A10 1C1C C        	RETL	CH_S
   636 01A11 1C0C C        	RETL	CH_C
   637 01A12 1C11 C        	RETL	CH_H
   638 01A13 1C0E C        	RETL	CH_E
   639 01A14 1C17 C        	RETL	CH_N
   640 01A15 1C26 C        	RETL	CH_INTE
   641 01A16 1CFF C        	RETL	CH_END
   642            C        
   643 01A17      C        SHOW_PLS_LIFT_HANDSET_GE:
   644 01A17 0020 C        	TBL
   645 01A18 1C11 C        	RETL	CH_H
   646 01A19 1C18 C        	RETL	CH_O
   647 01A1A 1C0E C        	RETL	CH_E
   648 01A1B 1C1B C        	RETL	CH_R
   649 01A1C 1C0E C        	RETL	CH_E
   650 01A1D 1C1B C        	RETL	CH_R
   651 01A1E 1C24 C        	RETL	CH_BLANK
   652 01A1F 1C0A C        	RETL	CH_A
   653 01A20 1C0B C        	RETL	CH_B
   654 01A21 1C11 C        	RETL	CH_H
   655 01A22 1C0E C        	RETL	CH_E
   656 01A23 1C0B C        	RETL	CH_B
   657 01A24 1C0E C        	RETL	CH_E
   658 01A25 1C17 C        	RETL	CH_N
   659 01A26 1CFF C        	RETL	CH_END
   660            C        
   661 01A27      C        SHOW_MEMO_RECORDING_GE:
   662 01A27 0020 C        	TBL
   663 01A28 1C16 C        	RETL	CH_M
   664 01A29 1C0E C        	RETL	CH_E
   665 01A2A 1C16 C        	RETL	CH_M
   666 01A2B 1C18 C        	RETL	CH_O
   667 01A2C 1C24 C        	RETL	CH_BLANK
   668 01A2D 1C0A C        	RETL	CH_A
   669 01A2E 1C1E C        	RETL	CH_U
   670 01A2F 1C0F C        	RETL	CH_F
   671 01A30 1C17 C        	RETL	CH_N
   672 01A31 1C0E C        	RETL	CH_E
   673 01A32 1C11 C        	RETL	CH_H
   674 01A33 1C16 C        	RETL	CH_M
   675 01A34 1C0E C        	RETL	CH_E
   676 01A35 1C17 C        	RETL	CH_N
   677 01A36 1CFF C        	RETL	CH_END
   678            C        
   679 01A37      C        SHOW_2WAY_RECORDING_GE:
   680 01A37 0020 C        	TBL
   681 01A38 1C16 C        	RETL	CH_M
   682 01A39 1C12 C        	RETL	CH_I
   683 01A3A 1C1D C        	RETL	CH_T
   684 01A3B 1C1C C        	RETL	CH_S
   685 01A3C 1C0C C        	RETL	CH_C
   686 01A3D 1C11 C        	RETL	CH_H
   687 01A3E 1C17 C        	RETL	CH_N
   688 01A3F 1C0E C        	RETL	CH_E
   689 01A40 1C12 C        	RETL	CH_I
   690 01A41 1C0D C        	RETL	CH_D
   691 01A42 1C0E C        	RETL	CH_E
   692 01A43 1C17 C        	RETL	CH_N
   693 01A44 1CFF C        	RETL	CH_END
   694            C        
   695 01A45      C        SHOW_ICM_RECORDING_GE:
   696 01A45 0020 C        	TBL
   697 01A46 1C0A C        	RETL	CH_A
   698 01A47 1C17 C        	RETL	CH_N
   699 01A48 1C1B C        	RETL	CH_R
   700 01A49 1C1E C        	RETL	CH_U
   701 01A4A 1C0F C        	RETL	CH_F
   702 01A4B 1C24 C        	RETL	CH_BLANK
   703 01A4C 1C0A C        	RETL	CH_A
   704 01A4D 1C1E C        	RETL	CH_U
   705 01A4E 1C0F C        	RETL	CH_F
   706 01A4F 1C17 C        	RETL	CH_N
   707 01A50 1C0E C        	RETL	CH_E
   708 01A51 1C11 C        	RETL	CH_H
   709 01A52 1C16 C        	RETL	CH_M
   710 01A53 1C0E C        	RETL	CH_E
   711 01A54 1C17 C        	RETL	CH_N
   712 01A55 1CFF C        	RETL	CH_END
   713            C        
   714 01A56      C        SHOW_NO_NUMBER_GE:
   715 01A56 0020 C        	TBL
   716 01A57 1C14 C        	RETL	CH_K
   717 01A58 1C0E C        	RETL	CH_E
   718 01A59 1C12 C        	RETL	CH_I
   719 01A5A 1C17 C        	RETL	CH_N
   720 01A5B 1C0E C        	RETL	CH_E
   721 01A5C 1C24 C        	RETL	CH_BLANK
   722 01A5D 1C17 C        	RETL	CH_N
   723 01A5E 1C1E C        	RETL	CH_U
   724 01A5F 1C16 C        	RETL	CH_M
   725 01A60 1C16 C        	RETL	CH_M
   726 01A61 1C0E C        	RETL	CH_E
   727 01A62 1C1B C        	RETL	CH_R
   728 01A63 1CFF C        	RETL	CH_END
   729            C        
   730 01A64      C        SHOW_LONG_DISTANCE_CALL_GE:
   731 01A64 0020 C        	TBL
   732 01A65 1C0F C        	RETL	CH_F
   733 01A66 1C0E C        	RETL	CH_E
   734 01A67 1C1B C        	RETL	CH_R
   735 01A68 1C17 C        	RETL	CH_N
   736 01A69 1C10 C        	RETL	CH_G
   737 01A6A 1C0E C        	RETL	CH_E
   738 01A6B 1C1C C        	RETL	CH_S
   739 01A6C 1C19 C        	RETL	CH_P
   740 01A6D 1C1B C        	RETL	CH_R
   741 01A6E 1C0A C        	RETL	CH_A
   742 01A6F 1C0E C        	RETL	CH_E
   743 01A70 1C0C C        	RETL	CH_C
   744 01A71 1C11 C        	RETL	CH_H
   745 01A72 1CFF C        	RETL	CH_END
   746            C        
   747 01A73      C        SHOW_LCD_CONTRAST_GE:
   748 01A73 0020 C        	TBL
   749 01A74 1C15 C        	RETL	CH_L
   750 01A75 1C0C C        	RETL	CH_C
   751 01A76 1C0D C        	RETL	CH_D
   752 01A77 1C24 C        	RETL	CH_BLANK
   753 01A78 1C14 C        	RETL	CH_K
   754 01A79 1C18 C        	RETL	CH_O
   755 01A7A 1C17 C        	RETL	CH_N
   756 01A7B 1C1D C        	RETL	CH_T
   757 01A7C 1C1B C        	RETL	CH_R
   758 01A7D 1C0A C        	RETL	CH_A
   759 01A7E 1C1C C        	RETL	CH_S
   760 01A7F 1C1D C        	RETL	CH_T
   761 01A80 1CFF C        	RETL	CH_END
   762            C        
   763 01A81      C        SHOW_SET_RING_GE:
   764 01A81 0020 C        	TBL
   765 01A82 1C0A C        	RETL	CH_A
   766 01A83 1C17 C        	RETL	CH_N
   767 01A84 1C23 C        	RETL	CH_Z
   768 01A85 1C29 C        	RETL	CH_POINT
   769 01A86 1C1B C        	RETL	CH_R
   770 01A87 1C1E C        	RETL	CH_U
   771 01A88 1C0F C        	RETL	CH_F
   772 01A89 1C0E C        	RETL	CH_E
   773 01A8A 1C24 C        	RETL	CH_BLANK
   774 01A8B 1C1C C        	RETL	CH_S
   775 01A8C 1C0E C        	RETL	CH_E
   776 01A8D 1C1D C        	RETL	CH_T
   777 01A8E 1C23 C        	RETL	CH_Z
   778 01A8F 1C0E C        	RETL	CH_E
   779 01A90 1C17 C        	RETL	CH_N
   780 01A91 1CFF C        	RETL	CH_END
   781            C        
   782 01A92      C        SHOW_SET_REMOTE_CODE_GE:
   783 01A92 0020 C        	TBL
   784 01A93 1C1C C        	RETL	CH_S
   785 01A94 1C0E C        	RETL	CH_E
   786 01A95 1C1D C        	RETL	CH_T
   787 01A96 1C23 C        	RETL	CH_Z
   788 01A97 1C0E C        	RETL	CH_E
   789 01A98 1C24 C        	RETL	CH_BLANK
   790 01A99 1C0F C        	RETL	CH_F
   791 01A9A 1C0E C        	RETL	CH_E
   792 01A9B 1C1B C        	RETL	CH_R
   793 01A9C 1C17 C        	RETL	CH_N
   794 01A9D 1C0A C        	RETL	CH_A
   795 01A9E 1C0B C        	RETL	CH_B
   796 01A9F 1C0F C        	RETL	CH_F
   797 01AA0 1C1B C        	RETL	CH_R
   798 01AA1 1CFF C        	RETL	CH_END
   799            C        
   800 01AA2      C        SHOW_SET_LONG_CODE_GE:
   801 01AA2 0020 C        	TBL
   802 01AA3 1C18 C        	RETL	CH_O
   803 01AA4 1C1B C        	RETL	CH_R
   804 01AA5 1C1D C        	RETL	CH_T
   805 01AA6 1C1C C        	RETL	CH_S
   806 01AA7 1C1F C        	RETL	CH_V
   807 01AA8 1C18 C        	RETL	CH_O
   808 01AA9 1C1B C        	RETL	CH_R
   809 01AAA 1C20 C        	RETL	CH_W
   810 01AAB 1C0A C        	RETL	CH_A
   811 01AAC 1C11 C        	RETL	CH_H
   812 01AAD 1C15 C        	RETL	CH_L
   813 01AAE 1CFF C        	RETL	CH_END
   814            C        
   815 01AAF      C        SHOW_SET_BOOK_GE:
   816 01AAF 0020 C        	TBL
   817 01AB0 1C1D C        	RETL	CH_T
   818 01AB1 1C0E C        	RETL	CH_E
   819 01AB2 1C15 C        	RETL	CH_L
   820 01AB3 1C0E C        	RETL	CH_E
   821 01AB4 1C0F C        	RETL	CH_F
   822 01AB5 1C18 C        	RETL	CH_O
   823 01AB6 1C17 C        	RETL	CH_N
   824 01AB7 1C0B C        	RETL	CH_B
   825 01AB8 1C1E C        	RETL	CH_U
   826 01AB9 1C0C C        	RETL	CH_C
   827 01ABA 1C11 C        	RETL	CH_H
   828 01ABB 1CFF C        	RETL	CH_END
   829            C        
   830 01ABC      C        SHOW_OGM_RECORDING_GE:
   831 01ABC 0020 C        	TBL
   832 01ABD 1C0A C        	RETL	CH_A
   833 01ABE 1C1E C        	RETL	CH_U
   834 01ABF 1C0F C        	RETL	CH_F
   835 01AC0 1C17 C        	RETL	CH_N
   836 01AC1 1C0E C        	RETL	CH_E
   837 01AC2 1C11 C        	RETL	CH_H
   838 01AC3 1C16 C        	RETL	CH_M
   839 01AC4 1C0E C        	RETL	CH_E
   840 01AC5 1C17 C        	RETL	CH_N
   841 01AC6 1CFF C        	RETL	CH_END
   842            C        
   843 01AC7      C        SHOW_OGM_PLAYBACK_GE:
   844 01AC7 0020 C        	TBL
   845 01AC8 1C0A C        	RETL	CH_A
   846 01AC9 1C0B C        	RETL	CH_B
   847 01ACA 1C1C C        	RETL	CH_S
   848 01ACB 1C19 C        	RETL	CH_P
   849 01ACC 1C12 C        	RETL	CH_I
   850 01ACD 1C0E C        	RETL	CH_E
   851 01ACE 1C15 C        	RETL	CH_L
   852 01ACF 1C0E C        	RETL	CH_E
   853 01AD0 1C17 C        	RETL	CH_N
   854 01AD1 1CFF C        	RETL	CH_END
   855            C        
   856 01AD2      C        SHOW_ERASED_GE:
   857 01AD2 0020 C        	TBL
   858 01AD3 1C10 C        	RETL	CH_G
   859 01AD4 1C0E C        	RETL	CH_E
   860 01AD5 1C15 C        	RETL	CH_L
   861 01AD6 1C18 C        	RETL	CH_O
   862 01AD7 1C0E C        	RETL	CH_E
   863 01AD8 1C1C C        	RETL	CH_S
   864 01AD9 1C0C C        	RETL	CH_C
   865 01ADA 1C11 C        	RETL	CH_H
   866 01ADB 1C1D C        	RETL	CH_T
   867 01ADC 1CFF C        	RETL	CH_END
   868            C        
   869 01ADD      C        SHOW_ERASED_ALL_GE:
   870 01ADD 0020 C        	TBL
   871 01ADE 1C0A C        	RETL	CH_A
   872 01ADF 1C15 C        	RETL	CH_L
   873 01AE0 1C15 C        	RETL	CH_L
   874 01AE1 1C0E C        	RETL	CH_E
   875 01AE2 1C1C C        	RETL	CH_S
   876 01AE3 1C24 C        	RETL	CH_BLANK
   877 01AE4 1C10 C        	RETL	CH_G
   878 01AE5 1C0E C        	RETL	CH_E
   879 01AE6 1C15 C        	RETL	CH_L
   880 01AE7 1C18 C        	RETL	CH_O
   881 01AE8 1C0E C        	RETL	CH_E
   882 01AE9 1C1C C        	RETL	CH_S
   883 01AEA 1C0C C        	RETL	CH_C
   884 01AEB 1C11 C        	RETL	CH_H
   885 01AEC 1C1D C        	RETL	CH_T
   886 01AED 1CFF C        	RETL	CH_END
   887            C        
   888 01AEE      C        SHOW_SUNDAY_GE:
   889 01AEE 0020 C        	TBL
   890 01AEF 1C1C C        	RETL	CH_S
   891 01AF0 1C18 C        	RETL	CH_O
   892 01AF1 1C17 C        	RETL	CH_N
   893 01AF2 1C17 C        	RETL	CH_N
   894 01AF3 1C1D C        	RETL	CH_T
   895 01AF4 1C0A C        	RETL	CH_A
   896 01AF5 1C10 C        	RETL	CH_G
   897 01AF6 1CFF C        	RETL	CH_END
   898            C        
   899            C        
   900            C        ORG	0X1B00
   901            C        
   902 01B00      C        SHOW_IN_REMOTE_GE:
   903 01B00 0020 C        	TBL
   904 01B01 1C0F C        	RETL	CH_F
   905 01B02 1C0E C        	RETL	CH_E
   906 01B03 1C1B C        	RETL	CH_R
   907 01B04 1C17 C        	RETL	CH_N
   908 01B05 1C0A C        	RETL	CH_A
   909 01B06 1C0B C        	RETL	CH_B
   910 01B07 1C0F C        	RETL	CH_F
   911 01B08 1C1B C        	RETL	CH_R
   912 01B09 1C0A C        	RETL	CH_A
   913 01B0A 1C10 C        	RETL	CH_G
   914 01B0B 1C0E C        	RETL	CH_E
   915 01B0C 1CFF C        	RETL	CH_END
   916            C        
   917 01B0D      C        SHOW_MONDAY_GE:
   918 01B0D 0020 C        	TBL
   919 01B0E 1C16 C        	RETL	CH_M
   920 01B0F 1C18 C        	RETL	CH_O
   921 01B10 1C17 C        	RETL	CH_N
   922 01B11 1C1D C        	RETL	CH_T
   923 01B12 1C0A C        	RETL	CH_A
   924 01B13 1C10 C        	RETL	CH_G
   925 01B14 1CFF C        	RETL	CH_END
   926            C        
   927 01B15      C        SHOW_TUESDAY_GE:
   928 01B15 0020 C        	TBL
   929 01B16 1C0D C        	RETL	CH_D
   930 01B17 1C12 C        	RETL	CH_I
   931 01B18 1C0E C        	RETL	CH_E
   932 01B19 1C17 C        	RETL	CH_N
   933 01B1A 1C1C C        	RETL	CH_S
   934 01B1B 1C1D C        	RETL	CH_T
   935 01B1C 1C0A C        	RETL	CH_A
   936 01B1D 1C10 C        	RETL	CH_G
   937 01B1E 1CFF C        	RETL	CH_END
   938            C        
   939 01B1F      C        SHOW_WEDNSDAY_GE:
   940 01B1F 0020 C        	TBL
   941 01B20 1C16 C        	RETL	CH_M
   942 01B21 1C12 C        	RETL	CH_I
   943 01B22 1C1D C        	RETL	CH_T
   944 01B23 1C1D C        	RETL	CH_T
   945 01B24 1C20 C        	RETL	CH_W
   946 01B25 1C18 C        	RETL	CH_O
   947 01B26 1C0C C        	RETL	CH_C
   948 01B27 1C11 C        	RETL	CH_H
   949 01B28 1CFF C        	RETL	CH_END
   950            C        
   951 01B29      C        SHOW_THURSDAY_GE:
   952 01B29 0020 C        	TBL
   953 01B2A 1C0D C        	RETL	CH_D
   954 01B2B 1C18 C        	RETL	CH_O
   955 01B2C 1C17 C        	RETL	CH_N
   956 01B2D 1C17 C        	RETL	CH_N
   957 01B2E 1C0E C        	RETL	CH_E
   958 01B2F 1C1B C        	RETL	CH_R
   959 01B30 1C1C C        	RETL	CH_S
   960 01B31 1C1D C        	RETL	CH_T
   961 01B32 1C0A C        	RETL	CH_A
   962 01B33 1C10 C        	RETL	CH_G
   963 01B34 1CFF C        	RETL	CH_END
   964            C        
   965 01B35      C        SHOW_MEMORY_FULL_GE:
   966 01B35 0020 C        	TBL
   967 01B36 1C1D C        	RETL	CH_T
   968 01B37 1C0E C        	RETL	CH_E
   969 01B38 1C15 C        	RETL	CH_L
   970 01B39 1C29 C        	RETL	CH_POINT
   971 01B3A 1C0B C        	RETL	CH_B
   972 01B3B 1C1E C        	RETL	CH_U
   973 01B3C 1C0C C        	RETL	CH_C
   974 01B3D 1C11 C        	RETL	CH_H
   975 01B3E 1C24 C        	RETL	CH_BLANK
   976 01B3F 1C1F C        	RETL	CH_V
   977 01B40 1C18 C        	RETL	CH_O
   978 01B41 1C15 C        	RETL	CH_L
   979 01B42 1C15 C        	RETL	CH_L
   980 01B43 1CFF C        	RETL	CH_END
   981            C        
   982 01B44      C        SHOW_NEW_GE:
   983 01B44 0020 C        	TBL
   984 01B45 1C17 C        	RETL	CH_N
   985 01B46 1C0E C        	RETL	CH_E
   986 01B47 1C1E C        	RETL	CH_U
   987 01B48 1CFF C        	RETL	CH_END
   988            C        
   989 01B49      C        SHOW_FRIDAY_GE:
   990 01B49 0020 C        	TBL
   991 01B4A 1C0F C        	RETL	CH_F
   992 01B4B 1C1B C        	RETL	CH_R
   993 01B4C 1C0E C        	RETL	CH_E
   994 01B4D 1C12 C        	RETL	CH_I
   995 01B4E 1C1D C        	RETL	CH_T
   996 01B4F 1C0A C        	RETL	CH_A
   997 01B50 1C10 C        	RETL	CH_G
   998 01B51 1CFF C        	RETL	CH_END
   999            C        
  1000 01B52      C        SHOW_SATURDAY_GE:
  1001 01B52 0020 C        	TBL
  1002 01B53 1C1C C        	RETL	CH_S
  1003 01B54 1C0A C        	RETL	CH_A
  1004 01B55 1C16 C        	RETL	CH_M
  1005 01B56 1C1C C        	RETL	CH_S
  1006 01B57 1C1D C        	RETL	CH_T
  1007 01B58 1C0A C        	RETL	CH_A
  1008 01B59 1C10 C        	RETL	CH_G
  1009 01B5A 1CFF C        	RETL	CH_END
  1010            C        
  1011 01B5B      C        SHOW_TOTAL_GE:
  1012 01B5B 0020 C        	TBL
  1013 01B5C 1C1D C        	RETL	CH_T
  1014 01B5D 1C18 C        	RETL	CH_O
  1015 01B5E 1C1D C        	RETL	CH_T
  1016 01B5F 1C0A C        	RETL	CH_A
  1017 01B60 1C15 C        	RETL	CH_L
  1018 01B61 1CFF C        	RETL	CH_END
  1019            C        	
  1020 01B62      C        SHOW_LANGUAGE_GE:
  1021 01B62 0020 C        	TBL
  1022 01B63 1C15 C        	RETL	CH_L
  1023 01B64 1C0A C        	RETL	CH_A
  1024 01B65 1C17 C        	RETL	CH_N
  1025 01B66 1C10 C        	RETL	CH_G
  1026 01B67 1C1E C        	RETL	CH_U
  1027 01B68 1C0A C        	RETL	CH_A
  1028 01B69 1C10 C        	RETL	CH_G
  1029 01B6A 1C0E C        	RETL	CH_E
  1030 01B6B 1CFF C        	RETL	CH_END
  1031            C        	
  1032 01B6C      C        SHOW_ENGLISH_GE:
  1033 01B6C 0020 C        	TBL
  1034 01B6D 1C0E C        	RETL	CH_E
  1035 01B6E 1C17 C        	RETL	CH_N
  1036 01B6F 1C10 C        	RETL	CH_G
  1037 01B70 1C15 C        	RETL	CH_L
  1038 01B71 1C12 C        	RETL	CH_I
  1039 01B72 1C1C C        	RETL	CH_S
  1040 01B73 1C0C C        	RETL	CH_C
  1041 01B74 1C11 C        	RETL	CH_H
  1042 01B75 1CFF C        	RETL	CH_END
  1043            C        
  1044 01B76      C        SHOW_EDIT_GE:
  1045 01B76 0020 C        	TBL
  1046 01B77 1C0B C        	RETL	CH_B
  1047 01B78 1C0E C        	RETL	CH_E
  1048 01B79 1C0A C        	RETL	CH_A
  1049 01B7A 1C1B C        	RETL	CH_R
  1050 01B7B 1C0B C        	RETL	CH_B
  1051 01B7C 1C29 C        	RETL	CH_POINT
  1052 01B7D 1CFF C        	RETL	CH_END
  1053            C        
  1054 01B7E      C        SHOW_SEARCH_GE:
  1055 01B7E 0020 C        	TBL
  1056 01B7F 1C1C C        	RETL	CH_S
  1057 01B80 1C1E C        	RETL	CH_U
  1058 01B81 1C0C C        	RETL	CH_C
  1059 01B82 1C11 C        	RETL	CH_H
  1060 01B83 1C0E C        	RETL	CH_E
  1061 01B84 1C17 C        	RETL	CH_N
  1062 01B85 1CFF C        	RETL	CH_END
  1063            C        
  1064 01B86      C        SHOW_COPIED_INTO_BOOK_EN:
  1065 01B86 0020 C        	TBL
  1066 01B87 1C0C C        	RETL	CH_C
  1067 01B88 1C18 C        	RETL	CH_O
  1068 01B89 1C19 C        	RETL	CH_P
  1069 01B8A 1C12 C        	RETL	CH_I
  1070 01B8B 1C0E C        	RETL	CH_E
  1071 01B8C 1C0D C        	RETL	CH_D
  1072 01B8D 1C24 C        	RETL	CH_BLANK
  1073 01B8E 1C12 C        	RETL	CH_I
  1074 01B8F 1C17 C        	RETL	CH_N
  1075 01B90 1C1D C        	RETL	CH_T
  1076 01B91 1C18 C        	RETL	CH_O
  1077 01B92 1C24 C        	RETL	CH_BLANK
  1078 01B93 1C0B C        	RETL	CH_B
  1079 01B94 1C18 C        	RETL	CH_O
  1080 01B95 1C18 C        	RETL	CH_O
  1081 01B96 1C14 C        	RETL	CH_K
  1082 01B97 1CFF C        	RETL	CH_END
  1083            C        
  1084 01B98      C        SHOW_COPIED_INTO_BOOK_GE:
  1085 01B98 0020 C        	TBL
  1086 01B99 1C12 C        	RETL	CH_I
  1087 01B9A 1C17 C        	RETL	CH_N
  1088 01B9B 1C1C C        	RETL	CH_S
  1089 01B9C 1C24 C        	RETL	CH_BLANK
  1090 01B9D 1C1D C        	RETL	CH_T
  1091 01B9E 1C0E C        	RETL	CH_E
  1092 01B9F 1C15 C        	RETL	CH_L
  1093 01BA0 1C29 C        	RETL	CH_POINT
  1094 01BA1 1C0B C        	RETL	CH_B
  1095 01BA2 1C24 C        	RETL	CH_BLANK
  1096 01BA3 1C14 C        	RETL	CH_K
  1097 01BA4 1C18 C        	RETL	CH_O
  1098 01BA5 1C19 C        	RETL	CH_P
  1099 01BA6 1C12 C        	RETL	CH_I
  1100 01BA7 1C29 C        	RETL	CH_POINT
  1101 01BA8 1CFF C        	RETL	CH_END
  1102            C        
  1103 01BA9      C        SHOW_OGM_EN:
  1104 01BA9      C        SHOW_OGM__EN:
  1105 01BA9 0020 C        	TBL
  1106 01BAA 1C18 C        	RETL	CH_O
  1107 01BAB 1C10 C        	RETL	CH_G
  1108 01BAC 1C16 C        	RETL	CH_M
  1109 01BAD 1CFF C        	RETL	CH_END
  1110            C        
  1111 01BAE      C        SHOW_OGM_GE:
  1112 01BAE 0020 C        	TBL
  1113 01BAF 1C0A C        	RETL	CH_A
  1114 01BB0 1C17 C        	RETL	CH_N
  1115 01BB1 1C1C C        	RETL	CH_S
  1116 01BB2 1C0A C        	RETL	CH_A
  1117 01BB3 1C10 C        	RETL	CH_G
  1118 01BB4 1C0E C        	RETL	CH_E
  1119 01BB5 1CFF C        	RETL	CH_END
  1120            C        
  1121 01BB6      C        SHOW_OGM__GE:
  1122 01BB6 0020 C        	TBL
  1123 01BB7 1C0A C        	RETL	CH_A
  1124 01BB8 1C17 C        	RETL	CH_N
  1125 01BB9 1C1C C        	RETL	CH_S
  1126 01BBA 1C28 C        	RETL	CH_COLON
  1127 01BBB 1CFF C        	RETL	CH_END
  1128            C        
  1129 01BBC      C        SHOW_END_OF_NAMES_BOOK_EN:
  1130 01BBC 0020 C        	TBL
  1131 01BBD 1C0E C        	RETL	CH_E
  1132 01BBE 1C17 C        	RETL	CH_N
  1133 01BBF 1C0D C        	RETL	CH_D
  1134 01BC0 1C24 C        	RETL	CH_BLANK
  1135 01BC1 1C18 C        	RETL	CH_O
  1136 01BC2 1C0F C        	RETL	CH_F
  1137 01BC3 1C24 C        	RETL	CH_BLANK
  1138            C        	;RETL	CH_N
  1139            C        	;RETL	CH_A
  1140            C        	;RETL	CH_M
  1141            C        	;RETL	CH_E
  1142            C        	;RETL	CH_S
  1143            C        	;RETL	CH_BLANK
  1144 01BC4 1C0B C        	RETL	CH_B
  1145 01BC5 1C18 C        	RETL	CH_O
  1146 01BC6 1C18 C        	RETL	CH_O
  1147 01BC7 1C14 C        	RETL	CH_K
  1148 01BC8 1C1C C        	RETL	CH_S
  1149 01BC9 1CFF C        	RETL	CH_END
  1150            C        
  1151 01BCA      C        SHOW_END_OF_NAMES_BOOK_GE:
  1152 01BCA 0020 C        	TBL
  1153 01BCB 1C1D C        	RETL	CH_T
  1154 01BCC 1C0E C        	RETL	CH_E
  1155 01BCD 1C15 C        	RETL	CH_L
  1156 01BCE 1C29 C        	RETL	CH_POINT
  1157 01BCF 1C0B C        	RETL	CH_B
  1158 01BD0 1C1E C        	RETL	CH_U
  1159 01BD1 1C0C C        	RETL	CH_C
  1160 01BD2 1C11 C        	RETL	CH_H
  1161 01BD3 1C24 C        	RETL	CH_BLANK
  1162 01BD4 1C0E C        	RETL	CH_E
  1163 01BD5 1C17 C        	RETL	CH_N
  1164 01BD6 1C0D C        	RETL	CH_D
  1165 01BD7 1C0E C        	RETL	CH_E
  1166 01BD8 1CFF C        	RETL	CH_END
  1167            C        
  1168            C        ORG	0X1C00
  1169            C        
   499                     
  0 Error(s), 0 Warning(s), 0 User Message(s)