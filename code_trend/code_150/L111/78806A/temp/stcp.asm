ORG	0X0800


RESET_REC_TIMER:
	BANK	1
	DISI
	MOV	TIME_MS,@250
	CLR	TIME_SEC
	CLR	TIME_MIN
	CLR	TIME_HOUR
	SRAM	SYS_FG,TIME
	ENI
	BANK	0
	RET

/*****************************
显示屏锁定，
显示更新不起作用
*****************************/
MENU_LOCK:
	SRAM	SYS_FG,LOCK_TOPLINE
	PAGE	#(CLR_LCD)
	CALL	CLR_STAMP
	CALL	CLR_NUM1
	CALL	CLR_NUM2
	CALL	CLR_STR
	PAGE	#($)
	RET

MENU_CHK:
	MOV	TEMP0,A
	XORA	TEMP0,MENU_STATE
	JPZ	MENU_CHK_RET
	MOV	MENU_STATE,TEMP0
	CALL	#MENU_LOCK
	CIDBANK	1
	MOV	A,MENU_STATE
	TBL
	JMP	MENU_CHK_IDLE
	JMP	MENU_CHK_LANGUAGE
	JMP	MENU_CHK_TIME
	JMP	MENU_CHK_LCD
	JMP	MENU_CHK_CODE
	JMP	MENU_CHK_LCALL
	JMP	MENU_CHK_RING
MENU_CHK_TIME:
	MOV	_RC,@(EDIT_ADDR+1)
	MOV	_RD,HOUR_REG
	INC	_RC
	MOV	_RD,MIN_REG
	INC	_RC
	MOV	_RD,MONTH_REG
	INC	_RC
	MOV	_RD,DAY_REG
	INC	_RC
	MOV	_RD,WEEK_REG
	MOV	A,@0X30
	CALL	#VGA_STAMP
	JMP	MENU_CHK_RET
MENU_CHK_CODE:
	BANK	1
	MOV	_RC,@(EDIT_ADDR+6)
	SWAPA	R1_CODE1
	AND	A,@0X0F
	MOV	_RD,A
	INC	_RC
	SWAPA	R1_CODE23
	AND	A,@0X0F
	MOV	_RD,A
	INC	_RC
	ANDA	R1_CODE23,@0X0F
	MOV	_RD,A
	PAGE	#(VGA_STR)
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	MOV	A,@(WD_SET_REMOTE_CODE)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	JMP	MENU_CHK_RET
MENU_CHK_LCALL:
	MOV	_RC,@(EDIT_ADDR+6)
	SWAPA	LCALL12
	AND	A,@0X0F
	MOV	_RD,A
	INC	_RC
	ANDA	LCALL12,@0X0F
	MOV	_RD,A
	INC	_RC
	SWAPA	LCALL34
	AND	A,@0X0F
	MOV	_RD,A
	INC	_RC
	ANDA	LCALL34,@0X0F
	MOV	_RD,A
	INC	_RC
	SWAPA	LCALL5
	AND	A,@0X0F
	MOV	_RD,A
	
	INC	_RC
	MOV	_RD,@0X0F
	SUBA	_RC,@(EDIT_ADDR+21)
	JPNZ	$-6
	
	PAGE	#(VGA_STR)
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	MOV	A,@(WD_SET_LONG_CODE)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	JMP	MENU_CHK_RET
MENU_CHK_IDLE:
MENU_CHK_LANGUAGE:
MENU_CHK_LCD:
MENU_CHK_RING:
MENU_CHK_RET:
	CIDBANK	1
	RET

/***************************************
初始化编辑区
将CID区的电话号码复制到编辑区
或将编辑区清空
***************************************/
INIT_EDIT:
; -----------------------	将CID区的电话号码信息复制到编辑区
	;CIDBANK	1
	CALL	INIT_EDIT_NUM1
	CALL	INIT_EDIT_NUM2
	CALL	INIT_EDIT_STR
	RET

INIT_EDIT_NUM1:
	MOV	_RC,@(CID_ADDR+31)
	MOV	TEMP0,_RD
	MOV	_RC,@(EDIT_ADDR+1)
	MOV	_RD,TEMP0
	MOV	_RC,@(CID_ADDR+32)
	MOV	TEMP0,_RD
	MOV	_RC,@(EDIT_ADDR+2)
	MOV	_RD,TEMP0
	MOV	_RC,@(CID_ADDR+30)
	MOV	TEMP0,_RD
	MOV	_RC,@(EDIT_ADDR+3)
	MOV	_RD,TEMP0
	MOV	_RC,@(CID_ADDR+29)
	MOV	TEMP0,_RD
	MOV	_RC,@(EDIT_ADDR+4)
	MOV	_RD,TEMP0
	MOV	_RC,@(CID_ADDR+33)
	MOV	TEMP0,_RD
	MOV	_RC,@(EDIT_ADDR+5)
	MOV	_RD,TEMP0
	RET

INIT_EDIT_NUM2:
	CLR	TEMP0
INIT_EDIT_NUM2_LOOP:
	CLRC
	RRCA	TEMP0
	ADD	A,@(CID_ADDR+3)
	MOV	_RC,A
	MOV	TEMP1,_RD
	ADDA	TEMP0,@(EDIT_ADDR+6)
	MOV	_RC,A
	SWAPA	TEMP1
	AND	A,@0X0F
	MOV	_RD,A
	INC	TEMP0
	INC	_RC
	ANDA	TEMP1,@0X0F
	MOV	_RD,A
	INC	TEMP0
	SUBA	TEMP0,@16
	JPNZ	INIT_EDIT_NUM2_LOOP
	RET

INIT_EDIT_STR:
	CLR	TEMP0
INIT_EDIT_STR_LOOP:
	ADDA	TEMP0,@(CID_ADDR+12)
	MOV	_RC,A
	MOV	TEMP1,_RD
	ADDA	TEMP0,@(EDIT_ADDR+22)
	MOV	_RC,A
	MOV	_RD,TEMP1
	INC	TEMP0
	SUBA	TEMP0,@16
	JPNZ	INIT_EDIT_STR_LOOP
	RET


CLR_EDIT:
	CALL	CLR_EDIT_NUM1
	CALL	CLR_EDIT_NUM2
	CALL	CLR_EDIT_STR
	RET

CLR_EDIT_NUM1:
	MOV	_RC,@(EDIT_ADDR+0)
	INC	_RC
	MOV	_RD,@0XFF
	SUBA	_RC,@(EDIT_ADDR+4)
	JPNZ	$-6
	INC	_RC
	CLR	_RD
	RET

CLR_EDIT_NUM2:
	MOV	_RC,@(EDIT_ADDR+5)
	INC	_RC
	MOV	_RD,@0X0F
	SUBA	_RC,@(EDIT_ADDR+21)
	JPNZ	$-6
	RET

CLR_EDIT_STR:
	MOV	_RC,@(EDIT_ADDR+21)
	INC	_RC
	MOV	_RD,@0XFF
	SUBA	_RC,@(EDIT_ADDR+37)
	JPNZ	$-6
	RET
/*****************************
对编辑区的内容作修改。
输入 -- A	编辑的位置
RC   -- 	编辑的内容的地址
当输入0时，显示正常号码，第一行和第三行遇FF不显示，第二行遇F不显示
当输入1~16时，闪烁相应位置的数字，
*****************************/
EDIT_NUM1:
	BANK	0
	MOV	BANK0_TEMP0,A
	MOV	TEMP0,@(EDIT_ADDR+5)
	MOV	A,@(EDIT_ADDR+1)
	JMP	EDIT_INFO
EDIT_NUM2:
	BANK	0
	MOV	BANK0_TEMP0,A
	MOV	TEMP0,@(EDIT_ADDR+21)
	MOV	A,@(EDIT_ADDR+6)
	JMP	EDIT_INFO
EDIT_STR:
	BANK	0
	MOV	BANK0_TEMP0,A
	MOV	TEMP0,@(EDIT_ADDR+37)
	MOV	A,@(EDIT_ADDR+22)
	JMP	EDIT_INFO
EDIT_INFO:
	MOV	BANK0_TEMP1,A
	MOV	A,BANK0_TEMP0
	JPZ	EDIT_INFO_RET
	MOV	BANK0_TEMP2,_RD
	SUBA	BANK0_TEMP2,@0X80
	JPZ	EDIT_INFO_DEL
	ADDA	BANK0_TEMP0,BANK0_TEMP1
	MOV	_RC,A
	DEC	_RC
	MOV	_RD,BANK0_TEMP2
	JMP	EDIT_INFO_RET
EDIT_INFO_DEL:
	SUBA	BANK0_TEMP1,@1
	ADD	A,BANK0_TEMP0
	MOV	_RC,A
EDIT_INFO_DEL_LOOP:
	SUBA	_RC,TEMP0
	JPZ	EDIT_INFO_DEL_END
	INC	_RC
	MOV	TEMP1,_RD
	DEC	_RC
	MOV	_RD,TEMP1
	INC	_RC
	JMP	EDIT_INFO_DEL_LOOP
EDIT_INFO_DEL_END:
	MOV	_RD,@0XFF
	JMP	EDIT_INFO_RET
EDIT_INFO_RET:
	SUBA	BANK0_TEMP1,@(EDIT_ADDR+1)
	JPNZ	$+3
	MOV	A,BANK0_TEMP0
	JMP	DISP_NUM1
	SUBA	BANK0_TEMP1,@(EDIT_ADDR+6)
	JPNZ	$+3
	MOV	A,BANK0_TEMP0
	JMP	DISP_NUM2
	SUBA	BANK0_TEMP1,@(EDIT_ADDR+22)
	JPNZ	$+3
	MOV	A,BANK0_TEMP0
	JMP	DISP_STR
	RET

DISP_NUM1:
	BANK	0
	MOV	BANK0_TEMP0,A
	CLR	BANK0_TEMP1
	MOV	A,@STYLE_NORMAL
	CALL	#VGA_NUM1
DISP_NUM1_LOOP:
	CLR	BANK0_TEMP3
	INC	BANK0_TEMP1
	CIDBANK	1
	ADDA	BANK0_TEMP1,@(EDIT_ADDR+1-1)
	MOV	_RC,A
	MOV	BANK0_TEMP2,_RD
	SUBA	BANK0_TEMP0,BANK0_TEMP1
	JPNZ	$+3
	MOV	BANK0_TEMP3,@0X80
	SUBA	BANK0_TEMP2,@0XFF
	JPZ	DISP_NUM1_LOOP_1
	MOV	GENE_A,BANK0_TEMP2
	CALL	#MATH_HTD
	MOV	BANK0_TEMP2,RESULT
	SWAPA	BANK0_TEMP2
	AND	A,@0X0F
	MOV	TEMP0,A
	SUBA	BANK0_TEMP1,@4
	JPNZ	$+6
	MOV	A,TEMP0
	JPNZ	$+3
	MOV	TEMP0,@NUM_BLANK
	MOV	A,TEMP0
	ADD	A,BANK0_TEMP3
	PAGE	#VGA_NUM1
	CALL	VGA_NUM1
	ANDA	BANK0_TEMP2,@0X0F
	ADD	A,BANK0_TEMP3
	CALL	VGA_NUM1
	PAGE	#($)
	JMP	DISP_NUM1_LOOP_2
DISP_NUM1_LOOP_1:
	PAGE	#VGA_NUM1
	MOV	A,@NUM_BLANK
	CALL	VGA_NUM1
	MOV	A,@NUM_BLANK
	CALL	VGA_NUM1
	PAGE	#($)
DISP_NUM1_LOOP_2:
	SUBA	BANK0_TEMP1,@5
	JPNZ	DISP_NUM1_LOOP
	MOV	A,@CH_END
	CALL	#VGA_NUM1
	RET

DISP_NUM2:
	BANK	0
	MOV	BANK0_TEMP0,A
	CLR	BANK0_TEMP1
	MOV	A,@STYLE_NORMAL
	CALL	#VGA_NUM2
DISP_NUM2_LOOP:
	CLR	BANK0_TEMP3
	INC	BANK0_TEMP1
	CIDBANK	1
	ADDA	BANK0_TEMP1,@(EDIT_ADDR+6-1)
	MOV	_RC,A
	MOV	BANK0_TEMP2,_RD
	SUBA	BANK0_TEMP0,BANK0_TEMP1
	JPNZ	$+3
	MOV	BANK0_TEMP3,@0X80
	SUBA	BANK0_TEMP2,@0X0A
	JPNC	$+8
	JPB	BANK0_TEMP3,7,$+4
	MOV	BANK0_TEMP2,@NUM_BLANK
	JMP	$+3
	MOV	BANK0_TEMP2,@0X11
	ADDA	BANK0_TEMP2,BANK0_TEMP3
	CALL	#VGA_NUM2
	SUBA	BANK0_TEMP1,@16
	JPNZ	DISP_NUM2_LOOP
	MOV	A,@CH_END
	CALL	#VGA_NUM2
	RET

DISP_STR:
	;BANK	0
	MOV	BANK0_TEMP0,A
	CLR	BANK0_TEMP1
	MOV	A,@STYLE_NORMAL
	CALL	#VGA_STR
DISP_STR_LOOP:
	CLR	BANK0_TEMP3
	INC	BANK0_TEMP1
	CIDBANK	1
	ADDA	BANK0_TEMP1,@(EDIT_ADDR+22-1)
	MOV	_RC,A
	MOV	BANK0_TEMP2,_RD
	SUBA	BANK0_TEMP0,BANK0_TEMP1
	JPNZ	DISP_STR_LOOP_1
	MOV	BANK0_TEMP3,@0X80
	SUBA	BANK0_TEMP2,@0X7F
	JPZ	$+5
	SUBA	BANK0_TEMP2,@0XFF
	JPNZ	$+3
	MOV	BANK0_TEMP2,@CH__
	SUBA	BANK0_TEMP2,@CH_BLANK
	JPNZ	$+3
	MOV	BANK0_TEMP2,@CH_BLACK
	JMP	DISP_STR_LOOP_2
DISP_STR_LOOP_1:
	SUBA	BANK0_TEMP2,@0X7F
	JPZ	$+5
	SUBA	BANK0_TEMP2,@0XFF
	JPNZ	$+3
	MOV	BANK0_TEMP2,@CH_BLANK
DISP_STR_LOOP_2:
	
	ADDA	BANK0_TEMP2,BANK0_TEMP3
	CALL	#VGA_STR
	SUBA	BANK0_TEMP1,@16
	JPNZ	DISP_STR_LOOP
	MOV	A,@CH_END
	CALL	#VGA_STR
	RET

/*****************************
菜单操作显示时间
*****************************/
MENU_TIME:
	MOV	TEMP0,A
	;INC	_RC
	MOV	TEMP1,_RD
	CLR	TEMP2
MENU_TIME_0:
	ADDA	TEMP2,@(EDIT_ADDR+1)
	MOV	_RC,A
	SUBA	TEMP0,TEMP2
	JPNZ	MENU_TIME_1
	ADDA	TEMP1,@0X80
	MOV	_RD,A
	JMP	MENU_TIME_2
MENU_TIME_1:
	AND	_RD,@0X7F
MENU_TIME_2:
	INC	TEMP2
	SUBA	TEMP2,@5
	JPNZ	MENU_TIME_0
	RET

DISP_MENU_TIME:
	MOV	A,@0
	CALL	#VGA_NUM1
	CIDBANK	1
	MOV	_RC,@(EDIT_ADDR+1)
	JPNB	_RD,7,$+4
	MOV	A,_RD
	CALL	FLASH_TIME
	JMP	$+5
	MOV	A,_RD
	CALL	#VGA_TIME
	CIDBANK	1
	MOV	_RC,@(EDIT_ADDR+2)
	JPNB	_RD,7,$+4
	MOV	A,_RD
	CALL	FLASH_TIME
	JMP	$+5
	MOV	A,_RD
	CALL	#VGA_TIME
	CIDBANK	1
	MOV	_RC,@(EDIT_ADDR+4)
	JPNB	_RD,7,$+4
	MOV	A,_RD
	CALL	FLASH_TIME
	JMP	$+5
	MOV	A,_RD
	CALL	#VGA_TIME
	CIDBANK	1
	MOV	_RC,@(EDIT_ADDR+3)
	JPNB	_RD,7,$+4
	MOV	A,_RD
	CALL	FLASH_MONTH
	JMP	$+5
	MOV	A,_RD
	CALL	#VGA_MONTH
	
	PAGE	#VGA_NUM1
	MOV	A,@NUM_BLANK
	CALL	VGA_NUM1
	MOV	A,@NUM_BLANK
	CALL	VGA_NUM1
	MOV	A,@CH_END
	CALL	VGA_NUM1
	
	;PAGE	#VGA_STR
	MOV	A,@STYLE_CENTER
	CALL	VGA_STR
	CIDBANK	1
	MOV	_RC,@(EDIT_ADDR+5)
	ADDA	_RD,@(WD_SUNDAY)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	RET

FLASH_TIME:
	AND	A,@0X7F
	MOV	GENE_A,A
	CALL	#MATH_HTD
	MOV	BANK0_TEMP0,A			; RESULT = A
	SWAPA	BANK0_TEMP0
	AND	A,@(0X0F)
	ADD	A,@(0X80)
	PAGE	#VGA_NUM1
	CALL	VGA_NUM1
	ANDA	BANK0_TEMP0,@(0X0F)
	ADD	A,@(0X80)
	CALL	VGA_NUM1
	PAGE	#($)
	RET

FLASH_MONTH:
	AND	A,@0X7F
	MOV	GENE_A,A
	CALL	#MATH_HTD
	MOV	TEMP5,A				; RESULT = A
	SWAPA	TEMP5
	AND	A,@(0X0F)
	JPNZ	$+2
	MOV	A,@NUM_BLANK
	ADD	A,@(0X80)
	PAGE	#VGA_NUM1
	CALL	VGA_NUM1
	ANDA	TEMP5,@(0X0F)
	ADD	A,@(0X80)
	CALL	VGA_NUM1
	PAGE	#($)
	RET

/*****************************
操作菜单显示对比度
*****************************/
DISP_MENU_LCD:
	MOV	BANK0_TEMP0,A
	PAGE	#VGA_NUM2
	MOV	A,@STYLE_CENTER
	CALL	VGA_NUM2
	MOV	A,BANK0_TEMP0
	CALL	VGA_NUM2
	MOV	A,@CH_END
	CALL	VGA_NUM2
	PAGE	#($)
	MOV	A,BANK0_TEMP0
	CALL	#LCD_CONTRAST_APPLY
	RET

/*****************************
操作菜单密码显示
*****************************/
DISP_MENU_CODE:
	;BANK	0
	MOV	BANK0_TEMP0,A
	JPZ	DISP_MENU_CODE_1
	;INC	_RC
	MOV	BANK0_TEMP2,_RD
	ADDA	BANK0_TEMP0,@(EDIT_ADDR+6-1)
	MOV	_RC,A
	MOV	_RD,BANK0_TEMP2
DISP_MENU_CODE_1:
	MOV	A,@STYLE_CENTER
	CALL	#VGA_NUM2
	CLR	BANK0_TEMP1
DISP_MENU_CODE_LOOP:
	CIDBANK	1
	ADDA	BANK0_TEMP1,@(EDIT_ADDR+6)
	MOV	_RC,A
	MOV	BANK0_TEMP2,_RD
	INC	BANK0_TEMP1
	SUBA	BANK0_TEMP0,BANK0_TEMP1
	JPNZ	$+2
	SRAM	BANK0_TEMP2,7
	MOV	A,BANK0_TEMP2
	CALL	#VGA_NUM2
	SUBA	BANK0_TEMP1,@3
	JPNZ	DISP_MENU_CODE_LOOP
	MOV	A,@CH_END
	CALL	#VGA_NUM2
	RET



ORG	0X0C00

STCP_CHK:
	BANK	0
	CIDBANK	1
	MOV	_RC,@(TCP_ADDR+0)
	JPB	_RD,7,STCP_CHK_1
	;CALL	#AUDIO_SEND
	RET
STCP_CHK_1:
	MOV	_RC,@(TCP_ADDR+1)
	SUBA	_RD,@0X80
	JPNC	STCP_INVALID			; 命令<0X80，无效命令
	MOV	TEMP0,A
	SUB	A,@(0XD0-0X80)			; 命令>0XCE，无效命令
	JPNC	STCP_INVALID
	INC	_RC
	MOV	A,TEMP0
	TBL
	JMP	STCP_INFO			; 0X80
	JMP	STCP_INIT_TIME			; 0X81
	JMP	STCP_INIT_CALL			; 0X82
	JMP	STCP_INIT_MSG			; 0X83
	JMP	STCP_INIT_BOOK			; 0X84
	JMP	STCP_INIT_CODE			; 0X85
	JMP	STCP_INIT_LCALL			; 0X86
	JMP	STCP_INIT_LCDCONTRAST		; 0X87
	JMP	STCP_INIT_TIMEFORMAT		; 0X88
	JMP	STCP_INIT_LANGUAGE		; 0X89
	JMP	STCP_INIT_INVALID		; 0X8A
	JMP	STCP_INIT_INVALID		; 0X8B
	JMP	STCP_INIT_INVALID		; 0X8C
	JMP	STCP_INIT_INVALID		; 0X8D
	JMP	STCP_INIT_INVALID		; 0X8E
	JMP	STCP_INIT_INVALID		; 0X8F
	JMP	STCP_MENU_LANGUANGE		; 0X90
	JMP	STCP_MENU_HOUR			; 0X91
	JMP	STCP_MENU_MINUTE		; 0X92
	JMP	STCP_MENU_MONTH			; 0X93
	JMP	STCP_MENU_DAY			; 0X94
	JMP	STCP_MENU_WEEK			; 0X95
	JMP	STCP_MENU_LCDCONTRAST		; 0X96
	JMP	STCP_MENU_CODE1			; 0X97
	JMP	STCP_MENU_CODE2			; 0X98
	JMP	STCP_MENU_CODE3			; 0X99
	JMP	STCP_MENU_LCALL1		; 0X9A
	JMP	STCP_MENU_LCALL2		; 0X9B
	JMP	STCP_MENU_LCALL3		; 0X9C
	JMP	STCP_MENU_LCALL4		; 0X9D
	JMP	STCP_EXTOP			; 0X9E
	JMP	STCP_BOOK			; 0X9F
	JMP	STCP_CHANGE_NUM2		; 0XA0
	JMP	STCP_CHANGE_NUM2		; 0XA1
	JMP	STCP_CHANGE_NUM2		; 0XA2
	JMP	STCP_CHANGE_NUM2		; 0XA3
	JMP	STCP_CHANGE_NUM2		; 0XA4
	JMP	STCP_CHANGE_NUM2		; 0XA5
	JMP	STCP_CHANGE_NUM2		; 0XA6
	JMP	STCP_CHANGE_NUM2		; 0XA7
	JMP	STCP_CHANGE_NUM2		; 0XA8
	JMP	STCP_CHANGE_NUM2		; 0XA9
	JMP	STCP_CHANGE_NUM2		; 0XAA
	JMP	STCP_CHANGE_NUM2		; 0XAB
	JMP	STCP_CHANGE_NUM2		; 0XAC
	JMP	STCP_CHANGE_NUM2		; 0XAD
	JMP	STCP_CHANGE_NUM2		; 0XAE
	JMP	STCP_CHANGE_NUM2		; 0XAF
	JMP	STCP_CHANGE_STR			; 0XB0
	JMP	STCP_CHANGE_STR			; 0XB1
	JMP	STCP_CHANGE_STR			; 0XB2
	JMP	STCP_CHANGE_STR			; 0XB3
	JMP	STCP_CHANGE_STR			; 0XB4
	JMP	STCP_CHANGE_STR			; 0XB5
	JMP	STCP_CHANGE_STR			; 0XB6
	JMP	STCP_CHANGE_STR			; 0XB7
	JMP	STCP_CHANGE_STR			; 0XB8
	JMP	STCP_CHANGE_STR			; 0XB9
	JMP	STCP_CHANGE_STR			; 0XBA
	JMP	STCP_CHANGE_STR			; 0XBB
	JMP	STCP_CHANGE_STR			; 0XBC
	JMP	STCP_CHANGE_STR			; 0XBD
	JMP	STCP_CHANGE_STR			; 0XBE
	JMP	STCP_CHANGE_STR			; 0XBF
	JMP	STCP_CHOICE_OGMX		; 0XC0
	JMP	STCP_REC_OGMX			; 0XC1
	JMP	STCP_STOPREC_OGMX		; 0XC2
	JMP	STCP_PLAY_OGMX			; 0XC3
	JMP	STCP_STOPPLAY_OGMX		; 0XC4
	JMP	STCP_RECORD			; 0XC5
	JMP	STCP_STOPRECORD			; 0XC6
	JMP	STCP_PLAYMSG			; 0XC7
	JMP	STCP_PAUSEMSG			; 0XC8
	JMP	STCP_STOPMSG			; 0XC9
	JMP	STCP_CALL			; 0XCA
	JMP	STCP_VOLUME			; 0XCB
	JMP	STCP_DELETE			; 0XCC
	JMP	STCP_RING			; 0XCD
	JMP	STCP_MENU_RING			; 0XCE
	JMP	STCP_MENU_LCALL5		; 0XCF
	JMP	STCP_HOOK			; 0XD0
STCP_INVALID:

STCP_RET:
	PAGE	#(0X1200)
	CALL	DEL_FINISHED
	CALL	SER_BUF_CHK
	PAGE	#($)
	CID_DECODE
	JMP	STCP_CHK
	;RET


STCP_INFO:			; 0X80
	;INC	_RC
	JPB	_RD,7,STCP_TEL_INFO
	ANDA	_RD,@0X60
	MOV	TEMP0,A
	;SUBA	TEMP0,@0
	MOV	A,TEMP0
	JPZ	STCP_INFO_NUM
	SUBA	TEMP0,@0X20
	JPZ	STCP_INFO_NAME
	SUBA	TEMP0,@0X40
	JPZ	STCP_INFO_TIME
	SUBA	TEMP0,@0X60
	JPZ	STCP_INFO_OGM
STCP_INFO_RET:
	;RET
	JMP	STCP_RET
STCP_TEL_INFO:
	MOV	BANK0_TEMP0,_RC
	CLRCIDRAM	@(CID_ADDR+1),@33,@0XFF
	
	MOV	A,@(CID_ADDR+1)
	CALL	TEL_INFO
	MOV	A,@(CID_ADDR+2)
	CALL	TEL_INFO
	MOV	A,@(CID_ADDR+11)
	CALL	TEL_INFO
	MOV	A,@(CID_ADDR+28)
	CALL	TEL_INFO
	JMP	STCP_INFO_RET

TEL_INFO:
	MOV	BANK0_TEMP1,A
	MOV	_RC,BANK0_TEMP0
	MOV	TEMP0,_RD
	MOV	_RC,BANK0_TEMP1
	MOV	_RD,TEMP0
	CRAM	_RD,7
	INC	BANK0_TEMP0
	RET
	
STCP_INFO_NUM:
	MOV	A,@(CID_ADDR+3)
	JMP	STCP_INFO_1
STCP_INFO_NAME:
	MOV	A,@(CID_ADDR+12)
	JMP	STCP_INFO_1
STCP_INFO_TIME:
	MOV	A,@(CID_ADDR+29)
	JMP	STCP_INFO_1
STCP_INFO_OGM:
	MOV	A,@(CID_ADDR+33)
	JMP	STCP_INFO_1
STCP_INFO_1:
	MOV	TEMP1,A
	MOV	TEMP0,_RC
	INC	TEMP0
	ANDA	_RD,@0X1F
	ADD	A,TEMP1
	MOV	TEMP2,A
	CALL	#COPY_CIDRAM
	;RET
	JMP	STCP_RET


STCP_INIT_TIME:			; 0X81
	CLR	SEC_REG
	;INC	_RC
	MOV	MONTH_REG,_RD
	INC	_RC
	MOV	DAY_REG,_RD
	INC	_RC
	MOV	HOUR_REG,_RD
	INC	_RC
	MOV	MIN_REG,_RD
	INC	_RC
	MOV	WEEK_REG,_RD
	;RET
	JMP	STCP_RET


STCP_INIT_CALL:			; 0X82
	;INC	_RC
	MOV	NEW_CALL,_RD
	INC	_RC
	MOV	TOTAL_CALL,_RD
	;RET
	JMP	STCP_RET


STCP_INIT_MSG:			; 0X83
	;INC	_RC
	MOV	NEW_MSG,_RD
	INC	_RC
	MOV	TOTAL_MSG,_RD
	;RET
	JMP	STCP_RET


STCP_INIT_BOOK:			; 0X84
	;INC	_RC
	MOV	TOTAL_BOOK,_RD
	;RET
	JMP	STCP_RET


STCP_INIT_CODE:			; 0X85
	BANK	1
	;INC	_RC
	AND	R1_CODE1,@0X0F
	SWAPA	_RD
	AND	A,@0XF0
	ADD	R1_CODE1,A
	INC	_RC
	SWAPA	_RD
	AND	A,@0XF0
	MOV	R1_CODE23,A
	INC	_RC
	ANDA	_RD,@0X0F
	ADD	R1_CODE23,A
	;RET
	JMP	STCP_RET


STCP_INIT_LCALL:		; 0X86
	;INC	_RC
	SWAPA	_RD
	AND	A,@0XF0
	MOV	LCALL12,A
	INC	_RC
	ANDA	_RD,@0X0F
	ADD	LCALL12,A
	INC	_RC
	SWAPA	_RD
	AND	A,@0XF0
	MOV	LCALL34,A
	INC	_RC
	ANDA	_RD,@0X0F
	ADD	LCALL34,A
	INC	_RC
	SWAPA	_RD
	OR	A,@0X0F
	MOV	LCALL5,A
	;RET
	JMP	STCP_RET


STCP_INIT_LCDCONTRAST:		; 0X87
	BANK	1
	;INC	_RC
	AND	R1_LCD_CONTRAST,@0XF0
	ANDA	_RD,@0X0F
	ADD	R1_LCD_CONTRAST,A
	ANDA	R1_LCD_CONTRAST,@0X0F
	CALL	#LCD_CONTRAST_APPLY
	;RET
	JMP	STCP_RET


STCP_INIT_TIMEFORMAT:		; 0X88
	;BANK	1
	;CRAM	R1_SYS_FG,TIMEFORMAT
	;MOV	A,_RD
	;JPZ	STCP_RET
	;SRAM	R1_SYS_FG,TIMEFORMAT
	JMP	STCP_RET


STCP_INIT_LANGUAGE:		; 0X89
	CRAM	SYS_FG,LANGUAGE
	MOV	A,_RD
	JPZ	$+2
	SRAM	SYS_FG,LANGUAGE
	;RET
	JMP	STCP_RET


STCP_INIT_INVALID:		; 0X8A/0X8B/0X8C/0X8D/0X8E/0X8F
	;RET
	JMP	STCP_RET


STCP_MENU_LANGUANGE:		; 0X90
	MOV	MENU_STATE,@1
	
	MOV	BANK0_TEMP0,@0X80
	CLR	BANK0_TEMP1
	MOV	A,_RD
	JPZ	$+4
	CLR	BANK0_TEMP0
	MOV	BANK0_TEMP1,@0X80
	
	CALL	#MENU_LOCK
	
	PAGE	#(VGA_STR)
	MOV	A,@(STYLE_LEFT)
	CALL	VGA_STR
	ADDA	BANK0_TEMP0,@(WD_ENGLISH)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	
	MOV	A,@(STYLE_RIGHT)
	CALL	VGA_STR
	ADDA	BANK0_TEMP1,@(WD_GERMAN)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	;RET
	JMP	STCP_RET


STCP_MENU_HOUR:			; 0X91
	MOV	A,@0
	JMP	STCP_MENU_TIME
STCP_MENU_MINUTE:		; 0X92
	MOV	A,@1
	JMP	STCP_MENU_TIME
STCP_MENU_MONTH:		; 0X93
	MOV	A,@2
	JMP	STCP_MENU_TIME
STCP_MENU_DAY:			; 0X94
	MOV	A,@3
	JMP	STCP_MENU_TIME
STCP_MENU_WEEK:			; 0X95
	MOV	A,@4
	;JMP	STCP_MENU_TIME
STCP_MENU_TIME:
	MOV	BANK0_TEMP0,A
	MOV	BANK0_TEMP1,_RC
	MOV	A,@2
	CALL	#MENU_CHK
	CIDBANK	1
	MOV	_RC,BANK0_TEMP1
	MOV	A,BANK0_TEMP0
	CALL	#MENU_TIME
	CALL	#MENU_LOCK
	CALL	#DISP_MENU_TIME
	MOV	A,@0X30
	CALL	#VGA_STAMP
	;RET
	JMP	STCP_RET


STCP_MENU_LCDCONTRAST:		; 0X96
	MOV	MENU_STATE,@3
	MOV	BANK0_TEMP0,_RD
	CALL	#LCD_CONTRAST_APPLY
	CALL	#MENU_LOCK
	
	PAGE	#(VGA_STR)
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_NUM2
	MOV	A,BANK0_TEMP0
	CALL	VGA_NUM2
	MOV	A,@CH_END
	CALL	VGA_NUM2
	
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	MOV	A,@(WD_LCD_CONTRAST)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	
	PAGE	#($)
	
	;RET
	JMP	STCP_RET


STCP_MENU_CODE1:		; 0X97
	MOV	A,@1
	JMP	STCP_MENU_CODE
STCP_MENU_CODE2:		; 0X98
	MOV	A,@2
	JMP	STCP_MENU_CODE
STCP_MENU_CODE3:		; 0X99
	MOV	A,@3
	JMP	STCP_MENU_CODE
STCP_MENU_CODE:
	MOV	BANK0_TEMP0,A
	MOV	BANK0_TEMP1,_RC
	MOV	A,@4
	CALL	#MENU_CHK
	CIDBANK	1
	MOV	_RC,BANK0_TEMP1
	MOV	A,BANK0_TEMP0
	CALL	#DISP_MENU_CODE
	;RET
	JMP	STCP_RET


STCP_MENU_LCALL1:		; 0X9A
	MOV	A,@1
	JMP	STCP_MENU_LCALL
STCP_MENU_LCALL2:		; 0X9B
	MOV	A,@2
	JMP	STCP_MENU_LCALL
STCP_MENU_LCALL3:		; 0X9C
	MOV	A,@3
	JMP	STCP_MENU_LCALL
STCP_MENU_LCALL4:		; 0X9D
	MOV	A,@4
	JMP	STCP_MENU_LCALL
STCP_MENU_LCALL5:
	MOV	A,@5
STCP_MENU_LCALL:
	MOV	BANK0_TEMP0,A
	MOV	BANK0_TEMP1,_RC
	MOV	A,@5
	CALL	#MENU_CHK
	MOV	_RC,BANK0_TEMP1
	MOV	A,BANK0_TEMP0
	CALL	#EDIT_NUM2
	;RET
	JMP	STCP_RET

STCP_MENU_RING:
	MOV	MENU_STATE,@6
	MOV	BANK0_TEMP0,_RD
	CALL	#MENU_LOCK
	
	MOV	A,@(STYLE_CENTER)
	CALL	#VGA_NUM2
	SUBA	BANK0_TEMP0,@2
	JPC	STCP_MENU_RING_1
	MOV	A,@NUM_EX2
	CALL	#VGA_NUM2
	MOV	A,@NUM_5
	JMP	STCP_MENU_RING_2
STCP_MENU_RING_1:
	ANDA	BANK0_TEMP0,@(0X0F)
STCP_MENU_RING_2:
	CALL	#VGA_NUM2
	MOV	A,@CH_END
	CALL	#VGA_NUM2
	
	MOV	A,@(STYLE_CENTER)
	CALL	#VGA_STR
	MOV	A,@(WD_SET_RING)
	CALL	#VGA_STRING
	MOV	A,@CH_END
	CALL	#VGA_STR
	
	
	;RET
	JMP	STCP_RET
	


STCP_EXTOP:			; 0X9E
	SUBA	_RD,@7
	JPC	STCP_INVALID
	MOV	A,_RD
	TBL
	JMP	STCP_EXT_EDITBOOK
	JMP	STCP_EXT_SEARCHBOOK
	JMP	STCP_EXT_COPYBOOK
	JMP	STCP_EXT_DIAL
	JMP	STCP_EXT_LDIAL
	JMP	STCP_EXT_REMOTE
	JMP	STCP_EXT_RETURN
STCP_EXT_EDITBOOK:
	MOV	BANK0_TEMP0,@(WD_EDIT+0X80)
	MOV	BANK0_TEMP1,@(WD_SEARCH)
	JMP	STCP_EXT_EDITSEARCH
STCP_EXT_SEARCHBOOK:
	MOV	BANK0_TEMP0,@(WD_EDIT)
	MOV	BANK0_TEMP1,@(WD_SEARCH+0X80)
STCP_EXT_EDITSEARCH:
	CALL	#CLR_EDIT
	
	CALL	#MENU_LOCK
	PAGE	#(VGA_STR)
	MOV	A,@(STYLE_LEFT)
	CALL	VGA_STR
	MOV	A,BANK0_TEMP0
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	
	MOV	A,@(STYLE_RIGHT)
	CALL	VGA_STR
	MOV	A,BANK0_TEMP1
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	
	;RET
	JMP	STCP_RET
STCP_EXT_COPYBOOK:
	CALL	#CLR_EDIT
	CALL	#INIT_EDIT_NUM2
	CALL	#MENU_LOCK
	
	PAGE	#(VGA_STR)
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	MOV	A,@(WD_COPIED_INTO_BOOK)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	;RET
	JMP	STCP_RET
STCP_EXT_DIAL:
	CALL	#INIT_DIAL
STCP_EXT_DIAL_1:
	CLR	BANK0_TEMP0
STCP_EXT_DIAL_LOOP:
	CLRC
	RRCA	BANK0_TEMP0
	ADD	A,@(CID_ADDR+3)
	MOV	_RC,A
	JPB	BANK0_TEMP0,0,$+3
	SWAPA	_RD
	JMP	$+2
	MOV	A,_RD
	AND	A,@0X0F
	CALL	#STORE_DIALNUM
	INC	BANK0_TEMP0
	SUBA	BANK0_TEMP0,@16
	JPNZ	STCP_EXT_DIAL_LOOP
	MOV	A,@CH_END
	CALL	#STORE_DIALNUM
	;RET
	JMP	STCP_RET
STCP_EXT_LDIAL:
	CALL	#INIT_DIAL
	;SWAPA	LCALL12
	;AND	A,@0X0F
	;MOV	TEMP0,A
	;SUB	A,@9
	;JPNC	$+5
	;MOV	A,TEMP0
	;CALL	#STORE_DIALNUM
	;ANDA	LCALL12,@0X0F
	;MOV	TEMP0,A
	;SUB	A,@9
	;JPNC	$+5
	;MOV	A,TEMP0
	;CALL	#STORE_DIALNUM
	;SWAPA	LCALL34
	;AND	A,@0X0F
	;MOV	TEMP0,A
	;SUB	A,@9
	;JPNC	$+5
	;MOV	A,TEMP0
	;CALL	#STORE_DIALNUM
	;ANDA	LCALL34,@0X0F
	;MOV	TEMP0,A
	;SUB	A,@9
	;JPNC	$+5
	;MOV	A,TEMP0
	;CALL	#STORE_DIALNUM
	;SWAPA	LCALL5
	;AND	A,@0X0F
	;MOV	TEMP0,A
	;SUB	A,@9
	;JPNC	$+5
	;MOV	A,TEMP0
	;CALL	#STORE_DIALNUM
	MOV	A,@0
	CALL	#STORE_DIALNUM
	JMP	STCP_EXT_DIAL_1
STCP_EXT_REMOTE:
	;SRAM	EVENT,1				; 不允许电话线检测
	CALL	#MENU_LOCK
	
	PAGE	#(VGA_STR)
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	MOV	A,@(WD_IN_REMOTE)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	;RET
	JMP	STCP_RET

STCP_EXT_RETURN:
;	JPNB	EVENT,TEST,STCP_EXT_RETURN_1
;	MOV	A,@CH_END
;	CALL	#VGA_NUM2
;STCP_EXT_RETURN_1:
	CALL	#MENU_LOCK
	CRAM	SYS_FG,LOCK_TOPLINE
	SRAM	SYS_FG,SYS_CLOCK
	SRAM	SYS_FG,STAMP
	CRAM	SYS_FG,TIME
	CLR	TMR_NAME
	;CRAM	EVENT,TEST			; 停止TEST L111
	;RET
	JMP	STCP_RET
	

STCP_BOOK:			; 0X9F
	MOV	A,_RD
	JPZ	STCP_BOOK_END
	MOV	BANK0_TEMP0,A
	CALL	#INIT_EDIT
	CALL	#MENU_LOCK			; 屏蔽第一行的更新
	CIDBANK	1
	MOV	_RC,@(CID_ADDR+33)
	MOV	_RD,BANK0_TEMP0
	MOV	_RC,@(CID_ADDR+0)
	MOV	_RD,@(STYLE_CENTER+0X80)		; 不显示第一行
	CALL	#DISP_CID
	;RET
	JMP	STCP_RET
STCP_BOOK_END:
	CALL	#MENU_LOCK
	PAGE	#(VGA_STR)
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	MOV	A,@(WD_END_OF_NAMES_BOOK)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	;RET
	JMP	STCP_RET


STCP_CHANGE_NUM2:		; 0XA0~0XAF
	DEC	_RC
	ANDA	_RD,@0X0F
	ADD	A,@1
	MOV	TEMP0,A
	INC	_RC
	MOV	A,TEMP0
	CALL	#EDIT_NUM2
	MOV	A,@0
	CALL	#DISP_NUM1
	MOV	A,@0
	CALL	#DISP_STR
	;RET
	JMP	STCP_RET


STCP_CHANGE_STR:		; 0XB0~0XBF
	DEC	_RC
	ANDA	_RD,@0X0F
	ADD	A,@1
	MOV	TEMP0,A
	INC	_RC
	MOV	A,TEMP0
	CALL	#EDIT_STR
	MOV	A,@0
	CALL	#DISP_NUM1
	MOV	A,@0
	CALL	#DISP_NUM2
	;RET
	JMP	STCP_RET


STCP_CHOICE_OGMX:		; 0XC0
	MOV	BANK0_TEMP0,_RD
	CALL	#MENU_LOCK
	PAGE	#VGA_STR
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	MOV	A,@(WD_OGM)
	CALL	VGA_STRING
	MOV	A,@CH_BLANK
	CALL	VGA_STR
	MOV	A,BANK0_TEMP0
	CALL	VGA_STR
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	JMP	STCP_RET

STCP_REC_OGMX:			; 0XC1
	
	CALL	#RESET_REC_TIMER
	
	MOV	A,@(WD_OGM_RECORDING)
	JMP	STCP_OGMX
STCP_STOPREC_OGMX:		; 0XC2
	CRAM	SYS_FG,TIME
	;RET
	JMP	STCP_RET
STCP_PLAY_OGMX:			; 0XC3
	CRAM	SYS_FG,TIME
	MOV	A,@(WD_OGM_PLAYBACK)
	JMP	STCP_OGMX
STCP_STOPPLAY_OGMX:		; 0XC4
	;RET
	JMP	STCP_RET
STCP_OGMX:
	MOV	BANK0_TEMP0,A
	MOV	BANK0_TEMP1,_RD
	CALL	#MENU_LOCK
	
	PAGE	#VGA_STR
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	MOV	A,@(WD_OGM_)
	CALL	VGA_STRING
	MOV	A,BANK0_TEMP1
	CALL	VGA_STR
	MOV	A,@CH_BLANK
	CALL	VGA_STR
	MOV	A,BANK0_TEMP0
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	;RET
	JMP	STCP_RET


STCP_RECORD:			; 0XC5
	MOV	BANK0_TEMP0,_RD
	CALL	#MENU_LOCK
	
	PAGE	#VGA_STR
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	ADDA	BANK0_TEMP0,@WD_MEMO_RECORDING
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	
	CALL	#RESET_REC_TIMER
	
	JMP	STCP_RET
STCP_STOPRECORD:		; 0XC6
	CRAM	SYS_FG,TIME
	;RET
	JMP	STCP_RET


STCP_PLAYMSG:			; 0XC7
	;SRAM	EVENT,1				; 可以发送电话线状态
	MOV	A,_RD
	JPZ	STCP_PLAYMSG_INFO
	MOV	BANK0_TEMP0,_RD
	MOV	BANK0_TEMP2,_RC
	MOV	_RC,@(CID_ADDR+33)
	MOV	_RD,BANK0_TEMP0
	MOV	_RC,@(CID_ADDR+0)
	MOV	_RD,@(STYLE_CENTER+0X80)
	CALL	#DISP_CID
STCP_PLAYMSG_1:
	CIDBANK	1
	MOV	_RC,BANK0_TEMP2
	MOV	A,@WD_PLAY
	JMP	STCP_MSG
STCP_PAUSEMSG:			; 0XC8
	MOV	A,@WD_PAUSE
	JMP	STCP_MSG
STCP_STOPMSG:			; 0XC9
	MOV	A,@WD_STOP
	JMP	STCP_MSG
STCP_MSG:
	MOV	BANK0_TEMP1,A
	MOV	BANK0_TEMP0,_RD
	PAGE	#VGA_STR
	CALL	CLR_STR
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	MOV	GENE_A,BANK0_TEMP0
	CALL	VGA_HEX_STR
	MOV	A,@CH_SCH1
	CALL	VGA_STR
	MOV	GENE_A,TOTAL_MSG
	CALL	VGA_HEX_STR
	MOV	A,@CH_BLANK
	CALL	VGA_STR
	MOV	A,BANK0_TEMP1
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	;RET
	JMP	STCP_RET
STCP_PLAYMSG_INFO:
	MOV	BANK0_TEMP2,_RC
	CALL	#MENU_LOCK
	JMP	STCP_PLAYMSG_1


STCP_CALL:			; 0XCA
	MOV	A,_RD
	JPZ	STCP_CALL_END
	MOV	TEMP0,_RD
	MOV	_RC,@(CID_ADDR+33)
	MOV	_RD,TEMP0
	MOV	_RC,@(CID_ADDR+0)
	MOV	_RD,@(STYLE_CENTER+0X80)
	CALL	#MENU_LOCK
	CALL	#DISP_CID
	;RET
	JMP	STCP_RET
STCP_CALL_END:
	MOV	BANK0_TEMP0,@WD_NO_CALL
	MOV	A,TOTAL_CALL
	JPZ	$+3
	MOV	BANK0_TEMP0,@WD_END_OF_LIST
	CALL	#MENU_LOCK
	PAGE	#VGA_STR
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	MOV	A,BANK0_TEMP0
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	;RET
	JMP	STCP_RET


STCP_VOLUME:			; 0XCB
	MOV	BANK0_TEMP0,_RD
	CLRC
	RLC	BANK0_TEMP0
	CALL	#MENU_LOCK
	MOV	A,@(STYLE_LEFT)
	CALL	#VGA_STR
STCP_VOLUME_LOOP:
	MOV	A,BANK0_TEMP0
	JPZ	STCP_VOLUME_END
	MOV	A,@CH_BLACK
	CALL	#VGA_STR
	DEC	BANK0_TEMP0
	JMP	STCP_VOLUME_LOOP
STCP_VOLUME_END:
	MOV	A,@CH_END
	CALL	#VGA_STR
	;RET
	JMP	STCP_RET


STCP_DELETE:			; 0XCC
	MOV	BANK0_TEMP0,_RD
	PAGE	#VGA_STR
	CALL	CLR_STR
	MOV	A,@(STYLE_CENTER)
	CALL	VGA_STR
	ADDA	BANK0_TEMP0,@(WD_ERASE)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	;RET
	JMP	STCP_RET

STCP_RING:			; 0XCD
	MOV	A,_RD
	TBL
	JMP	STCP_RING_IN
	JMP	STCP_RING_TIMEOUT
	JMP	STCP_RING_CONNECT
STCP_RING_IN:
	;SRAM	EVENT,0
	;RET
	JMP	STCP_RET
STCP_RING_TIMEOUT:
	;CRAM	EVENT,0
	;RET
	JMP	STCP_RET
STCP_RING_CONNECT:
	;CRAM	EVENT,0
	;RET
	JMP	STCP_RET

STCP_HOOK:
	MOV	A,_RD
	JPZ	STCP_HOOK_OFFHOOK
STCP_HOOK_ONHOOK:				; 挂机
	DISI
	;IOR	_IOCF
	;OR	A,@(0XC0)			; 开启FSK,DTMF中断
	;IOW	_IOCF
	BANK	1
	CRAM	R1_SYS_FG,HOOKSTATUS
	ENI
	JMP	STCP_RET
	
	
STCP_HOOK_OFFHOOK:				; 摘机
	DISI
	IOR	_IOCF
	AND	A,@(0X3E)			; 关闭FSK,DTMF,TCC中断
	IOW	_IOCF
	
	
	AND	FSK_FG,@(0XE4)
	
	BANK	1
	SRAM	R1_SYS_FG,HOOKSTATUS
	MOV	A,@0
	MOV	FSK_BYTE,A
	MOV	FSK_SUM,A
	MOV	FSK_LENGTH,A
	MOV	FSK_COUNT,A
	MOV	FSK_TMP,A
	MOV	FSK_ADR,A
	MOV	DTMF_ADR,A
	
	ENI
	JMP	STCP_RET

;STCP_TEST:
;	JPB	EVENT,TEST,STCP_TEST_1
;	CALL	#MENU_LOCK
;	SRAM	EVENT,TEST
;	MOV	A,(STYLE_LEFT)
;	CALL	#VGA_NUM2
;STCP_TEST_1:
;	MOV	BANK0_TEMP0,_RD
;	SWAPA	BANK0_TEMP0
;	AND	A,@(0X0F)
;	CALL	#VGA_NUM2
;	ANDA	BANK0_TEMP0,@(0X0F)
;	CALL	#VGA_NUM2
;	JMP	STCP_RET



ORG	0X1200
STORE_SER:
	MOV	TEMP0,A
	MOV	_RC,@(TCP_ADDR+0)
	ANDA	_RD,@0X3F
	MOV	TEMP3,A
	INC	_RD
	ADDA	TEMP3,@(TCP_ADDR+1)
	MOV	_RC,A
	MOV	_RD,TEMP0
	
	RET

SER_BUF_CHK:
	CIDBANK	1
	BANK	0
	MOV	A,TMR_SER
	JPNZ	SER_BUF_CHK_RET
	MOV	_RC,@(TCP_ADDR+0)
	MOV	A,_RD
	JPZ	SER_BUF_CHK_RET
	JPB	_RD,7,SER_BUF_CHK_RET
	NOP
	CLR	TEMP1
	;MOV	TEMP1,@(TCP_ADDR+1)
SER_BUF_CHK_LOOP:
	INC	TEMP1
	ADDA	TEMP1,@(TCP_ADDR+0)
	;MOV	_RC,TEMP1
	MOV	_RC,A
	SUBA	_RD,@0XFF
	JPZ	SER_BUF_CHK_1
	MOV	A,_RD
	CALL	#SER_STOR_DATA
	;INC	TEMP1
	JMP	SER_BUF_CHK_LOOP
	
SER_BUF_CHK_1:
	DISI
	SRAM	SER_FLAG,3
	SRAM	SER_FLAG,6
	ENI
	
	MOV	TEMP0,@(TCP_ADDR+1)
	MOV	_RC,@(TCP_ADDR+0)
	SUB	_RD,TEMP1
	INC	TEMP1
	ADD	TEMP1,@(TCP_ADDR+0)
SER_BUF_CHK_1_LOOP:
	SUBA	TEMP1,@(TCP_ADDR+70)
	JPZ	SER_BUF_CHK_2
	MOV	_RC,TEMP1
	MOV	TEMP2,_RD
	MOV	_RC,TEMP0
	MOV	_RD,TEMP2
	INC	TEMP0
	INC	TEMP1
	JMP	SER_BUF_CHK_1_LOOP
SER_BUF_CHK_2:
	MOV	_RC,TEMP0
	MOV	_RD,@0XFF
	INC	TEMP0
	SUBA	TEMP0,@(TCP_ADDR+70)
	JPNZ	SER_BUF_CHK_2

SER_BUF_CHK_RET:
	RET


INIT_SER:
	CIDBANK	1
	MOV	_RC,@(TCP_ADDR+0)
	CLR	_RD
	CLRCIDRAM	@(TCP_ADDR+1),@64,@0XFF
	RET

/***************************************
拨号程序
DIAL_CTRL:
.7	0/1	DISABLE/ENABLE
.6	0/1

.4~.3	0~16	0: START 1~16:拨号的位数
***************************************/
TAB_TONE1:
	TBL
	RETL	0X77	; 0
	RETL	0XA0	; 1
	RETL	0XA0	; 2
	RETL	0XA0	; 3
	RETL	0X91	; 4
	RETL	0X91	; 5
	RETL	0X91	; 6
	RETL	0X83	; 7
	RETL	0X83	; 8
	RETL	0X83	; 9
	RETL	0X77	; *
	RETL	0X77	; #
	RETL	0XA0	; A
	RETL	0X91	; B
	RETL	0X83	; C
	RETL	0X77	; D

TAB_TONE2:
	TBL
	RETL	0X54	; 0
	RETL	0X5D	; 1
	RETL	0X54	; 2
	RETL	0X4C	; 3
	RETL	0X5D	; 4
	RETL	0X54	; 5
	RETL	0X4C	; 6
	RETL	0X5D	; 7
	RETL	0X54	; 8
	RETL	0X4C	; 9
	RETL	0X5D	; *
	RETL	0X4C	; #
	RETL	0X44	; A
	RETL	0X44	; B
	RETL	0X44	; C
	RETL	0X44	; D



DIAL_NUM:
	CIDBANK	1
	PAGEIO	0
	BANK	0
	MOV	_RC,@DIAL_ADDR
	JPNB	_RD,7,DIAL_NUM_RET
	JPNB	_RD,5,DIAL_NUM_START
	JPB	_RD,6,DIAL_NUM_DIAL
	JMP	DIAL_NUM_PAUSE

DIAL_NUM_START:
	SRAM	_RD,5
	CALL	#MENU_LOCK
	MOV	A,@STYLE_RIGHT			; 右对齐
	CALL	#VGA_NUM2
	MOV	TMR_DELAY,@250			; 延时1S
	
	PAGE	#VGA_STR
	MOV	A,@STYLE_CENTER
	CALL	VGA_STR
	MOV	A,@(WD_PLS_LIFT_HANDSET)
	CALL	VGA_STRING
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	JMP	DIAL_NUM_RET

DIAL_NUM_PAUSE:
	MOV	A,TMR_DELAY
	JPNZ	DIAL_NUM_RET
	SRAM	_RD,6
	
	CALL	CHK_DIALNUM
	MOV	TEMP0,A
	SUBA	TEMP0,@0X0F
	JPZ	DIAL_NUM_STOP
	
	MOV	A,TEMP0
	CALL	TAB_TONE1
	IOW	_IOCD
	MOV	A,TEMP0
	CALL	TAB_TONE2
	IOW	_IOCE
	SRAM	_STATUS,5			; OPEN TONE1、TONE2
	SRAM	_STATUS,6
	MOV	TMR_DELAY,@25			; 延时100MS
	MOV	A,TEMP0
	;JPNZ	$+2
	;MOV	A,@0X80
	CALL	#VGA_NUM2
	
	JMP	DIAL_NUM_RET
DIAL_NUM_DIAL:
	MOV	A,TMR_DELAY
	JPNZ	DIAL_NUM_RET
	CRAM	_STATUS,5
	CRAM	_STATUS,6			; CLOSE TONE1、TONE2
	CRAM	_RD,6
	;MOV	TEMP0,_RD
	INC	_RD
	JPNB	_RD,5,DIAL_NUM_STOP		; 超过，停止
	;MOV	TEMP0,_RD
	
	CALL	CHK_DIALNUM
	MOV	TEMP0,A
	
	SUBA	TEMP0,@0X0F
	JPZ	DIAL_NUM_STOP			; 下一位的值==0XF，停止
	MOV	TMR_DELAY,@25
	JMP	DIAL_NUM_RET

DIAL_NUM_STOP:
	MOV	_RC,@DIAL_ADDR
	CLR	_RD
	MOV	A,@CH_END
	CALL	#VGA_NUM2
	JMP	DIAL_NUM_RET

DIAL_NUM_RET:
	RET

CHK_DIALNUM:
	MOV	TEMP0,_RD
	CLRC
	RRCA	TEMP0
	AND	A,@0X0F
	ADD	A,@(DIAL_ADDR+1)
	MOV	_RC,A
	
	JPB	TEMP0,0,$+3
	SWAPA	_RD
	JMP	$+2
	MOV	A,_RD
	AND	A,@0X0F
	RET



STORE_DIALNUM:
	MOV	TEMP0,A
	CIDBANK	1
	MOV	_RC,@(DIAL_ADDR)
	JPB	_RD,7,STORE_DIALNUM_RET		; 有号码正在拨，不能存
	;JPB	_RD,6,$+3
	;MOV	_RD,@0X40
	SUBA	TEMP0,@CH_END
	JPZ	STORE_DIALNUM_END
	SUBA	TEMP0,@NUM_A
	JPC	STORE_DIALNUM_END
STORE_DIALNUM_0:
	MOV	TEMP1,_RD
	INC	_RD
	CLRC
	RRCA	TEMP1
	ADD	A,@(DIAL_ADDR+1)
	MOV	_RC,A
	JPB	TEMP1,0,STORE_DIALNUM_1
	AND	_RD,@0X0F
	SWAPA	TEMP0
	AND	A,@0XF0
	OR	_RD,A
	JMP	STORE_DIALNUM_2
STORE_DIALNUM_1:
	AND	_RD,@0XF0
	ANDA	TEMP0,@0X0F
	OR	_RD,A
STORE_DIALNUM_2:
	JMP	STORE_DIALNUM_RET
STORE_DIALNUM_END:
	MOV	TEMP0,@0X0F
	CALL	STORE_DIALNUM_0
	MOV	_RC,@DIAL_ADDR
	MOV	_RD,@0X80			; 准备拨号
STORE_DIALNUM_RET:
	RET


INIT_DIAL:
	CIDBANK	1
	CLRCIDRAM	@(DIAL_ADDR+1),@19,@0XFF
	MOV	_RC,@(DIAL_ADDR+0)
	CLR	_RD
	RET



DEL_FINISHED:				; 删除完成的命令
	BANK	0
	CIDBANK	1
	DISI
	MOV	_RC,@(TCP_ADDR+0)
	JPNB	_RD,7,DEL_FINISHED_END
	ANDA	_RD,@0X7F
	JPZ	DEL_FINISHED_END
	CLR	INT_TEMP0
DEL_FINISHED_CHK_LOOP:
	INC	INT_TEMP0
	ADDA	INT_TEMP0,@(TCP_ADDR+0)
	MOV	_RC,A
	SUBA	_RD,@0XFF
	JPNZ	DEL_FINISHED_CHK_LOOP
	
	MOV	_RC,@(TCP_ADDR+0)
	SUB	_RD,INT_TEMP0
	ANDA	_RD,@0X7F
	MOV	INT_TEMP1,A
	CLR	INT_TEMP2
DEL_FINISHED_DEL_LOOP:
	SUBA	INT_TEMP2,INT_TEMP1
	JPZ	DEL_FINISHED_DEL_END
	INC	INT_TEMP2
	ADDA	INT_TEMP2,INT_TEMP0
	ADD	A,@(TCP_ADDR+0)
	MOV	_RC,A
	MOV	INT_TEMP3,_RD
	ADDA	INT_TEMP3,@(TCP_ADDR+0)
	MOV	_RC,A
	MOV	_RD,INT_TEMP3
	JMP	DEL_FINISHED_DEL_LOOP

DEL_FINISHED_DEL_END:
	MOV	_RC,@(TCP_ADDR+0)
	ANDA	_RD,@0X7F
	JPNZ	DEL_FINISHED_END
	CLR	_RD

DEL_FINISHED_END:
	ENI
	RET


SEND_DESIRE:
	;BANK	1
	;CRAM	AUDIO_STATUS,4
SEND_DESIRE_LOOP:
	BANK	0
	JPB	SER_FLAG,7,SEND_BUSY
	JPB	SER_FLAG,4,SEND_BUSY
	SIO	_R7,P_DAT
	JPNB	_R7,P_DAT,SEND_RECEIVE_INIT
	;BANK	1
	;SWAPA	AUDIO_STATUS
	;AND	A,@0X01
	RET
SEND_BUSY:
	;BANK	1
	;SRAM	AUDIO_STATUS,4
	CALL	#STCP_CHK
	JMP	SEND_DESIRE_LOOP

SEND_RECEIVE_INIT:
	BANK	1
	MOV	TMR_PROTOCOL,@16
	
SEND_RECEIVE_INIT_LOOP:
	BANK	1
	MOV	A,TMR_PROTOCOL
	JPZ	SEND_DESIRE_LOOP
	JPB	_R7,P_WR,SEND_RECEIVE_INIT_LOOP
	JMP	SEND_BUSY

CIDNUM_VERFY:
	MOV	TEMP1,A
	SUB	A,@(0X9F)
	JPNC	CIDNUM_VERFY_2
	XORA	_RD,TEMP1
	MOV	TEMP2,A
	AND	A,@(0XF0)
	JPNZ	CIDNUM_VERFY_1
	INC	TEMP0
	ANDA	TEMP1,@(0X0F)
	SUB	A,@(0X09)
	JPNC	CIDNUM_VERFY_2
	ANDA	TEMP2,@(0X0F)
	JPNZ	CIDNUM_VERFY_1
	INC	TEMP0
	RET
CIDNUM_VERFY_1:
	CLR	TEMP0
CIDNUM_VERFY_2:
	SUBA	TEMP0,TEMP0
	RET

CIDNUM_MODIFY:				; 将与区域码相同的地方去掉，只修改CIDBANK 1的62~70部分
	BANK	0
	CIDBANK	1
	MOV	TEMP0,@(0)
	MOV	_RC,@(CID_ADDR+3)
	MOV	A,LCALL12
	CALL	CIDNUM_VERFY
	JPZ	CIDNUM_MODIFY_SHIFT
	INC	_RC
	MOV	A,LCALL34
	CALL	CIDNUM_VERFY
	JPZ	CIDNUM_MODIFY_SHIFT
	INC	_RC
	MOV	A,LCALL5
	JMP	CIDNUM_MODIFY_SHIFT

;	BANK	0
;	CIDBANK	1
;	MOV	TEMP0,@(0)
;	MOV	_RC,@(CID_ADDR+3)
;	XORA	_RD,LCALL12
;	MOV	TEMP1,A
;	AND	A,@(0XF0)
;	JPNZ	CIDNUM_MODIFY_SHIFT
;	INC	TEMP0
;	ANDA	TEMP1,@(0X0F)
;	JPNZ	CIDNUM_MODIFY_SHIFT
;	INC	TEMP0
;	INC	_RC
;	XORA	_RD,LCALL34
;	MOV	TEMP1,A
;	AND	A,@(0XF0)
;	JPNZ	CIDNUM_MODIFY_SHIFT
;	INC	TEMP0
;	ANDA	TEMP1,@(0X0F)
;	JPNZ	CIDNUM_MODIFY_SHIFT
;	INC	TEMP0
;	INC	_RC
;	XORA	_RD,LCALL5
;	AND	A,@(0XF0)
;	JPNZ	CIDNUM_MODIFY_SHIFT
;	INC	TEMP0
CIDNUM_MODIFY_SHIFT:
	MOV	A,TEMP0
	JPZ	CIDNUM_MODIFY_RET
	MOV	_RC,@(CID_ADDR+2)
	SUB	_RD,TEMP0
	MOV	TEMP1,@(CID_ADDR+3)

CIDNUM_MODIFY_SHIFT_LOOP:
	CLRC
	RRCA	TEMP0
	ADD	A,TEMP1
	MOV	_RC,A
	SUBA	_RC,@(CID_ADDR+11)
	JPC	CIDNUM_MODIFY_SHIFT_2
	MOV	TEMP2,_RD
	JPNB	TEMP0,0,CIDNUM_MODIFY_SHIFT_1
	SWAP	TEMP2
	OR	TEMP2,@(0X0F)
	SUBA	_RC,@(CID_ADDR+10)
	JPC	CIDNUM_MODIFY_SHIFT_1
	INC	_RC
	SWAPA	_RD
	OR	A,@(0XF0)
	AND	TEMP2,A
CIDNUM_MODIFY_SHIFT_1:
	MOV	_RC,TEMP1
	MOV	_RD,TEMP2
	INC	TEMP1
	JMP	CIDNUM_MODIFY_SHIFT_LOOP
CIDNUM_MODIFY_SHIFT_2:
	MOV	_RC,TEMP1
	SUBA	_RC,@(CID_ADDR+11)
	JPC	CIDNUM_MODIFY_RET
	MOV	_RD,@0XFF
	INC	TEMP1
	JMP	CIDNUM_MODIFY_SHIFT_LOOP
CIDNUM_MODIFY_RET:
	RET




SAVECOMMAND	MACRO

STOR_COMMAND:
	JPNB	SER_FLAG,7,STOR_COMMAND_END
	CIDBANK	1
	MOV	_RC,@(TCP_ADDR+0)
	JPB	_RD,7,$+3
	MOV	_RD,@0X80
	
	CLR	SER_SEND
STOR_COMMAND_LOOP:					; 将收到的命令保存至COMMAND区域

	SUBA	SER_SEND,SER_CONT
	JPZ	STOR_COMMAND_1
	
	ADDA	SER_SEND,@SER_BASE
	MOV	_RC,A
	MOV	SER_FLAG,_RD
	
	MOV	_RC,@(TCP_ADDR+0)
	INC	_RD
	ANDA	_RD,@0X7F
	ADD	A,@(TCP_ADDR+0)
	MOV	_RC,A
	MOV	_RD,SER_FLAG
	
	INC	SER_SEND
	JMP	STOR_COMMAND_LOOP
STOR_COMMAND_1:
	MOV	_RC,@(TCP_ADDR+0)
	INC	_RD
	ANDA	_RD,@0X7F
	ADD	A,@(TCP_ADDR+0)
	MOV	_RC,A
	MOV	_RD,@0XFF
	
	CLR	SER_SEND
	;CLR	SER_CONT
	CLR	SER_FLAG
	;MOV	A,SER_CONT
	;BANK	1
	;ADD	R1_STCPSP,A
	;AND	R1_STCPSP,@3F
	;BANK	0
STOR_COMMAND_END:
	;RET
	ENDM


