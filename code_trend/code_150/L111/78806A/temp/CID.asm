/***************************************
Caller ID处理，包括：
FSK_DECODE	FSK 解码
CID_STORE	号码保存
***************************************/
CID_LENGTH	==	BANK1_TEMP0
ORG	0X0400

FSK_DECODE:
	JPNB	FSK_FG,FSK_SUC,FSK_DECODE_RET1

FSK_DECODE_TEL_SEAT:
	BANK	1
	CIDBANK	1
	
	CALL	CLR_DECODE_RAM
	
	MOV	_RC,@(FSK_ADDR+1)	; 长度
	MOV	CID_LENGTH,_RD
	MOV	_RC,@FSK_ADDR
	SUBA	_RD,@4
	JPZ	FSK_DECODE_SDMF
	SUBA	_RD,@0X80
	JPZ	FSK_DECODE_MDMF
	SUBA	_RD,@0X81
	JPZ	FSK_DECODE_MDMF
	SUBA	_RD,@0X82
	JPZ	FSK_DECODE_MDMF
	JMP	FSK_DECODE_RET

FSK_DECODE_SDMF:			; 单制式
	MOV	_RC,@(FSK_ADDR+1)
FSK_DECODE_SDMF_LOOP:
	MOV	A,CID_LENGTH
	JPZ	FSK_DECODE_RET
	JMP	FSK_DECODE_SDMF_TIME
	INC	_RC
	SUBA	_RD,@1
	JPZ	FSK_DECODE_SDMF_TIME	; 有时间的单制式
	SUBA	_RD,@0X02
	JPZ	FSK_DECODE_SDMF_NUM	; 号码
	JMP	FSK_DECODE_SDMF_LOOP

FSK_DECODE_SDMF_TIME:
	MOV	A,@8
	CALL	FSK_DECODE_TIME		; 解时间并储存起来，更新当前时间
	BANK	1
	;JMP	FSK_DECODE_SDMF_LOOP
FSK_DECODE_SDMF_NUM:
	SUBA	CID_LENGTH,@8
	CALL	FSK_DECODE_NUM		; 解号码
	SRAM	FSK_FG,CALLIN
	;JMP	FSK_DECODE_SDMF_LOOP
	JMP	FSK_DECODE_RET

FSK_DECODE_MDMF:			; 复合制式的解码
	MOV	_RC,@(FSK_ADDR+1)
FSK_DECODE_MDMF_LOOP:
	MOV	A,CID_LENGTH
	JPZ	FSK_DECODE_RET
	INC	_RC
	SUBA	_RD,@0X01
	JPZ	FSK_DECODE_MDMF_TIME	; 01 时间
	SUBA	_RD,@0X02
	JPZ	FSK_DECODE_MDMF_NUM	; 02 号码
	SUBA	_RD,@0X04
	JPZ	FSK_DECODE_MDMF_NONUM	; 04 无号码
	SUBA	_RD,@0X07
	JPZ	FSK_DECODE_MDMF_NAME	; 07 姓名
	SUBA	_RD,@0X08
	JPZ	FSK_DECODE_MDMF_NONAME	; 08 无姓名
	JMP	FSK_DECODE_MDMF_LOOP
FSK_DECODE_MDMF_TIME:
	INC	_RC
	SUB	CID_LENGTH,_RD
	SUB	CID_LENGTH,@2
	MOV	A,_RD
	CALL	FSK_DECODE_TIME		; 解时间并储存起来，更新当前时间
	BANK	1
	JMP	FSK_DECODE_MDMF_LOOP
FSK_DECODE_MDMF_NUM:
	INC	_RC
	SUB	CID_LENGTH,_RD
	SUB	CID_LENGTH,@2
	MOV	A,_RD
	CALL	FSK_DECODE_NUM		; 解号码
	SRAM	FSK_FG,CALLIN
	JMP	FSK_DECODE_MDMF_LOOP
FSK_DECODE_MDMF_NONUM:
	SUB	CID_LENGTH,@3
	;CALL	FSK_DECODE_NUM		; 解号码
	SRAM	FSK_FG,CALLIN
	SRAM	FSK_FG,ERR_NUM
	JMP	FSK_DECODE_MDMF_LOOP
FSK_DECODE_MDMF_NAME:
	INC	_RC
	SUB	CID_LENGTH,_RD
	SUB	CID_LENGTH,@2
	MOV	A,_RD
	CALL	FSK_DECODE_NAME
	SRAM	FSK_FG,CALLIN
	JMP	FSK_DECODE_MDMF_LOOP
FSK_DECODE_MDMF_NONAME:
	JMP	FSK_DECODE_MDMF_LOOP
	



FSK_DECODE_RET:
	CRAM	FSK_FG,FSK_SUC
FSK_DECODE_RET1:
	CALL	SEND_CALL
	RET


/***************************************
从FSK数据中解时间
时间8位，不够8位则错误
***************************************/
FSK_DECODE_TIME:
	;INC	_RC
	;SUB	CID_LENGTH,_RD
	;SUB	CID_LENGTH,@2
	MOV	TEMP0,A
	JPZ	FSK_DECODE_TIME_NOTIME
	SUB	A,@8
	JPNZ	FSK_DECODE_TIME_ERR
	BANK	0
	MOV	TEMP1,_RC
	MOV	_RC,@(CID_ADDR+28)
	MOV	_RD,@4
	MOV	_RC,TEMP1
	
	CLR	SEC_REG
	INC	_RC
	CALL	GET_TIME
	MOV	MONTH_REG,TEMP0
	MOV	TEMP1,_RC
	MOV	_RC,@(CID_ADDR+29)
	MOV	_RD,TEMP0
	MOV	_RC,TEMP1
	INC	_RC
	CALL	GET_TIME
	MOV	DAY_REG,TEMP0
	MOV	TEMP1,_RC
	MOV	_RC,@(CID_ADDR+30)
	MOV	_RD,TEMP0
	MOV	_RC,TEMP1
	INC	_RC
	CALL	GET_TIME
	MOV	HOUR_REG,TEMP0
	MOV	TEMP1,_RC
	MOV	_RC,@(CID_ADDR+31)
	MOV	_RD,TEMP0
	MOV	_RC,TEMP1
	INC	_RC
	CALL	GET_TIME
	MOV	MIN_REG,TEMP0
	MOV	TEMP1,_RC
	MOV	_RC,@(CID_ADDR+32)
	MOV	_RD,TEMP0
	MOV	_RC,TEMP1
	SRAM	SYS_FG,SYS_CLOCK		; 通知系统时钟改变，要求更新显示
	RET
FSK_DECODE_TIME_ERR:
FSK_DECODE_TIME_NOTIME:
	MOV	A,TEMP0
	ADD	_RC,A
	RET

GET_TIME:
	MOV	A,_RD
	AND	A,@0X7F
	CALL	#ASCII_NUM
	MOV	TEMP1,A
	MOV	TEMP0,@0
GET_TIME_1:
	MOV	A,TEMP1
	JPZ	GET_TIME_2
	DEC	TEMP1
	ADD	TEMP0,@10
	JMP	GET_TIME_1
GET_TIME_2:
	INC	_RC
	MOV	A,_RD
	AND	A,@0X0F
	ADD	TEMP0,A
	RET

/***************************************
从FSK数据中解电话号码
最多16个号码，超过不计。不足补F
***************************************/
FSK_DECODE_NUM:
	MOV	TEMP0,A				; 号码位数
	MOV	TEMP1,_RC
	MOV	_RC,@(CID_ADDR+2)
	MOV	_RD,TEMP0
	MOV	TEMP2,@0
FSK_DECODE_NUM_LOOP:
	MOV	A,TEMP0
	JPZ	FSK_DECODE_NUM_2
	ADDA	TEMP2,TEMP1
	ADD	A,@1
	MOV	_RC,A
	MOV	A,_RD
	AND	A,@0X7F
	CALL	#ASCII_NUM
	MOV	TEMP3,A
	CLRC
	RRCA	TEMP2
	ADD	A,@(CID_ADDR+3)
	MOV	_RC,A
	JPB	TEMP2,0,FSK_DECODE_NUM_LOOP_L
FSK_DECODE_NUM_LOOP_H:
	SWAPA	TEMP3
	AND	A,@0XF0
	MOV	_RD,A
	JMP	FSK_DECODE_NUM_LOOP_1
FSK_DECODE_NUM_LOOP_L:
	ANDA	TEMP3,@0X0F
	ADD	_RD,A
FSK_DECODE_NUM_LOOP_1:
	INC	TEMP2
	DEC	TEMP0
	SUBA	TEMP2,@16
	JPZ	FSK_DECODE_NUM_1		; 号码位数到16
	JMP	FSK_DECODE_NUM_LOOP

FSK_DECODE_NUM_1:				; 16以后的号码丢弃
	ADDA	TEMP1,TEMP2
	ADD	A,TEMP0
	MOV	_RC,A
	RET

FSK_DECODE_NUM_2:
	ADD	TEMP1,TEMP2
FSK_DECODE_NUM_2_1:
	SUBA	TEMP2,@16			; 检查号码是否够16位，不够补F
	JPZ	FSK_DECODE_NUM_RET
	CLRC
	RRCA	TEMP2
	ADD	A,@(CID_ADDR+3)
	MOV	_RC,A
	JPB	TEMP2,0,FSK_DECODE_NUM_2_L
FSK_DECODE_NUM_2_H:
	MOV	_RD,@0XF0
	JMP	FSK_DECODE_NUM_3
FSK_DECODE_NUM_2_L:
	ADD	_RD,@0X0F
FSK_DECODE_NUM_3:
	INC	TEMP2
	JMP	FSK_DECODE_NUM_2_1
	
FSK_DECODE_NUM_RET:
	MOV	_RC,TEMP1
	RET

FSK_DECODE_NAME:
	;INC	_RC
	;SUB	CID_LENGTH,_RD
	;SUB	CID_LENGTH,@2
	;MOV	TEMP0,_RD			; 姓名的位数
	MOV	TEMP0,A
	MOV	TEMP1,_RC
	MOV	_RC,@(CID_ADDR+11)
	MOV	_RD,TEMP0
	MOV	TEMP2,@0
FSK_DECODE_NAME_LOOP:
	MOV	A,TEMP0
	JPZ	FSK_DECODE_NAME_2
	ADDA	TEMP2,TEMP1
	ADD	A,@1
	MOV	_RC,A
	MOV	A,_RD
	AND	A,@0X7F
	CALL	#ASCII_CH
	MOV	TEMP3,A
	ADDA	TEMP2,@(CID_ADDR+12)
	MOV	_RC,A
	MOV	_RD,TEMP3
	INC	TEMP2
	DEC	TEMP0
	SUBA	TEMP2,@16
	JPZ	FSK_DECODE_NAME_1
	JMP	FSK_DECODE_NAME_LOOP
FSK_DECODE_NAME_1:				; 16以后的姓名丢弃
	ADDA	TEMP1,TEMP2
	ADD	A,TEMP0
	MOV	_RC,A
	RET
FSK_DECODE_NAME_2:
	ADD	TEMP1,TEMP2
FSK_DECODE_NAME_2_1:
	SUBA	TEMP2,@16
	JPZ	FSK_DECODE_NAME_RET
	ADDA	TEMP2,@(CID_ADDR+12)
	MOV	_RC,A
	MOV	_RD,@0XFF
	INC	TEMP2
	JMP	FSK_DECODE_NAME_2_1
	
FSK_DECODE_NAME_RET:
	MOV	_RC,TEMP1
	RET

DTMF_DECODE:
	JPNB	FSK_FG,DTMF_SUC,DTMF_DECODE_RET1
	
	BANK	1
	CIDBANK	1
	
	CALL	CLR_DECODE_RAM
	
	MOV	TEMP0,@0
	MOV	TEMP1,@0
DTMF_DECODE_LOOP:
	ADDA	TEMP0,@DTMF_ADDR
	MOV	_RC,A
	SUBA	_RD,@0X0			; 'D'
	JPZ	DTMF_DECODE_1
	SUBA	_RD,@0X0D			; 'A'
	JPZ	DTMF_DECODE_1
	SUBA	_RD,@0X0F			; 'C'
	JPZ	DTMF_DECODE_END
	SUBA	_RD,@0X0A			; '0'
	JPNZ	DTMF_DECODE_LOOP_1
	MOV	TEMP2,@0
	JMP	DTMF_DECODE_LOOP_2
DTMF_DECODE_LOOP_1:
	MOV	TEMP2,_RD
DTMF_DECODE_LOOP_2:
	CLRC
	RRCA	TEMP1
	ADD	A,@(CID_ADDR+3)
	MOV	_RC,A
	JPB	TEMP1,0,DTMF_DECODE_NUM_L
DTMF_DECODE_NUM_H:
	SWAPA	TEMP2
	OR	A,@0X0F
	MOV	_RD,A
	JMP	DTMF_DECODE_LOOP_3
DTMF_DECODE_NUM_L:
	ANDA	TEMP2,@0X0F
	OR	A,@0XF0
	AND	_RD,A
DTMF_DECODE_LOOP_3:
	INC	TEMP0
	INC	TEMP1
	JMP	DTMF_DECODE_LOOP
DTMF_DECODE_1:
	INC	TEMP0
	JMP	DTMF_DECODE_LOOP
DTMF_DECODE_END:
	MOV	_RC,@(CID_ADDR+2)
	MOV	_RD,TEMP1
	SRAM	FSK_FG,CALLIN
	;JMP	DTMF_DECODE_RET

DTMF_DECODE_RET:
	CRAM	FSK_FG,DTMF_SUC
	SRAM	_FSR,3				; fsk power
DTMF_DECODE_RET1:
	CALL	SEND_CALL
	RET


CLR_DECODE_RAM:
	MOV	_RC,@CID_ADDR
	CLR	_RD
CLR_DECODE_RAM_LOOP:
	INC	_RC
	MOV	_RD,@0XFF
	SUBA	_RC,@(CID_ADDR+33)
	JPNZ	CLR_DECODE_RAM_LOOP
	RET

/****************************************
发送来电
将解码之后的来电信息发送给111
****************************************/
SEND_CALL:
	JPNB	FSK_FG,CALLIN,SEND_CALL_RET
	
	PAGE	4
	CALL	CIDNUM_MODIFY			; 号码修改，将与区域码相同的部分去掉。
	
	CALL	SEND_DESIRE
	
	CALL	INIT_SER
	PAGE	1
	
	BANK	0
	CIDBANK	1
	
	MOV	A,@0X80
	CALL	SEND_CALL_DATA
	MOV	_RC,@(CID_ADDR+1)
	MOV	_RD,@0X02
	SA	7
	CALL	SEND_CALL_DATA
	MOV	_RC,@(CID_ADDR+2)
	SUBA	_RD,@0
	JPZ	SEND_CALL_INFO_NONUM
	SUBA	_RD,@17
	JPC	SEND_CALL_INFO_NONUM
	MOV	A,_RD
	SA	7
	JMP	SEND_CALL_INFO_NUM
SEND_CALL_INFO_NONUM:
	MOV	A,_RD
	CA	7
SEND_CALL_INFO_NUM:
	CALL	SEND_CALL_DATA
	
	MOV	_RC,@(CID_ADDR+11)
	SUBA	_RD,@0
	JPZ	SEND_CALL_INFO_NONAME
	SUBA	_RD,@17
	JPC	SEND_CALL_INFO_NONAME
	MOV	A,_RD
	SA	7
	JMP	SEND_CALL_INFO_NAME
SEND_CALL_INFO_NONAME:
	MOV	A,_RD
	CA	7
SEND_CALL_INFO_NAME:
	CALL	SEND_CALL_DATA
	
	MOV	_RC,@(CID_ADDR+28)
	SUBA	_RD,@0
	JPZ	SEND_CALL_INFO_NOTIME
	SUBA	_RD,@5
	JPC	SEND_CALL_INFO_NOTIME
	MOV	A,_RD
	SA	7
	JMP	SEND_CALL_INFO_TIME
SEND_CALL_INFO_NOTIME:
	MOV	A,_RD
	CA	7
SEND_CALL_INFO_TIME:
	CALL	SEND_CALL_DATA
	
	MOV	A,@0				; OGM .
	CALL	SEND_CALL_DATA
	
	MOV	A,@0XFF
	CALL	SEND_CALL_DATA

SEND_CALL_NUM:
	MOV	_RC,@(CID_ADDR+2)
	SUBA	_RD,@0
	JPZ	SEND_CALL_NUM_END
	SUBA	_RD,@17
	JPC	SEND_CALL_NUM_END
	MOV	A,@0X80
	CALL	SEND_CALL_DATA
	MOV	_RC,@(CID_ADDR+2)
	MOV	TEMP0,_RD
	INC	TEMP0
	CLRC
	RRC	TEMP0
	MOV	A,TEMP0
	CALL	SEND_CALL_DATA
	CLR	BANK0_TEMP0
SEND_CALL_NUM_LOOP:
	ADDA	BANK0_TEMP0,@(CID_ADDR+3)
	MOV	_RC,A
	SUBA	_RD,@0XFF
	JPZ	SEND_CALL_NUM_END1
	MOV	A,_RD
	CALL	SEND_CALL_DATA
	INC	BANK0_TEMP0
	SUBA	BANK0_TEMP0,@8
	JPNZ	SEND_CALL_NUM_LOOP
SEND_CALL_NUM_END1:
	MOV	A,@0XFF
	CALL	SEND_CALL_DATA
SEND_CALL_NUM_END:

SEND_CALL_TIME:
	MOV	_RC,@(CID_ADDR+28)
	SUBA	_RD,@0
	JPZ	SEND_CALL_TIME_END
	SUBA	_RD,@0XFF
	JPZ	SEND_CALL_TIME_END
	
	MOV	A,@0X80
	CALL	SEND_CALL_DATA
	MOV	_RC,@(CID_ADDR+28)
	ADDA	_RD,@0X40
	CALL	SEND_CALL_DATA
	CLR	BANK0_TEMP0
SEND_CALL_TIME_LOOP:
	ADDA	BANK0_TEMP0,@(CID_ADDR+29)
	MOV	_RC,A
	MOV	A,_RD
	CALL	SEND_CALL_DATA
	INC	BANK0_TEMP0
	SUBA	BANK0_TEMP0,@4
	JPNZ	SEND_CALL_TIME_LOOP
SEND_CALL_TIME_END1:
	MOV	A,@0XFF
	CALL	SEND_CALL_DATA
SEND_CALL_TIME_END:

SEND_CALL_NAME:
	MOV	_RC,@(CID_ADDR+11)
	SUBA	_RD,@0
	JPZ	SEND_CALL_NAME_END
	SUBA	_RD,@17
	JPC	SEND_CALL_NAME_END
	
	MOV	A,@0X80
	CALL	SEND_CALL_DATA
	MOV	_RC,@(CID_ADDR+11)
	ADDA	_RD,@0X20
	CALL	SEND_CALL_DATA
	CLR	BANK0_TEMP0
SEND_CALL_NAME_LOOP:
	ADDA	BANK0_TEMP0,@(CID_ADDR+12)
	MOV	_RC,A
	SUBA	_RD,@0XFF
	JPZ	SEND_CALL_NAME_END1
	MOV	A,_RD
	CALL	SEND_CALL_DATA
	INC	BANK0_TEMP0
	SUBA	BANK0_TEMP0,@16
	JPNZ	SEND_CALL_NAME_LOOP
SEND_CALL_NAME_END1:
	MOV	A,@0XFF
	CALL	SEND_CALL_DATA
SEND_CALL_NAME_END:
	MOV	TMR_DELAY,@25

SEND_CALL_RET:
	RET
SEND_CALL_DATA:
	CALL	#STORE_SER
	RET

/****************************************
保存来电，
主程序检查FSK_FG.CALLIN
如果被置位，检查CID存放区的信息：
1、在LCD上显示号码和姓名。
2、向DSP发送与之相关的OGM。
3、
*****************************************/
CID_STORE:
	BANK	0
	JPNB	FSK_FG,CALLIN,CID_STORE_RET
	JPNB	SYS_FG,NEWCALL,CID_STORE_1
	MOV	A,TMR_DELAY
	JPNZ	CID_STORE_RET
CID_STORE_1:
	NOP
	CRAM	FSK_FG,CALLIN
	CRAM	SYS_FG,LOCK_TOPLINE

	CIDBANK	1
	MOV	_RC,@(CID_ADDR+0)
	MOV	_RD,@(STYLE_CENTER+0)		; 居中显示，不屏蔽第一行	
	CALL	DISP_CID			; 显示来电
	MOV	TMR_NAME,@16
	SRAM	EVENT,0
	;CALL	STORE_CALL			; 保存号码
	
	;CALL	COMPARE_NOTE			; 比较记录


CID_STORE_RET:
	RET

/***************************************
显示Caller ID信息
***************************************/

DISP_CID:
	BANK	0
	CIDBANK	1
	MOV	_RC,@(CID_ADDR+0)
	MOV	BANK0_TEMP1,_RD
	JPNB	BANK0_TEMP1,7,DISP_CID_NUM
	;JMP	DISP_CID_NUM
DISP_CID_TIME:
	CALL	#MENU_LOCK			; 屏蔽第一行的更新
	CIDBANK	1
	MOV	_RC,@(CID_ADDR+28)
	SUBA	_RD,@0				; 没有时间信息
	JPZ	DISP_CID_TIME_1
	SUBA	_RD,@0X7F
	JPC	DISP_CID_TIME_1
	MOV	_RC,@(CID_ADDR+1)
	ANDA	_RD,@0X03
	ADD	A,@0X30				; 有时间信息则亮秒和斜线
	CALL	#VGA_STAMP
	MOV	A,BANK0_TEMP1
	CALL	#VGA_NUM1
	
	CIDBANK	1
	MOV	_RC,@(CID_ADDR+31)		; 小时
	MOV	A,_RD
	CALL	#VGA_HOUR
	
	CIDBANK	1
	MOV	_RC,@(CID_ADDR+32)		; 分钟
	MOV	A,_RD
	CALL	#VGA_TIME
	
	CIDBANK	1
	MOV	_RC,@(CID_ADDR+30)		; 日期
	MOV	A,_RD
	CALL	#VGA_TIME
	
	CIDBANK	1
	MOV	_RC,@(CID_ADDR+29)		; 月份
	MOV	GENE_A,_RD
	CALL	#MATH_HTD
	MOV	TEMP5,RESULT
	SWAPA	TEMP5
	AND	A,@(0X0F)
	JPNZ	$+2
	MOV	A,@0X10
	CALL	#VGA_NUM1
	ANDA	TEMP5,@(0X0F)
	CALL	#VGA_NUM1
	JMP	DISP_CID_TIME_2
DISP_CID_TIME_1:
	MOV	_RC,@(CID_ADDR+1)
	ANDA	_RD,@0X03			; 没有时间信息不亮秒和斜线
	CALL	#VGA_STAMP
	MOV	A,BANK0_TEMP1
	CALL	#VGA_NUM1
	CLR	BANK0_TEMP0
DISP_CID_TIME_1_LOOP:
	MOV	A,@NUM_BLANK
	CALL	#VGA_NUM1
	INC	BANK0_TEMP0
	SUBA	BANK0_TEMP0,@8
	JPNZ	DISP_CID_TIME_1_LOOP
	
DISP_CID_TIME_2:
	CIDBANK	1
	MOV	_RC,@(CID_ADDR+33)		; NUM
	SUBA	_RD,@0XFF
	JPZ	DISP_CID_TIME_3
	MOV	A,_RD
	CALL	#VGA_TIME
DISP_CID_TIME_3:
	MOV	A,@CH_END
	CALL	#VGA_NUM1
	
	
	
DISP_CID_NUM:
	CALL	#CLR_NUM2
	
	CIDBANK	1
	BANK	0
	CLR	BANK0_TEMP0
	MOV	A,BANK0_TEMP1			; 居中显示，初始化显示区
	CALL	#VGA_NUM2
	CIDBANK	1
	MOV	_RC,@(CID_ADDR+2)
	SUBA	_RD,@0X00
	JPZ	DISP_CID_NUM_NONUM
	SUBA	_RD,@0X4F			; 'O'
	JPZ	DISP_CID_NUM_NONUM
	SUBA	_RD,@0X50			; 'P'
	JPZ	DISP_CID_NUM_PRIVATE
	SUBA	_RD,@0X17
	JPC	DISP_CID_NUM_NONUM
DISP_CID_NUM_LOOP:
	CIDBANK	1
	CLRC
	RRCA	BANK0_TEMP0
	ADD	A,@(CID_ADDR+3)
	MOV	_RC,A
	JPB	BANK0_TEMP0,0,DISP_CID_NUM_LOOP_L
DISP_CID_NUM_LOOP_H:
	SWAPA	_RD
	AND	A,@0X0F
	MOV	TEMP0,A
	SUB	A,@0X0F
	JPZ	DISP_CID_NUM_END
	MOV	A,TEMP0
	CALL	#VGA_NUM2
	JMP	DISP_CID_NUM_LOOP1
DISP_CID_NUM_LOOP_L:
	ANDA	_RD,@0X0F
	MOV	TEMP0,A
	SUB	A,@0X0F
	JPZ	DISP_CID_NUM_END
	MOV	A,TEMP0
	CALL	#VGA_NUM2
DISP_CID_NUM_LOOP1:
	INC	BANK0_TEMP0
	SUBA	BANK0_TEMP0,@16
	JPNZ	DISP_CID_NUM_LOOP
	JMP	DISP_CID_NUM_END
DISP_CID_NUM_NONUM:
	JMP	DISP_CID_NUM_END
DISP_CID_NUM_PRIVATE:
	JMP	DISP_CID_NUM_END
DISP_CID_NUM_END:
	MOV	A,@CH_END
	CALL	#VGA_NUM2

DISP_CID_NAME:
	CALL	#CLR_STR
	
	BANK	0
	CLR	BANK0_TEMP0
	MOV	A,BANK0_TEMP1			; 居中显示
	CALL	#VGA_STR
	CIDBANK	1
	MOV	_RC,@(CID_ADDR+11)
	SUBA	_RD,@0X00
	JPZ	DISP_CID_NAME_NONAME
	SUBA	_RD,@0X4F			; 'O'
	JPZ	DISP_CID_NAME_NONAME
	SUBA	_RD,@0X50			; 'P'
	JPZ	DISP_CID_NAME_PRIVATE
	SUBA	_RD,@17
	JPC	DISP_CID_NAME_NONAME
DISP_CID_NAME_LOOP:
	CIDBANK	1
	ADDA	BANK0_TEMP0,@(CID_ADDR+12)
	MOV	_RC,A
	SUBA	_RD,@0XFF
	JPZ	DISP_CID_NAME_END
	MOV	A,_RD
	CALL	#VGA_STR
	INC	BANK0_TEMP0
	SUBA	BANK0_TEMP0,@16
	JPNZ	DISP_CID_NAME_LOOP
	JMP	DISP_CID_NAME_END
DISP_CID_NAME_NONAME:
	JMP	DISP_CID_NAME_END
DISP_CID_NAME_PRIVATE:
	JMP	DISP_CID_NAME_END
DISP_CID_NAME_END:
	MOV	A,@CH_END
	CALL	#VGA_STR
	
	RET


CID_DECODE	MACRO
	PAGE	#FSK_DECODE
	CALL	FSK_DECODE
	CALL	DTMF_DECODE
	CALL	CID_STORE
	PAGE	#($)
	ENDM

