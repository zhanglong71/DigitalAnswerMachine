ORG	0X1400
/***************************************
按控制器的模式输入显示值。

按顺序依次输入到缓冲区中，
依照风格将缓冲区中的数值整理到显示区中

缓冲区大小32
显示区大小16

控制器标志：
.6~.5	风格选择
***************************************/


; 显示印花，调用一次即刷新8个印花。
VGA_STAMP:
	MOV	TEMP0,A
	CIDBANK	0
	MOV	_RC,@(LCD_CTRL+1)
	MOV	_RD,TEMP0
	RET

; 显示第一行的数字，每调用一次，依次存入在数字寄存器中。
; 第一行只有一种模式
VGA_NUM1:
	MOV	TEMP0,A
	CIDBANK	0
	MOV	_RC,@(VGA_ADDR+2)
	SUBA	TEMP0,@CH_END
	JPZ	VGA_NUM1_END
	MOV	A,_RD
	JPZ	VGA_NUM1_BEGIN
	AND	A,@0X1F
	MOV	TEMP1,A
	SUB	A,@10
	JPNC	VGA_NUM1_RET				; >=10超过要求，数据丢弃
	INC	_RD
	ADDA	TEMP1,@(LCD_CTRL+1)
	MOV	_RC,A
	MOV	_RD,TEMP0
VGA_NUM1_RET:
	RET
	;JMP	VIEW_REVISE_NUM1

VGA_NUM1_BEGIN:
	INC	_RD
	;CLRCIDRAM	@(LCD_CTRL+2),@10,@NUM_BLANK
	RET
	;CALL	BLANK_NUM1
	;JMP	VIEW_REVISE_NUM1

VGA_NUM1_END:
	CLR	_RD
	RET
	

; 显示第二行的数字
; 依次存入到寄存器中。
VGA_NUM2:
	MOV	TEMP0,A
	CIDBANK	0
	;MOV	_RC,@LCD_CTRL
	;SRAM	_RD,5
	MOV	_RC,@(VGA_ADDR+13)
	SUBA	TEMP0,@CH_END
	JPZ	VGA_NUM2_END
	MOV	A,_RD
	JPZ	VGA_NUM2_BEGIN
	AND	A,@0X1F
	MOV	TEMP1,A
	SUB	A,@32			; >32超过要求
	JPNC	VGA_NUM2_RET
	INC	_RD
	ADDA	TEMP1,@(VGA_ADDR+13)
	MOV	_RC,A
	MOV	_RD,TEMP0
VGA_NUM2_RET:
	JMP	VIEW_REVISE_NUM2
VGA_NUM2_BEGIN:
	MOV	_RD,TEMP0
	INC	_RD
	CLRCIDRAM	@(VGA_ADDR+14),@32,@NUM_BLANK
	JMP	VIEW_REVISE_NUM2

VGA_NUM2_END:
	CLR	_RD
	RET

; 显示第二行的数字
; 依次存入到寄存器中。
VGA_STR:
	MOV	TEMP0,A
	CIDBANK	0
	;MOV	_RC,@LCD_CTRL
	;SRAM	_RD,6
	MOV	_RC,@(VGA_ADDR+46)
	SUBA	TEMP0,@CH_END
	JPZ	VGA_STR_END
	MOV	A,_RD
	JPZ	VGA_STR_BEGIN
	AND	A,@0X1F
	MOV	TEMP1,A
	SUB	A,@32			; >32超过要求
	JPNC	VGA_STR_RET
	;MOV	_RC,@(VGA_ADDR+46)
	INC	_RD
	ADDA	TEMP1,@(VGA_ADDR+46)
	MOV	_RC,A
	MOV	_RD,TEMP0
VGA_STR_RET:
	;RET
	JMP	VIEW_REVISE_STR

VGA_STR_BEGIN:
	MOV	_RD,TEMP0
	INC	_RD
	CLRCIDRAM	@(VGA_ADDR+47),@32,@CH_BLANK
	;RET
	JMP	VIEW_REVISE_STR

VGA_STR_END:
	CLR	_RD
	RET

CLR_STAMP:
	CIDBANK	0
	MOV	_RC,@(LCD_CTRL+1)
	CLR	_RD
	RET

CLR_NUM1:
	MOV	TEMP0,@(LCD_CTRL+2)
	MOV	TEMP1,@10
	MOV	A,@NUM_BLANK
	JMP	CLR_LCD
	

CLR_NUM2:
	MOV	TEMP0,@(LCD_CTRL+12)
	MOV	TEMP1,@16
	MOV	A,@NUM_BLANK
	JMP	CLR_LCD
	

CLR_STR:
	MOV	TEMP0,@(LCD_CTRL+28)
	MOV	TEMP1,@16
	MOV	A,@CH_BLANK
	JMP	CLR_LCD
	
CLR_LCD:
	MOV	TEMP2,A
	CIDBANK	0
	CALL	#CLR_CIDRAM
	RET


/***************************************
风格显示
按照控制器中的显示风格将缓冲区的数值放到显示区中

***************************************/


VIEW_REVISE:
;VIEW_REVISE_NUM1:				; 第一行数字
	; 第一行没有风格显示
;	COPYCIDRAM	@(VGA_ADDR+3),@(LCD_CTRL+2),@(LCD_CTRL+2+10)


VIEW_REVISE_NUM2:				; 第二行数字
	;CLRCIDRAM	@(LCD_CTRL+12),@16,@NUM_BLANK
	MOV	_RC,@(VGA_ADDR+13)
	MOV	A,_RD
	JPZ	VIEW_REVISE_RET			; 控制器==0
	
	MOV	TEMP0,A
	SWAP	TEMP0
	RRCA	TEMP0
	AND	A,@0X03
	TBL
	JMP	VIEW_REVISE_NUM2_NORMAL
	JMP	VIEW_REVISE_NUM2_LEFT
	JMP	VIEW_REVISE_NUM2_RIGHT
	JMP	VIEW_REVISE_NUM2_CENTER
	
VIEW_REVISE_NUM2_NORMAL:
	MOV	TEMP0,@(VGA_ADDR+14)
	MOV	TEMP1,@(LCD_CTRL+12)
	MOV	TEMP2,@(LCD_CTRL+12+16)
	JMP	VIEW_REVISE_NUM2_1
VIEW_REVISE_NUM2_LEFT:
	CHKLEFTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
	MOV	TEMP0,A
	SUBA	TEMP0,@16
	JPC	VIEW_REVISE_NUM2_LEFT_LEAN
	ADD	TEMP0,@(VGA_ADDR+14)
	MOV	TEMP1,@(LCD_CTRL+12)
	MOV	TEMP2,@(LCD_CTRL+12+16)
	JMP	VIEW_REVISE_NUM2_1
VIEW_REVISE_NUM2_LEFT_LEAN:
	MOV	TEMP3,A
	ADD	TEMP0,@(VGA_ADDR+14)
	MOV	TEMP1,@(LCD_CTRL+12)
	MOV	TEMP2,@(LCD_CTRL+12+16)
	SUB	TEMP2,TEMP3
	JMP	VIEW_REVISE_NUM2_1
VIEW_REVISE_NUM2_RIGHT:
	CHKRIGHTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
	MOV	TEMP0,A
	SUBA	TEMP0,@16
	JPNC	VIEW_REVISE_NUM2_RIGHT_FULL
	MOV	TEMP1,A
	MOV	TEMP0,@(VGA_ADDR+14)
	ADD	TEMP1,@(LCD_CTRL+12)
	MOV	TEMP2,@(LCD_CTRL+12+16)
	
	JMP	VIEW_REVISE_NUM2_1
VIEW_REVISE_NUM2_RIGHT_FULL:
	MOV	A,TEMP0
	SUB	A,@16
	ADD	A,@(VGA_ADDR+14)
	MOV	TEMP0,A
	MOV	TEMP1,@(LCD_CTRL+12)
	MOV	TEMP2,@(LCD_CTRL+12+16)
	JMP	VIEW_REVISE_NUM2_1
	
VIEW_REVISE_NUM2_CENTER:
	CHKLEFTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
	MOV	TEMP5,A
	SUB	A,@32
	JPZ	VIEW_REVISE_NUM2_NONE
	CHKRIGHTBLANK	@(VGA_ADDR+14),@32,@NUM_BLANK
	ADD	A,TEMP5
	MOV	TEMP0,A
	SUB	TEMP0,@16
	JPNC	VIEW_REVISE_NUM2_FULL		; 空字符少于16，说明字符超过16个
	CLRC
	RRCA	TEMP0
	ADD	A,@(LCD_CTRL+12)
	MOV	TEMP1,A				; 目的地址
	ADDA	TEMP5,@(VGA_ADDR+14)
	MOV	TEMP0,A
	MOV	TEMP2,@(LCD_CTRL+12+16)
	JMP	VIEW_REVISE_NUM2_1

VIEW_REVISE_NUM2_FULL:
	MOV	A,TEMP5
	ADD	A,@(VGA_ADDR+14)
	MOV	TEMP0,A
	MOV	TEMP1,@(LCD_CTRL+12)
	MOV	TEMP2,@(LCD_CTRL+12+16)
	;JMP	VIEW_REVISE_NUM2_1

VIEW_REVISE_NUM2_1:
	CALL	#COPY_CIDRAM
VIEW_REVISE_NUM2_NONE:
	RET

VIEW_REVISE_STR:				; 第三行字符
	;CLRCIDRAM	@(LCD_CTRL+28),@16,@CH_BLANK
	MOV	_RC,@(VGA_ADDR+46)
	MOV	A,_RD
	JPZ	VIEW_REVISE_RET			; 控制器==0
	
	MOV	TEMP0,A
	SWAP	TEMP0
	RRCA	TEMP0
	AND	A,@0X03
	TBL
	JMP	VIEW_REVISE_STR_NORMAL
	JMP	VIEW_REVISE_STR_LEFT
	JMP	VIEW_REVISE_STR_RIGHT
	JMP	VIEW_REVISE_STR_CENTER
	
VIEW_REVISE_STR_NORMAL:
	MOV	TEMP0,@(VGA_ADDR+47)
	MOV	TEMP1,@(LCD_CTRL+28)
	MOV	TEMP2,@(LCD_CTRL+28+16)
	JMP	VIEW_REVISE_STR_1
VIEW_REVISE_STR_LEFT:
	CHKLEFTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
	MOV	TEMP0,A
	SUBA	TEMP0,@16
	JPC	VIEW_REVISE_STR_LEFT_LEAN
	ADD	TEMP0,@(VGA_ADDR+47)
	MOV	TEMP1,@(LCD_CTRL+28)
	MOV	TEMP2,@(LCD_CTRL+28+16)
	JMP	VIEW_REVISE_STR_1
VIEW_REVISE_STR_LEFT_LEAN:
	MOV	TEMP3,A
	ADD	TEMP0,@(VGA_ADDR+28)
	MOV	TEMP1,@(LCD_CTRL+28)
	MOV	TEMP2,@(LCD_CTRL+28+16)
	SUB	TEMP2,TEMP3
	JMP	VIEW_REVISE_STR_1
VIEW_REVISE_STR_RIGHT:
	CHKRIGHTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
	MOV	TEMP0,A
	SUBA	TEMP0,@16
	JPNC	VIEW_REVISE_STR_RIGHT_FULL
	MOV	TEMP1,A
	MOV	TEMP0,@(VGA_ADDR+47)
	ADD	TEMP1,@(LCD_CTRL+28)
	MOV	TEMP2,@(LCD_CTRL+28+16)
	
	JMP	VIEW_REVISE_STR_1
VIEW_REVISE_STR_RIGHT_FULL:
	MOV	A,TEMP0
	SUB	A,@16
	ADD	A,@(VGA_ADDR+47)
	MOV	TEMP0,A
	MOV	TEMP1,@(LCD_CTRL+28)
	MOV	TEMP2,@(LCD_CTRL+28+16)
	JMP	VIEW_REVISE_STR_1
	
VIEW_REVISE_STR_CENTER:
	CHKLEFTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
	MOV	TEMP5,A
	SUB	A,@32
	JPZ	VIEW_REVISE_RET
	CHKRIGHTBLANK	@(VGA_ADDR+47),@32,@CH_BLANK
	ADD	A,TEMP5
	MOV	TEMP0,A
	SUB	TEMP0,@16
	JPNC	VIEW_REVISE_STR_FULL		; 空字符少于16，说明字符超过16个
	CLRC
	RRCA	TEMP0
	ADD	A,@(LCD_CTRL+28)
	MOV	TEMP1,A				; 目的地址
	ADDA	TEMP5,@(VGA_ADDR+47)
	MOV	TEMP0,A
	MOV	TEMP2,@(LCD_CTRL+28+16)
	JMP	VIEW_REVISE_STR_1
	
VIEW_REVISE_STR_FULL:
	MOV	A,TEMP5
	ADD	A,@(VGA_ADDR+47)
	MOV	TEMP0,A
	MOV	TEMP1,@(LCD_CTRL+28)
	MOV	TEMP2,@(LCD_CTRL+28+16)
	;JMP	VIEW_REVISE_STR_1

VIEW_REVISE_STR_1:
	CALL	#COPY_CIDRAM

VIEW_REVISE_RET:
	RET

VGA_HEX_NUM1:
	MOV	A,@0
	JMP	VGA_HEX
VGA_HEX_NUM2:
	MOV	A,@1
	JMP	VGA_HEX
VGA_HEX_STR:
	MOV	A,@2
VGA_HEX:
	BANK	0
	MOV	CONT,A
	CALL	#MATH_HTD
	MOV	STR_REG,A
	MOV	A,CONT
	TBL
	JMP	VGA_HEX_0
	JMP	VGA_HEX_1
	JMP	VGA_HEX_2
VGA_HEX_0:
	SWAPA	STR_REG
	AND	A,@0X0F
	CALL	VGA_NUM1
	ANDA	STR_REG,@0X0F
	CALL	VGA_NUM1
	RET
VGA_HEX_1:
	SWAPA	STR_REG
	AND	A,@0X0F
	CALL	VGA_NUM2
	ANDA	STR_REG,@0X0F
	CALL	VGA_NUM2
	RET
VGA_HEX_2:
	SWAPA	STR_REG
	AND	A,@0X0F
	CALL	VGA_STR
	ANDA	STR_REG,@0X0F
	CALL	VGA_STR
	RET

VGA_STRING:
	BANK	0
	MOV	STR_REG,A
	CLR	CONT
VGA_STRING_LOOP:
	;MOV	A,STR_REG
	ANDA	STR_REG,@0X7F
	TBL
	JMP	VGA_STRING_0
	JMP	VGA_STRING_1
	JMP	VGA_STRING_2
	JMP	VGA_STRING_3
	JMP	VGA_STRING_4
	JMP	VGA_STRING_5
	JMP	VGA_STRING_6
	JMP	VGA_STRING_7
	JMP	VGA_STRING_8
	JMP	VGA_STRING_9
	JMP	VGA_STRING_10
	JMP	VGA_STRING_11
	JMP	VGA_STRING_12
	JMP	VGA_STRING_13
	JMP	VGA_STRING_14
	JMP	VGA_STRING_15
	JMP	VGA_STRING_16
	JMP	VGA_STRING_17
	JMP	VGA_STRING_18
	JMP	VGA_STRING_19
	JMP	VGA_STRING_20
	JMP	VGA_STRING_21
	JMP	VGA_STRING_22
	JMP	VGA_STRING_23
	JMP	VGA_STRING_24
	JMP	VGA_STRING_25
	JMP	VGA_STRING_26
	JMP	VGA_STRING_27
	JMP	VGA_STRING_28
	JMP	VGA_STRING_29
	JMP	VGA_STRING_30
	JMP	VGA_STRING_31
	JMP	VGA_STRING_32
	JMP	VGA_STRING_33
	JMP	VGA_STRING_34
	JMP	VGA_STRING_35
	JMP	VGA_STRING_36
	JMP	VGA_STRING_37
	JMP	VGA_STRING_38
	JMP	VGA_STRING_39
	JMP	VGA_STRING_40
	JMP	VGA_STRING_41
	JMP	VGA_STRING_42

VGA_STRING_0:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_NO_CALL_EN,#SHOW_NO_CALL_GE
	JMP	VGA_STRING1
VGA_STRING_1:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERROR_EN,#SHOW_ERROR_GE
	JMP	VGA_STRING1
VGA_STRING_2:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_TOTAL_EN,#SHOW_TOTAL_GE
	JMP	VGA_STRING1
VGA_STRING_3:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PRIVATE_EN,#SHOW_PRIVATE_GE
	JMP	VGA_STRING1
VGA_STRING_4:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_END_OF_LIST_EN,#SHOW_END_OF_LIST_GE
	JMP	VGA_STRING1
VGA_STRING_5:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PLS_LIFT_HANDSET_EN,#SHOW_PLS_LIFT_HANDSET_GE
	JMP	VGA_STRING1
VGA_STRING_6:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_INITIAL_EN,#SHOW_INITIAL_GE
	JMP	VGA_STRING1
VGA_STRING_7:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASE_EN,#SHOW_ERASE_GE
	JMP	VGA_STRING1
VGA_STRING_8:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASED_EN,#SHOW_ERASED_GE
	JMP	VGA_STRING1
VGA_STRING_9:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASE_ALL_EN,#SHOW_ERASE_ALL_GE
	JMP	VGA_STRING1
VGA_STRING_10:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ERASED_ALL_EN,#SHOW_ERASED_ALL_GE
	JMP	VGA_STRING1
VGA_STRING_11:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_MEMO_RECORDING_EN,#SHOW_MEMO_RECORDING_GE
	JMP	VGA_STRING1
VGA_STRING_12:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ICM_RECORDING_EN,#SHOW_ICM_RECORDING_GE
	JMP	VGA_STRING1
VGA_STRING_13:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_2WAY_RECORDING_EN,#SHOW_2WAY_RECORDING_GE
	JMP	VGA_STRING1
VGA_STRING_14:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_NO_NUMBER_EN,#SHOW_NO_NUMBER_GE
	JMP	VGA_STRING1
VGA_STRING_15:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_LONG_DISTANCE_CALL_EN,#SHOW_LONG_DISTANCE_CALL_GE
	JMP	VGA_STRING1
VGA_STRING_16:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_LCD_CONTRAST_EN,#SHOW_LCD_CONTRAST_GE
	JMP	VGA_STRING1
VGA_STRING_17:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SET_RING_EN,#SHOW_SET_RING_GE
	JMP	VGA_STRING1
VGA_STRING_18:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SET_REMOTE_CODE_EN,#SHOW_SET_REMOTE_CODE_GE
	JMP	VGA_STRING1
VGA_STRING_19:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SET_LONG_CODE_EN,#SHOW_SET_LONG_CODE_GE
	JMP	VGA_STRING1
VGA_STRING_20:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM_RECORDING_EN,#SHOW_OGM_RECORDING_GE
	JMP	VGA_STRING1
VGA_STRING_21:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM_PLAYBACK_EN,#SHOW_OGM_PLAYBACK_GE
	JMP	VGA_STRING1
VGA_STRING_22:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_IN_REMOTE_EN,#SHOW_IN_REMOTE_GE
	JMP	VGA_STRING1
VGA_STRING_23:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SUNDAY_EN,#SHOW_SUNDAY_GE
	JMP	VGA_STRING1
VGA_STRING_24:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_MONDAY_EN,#SHOW_MONDAY_GE
	JMP	VGA_STRING1
VGA_STRING_25:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_TUESDAY_EN,#SHOW_TUESDAY_GE
	JMP	VGA_STRING1
VGA_STRING_26:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_WEDNSDAY_EN,#SHOW_WEDNSDAY_GE
	JMP	VGA_STRING1
VGA_STRING_27:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_THURSDAY_EN,#SHOW_THURSDAY_GE
	JMP	VGA_STRING1
VGA_STRING_28:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_FRIDAY_EN,#SHOW_FRIDAY_GE
	JMP	VGA_STRING1
VGA_STRING_29:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SATURDAY_EN,#SHOW_SATURDAY_GE
	JMP	VGA_STRING1
VGA_STRING_30:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_MEMORY_FULL_EN,#SHOW_MEMORY_FULL_GE
	JMP	VGA_STRING1
VGA_STRING_31:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_NEW_EN,#SHOW_NEW_GE
	JMP	VGA_STRING1
VGA_STRING_32:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_ENGLISH_EN,#SHOW_ENGLISH_GE
	JMP	VGA_STRING1
VGA_STRING_33:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_GERMAN_EN,#SHOW_GERMAN_GE
	JMP	VGA_STRING1
VGA_STRING_34:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_EDIT_EN,#SHOW_EDIT_GE
	JMP	VGA_STRING1
VGA_STRING_35:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_SEARCH_EN,#SHOW_SEARCH_GE
	JMP	VGA_STRING1
VGA_STRING_36:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PLAY_EN,#SHOW_PLAY_GE
	JMP	VGA_STRING1
VGA_STRING_37:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_STOP_EN,#SHOW_STOP_GE
	JMP	VGA_STRING1
VGA_STRING_38:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_PAUSE_EN,#SHOW_PAUSE_GE
	JMP	VGA_STRING1
VGA_STRING_39:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_COPIED_INTO_BOOK_EN,#SHOW_COPIED_INTO_BOOK_GE
	JMP	VGA_STRING1
VGA_STRING_40:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM_EN,#SHOW_OGM_GE
	JMP	VGA_STRING1
VGA_STRING_41:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_END_OF_NAMES_BOOK_EN,#SHOW_END_OF_NAMES_BOOK_GE
	JMP	VGA_STRING1
VGA_STRING_42:
	FIND_TAB	CONT,SYS_FG,LANGUAGE,#SHOW_OGM__EN,#SHOW_OGM__GE
	JMP	VGA_STRING1

VGA_STRING1:
	MOV	TEMP0,A
	SUB	A,@CH_END
	JPZ	VIEW_REVISE_RET
	JBC	STR_REG,7
	SRAM	TEMP0,7
	MOV	A,TEMP0
	CALL	#VGA_STR
	INC	CONT
	JMP	VGA_STRING_LOOP
;VGA_STRING_RET:
	;RET


FIND_TAB	MACRO	FIND_CONT,LANG_REG,LANG_BIT,#ADDR_EN,#ADDR_GE
	JPB	LANG_REG,LANG_BIT,$+6
	MOV	A,FIND_CONT
	CALL	#ADDR_EN
	JMP	$+5
	MOV	A,FIND_CONT
	CALL	#ADDR_GE
	ENDM



; 显示更新第一行。
ORG	0X1000
VGA_UPDATE:
	BANK	0
	/*
	JPNB	SYS_FG,LOCK_TOPLINE,VGA_UPDATE_1
	CLRC
	RRCA	SEC_REG
	MOV	TEMP1,A
	CLRC
	RRCA	TMR_IDLE
	ADD	A,@30
	MOV	TEMP0,A
	SUB	A,@59
	JPC	$+3
	SUB	TEMP0,@60
	SUBA	TEMP1,TEMP0
	JPZ	VGA_UPDATE_0
	INC	TEMP0
	SUBA	TEMP0,TEMP1
	JPNZ	VGA_UPDATE_1
VGA_UPDATE_0:
	CALL	#STCP_IDLE
	
	*/
VGA_UPDATE_1:
	JPB	SYS_FG,LOCK_TOPLINE,VGA_UPDATE_TIME
	
	CRAM	STAMP_FG,STAMP_SEC
	JPB	SEC_REG,0,$+3
	SRAM	STAMP_FG,STAMP_SEC
	SRAM	SYS_FG,SYS_CLOCK
	MOV	A,STAMP_FG
	CALL	#VGA_STAMP
	JPNB	SYS_FG,SYS_CLOCK,VGA_UPDATE_TIME
	CRAM	SYS_FG,SYS_CLOCK
	
	CALL	UPDATE_STAMP
	CALL	UPDATE_NUM1
	CALL	UPDATE_NUM2
	CALL	UPDATE_STR
VGA_UPDATE_TIME:
	
	BANK	1
	JPNB	SYS_FG,TIME,VGA_UPDATE_RET
	MOV	A,@(STYLE_CENTER)
	CALL	#VGA_NUM2
	MOV	A,TIME_HOUR
	JPZ	VGA_UPDATE_TIME_1
	CALL	UPDATE_TIME
	MOV	A,@0X11
	CALL	#VGA_NUM2
VGA_UPDATE_TIME_1:
	MOV	A,TIME_MIN
	CALL	UPDATE_TIME
	MOV	A,@0X11
	CALL	#VGA_NUM2

	MOV	A,TIME_SEC
	CALL	UPDATE_TIME
	MOV	A,@CH_END
	CALL	#VGA_NUM2

VGA_UPDATE_RET:
	RET
	


UPDATE_TIME:
	MOV	GENE_A,A
	CALL	#MATH_HTD
	MOV	BANK1_TEMP0,RESULT
	SWAPA	BANK1_TEMP0
	AND	A,@0X0F
	CALL	#VGA_NUM2
	ANDA	BANK1_TEMP0,@0X0F
	CALL	#VGA_NUM2
	RET

VGA_HOUR:
	MOV	GENE_A,A
	BANK	1
	JPNB	R1_SYS_FG,TIMEFORMAT,VGA_HOUR_RET
	SUBA	GENE_A,@12
	JPNC	$+2
	MOV	GENE_A,A
	MOV	A,GENE_A
	JPNZ	VGA_HOUR_RET
	MOV	GENE_A,@12
VGA_HOUR_RET:
	BANK	0
	MOV	A,GENE_A

VGA_TIME:
	MOV	GENE_A,A
	CALL	#MATH_HTD
	MOV	BANK0_TEMP0,RESULT
	SWAPA	BANK0_TEMP0
	AND	A,@(0X0F)
	CALL	#VGA_NUM1
	ANDA	BANK0_TEMP0,@(0X0F)
	CALL	#VGA_NUM1
	RET
VGA_MONTH:
	MOV	GENE_A,A
	CALL	#MATH_HTD
	MOV	BANK0_TEMP0,RESULT
	SWAPA	BANK0_TEMP0
	AND	A,@(0X0F)
	JPNZ	$+2
	MOV	A,@NUM_BLANK
	CALL	#VGA_NUM1
	ANDA	BANK0_TEMP0,@(0X0F)
	CALL	#VGA_NUM1
	RET

UPDATE_STAMP:
	CRAM	STAMP_FG,STAMP_NEW
	MOV	A,NEW_CALL
	JPZ	UPDATE_STAMP_RET
	SRAM	STAMP_FG,STAMP_NEW
UPDATE_STAMP_RET:
	RET

UPDATE_NUM1:
	MOV	A,@0
	CALL	#VGA_NUM1
	
	BANK	0
	MOV	A,HOUR_REG
	CALL	VGA_HOUR
	
	MOV	A,MIN_REG
	CALL	VGA_TIME
	
	MOV	A,DAY_REG
	CALL	VGA_TIME
	
	MOV	A,MONTH_REG
	CALL	VGA_MONTH
	
	MOV	A,TOTAL_CALL
	CALL	VGA_TIME
	
	MOV	A,@CH_END
	CALL	#VGA_NUM1
	RET

UPDATE_NUM2:
	RET

UPDATE_STR:
	BANK	0
	JPB	EVENT,0,UPDATE_STR_NAME		; 响铃中，显示人名
	;MOV	A,TMR_NAME
	;JPNZ	UPDATE_STR_RET
	PAGE	#VGA_STR
	MOV	A,@(STYLE_LEFT)
	CALL	VGA_STR
	MOV	A,@WD_NEW
	CALL	VGA_STRING
	MOV	A,@CH_COLON
	CALL	VGA_STR
	MOV	GENE_A,NEW_MSG
	CALL	VGA_HEX_STR
	MOV	A,@CH_END
	CALL	VGA_STR
	
	MOV	A,@(STYLE_RIGHT)
	CALL	VGA_STR
	MOV	A,@WD_TOTAL
	CALL	VGA_STRING
	MOV	A,@CH_COLON
	CALL	VGA_STR
	MOV	GENE_A,TOTAL_MSG
	CALL	VGA_HEX_STR
	MOV	A,@CH_END
	CALL	VGA_STR
	PAGE	#($)
	
	CALL	#CLR_NUM2
	JMP	UPDATE_STR_RET
UPDATE_STR_NAME:
	JPB	_FSR,0,UPDATE_STR_INVALID
	MOV	TMR_NAME,@16
	RET
UPDATE_STR_INVALID:
	MOV	A,TMR_NAME
	JPNZ	UPDATE_STR_RET
	CRAM	EVENT,0
UPDATE_STR_RET:
	RET
	